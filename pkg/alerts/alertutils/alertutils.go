/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package alertutils

import (
	"time"

	"github.com/go-co-op/gocron"
)

type AlertDetails struct {
	AlertId         string              `json:"alert_id" gorm:"primaryKey"`
	AlertName       string              `json:"alert_name" gorm:"not null;unique"`
	State           AlertState          `json:"state"`
	CreateTimestamp time.Time           `json:"create_timestamp" gorm:"autoCreateTime:milli" `
	ContactID       string              `json:"contact_id" gorm:"foreignKey:ContactId;"`
	ContactName     string              `json:"contact_name"`
	Labels          []AlertLabel        `json:"labels" gorm:"many2many:label_alerts"`
	SilenceMinutes  uint64              `json:"silence_minutes"`
	QueryParams     QueryParams         `json:"queryParams" gorm:"embedded"`
	Condition       AlertQueryCondition `json:"condition"`
	Value           float32             `json:"value"`
	EvalFor         uint64              `json:"eval_for"`
	EvalInterval    uint64              `json:"eval_interval"`
	Message         string              `json:"message"`
	CronJob         gocron.Job          `json:"cron_job" gorm:"embedded"`
	NodeId          uint64              `json:"node_id"`
	NotificationID  string              `json:"notification_id" gorm:"foreignKey:NotificationId;"`
}

func (AlertDetails) TableName() string {
	return "all_alerts"
}

type AlertLabel struct {
	LabelName  string `json:"label_name" gorm:"primaryKey;size:256;not null;"` //unique
	LabelValue string `json:"label_value"`
}

// TableName overrides the default tablename generated by GORM
func (AlertLabel) TableName() string {
	return "alert_labels"
}

type AlertHistoryDetails struct {
	ID               uint      `gorm:"primaryKey;autoIncrement:true"`
	AlertId          string    `json:"alert_id"`
	EventDescription string    `json:"event_description"`
	UserName         string    `json:"user_name"`
	EventTriggeredAt time.Time `json:"event_triggered_at"`
}

func (AlertHistoryDetails) TableName() string {
	return "alert_history_details"
}

type QueryParams struct {
	DataSource    string `json:"data_source"`
	QueryLanguage string `json:"queryLanguage"`
	QueryText     string `json:"queryText"`
	StartTime     string `json:"startTime"`
	EndTime       string `json:"endTime"`
}
type Alert struct {
	Status string
}

type WebhookBody struct {
	Receiver string
	Status   string
	Title    string
	Body     string
	Alerts   []Alert
}

type Contact struct {
	ContactId   string             `json:"contact_id" gorm:"primaryKey"`
	ContactName string             `json:"contact_name" gorm:"not null;unique"`
	Email       []string           `json:"email" gorm:"type:text[]"`
	Slack       []SlackTokenConfig `json:"slack" gorm:"many2many:slack_contact;auto_preload"`
	PagerDuty   string             `json:"pager_duty"`
	Webhook     []string           `json:"webhook" gorm:"type:text[]"`
}

type SlackTokenConfig struct {
	ID        uint   `gorm:"primaryKey;autoIncrement:true"`
	ChannelId string `json:"channel_id"`
	SlToken   string `json:"slack_token"`
}

func (SlackTokenConfig) TableName() string {
	return "slack_token"
}

type Notification struct {
	NotificationId string    `json:"notification_id" gorm:"primaryKey"`
	CooldownPeriod uint64    `json:"cooldown_period"`
	LastSentTime   time.Time `json:"last_sent_time"`
	AlertId        string    `json:"-"`
}

func (Notification) TableName() string {
	return "notification_details"
}

type AlertQueryCondition uint8 // condition for the alert queries
const (
	IsAbove AlertQueryCondition = iota
	IsBelow
	IsEqualTo
	IsNotEqualTo
	HasNoValue
)

type AlertState uint8 // state of the alerts
const (
	Inactive AlertState = iota
	Pending
	Firing
	SystemGeneratedAlert = "System Generated"
	UserModified         = "User Modified"
	AlertFiring          = "Alert Firing"
	AlertNormal          = "Alert Normal"
	ConfigChange         = "Config Modified"
)

// This MUST be synced with how https://github.com/sigscalr/logminion structures
// its output JSON.
type LogLinesFile struct {
	Version   string          `json:"version,omitempty"`
	LogAlerts []LogLinesEntry `json:"log_alerts,omitempty"`
}

// This MUST be synced with how https://github.com/sigscalr/logminion structures
// its output JSON.
type LogLinesEntry struct {
	Repository    string `json:"repository,omitempty"`
	Filename      string `json:"filename,omitempty"`
	LineNumber    int    `json:"line_number,omitempty"`
	LogText       string `json:"log_text,omitempty"`
	LogTextHash   string `json:"log_text_hash,omitempty"`
	QueryLanguage string `json:"query_language,omitempty"`
	Query         string `json:"query,omitempty"`
	Condition     string `json:"condition,omitempty"`
	Value         int    `json:"value,omitempty"`
	LogLevel      string `json:"log_level,omitempty"`
}

type MinionSearch struct {
	AlertId         string              `json:"alert_id" gorm:"primaryKey"`
	AlertName       string              `json:"alert_name" gorm:"not null;unique"`
	State           AlertState          `json:"state"`
	CreateTimestamp time.Time           `json:"create_timestamp" gorm:"autoCreateTime:milli" `
	ContactID       string              `json:"contact_id" gorm:"foreignKey:ContactId;"`
	ContactName     string              `json:"contact_name"`
	Labels          []AlertLabel        `json:"labels" gorm:"many2many:label_alerts"`
	SilenceMinutes  uint64              `json:"silence_minutes"`
	QueryParams     QueryParams         `json:"queryParams" gorm:"embedded"`
	Condition       AlertQueryCondition `json:"condition"`
	Value           float32             `json:"value"`
	EvalFor         uint64              `json:"eval_for"`
	EvalInterval    uint64              `json:"eval_interval"`
	Message         string              `json:"message"`
	CronJob         gocron.Job          `json:"cron_job" gorm:"embedded"`
	NodeId          uint64              `json:"node_id"`
	Repository      string              `json:"repository,omitempty"`
	Filename        string              `json:"filename,omitempty"`
	LineNumber      int                 `json:"line_number,omitempty"`
	LogText         string              `json:"log_text,omitempty"`
	LogTextHash     string              `json:"log_text_hash,omitempty"`
	LogLevel        string              `json:"log_level,omitempty"`
}

func (MinionSearch) TableName() string {
	return "minion_searches"
}
