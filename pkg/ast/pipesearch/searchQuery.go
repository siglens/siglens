// Code generated by pigeon; DO NOT EDIT.

package pipesearch

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/siglens/siglens/pkg/ast"
	"github.com/siglens/siglens/pkg/segment/structs"
	"github.com/siglens/siglens/pkg/segment/utils"
)

// helper method to exfiltrate pigeon's generated error type
func getParseError(err error) error {
	switch ev := err.(type) {
	case errList:
		if pe, ok := ev[0].(*parserError); ok {
			return &ast.ParseError{
				Inner:    pe.Inner,
				Line:     pe.pos.line,
				Column:   pe.pos.col,
				Offset:   pe.pos.offset,
				Prefix:   pe.prefix,
				Expected: pe.expected,
			}
		}
	}
	return err
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Start",
			pos:  position{line: 30, col: 1, offset: 597},
			expr: &choiceExpr{
				pos: position{line: 30, col: 10, offset: 606},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 30, col: 10, offset: 606},
						run: (*parser).callonStart2,
						expr: &seqExpr{
							pos: position{line: 30, col: 10, offset: 606},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 30, col: 10, offset: 606},
									label: "maggs",
									expr: &zeroOrOneExpr{
										pos: position{line: 30, col: 16, offset: 612},
										expr: &ruleRefExpr{
											pos:  position{line: 30, col: 16, offset: 612},
											name: "measureAggsList",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 33, offset: 629},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 36, col: 5, offset: 789},
						run: (*parser).callonStart8,
						expr: &seqExpr{
							pos: position{line: 36, col: 5, offset: 789},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 36, col: 5, offset: 789},
									label: "groupBy",
									expr: &zeroOrOneExpr{
										pos: position{line: 36, col: 13, offset: 797},
										expr: &ruleRefExpr{
											pos:  position{line: 36, col: 13, offset: 797},
											name: "groupByList",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 36, col: 26, offset: 810},
									expr: &ruleRefExpr{
										pos:  position{line: 36, col: 26, offset: 810},
										name: "space",
									},
								},
								&labeledExpr{
									pos:   position{line: 36, col: 33, offset: 817},
									label: "lim",
									expr: &zeroOrOneExpr{
										pos: position{line: 36, col: 37, offset: 821},
										expr: &ruleRefExpr{
											pos:  position{line: 36, col: 37, offset: 821},
											name: "Limit",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 36, col: 44, offset: 828},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 44, col: 5, offset: 1059},
						run: (*parser).callonStart19,
						expr: &seqExpr{
							pos: position{line: 44, col: 5, offset: 1059},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 44, col: 5, offset: 1059},
									label: "query",
									expr: &zeroOrOneExpr{
										pos: position{line: 44, col: 11, offset: 1065},
										expr: &ruleRefExpr{
											pos:  position{line: 44, col: 11, offset: 1065},
											name: "Query",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 44, col: 18, offset: 1072},
									label: "aggs",
									expr: &zeroOrOneExpr{
										pos: position{line: 44, col: 23, offset: 1077},
										expr: &ruleRefExpr{
											pos:  position{line: 44, col: 23, offset: 1077},
											name: "AggClause",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 44, col: 34, offset: 1088},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 53, col: 5, offset: 1295},
						run: (*parser).callonStart28,
						expr: &seqExpr{
							pos: position{line: 53, col: 5, offset: 1295},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 53, col: 5, offset: 1295},
									label: "query",
									expr: &zeroOrOneExpr{
										pos: position{line: 53, col: 11, offset: 1301},
										expr: &ruleRefExpr{
											pos:  position{line: 53, col: 11, offset: 1301},
											name: "Query",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 53, col: 18, offset: 1308},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 59, col: 5, offset: 1431},
						run: (*parser).callonStart34,
						expr: &seqExpr{
							pos: position{line: 59, col: 5, offset: 1431},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 59, col: 5, offset: 1431},
									label: "aggs",
									expr: &zeroOrOneExpr{
										pos: position{line: 59, col: 10, offset: 1436},
										expr: &ruleRefExpr{
											pos:  position{line: 59, col: 10, offset: 1436},
											name: "AggClause",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 21, offset: 1447},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Query",
			pos:  position{line: 67, col: 1, offset: 1584},
			expr: &actionExpr{
				pos: position{line: 67, col: 10, offset: 1593},
				run: (*parser).callonQuery1,
				expr: &seqExpr{
					pos: position{line: 67, col: 10, offset: 1593},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 67, col: 10, offset: 1593},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 67, col: 12, offset: 1595},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 67, col: 19, offset: 1602},
								name: "OrClause",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 67, col: 28, offset: 1611},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "OrClause",
			pos:  position{line: 75, col: 1, offset: 1661},
			expr: &choiceExpr{
				pos: position{line: 75, col: 13, offset: 1673},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 75, col: 13, offset: 1673},
						run: (*parser).callonOrClause2,
						expr: &seqExpr{
							pos: position{line: 75, col: 13, offset: 1673},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 75, col: 13, offset: 1673},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 75, col: 17, offset: 1677},
										name: "AndClause",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 27, offset: 1687},
									name: "space",
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 33, offset: 1693},
									name: "logicalOR",
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 43, offset: 1703},
									name: "space",
								},
								&labeledExpr{
									pos:   position{line: 75, col: 49, offset: 1709},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 75, col: 53, offset: 1713},
										name: "OrClause",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 81, col: 5, offset: 1857},
						name: "AndClause",
					},
				},
			},
		},
		{
			name: "measureAggsList",
			pos:  position{line: 84, col: 1, offset: 1869},
			expr: &actionExpr{
				pos: position{line: 84, col: 20, offset: 1888},
				run: (*parser).callonmeasureAggsList1,
				expr: &seqExpr{
					pos: position{line: 84, col: 20, offset: 1888},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 84, col: 20, offset: 1888},
							expr: &ruleRefExpr{
								pos:  position{line: 84, col: 20, offset: 1888},
								name: "space",
							},
						},
						&labeledExpr{
							pos:   position{line: 84, col: 27, offset: 1895},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 84, col: 33, offset: 1901},
								name: "MeasureAggClause",
							},
						},
						&labeledExpr{
							pos:   position{line: 84, col: 50, offset: 1918},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 84, col: 55, offset: 1923},
								expr: &seqExpr{
									pos: position{line: 84, col: 57, offset: 1925},
									exprs: []any{
										&zeroOrOneExpr{
											pos: position{line: 84, col: 57, offset: 1925},
											expr: &ruleRefExpr{
												pos:  position{line: 84, col: 57, offset: 1925},
												name: "space",
											},
										},
										&litMatcher{
											pos:        position{line: 84, col: 64, offset: 1932},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 84, col: 68, offset: 1936},
											expr: &ruleRefExpr{
												pos:  position{line: 84, col: 68, offset: 1936},
												name: "space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 84, col: 75, offset: 1943},
											name: "MeasureAggClause",
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 84, col: 95, offset: 1963},
							expr: &ruleRefExpr{
								pos:  position{line: 84, col: 95, offset: 1963},
								name: "space",
							},
						},
					},
				},
			},
		},
		{
			name: "groupByList",
			pos:  position{line: 88, col: 1, offset: 2032},
			expr: &actionExpr{
				pos: position{line: 88, col: 16, offset: 2047},
				run: (*parser).callongroupByList1,
				expr: &seqExpr{
					pos: position{line: 88, col: 16, offset: 2047},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 88, col: 16, offset: 2047},
							expr: &ruleRefExpr{
								pos:  position{line: 88, col: 16, offset: 2047},
								name: "space",
							},
						},
						&labeledExpr{
							pos:   position{line: 88, col: 23, offset: 2054},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 88, col: 29, offset: 2060},
								name: "MeasureAggClause",
							},
						},
						&labeledExpr{
							pos:   position{line: 88, col: 46, offset: 2077},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 88, col: 51, offset: 2082},
								expr: &seqExpr{
									pos: position{line: 88, col: 53, offset: 2084},
									exprs: []any{
										&zeroOrOneExpr{
											pos: position{line: 88, col: 53, offset: 2084},
											expr: &ruleRefExpr{
												pos:  position{line: 88, col: 53, offset: 2084},
												name: "space",
											},
										},
										&litMatcher{
											pos:        position{line: 88, col: 60, offset: 2091},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 88, col: 64, offset: 2095},
											expr: &ruleRefExpr{
												pos:  position{line: 88, col: 64, offset: 2095},
												name: "space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 88, col: 71, offset: 2102},
											name: "MeasureAggClause",
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 88, col: 91, offset: 2122},
							expr: &ruleRefExpr{
								pos:  position{line: 88, col: 91, offset: 2122},
								name: "space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 88, col: 98, offset: 2129},
							name: "GroupBy",
						},
						&labeledExpr{
							pos:   position{line: 88, col: 106, offset: 2137},
							label: "cols",
							expr: &zeroOrOneExpr{
								pos: position{line: 88, col: 111, offset: 2142},
								expr: &ruleRefExpr{
									pos:  position{line: 88, col: 112, offset: 2143},
									name: "ColList",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 88, col: 122, offset: 2153},
							expr: &ruleRefExpr{
								pos:  position{line: 88, col: 122, offset: 2153},
								name: "space",
							},
						},
						&labeledExpr{
							pos:   position{line: 88, col: 129, offset: 2160},
							label: "lim",
							expr: &zeroOrOneExpr{
								pos: position{line: 88, col: 133, offset: 2164},
								expr: &ruleRefExpr{
									pos:  position{line: 88, col: 133, offset: 2164},
									name: "Limit",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Limit",
			pos:  position{line: 96, col: 1, offset: 2324},
			expr: &actionExpr{
				pos: position{line: 96, col: 10, offset: 2333},
				run: (*parser).callonLimit1,
				expr: &seqExpr{
					pos: position{line: 96, col: 10, offset: 2333},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 96, col: 10, offset: 2333},
							val:        "limit",
							ignoreCase: false,
							want:       "\"limit\"",
						},
						&ruleRefExpr{
							pos:  position{line: 96, col: 18, offset: 2341},
							name: "space",
						},
						&labeledExpr{
							pos:   position{line: 96, col: 24, offset: 2347},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 96, col: 30, offset: 2353},
								name: "Identifier",
							},
						},
					},
				},
			},
		},
		{
			name: "MeasureAggClause",
			pos:  position{line: 105, col: 1, offset: 2500},
			expr: &actionExpr{
				pos: position{line: 105, col: 21, offset: 2520},
				run: (*parser).callonMeasureAggClause1,
				expr: &seqExpr{
					pos: position{line: 105, col: 21, offset: 2520},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 105, col: 21, offset: 2520},
							expr: &ruleRefExpr{
								pos:  position{line: 105, col: 21, offset: 2520},
								name: "space",
							},
						},
						&labeledExpr{
							pos:   position{line: 105, col: 28, offset: 2527},
							label: "funcs",
							expr: &ruleRefExpr{
								pos:  position{line: 105, col: 34, offset: 2533},
								name: "MeasureAggsFunc",
							},
						},
						&litMatcher{
							pos:        position{line: 105, col: 50, offset: 2549},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&labeledExpr{
							pos:   position{line: 105, col: 54, offset: 2553},
							label: "cols",
							expr: &ruleRefExpr{
								pos:  position{line: 105, col: 59, offset: 2558},
								name: "Identifier",
							},
						},
						&litMatcher{
							pos:        position{line: 105, col: 70, offset: 2569},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "AggClause",
			pos:  position{line: 114, col: 1, offset: 2769},
			expr: &choiceExpr{
				pos: position{line: 114, col: 14, offset: 2782},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 114, col: 14, offset: 2782},
						run: (*parser).callonAggClause2,
						expr: &seqExpr{
							pos: position{line: 114, col: 14, offset: 2782},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 114, col: 14, offset: 2782},
									name: "opPipe",
								},
								&zeroOrOneExpr{
									pos: position{line: 114, col: 21, offset: 2789},
									expr: &ruleRefExpr{
										pos:  position{line: 114, col: 21, offset: 2789},
										name: "space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 114, col: 28, offset: 2796},
									name: "Column",
								},
								&ruleRefExpr{
									pos:  position{line: 114, col: 35, offset: 2803},
									name: "space",
								},
								&labeledExpr{
									pos:   position{line: 114, col: 42, offset: 2810},
									label: "newCol",
									expr: &ruleRefExpr{
										pos:  position{line: 114, col: 49, offset: 2817},
										name: "Identifier",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 114, col: 60, offset: 2828},
									expr: &ruleRefExpr{
										pos:  position{line: 114, col: 60, offset: 2828},
										name: "space",
									},
								},
								&litMatcher{
									pos:        position{line: 114, col: 67, offset: 2835},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&zeroOrOneExpr{
									pos: position{line: 114, col: 71, offset: 2839},
									expr: &ruleRefExpr{
										pos:  position{line: 114, col: 71, offset: 2839},
										name: "space",
									},
								},
								&labeledExpr{
									pos:   position{line: 114, col: 78, offset: 2846},
									label: "oldCol",
									expr: &ruleRefExpr{
										pos:  position{line: 114, col: 85, offset: 2853},
										name: "Identifier",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 123, col: 3, offset: 3290},
						run: (*parser).callonAggClause18,
						expr: &seqExpr{
							pos: position{line: 123, col: 3, offset: 3290},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 123, col: 3, offset: 3290},
									name: "opPipe",
								},
								&zeroOrOneExpr{
									pos: position{line: 123, col: 10, offset: 3297},
									expr: &ruleRefExpr{
										pos:  position{line: 123, col: 10, offset: 3297},
										name: "space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 123, col: 17, offset: 3304},
									name: "Column",
								},
								&ruleRefExpr{
									pos:  position{line: 123, col: 24, offset: 3311},
									name: "space",
								},
								&labeledExpr{
									pos:   position{line: 123, col: 30, offset: 3317},
									label: "cols",
									expr: &ruleRefExpr{
										pos:  position{line: 123, col: 35, offset: 3322},
										name: "ColList",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 131, col: 3, offset: 3658},
						run: (*parser).callonAggClause27,
						expr: &seqExpr{
							pos: position{line: 131, col: 3, offset: 3658},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 131, col: 3, offset: 3658},
									name: "opPipe",
								},
								&zeroOrOneExpr{
									pos: position{line: 131, col: 10, offset: 3665},
									expr: &ruleRefExpr{
										pos:  position{line: 131, col: 10, offset: 3665},
										name: "space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 131, col: 17, offset: 3672},
									name: "Column",
								},
								&ruleRefExpr{
									pos:  position{line: 131, col: 24, offset: 3679},
									name: "space",
								},
								&litMatcher{
									pos:        position{line: 131, col: 30, offset: 3685},
									val:        "-",
									ignoreCase: false,
									want:       "\"-\"",
								},
								&ruleRefExpr{
									pos:  position{line: 131, col: 34, offset: 3689},
									name: "space",
								},
								&labeledExpr{
									pos:   position{line: 131, col: 40, offset: 3695},
									label: "cols",
									expr: &ruleRefExpr{
										pos:  position{line: 131, col: 45, offset: 3700},
										name: "ColList",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 139, col: 3, offset: 4036},
						run: (*parser).callonAggClause38,
						expr: &seqExpr{
							pos: position{line: 139, col: 3, offset: 4036},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 139, col: 3, offset: 4036},
									name: "opPipe",
								},
								&zeroOrOneExpr{
									pos: position{line: 139, col: 10, offset: 4043},
									expr: &ruleRefExpr{
										pos:  position{line: 139, col: 10, offset: 4043},
										name: "space",
									},
								},
								&labeledExpr{
									pos:   position{line: 139, col: 17, offset: 4050},
									label: "maggs",
									expr: &ruleRefExpr{
										pos:  position{line: 139, col: 23, offset: 4056},
										name: "measureAggsList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 139, col: 39, offset: 4072},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 144, col: 3, offset: 4196},
						run: (*parser).callonAggClause46,
						expr: &seqExpr{
							pos: position{line: 144, col: 3, offset: 4196},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 144, col: 3, offset: 4196},
									name: "opPipe",
								},
								&zeroOrOneExpr{
									pos: position{line: 144, col: 10, offset: 4203},
									expr: &ruleRefExpr{
										pos:  position{line: 144, col: 10, offset: 4203},
										name: "space",
									},
								},
								&labeledExpr{
									pos:   position{line: 144, col: 17, offset: 4210},
									label: "groupBy",
									expr: &ruleRefExpr{
										pos:  position{line: 144, col: 25, offset: 4218},
										name: "groupByList",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 144, col: 37, offset: 4230},
									expr: &ruleRefExpr{
										pos:  position{line: 144, col: 37, offset: 4230},
										name: "space",
									},
								},
								&labeledExpr{
									pos:   position{line: 144, col: 44, offset: 4237},
									label: "lim",
									expr: &zeroOrOneExpr{
										pos: position{line: 144, col: 48, offset: 4241},
										expr: &ruleRefExpr{
											pos:  position{line: 144, col: 48, offset: 4241},
											name: "Limit",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 144, col: 55, offset: 4248},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 149, col: 3, offset: 4374},
						run: (*parser).callonAggClause59,
						expr: &seqExpr{
							pos: position{line: 149, col: 3, offset: 4374},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 149, col: 3, offset: 4374},
									name: "opPipe",
								},
								&zeroOrOneExpr{
									pos: position{line: 149, col: 10, offset: 4381},
									expr: &ruleRefExpr{
										pos:  position{line: 149, col: 10, offset: 4381},
										name: "space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 149, col: 17, offset: 4388},
									name: "Let",
								},
								&ruleRefExpr{
									pos:  position{line: 149, col: 21, offset: 4392},
									name: "space",
								},
								&labeledExpr{
									pos:   position{line: 149, col: 27, offset: 4398},
									label: "newCol",
									expr: &ruleRefExpr{
										pos:  position{line: 149, col: 34, offset: 4405},
										name: "Identifier",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 149, col: 45, offset: 4416},
									expr: &ruleRefExpr{
										pos:  position{line: 149, col: 45, offset: 4416},
										name: "space",
									},
								},
								&litMatcher{
									pos:        position{line: 149, col: 52, offset: 4423},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&zeroOrOneExpr{
									pos: position{line: 149, col: 56, offset: 4427},
									expr: &ruleRefExpr{
										pos:  position{line: 149, col: 56, offset: 4427},
										name: "space",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 149, col: 63, offset: 4434},
									expr: &litMatcher{
										pos:        position{line: 149, col: 63, offset: 4434},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 149, col: 68, offset: 4439},
									expr: &ruleRefExpr{
										pos:  position{line: 149, col: 68, offset: 4439},
										name: "space",
									},
								},
								&labeledExpr{
									pos:   position{line: 149, col: 75, offset: 4446},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 149, col: 79, offset: 4450},
										name: "Identifier",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 149, col: 90, offset: 4461},
									expr: &ruleRefExpr{
										pos:  position{line: 149, col: 90, offset: 4461},
										name: "space",
									},
								},
								&labeledExpr{
									pos:   position{line: 149, col: 97, offset: 4468},
									label: "operation",
									expr: &ruleRefExpr{
										pos:  position{line: 149, col: 107, offset: 4478},
										name: "LetOpr",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 150, col: 1, offset: 4486},
									expr: &ruleRefExpr{
										pos:  position{line: 150, col: 1, offset: 4486},
										name: "space",
									},
								},
								&labeledExpr{
									pos:   position{line: 150, col: 8, offset: 4493},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 150, col: 12, offset: 4497},
										name: "LetIdentifier",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 150, col: 26, offset: 4511},
									expr: &ruleRefExpr{
										pos:  position{line: 150, col: 26, offset: 4511},
										name: "space",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 150, col: 33, offset: 4518},
									expr: &litMatcher{
										pos:        position{line: 150, col: 33, offset: 4518},
										val:        ")",
										ignoreCase: false,
										want:       "\")\"",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 162, col: 3, offset: 5216},
						run: (*parser).callonAggClause91,
						expr: &seqExpr{
							pos: position{line: 162, col: 3, offset: 5216},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 162, col: 3, offset: 5216},
									name: "opPipe",
								},
								&zeroOrOneExpr{
									pos: position{line: 162, col: 10, offset: 5223},
									expr: &ruleRefExpr{
										pos:  position{line: 162, col: 10, offset: 5223},
										name: "space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 162, col: 17, offset: 5230},
									name: "Let",
								},
								&ruleRefExpr{
									pos:  position{line: 162, col: 21, offset: 5234},
									name: "space",
								},
								&labeledExpr{
									pos:   position{line: 162, col: 27, offset: 5240},
									label: "newCol",
									expr: &ruleRefExpr{
										pos:  position{line: 162, col: 34, offset: 5247},
										name: "Identifier",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 162, col: 45, offset: 5258},
									expr: &ruleRefExpr{
										pos:  position{line: 162, col: 45, offset: 5258},
										name: "space",
									},
								},
								&litMatcher{
									pos:        position{line: 162, col: 52, offset: 5265},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&zeroOrOneExpr{
									pos: position{line: 162, col: 56, offset: 5269},
									expr: &ruleRefExpr{
										pos:  position{line: 162, col: 56, offset: 5269},
										name: "space",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 162, col: 63, offset: 5276},
									expr: &litMatcher{
										pos:        position{line: 162, col: 63, offset: 5276},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 162, col: 68, offset: 5281},
									expr: &ruleRefExpr{
										pos:  position{line: 162, col: 68, offset: 5281},
										name: "space",
									},
								},
								&labeledExpr{
									pos:   position{line: 162, col: 75, offset: 5288},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 162, col: 79, offset: 5292},
										name: "Identifier",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 162, col: 90, offset: 5303},
									expr: &ruleRefExpr{
										pos:  position{line: 162, col: 90, offset: 5303},
										name: "space",
									},
								},
								&labeledExpr{
									pos:   position{line: 162, col: 97, offset: 5310},
									label: "operation",
									expr: &ruleRefExpr{
										pos:  position{line: 162, col: 107, offset: 5320},
										name: "LetOpr",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 163, col: 1, offset: 5328},
									expr: &ruleRefExpr{
										pos:  position{line: 163, col: 1, offset: 5328},
										name: "space",
									},
								},
								&labeledExpr{
									pos:   position{line: 163, col: 8, offset: 5335},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 163, col: 12, offset: 5339},
										name: "Identifier",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 163, col: 23, offset: 5350},
									expr: &ruleRefExpr{
										pos:  position{line: 163, col: 23, offset: 5350},
										name: "space",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 163, col: 30, offset: 5357},
									expr: &litMatcher{
										pos:        position{line: 163, col: 30, offset: 5357},
										val:        ")",
										ignoreCase: false,
										want:       "\")\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MeasureAggsFunc",
			pos:  position{line: 176, col: 1, offset: 6047},
			expr: &actionExpr{
				pos: position{line: 176, col: 20, offset: 6066},
				run: (*parser).callonMeasureAggsFunc1,
				expr: &labeledExpr{
					pos:   position{line: 176, col: 20, offset: 6066},
					label: "mfunc",
					expr: &choiceExpr{
						pos: position{line: 176, col: 28, offset: 6074},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 176, col: 28, offset: 6074},
								val:        "avg",
								ignoreCase: false,
								want:       "\"avg\"",
							},
							&litMatcher{
								pos:        position{line: 176, col: 36, offset: 6082},
								val:        "min",
								ignoreCase: false,
								want:       "\"min\"",
							},
							&litMatcher{
								pos:        position{line: 176, col: 44, offset: 6090},
								val:        "max",
								ignoreCase: false,
								want:       "\"max\"",
							},
							&litMatcher{
								pos:        position{line: 176, col: 52, offset: 6098},
								val:        "sum",
								ignoreCase: false,
								want:       "\"sum\"",
							},
							&litMatcher{
								pos:        position{line: 176, col: 60, offset: 6106},
								val:        "cardinality",
								ignoreCase: false,
								want:       "\"cardinality\"",
							},
							&litMatcher{
								pos:        position{line: 176, col: 76, offset: 6122},
								val:        "count",
								ignoreCase: false,
								want:       "\"count\"",
							},
						},
					},
				},
			},
		},
		{
			name: "Column",
			pos:  position{line: 182, col: 1, offset: 6226},
			expr: &litMatcher{
				pos:        position{line: 182, col: 11, offset: 6236},
				val:        "columns",
				ignoreCase: false,
				want:       "\"columns\"",
			},
		},
		{
			name: "GroupBy",
			pos:  position{line: 184, col: 1, offset: 6247},
			expr: &litMatcher{
				pos:        position{line: 184, col: 12, offset: 6258},
				val:        "groupby",
				ignoreCase: false,
				want:       "\"groupby\"",
			},
		},
		{
			name: "Let",
			pos:  position{line: 186, col: 1, offset: 6269},
			expr: &litMatcher{
				pos:        position{line: 186, col: 8, offset: 6276},
				val:        "let",
				ignoreCase: false,
				want:       "\"let\"",
			},
		},
		{
			name: "LetOpr",
			pos:  position{line: 188, col: 1, offset: 6283},
			expr: &choiceExpr{
				pos: position{line: 188, col: 11, offset: 6293},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 188, col: 11, offset: 6293},
						run: (*parser).callonLetOpr2,
						expr: &seqExpr{
							pos: position{line: 188, col: 11, offset: 6293},
							exprs: []any{
								&charClassMatcher{
									pos:        position{line: 188, col: 11, offset: 6293},
									val:        "[>]",
									chars:      []rune{'>'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 188, col: 15, offset: 6297},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 190, col: 5, offset: 6353},
						run: (*parser).callonLetOpr6,
						expr: &litMatcher{
							pos:        position{line: 190, col: 5, offset: 6353},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
					&actionExpr{
						pos: position{line: 192, col: 5, offset: 6400},
						run: (*parser).callonLetOpr8,
						expr: &seqExpr{
							pos: position{line: 192, col: 5, offset: 6400},
							exprs: []any{
								&charClassMatcher{
									pos:        position{line: 192, col: 5, offset: 6400},
									val:        "[<]",
									chars:      []rune{'<'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 192, col: 9, offset: 6404},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 194, col: 5, offset: 6457},
						run: (*parser).callonLetOpr12,
						expr: &litMatcher{
							pos:        position{line: 194, col: 5, offset: 6457},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
					},
					&actionExpr{
						pos: position{line: 196, col: 5, offset: 6501},
						run: (*parser).callonLetOpr14,
						expr: &seqExpr{
							pos: position{line: 196, col: 5, offset: 6501},
							exprs: []any{
								&charClassMatcher{
									pos:        position{line: 196, col: 5, offset: 6501},
									val:        "[=]",
									chars:      []rune{'='},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 196, col: 9, offset: 6505},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 198, col: 5, offset: 6547},
						run: (*parser).callonLetOpr18,
						expr: &seqExpr{
							pos: position{line: 198, col: 5, offset: 6547},
							exprs: []any{
								&charClassMatcher{
									pos:        position{line: 198, col: 5, offset: 6547},
									val:        "[!]",
									chars:      []rune{'!'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 198, col: 9, offset: 6551},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 200, col: 5, offset: 6596},
						run: (*parser).callonLetOpr22,
						expr: &litMatcher{
							pos:        position{line: 200, col: 5, offset: 6596},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
					},
					&actionExpr{
						pos: position{line: 202, col: 5, offset: 6635},
						run: (*parser).callonLetOpr24,
						expr: &litMatcher{
							pos:        position{line: 202, col: 5, offset: 6635},
							val:        "-",
							ignoreCase: false,
							want:       "\"-\"",
						},
					},
					&actionExpr{
						pos: position{line: 204, col: 5, offset: 6679},
						run: (*parser).callonLetOpr26,
						expr: &litMatcher{
							pos:        position{line: 204, col: 5, offset: 6679},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
					},
					&actionExpr{
						pos: position{line: 206, col: 5, offset: 6721},
						run: (*parser).callonLetOpr28,
						expr: &litMatcher{
							pos:        position{line: 206, col: 5, offset: 6721},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
					},
					&actionExpr{
						pos: position{line: 208, col: 5, offset: 6765},
						run: (*parser).callonLetOpr30,
						expr: &litMatcher{
							pos:        position{line: 208, col: 5, offset: 6765},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
					},
				},
			},
		},
		{
			name: "LetIdentifier",
			pos:  position{line: 212, col: 1, offset: 6806},
			expr: &choiceExpr{
				pos: position{line: 212, col: 18, offset: 6823},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 212, col: 18, offset: 6823},
						run: (*parser).callonLetIdentifier2,
						expr: &seqExpr{
							pos: position{line: 212, col: 18, offset: 6823},
							exprs: []any{
								&zeroOrOneExpr{
									pos: position{line: 212, col: 18, offset: 6823},
									expr: &litMatcher{
										pos:        position{line: 212, col: 18, offset: 6823},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 212, col: 23, offset: 6828},
									name: "Float",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 218, col: 5, offset: 7023},
						run: (*parser).callonLetIdentifier7,
						expr: &seqExpr{
							pos: position{line: 218, col: 5, offset: 7023},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 218, col: 5, offset: 7023},
									expr: &litMatcher{
										pos:        position{line: 218, col: 5, offset: 7023},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 218, col: 10, offset: 7028},
									name: "Integer",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 224, col: 6, offset: 7233},
						run: (*parser).callonLetIdentifier12,
						expr: &ruleRefExpr{
							pos:  position{line: 224, col: 6, offset: 7233},
							name: "Integer",
						},
					},
					&actionExpr{
						pos: position{line: 230, col: 5, offset: 7442},
						run: (*parser).callonLetIdentifier14,
						expr: &ruleRefExpr{
							pos:  position{line: 230, col: 5, offset: 7442},
							name: "BoolValue",
						},
					},
				},
			},
		},
		{
			name: "BoolValue",
			pos:  position{line: 243, col: 1, offset: 7704},
			expr: &choiceExpr{
				pos: position{line: 243, col: 14, offset: 7717},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 243, col: 14, offset: 7717},
						val:        "false",
						ignoreCase: false,
						want:       "\"false\"",
					},
					&litMatcher{
						pos:        position{line: 243, col: 24, offset: 7727},
						val:        "true",
						ignoreCase: false,
						want:       "\"true\"",
					},
				},
			},
		},
		{
			name: "Float",
			pos:  position{line: 245, col: 1, offset: 7735},
			expr: &seqExpr{
				pos: position{line: 245, col: 10, offset: 7744},
				exprs: []any{
					&oneOrMoreExpr{
						pos: position{line: 245, col: 10, offset: 7744},
						expr: &charClassMatcher{
							pos:        position{line: 245, col: 10, offset: 7744},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&litMatcher{
						pos:        position{line: 245, col: 17, offset: 7751},
						val:        ".",
						ignoreCase: false,
						want:       "\".\"",
					},
					&oneOrMoreExpr{
						pos: position{line: 245, col: 21, offset: 7755},
						expr: &charClassMatcher{
							pos:        position{line: 245, col: 21, offset: 7755},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "Integer",
			pos:  position{line: 247, col: 1, offset: 7763},
			expr: &oneOrMoreExpr{
				pos: position{line: 247, col: 12, offset: 7774},
				expr: &charClassMatcher{
					pos:        position{line: 247, col: 12, offset: 7774},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "ColList",
			pos:  position{line: 249, col: 1, offset: 7782},
			expr: &actionExpr{
				pos: position{line: 249, col: 13, offset: 7794},
				run: (*parser).callonColList1,
				expr: &seqExpr{
					pos: position{line: 249, col: 13, offset: 7794},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 249, col: 13, offset: 7794},
							expr: &ruleRefExpr{
								pos:  position{line: 249, col: 13, offset: 7794},
								name: "space",
							},
						},
						&labeledExpr{
							pos:   position{line: 249, col: 20, offset: 7801},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 249, col: 26, offset: 7807},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 249, col: 37, offset: 7818},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 249, col: 42, offset: 7823},
								expr: &seqExpr{
									pos: position{line: 249, col: 44, offset: 7825},
									exprs: []any{
										&zeroOrOneExpr{
											pos: position{line: 249, col: 44, offset: 7825},
											expr: &ruleRefExpr{
												pos:  position{line: 249, col: 44, offset: 7825},
												name: "space",
											},
										},
										&litMatcher{
											pos:        position{line: 249, col: 51, offset: 7832},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 249, col: 55, offset: 7836},
											expr: &ruleRefExpr{
												pos:  position{line: 249, col: 55, offset: 7836},
												name: "space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 249, col: 62, offset: 7843},
											name: "Identifier",
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 249, col: 76, offset: 7857},
							expr: &ruleRefExpr{
								pos:  position{line: 249, col: 76, offset: 7857},
								name: "space",
							},
						},
					},
				},
			},
		},
		{
			name: "AndClause",
			pos:  position{line: 253, col: 1, offset: 7915},
			expr: &choiceExpr{
				pos: position{line: 253, col: 14, offset: 7928},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 253, col: 14, offset: 7928},
						run: (*parser).callonAndClause2,
						expr: &seqExpr{
							pos: position{line: 253, col: 14, offset: 7928},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 253, col: 14, offset: 7928},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 253, col: 18, offset: 7932},
										name: "NotClause",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 253, col: 28, offset: 7942},
									name: "space",
								},
								&ruleRefExpr{
									pos:  position{line: 253, col: 34, offset: 7948},
									name: "logicalAND",
								},
								&ruleRefExpr{
									pos:  position{line: 253, col: 45, offset: 7959},
									name: "space",
								},
								&labeledExpr{
									pos:   position{line: 253, col: 51, offset: 7965},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 253, col: 55, offset: 7969},
										name: "AndClause",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 259, col: 5, offset: 8113},
						name: "NotClause",
					},
				},
			},
		},
		{
			name: "NotClause",
			pos:  position{line: 261, col: 1, offset: 8124},
			expr: &choiceExpr{
				pos: position{line: 261, col: 14, offset: 8137},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 261, col: 14, offset: 8137},
						run: (*parser).callonNotClause2,
						expr: &seqExpr{
							pos: position{line: 261, col: 14, offset: 8137},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 261, col: 14, offset: 8137},
									name: "logicalNOT",
								},
								&labeledExpr{
									pos:   position{line: 261, col: 25, offset: 8148},
									label: "cmp",
									expr: &ruleRefExpr{
										pos:  position{line: 261, col: 29, offset: 8152},
										name: "Comparison",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 267, col: 5, offset: 8285},
						name: "Comparison",
					},
				},
			},
		},
		{
			name: "Comparison",
			pos:  position{line: 269, col: 1, offset: 8297},
			expr: &choiceExpr{
				pos: position{line: 269, col: 15, offset: 8311},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 269, col: 15, offset: 8311},
						run: (*parser).callonComparison2,
						expr: &seqExpr{
							pos: position{line: 269, col: 15, offset: 8311},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 269, col: 15, offset: 8311},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrOneExpr{
									pos: position{line: 269, col: 19, offset: 8315},
									expr: &ruleRefExpr{
										pos:  position{line: 269, col: 19, offset: 8315},
										name: "space",
									},
								},
								&labeledExpr{
									pos:   position{line: 269, col: 26, offset: 8322},
									label: "query",
									expr: &ruleRefExpr{
										pos:  position{line: 269, col: 32, offset: 8328},
										name: "OrClause",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 269, col: 41, offset: 8337},
									expr: &ruleRefExpr{
										pos:  position{line: 269, col: 41, offset: 8337},
										name: "space",
									},
								},
								&litMatcher{
									pos:        position{line: 269, col: 48, offset: 8344},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 271, col: 6, offset: 8376},
						run: (*parser).callonComparison12,
						expr: &seqExpr{
							pos: position{line: 271, col: 6, offset: 8376},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 271, col: 6, offset: 8376},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 271, col: 12, offset: 8382},
										name: "Field",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 271, col: 18, offset: 8388},
									expr: &ruleRefExpr{
										pos:  position{line: 271, col: 18, offset: 8388},
										name: "space",
									},
								},
								&labeledExpr{
									pos:   position{line: 271, col: 26, offset: 8396},
									label: "operation",
									expr: &ruleRefExpr{
										pos:  position{line: 271, col: 36, offset: 8406},
										name: "opCOMP",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 271, col: 43, offset: 8413},
									expr: &ruleRefExpr{
										pos:  position{line: 271, col: 43, offset: 8413},
										name: "space",
									},
								},
								&labeledExpr{
									pos:   position{line: 271, col: 50, offset: 8420},
									label: "field1",
									expr: &ruleRefExpr{
										pos:  position{line: 271, col: 57, offset: 8427},
										name: "Field",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 286, col: 5, offset: 8776},
						run: (*parser).callonComparison24,
						expr: &labeledExpr{
							pos:   position{line: 286, col: 5, offset: 8776},
							label: "values",
							expr: &ruleRefExpr{
								pos:  position{line: 286, col: 12, offset: 8783},
								name: "ValueList",
							},
						},
					},
					&actionExpr{
						pos: position{line: 295, col: 5, offset: 8987},
						run: (*parser).callonComparison27,
						expr: &labeledExpr{
							pos:   position{line: 295, col: 5, offset: 8987},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 295, col: 11, offset: 8993},
								name: "Field",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 310, col: 1, offset: 9214},
			expr: &choiceExpr{
				pos: position{line: 310, col: 10, offset: 9223},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 310, col: 10, offset: 9223},
						name: "Value",
					},
					&actionExpr{
						pos: position{line: 310, col: 18, offset: 9231},
						run: (*parser).callonField3,
						expr: &labeledExpr{
							pos:   position{line: 310, col: 18, offset: 9231},
							label: "pieces",
							expr: &seqExpr{
								pos: position{line: 310, col: 26, offset: 9239},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 310, col: 26, offset: 9239},
										name: "FieldPiece",
									},
									&zeroOrMoreExpr{
										pos: position{line: 310, col: 37, offset: 9250},
										expr: &seqExpr{
											pos: position{line: 310, col: 38, offset: 9251},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 310, col: 38, offset: 9251},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
												&ruleRefExpr{
													pos:  position{line: 310, col: 42, offset: 9255},
													name: "FieldPiece",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldPiece",
			pos:  position{line: 318, col: 1, offset: 9350},
			expr: &choiceExpr{
				pos: position{line: 318, col: 15, offset: 9364},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 318, col: 15, offset: 9364},
						name: "QuotedFieldPiece",
					},
					&ruleRefExpr{
						pos:  position{line: 318, col: 34, offset: 9383},
						name: "UnquotedFieldPiece",
					},
					&ruleRefExpr{
						pos:  position{line: 318, col: 55, offset: 9404},
						name: "Star",
					},
				},
			},
		},
		{
			name: "UnquotedFieldPiece",
			pos:  position{line: 320, col: 1, offset: 9410},
			expr: &actionExpr{
				pos: position{line: 320, col: 23, offset: 9432},
				run: (*parser).callonUnquotedFieldPiece1,
				expr: &oneOrMoreExpr{
					pos: position{line: 320, col: 23, offset: 9432},
					expr: &charClassMatcher{
						pos:        position{line: 320, col: 23, offset: 9432},
						val:        "[-a-zA-Z0-9$&,?#%_@;[\\]{}+-./*:]i",
						chars:      []rune{'-', '$', '&', ',', '?', '#', '%', '_', '@', ';', '[', ']', '{', '}', '/', '*', ':'},
						ranges:     []rune{'a', 'z', 'a', 'z', '0', '9', '+', '.'},
						ignoreCase: true,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "QuotedFieldPiece",
			pos:  position{line: 325, col: 1, offset: 9504},
			expr: &ruleRefExpr{
				pos:  position{line: 325, col: 21, offset: 9524},
				name: "QuotedValue",
			},
		},
		{
			name: "Star",
			pos:  position{line: 327, col: 1, offset: 9537},
			expr: &actionExpr{
				pos: position{line: 327, col: 9, offset: 9545},
				run: (*parser).callonStar1,
				expr: &litMatcher{
					pos:        position{line: 327, col: 9, offset: 9545},
					val:        "*",
					ignoreCase: false,
					want:       "\"*\"",
				},
			},
		},
		{
			name: "QuotedValue",
			pos:  position{line: 330, col: 1, offset: 9573},
			expr: &actionExpr{
				pos: position{line: 330, col: 16, offset: 9588},
				run: (*parser).callonQuotedValue1,
				expr: &seqExpr{
					pos: position{line: 330, col: 16, offset: 9588},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 330, col: 16, offset: 9588},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 330, col: 20, offset: 9592},
							expr: &choiceExpr{
								pos: position{line: 330, col: 22, offset: 9594},
								alternatives: []any{
									&seqExpr{
										pos: position{line: 330, col: 22, offset: 9594},
										exprs: []any{
											&notExpr{
												pos: position{line: 330, col: 22, offset: 9594},
												expr: &ruleRefExpr{
													pos:  position{line: 330, col: 23, offset: 9595},
													name: "EscapedChar",
												},
											},
											&anyMatcher{
												line: 330, col: 35, offset: 9607,
											},
										},
									},
									&seqExpr{
										pos: position{line: 330, col: 39, offset: 9611},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 330, col: 39, offset: 9611},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
											&ruleRefExpr{
												pos:  position{line: 330, col: 44, offset: 9616},
												name: "EscapeSequence",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 330, col: 62, offset: 9634},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 334, col: 1, offset: 9751},
			expr: &charClassMatcher{
				pos:        position{line: 334, col: 16, offset: 9766},
				val:        "[\\x00-\\x1f\"\\\\]",
				chars:      []rune{'"', '\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 336, col: 1, offset: 9782},
			expr: &choiceExpr{
				pos: position{line: 336, col: 19, offset: 9800},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 336, col: 19, offset: 9800},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 336, col: 38, offset: 9819},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 338, col: 1, offset: 9834},
			expr: &charClassMatcher{
				pos:        position{line: 338, col: 21, offset: 9854},
				val:        "[\"\\\\/bfnrt]",
				chars:      []rune{'"', '\\', '/', 'b', 'f', 'n', 'r', 't'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 340, col: 1, offset: 9867},
			expr: &seqExpr{
				pos: position{line: 340, col: 18, offset: 9884},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 340, col: 18, offset: 9884},
						val:        "u",
						ignoreCase: false,
						want:       "\"u\"",
					},
					&ruleRefExpr{
						pos:  position{line: 340, col: 22, offset: 9888},
						name: "HexDigit",
					},
					&ruleRefExpr{
						pos:  position{line: 340, col: 31, offset: 9897},
						name: "HexDigit",
					},
					&ruleRefExpr{
						pos:  position{line: 340, col: 40, offset: 9906},
						name: "HexDigit",
					},
					&ruleRefExpr{
						pos:  position{line: 340, col: 49, offset: 9915},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 342, col: 1, offset: 9925},
			expr: &charClassMatcher{
				pos:        position{line: 342, col: 13, offset: 9937},
				val:        "[0-9a-f]i",
				ranges:     []rune{'0', '9', 'a', 'f'},
				ignoreCase: true,
				inverted:   false,
			},
		},
		{
			name: "ValueList",
			pos:  position{line: 348, col: 1, offset: 9971},
			expr: &choiceExpr{
				pos: position{line: 348, col: 14, offset: 9984},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 348, col: 14, offset: 9984},
						run: (*parser).callonValueList2,
						expr: &seqExpr{
							pos: position{line: 348, col: 14, offset: 9984},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 348, col: 14, offset: 9984},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&zeroOrOneExpr{
									pos: position{line: 348, col: 18, offset: 9988},
									expr: &ruleRefExpr{
										pos:  position{line: 348, col: 18, offset: 9988},
										name: "space",
									},
								},
								&labeledExpr{
									pos:   position{line: 348, col: 25, offset: 9995},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 348, col: 31, offset: 10001},
										name: "Value",
									},
								},
								&labeledExpr{
									pos:   position{line: 348, col: 37, offset: 10007},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 348, col: 42, offset: 10012},
										expr: &seqExpr{
											pos: position{line: 348, col: 44, offset: 10014},
											exprs: []any{
												&zeroOrOneExpr{
													pos: position{line: 348, col: 44, offset: 10014},
													expr: &ruleRefExpr{
														pos:  position{line: 348, col: 44, offset: 10014},
														name: "space",
													},
												},
												&litMatcher{
													pos:        position{line: 348, col: 51, offset: 10021},
													val:        ",",
													ignoreCase: false,
													want:       "\",\"",
												},
												&zeroOrOneExpr{
													pos: position{line: 348, col: 55, offset: 10025},
													expr: &ruleRefExpr{
														pos:  position{line: 348, col: 55, offset: 10025},
														name: "space",
													},
												},
												&ruleRefExpr{
													pos:  position{line: 348, col: 62, offset: 10032},
													name: "Value",
												},
											},
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 348, col: 71, offset: 10041},
									expr: &ruleRefExpr{
										pos:  position{line: 348, col: 71, offset: 10041},
										name: "space",
									},
								},
								&litMatcher{
									pos:        position{line: 348, col: 78, offset: 10048},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&labeledExpr{
						pos:   position{line: 350, col: 5, offset: 10104},
						label: "value",
						expr: &ruleRefExpr{
							pos:  position{line: 350, col: 11, offset: 10110},
							name: "Value",
						},
					},
				},
			},
		},
		{
			name: "Value",
			pos:  position{line: 352, col: 1, offset: 10118},
			expr: &actionExpr{
				pos: position{line: 352, col: 10, offset: 10127},
				run: (*parser).callonValue1,
				expr: &labeledExpr{
					pos:   position{line: 352, col: 10, offset: 10127},
					label: "val",
					expr: &choiceExpr{
						pos: position{line: 353, col: 5, offset: 10137},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 353, col: 5, offset: 10137},
								name: "Float",
							},
							&ruleRefExpr{
								pos:  position{line: 354, col: 7, offset: 10149},
								name: "Integer",
							},
						},
					},
				},
			},
		},
		{
			name: "String",
			pos:  position{line: 360, col: 1, offset: 10204},
			expr: &actionExpr{
				pos: position{line: 361, col: 5, offset: 10215},
				run: (*parser).callonString1,
				expr: &seqExpr{
					pos: position{line: 361, col: 5, offset: 10215},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 361, col: 5, offset: 10215},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 361, col: 9, offset: 10219},
							label: "chars",
							expr: &zeroOrMoreExpr{
								pos: position{line: 361, col: 15, offset: 10225},
								expr: &charClassMatcher{
									pos:        position{line: 361, col: 15, offset: 10225},
									val:        "[^\"]",
									chars:      []rune{'"'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 361, col: 21, offset: 10231},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "Integer",
			pos:  position{line: 365, col: 1, offset: 10286},
			expr: &actionExpr{
				pos: position{line: 365, col: 12, offset: 10297},
				run: (*parser).callonInteger1,
				expr: &seqExpr{
					pos: position{line: 365, col: 12, offset: 10297},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 365, col: 12, offset: 10297},
							expr: &charClassMatcher{
								pos:        position{line: 365, col: 12, offset: 10297},
								val:        "[+-]",
								chars:      []rune{'+', '-'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 365, col: 18, offset: 10303},
							expr: &charClassMatcher{
								pos:        position{line: 365, col: 18, offset: 10303},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "Float",
			pos:  position{line: 369, col: 1, offset: 10361},
			expr: &actionExpr{
				pos: position{line: 369, col: 10, offset: 10370},
				run: (*parser).callonFloat1,
				expr: &seqExpr{
					pos: position{line: 369, col: 10, offset: 10370},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 369, col: 10, offset: 10370},
							expr: &charClassMatcher{
								pos:        position{line: 369, col: 10, offset: 10370},
								val:        "[+-]",
								chars:      []rune{'+', '-'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&seqExpr{
							pos: position{line: 369, col: 17, offset: 10377},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 369, col: 17, offset: 10377},
									expr: &charClassMatcher{
										pos:        position{line: 369, col: 17, offset: 10377},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 369, col: 24, offset: 10384},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 369, col: 28, offset: 10388},
									expr: &charClassMatcher{
										pos:        position{line: 369, col: 28, offset: 10388},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 374, col: 1, offset: 10453},
			expr: &actionExpr{
				pos: position{line: 375, col: 4, offset: 10470},
				run: (*parser).callonIdentifier1,
				expr: &oneOrMoreExpr{
					pos: position{line: 375, col: 4, offset: 10470},
					expr: &charClassMatcher{
						pos:        position{line: 375, col: 4, offset: 10470},
						val:        "[a-zA-Z0-9_@./*]i",
						chars:      []rune{'_', '@', '.', '/', '*'},
						ranges:     []rune{'a', 'z', 'a', 'z', '0', '9'},
						ignoreCase: true,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "opPipe",
			pos:  position{line: 380, col: 1, offset: 10529},
			expr: &litMatcher{
				pos:        position{line: 380, col: 11, offset: 10539},
				val:        "|",
				ignoreCase: false,
				want:       "\"|\"",
			},
		},
		{
			name: "logicalOR",
			pos:  position{line: 386, col: 1, offset: 10601},
			expr: &litMatcher{
				pos:        position{line: 386, col: 14, offset: 10614},
				val:        "OR",
				ignoreCase: false,
				want:       "\"OR\"",
			},
		},
		{
			name: "logicalAND",
			pos:  position{line: 388, col: 1, offset: 10620},
			expr: &litMatcher{
				pos:        position{line: 388, col: 15, offset: 10634},
				val:        "AND",
				ignoreCase: false,
				want:       "\"AND\"",
			},
		},
		{
			name: "logicalNOT",
			pos:  position{line: 390, col: 1, offset: 10641},
			expr: &choiceExpr{
				pos: position{line: 390, col: 15, offset: 10655},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 390, col: 15, offset: 10655},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 390, col: 15, offset: 10655},
								val:        "NOT",
								ignoreCase: false,
								want:       "\"NOT\"",
							},
							&ruleRefExpr{
								pos:  position{line: 390, col: 21, offset: 10661},
								name: "space",
							},
						},
					},
					&seqExpr{
						pos: position{line: 390, col: 29, offset: 10669},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 390, col: 29, offset: 10669},
								val:        "!",
								ignoreCase: false,
								want:       "\"!\"",
							},
							&zeroOrOneExpr{
								pos: position{line: 390, col: 33, offset: 10673},
								expr: &ruleRefExpr{
									pos:  position{line: 390, col: 33, offset: 10673},
									name: "space",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "opCOMP",
			pos:  position{line: 398, col: 1, offset: 10748},
			expr: &choiceExpr{
				pos: position{line: 398, col: 11, offset: 10758},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 398, col: 11, offset: 10758},
						name: "opCustom",
					},
					&actionExpr{
						pos: position{line: 399, col: 3, offset: 10769},
						run: (*parser).callonopCOMP3,
						expr: &litMatcher{
							pos:        position{line: 399, col: 3, offset: 10769},
							val:        "<=",
							ignoreCase: false,
							want:       "\"<=\"",
						},
					},
					&actionExpr{
						pos: position{line: 401, col: 5, offset: 10811},
						run: (*parser).callonopCOMP5,
						expr: &litMatcher{
							pos:        position{line: 401, col: 5, offset: 10811},
							val:        ">=",
							ignoreCase: false,
							want:       "\">=\"",
						},
					},
					&actionExpr{
						pos: position{line: 403, col: 5, offset: 10853},
						run: (*parser).callonopCOMP7,
						expr: &litMatcher{
							pos:        position{line: 403, col: 5, offset: 10853},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
					},
					&actionExpr{
						pos: position{line: 405, col: 5, offset: 10894},
						run: (*parser).callonopCOMP9,
						expr: &litMatcher{
							pos:        position{line: 405, col: 5, offset: 10894},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
					},
					&actionExpr{
						pos: position{line: 407, col: 5, offset: 10935},
						run: (*parser).callonopCOMP11,
						expr: &litMatcher{
							pos:        position{line: 407, col: 5, offset: 10935},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
					&actionExpr{
						pos: position{line: 409, col: 5, offset: 10976},
						run: (*parser).callonopCOMP13,
						expr: &litMatcher{
							pos:        position{line: 409, col: 5, offset: 10976},
							val:        "!=",
							ignoreCase: false,
							want:       "\"!=\"",
						},
					},
				},
			},
		},
		{
			name: "opCustom",
			pos:  position{line: 414, col: 1, offset: 11020},
			expr: &actionExpr{
				pos: position{line: 414, col: 13, offset: 11032},
				run: (*parser).callonopCustom1,
				expr: &seqExpr{
					pos: position{line: 414, col: 13, offset: 11032},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 414, col: 13, offset: 11032},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 414, col: 17, offset: 11036},
							label: "opname",
							expr: &oneOrMoreExpr{
								pos: position{line: 414, col: 24, offset: 11043},
								expr: &charClassMatcher{
									pos:        position{line: 414, col: 24, offset: 11043},
									val:        "[a-z]i",
									ranges:     []rune{'a', 'z'},
									ignoreCase: true,
									inverted:   false,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 414, col: 32, offset: 11051},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
					},
				},
			},
		},
		{
			name:        "_",
			displayName: "\"whitespace\"",
			pos:         position{line: 422, col: 1, offset: 11171},
			expr: &zeroOrMoreExpr{
				pos: position{line: 422, col: 19, offset: 11189},
				expr: &charClassMatcher{
					pos:        position{line: 422, col: 19, offset: 11189},
					val:        "[ \\n\\t\\r]",
					chars:      []rune{' ', '\n', '\t', '\r'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "space",
			pos:  position{line: 424, col: 1, offset: 11201},
			expr: &oneOrMoreExpr{
				pos: position{line: 424, col: 10, offset: 11210},
				expr: &charClassMatcher{
					pos:        position{line: 424, col: 10, offset: 11210},
					val:        "[ \\n\\t\\r]",
					chars:      []rune{' ', '\n', '\t', '\r'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 426, col: 1, offset: 11222},
			expr: &litMatcher{
				pos:        position{line: 426, col: 8, offset: 11229},
				val:        "\n",
				ignoreCase: false,
				want:       "\"\\n\"",
			},
		},
		{
			name: "EOF",
			pos:  position{line: 428, col: 1, offset: 11235},
			expr: &notExpr{
				pos: position{line: 428, col: 7, offset: 11241},
				expr: &anyMatcher{
					line: 428, col: 8, offset: 11242,
				},
			},
		},
	},
}

func (c *current) onStart2(maggs any) (any, error) {
	var q ast.QueryStruct
	if maggs != nil {
		q.PipeCommands = maggs.(*structs.QueryAggregators)
	}
	return q, nil
}

func (p *parser) callonStart2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStart2(stack["maggs"])
}

func (c *current) onStart8(groupBy, lim any) (any, error) {
	var q ast.QueryStruct
	if groupBy != nil {
		q.PipeCommands = groupBy.(*structs.QueryAggregators)
		q.PipeCommands.BucketLimit = groupBy.(*structs.QueryAggregators).BucketLimit
	}
	return q, nil

}

func (p *parser) callonStart8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStart8(stack["groupBy"], stack["lim"])
}

func (c *current) onStart19(query, aggs any) (any, error) {
	var q ast.QueryStruct
	if query != nil {
		q.SearchFilter = query.(*ast.Node)
	}
	if aggs != nil {
		q.PipeCommands = aggs.(*structs.QueryAggregators)
	}
	return q, nil
}

func (p *parser) callonStart19() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStart19(stack["query"], stack["aggs"])
}

func (c *current) onStart28(query any) (any, error) {
	var q ast.QueryStruct
	if query != nil {
		q.SearchFilter = query.(*ast.Node)
	}
	return q, nil
}

func (p *parser) callonStart28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStart28(stack["query"])
}

func (c *current) onStart34(aggs any) (any, error) {
	var q ast.QueryStruct
	if aggs != nil {
		q.PipeCommands = aggs.(*structs.QueryAggregators)
	}
	return q, nil
}

func (p *parser) callonStart34() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStart34(stack["aggs"])
}

func (c *current) onQuery1(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonQuery1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuery1(stack["clause"])
}

func (c *current) onOrClause2(lhs, rhs any) (any, error) {
	return &ast.Node{
		NodeType: ast.NodeOr,
		Left:     lhs.(*ast.Node),
		Right:    rhs.(*ast.Node),
	}, nil
}

func (p *parser) callonOrClause2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrClause2(stack["lhs"], stack["rhs"])
}

func (c *current) onmeasureAggsList1(first, rest any) (any, error) {
	return ast.GetMeasureAggsTokens(first, rest, 3), nil
}

func (p *parser) callonmeasureAggsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmeasureAggsList1(stack["first"], stack["rest"])
}

func (c *current) ongroupByList1(first, rest, cols, lim any) (any, error) {
	limit := int(3000)
	if lim != nil {
		limit = int(lim.(int64))
	}
	return ast.GetGroupByTokens(cols, first, rest, 3, limit), nil
}

func (p *parser) callongroupByList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongroupByList1(stack["first"], stack["rest"], stack["cols"], stack["lim"])
}

func (c *current) onLimit1(first any) (any, error) {
	limit, err := strconv.ParseInt(first.(string), 10, 64)
	if err != nil {
		return nil, err
	}
	return limit, err
}

func (p *parser) callonLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimit1(stack["first"])
}

func (c *current) onMeasureAggClause1(funcs, cols any) (any, error) {

	tempMeasureAgg := &structs.MeasureAggregator{}
	tempMeasureAgg.MeasureCol = cols.(string)
	tempMeasureAgg.MeasureFunc = funcs.(utils.AggregateFunctions)
	return tempMeasureAgg, nil
}

func (p *parser) callonMeasureAggClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMeasureAggClause1(stack["funcs"], stack["cols"])
}

func (c *current) onAggClause2(newCol, oldCol any) (any, error) {
	aggNode := &structs.QueryAggregators{}
	aggNode.PipeCommandType = structs.OutputTransformType
	aggNode.OutputTransforms = &structs.OutputTransforms{}
	aggNode.OutputTransforms.OutputColumns = &structs.ColumnsRequest{}
	aggNode.OutputTransforms.OutputColumns.RenameColumns = make(map[string]string)
	aggNode.OutputTransforms.OutputColumns.RenameColumns[oldCol.(string)] = newCol.(string)
	return aggNode, nil
}

func (p *parser) callonAggClause2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggClause2(stack["newCol"], stack["oldCol"])
}

func (c *current) onAggClause18(cols any) (any, error) {
	aggNode := &structs.QueryAggregators{}
	aggNode.PipeCommandType = structs.OutputTransformType
	aggNode.OutputTransforms = &structs.OutputTransforms{}
	aggNode.OutputTransforms.OutputColumns = &structs.ColumnsRequest{}
	aggNode.OutputTransforms.OutputColumns.IncludeColumns = cols.([]string)
	return aggNode, nil
}

func (p *parser) callonAggClause18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggClause18(stack["cols"])
}

func (c *current) onAggClause27(cols any) (any, error) {
	aggNode := &structs.QueryAggregators{}
	aggNode.PipeCommandType = structs.OutputTransformType
	aggNode.OutputTransforms = &structs.OutputTransforms{}
	aggNode.OutputTransforms.OutputColumns = &structs.ColumnsRequest{}
	aggNode.OutputTransforms.OutputColumns.ExcludeColumns = cols.([]string)
	return aggNode, nil
}

func (p *parser) callonAggClause27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggClause27(stack["cols"])
}

func (c *current) onAggClause38(maggs any) (any, error) {
	aggNode := &structs.QueryAggregators{}
	aggNode = maggs.(*structs.QueryAggregators)
	return aggNode, nil
}

func (p *parser) callonAggClause38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggClause38(stack["maggs"])
}

func (c *current) onAggClause46(groupBy, lim any) (any, error) {
	aggNode := &structs.QueryAggregators{}
	aggNode = groupBy.(*structs.QueryAggregators)
	return aggNode, nil
}

func (p *parser) callonAggClause46() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggClause46(stack["groupBy"], stack["lim"])
}

func (c *current) onAggClause59(newCol, lhs, operation, rhs any) (any, error) {
	aggNode := &structs.QueryAggregators{}
	aggNode.PipeCommandType = structs.OutputTransformType
	aggNode.OutputTransforms = &structs.OutputTransforms{}
	aggNode.OutputTransforms.LetColumns = &structs.LetColumnsRequest{}
	aggNode.OutputTransforms.LetColumns.NewColName = newCol.(string)
	aggNode.OutputTransforms.LetColumns.SingleColRequest = &structs.SingleColLetRequest{}
	aggNode.OutputTransforms.LetColumns.SingleColRequest.CName = lhs.(string)
	aggNode.OutputTransforms.LetColumns.SingleColRequest.Oper = operation.(utils.LogicalAndArithmeticOperator)
	aggNode.OutputTransforms.LetColumns.SingleColRequest.Value = rhs.(*utils.DtypeEnclosure)
	return aggNode, nil
}

func (p *parser) callonAggClause59() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggClause59(stack["newCol"], stack["lhs"], stack["operation"], stack["rhs"])
}

func (c *current) onAggClause91(newCol, lhs, operation, rhs any) (any, error) {
	aggNode := &structs.QueryAggregators{}
	aggNode.PipeCommandType = structs.OutputTransformType
	aggNode.OutputTransforms = &structs.OutputTransforms{}
	aggNode.OutputTransforms.LetColumns = &structs.LetColumnsRequest{}
	aggNode.OutputTransforms.LetColumns.NewColName = newCol.(string)
	aggNode.OutputTransforms.LetColumns.MultiColsRequest = &structs.MultiColLetRequest{}
	aggNode.OutputTransforms.LetColumns.MultiColsRequest.LeftCName = lhs.(string)
	aggNode.OutputTransforms.LetColumns.MultiColsRequest.Oper = operation.(utils.LogicalAndArithmeticOperator)
	aggNode.OutputTransforms.LetColumns.MultiColsRequest.RightCName = rhs.(string)
	return aggNode, nil
}

func (p *parser) callonAggClause91() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggClause91(stack["newCol"], stack["lhs"], stack["operation"], stack["rhs"])
}

func (c *current) onMeasureAggsFunc1(mfunc any) (any, error) {
	aggFunc, _ := ast.AggTypeToAggregateFunction(string(c.text))
	return aggFunc, nil
}

func (p *parser) callonMeasureAggsFunc1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMeasureAggsFunc1(stack["mfunc"])
}

func (c *current) onLetOpr2() (any, error) {
	return utils.LetGreaterThanOrEqualTo, nil
}

func (p *parser) callonLetOpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetOpr2()
}

func (c *current) onLetOpr6() (any, error) {
	return utils.LetGreaterThan, nil
}

func (p *parser) callonLetOpr6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetOpr6()
}

func (c *current) onLetOpr8() (any, error) {
	return utils.LetLessThanOrEqualTo, nil
}

func (p *parser) callonLetOpr8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetOpr8()
}

func (c *current) onLetOpr12() (any, error) {
	return utils.LetLessThan, nil
}

func (p *parser) callonLetOpr12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetOpr12()
}

func (c *current) onLetOpr14() (any, error) {
	return utils.LetEquals, nil
}

func (p *parser) callonLetOpr14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetOpr14()
}

func (c *current) onLetOpr18() (any, error) {
	return utils.LetNotEquals, nil
}

func (p *parser) callonLetOpr18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetOpr18()
}

func (c *current) onLetOpr22() (any, error) {
	return utils.LetAdd, nil
}

func (p *parser) callonLetOpr22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetOpr22()
}

func (c *current) onLetOpr24() (any, error) {
	return utils.LetSubtract, nil
}

func (p *parser) callonLetOpr24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetOpr24()
}

func (c *current) onLetOpr26() (any, error) {
	return utils.LetDivide, nil
}

func (p *parser) callonLetOpr26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetOpr26()
}

func (c *current) onLetOpr28() (any, error) {
	return utils.LetMultiply, nil
}

func (p *parser) callonLetOpr28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetOpr28()
}

func (c *current) onLetOpr30() (any, error) {
	return utils.LetModulo, nil
}

func (p *parser) callonLetOpr30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetOpr30()
}

func (c *current) onLetIdentifier2() (any, error) {
	var dte utils.DtypeEnclosure
	dte.Dtype = utils.SS_DT_FLOAT
	dte.FloatVal, _ = strconv.ParseFloat(string(c.text), 64)
	dte.StringVal = string(c.text)
	return &dte, nil
}

func (p *parser) callonLetIdentifier2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetIdentifier2()
}

func (c *current) onLetIdentifier7() (any, error) {
	var dte utils.DtypeEnclosure
	dte.Dtype = utils.SS_DT_SIGNED_NUM
	dte.SignedVal, _ = strconv.ParseInt(string(c.text), 10, 64)
	dte.StringVal = string(c.text)
	return &dte, nil
}

func (p *parser) callonLetIdentifier7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetIdentifier7()
}

func (c *current) onLetIdentifier12() (any, error) {
	var dte utils.DtypeEnclosure
	dte.Dtype = utils.SS_DT_UNSIGNED_NUM
	dte.UnsignedVal, _ = strconv.ParseUint(string(c.text), 10, 64)
	dte.StringVal = string(c.text)
	return &dte, nil
}

func (p *parser) callonLetIdentifier12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetIdentifier12()
}

func (c *current) onLetIdentifier14() (any, error) {
	var dte utils.DtypeEnclosure
	dte.Dtype = utils.SS_DT_BOOL
	bVal, _ := strconv.ParseBool(string(c.text))
	if bVal == true {
		dte.BoolVal = 1
	} else {
		dte.BoolVal = 0
	}
	dte.StringVal = string(c.text)
	return &dte, nil
}

func (p *parser) callonLetIdentifier14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetIdentifier14()
}

func (c *current) onColList1(first, rest any) (any, error) {
	return ast.GetTokens(first, rest, 3), nil
}

func (p *parser) callonColList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColList1(stack["first"], stack["rest"])
}

func (c *current) onAndClause2(lhs, rhs any) (any, error) {
	return &ast.Node{
		NodeType: ast.NodeAnd,
		Left:     lhs.(*ast.Node),
		Right:    rhs.(*ast.Node),
	}, nil
}

func (p *parser) callonAndClause2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndClause2(stack["lhs"], stack["rhs"])
}

func (c *current) onNotClause2(cmp any) (any, error) {
	return &ast.Node{
		NodeType: ast.NodeNot,
		Left:     cmp.(*ast.Node),
		Right:    nil,
	}, nil
}

func (p *parser) callonNotClause2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotClause2(stack["cmp"])
}

func (c *current) onComparison2(query any) (any, error) {
	return query, nil
}

func (p *parser) callonComparison2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparison2(stack["query"])
}

func (c *current) onComparison12(field, operation, field1 any) (any, error) {
	var opOut string
	if operation == nil && field != nil {
		opOut = "="
	} else {
		opOut = operation.(string)
	}
	return &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     opOut,
			Field:  field.(string),
			Values: field1,
		},
	}, nil
}

func (p *parser) callonComparison12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparison12(stack["field"], stack["operation"], stack["field1"])
}

func (c *current) onComparison24(values any) (any, error) {
	return &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     "=",
			Field:  "*",
			Values: values,
		},
	}, nil
}

func (p *parser) callonComparison24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparison24(stack["values"])
}

func (c *current) onComparison27(field any) (any, error) {
	return &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     "=",
			Field:  "*",
			Values: field,
		},
	}, nil
}

func (p *parser) callonComparison27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparison27(stack["field"])
}

func (c *current) onField3(pieces any) (any, error) {
	if pieces == nil {
		return "*", nil
	}

	return string(c.text), nil
}

func (p *parser) callonField3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField3(stack["pieces"])
}

func (c *current) onUnquotedFieldPiece1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUnquotedFieldPiece1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedFieldPiece1()
}

func (c *current) onStar1() (any, error) {
	return "*", nil
}

func (p *parser) callonStar1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStar1()
}

func (c *current) onQuotedValue1() (any, error) {
	c.text = bytes.Replace(c.text, []byte(`\/`), []byte(`/`), -1)
	return strconv.Unquote(string(c.text))
}

func (p *parser) callonQuotedValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedValue1()
}

func (c *current) onValueList2(first, rest any) (any, error) {
	return ast.GetTokens(first, rest, 3), nil
}

func (p *parser) callonValueList2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueList2(stack["first"], stack["rest"])
}

func (c *current) onValue1(val any) (any, error) {
	return ast.MakeValue(val)

}

func (p *parser) callonValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValue1(stack["val"])
}

func (c *current) onString1(chars any) (any, error) {
	return ast.StringFromChars(chars), nil

}

func (p *parser) callonString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onString1(stack["chars"])
}

func (c *current) onInteger1() (any, error) {
	return json.Number(string(c.text)), nil

}

func (p *parser) callonInteger1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInteger1()
}

func (c *current) onFloat1() (any, error) {
	return json.Number(string(c.text)), nil

}

func (p *parser) callonFloat1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloat1()
}

func (c *current) onIdentifier1() (any, error) {

	return string(c.text), nil
}

func (p *parser) callonIdentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1()
}

func (c *current) onopCOMP3() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonopCOMP3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onopCOMP3()
}

func (c *current) onopCOMP5() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonopCOMP5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onopCOMP5()
}

func (c *current) onopCOMP7() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonopCOMP7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onopCOMP7()
}

func (c *current) onopCOMP9() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonopCOMP9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onopCOMP9()
}

func (c *current) onopCOMP11() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonopCOMP11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onopCOMP11()
}

func (c *current) onopCOMP13() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonopCOMP13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onopCOMP13()
}

func (c *current) onopCustom1(opname any) (any, error) {
	return ast.OpNameToString(opname)
}

func (p *parser) callonopCustom1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onopCustom1(stack["opname"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize {
		val, ok = p.parseRuleMemoize(rule)
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
