// Code generated by pigeon; DO NOT EDIT.

// Copyright (c) 2021-2024 SigScalr, Inc.
//
// This file is part of SigLens Observability Solution
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

package logql

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/siglens/siglens/pkg/ast"
	structs "github.com/siglens/siglens/pkg/segment/structs"
	"github.com/siglens/siglens/pkg/segment/utils"
)

func getParseError(err error) error {
	switch ev := err.(type) {
	case errList:
		if pe, ok := ev[0].(*parserError); ok {
			return &ast.ParseError{
				Inner:    pe.Inner,
				Line:     pe.pos.line,
				Column:   pe.pos.col,
				Offset:   pe.pos.offset,
				Prefix:   pe.prefix,
				Expected: pe.expected,
			}
		}
	}
	return err
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Start",
			pos:  position{line: 52, col: 1, offset: 1395},
			expr: &choiceExpr{
				pos: position{line: 52, col: 10, offset: 1404},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 52, col: 10, offset: 1404},
						run: (*parser).callonStart2,
						expr: &seqExpr{
							pos: position{line: 52, col: 10, offset: 1404},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 52, col: 10, offset: 1404},
									label: "query",
									expr: &zeroOrOneExpr{
										pos: position{line: 52, col: 16, offset: 1410},
										expr: &ruleRefExpr{
											pos:  position{line: 52, col: 16, offset: 1410},
											name: "Stream",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 52, col: 24, offset: 1418},
									label: "jf",
									expr: &zeroOrOneExpr{
										pos: position{line: 52, col: 27, offset: 1421},
										expr: &ruleRefExpr{
											pos:  position{line: 52, col: 27, offset: 1421},
											name: "JSONFilter",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 52, col: 39, offset: 1433},
									label: "fs",
									expr: &zeroOrOneExpr{
										pos: position{line: 52, col: 42, offset: 1436},
										expr: &ruleRefExpr{
											pos:  position{line: 52, col: 42, offset: 1436},
											name: "FilterStream",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 52, col: 56, offset: 1450},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 79, col: 5, offset: 2102},
						run: (*parser).callonStart14,
						expr: &seqExpr{
							pos: position{line: 79, col: 5, offset: 2102},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 79, col: 5, offset: 2102},
									name: "COUNT_OVER_TIME",
								},
								&litMatcher{
									pos:        position{line: 79, col: 21, offset: 2118},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&labeledExpr{
									pos:   position{line: 79, col: 25, offset: 2122},
									label: "query",
									expr: &ruleRefExpr{
										pos:  position{line: 79, col: 31, offset: 2128},
										name: "Stream",
									},
								},
								&labeledExpr{
									pos:   position{line: 79, col: 38, offset: 2135},
									label: "duration",
									expr: &ruleRefExpr{
										pos:  position{line: 79, col: 47, offset: 2144},
										name: "Duration",
									},
								},
								&litMatcher{
									pos:        position{line: 79, col: 56, offset: 2153},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 90, col: 5, offset: 2706},
						run: (*parser).callonStart23,
						expr: &labeledExpr{
							pos:   position{line: 90, col: 5, offset: 2706},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 90, col: 11, offset: 2712},
								name: "VectorArithmeticExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "Stream",
			pos:  position{line: 99, col: 1, offset: 2978},
			expr: &actionExpr{
				pos: position{line: 99, col: 11, offset: 2988},
				run: (*parser).callonStream1,
				expr: &seqExpr{
					pos: position{line: 99, col: 11, offset: 2988},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 99, col: 11, offset: 2988},
							name: "Delimiter",
						},
						&labeledExpr{
							pos:   position{line: 99, col: 21, offset: 2998},
							label: "q1",
							expr: &ruleRefExpr{
								pos:  position{line: 99, col: 24, offset: 3001},
								name: "Query",
							},
						},
						&labeledExpr{
							pos:   position{line: 99, col: 30, offset: 3007},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 99, col: 35, offset: 3012},
								expr: &ruleRefExpr{
									pos:  position{line: 99, col: 36, offset: 3013},
									name: "Query",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 99, col: 44, offset: 3021},
							name: "Delimiter",
						},
						&zeroOrOneExpr{
							pos: position{line: 99, col: 54, offset: 3031},
							expr: &ruleRefExpr{
								pos:  position{line: 99, col: 54, offset: 3031},
								name: "space",
							},
						},
					},
				},
			},
		},
		{
			name: "FilterStream",
			pos:  position{line: 128, col: 1, offset: 3723},
			expr: &actionExpr{
				pos: position{line: 128, col: 17, offset: 3739},
				run: (*parser).callonFilterStream1,
				expr: &seqExpr{
					pos: position{line: 128, col: 17, offset: 3739},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 128, col: 17, offset: 3739},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 128, col: 22, offset: 3744},
								expr: &choiceExpr{
									pos: position{line: 128, col: 23, offset: 3745},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 128, col: 23, offset: 3745},
											name: "LogFilter",
										},
										&ruleRefExpr{
											pos:  position{line: 128, col: 35, offset: 3757},
											name: "LabelFilter",
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 128, col: 49, offset: 3771},
							expr: &ruleRefExpr{
								pos:  position{line: 128, col: 49, offset: 3771},
								name: "space",
							},
						},
					},
				},
			},
		},
		{
			name: "Query",
			pos:  position{line: 158, col: 1, offset: 4498},
			expr: &actionExpr{
				pos: position{line: 158, col: 11, offset: 4508},
				run: (*parser).callonQuery1,
				expr: &seqExpr{
					pos: position{line: 158, col: 11, offset: 4508},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 158, col: 11, offset: 4508},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 158, col: 17, offset: 4514},
								name: "Field",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 158, col: 23, offset: 4520},
							expr: &ruleRefExpr{
								pos:  position{line: 158, col: 23, offset: 4520},
								name: "space",
							},
						},
						&litMatcher{
							pos:        position{line: 158, col: 30, offset: 4527},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrOneExpr{
							pos: position{line: 158, col: 34, offset: 4531},
							expr: &ruleRefExpr{
								pos:  position{line: 158, col: 34, offset: 4531},
								name: "space",
							},
						},
						&labeledExpr{
							pos:   position{line: 158, col: 41, offset: 4538},
							label: "field1",
							expr: &ruleRefExpr{
								pos:  position{line: 158, col: 48, offset: 4545},
								name: "Field",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 158, col: 54, offset: 4551},
							expr: &litMatcher{
								pos:        position{line: 158, col: 54, offset: 4551},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 158, col: 59, offset: 4556},
							expr: &ruleRefExpr{
								pos:  position{line: 158, col: 59, offset: 4556},
								name: "space",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleField",
			pos:  position{line: 169, col: 1, offset: 4767},
			expr: &actionExpr{
				pos: position{line: 169, col: 17, offset: 4783},
				run: (*parser).callonSingleField1,
				expr: &seqExpr{
					pos: position{line: 169, col: 17, offset: 4783},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 169, col: 17, offset: 4783},
							expr: &litMatcher{
								pos:        position{line: 169, col: 17, offset: 4783},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 169, col: 22, offset: 4788},
							expr: &ruleRefExpr{
								pos:  position{line: 169, col: 22, offset: 4788},
								name: "space",
							},
						},
						&labeledExpr{
							pos:   position{line: 169, col: 29, offset: 4795},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 169, col: 35, offset: 4801},
								name: "Field",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 169, col: 41, offset: 4807},
							expr: &litMatcher{
								pos:        position{line: 169, col: 41, offset: 4807},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LogFilter",
			pos:  position{line: 179, col: 1, offset: 4994},
			expr: &actionExpr{
				pos: position{line: 179, col: 14, offset: 5007},
				run: (*parser).callonLogFilter1,
				expr: &seqExpr{
					pos: position{line: 179, col: 14, offset: 5007},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 179, col: 14, offset: 5007},
							expr: &ruleRefExpr{
								pos:  position{line: 179, col: 14, offset: 5007},
								name: "space",
							},
						},
						&labeledExpr{
							pos:   position{line: 179, col: 21, offset: 5014},
							label: "grep",
							expr: &ruleRefExpr{
								pos:  position{line: 179, col: 26, offset: 5019},
								name: "GrepFilter",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 179, col: 37, offset: 5030},
							expr: &ruleRefExpr{
								pos:  position{line: 179, col: 37, offset: 5030},
								name: "space",
							},
						},
						&labeledExpr{
							pos:   position{line: 179, col: 44, offset: 5037},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 179, col: 50, offset: 5043},
								name: "Field",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 179, col: 56, offset: 5049},
							expr: &ruleRefExpr{
								pos:  position{line: 179, col: 56, offset: 5049},
								name: "space",
							},
						},
					},
				},
			},
		},
		{
			name: "LabelFilter",
			pos:  position{line: 190, col: 1, offset: 5266},
			expr: &actionExpr{
				pos: position{line: 190, col: 16, offset: 5281},
				run: (*parser).callonLabelFilter1,
				expr: &seqExpr{
					pos: position{line: 190, col: 16, offset: 5281},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 190, col: 16, offset: 5281},
							expr: &ruleRefExpr{
								pos:  position{line: 190, col: 16, offset: 5281},
								name: "space",
							},
						},
						&litMatcher{
							pos:        position{line: 190, col: 23, offset: 5288},
							val:        "|",
							ignoreCase: false,
							want:       "\"|\"",
						},
						&zeroOrOneExpr{
							pos: position{line: 190, col: 27, offset: 5292},
							expr: &ruleRefExpr{
								pos:  position{line: 190, col: 27, offset: 5292},
								name: "space",
							},
						},
						&labeledExpr{
							pos:   position{line: 190, col: 34, offset: 5299},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 190, col: 40, offset: 5305},
								name: "Field",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 190, col: 46, offset: 5311},
							expr: &ruleRefExpr{
								pos:  position{line: 190, col: 46, offset: 5311},
								name: "space",
							},
						},
						&labeledExpr{
							pos:   position{line: 190, col: 53, offset: 5318},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 190, col: 56, offset: 5321},
								name: "opCOMP",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 190, col: 63, offset: 5328},
							expr: &ruleRefExpr{
								pos:  position{line: 190, col: 63, offset: 5328},
								name: "space",
							},
						},
						&labeledExpr{
							pos:   position{line: 190, col: 70, offset: 5335},
							label: "field1",
							expr: &ruleRefExpr{
								pos:  position{line: 190, col: 77, offset: 5342},
								name: "Field",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 190, col: 83, offset: 5348},
							expr: &litMatcher{
								pos:        position{line: 190, col: 83, offset: 5348},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 190, col: 88, offset: 5353},
							expr: &ruleRefExpr{
								pos:  position{line: 190, col: 88, offset: 5353},
								name: "space",
							},
						},
					},
				},
			},
		},
		{
			name: "JSONFilter",
			pos:  position{line: 201, col: 1, offset: 5571},
			expr: &choiceExpr{
				pos: position{line: 201, col: 15, offset: 5585},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 201, col: 15, offset: 5585},
						run: (*parser).callonJSONFilter2,
						expr: &seqExpr{
							pos: position{line: 201, col: 15, offset: 5585},
							exprs: []any{
								&zeroOrOneExpr{
									pos: position{line: 201, col: 15, offset: 5585},
									expr: &ruleRefExpr{
										pos:  position{line: 201, col: 15, offset: 5585},
										name: "space",
									},
								},
								&litMatcher{
									pos:        position{line: 201, col: 22, offset: 5592},
									val:        "|",
									ignoreCase: false,
									want:       "\"|\"",
								},
								&ruleRefExpr{
									pos:  position{line: 201, col: 26, offset: 5596},
									name: "space",
								},
								&litMatcher{
									pos:        position{line: 201, col: 32, offset: 5602},
									val:        "json",
									ignoreCase: false,
									want:       "\"json\"",
								},
								&zeroOrOneExpr{
									pos: position{line: 201, col: 39, offset: 5609},
									expr: &ruleRefExpr{
										pos:  position{line: 201, col: 39, offset: 5609},
										name: "space",
									},
								},
								&labeledExpr{
									pos:   position{line: 201, col: 46, offset: 5616},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 201, col: 51, offset: 5621},
										expr: &ruleRefExpr{
											pos:  position{line: 201, col: 52, offset: 5622},
											name: "Query",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 232, col: 5, offset: 7012},
						run: (*parser).callonJSONFilter14,
						expr: &seqExpr{
							pos: position{line: 232, col: 5, offset: 7012},
							exprs: []any{
								&zeroOrOneExpr{
									pos: position{line: 232, col: 5, offset: 7012},
									expr: &ruleRefExpr{
										pos:  position{line: 232, col: 5, offset: 7012},
										name: "space",
									},
								},
								&litMatcher{
									pos:        position{line: 232, col: 12, offset: 7019},
									val:        "|",
									ignoreCase: false,
									want:       "\"|\"",
								},
								&ruleRefExpr{
									pos:  position{line: 232, col: 16, offset: 7023},
									name: "space",
								},
								&litMatcher{
									pos:        position{line: 232, col: 22, offset: 7029},
									val:        "logfmt",
									ignoreCase: false,
									want:       "\"logfmt\"",
								},
								&zeroOrOneExpr{
									pos: position{line: 232, col: 31, offset: 7038},
									expr: &ruleRefExpr{
										pos:  position{line: 232, col: 31, offset: 7038},
										name: "space",
									},
								},
								&labeledExpr{
									pos:   position{line: 232, col: 38, offset: 7045},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 232, col: 43, offset: 7050},
										expr: &choiceExpr{
											pos: position{line: 232, col: 44, offset: 7051},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 232, col: 44, offset: 7051},
													name: "Query",
												},
												&ruleRefExpr{
													pos:  position{line: 232, col: 52, offset: 7059},
													name: "SingleField",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 245, col: 1, offset: 7721},
			expr: &actionExpr{
				pos: position{line: 245, col: 13, offset: 7733},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 245, col: 13, offset: 7733},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 245, col: 13, offset: 7733},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 245, col: 17, offset: 7737},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 245, col: 21, offset: 7741},
								name: "Integer",
							},
						},
						&labeledExpr{
							pos:   position{line: 245, col: 29, offset: 7749},
							label: "timeUnit",
							expr: &ruleRefExpr{
								pos:  position{line: 245, col: 38, offset: 7758},
								name: "TIME_UNIT",
							},
						},
						&litMatcher{
							pos:        position{line: 245, col: 48, offset: 7768},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "VectorArithmeticExpr",
			pos:  position{line: 259, col: 1, offset: 8122},
			expr: &actionExpr{
				pos: position{line: 259, col: 25, offset: 8146},
				run: (*parser).callonVectorArithmeticExpr1,
				expr: &seqExpr{
					pos: position{line: 259, col: 25, offset: 8146},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 259, col: 25, offset: 8146},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 259, col: 27, offset: 8148},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 259, col: 32, offset: 8153},
								name: "ArithmeticExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 259, col: 47, offset: 8168},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "ArithmeticExpr",
			pos:  position{line: 264, col: 1, offset: 8231},
			expr: &actionExpr{
				pos: position{line: 264, col: 19, offset: 8249},
				run: (*parser).callonArithmeticExpr1,
				expr: &seqExpr{
					pos: position{line: 264, col: 19, offset: 8249},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 264, col: 19, offset: 8249},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 264, col: 24, offset: 8254},
								name: "Term",
							},
						},
						&labeledExpr{
							pos:   position{line: 264, col: 29, offset: 8259},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 264, col: 34, offset: 8264},
								expr: &seqExpr{
									pos: position{line: 264, col: 35, offset: 8265},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 264, col: 35, offset: 8265},
											name: "_",
										},
										&choiceExpr{
											pos: position{line: 264, col: 38, offset: 8268},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 264, col: 38, offset: 8268},
													name: "Add",
												},
												&ruleRefExpr{
													pos:  position{line: 264, col: 44, offset: 8274},
													name: "Subtract",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 264, col: 54, offset: 8284},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 264, col: 56, offset: 8286},
											name: "Term",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Term",
			pos:  position{line: 281, col: 1, offset: 8780},
			expr: &actionExpr{
				pos: position{line: 281, col: 9, offset: 8788},
				run: (*parser).callonTerm1,
				expr: &seqExpr{
					pos: position{line: 281, col: 9, offset: 8788},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 281, col: 9, offset: 8788},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 281, col: 14, offset: 8793},
								name: "VectorExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 281, col: 25, offset: 8804},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 281, col: 30, offset: 8809},
								expr: &seqExpr{
									pos: position{line: 281, col: 31, offset: 8810},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 281, col: 31, offset: 8810},
											name: "_",
										},
										&choiceExpr{
											pos: position{line: 281, col: 34, offset: 8813},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 281, col: 34, offset: 8813},
													name: "Multiply",
												},
												&ruleRefExpr{
													pos:  position{line: 281, col: 45, offset: 8824},
													name: "Divide",
												},
												&ruleRefExpr{
													pos:  position{line: 281, col: 54, offset: 8833},
													name: "Modulo",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 281, col: 62, offset: 8841},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 281, col: 64, offset: 8843},
											name: "VectorExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VectorExpr",
			pos:  position{line: 298, col: 1, offset: 9302},
			expr: &actionExpr{
				pos: position{line: 298, col: 15, offset: 9316},
				run: (*parser).callonVectorExpr1,
				expr: &seqExpr{
					pos: position{line: 298, col: 15, offset: 9316},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 298, col: 15, offset: 9316},
							val:        "vector",
							ignoreCase: false,
							want:       "\"vector\"",
						},
						&ruleRefExpr{
							pos:  position{line: 298, col: 24, offset: 9325},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 298, col: 26, offset: 9327},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 298, col: 30, offset: 9331},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 298, col: 32, offset: 9333},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 298, col: 39, offset: 9340},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 298, col: 39, offset: 9340},
										name: "Float",
									},
									&ruleRefExpr{
										pos:  position{line: 298, col: 47, offset: 9348},
										name: "Integer",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 298, col: 56, offset: 9357},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 298, col: 58, offset: 9359},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "TIME_UNIT",
			pos:  position{line: 308, col: 1, offset: 9570},
			expr: &choiceExpr{
				pos: position{line: 308, col: 14, offset: 9583},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 308, col: 14, offset: 9583},
						run: (*parser).callonTIME_UNIT2,
						expr: &litMatcher{
							pos:        position{line: 308, col: 14, offset: 9583},
							val:        "ms",
							ignoreCase: false,
							want:       "\"ms\"",
						},
					},
					&actionExpr{
						pos: position{line: 310, col: 5, offset: 9620},
						run: (*parser).callonTIME_UNIT4,
						expr: &litMatcher{
							pos:        position{line: 310, col: 5, offset: 9620},
							val:        "s",
							ignoreCase: false,
							want:       "\"s\"",
						},
					},
					&actionExpr{
						pos: position{line: 312, col: 5, offset: 9659},
						run: (*parser).callonTIME_UNIT6,
						expr: &litMatcher{
							pos:        position{line: 312, col: 5, offset: 9659},
							val:        "m",
							ignoreCase: false,
							want:       "\"m\"",
						},
					},
					&actionExpr{
						pos: position{line: 314, col: 5, offset: 9699},
						run: (*parser).callonTIME_UNIT8,
						expr: &litMatcher{
							pos:        position{line: 314, col: 5, offset: 9699},
							val:        "h",
							ignoreCase: false,
							want:       "\"h\"",
						},
					},
					&actionExpr{
						pos: position{line: 316, col: 5, offset: 9744},
						run: (*parser).callonTIME_UNIT10,
						expr: &litMatcher{
							pos:        position{line: 316, col: 5, offset: 9744},
							val:        "d",
							ignoreCase: false,
							want:       "\"d\"",
						},
					},
					&actionExpr{
						pos: position{line: 318, col: 5, offset: 9794},
						run: (*parser).callonTIME_UNIT12,
						expr: &litMatcher{
							pos:        position{line: 318, col: 5, offset: 9794},
							val:        "w",
							ignoreCase: false,
							want:       "\"w\"",
						},
					},
					&actionExpr{
						pos: position{line: 320, col: 5, offset: 9848},
						run: (*parser).callonTIME_UNIT14,
						expr: &litMatcher{
							pos:        position{line: 320, col: 5, offset: 9848},
							val:        "y",
							ignoreCase: false,
							want:       "\"y\"",
						},
					},
				},
			},
		},
		{
			name: "opCOMP",
			pos:  position{line: 324, col: 1, offset: 9903},
			expr: &choiceExpr{
				pos: position{line: 324, col: 11, offset: 9913},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 324, col: 11, offset: 9913},
						name: "opCustom",
					},
					&actionExpr{
						pos: position{line: 325, col: 3, offset: 9924},
						run: (*parser).callonopCOMP3,
						expr: &litMatcher{
							pos:        position{line: 325, col: 3, offset: 9924},
							val:        "==",
							ignoreCase: false,
							want:       "\"==\"",
						},
					},
					&actionExpr{
						pos: position{line: 327, col: 5, offset: 9955},
						run: (*parser).callonopCOMP5,
						expr: &litMatcher{
							pos:        position{line: 327, col: 5, offset: 9955},
							val:        "=~",
							ignoreCase: false,
							want:       "\"=~\"",
						},
					},
					&actionExpr{
						pos: position{line: 329, col: 5, offset: 9986},
						run: (*parser).callonopCOMP7,
						expr: &litMatcher{
							pos:        position{line: 329, col: 5, offset: 9986},
							val:        "<=",
							ignoreCase: false,
							want:       "\"<=\"",
						},
					},
					&actionExpr{
						pos: position{line: 331, col: 5, offset: 10028},
						run: (*parser).callonopCOMP9,
						expr: &litMatcher{
							pos:        position{line: 331, col: 5, offset: 10028},
							val:        ">=",
							ignoreCase: false,
							want:       "\">=\"",
						},
					},
					&actionExpr{
						pos: position{line: 333, col: 5, offset: 10070},
						run: (*parser).callonopCOMP11,
						expr: &litMatcher{
							pos:        position{line: 333, col: 5, offset: 10070},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
					},
					&actionExpr{
						pos: position{line: 335, col: 5, offset: 10111},
						run: (*parser).callonopCOMP13,
						expr: &litMatcher{
							pos:        position{line: 335, col: 5, offset: 10111},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
					},
					&actionExpr{
						pos: position{line: 337, col: 5, offset: 10152},
						run: (*parser).callonopCOMP15,
						expr: &litMatcher{
							pos:        position{line: 337, col: 5, offset: 10152},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
					&actionExpr{
						pos: position{line: 339, col: 5, offset: 10193},
						run: (*parser).callonopCOMP17,
						expr: &litMatcher{
							pos:        position{line: 339, col: 5, offset: 10193},
							val:        "!=",
							ignoreCase: false,
							want:       "\"!=\"",
						},
					},
					&actionExpr{
						pos: position{line: 341, col: 5, offset: 10235},
						run: (*parser).callonopCOMP19,
						expr: &litMatcher{
							pos:        position{line: 341, col: 5, offset: 10235},
							val:        "!~",
							ignoreCase: false,
							want:       "\"!~\"",
						},
					},
				},
			},
		},
		{
			name: "GrepFilter",
			pos:  position{line: 345, col: 1, offset: 10267},
			expr: &choiceExpr{
				pos: position{line: 345, col: 15, offset: 10281},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 345, col: 15, offset: 10281},
						run: (*parser).callonGrepFilter2,
						expr: &litMatcher{
							pos:        position{line: 345, col: 15, offset: 10281},
							val:        "|=",
							ignoreCase: false,
							want:       "\"|=\"",
						},
					},
					&actionExpr{
						pos: position{line: 347, col: 5, offset: 10312},
						run: (*parser).callonGrepFilter4,
						expr: &litMatcher{
							pos:        position{line: 347, col: 5, offset: 10312},
							val:        "!=",
							ignoreCase: false,
							want:       "\"!=\"",
						},
					},
					&actionExpr{
						pos: position{line: 349, col: 5, offset: 10354},
						run: (*parser).callonGrepFilter6,
						expr: &litMatcher{
							pos:        position{line: 349, col: 5, offset: 10354},
							val:        "|~",
							ignoreCase: false,
							want:       "\"|~\"",
						},
					},
					&actionExpr{
						pos: position{line: 351, col: 5, offset: 10386},
						run: (*parser).callonGrepFilter8,
						expr: &litMatcher{
							pos:        position{line: 351, col: 5, offset: 10386},
							val:        "!~",
							ignoreCase: false,
							want:       "\"!~\"",
						},
					},
				},
			},
		},
		{
			name: "opCustom",
			pos:  position{line: 356, col: 1, offset: 10419},
			expr: &actionExpr{
				pos: position{line: 356, col: 13, offset: 10431},
				run: (*parser).callonopCustom1,
				expr: &seqExpr{
					pos: position{line: 356, col: 13, offset: 10431},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 356, col: 13, offset: 10431},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 356, col: 17, offset: 10435},
							label: "opname",
							expr: &oneOrMoreExpr{
								pos: position{line: 356, col: 24, offset: 10442},
								expr: &charClassMatcher{
									pos:        position{line: 356, col: 24, offset: 10442},
									val:        "[a-z]i",
									ranges:     []rune{'a', 'z'},
									ignoreCase: true,
									inverted:   false,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 356, col: 32, offset: 10450},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
					},
				},
			},
		},
		{
			name: "LetOpr",
			pos:  position{line: 361, col: 1, offset: 10497},
			expr: &choiceExpr{
				pos: position{line: 361, col: 11, offset: 10507},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 361, col: 11, offset: 10507},
						run: (*parser).callonLetOpr2,
						expr: &seqExpr{
							pos: position{line: 361, col: 11, offset: 10507},
							exprs: []any{
								&charClassMatcher{
									pos:        position{line: 361, col: 11, offset: 10507},
									val:        "[>]",
									chars:      []rune{'>'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 361, col: 15, offset: 10511},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 363, col: 5, offset: 10567},
						run: (*parser).callonLetOpr6,
						expr: &litMatcher{
							pos:        position{line: 363, col: 5, offset: 10567},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
					&actionExpr{
						pos: position{line: 365, col: 5, offset: 10614},
						run: (*parser).callonLetOpr8,
						expr: &seqExpr{
							pos: position{line: 365, col: 5, offset: 10614},
							exprs: []any{
								&charClassMatcher{
									pos:        position{line: 365, col: 5, offset: 10614},
									val:        "[<]",
									chars:      []rune{'<'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 365, col: 9, offset: 10618},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 367, col: 5, offset: 10671},
						run: (*parser).callonLetOpr12,
						expr: &litMatcher{
							pos:        position{line: 367, col: 5, offset: 10671},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
					},
					&actionExpr{
						pos: position{line: 369, col: 5, offset: 10715},
						run: (*parser).callonLetOpr14,
						expr: &seqExpr{
							pos: position{line: 369, col: 5, offset: 10715},
							exprs: []any{
								&charClassMatcher{
									pos:        position{line: 369, col: 5, offset: 10715},
									val:        "[=]",
									chars:      []rune{'='},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 369, col: 9, offset: 10719},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 371, col: 5, offset: 10761},
						run: (*parser).callonLetOpr18,
						expr: &seqExpr{
							pos: position{line: 371, col: 5, offset: 10761},
							exprs: []any{
								&charClassMatcher{
									pos:        position{line: 371, col: 5, offset: 10761},
									val:        "[!]",
									chars:      []rune{'!'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 371, col: 9, offset: 10765},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 373, col: 5, offset: 10810},
						run: (*parser).callonLetOpr22,
						expr: &litMatcher{
							pos:        position{line: 373, col: 5, offset: 10810},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
					},
					&actionExpr{
						pos: position{line: 375, col: 5, offset: 10849},
						run: (*parser).callonLetOpr24,
						expr: &litMatcher{
							pos:        position{line: 375, col: 5, offset: 10849},
							val:        "-",
							ignoreCase: false,
							want:       "\"-\"",
						},
					},
					&actionExpr{
						pos: position{line: 377, col: 5, offset: 10893},
						run: (*parser).callonLetOpr26,
						expr: &litMatcher{
							pos:        position{line: 377, col: 5, offset: 10893},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
					},
					&actionExpr{
						pos: position{line: 379, col: 5, offset: 10935},
						run: (*parser).callonLetOpr28,
						expr: &litMatcher{
							pos:        position{line: 379, col: 5, offset: 10935},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
					},
					&actionExpr{
						pos: position{line: 381, col: 5, offset: 10979},
						run: (*parser).callonLetOpr30,
						expr: &litMatcher{
							pos:        position{line: 381, col: 5, offset: 10979},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
					},
				},
			},
		},
		{
			name: "LetIdentifier",
			pos:  position{line: 385, col: 1, offset: 11020},
			expr: &choiceExpr{
				pos: position{line: 385, col: 18, offset: 11037},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 385, col: 18, offset: 11037},
						run: (*parser).callonLetIdentifier2,
						expr: &seqExpr{
							pos: position{line: 385, col: 18, offset: 11037},
							exprs: []any{
								&zeroOrOneExpr{
									pos: position{line: 385, col: 18, offset: 11037},
									expr: &litMatcher{
										pos:        position{line: 385, col: 18, offset: 11037},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 385, col: 23, offset: 11042},
									name: "Float",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 391, col: 5, offset: 11237},
						run: (*parser).callonLetIdentifier7,
						expr: &seqExpr{
							pos: position{line: 391, col: 5, offset: 11237},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 391, col: 5, offset: 11237},
									expr: &litMatcher{
										pos:        position{line: 391, col: 5, offset: 11237},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 391, col: 10, offset: 11242},
									name: "Integer",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 397, col: 6, offset: 11447},
						run: (*parser).callonLetIdentifier12,
						expr: &ruleRefExpr{
							pos:  position{line: 397, col: 6, offset: 11447},
							name: "Integer",
						},
					},
					&actionExpr{
						pos: position{line: 403, col: 5, offset: 11656},
						run: (*parser).callonLetIdentifier14,
						expr: &ruleRefExpr{
							pos:  position{line: 403, col: 5, offset: 11656},
							name: "QuotedValue",
						},
					},
				},
			},
		},
		{
			name: "Add",
			pos:  position{line: 412, col: 1, offset: 11853},
			expr: &actionExpr{
				pos: position{line: 412, col: 8, offset: 11860},
				run: (*parser).callonAdd1,
				expr: &litMatcher{
					pos:        position{line: 412, col: 8, offset: 11860},
					val:        "+",
					ignoreCase: false,
					want:       "\"+\"",
				},
			},
		},
		{
			name: "Subtract",
			pos:  position{line: 413, col: 1, offset: 11889},
			expr: &actionExpr{
				pos: position{line: 413, col: 13, offset: 11901},
				run: (*parser).callonSubtract1,
				expr: &litMatcher{
					pos:        position{line: 413, col: 13, offset: 11901},
					val:        "-",
					ignoreCase: false,
					want:       "\"-\"",
				},
			},
		},
		{
			name: "Multiply",
			pos:  position{line: 414, col: 1, offset: 11925},
			expr: &actionExpr{
				pos: position{line: 414, col: 13, offset: 11937},
				run: (*parser).callonMultiply1,
				expr: &litMatcher{
					pos:        position{line: 414, col: 13, offset: 11937},
					val:        "*",
					ignoreCase: false,
					want:       "\"*\"",
				},
			},
		},
		{
			name: "Divide",
			pos:  position{line: 415, col: 1, offset: 11961},
			expr: &actionExpr{
				pos: position{line: 415, col: 11, offset: 11971},
				run: (*parser).callonDivide1,
				expr: &litMatcher{
					pos:        position{line: 415, col: 11, offset: 11971},
					val:        "/",
					ignoreCase: false,
					want:       "\"/\"",
				},
			},
		},
		{
			name: "Modulo",
			pos:  position{line: 416, col: 1, offset: 11997},
			expr: &actionExpr{
				pos: position{line: 416, col: 11, offset: 12007},
				run: (*parser).callonModulo1,
				expr: &litMatcher{
					pos:        position{line: 416, col: 11, offset: 12007},
					val:        "%",
					ignoreCase: false,
					want:       "\"%\"",
				},
			},
		},
		{
			name: "BoolValue",
			pos:  position{line: 418, col: 1, offset: 12034},
			expr: &choiceExpr{
				pos: position{line: 418, col: 14, offset: 12047},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 418, col: 14, offset: 12047},
						val:        "false",
						ignoreCase: false,
						want:       "\"false\"",
					},
					&litMatcher{
						pos:        position{line: 418, col: 24, offset: 12057},
						val:        "true",
						ignoreCase: false,
						want:       "\"true\"",
					},
				},
			},
		},
		{
			name: "COUNT_OVER_TIME",
			pos:  position{line: 420, col: 1, offset: 12065},
			expr: &litMatcher{
				pos:        position{line: 420, col: 20, offset: 12084},
				val:        "count_over_time",
				ignoreCase: false,
				want:       "\"count_over_time\"",
			},
		},
		{
			name: "VECTOR",
			pos:  position{line: 422, col: 1, offset: 12104},
			expr: &litMatcher{
				pos:        position{line: 422, col: 11, offset: 12114},
				val:        "vector",
				ignoreCase: false,
				want:       "\"vector\"",
			},
		},
		{
			name: "Field",
			pos:  position{line: 424, col: 1, offset: 12124},
			expr: &choiceExpr{
				pos: position{line: 424, col: 10, offset: 12133},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 424, col: 10, offset: 12133},
						name: "Value",
					},
					&actionExpr{
						pos: position{line: 424, col: 18, offset: 12141},
						run: (*parser).callonField3,
						expr: &labeledExpr{
							pos:   position{line: 424, col: 18, offset: 12141},
							label: "pieces",
							expr: &ruleRefExpr{
								pos:  position{line: 424, col: 25, offset: 12148},
								name: "FieldPiece",
							},
						},
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 432, col: 1, offset: 12240},
			expr: &actionExpr{
				pos: position{line: 433, col: 4, offset: 12257},
				run: (*parser).callonIdentifier1,
				expr: &oneOrMoreExpr{
					pos: position{line: 433, col: 4, offset: 12257},
					expr: &charClassMatcher{
						pos:        position{line: 433, col: 4, offset: 12257},
						val:        "[a-zA-Z0-9_@./*]i",
						chars:      []rune{'_', '@', '.', '/', '*'},
						ranges:     []rune{'a', 'z', 'a', 'z', '0', '9'},
						ignoreCase: true,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Value",
			pos:  position{line: 437, col: 1, offset: 12315},
			expr: &actionExpr{
				pos: position{line: 437, col: 10, offset: 12324},
				run: (*parser).callonValue1,
				expr: &labeledExpr{
					pos:   position{line: 437, col: 10, offset: 12324},
					label: "val",
					expr: &choiceExpr{
						pos: position{line: 438, col: 5, offset: 12334},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 438, col: 5, offset: 12334},
								name: "Float",
							},
							&ruleRefExpr{
								pos:  position{line: 439, col: 7, offset: 12346},
								name: "Integer",
							},
						},
					},
				},
			},
		},
		{
			name: "Integer",
			pos:  position{line: 445, col: 1, offset: 12401},
			expr: &actionExpr{
				pos: position{line: 445, col: 12, offset: 12412},
				run: (*parser).callonInteger1,
				expr: &seqExpr{
					pos: position{line: 445, col: 12, offset: 12412},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 445, col: 12, offset: 12412},
							expr: &charClassMatcher{
								pos:        position{line: 445, col: 12, offset: 12412},
								val:        "[+-]",
								chars:      []rune{'+', '-'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 445, col: 18, offset: 12418},
							expr: &charClassMatcher{
								pos:        position{line: 445, col: 18, offset: 12418},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "Float",
			pos:  position{line: 449, col: 1, offset: 12476},
			expr: &actionExpr{
				pos: position{line: 449, col: 10, offset: 12485},
				run: (*parser).callonFloat1,
				expr: &seqExpr{
					pos: position{line: 449, col: 10, offset: 12485},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 449, col: 10, offset: 12485},
							expr: &charClassMatcher{
								pos:        position{line: 449, col: 10, offset: 12485},
								val:        "[+-]",
								chars:      []rune{'+', '-'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&seqExpr{
							pos: position{line: 449, col: 17, offset: 12492},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 449, col: 17, offset: 12492},
									expr: &charClassMatcher{
										pos:        position{line: 449, col: 17, offset: 12492},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 449, col: 24, offset: 12499},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 449, col: 28, offset: 12503},
									expr: &charClassMatcher{
										pos:        position{line: 449, col: 28, offset: 12503},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldPiece",
			pos:  position{line: 453, col: 1, offset: 12567},
			expr: &choiceExpr{
				pos: position{line: 453, col: 15, offset: 12581},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 453, col: 15, offset: 12581},
						name: "QuotedFieldPiece",
					},
					&ruleRefExpr{
						pos:  position{line: 453, col: 34, offset: 12600},
						name: "UnquotedFieldPiece",
					},
					&ruleRefExpr{
						pos:  position{line: 453, col: 55, offset: 12621},
						name: "Star",
					},
				},
			},
		},
		{
			name: "UnquotedFieldPiece",
			pos:  position{line: 455, col: 1, offset: 12627},
			expr: &actionExpr{
				pos: position{line: 455, col: 23, offset: 12649},
				run: (*parser).callonUnquotedFieldPiece1,
				expr: &oneOrMoreExpr{
					pos: position{line: 455, col: 23, offset: 12649},
					expr: &charClassMatcher{
						pos:        position{line: 455, col: 23, offset: 12649},
						val:        "[-a-zA-Z0-9$&,?#%_@;[\\]{}+-./*:]i",
						chars:      []rune{'-', '$', '&', ',', '?', '#', '%', '_', '@', ';', '[', ']', '{', '}', '/', '*', ':'},
						ranges:     []rune{'a', 'z', 'a', 'z', '0', '9', '+', '.'},
						ignoreCase: true,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "QuotedFieldPiece",
			pos:  position{line: 459, col: 1, offset: 12720},
			expr: &ruleRefExpr{
				pos:  position{line: 459, col: 21, offset: 12740},
				name: "QuotedValue",
			},
		},
		{
			name: "Star",
			pos:  position{line: 461, col: 1, offset: 12753},
			expr: &actionExpr{
				pos: position{line: 461, col: 9, offset: 12761},
				run: (*parser).callonStar1,
				expr: &litMatcher{
					pos:        position{line: 461, col: 9, offset: 12761},
					val:        "*",
					ignoreCase: false,
					want:       "\"*\"",
				},
			},
		},
		{
			name: "QuotedValue",
			pos:  position{line: 464, col: 1, offset: 12789},
			expr: &actionExpr{
				pos: position{line: 464, col: 16, offset: 12804},
				run: (*parser).callonQuotedValue1,
				expr: &seqExpr{
					pos: position{line: 464, col: 16, offset: 12804},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 464, col: 16, offset: 12804},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 464, col: 20, offset: 12808},
							expr: &choiceExpr{
								pos: position{line: 464, col: 22, offset: 12810},
								alternatives: []any{
									&seqExpr{
										pos: position{line: 464, col: 22, offset: 12810},
										exprs: []any{
											&notExpr{
												pos: position{line: 464, col: 22, offset: 12810},
												expr: &ruleRefExpr{
													pos:  position{line: 464, col: 23, offset: 12811},
													name: "EscapedChar",
												},
											},
											&anyMatcher{
												line: 464, col: 35, offset: 12823,
											},
										},
									},
									&seqExpr{
										pos: position{line: 464, col: 39, offset: 12827},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 464, col: 39, offset: 12827},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
											&ruleRefExpr{
												pos:  position{line: 464, col: 44, offset: 12832},
												name: "EscapeSequence",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 464, col: 62, offset: 12850},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 468, col: 1, offset: 12967},
			expr: &charClassMatcher{
				pos:        position{line: 468, col: 16, offset: 12982},
				val:        "[\\x00-\\x1f\"\\\\]",
				chars:      []rune{'"', '\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 470, col: 1, offset: 12998},
			expr: &choiceExpr{
				pos: position{line: 470, col: 19, offset: 13016},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 470, col: 19, offset: 13016},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 470, col: 38, offset: 13035},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 472, col: 1, offset: 13050},
			expr: &charClassMatcher{
				pos:        position{line: 472, col: 21, offset: 13070},
				val:        "[\"\\\\/bfnrt]",
				chars:      []rune{'"', '\\', '/', 'b', 'f', 'n', 'r', 't'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 474, col: 1, offset: 13083},
			expr: &seqExpr{
				pos: position{line: 474, col: 18, offset: 13100},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 474, col: 18, offset: 13100},
						val:        "u",
						ignoreCase: false,
						want:       "\"u\"",
					},
					&ruleRefExpr{
						pos:  position{line: 474, col: 22, offset: 13104},
						name: "HexDigit",
					},
					&ruleRefExpr{
						pos:  position{line: 474, col: 31, offset: 13113},
						name: "HexDigit",
					},
					&ruleRefExpr{
						pos:  position{line: 474, col: 40, offset: 13122},
						name: "HexDigit",
					},
					&ruleRefExpr{
						pos:  position{line: 474, col: 49, offset: 13131},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 476, col: 1, offset: 13141},
			expr: &charClassMatcher{
				pos:        position{line: 476, col: 13, offset: 13153},
				val:        "[0-9a-f]i",
				ranges:     []rune{'0', '9', 'a', 'f'},
				ignoreCase: true,
				inverted:   false,
			},
		},
		{
			name: "EOF",
			pos:  position{line: 481, col: 1, offset: 13237},
			expr: &notExpr{
				pos: position{line: 481, col: 7, offset: 13243},
				expr: &anyMatcher{
					line: 481, col: 8, offset: 13244,
				},
			},
		},
		{
			name: "whitespace",
			pos:  position{line: 483, col: 1, offset: 13247},
			expr: &zeroOrMoreExpr{
				pos: position{line: 483, col: 15, offset: 13261},
				expr: &charClassMatcher{
					pos:        position{line: 483, col: 15, offset: 13261},
					val:        "[ \\n\\t\\r]",
					chars:      []rune{' ', '\n', '\t', '\r'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "_",
			pos:  position{line: 485, col: 1, offset: 13273},
			expr: &zeroOrMoreExpr{
				pos: position{line: 485, col: 6, offset: 13278},
				expr: &charClassMatcher{
					pos:        position{line: 485, col: 6, offset: 13278},
					val:        "[ \\t]",
					chars:      []rune{' ', '\t'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "space",
			pos:  position{line: 487, col: 1, offset: 13286},
			expr: &oneOrMoreExpr{
				pos: position{line: 487, col: 10, offset: 13295},
				expr: &charClassMatcher{
					pos:        position{line: 487, col: 10, offset: 13295},
					val:        "[ \\n\\t\\r]",
					chars:      []rune{' ', '\n', '\t', '\r'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Delimiter",
			pos:  position{line: 489, col: 1, offset: 13307},
			expr: &choiceExpr{
				pos: position{line: 489, col: 14, offset: 13320},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 489, col: 14, offset: 13320},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 489, col: 20, offset: 13326},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
	},
}

func (c *current) onStart2(query, jf, fs any) (any, error) {
	var q ast.QueryStruct
	if jf != nil {
		q.PipeCommands = jf.(*structs.QueryAggregators)
		q.PipeCommands.PipeCommandType = structs.OutputTransformType
	}
	if query != nil && fs != nil {
		finalNode := &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     query.(*ast.Node),
			Right:    fs.(*ast.Node),
		}
		q.SearchFilter = finalNode
		return q, nil

	}
	if fs != nil && query == nil {
		q.SearchFilter = fs.(*ast.Node)
		return q, nil
	}

	if query != nil && fs == nil {
		q.SearchFilter = query.(*ast.Node)
		return q, nil
	}

	return q, nil
}

func (p *parser) callonStart2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStart2(stack["query"], stack["jf"], stack["fs"])
}

func (c *current) onStart14(query, duration any) (any, error) {
	var q ast.QueryStruct
	q.SearchFilter = query.(*ast.Node)
	aggs := &structs.QueryAggregators{}
	countCols := []*structs.MeasureAggregator{{MeasureCol: "*", MeasureFunc: utils.Count}}
	aggs.GroupByRequest = &structs.GroupByRequest{MeasureOperations: countCols, GroupByColumns: []string{"*"}}
	timeNow := utils.GetCurrentTimeMillis()
	aggs.TimeHistogram = &structs.TimeBucket{StartTime: timeNow - duration.(uint64), EndTime: timeNow}
	q.PipeCommands = aggs
	q.PipeCommands.PipeCommandType = structs.GroupByType
	return q, nil
}

func (p *parser) callonStart14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStart14(stack["query"], stack["duration"])
}

func (c *current) onStart23(expr any) (any, error) {
	var q ast.QueryStruct
	aggs := &structs.QueryAggregators{}
	aggs.VectorArithmeticExpr = expr.(*structs.NumericExpr)
	q.PipeCommands = aggs
	q.PipeCommands.PipeCommandType = structs.VectorArithmeticExprType
	return q, nil
}

func (p *parser) callonStart23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStart23(stack["expr"])
}

func (c *current) onStream1(q1, rest any) (any, error) {
	startNode, ok := q1.(*ast.Node)
	if !ok {
		return nil, nil
	}
	if len(rest.([]interface{})) == 0 {
		return startNode, nil
	}
	finalNode := &ast.Node{
		NodeType: ast.NodeAnd,
		Left:     startNode,
		Right:    &ast.Node{},
	}
	ptr := finalNode
	for index, query := range rest.([]interface{}) {
		if index == len(rest.([]interface{}))-1 {
			ptr.Right = query.(*ast.Node)
		} else {
			ptr.Right = &ast.Node{
				NodeType: ast.NodeAnd,
				Left:     query.(*ast.Node),
				Right:    &ast.Node{},
			}
			ptr = ptr.Right
		}
	}
	return finalNode, nil
}

func (p *parser) callonStream1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStream1(stack["q1"], stack["rest"])
}

func (c *current) onFilterStream1(rest any) (any, error) {
	if rest == nil || len(rest.([]interface{})) == 0 {
		return nil, nil
	}
	list := rest.([]interface{})
	if len(list) == 1 {
		return list[0].(*ast.Node), nil
	}
	finalNode := &ast.Node{
		NodeType: ast.NodeAnd,
		Left:     list[0].(*ast.Node),
		Right:    &ast.Node{},
	}
	ptr := finalNode
	list = list[1:]
	for index, filter := range list {
		if index == len(list)-1 {
			ptr.Right = filter.(*ast.Node)
		} else {
			ptr.Right = &ast.Node{
				NodeType: ast.NodeAnd,
				Left:     filter.(*ast.Node),
				Right:    &ast.Node{},
			}
			ptr = ptr.Right
		}
	}
	return finalNode, nil
}

func (p *parser) callonFilterStream1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterStream1(stack["rest"])
}

func (c *current) onQuery1(field, field1 any) (any, error) {
	return &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     "=",
			Field:  field.(string),
			Values: field1,
		},
	}, nil
}

func (p *parser) callonQuery1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuery1(stack["field"], stack["field1"])
}

func (c *current) onSingleField1(field any) (any, error) {
	return &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Field:  field.(string),
			Values: field,
		},
	}, nil
}

func (p *parser) callonSingleField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleField1(stack["field"])
}

func (c *current) onLogFilter1(grep, field any) (any, error) {
	return &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     grep.(string),
			Values: ast.GrepValue{Field: field.(string)},
		},
	}, nil

}

func (p *parser) callonLogFilter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogFilter1(stack["grep"], stack["field"])
}

func (c *current) onLabelFilter1(field, op, field1 any) (any, error) {
	return &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     op.(string),
			Field:  field.(string),
			Values: field1,
		},
	}, nil
}

func (p *parser) callonLabelFilter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabelFilter1(stack["field"], stack["op"], stack["field1"])
}

func (c *current) onJSONFilter2(rest any) (any, error) {
	if len(rest.([]interface{})) == 0 {
		return nil, nil
	}
	rawIncludeValues := make([]*structs.IncludeValue, 0)
	mapLabels := make(map[string]string, 0)
	aggNode := &structs.QueryAggregators{OutputTransforms: &structs.OutputTransforms{}}
	columsArray := make([]string, 0)
	for _, query := range rest.([]interface{}) {
		label := query.(*ast.Node).Comparison.Field
		expression := strings.Trim(query.(*ast.Node).Comparison.Values.(string), "\"")
		r := regexp.MustCompile(`^(\w+)\[(\d+)\]$`)
		isIndexed := r.MatchString(expression)
		if isIndexed {
			match := r.FindStringSubmatch(expression)
			cname := match[1]
			index, err := strconv.Atoi(match[2])
			if err != nil {
				return nil, fmt.Errorf("ParseJSONRequest: error parsing json array expression")
			}
			rawIncludeValues = append(rawIncludeValues, &structs.IncludeValue{Index: index, ColName: cname, Label: label})
			columsArray = append(columsArray, cname)
		} else {
			mapLabels[expression] = label
			columsArray = append(columsArray, expression)
		}
	}
	aggNode.OutputTransforms = &structs.OutputTransforms{OutputColumns: &structs.ColumnsRequest{IncludeColumns: columsArray}}
	aggNode.OutputTransforms.OutputColumns.RenameColumns = mapLabels
	aggNode.OutputTransforms.OutputColumns.IncludeValues = rawIncludeValues
	return aggNode, nil
}

func (p *parser) callonJSONFilter2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJSONFilter2(stack["rest"])
}

func (c *current) onJSONFilter14(rest any) (any, error) {
	aggNode := &structs.QueryAggregators{OutputTransforms: &structs.OutputTransforms{OutputColumns: &structs.ColumnsRequest{}}}
	rawIncludeValues := make([]*structs.IncludeValue, 0)
	for _, query := range rest.([]interface{}) {
		expression := strings.Trim(query.(*ast.Node).Comparison.Values.(string), "\"")
		newValue := &structs.IncludeValue{ColName: expression, Label: query.(*ast.Node).Comparison.Field}
		rawIncludeValues = append(rawIncludeValues, newValue)
	}
	aggNode.OutputTransforms.OutputColumns.IncludeValues = rawIncludeValues
	aggNode.OutputTransforms.OutputColumns.Logfmt = true
	return aggNode, nil
}

func (p *parser) callonJSONFilter14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJSONFilter14(stack["rest"])
}

func (c *current) onDuration1(val, timeUnit any) (any, error) {
	switch rawVal := val.(type) {
	case json.Number:
		interval, err := rawVal.Int64()
		if err != nil {
			return nil, fmt.Errorf("input is not an integer number")
		}
		return uint64(interval) * timeUnit.(uint64), nil
	default:
		return nil, fmt.Errorf("input is not a JSON number")
	}
}

func (p *parser) callonDuration1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1(stack["val"], stack["timeUnit"])
}

func (c *current) onVectorArithmeticExpr1(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonVectorArithmeticExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorArithmeticExpr1(stack["expr"])
}

func (c *current) onArithmeticExpr1(head, tail any) (any, error) {
	result := head
	tailSlice := tail.([]any)
	for _, op := range tailSlice {
		opSlice := op.([]any)
		result = &structs.NumericExpr{
			IsTerminal:      false,
			Op:              opSlice[1].(string),
			Left:            result.(*structs.NumericExpr),
			Right:           opSlice[3].(*structs.NumericExpr),
			NumericExprMode: structs.NEMNumericExpr,
		}
	}
	return result, nil
}

func (p *parser) callonArithmeticExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArithmeticExpr1(stack["head"], stack["tail"])
}

func (c *current) onTerm1(head, tail any) (any, error) {
	result := head
	tailSlice := tail.([]any)
	for _, op := range tailSlice {
		opSlice := op.([]any)
		result = &structs.NumericExpr{
			IsTerminal:      false,
			Op:              opSlice[1].(string),
			Left:            result.(*structs.NumericExpr),
			Right:           opSlice[3].(*structs.NumericExpr),
			NumericExprMode: structs.NEMNumericExpr,
		}
	}
	return result, nil
}

func (p *parser) callonTerm1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTerm1(stack["head"], stack["tail"])
}

func (c *current) onVectorExpr1(value any) (any, error) {
	expr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    false,
		Value:           fmt.Sprintf("%v", value),
		NumericExprMode: structs.NEMNumber,
	}
	return expr, nil
}

func (p *parser) callonVectorExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorExpr1(stack["value"])
}

func (c *current) onTIME_UNIT2() (any, error) {
	return uint64(1), nil
}

func (p *parser) callonTIME_UNIT2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTIME_UNIT2()
}

func (c *current) onTIME_UNIT4() (any, error) {
	return uint64(1000), nil
}

func (p *parser) callonTIME_UNIT4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTIME_UNIT4()
}

func (c *current) onTIME_UNIT6() (any, error) {
	return uint64(60000), nil
}

func (p *parser) callonTIME_UNIT6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTIME_UNIT6()
}

func (c *current) onTIME_UNIT8() (any, error) {
	return uint64(60 * 60000), nil
}

func (p *parser) callonTIME_UNIT8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTIME_UNIT8()
}

func (c *current) onTIME_UNIT10() (any, error) {
	return uint64(24 * 60 * 60000), nil
}

func (p *parser) callonTIME_UNIT10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTIME_UNIT10()
}

func (c *current) onTIME_UNIT12() (any, error) {
	return uint64(7 * 24 * 60 * 60000), nil
}

func (p *parser) callonTIME_UNIT12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTIME_UNIT12()
}

func (c *current) onTIME_UNIT14() (any, error) {
	return uint64(365 * 24 * 60 * 60000), nil
}

func (p *parser) callonTIME_UNIT14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTIME_UNIT14()
}

func (c *current) onopCOMP3() (any, error) {
	return "=", nil
}

func (p *parser) callonopCOMP3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onopCOMP3()
}

func (c *current) onopCOMP5() (any, error) {
	return "=", nil
}

func (p *parser) callonopCOMP5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onopCOMP5()
}

func (c *current) onopCOMP7() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonopCOMP7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onopCOMP7()
}

func (c *current) onopCOMP9() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonopCOMP9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onopCOMP9()
}

func (c *current) onopCOMP11() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonopCOMP11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onopCOMP11()
}

func (c *current) onopCOMP13() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonopCOMP13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onopCOMP13()
}

func (c *current) onopCOMP15() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonopCOMP15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onopCOMP15()
}

func (c *current) onopCOMP17() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonopCOMP17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onopCOMP17()
}

func (c *current) onopCOMP19() (any, error) {
	return "!=", nil
}

func (p *parser) callonopCOMP19() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onopCOMP19()
}

func (c *current) onGrepFilter2() (any, error) {
	return "=", nil
}

func (p *parser) callonGrepFilter2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrepFilter2()
}

func (c *current) onGrepFilter4() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonGrepFilter4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrepFilter4()
}

func (c *current) onGrepFilter6() (any, error) {
	return "=", nil
}

func (p *parser) callonGrepFilter6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrepFilter6()
}

func (c *current) onGrepFilter8() (any, error) {
	return "!=", nil
}

func (p *parser) callonGrepFilter8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrepFilter8()
}

func (c *current) onopCustom1(opname any) (any, error) {
	return ast.OpNameToString(c.text)
}

func (p *parser) callonopCustom1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onopCustom1(stack["opname"])
}

func (c *current) onLetOpr2() (any, error) {
	return utils.LetGreaterThanOrEqualTo, nil
}

func (p *parser) callonLetOpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetOpr2()
}

func (c *current) onLetOpr6() (any, error) {
	return utils.LetGreaterThan, nil
}

func (p *parser) callonLetOpr6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetOpr6()
}

func (c *current) onLetOpr8() (any, error) {
	return utils.LetLessThanOrEqualTo, nil
}

func (p *parser) callonLetOpr8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetOpr8()
}

func (c *current) onLetOpr12() (any, error) {
	return utils.LetLessThan, nil
}

func (p *parser) callonLetOpr12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetOpr12()
}

func (c *current) onLetOpr14() (any, error) {
	return utils.LetEquals, nil
}

func (p *parser) callonLetOpr14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetOpr14()
}

func (c *current) onLetOpr18() (any, error) {
	return utils.LetNotEquals, nil
}

func (p *parser) callonLetOpr18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetOpr18()
}

func (c *current) onLetOpr22() (any, error) {
	return utils.LetAdd, nil
}

func (p *parser) callonLetOpr22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetOpr22()
}

func (c *current) onLetOpr24() (any, error) {
	return utils.LetSubtract, nil
}

func (p *parser) callonLetOpr24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetOpr24()
}

func (c *current) onLetOpr26() (any, error) {
	return utils.LetDivide, nil
}

func (p *parser) callonLetOpr26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetOpr26()
}

func (c *current) onLetOpr28() (any, error) {
	return utils.LetMultiply, nil
}

func (p *parser) callonLetOpr28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetOpr28()
}

func (c *current) onLetOpr30() (any, error) {
	return utils.LetModulo, nil
}

func (p *parser) callonLetOpr30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetOpr30()
}

func (c *current) onLetIdentifier2() (any, error) {
	var dte utils.DtypeEnclosure
	dte.Dtype = utils.SS_DT_FLOAT
	dte.FloatVal, _ = strconv.ParseFloat(string(c.text), 64)
	dte.StringVal = string(c.text)
	return &dte, nil
}

func (p *parser) callonLetIdentifier2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetIdentifier2()
}

func (c *current) onLetIdentifier7() (any, error) {
	var dte utils.DtypeEnclosure
	dte.Dtype = utils.SS_DT_SIGNED_NUM
	dte.SignedVal, _ = strconv.ParseInt(string(c.text), 10, 64)
	dte.StringVal = string(c.text)
	return &dte, nil
}

func (p *parser) callonLetIdentifier7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetIdentifier7()
}

func (c *current) onLetIdentifier12() (any, error) {
	var dte utils.DtypeEnclosure
	dte.Dtype = utils.SS_DT_UNSIGNED_NUM
	dte.UnsignedVal, _ = strconv.ParseUint(string(c.text), 10, 64)
	dte.StringVal = string(c.text)
	return &dte, nil
}

func (p *parser) callonLetIdentifier12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetIdentifier12()
}

func (c *current) onLetIdentifier14() (any, error) {
	var dte utils.DtypeEnclosure
	dte.Dtype = utils.SS_DT_STRING
	dte.BoolVal = 1
	dte.StringVal = string(c.text)
	return &dte, nil
}

func (p *parser) callonLetIdentifier14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetIdentifier14()
}

func (c *current) onAdd1() (any, error) {
	return "+", nil
}

func (p *parser) callonAdd1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdd1()
}

func (c *current) onSubtract1() (any, error) {
	return "-", nil
}

func (p *parser) callonSubtract1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubtract1()
}

func (c *current) onMultiply1() (any, error) {
	return "*", nil
}

func (p *parser) callonMultiply1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiply1()
}

func (c *current) onDivide1() (any, error) {
	return "/", nil
}

func (p *parser) callonDivide1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDivide1()
}

func (c *current) onModulo1() (any, error) {
	return "%", nil
}

func (p *parser) callonModulo1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onModulo1()
}

func (c *current) onField3(pieces any) (any, error) {
	if pieces == nil {
		return "*", nil
	}

	return string(c.text), nil
}

func (p *parser) callonField3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField3(stack["pieces"])
}

func (c *current) onIdentifier1() (any, error) {

	return string(c.text), nil
}

func (p *parser) callonIdentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1()
}

func (c *current) onValue1(val any) (any, error) {
	return ast.MakeValue(val)

}

func (p *parser) callonValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValue1(stack["val"])
}

func (c *current) onInteger1() (any, error) {
	return json.Number(string(c.text)), nil

}

func (p *parser) callonInteger1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInteger1()
}

func (c *current) onFloat1() (any, error) {
	return json.Number(string(c.text)), nil

}

func (p *parser) callonFloat1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloat1()
}

func (c *current) onUnquotedFieldPiece1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUnquotedFieldPiece1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedFieldPiece1()
}

func (c *current) onStar1() (any, error) {
	return "*", nil
}

func (p *parser) callonStar1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStar1()
}

func (c *current) onQuotedValue1() (any, error) {
	c.text = bytes.Replace(c.text, []byte(`\/`), []byte(`/`), -1)
	return strconv.Unquote(string(c.text))
}

func (p *parser) callonQuotedValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedValue1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize {
		val, ok = p.parseRuleMemoize(rule)
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
