// Code generated by pigeon; DO NOT EDIT.

package spl

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/siglens/siglens/pkg/ast"
	"github.com/siglens/siglens/pkg/segment/query"
	"github.com/siglens/siglens/pkg/segment/structs"
	"github.com/siglens/siglens/pkg/segment/utils"
	log "github.com/sirupsen/logrus"
)

func getParseError(err error) error {
	switch ev := err.(type) {
	case errList:
		if pe, ok := ev[0].(*parserError); ok {
			return &ast.ParseError{
				Inner:    pe.Inner,
				Line:     pe.pos.line,
				Column:   pe.pos.col,
				Offset:   pe.pos.offset,
				Prefix:   pe.prefix,
				Expected: pe.expected,
			}
		}
	}
	return err
}

// Remove the first and last character of the string
func removeQuotes(s any) string {
	str := s.(string)
	if len(str) < 3 {
		return ""
	}

	return str[1 : len(str)-1]
}

func deMorgansLaw(node *ast.Node) {
	switch node.NodeType {
	case ast.NodeTerminal:
		switch node.Comparison.Op {
		case "=":
			node.Comparison.Op = "!="
		case "!=":
			node.Comparison.Op = "="
		case ">":
			node.Comparison.Op = "<="
		case "<":
			node.Comparison.Op = ">="
		case ">=":
			node.Comparison.Op = "<"
		case "<=":
			node.Comparison.Op = ">"
		default:
			log.Errorf("deMorgansLaw: unexpected node comparison op: %v", node.Comparison.Op)
		}
	case ast.NodeAnd:
		node.NodeType = ast.NodeOr
		deMorgansLaw(node.Left)
		deMorgansLaw(node.Right)
	case ast.NodeOr:
		node.NodeType = ast.NodeAnd
		deMorgansLaw(node.Left)
		deMorgansLaw(node.Right)
	default:
		log.Errorf("deMorgansLaw: unexpected NodeType: %v", node.NodeType)
	}
}

// Generate NumericExpr struct for eval functions
func createNumericExpr(op string, leftNumericExpr *structs.NumericExpr, rightNumericExpr *structs.NumericExpr, numericExprMode structs.NumericExprMode) (*structs.NumericExpr, error) {
	if leftNumericExpr == nil {
		return nil, fmt.Errorf("expr cannot be nil")
	}

	return &structs.NumericExpr{
		IsTerminal:      false,
		Op:              op,
		Left:            leftNumericExpr,
		Right:           rightNumericExpr,
		NumericExprMode: numericExprMode,
	}, nil
}

func transferUint8ToString(opName interface{}) (string, error) {
	strData, ok := opName.([]byte)
	if !ok {
		return "", fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)
	return opNameStr, nil
}

func transferPCREToRE2(pattern string) string {
	pattern = strings.Replace(pattern, "(?<", "(?P<", -1)
	return pattern
}

func getRexColNames(pattern string) ([]string, error) {
	re, err := regexp.Compile(`\?<(?P<GroupName>[a-zA-Z0-9_]+)>`)
	if err != nil {
		return nil, fmt.Errorf("getRxcolNames: There are some errors in the pattern: %v", err)
	}
	matches := re.FindAllStringSubmatch(pattern, -1)

	var rexColNames []string
	for _, match := range matches {
		rexColNames = append(rexColNames, match[1])
	}

	return rexColNames, nil
}

type aggregator struct {
	aggregator         *structs.MeasureAggregator
	renameOutputField  bool
	outputFieldNewName string
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Start",
			pos:  position{line: 125, col: 1, offset: 3313},
			expr: &actionExpr{
				pos: position{line: 125, col: 10, offset: 3322},
				run: (*parser).callonStart1,
				expr: &seqExpr{
					pos: position{line: 125, col: 10, offset: 3322},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 125, col: 10, offset: 3322},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 10, offset: 3322},
								name: "SPACE",
							},
						},
						&labeledExpr{
							pos:   position{line: 125, col: 17, offset: 3329},
							label: "initialSearch",
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 32, offset: 3344},
								name: "InitialSearchBlock",
							},
						},
						&labeledExpr{
							pos:   position{line: 125, col: 52, offset: 3364},
							label: "filterBlocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 125, col: 65, offset: 3377},
								expr: &ruleRefExpr{
									pos:  position{line: 125, col: 66, offset: 3378},
									name: "FilterBlock",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 125, col: 80, offset: 3392},
							label: "queryAggBlocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 125, col: 95, offset: 3407},
								expr: &ruleRefExpr{
									pos:  position{line: 125, col: 96, offset: 3408},
									name: "QueryAggergatorBlock",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 125, col: 119, offset: 3431},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 119, offset: 3431},
								name: "SPACE",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 125, col: 126, offset: 3438},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "InitialSearchBlock",
			pos:  position{line: 196, col: 1, offset: 5647},
			expr: &actionExpr{
				pos: position{line: 196, col: 23, offset: 5669},
				run: (*parser).callonInitialSearchBlock1,
				expr: &seqExpr{
					pos: position{line: 196, col: 23, offset: 5669},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 196, col: 23, offset: 5669},
							expr: &ruleRefExpr{
								pos:  position{line: 196, col: 23, offset: 5669},
								name: "CMD_SEARCH",
							},
						},
						&labeledExpr{
							pos:   position{line: 196, col: 35, offset: 5681},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 196, col: 42, offset: 5688},
								name: "ClauseLevel4",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBlock",
			pos:  position{line: 200, col: 1, offset: 5729},
			expr: &actionExpr{
				pos: position{line: 200, col: 16, offset: 5744},
				run: (*parser).callonSearchBlock1,
				expr: &seqExpr{
					pos: position{line: 200, col: 16, offset: 5744},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 200, col: 16, offset: 5744},
							name: "CMD_SEARCH",
						},
						&labeledExpr{
							pos:   position{line: 200, col: 27, offset: 5755},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 200, col: 34, offset: 5762},
								name: "ClauseLevel4",
							},
						},
					},
				},
			},
		},
		{
			name: "FilterBlock",
			pos:  position{line: 204, col: 1, offset: 5803},
			expr: &actionExpr{
				pos: position{line: 204, col: 16, offset: 5818},
				run: (*parser).callonFilterBlock1,
				expr: &seqExpr{
					pos: position{line: 204, col: 16, offset: 5818},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 204, col: 16, offset: 5818},
							name: "PIPE",
						},
						&labeledExpr{
							pos:   position{line: 204, col: 21, offset: 5823},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 204, col: 28, offset: 5830},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 204, col: 28, offset: 5830},
										name: "SearchBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 204, col: 42, offset: 5844},
										name: "RegexBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QueryAggergatorBlock",
			pos:  position{line: 209, col: 1, offset: 5920},
			expr: &actionExpr{
				pos: position{line: 209, col: 25, offset: 5944},
				run: (*parser).callonQueryAggergatorBlock1,
				expr: &labeledExpr{
					pos:   position{line: 209, col: 25, offset: 5944},
					label: "block",
					expr: &choiceExpr{
						pos: position{line: 209, col: 32, offset: 5951},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 209, col: 32, offset: 5951},
								name: "FieldSelectBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 209, col: 51, offset: 5970},
								name: "AggregatorBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 209, col: 69, offset: 5988},
								name: "EvalBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 209, col: 81, offset: 6000},
								name: "WhereBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 209, col: 94, offset: 6013},
								name: "HeadBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 209, col: 106, offset: 6025},
								name: "RexBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 209, col: 117, offset: 6036},
								name: "StatisticBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldSelectBlock",
			pos:  position{line: 214, col: 1, offset: 6132},
			expr: &actionExpr{
				pos: position{line: 214, col: 21, offset: 6152},
				run: (*parser).callonFieldSelectBlock1,
				expr: &seqExpr{
					pos: position{line: 214, col: 21, offset: 6152},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 214, col: 21, offset: 6152},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 214, col: 26, offset: 6157},
							name: "CMD_FIELDS",
						},
						&labeledExpr{
							pos:   position{line: 214, col: 37, offset: 6168},
							label: "op",
							expr: &zeroOrOneExpr{
								pos: position{line: 214, col: 40, offset: 6171},
								expr: &choiceExpr{
									pos: position{line: 214, col: 41, offset: 6172},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 214, col: 41, offset: 6172},
											val:        "- ",
											ignoreCase: false,
											want:       "\"- \"",
										},
										&litMatcher{
											pos:        position{line: 214, col: 48, offset: 6179},
											val:        "+ ",
											ignoreCase: false,
											want:       "\"+ \"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 214, col: 55, offset: 6186},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 214, col: 62, offset: 6193},
								name: "FieldNameList",
							},
						},
					},
				},
			},
		},
		{
			name: "AggregatorBlock",
			pos:  position{line: 232, col: 1, offset: 6698},
			expr: &actionExpr{
				pos: position{line: 232, col: 20, offset: 6717},
				run: (*parser).callonAggregatorBlock1,
				expr: &seqExpr{
					pos: position{line: 232, col: 20, offset: 6717},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 232, col: 20, offset: 6717},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 232, col: 25, offset: 6722},
							name: "CMD_STATS",
						},
						&labeledExpr{
							pos:   position{line: 232, col: 35, offset: 6732},
							label: "aggs",
							expr: &ruleRefExpr{
								pos:  position{line: 232, col: 40, offset: 6737},
								name: "AggregationList",
							},
						},
						&labeledExpr{
							pos:   position{line: 232, col: 56, offset: 6753},
							label: "byFields",
							expr: &zeroOrOneExpr{
								pos: position{line: 232, col: 65, offset: 6762},
								expr: &ruleRefExpr{
									pos:  position{line: 232, col: 66, offset: 6763},
									name: "GroupbyBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GroupbyBlock",
			pos:  position{line: 277, col: 1, offset: 8257},
			expr: &actionExpr{
				pos: position{line: 277, col: 17, offset: 8273},
				run: (*parser).callonGroupbyBlock1,
				expr: &seqExpr{
					pos: position{line: 277, col: 17, offset: 8273},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 277, col: 17, offset: 8273},
							name: "BY",
						},
						&labeledExpr{
							pos:   position{line: 277, col: 20, offset: 8276},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 277, col: 27, offset: 8283},
								name: "FieldNameList",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexBlock",
			pos:  position{line: 288, col: 1, offset: 8632},
			expr: &actionExpr{
				pos: position{line: 288, col: 15, offset: 8646},
				run: (*parser).callonRegexBlock1,
				expr: &seqExpr{
					pos: position{line: 288, col: 15, offset: 8646},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 288, col: 15, offset: 8646},
							name: "CMD_REGEX",
						},
						&labeledExpr{
							pos:   position{line: 288, col: 25, offset: 8656},
							label: "keyAndOp",
							expr: &zeroOrOneExpr{
								pos: position{line: 288, col: 34, offset: 8665},
								expr: &seqExpr{
									pos: position{line: 288, col: 35, offset: 8666},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 288, col: 35, offset: 8666},
											name: "FieldName",
										},
										&ruleRefExpr{
											pos:  position{line: 288, col: 45, offset: 8676},
											name: "EqualityOperator",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 288, col: 64, offset: 8695},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 288, col: 68, offset: 8699},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel4",
			pos:  position{line: 316, col: 1, offset: 9278},
			expr: &actionExpr{
				pos: position{line: 316, col: 17, offset: 9294},
				run: (*parser).callonClauseLevel41,
				expr: &seqExpr{
					pos: position{line: 316, col: 17, offset: 9294},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 316, col: 17, offset: 9294},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 316, col: 23, offset: 9300},
								name: "ClauseLevel3",
							},
						},
						&labeledExpr{
							pos:   position{line: 316, col: 36, offset: 9313},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 316, col: 41, offset: 9318},
								expr: &seqExpr{
									pos: position{line: 316, col: 42, offset: 9319},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 316, col: 43, offset: 9320},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 316, col: 43, offset: 9320},
													name: "AND",
												},
												&ruleRefExpr{
													pos:  position{line: 316, col: 49, offset: 9326},
													name: "SPACE",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 316, col: 56, offset: 9333},
											name: "ClauseLevel3",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel3",
			pos:  position{line: 334, col: 1, offset: 9710},
			expr: &actionExpr{
				pos: position{line: 334, col: 17, offset: 9726},
				run: (*parser).callonClauseLevel31,
				expr: &seqExpr{
					pos: position{line: 334, col: 17, offset: 9726},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 334, col: 17, offset: 9726},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 334, col: 23, offset: 9732},
								name: "ClauseLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 334, col: 36, offset: 9745},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 334, col: 41, offset: 9750},
								expr: &seqExpr{
									pos: position{line: 334, col: 42, offset: 9751},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 334, col: 42, offset: 9751},
											name: "OR",
										},
										&ruleRefExpr{
											pos:  position{line: 334, col: 45, offset: 9754},
											name: "ClauseLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel2",
			pos:  position{line: 352, col: 1, offset: 10119},
			expr: &choiceExpr{
				pos: position{line: 352, col: 17, offset: 10135},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 352, col: 17, offset: 10135},
						run: (*parser).callonClauseLevel22,
						expr: &seqExpr{
							pos: position{line: 352, col: 17, offset: 10135},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 352, col: 17, offset: 10135},
									label: "notList",
									expr: &oneOrMoreExpr{
										pos: position{line: 352, col: 25, offset: 10143},
										expr: &ruleRefExpr{
											pos:  position{line: 352, col: 25, offset: 10143},
											name: "NOT",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 352, col: 30, offset: 10148},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 352, col: 36, offset: 10154},
										name: "ClauseLevel1",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 363, col: 5, offset: 10450},
						run: (*parser).callonClauseLevel29,
						expr: &labeledExpr{
							pos:   position{line: 363, col: 5, offset: 10450},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 363, col: 12, offset: 10457},
								name: "ClauseLevel1",
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel1",
			pos:  position{line: 367, col: 1, offset: 10498},
			expr: &choiceExpr{
				pos: position{line: 367, col: 17, offset: 10514},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 367, col: 17, offset: 10514},
						run: (*parser).callonClauseLevel12,
						expr: &seqExpr{
							pos: position{line: 367, col: 17, offset: 10514},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 367, col: 17, offset: 10514},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&labeledExpr{
									pos:   position{line: 367, col: 21, offset: 10518},
									label: "clause",
									expr: &ruleRefExpr{
										pos:  position{line: 367, col: 28, offset: 10525},
										name: "ClauseLevel4",
									},
								},
								&litMatcher{
									pos:        position{line: 367, col: 41, offset: 10538},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 369, col: 5, offset: 10571},
						run: (*parser).callonClauseLevel18,
						expr: &labeledExpr{
							pos:   position{line: 369, col: 5, offset: 10571},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 369, col: 10, offset: 10576},
								name: "SearchTerm",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchTerm",
			pos:  position{line: 375, col: 1, offset: 10734},
			expr: &actionExpr{
				pos: position{line: 375, col: 15, offset: 10748},
				run: (*parser).callonSearchTerm1,
				expr: &labeledExpr{
					pos:   position{line: 375, col: 15, offset: 10748},
					label: "term",
					expr: &choiceExpr{
						pos: position{line: 375, col: 21, offset: 10754},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 375, col: 21, offset: 10754},
								name: "FieldWithNumberValue",
							},
							&ruleRefExpr{
								pos:  position{line: 375, col: 44, offset: 10777},
								name: "FieldWithStringValue",
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticBlock",
			pos:  position{line: 379, col: 1, offset: 10825},
			expr: &actionExpr{
				pos: position{line: 379, col: 19, offset: 10843},
				run: (*parser).callonStatisticBlock1,
				expr: &seqExpr{
					pos: position{line: 379, col: 19, offset: 10843},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 379, col: 19, offset: 10843},
							name: "PIPE",
						},
						&labeledExpr{
							pos:   position{line: 379, col: 24, offset: 10848},
							label: "statisticExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 379, col: 38, offset: 10862},
								name: "StatisticExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticExpr",
			pos:  position{line: 412, col: 1, offset: 11840},
			expr: &actionExpr{
				pos: position{line: 412, col: 18, offset: 11857},
				run: (*parser).callonStatisticExpr1,
				expr: &seqExpr{
					pos: position{line: 412, col: 18, offset: 11857},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 412, col: 18, offset: 11857},
							label: "cmd",
							expr: &choiceExpr{
								pos: position{line: 412, col: 23, offset: 11862},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 412, col: 23, offset: 11862},
										name: "CMD_TOP",
									},
									&ruleRefExpr{
										pos:  position{line: 412, col: 33, offset: 11872},
										name: "CMD_RARE",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 412, col: 43, offset: 11882},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 412, col: 49, offset: 11888},
								expr: &ruleRefExpr{
									pos:  position{line: 412, col: 50, offset: 11889},
									name: "StatisticLimit",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 412, col: 67, offset: 11906},
							label: "fieldList",
							expr: &ruleRefExpr{
								pos:  position{line: 412, col: 78, offset: 11917},
								name: "FieldList",
							},
						},
						&labeledExpr{
							pos:   position{line: 412, col: 89, offset: 11928},
							label: "byClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 412, col: 98, offset: 11937},
								expr: &ruleRefExpr{
									pos:  position{line: 412, col: 99, offset: 11938},
									name: "ByClause",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 412, col: 110, offset: 11949},
							label: "options",
							expr: &zeroOrOneExpr{
								pos: position{line: 412, col: 118, offset: 11957},
								expr: &ruleRefExpr{
									pos:  position{line: 412, col: 119, offset: 11958},
									name: "Options",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticLimit",
			pos:  position{line: 454, col: 1, offset: 12970},
			expr: &choiceExpr{
				pos: position{line: 454, col: 19, offset: 12988},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 454, col: 19, offset: 12988},
						run: (*parser).callonStatisticLimit2,
						expr: &seqExpr{
							pos: position{line: 454, col: 19, offset: 12988},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 454, col: 19, offset: 12988},
									name: "SPACE",
								},
								&labeledExpr{
									pos:   position{line: 454, col: 25, offset: 12994},
									label: "number",
									expr: &ruleRefExpr{
										pos:  position{line: 454, col: 32, offset: 13001},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 457, col: 3, offset: 13055},
						run: (*parser).callonStatisticLimit7,
						expr: &labeledExpr{
							pos:   position{line: 457, col: 3, offset: 13055},
							label: "limit",
							expr: &seqExpr{
								pos: position{line: 457, col: 10, offset: 13062},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 457, col: 10, offset: 13062},
										name: "SPACE",
									},
									&litMatcher{
										pos:        position{line: 457, col: 16, offset: 13068},
										val:        "limit=",
										ignoreCase: false,
										want:       "\"limit=\"",
									},
									&ruleRefExpr{
										pos:  position{line: 457, col: 25, offset: 13077},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Options",
			pos:  position{line: 462, col: 1, offset: 13193},
			expr: &actionExpr{
				pos: position{line: 462, col: 12, offset: 13204},
				run: (*parser).callonOptions1,
				expr: &labeledExpr{
					pos:   position{line: 462, col: 12, offset: 13204},
					label: "option",
					expr: &zeroOrMoreExpr{
						pos: position{line: 462, col: 19, offset: 13211},
						expr: &ruleRefExpr{
							pos:  position{line: 462, col: 20, offset: 13212},
							name: "Option",
						},
					},
				},
			},
		},
		{
			name: "Option",
			pos:  position{line: 511, col: 1, offset: 14773},
			expr: &actionExpr{
				pos: position{line: 511, col: 11, offset: 14783},
				run: (*parser).callonOption1,
				expr: &seqExpr{
					pos: position{line: 511, col: 11, offset: 14783},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 511, col: 11, offset: 14783},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 511, col: 17, offset: 14789},
							label: "optionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 511, col: 27, offset: 14799},
								name: "OptionCMD",
							},
						},
						&litMatcher{
							pos:        position{line: 511, col: 37, offset: 14809},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 511, col: 41, offset: 14813},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 511, col: 47, offset: 14819},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "OptionCMD",
			pos:  position{line: 516, col: 1, offset: 14928},
			expr: &actionExpr{
				pos: position{line: 516, col: 14, offset: 14941},
				run: (*parser).callonOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 516, col: 14, offset: 14941},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 516, col: 22, offset: 14949},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 516, col: 22, offset: 14949},
								val:        "countfield",
								ignoreCase: false,
								want:       "\"countfield\"",
							},
							&litMatcher{
								pos:        position{line: 516, col: 37, offset: 14964},
								val:        "showcount",
								ignoreCase: false,
								want:       "\"showcount\"",
							},
							&litMatcher{
								pos:        position{line: 516, col: 51, offset: 14978},
								val:        "otherstr",
								ignoreCase: false,
								want:       "\"otherstr\"",
							},
							&litMatcher{
								pos:        position{line: 516, col: 64, offset: 14991},
								val:        "useother",
								ignoreCase: false,
								want:       "\"useother\"",
							},
							&litMatcher{
								pos:        position{line: 516, col: 76, offset: 15003},
								val:        "percentfield",
								ignoreCase: false,
								want:       "\"percentfield\"",
							},
							&litMatcher{
								pos:        position{line: 516, col: 93, offset: 15020},
								val:        "showperc",
								ignoreCase: false,
								want:       "\"showperc\"",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldList",
			pos:  position{line: 524, col: 1, offset: 15207},
			expr: &actionExpr{
				pos: position{line: 524, col: 14, offset: 15220},
				run: (*parser).callonFieldList1,
				expr: &seqExpr{
					pos: position{line: 524, col: 14, offset: 15220},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 524, col: 14, offset: 15220},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 524, col: 20, offset: 15226},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 524, col: 26, offset: 15232},
								name: "EvalFieldToRead",
							},
						},
						&labeledExpr{
							pos:   position{line: 524, col: 42, offset: 15248},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 524, col: 47, offset: 15253},
								expr: &seqExpr{
									pos: position{line: 524, col: 48, offset: 15254},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 524, col: 48, offset: 15254},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&ruleRefExpr{
											pos:  position{line: 524, col: 52, offset: 15258},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 524, col: 58, offset: 15264},
											name: "EvalFieldToRead",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ByClause",
			pos:  position{line: 537, col: 1, offset: 15543},
			expr: &actionExpr{
				pos: position{line: 537, col: 13, offset: 15555},
				run: (*parser).callonByClause1,
				expr: &seqExpr{
					pos: position{line: 537, col: 13, offset: 15555},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 537, col: 13, offset: 15555},
							name: "SPACE",
						},
						&litMatcher{
							pos:        position{line: 537, col: 19, offset: 15561},
							val:        "by",
							ignoreCase: false,
							want:       "\"by\"",
						},
						&labeledExpr{
							pos:   position{line: 537, col: 24, offset: 15566},
							label: "fieldList",
							expr: &ruleRefExpr{
								pos:  position{line: 537, col: 34, offset: 15576},
								name: "FieldList",
							},
						},
					},
				},
			},
		},
		{
			name: "RexBlock",
			pos:  position{line: 541, col: 1, offset: 15628},
			expr: &actionExpr{
				pos: position{line: 541, col: 13, offset: 15640},
				run: (*parser).callonRexBlock1,
				expr: &seqExpr{
					pos: position{line: 541, col: 13, offset: 15640},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 541, col: 13, offset: 15640},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 541, col: 18, offset: 15645},
							name: "CMD_REX",
						},
						&litMatcher{
							pos:        position{line: 541, col: 26, offset: 15653},
							val:        "field=",
							ignoreCase: false,
							want:       "\"field=\"",
						},
						&labeledExpr{
							pos:   position{line: 541, col: 35, offset: 15662},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 541, col: 41, offset: 15668},
								name: "EvalFieldToRead",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 541, col: 57, offset: 15684},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 541, col: 63, offset: 15690},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 541, col: 67, offset: 15694},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "EvalBlock",
			pos:  position{line: 568, col: 1, offset: 16379},
			expr: &actionExpr{
				pos: position{line: 568, col: 14, offset: 16392},
				run: (*parser).callonEvalBlock1,
				expr: &seqExpr{
					pos: position{line: 568, col: 14, offset: 16392},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 568, col: 14, offset: 16392},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 568, col: 19, offset: 16397},
							name: "CMD_EVAL",
						},
						&labeledExpr{
							pos:   position{line: 568, col: 28, offset: 16406},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 568, col: 34, offset: 16412},
								name: "SingleEval",
							},
						},
						&labeledExpr{
							pos:   position{line: 568, col: 45, offset: 16423},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 568, col: 50, offset: 16428},
								expr: &seqExpr{
									pos: position{line: 568, col: 51, offset: 16429},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 568, col: 51, offset: 16429},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&ruleRefExpr{
											pos:  position{line: 568, col: 55, offset: 16433},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 568, col: 61, offset: 16439},
											name: "SingleEval",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleEval",
			pos:  position{line: 595, col: 1, offset: 17240},
			expr: &actionExpr{
				pos: position{line: 595, col: 15, offset: 17254},
				run: (*parser).callonSingleEval1,
				expr: &seqExpr{
					pos: position{line: 595, col: 15, offset: 17254},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 595, col: 15, offset: 17254},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 595, col: 21, offset: 17260},
								name: "FieldName",
							},
						},
						&litMatcher{
							pos:        position{line: 595, col: 31, offset: 17270},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 595, col: 35, offset: 17274},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 595, col: 40, offset: 17279},
								name: "EvalExpression",
							},
						},
					},
				},
			},
		},
		{
			name: "EvalExpression",
			pos:  position{line: 608, col: 1, offset: 17680},
			expr: &actionExpr{
				pos: position{line: 608, col: 19, offset: 17698},
				run: (*parser).callonEvalExpression1,
				expr: &labeledExpr{
					pos:   position{line: 608, col: 19, offset: 17698},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 608, col: 25, offset: 17704},
						name: "ValueExpr",
					},
				},
			},
		},
		{
			name: "ConditionExpr",
			pos:  position{line: 616, col: 1, offset: 17851},
			expr: &actionExpr{
				pos: position{line: 616, col: 18, offset: 17868},
				run: (*parser).callonConditionExpr1,
				expr: &seqExpr{
					pos: position{line: 616, col: 18, offset: 17868},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 616, col: 18, offset: 17868},
							val:        "if(",
							ignoreCase: false,
							want:       "\"if(\"",
						},
						&labeledExpr{
							pos:   position{line: 616, col: 24, offset: 17874},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 616, col: 34, offset: 17884},
								name: "BoolExpr",
							},
						},
						&litMatcher{
							pos:        position{line: 616, col: 43, offset: 17893},
							val:        ", ",
							ignoreCase: false,
							want:       "\", \"",
						},
						&labeledExpr{
							pos:   position{line: 616, col: 48, offset: 17898},
							label: "trueValue",
							expr: &ruleRefExpr{
								pos:  position{line: 616, col: 58, offset: 17908},
								name: "ValueExpr",
							},
						},
						&litMatcher{
							pos:        position{line: 616, col: 68, offset: 17918},
							val:        ", ",
							ignoreCase: false,
							want:       "\", \"",
						},
						&labeledExpr{
							pos:   position{line: 616, col: 73, offset: 17923},
							label: "falseValue",
							expr: &ruleRefExpr{
								pos:  position{line: 616, col: 84, offset: 17934},
								name: "ValueExpr",
							},
						},
						&litMatcher{
							pos:        position{line: 616, col: 95, offset: 17945},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "TextExpr",
			pos:  position{line: 628, col: 1, offset: 18191},
			expr: &choiceExpr{
				pos: position{line: 628, col: 13, offset: 18203},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 628, col: 13, offset: 18203},
						run: (*parser).callonTextExpr2,
						expr: &seqExpr{
							pos: position{line: 628, col: 14, offset: 18204},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 628, col: 14, offset: 18204},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 628, col: 22, offset: 18212},
										val:        "lower",
										ignoreCase: false,
										want:       "\"lower\"",
									},
								},
								&litMatcher{
									pos:        position{line: 628, col: 31, offset: 18221},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&labeledExpr{
									pos:   position{line: 628, col: 35, offset: 18225},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 628, col: 46, offset: 18236},
										name: "StringExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 628, col: 57, offset: 18247},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 641, col: 3, offset: 18554},
						run: (*parser).callonTextExpr10,
						expr: &seqExpr{
							pos: position{line: 641, col: 4, offset: 18555},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 641, col: 4, offset: 18555},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 641, col: 12, offset: 18563},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 641, col: 12, offset: 18563},
												val:        "max",
												ignoreCase: false,
												want:       "\"max\"",
											},
											&litMatcher{
												pos:        position{line: 641, col: 20, offset: 18571},
												val:        "min",
												ignoreCase: false,
												want:       "\"min\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 641, col: 27, offset: 18578},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&labeledExpr{
									pos:   position{line: 641, col: 31, offset: 18582},
									label: "firstVal",
									expr: &ruleRefExpr{
										pos:  position{line: 641, col: 40, offset: 18591},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 641, col: 51, offset: 18602},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 641, col: 56, offset: 18607},
										expr: &seqExpr{
											pos: position{line: 641, col: 57, offset: 18608},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 641, col: 57, offset: 18608},
													val:        ", ",
													ignoreCase: false,
													want:       "\", \"",
												},
												&ruleRefExpr{
													pos:  position{line: 641, col: 62, offset: 18613},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 641, col: 75, offset: 18626},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 664, col: 3, offset: 19316},
						run: (*parser).callonTextExpr25,
						expr: &seqExpr{
							pos: position{line: 664, col: 4, offset: 19317},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 664, col: 4, offset: 19317},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 664, col: 12, offset: 19325},
										val:        "urldecode",
										ignoreCase: false,
										want:       "\"urldecode\"",
									},
								},
								&litMatcher{
									pos:        position{line: 664, col: 25, offset: 19338},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&labeledExpr{
									pos:   position{line: 664, col: 29, offset: 19342},
									label: "url",
									expr: &ruleRefExpr{
										pos:  position{line: 664, col: 33, offset: 19346},
										name: "StringExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 664, col: 44, offset: 19357},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 676, col: 2, offset: 19691},
						run: (*parser).callonTextExpr33,
						expr: &seqExpr{
							pos: position{line: 676, col: 3, offset: 19692},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 676, col: 3, offset: 19692},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 676, col: 11, offset: 19700},
										val:        "split",
										ignoreCase: false,
										want:       "\"split\"",
									},
								},
								&litMatcher{
									pos:        position{line: 676, col: 20, offset: 19709},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&labeledExpr{
									pos:   position{line: 676, col: 24, offset: 19713},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 676, col: 35, offset: 19724},
										name: "StringExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 676, col: 46, offset: 19735},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 676, col: 50, offset: 19739},
									label: "delim",
									expr: &ruleRefExpr{
										pos:  position{line: 676, col: 56, offset: 19745},
										name: "StringExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 676, col: 67, offset: 19756},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 688, col: 3, offset: 20085},
						run: (*parser).callonTextExpr44,
						expr: &seqExpr{
							pos: position{line: 688, col: 4, offset: 20086},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 688, col: 4, offset: 20086},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 688, col: 12, offset: 20094},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 688, col: 12, offset: 20094},
												val:        "ltrim",
												ignoreCase: false,
												want:       "\"ltrim\"",
											},
											&litMatcher{
												pos:        position{line: 688, col: 22, offset: 20104},
												val:        "rtrim",
												ignoreCase: false,
												want:       "\"rtrim\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 688, col: 31, offset: 20113},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&labeledExpr{
									pos:   position{line: 688, col: 35, offset: 20117},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 688, col: 41, offset: 20123},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 688, col: 53, offset: 20135},
									label: "strToRemoveExpr",
									expr: &zeroOrOneExpr{
										pos: position{line: 688, col: 69, offset: 20151},
										expr: &ruleRefExpr{
											pos:  position{line: 688, col: 70, offset: 20152},
											name: "StrToRemoveExpr",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 688, col: 88, offset: 20170},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StrToRemoveExpr",
			pos:  position{line: 713, col: 1, offset: 20769},
			expr: &actionExpr{
				pos: position{line: 713, col: 20, offset: 20788},
				run: (*parser).callonStrToRemoveExpr1,
				expr: &seqExpr{
					pos: position{line: 713, col: 20, offset: 20788},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 713, col: 20, offset: 20788},
							val:        ", ",
							ignoreCase: false,
							want:       "\", \"",
						},
						&labeledExpr{
							pos:   position{line: 713, col: 25, offset: 20793},
							label: "strToRemove",
							expr: &ruleRefExpr{
								pos:  position{line: 713, col: 37, offset: 20805},
								name: "String",
							},
						},
					},
				},
			},
		},
		{
			name: "EvalFieldToRead",
			pos:  position{line: 719, col: 1, offset: 20990},
			expr: &choiceExpr{
				pos: position{line: 719, col: 20, offset: 21009},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 719, col: 20, offset: 21009},
						run: (*parser).callonEvalFieldToRead2,
						expr: &seqExpr{
							pos: position{line: 719, col: 20, offset: 21009},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 719, col: 20, offset: 21009},
									expr: &charClassMatcher{
										pos:        position{line: 719, col: 20, offset: 21009},
										val:        "[a-zA-Z_]",
										chars:      []rune{'_'},
										ranges:     []rune{'a', 'z', 'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&notExpr{
									pos: position{line: 719, col: 31, offset: 21020},
									expr: &litMatcher{
										pos:        position{line: 719, col: 33, offset: 21022},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 722, col: 3, offset: 21064},
						run: (*parser).callonEvalFieldToRead8,
						expr: &seqExpr{
							pos: position{line: 722, col: 3, offset: 21064},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 722, col: 3, offset: 21064},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&labeledExpr{
									pos:   position{line: 722, col: 7, offset: 21068},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 722, col: 13, offset: 21074},
										name: "FieldName",
									},
								},
								&litMatcher{
									pos:        position{line: 722, col: 23, offset: 21084},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "WhereBlock",
			pos:  position{line: 727, col: 1, offset: 21152},
			expr: &actionExpr{
				pos: position{line: 727, col: 15, offset: 21166},
				run: (*parser).callonWhereBlock1,
				expr: &seqExpr{
					pos: position{line: 727, col: 15, offset: 21166},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 727, col: 15, offset: 21166},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 727, col: 20, offset: 21171},
							name: "CMD_WHERE",
						},
						&labeledExpr{
							pos:   position{line: 727, col: 30, offset: 21181},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 727, col: 40, offset: 21191},
								name: "BoolExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExpr",
			pos:  position{line: 739, col: 1, offset: 21484},
			expr: &actionExpr{
				pos: position{line: 739, col: 13, offset: 21496},
				run: (*parser).callonBoolExpr1,
				expr: &labeledExpr{
					pos:   position{line: 739, col: 13, offset: 21496},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 739, col: 18, offset: 21501},
						name: "BoolExprLevel4",
					},
				},
			},
		},
		{
			name: "BoolExprLevel4",
			pos:  position{line: 744, col: 1, offset: 21571},
			expr: &actionExpr{
				pos: position{line: 744, col: 19, offset: 21589},
				run: (*parser).callonBoolExprLevel41,
				expr: &seqExpr{
					pos: position{line: 744, col: 19, offset: 21589},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 744, col: 19, offset: 21589},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 744, col: 25, offset: 21595},
								name: "BoolExprLevel3",
							},
						},
						&labeledExpr{
							pos:   position{line: 744, col: 40, offset: 21610},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 744, col: 45, offset: 21615},
								expr: &seqExpr{
									pos: position{line: 744, col: 46, offset: 21616},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 744, col: 46, offset: 21616},
											name: "OR",
										},
										&ruleRefExpr{
											pos:  position{line: 744, col: 49, offset: 21619},
											name: "BoolExprLevel3",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel3",
			pos:  position{line: 764, col: 1, offset: 22057},
			expr: &actionExpr{
				pos: position{line: 764, col: 19, offset: 22075},
				run: (*parser).callonBoolExprLevel31,
				expr: &seqExpr{
					pos: position{line: 764, col: 19, offset: 22075},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 764, col: 19, offset: 22075},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 764, col: 25, offset: 22081},
								name: "BoolExprLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 764, col: 40, offset: 22096},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 764, col: 45, offset: 22101},
								expr: &seqExpr{
									pos: position{line: 764, col: 46, offset: 22102},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 764, col: 46, offset: 22102},
											name: "AND",
										},
										&ruleRefExpr{
											pos:  position{line: 764, col: 50, offset: 22106},
											name: "BoolExprLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel2",
			pos:  position{line: 784, col: 1, offset: 22545},
			expr: &choiceExpr{
				pos: position{line: 784, col: 19, offset: 22563},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 784, col: 19, offset: 22563},
						run: (*parser).callonBoolExprLevel22,
						expr: &seqExpr{
							pos: position{line: 784, col: 19, offset: 22563},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 784, col: 19, offset: 22563},
									name: "NOT",
								},
								&litMatcher{
									pos:        position{line: 784, col: 23, offset: 22567},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&labeledExpr{
									pos:   position{line: 784, col: 27, offset: 22571},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 784, col: 33, offset: 22577},
										name: "BoolExprLevel1",
									},
								},
								&litMatcher{
									pos:        position{line: 784, col: 48, offset: 22592},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 794, col: 3, offset: 22791},
						run: (*parser).callonBoolExprLevel29,
						expr: &labeledExpr{
							pos:   position{line: 794, col: 3, offset: 22791},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 794, col: 9, offset: 22797},
								name: "BoolExprLevel1",
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel1",
			pos:  position{line: 799, col: 1, offset: 22868},
			expr: &choiceExpr{
				pos: position{line: 799, col: 19, offset: 22886},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 799, col: 19, offset: 22886},
						run: (*parser).callonBoolExprLevel12,
						expr: &seqExpr{
							pos: position{line: 799, col: 19, offset: 22886},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 799, col: 19, offset: 22886},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&labeledExpr{
									pos:   position{line: 799, col: 23, offset: 22890},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 799, col: 29, offset: 22896},
										name: "BoolExprLevel4",
									},
								},
								&litMatcher{
									pos:        position{line: 799, col: 44, offset: 22911},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 802, col: 3, offset: 22943},
						run: (*parser).callonBoolExprLevel18,
						expr: &seqExpr{
							pos: position{line: 802, col: 4, offset: 22944},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 802, col: 4, offset: 22944},
									label: "op",
									expr: &choiceExpr{
										pos: position{line: 802, col: 8, offset: 22948},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 802, col: 8, offset: 22948},
												val:        "isbool",
												ignoreCase: false,
												want:       "\"isbool\"",
											},
											&litMatcher{
												pos:        position{line: 802, col: 19, offset: 22959},
												val:        "isint",
												ignoreCase: false,
												want:       "\"isint\"",
											},
											&litMatcher{
												pos:        position{line: 802, col: 29, offset: 22969},
												val:        "isstr",
												ignoreCase: false,
												want:       "\"isstr\"",
											},
											&litMatcher{
												pos:        position{line: 802, col: 39, offset: 22979},
												val:        "isnull",
												ignoreCase: false,
												want:       "\"isnull\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 802, col: 49, offset: 22989},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&labeledExpr{
									pos:   position{line: 802, col: 53, offset: 22993},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 802, col: 59, offset: 22999},
										name: "ValueExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 802, col: 69, offset: 23009},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 815, col: 3, offset: 23341},
						run: (*parser).callonBoolExprLevel120,
						expr: &labeledExpr{
							pos:   position{line: 815, col: 3, offset: 23341},
							label: "inExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 815, col: 11, offset: 23349},
								name: "InExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 818, col: 3, offset: 23385},
						run: (*parser).callonBoolExprLevel123,
						expr: &seqExpr{
							pos: position{line: 818, col: 3, offset: 23385},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 818, col: 3, offset: 23385},
									label: "left",
									expr: &ruleRefExpr{
										pos:  position{line: 818, col: 8, offset: 23390},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 818, col: 18, offset: 23400},
									name: "SPACE",
								},
								&labeledExpr{
									pos:   position{line: 818, col: 24, offset: 23406},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 818, col: 27, offset: 23409},
										name: "EqualityOrInequality",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 818, col: 48, offset: 23430},
									name: "SPACE",
								},
								&labeledExpr{
									pos:   position{line: 818, col: 54, offset: 23436},
									label: "right",
									expr: &ruleRefExpr{
										pos:  position{line: 818, col: 60, offset: 23442},
										name: "ValueExpr",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InExpr",
			pos:  position{line: 829, col: 1, offset: 23667},
			expr: &choiceExpr{
				pos: position{line: 829, col: 11, offset: 23677},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 829, col: 11, offset: 23677},
						run: (*parser).callonInExpr2,
						expr: &seqExpr{
							pos: position{line: 829, col: 11, offset: 23677},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 829, col: 11, offset: 23677},
									label: "left",
									expr: &ruleRefExpr{
										pos:  position{line: 829, col: 16, offset: 23682},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 829, col: 26, offset: 23692},
									name: "SPACE",
								},
								&litMatcher{
									pos:        position{line: 829, col: 32, offset: 23698},
									val:        "in(",
									ignoreCase: false,
									want:       "\"in(\"",
								},
								&labeledExpr{
									pos:   position{line: 829, col: 38, offset: 23704},
									label: "valueToJudge",
									expr: &ruleRefExpr{
										pos:  position{line: 829, col: 51, offset: 23717},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 829, col: 61, offset: 23727},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 829, col: 66, offset: 23732},
										expr: &seqExpr{
											pos: position{line: 829, col: 67, offset: 23733},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 829, col: 67, offset: 23733},
													val:        ", ",
													ignoreCase: false,
													want:       "\", \"",
												},
												&ruleRefExpr{
													pos:  position{line: 829, col: 72, offset: 23738},
													name: "ValueExpr",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 829, col: 84, offset: 23750},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 848, col: 3, offset: 24297},
						run: (*parser).callonInExpr16,
						expr: &seqExpr{
							pos: position{line: 848, col: 3, offset: 24297},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 848, col: 3, offset: 24297},
									val:        "in(",
									ignoreCase: false,
									want:       "\"in(\"",
								},
								&labeledExpr{
									pos:   position{line: 848, col: 9, offset: 24303},
									label: "valueToJudge",
									expr: &ruleRefExpr{
										pos:  position{line: 848, col: 22, offset: 24316},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 848, col: 32, offset: 24326},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 848, col: 37, offset: 24331},
										expr: &seqExpr{
											pos: position{line: 848, col: 38, offset: 24332},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 848, col: 38, offset: 24332},
													val:        ", ",
													ignoreCase: false,
													want:       "\", \"",
												},
												&ruleRefExpr{
													pos:  position{line: 848, col: 43, offset: 24337},
													name: "ValueExpr",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 848, col: 55, offset: 24349},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ValueExpr",
			pos:  position{line: 873, col: 1, offset: 25135},
			expr: &choiceExpr{
				pos: position{line: 873, col: 14, offset: 25148},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 873, col: 14, offset: 25148},
						run: (*parser).callonValueExpr2,
						expr: &labeledExpr{
							pos:   position{line: 873, col: 14, offset: 25148},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 873, col: 24, offset: 25158},
								name: "ConditionExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 882, col: 2, offset: 25347},
						run: (*parser).callonValueExpr5,
						expr: &labeledExpr{
							pos:   position{line: 882, col: 2, offset: 25347},
							label: "numeric",
							expr: &ruleRefExpr{
								pos:  position{line: 882, col: 10, offset: 25355},
								name: "NumericExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 891, col: 2, offset: 25534},
						run: (*parser).callonValueExpr8,
						expr: &labeledExpr{
							pos:   position{line: 891, col: 2, offset: 25534},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 891, col: 6, offset: 25538},
								name: "StringExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "StringExpr",
			pos:  position{line: 901, col: 1, offset: 25709},
			expr: &choiceExpr{
				pos: position{line: 901, col: 15, offset: 25723},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 901, col: 15, offset: 25723},
						run: (*parser).callonStringExpr2,
						expr: &seqExpr{
							pos: position{line: 901, col: 15, offset: 25723},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 901, col: 15, offset: 25723},
									label: "text",
									expr: &ruleRefExpr{
										pos:  position{line: 901, col: 20, offset: 25728},
										name: "TextExpr",
									},
								},
								&notExpr{
									pos: position{line: 901, col: 29, offset: 25737},
									expr: &ruleRefExpr{
										pos:  position{line: 901, col: 31, offset: 25739},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 909, col: 3, offset: 25909},
						run: (*parser).callonStringExpr8,
						expr: &seqExpr{
							pos: position{line: 909, col: 3, offset: 25909},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 909, col: 3, offset: 25909},
									label: "str",
									expr: &ruleRefExpr{
										pos:  position{line: 909, col: 7, offset: 25913},
										name: "QuotedString",
									},
								},
								&notExpr{
									pos: position{line: 909, col: 20, offset: 25926},
									expr: &ruleRefExpr{
										pos:  position{line: 909, col: 22, offset: 25928},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 917, col: 3, offset: 26093},
						run: (*parser).callonStringExpr14,
						expr: &seqExpr{
							pos: position{line: 917, col: 3, offset: 26093},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 917, col: 3, offset: 26093},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 917, col: 9, offset: 26099},
										name: "EvalFieldToRead",
									},
								},
								&notExpr{
									pos: position{line: 917, col: 25, offset: 26115},
									expr: &choiceExpr{
										pos: position{line: 917, col: 27, offset: 26117},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 917, col: 27, offset: 26117},
												name: "OpPlus",
											},
											&ruleRefExpr{
												pos:  position{line: 917, col: 36, offset: 26126},
												name: "OpMinus",
											},
											&ruleRefExpr{
												pos:  position{line: 917, col: 46, offset: 26136},
												name: "OpMul",
											},
											&ruleRefExpr{
												pos:  position{line: 917, col: 54, offset: 26144},
												name: "OpDiv",
											},
											&ruleRefExpr{
												pos:  position{line: 917, col: 62, offset: 26152},
												name: "EVAL_CONCAT",
											},
											&litMatcher{
												pos:        position{line: 917, col: 76, offset: 26166},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 925, col: 3, offset: 26316},
						run: (*parser).callonStringExpr26,
						expr: &labeledExpr{
							pos:   position{line: 925, col: 3, offset: 26316},
							label: "concat",
							expr: &ruleRefExpr{
								pos:  position{line: 925, col: 10, offset: 26323},
								name: "ConcatExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "ConcatExpr",
			pos:  position{line: 935, col: 1, offset: 26529},
			expr: &actionExpr{
				pos: position{line: 935, col: 15, offset: 26543},
				run: (*parser).callonConcatExpr1,
				expr: &seqExpr{
					pos: position{line: 935, col: 15, offset: 26543},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 935, col: 15, offset: 26543},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 935, col: 21, offset: 26549},
								name: "ConcatAtom",
							},
						},
						&labeledExpr{
							pos:   position{line: 935, col: 32, offset: 26560},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 935, col: 37, offset: 26565},
								expr: &seqExpr{
									pos: position{line: 935, col: 38, offset: 26566},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 935, col: 38, offset: 26566},
											name: "EVAL_CONCAT",
										},
										&ruleRefExpr{
											pos:  position{line: 935, col: 50, offset: 26578},
											name: "ConcatAtom",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 935, col: 63, offset: 26591},
							expr: &choiceExpr{
								pos: position{line: 935, col: 65, offset: 26593},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 935, col: 65, offset: 26593},
										name: "OpPlus",
									},
									&ruleRefExpr{
										pos:  position{line: 935, col: 74, offset: 26602},
										name: "OpMinus",
									},
									&ruleRefExpr{
										pos:  position{line: 935, col: 84, offset: 26612},
										name: "OpMul",
									},
									&ruleRefExpr{
										pos:  position{line: 935, col: 92, offset: 26620},
										name: "OpDiv",
									},
									&litMatcher{
										pos:        position{line: 935, col: 100, offset: 26628},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcatAtom",
			pos:  position{line: 953, col: 1, offset: 27034},
			expr: &choiceExpr{
				pos: position{line: 953, col: 15, offset: 27048},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 953, col: 15, offset: 27048},
						run: (*parser).callonConcatAtom2,
						expr: &labeledExpr{
							pos:   position{line: 953, col: 15, offset: 27048},
							label: "text",
							expr: &ruleRefExpr{
								pos:  position{line: 953, col: 20, offset: 27053},
								name: "TextExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 962, col: 3, offset: 27217},
						run: (*parser).callonConcatAtom5,
						expr: &labeledExpr{
							pos:   position{line: 962, col: 3, offset: 27217},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 962, col: 7, offset: 27221},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 970, col: 3, offset: 27360},
						run: (*parser).callonConcatAtom8,
						expr: &labeledExpr{
							pos:   position{line: 970, col: 3, offset: 27360},
							label: "number",
							expr: &ruleRefExpr{
								pos:  position{line: 970, col: 10, offset: 27367},
								name: "NumberAsString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 978, col: 3, offset: 27506},
						run: (*parser).callonConcatAtom11,
						expr: &labeledExpr{
							pos:   position{line: 978, col: 3, offset: 27506},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 978, col: 9, offset: 27512},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExpr",
			pos:  position{line: 988, col: 1, offset: 27681},
			expr: &actionExpr{
				pos: position{line: 988, col: 16, offset: 27696},
				run: (*parser).callonNumericExpr1,
				expr: &seqExpr{
					pos: position{line: 988, col: 16, offset: 27696},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 988, col: 16, offset: 27696},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 988, col: 21, offset: 27701},
								name: "NumericExprLevel3",
							},
						},
						&notExpr{
							pos: position{line: 988, col: 39, offset: 27719},
							expr: &choiceExpr{
								pos: position{line: 988, col: 41, offset: 27721},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 988, col: 41, offset: 27721},
										name: "EVAL_CONCAT",
									},
									&litMatcher{
										pos:        position{line: 988, col: 55, offset: 27735},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel3",
			pos:  position{line: 993, col: 1, offset: 27800},
			expr: &actionExpr{
				pos: position{line: 993, col: 22, offset: 27821},
				run: (*parser).callonNumericExprLevel31,
				expr: &seqExpr{
					pos: position{line: 993, col: 22, offset: 27821},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 993, col: 22, offset: 27821},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 993, col: 28, offset: 27827},
								name: "NumericExprLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 993, col: 46, offset: 27845},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 993, col: 51, offset: 27850},
								expr: &seqExpr{
									pos: position{line: 993, col: 52, offset: 27851},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 993, col: 53, offset: 27852},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 993, col: 53, offset: 27852},
													name: "OpPlus",
												},
												&ruleRefExpr{
													pos:  position{line: 993, col: 62, offset: 27861},
													name: "OpMinus",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 993, col: 71, offset: 27870},
											name: "NumericExprLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel2",
			pos:  position{line: 1014, col: 1, offset: 28371},
			expr: &actionExpr{
				pos: position{line: 1014, col: 22, offset: 28392},
				run: (*parser).callonNumericExprLevel21,
				expr: &seqExpr{
					pos: position{line: 1014, col: 22, offset: 28392},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1014, col: 22, offset: 28392},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1014, col: 28, offset: 28398},
								name: "NumericExprLevel1",
							},
						},
						&labeledExpr{
							pos:   position{line: 1014, col: 46, offset: 28416},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1014, col: 51, offset: 28421},
								expr: &seqExpr{
									pos: position{line: 1014, col: 52, offset: 28422},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 1014, col: 53, offset: 28423},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 1014, col: 53, offset: 28423},
													name: "OpMul",
												},
												&ruleRefExpr{
													pos:  position{line: 1014, col: 61, offset: 28431},
													name: "OpDiv",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1014, col: 68, offset: 28438},
											name: "NumericExprLevel1",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RoundPrecisionExpr",
			pos:  position{line: 1034, col: 1, offset: 28907},
			expr: &actionExpr{
				pos: position{line: 1034, col: 23, offset: 28929},
				run: (*parser).callonRoundPrecisionExpr1,
				expr: &seqExpr{
					pos: position{line: 1034, col: 23, offset: 28929},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1034, col: 23, offset: 28929},
							val:        ", ",
							ignoreCase: false,
							want:       "\", \"",
						},
						&labeledExpr{
							pos:   position{line: 1034, col: 28, offset: 28934},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 1034, col: 33, offset: 28939},
								name: "NumericExprLevel3",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel1",
			pos:  position{line: 1044, col: 1, offset: 29187},
			expr: &choiceExpr{
				pos: position{line: 1044, col: 22, offset: 29208},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1044, col: 22, offset: 29208},
						run: (*parser).callonNumericExprLevel12,
						expr: &seqExpr{
							pos: position{line: 1044, col: 22, offset: 29208},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1044, col: 22, offset: 29208},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&labeledExpr{
									pos:   position{line: 1044, col: 26, offset: 29212},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1044, col: 31, offset: 29217},
										name: "NumericExprLevel3",
									},
								},
								&litMatcher{
									pos:        position{line: 1044, col: 49, offset: 29235},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1047, col: 3, offset: 29266},
						run: (*parser).callonNumericExprLevel18,
						expr: &labeledExpr{
							pos:   position{line: 1047, col: 3, offset: 29266},
							label: "numericEvalExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 1047, col: 20, offset: 29283},
								name: "NumericEvalExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1050, col: 3, offset: 29337},
						run: (*parser).callonNumericExprLevel111,
						expr: &labeledExpr{
							pos:   position{line: 1050, col: 3, offset: 29337},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1050, col: 9, offset: 29343},
								name: "EvalFieldToRead",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1060, col: 3, offset: 29562},
						run: (*parser).callonNumericExprLevel114,
						expr: &labeledExpr{
							pos:   position{line: 1060, col: 3, offset: 29562},
							label: "number",
							expr: &ruleRefExpr{
								pos:  position{line: 1060, col: 10, offset: 29569},
								name: "NumberAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericEvalExpr",
			pos:  position{line: 1072, col: 1, offset: 29827},
			expr: &choiceExpr{
				pos: position{line: 1072, col: 20, offset: 29846},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1072, col: 20, offset: 29846},
						run: (*parser).callonNumericEvalExpr2,
						expr: &seqExpr{
							pos: position{line: 1072, col: 21, offset: 29847},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1072, col: 21, offset: 29847},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1072, col: 29, offset: 29855},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1072, col: 29, offset: 29855},
												val:        "abs",
												ignoreCase: false,
												want:       "\"abs\"",
											},
											&litMatcher{
												pos:        position{line: 1072, col: 37, offset: 29863},
												val:        "ceil",
												ignoreCase: false,
												want:       "\"ceil\"",
											},
											&litMatcher{
												pos:        position{line: 1072, col: 46, offset: 29872},
												val:        "sqrt",
												ignoreCase: false,
												want:       "\"sqrt\"",
											},
											&litMatcher{
												pos:        position{line: 1072, col: 54, offset: 29880},
												val:        "exact",
												ignoreCase: false,
												want:       "\"exact\"",
											},
											&litMatcher{
												pos:        position{line: 1072, col: 63, offset: 29889},
												val:        "exp",
												ignoreCase: false,
												want:       "\"exp\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1072, col: 70, offset: 29896},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&labeledExpr{
									pos:   position{line: 1072, col: 74, offset: 29900},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1072, col: 80, offset: 29906},
										name: "NumericExprLevel3",
									},
								},
								&litMatcher{
									pos:        position{line: 1072, col: 99, offset: 29925},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1092, col: 3, offset: 30437},
						run: (*parser).callonNumericEvalExpr15,
						expr: &seqExpr{
							pos: position{line: 1092, col: 3, offset: 30437},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1092, col: 3, offset: 30437},
									label: "roundExpr",
									expr: &litMatcher{
										pos:        position{line: 1092, col: 13, offset: 30447},
										val:        "round(",
										ignoreCase: false,
										want:       "\"round(\"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1092, col: 22, offset: 30456},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1092, col: 28, offset: 30462},
										name: "NumericExprLevel3",
									},
								},
								&labeledExpr{
									pos:   position{line: 1092, col: 47, offset: 30481},
									label: "roundPrecision",
									expr: &zeroOrOneExpr{
										pos: position{line: 1092, col: 62, offset: 30496},
										expr: &ruleRefExpr{
											pos:  position{line: 1092, col: 63, offset: 30497},
											name: "RoundPrecisionExpr",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1092, col: 84, offset: 30518},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1113, col: 3, offset: 31138},
						run: (*parser).callonNumericEvalExpr25,
						expr: &seqExpr{
							pos: position{line: 1113, col: 3, offset: 31138},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1113, col: 3, offset: 31138},
									label: "lenExpr",
									expr: &litMatcher{
										pos:        position{line: 1113, col: 12, offset: 31147},
										val:        "len(",
										ignoreCase: false,
										want:       "\"len(\"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1113, col: 19, offset: 31154},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1113, col: 24, offset: 31159},
										name: "LenExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 1113, col: 32, offset: 31167},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LenExpr",
			pos:  position{line: 1117, col: 1, offset: 31197},
			expr: &choiceExpr{
				pos: position{line: 1117, col: 12, offset: 31208},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1117, col: 12, offset: 31208},
						run: (*parser).callonLenExpr2,
						expr: &seqExpr{
							pos: position{line: 1117, col: 12, offset: 31208},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1117, col: 12, offset: 31208},
									label: "str",
									expr: &ruleRefExpr{
										pos:  position{line: 1117, col: 16, offset: 31212},
										name: "QuotedString",
									},
								},
								&notExpr{
									pos: position{line: 1117, col: 29, offset: 31225},
									expr: &ruleRefExpr{
										pos:  position{line: 1117, col: 31, offset: 31227},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1133, col: 3, offset: 31592},
						run: (*parser).callonLenExpr8,
						expr: &seqExpr{
							pos: position{line: 1133, col: 3, offset: 31592},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1133, col: 3, offset: 31592},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1133, col: 9, offset: 31598},
										name: "EvalFieldToRead",
									},
								},
								&notExpr{
									pos: position{line: 1133, col: 25, offset: 31614},
									expr: &choiceExpr{
										pos: position{line: 1133, col: 27, offset: 31616},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 1133, col: 27, offset: 31616},
												name: "OpPlus",
											},
											&ruleRefExpr{
												pos:  position{line: 1133, col: 36, offset: 31625},
												name: "OpMinus",
											},
											&ruleRefExpr{
												pos:  position{line: 1133, col: 46, offset: 31635},
												name: "OpMul",
											},
											&ruleRefExpr{
												pos:  position{line: 1133, col: 54, offset: 31643},
												name: "OpDiv",
											},
											&ruleRefExpr{
												pos:  position{line: 1133, col: 62, offset: 31651},
												name: "EVAL_CONCAT",
											},
											&litMatcher{
												pos:        position{line: 1133, col: 76, offset: 31665},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HeadBlock",
			pos:  position{line: 1151, col: 1, offset: 32057},
			expr: &choiceExpr{
				pos: position{line: 1151, col: 14, offset: 32070},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1151, col: 14, offset: 32070},
						run: (*parser).callonHeadBlock2,
						expr: &seqExpr{
							pos: position{line: 1151, col: 14, offset: 32070},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1151, col: 14, offset: 32070},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 1151, col: 19, offset: 32075},
									name: "CMD_HEAD",
								},
								&zeroOrOneExpr{
									pos: position{line: 1151, col: 28, offset: 32084},
									expr: &litMatcher{
										pos:        position{line: 1151, col: 28, offset: 32084},
										val:        "limit=",
										ignoreCase: false,
										want:       "\"limit=\"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1151, col: 38, offset: 32094},
									label: "intAsStr",
									expr: &ruleRefExpr{
										pos:  position{line: 1151, col: 47, offset: 32103},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1166, col: 3, offset: 32519},
						run: (*parser).callonHeadBlock10,
						expr: &seqExpr{
							pos: position{line: 1166, col: 3, offset: 32519},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1166, col: 3, offset: 32519},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 1166, col: 8, offset: 32524},
									name: "CMD_HEAD_NO_SPACE",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggregationList",
			pos:  position{line: 1179, col: 1, offset: 32974},
			expr: &actionExpr{
				pos: position{line: 1179, col: 20, offset: 32993},
				run: (*parser).callonAggregationList1,
				expr: &seqExpr{
					pos: position{line: 1179, col: 20, offset: 32993},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1179, col: 20, offset: 32993},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1179, col: 26, offset: 32999},
								name: "Aggregator",
							},
						},
						&labeledExpr{
							pos:   position{line: 1179, col: 37, offset: 33010},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1179, col: 42, offset: 33015},
								expr: &seqExpr{
									pos: position{line: 1179, col: 43, offset: 33016},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 1179, col: 43, offset: 33016},
											val:        ", ",
											ignoreCase: false,
											want:       "\", \"",
										},
										&ruleRefExpr{
											pos:  position{line: 1179, col: 48, offset: 33021},
											name: "Aggregator",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Aggregator",
			pos:  position{line: 1196, col: 1, offset: 33524},
			expr: &actionExpr{
				pos: position{line: 1196, col: 15, offset: 33538},
				run: (*parser).callonAggregator1,
				expr: &seqExpr{
					pos: position{line: 1196, col: 15, offset: 33538},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1196, col: 15, offset: 33538},
							label: "aggFunc",
							expr: &ruleRefExpr{
								pos:  position{line: 1196, col: 23, offset: 33546},
								name: "AggFunction",
							},
						},
						&labeledExpr{
							pos:   position{line: 1196, col: 35, offset: 33558},
							label: "asField",
							expr: &zeroOrOneExpr{
								pos: position{line: 1196, col: 43, offset: 33566},
								expr: &ruleRefExpr{
									pos:  position{line: 1196, col: 43, offset: 33566},
									name: "AsField",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggFunction",
			pos:  position{line: 1208, col: 1, offset: 33802},
			expr: &actionExpr{
				pos: position{line: 1208, col: 16, offset: 33817},
				run: (*parser).callonAggFunction1,
				expr: &labeledExpr{
					pos:   position{line: 1208, col: 16, offset: 33817},
					label: "agg",
					expr: &choiceExpr{
						pos: position{line: 1208, col: 21, offset: 33822},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1208, col: 21, offset: 33822},
								name: "AggCount",
							},
							&ruleRefExpr{
								pos:  position{line: 1208, col: 32, offset: 33833},
								name: "AggDistinctCount",
							},
							&ruleRefExpr{
								pos:  position{line: 1208, col: 51, offset: 33852},
								name: "AggAvg",
							},
							&ruleRefExpr{
								pos:  position{line: 1208, col: 60, offset: 33861},
								name: "AggMin",
							},
							&ruleRefExpr{
								pos:  position{line: 1208, col: 69, offset: 33870},
								name: "AggMax",
							},
							&ruleRefExpr{
								pos:  position{line: 1208, col: 78, offset: 33879},
								name: "AggSum",
							},
						},
					},
				},
			},
		},
		{
			name: "AsField",
			pos:  position{line: 1212, col: 1, offset: 33912},
			expr: &actionExpr{
				pos: position{line: 1212, col: 12, offset: 33923},
				run: (*parser).callonAsField1,
				expr: &seqExpr{
					pos: position{line: 1212, col: 12, offset: 33923},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1212, col: 12, offset: 33923},
							name: "AS",
						},
						&labeledExpr{
							pos:   position{line: 1212, col: 15, offset: 33926},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1212, col: 21, offset: 33932},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "AggCount",
			pos:  position{line: 1222, col: 1, offset: 34139},
			expr: &choiceExpr{
				pos: position{line: 1222, col: 13, offset: 34151},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1222, col: 13, offset: 34151},
						run: (*parser).callonAggCount2,
						expr: &seqExpr{
							pos: position{line: 1222, col: 13, offset: 34151},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 1222, col: 14, offset: 34152},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 1222, col: 14, offset: 34152},
											val:        "count",
											ignoreCase: false,
											want:       "\"count\"",
										},
										&litMatcher{
											pos:        position{line: 1222, col: 24, offset: 34162},
											val:        "c",
											ignoreCase: false,
											want:       "\"c\"",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1222, col: 29, offset: 34167},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&labeledExpr{
									pos:   position{line: 1222, col: 33, offset: 34171},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1222, col: 39, offset: 34177},
										name: "FieldName",
									},
								},
								&litMatcher{
									pos:        position{line: 1222, col: 49, offset: 34187},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1229, col: 5, offset: 34334},
						run: (*parser).callonAggCount11,
						expr: &choiceExpr{
							pos: position{line: 1229, col: 6, offset: 34335},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 1229, col: 6, offset: 34335},
									val:        "count",
									ignoreCase: false,
									want:       "\"count\"",
								},
								&litMatcher{
									pos:        position{line: 1229, col: 16, offset: 34345},
									val:        "c",
									ignoreCase: false,
									want:       "\"c\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggDistinctCount",
			pos:  position{line: 1238, col: 1, offset: 34481},
			expr: &actionExpr{
				pos: position{line: 1238, col: 21, offset: 34501},
				run: (*parser).callonAggDistinctCount1,
				expr: &seqExpr{
					pos: position{line: 1238, col: 21, offset: 34501},
					exprs: []any{
						&choiceExpr{
							pos: position{line: 1238, col: 22, offset: 34502},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 1238, col: 22, offset: 34502},
									val:        "distinct_count",
									ignoreCase: false,
									want:       "\"distinct_count\"",
								},
								&litMatcher{
									pos:        position{line: 1238, col: 41, offset: 34521},
									val:        "dc",
									ignoreCase: false,
									want:       "\"dc\"",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1238, col: 47, offset: 34527},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&labeledExpr{
							pos:   position{line: 1238, col: 51, offset: 34531},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1238, col: 57, offset: 34537},
								name: "FieldName",
							},
						},
						&litMatcher{
							pos:        position{line: 1238, col: 67, offset: 34547},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "AggAvg",
			pos:  position{line: 1247, col: 1, offset: 34699},
			expr: &actionExpr{
				pos: position{line: 1247, col: 11, offset: 34709},
				run: (*parser).callonAggAvg1,
				expr: &seqExpr{
					pos: position{line: 1247, col: 11, offset: 34709},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1247, col: 11, offset: 34709},
							val:        "avg(",
							ignoreCase: false,
							want:       "\"avg(\"",
						},
						&labeledExpr{
							pos:   position{line: 1247, col: 18, offset: 34716},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1247, col: 24, offset: 34722},
								name: "FieldName",
							},
						},
						&litMatcher{
							pos:        position{line: 1247, col: 34, offset: 34732},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "AggMin",
			pos:  position{line: 1256, col: 1, offset: 34876},
			expr: &actionExpr{
				pos: position{line: 1256, col: 11, offset: 34886},
				run: (*parser).callonAggMin1,
				expr: &seqExpr{
					pos: position{line: 1256, col: 11, offset: 34886},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1256, col: 11, offset: 34886},
							val:        "min(",
							ignoreCase: false,
							want:       "\"min(\"",
						},
						&labeledExpr{
							pos:   position{line: 1256, col: 18, offset: 34893},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1256, col: 24, offset: 34899},
								name: "FieldName",
							},
						},
						&litMatcher{
							pos:        position{line: 1256, col: 34, offset: 34909},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "AggMax",
			pos:  position{line: 1265, col: 1, offset: 35053},
			expr: &actionExpr{
				pos: position{line: 1265, col: 11, offset: 35063},
				run: (*parser).callonAggMax1,
				expr: &seqExpr{
					pos: position{line: 1265, col: 11, offset: 35063},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1265, col: 11, offset: 35063},
							val:        "max(",
							ignoreCase: false,
							want:       "\"max(\"",
						},
						&labeledExpr{
							pos:   position{line: 1265, col: 18, offset: 35070},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1265, col: 24, offset: 35076},
								name: "FieldName",
							},
						},
						&litMatcher{
							pos:        position{line: 1265, col: 34, offset: 35086},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "AggSum",
			pos:  position{line: 1274, col: 1, offset: 35230},
			expr: &actionExpr{
				pos: position{line: 1274, col: 11, offset: 35240},
				run: (*parser).callonAggSum1,
				expr: &seqExpr{
					pos: position{line: 1274, col: 11, offset: 35240},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1274, col: 11, offset: 35240},
							val:        "sum(",
							ignoreCase: false,
							want:       "\"sum(\"",
						},
						&labeledExpr{
							pos:   position{line: 1274, col: 18, offset: 35247},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1274, col: 24, offset: 35253},
								name: "FieldName",
							},
						},
						&litMatcher{
							pos:        position{line: 1274, col: 34, offset: 35263},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "FieldWithNumberValue",
			pos:  position{line: 1283, col: 1, offset: 35407},
			expr: &actionExpr{
				pos: position{line: 1283, col: 25, offset: 35431},
				run: (*parser).callonFieldWithNumberValue1,
				expr: &labeledExpr{
					pos:   position{line: 1283, col: 25, offset: 35431},
					label: "keyValuePair",
					expr: &choiceExpr{
						pos: position{line: 1283, col: 39, offset: 35445},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1283, col: 39, offset: 35445},
								name: "NamedFieldWithNumberValue",
							},
							&ruleRefExpr{
								pos:  position{line: 1283, col: 67, offset: 35473},
								name: "UnnamedFieldWithNumberValue",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedFieldWithNumberValue",
			pos:  position{line: 1287, col: 1, offset: 35536},
			expr: &actionExpr{
				pos: position{line: 1287, col: 30, offset: 35565},
				run: (*parser).callonNamedFieldWithNumberValue1,
				expr: &seqExpr{
					pos: position{line: 1287, col: 30, offset: 35565},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1287, col: 30, offset: 35565},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 1287, col: 34, offset: 35569},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 1287, col: 44, offset: 35579},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 1287, col: 48, offset: 35583},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1287, col: 48, offset: 35583},
										name: "EqualityOperator",
									},
									&ruleRefExpr{
										pos:  position{line: 1287, col: 67, offset: 35602},
										name: "InequalityOperator",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1287, col: 87, offset: 35622},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1287, col: 93, offset: 35628},
								name: "Number",
							},
						},
					},
				},
			},
		},
		{
			name: "UnnamedFieldWithNumberValue",
			pos:  position{line: 1300, col: 1, offset: 35862},
			expr: &actionExpr{
				pos: position{line: 1300, col: 32, offset: 35893},
				run: (*parser).callonUnnamedFieldWithNumberValue1,
				expr: &labeledExpr{
					pos:   position{line: 1300, col: 32, offset: 35893},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 1300, col: 38, offset: 35899},
						name: "Number",
					},
				},
			},
		},
		{
			name: "FieldWithStringValue",
			pos:  position{line: 1313, col: 1, offset: 36116},
			expr: &actionExpr{
				pos: position{line: 1313, col: 25, offset: 36140},
				run: (*parser).callonFieldWithStringValue1,
				expr: &labeledExpr{
					pos:   position{line: 1313, col: 25, offset: 36140},
					label: "keyValuePair",
					expr: &choiceExpr{
						pos: position{line: 1313, col: 39, offset: 36154},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1313, col: 39, offset: 36154},
								name: "NamedFieldWithStringValue",
							},
							&ruleRefExpr{
								pos:  position{line: 1313, col: 67, offset: 36182},
								name: "UnnamedFieldWithStringValue",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedFieldWithStringValue",
			pos:  position{line: 1317, col: 1, offset: 36245},
			expr: &actionExpr{
				pos: position{line: 1317, col: 30, offset: 36274},
				run: (*parser).callonNamedFieldWithStringValue1,
				expr: &seqExpr{
					pos: position{line: 1317, col: 30, offset: 36274},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1317, col: 30, offset: 36274},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 1317, col: 34, offset: 36278},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 1317, col: 44, offset: 36288},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 1317, col: 47, offset: 36291},
								name: "EqualityOperator",
							},
						},
						&labeledExpr{
							pos:   position{line: 1317, col: 64, offset: 36308},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1317, col: 70, offset: 36314},
								name: "String",
							},
						},
					},
				},
			},
		},
		{
			name: "UnnamedFieldWithStringValue",
			pos:  position{line: 1330, col: 1, offset: 36548},
			expr: &actionExpr{
				pos: position{line: 1330, col: 32, offset: 36579},
				run: (*parser).callonUnnamedFieldWithStringValue1,
				expr: &labeledExpr{
					pos:   position{line: 1330, col: 32, offset: 36579},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 1330, col: 38, offset: 36585},
						name: "String",
					},
				},
			},
		},
		{
			name: "FieldNameList",
			pos:  position{line: 1345, col: 1, offset: 36917},
			expr: &actionExpr{
				pos: position{line: 1345, col: 18, offset: 36934},
				run: (*parser).callonFieldNameList1,
				expr: &seqExpr{
					pos: position{line: 1345, col: 18, offset: 36934},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1345, col: 18, offset: 36934},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1345, col: 24, offset: 36940},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 1345, col: 34, offset: 36950},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1345, col: 39, offset: 36955},
								expr: &seqExpr{
									pos: position{line: 1345, col: 40, offset: 36956},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 1345, col: 40, offset: 36956},
											val:        ", ",
											ignoreCase: false,
											want:       "\", \"",
										},
										&ruleRefExpr{
											pos:  position{line: 1345, col: 45, offset: 36961},
											name: "FieldName",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1365, col: 1, offset: 37724},
			expr: &actionExpr{
				pos: position{line: 1365, col: 14, offset: 37737},
				run: (*parser).callonFieldName1,
				expr: &seqExpr{
					pos: position{line: 1365, col: 14, offset: 37737},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 1365, col: 14, offset: 37737},
							val:        "[a-zA-Z0-9:*]",
							chars:      []rune{':', '*'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1365, col: 27, offset: 37750},
							expr: &charClassMatcher{
								pos:        position{line: 1365, col: 27, offset: 37750},
								val:        "[a-zA-Z0-9:_.*]",
								chars:      []rune{':', '_', '.', '*'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "String",
			pos:  position{line: 1369, col: 1, offset: 37803},
			expr: &actionExpr{
				pos: position{line: 1369, col: 11, offset: 37813},
				run: (*parser).callonString1,
				expr: &labeledExpr{
					pos:   position{line: 1369, col: 11, offset: 37813},
					label: "str",
					expr: &choiceExpr{
						pos: position{line: 1369, col: 16, offset: 37818},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1369, col: 16, offset: 37818},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1369, col: 31, offset: 37833},
								name: "UnquotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1373, col: 1, offset: 37874},
			expr: &actionExpr{
				pos: position{line: 1373, col: 17, offset: 37890},
				run: (*parser).callonQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1373, col: 17, offset: 37890},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1373, col: 17, offset: 37890},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1373, col: 21, offset: 37894},
							expr: &charClassMatcher{
								pos:        position{line: 1373, col: 21, offset: 37894},
								val:        "[^\"]",
								chars:      []rune{'"'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 1373, col: 27, offset: 37900},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UnquotedString",
			pos:  position{line: 1378, col: 1, offset: 38011},
			expr: &actionExpr{
				pos: position{line: 1378, col: 19, offset: 38029},
				run: (*parser).callonUnquotedString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1378, col: 19, offset: 38029},
					expr: &choiceExpr{
						pos: position{line: 1378, col: 20, offset: 38030},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 1378, col: 20, offset: 38030},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&seqExpr{
								pos: position{line: 1378, col: 27, offset: 38037},
								exprs: []any{
									&notExpr{
										pos: position{line: 1378, col: 27, offset: 38037},
										expr: &choiceExpr{
											pos: position{line: 1378, col: 29, offset: 38039},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 1378, col: 29, offset: 38039},
													name: "MAJOR_BREAK",
												},
												&ruleRefExpr{
													pos:  position{line: 1378, col: 43, offset: 38053},
													name: "EOF",
												},
											},
										},
									},
									&anyMatcher{
										line: 1378, col: 48, offset: 38058,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 1384, col: 1, offset: 38172},
			expr: &actionExpr{
				pos: position{line: 1384, col: 11, offset: 38182},
				run: (*parser).callonNumber1,
				expr: &labeledExpr{
					pos:   position{line: 1384, col: 11, offset: 38182},
					label: "number",
					expr: &ruleRefExpr{
						pos:  position{line: 1384, col: 18, offset: 38189},
						name: "NumberAsString",
					},
				},
			},
		},
		{
			name: "NumberAsString",
			pos:  position{line: 1390, col: 1, offset: 38378},
			expr: &actionExpr{
				pos: position{line: 1390, col: 19, offset: 38396},
				run: (*parser).callonNumberAsString1,
				expr: &seqExpr{
					pos: position{line: 1390, col: 19, offset: 38396},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1390, col: 19, offset: 38396},
							label: "number",
							expr: &choiceExpr{
								pos: position{line: 1390, col: 27, offset: 38404},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1390, col: 27, offset: 38404},
										name: "FloatAsString",
									},
									&ruleRefExpr{
										pos:  position{line: 1390, col: 43, offset: 38420},
										name: "IntegerAsString",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 1390, col: 60, offset: 38437},
							expr: &choiceExpr{
								pos: position{line: 1390, col: 62, offset: 38439},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1390, col: 62, offset: 38439},
										name: "SPACE",
									},
									&litMatcher{
										pos:        position{line: 1390, col: 70, offset: 38447},
										val:        ")",
										ignoreCase: false,
										want:       "\")\"",
									},
									&litMatcher{
										pos:        position{line: 1390, col: 76, offset: 38453},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&ruleRefExpr{
										pos:  position{line: 1390, col: 82, offset: 38459},
										name: "EOF",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FloatAsString",
			pos:  position{line: 1396, col: 1, offset: 38588},
			expr: &actionExpr{
				pos: position{line: 1396, col: 18, offset: 38605},
				run: (*parser).callonFloatAsString1,
				expr: &seqExpr{
					pos: position{line: 1396, col: 18, offset: 38605},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 1396, col: 18, offset: 38605},
							expr: &charClassMatcher{
								pos:        position{line: 1396, col: 18, offset: 38605},
								val:        "[-+]",
								chars:      []rune{'-', '+'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1396, col: 24, offset: 38611},
							expr: &charClassMatcher{
								pos:        position{line: 1396, col: 24, offset: 38611},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 1396, col: 31, offset: 38618},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1396, col: 35, offset: 38622},
							expr: &charClassMatcher{
								pos:        position{line: 1396, col: 35, offset: 38622},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "IntegerAsString",
			pos:  position{line: 1401, col: 1, offset: 38717},
			expr: &actionExpr{
				pos: position{line: 1401, col: 20, offset: 38736},
				run: (*parser).callonIntegerAsString1,
				expr: &seqExpr{
					pos: position{line: 1401, col: 20, offset: 38736},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 1401, col: 20, offset: 38736},
							expr: &charClassMatcher{
								pos:        position{line: 1401, col: 20, offset: 38736},
								val:        "[-+]",
								chars:      []rune{'-', '+'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1401, col: 26, offset: 38742},
							expr: &charClassMatcher{
								pos:        position{line: 1401, col: 26, offset: 38742},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 1405, col: 1, offset: 38785},
			expr: &actionExpr{
				pos: position{line: 1405, col: 21, offset: 38805},
				run: (*parser).callonEqualityOperator1,
				expr: &choiceExpr{
					pos: position{line: 1405, col: 22, offset: 38806},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 1405, col: 22, offset: 38806},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&litMatcher{
							pos:        position{line: 1405, col: 28, offset: 38812},
							val:        "!=",
							ignoreCase: false,
							want:       "\"!=\"",
						},
					},
				},
			},
		},
		{
			name: "InequalityOperator",
			pos:  position{line: 1409, col: 1, offset: 38854},
			expr: &actionExpr{
				pos: position{line: 1409, col: 23, offset: 38876},
				run: (*parser).callonInequalityOperator1,
				expr: &choiceExpr{
					pos: position{line: 1409, col: 24, offset: 38877},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 1409, col: 24, offset: 38877},
							val:        "<=",
							ignoreCase: false,
							want:       "\"<=\"",
						},
						&litMatcher{
							pos:        position{line: 1409, col: 31, offset: 38884},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&litMatcher{
							pos:        position{line: 1409, col: 37, offset: 38890},
							val:        ">=",
							ignoreCase: false,
							want:       "\">=\"",
						},
						&litMatcher{
							pos:        position{line: 1409, col: 44, offset: 38897},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "EqualityOrInequality",
			pos:  position{line: 1413, col: 1, offset: 38938},
			expr: &choiceExpr{
				pos: position{line: 1413, col: 25, offset: 38962},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1413, col: 25, offset: 38962},
						run: (*parser).callonEqualityOrInequality2,
						expr: &labeledExpr{
							pos:   position{line: 1413, col: 25, offset: 38962},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 1413, col: 28, offset: 38965},
								name: "EqualityOperator",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1416, col: 3, offset: 39007},
						run: (*parser).callonEqualityOrInequality5,
						expr: &labeledExpr{
							pos:   position{line: 1416, col: 3, offset: 39007},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 1416, col: 6, offset: 39010},
								name: "InequalityOperator",
							},
						},
					},
				},
			},
		},
		{
			name: "OpPlus",
			pos:  position{line: 1420, col: 1, offset: 39053},
			expr: &actionExpr{
				pos: position{line: 1420, col: 11, offset: 39063},
				run: (*parser).callonOpPlus1,
				expr: &seqExpr{
					pos: position{line: 1420, col: 11, offset: 39063},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1420, col: 11, offset: 39063},
							name: "SPACE",
						},
						&litMatcher{
							pos:        position{line: 1420, col: 17, offset: 39069},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1420, col: 21, offset: 39073},
							name: "SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpMinus",
			pos:  position{line: 1424, col: 1, offset: 39104},
			expr: &actionExpr{
				pos: position{line: 1424, col: 12, offset: 39115},
				run: (*parser).callonOpMinus1,
				expr: &seqExpr{
					pos: position{line: 1424, col: 12, offset: 39115},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1424, col: 12, offset: 39115},
							name: "SPACE",
						},
						&litMatcher{
							pos:        position{line: 1424, col: 18, offset: 39121},
							val:        "-",
							ignoreCase: false,
							want:       "\"-\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1424, col: 22, offset: 39125},
							name: "SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpMul",
			pos:  position{line: 1428, col: 1, offset: 39156},
			expr: &actionExpr{
				pos: position{line: 1428, col: 10, offset: 39165},
				run: (*parser).callonOpMul1,
				expr: &seqExpr{
					pos: position{line: 1428, col: 10, offset: 39165},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1428, col: 10, offset: 39165},
							name: "SPACE",
						},
						&litMatcher{
							pos:        position{line: 1428, col: 16, offset: 39171},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1428, col: 20, offset: 39175},
							name: "SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpDiv",
			pos:  position{line: 1432, col: 1, offset: 39206},
			expr: &actionExpr{
				pos: position{line: 1432, col: 10, offset: 39215},
				run: (*parser).callonOpDiv1,
				expr: &seqExpr{
					pos: position{line: 1432, col: 10, offset: 39215},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1432, col: 10, offset: 39215},
							name: "SPACE",
						},
						&litMatcher{
							pos:        position{line: 1432, col: 16, offset: 39221},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1432, col: 20, offset: 39225},
							name: "SPACE",
						},
					},
				},
			},
		},
		{
			name: "CMD_SEARCH",
			pos:  position{line: 1436, col: 1, offset: 39256},
			expr: &seqExpr{
				pos: position{line: 1436, col: 15, offset: 39270},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1436, col: 15, offset: 39270},
						val:        "search",
						ignoreCase: false,
						want:       "\"search\"",
					},
					&ruleRefExpr{
						pos:  position{line: 1436, col: 24, offset: 39279},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_REGEX",
			pos:  position{line: 1437, col: 1, offset: 39285},
			expr: &seqExpr{
				pos: position{line: 1437, col: 14, offset: 39298},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1437, col: 14, offset: 39298},
						val:        "regex",
						ignoreCase: false,
						want:       "\"regex\"",
					},
					&ruleRefExpr{
						pos:  position{line: 1437, col: 22, offset: 39306},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_STATS",
			pos:  position{line: 1438, col: 1, offset: 39312},
			expr: &seqExpr{
				pos: position{line: 1438, col: 14, offset: 39325},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1438, col: 14, offset: 39325},
						val:        "stats",
						ignoreCase: false,
						want:       "\"stats\"",
					},
					&ruleRefExpr{
						pos:  position{line: 1438, col: 22, offset: 39333},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_FIELDS",
			pos:  position{line: 1439, col: 1, offset: 39339},
			expr: &seqExpr{
				pos: position{line: 1439, col: 15, offset: 39353},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1439, col: 15, offset: 39353},
						val:        "fields",
						ignoreCase: false,
						want:       "\"fields\"",
					},
					&ruleRefExpr{
						pos:  position{line: 1439, col: 24, offset: 39362},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_WHERE",
			pos:  position{line: 1440, col: 1, offset: 39368},
			expr: &seqExpr{
				pos: position{line: 1440, col: 14, offset: 39381},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1440, col: 14, offset: 39381},
						val:        "where",
						ignoreCase: false,
						want:       "\"where\"",
					},
					&ruleRefExpr{
						pos:  position{line: 1440, col: 22, offset: 39389},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_HEAD_NO_SPACE",
			pos:  position{line: 1441, col: 1, offset: 39395},
			expr: &litMatcher{
				pos:        position{line: 1441, col: 22, offset: 39416},
				val:        "head",
				ignoreCase: false,
				want:       "\"head\"",
			},
		},
		{
			name: "CMD_HEAD",
			pos:  position{line: 1442, col: 1, offset: 39423},
			expr: &seqExpr{
				pos: position{line: 1442, col: 13, offset: 39435},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 1442, col: 13, offset: 39435},
						name: "CMD_HEAD_NO_SPACE",
					},
					&ruleRefExpr{
						pos:  position{line: 1442, col: 31, offset: 39453},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_EVAL",
			pos:  position{line: 1443, col: 1, offset: 39459},
			expr: &seqExpr{
				pos: position{line: 1443, col: 13, offset: 39471},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1443, col: 13, offset: 39471},
						val:        "eval",
						ignoreCase: false,
						want:       "\"eval\"",
					},
					&ruleRefExpr{
						pos:  position{line: 1443, col: 20, offset: 39478},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_REX",
			pos:  position{line: 1444, col: 1, offset: 39484},
			expr: &seqExpr{
				pos: position{line: 1444, col: 12, offset: 39495},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1444, col: 12, offset: 39495},
						val:        "rex",
						ignoreCase: false,
						want:       "\"rex\"",
					},
					&ruleRefExpr{
						pos:  position{line: 1444, col: 18, offset: 39501},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_TOP",
			pos:  position{line: 1445, col: 1, offset: 39507},
			expr: &litMatcher{
				pos:        position{line: 1445, col: 12, offset: 39518},
				val:        "top",
				ignoreCase: false,
				want:       "\"top\"",
			},
		},
		{
			name: "CMD_RARE",
			pos:  position{line: 1446, col: 1, offset: 39524},
			expr: &litMatcher{
				pos:        position{line: 1446, col: 13, offset: 39536},
				val:        "rare",
				ignoreCase: false,
				want:       "\"rare\"",
			},
		},
		{
			name: "EVAL_CONCAT",
			pos:  position{line: 1447, col: 1, offset: 39543},
			expr: &seqExpr{
				pos: position{line: 1447, col: 16, offset: 39558},
				exprs: []any{
					&zeroOrOneExpr{
						pos: position{line: 1447, col: 16, offset: 39558},
						expr: &ruleRefExpr{
							pos:  position{line: 1447, col: 16, offset: 39558},
							name: "SPACE",
						},
					},
					&litMatcher{
						pos:        position{line: 1447, col: 23, offset: 39565},
						val:        ".",
						ignoreCase: false,
						want:       "\".\"",
					},
					&zeroOrOneExpr{
						pos: position{line: 1447, col: 27, offset: 39569},
						expr: &ruleRefExpr{
							pos:  position{line: 1447, col: 27, offset: 39569},
							name: "SPACE",
						},
					},
				},
			},
		},
		{
			name: "MAJOR_BREAK",
			pos:  position{line: 1450, col: 1, offset: 39680},
			expr: &choiceExpr{
				pos: position{line: 1450, col: 16, offset: 39695},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 1450, col: 16, offset: 39695},
						val:        "[[\\]<>(){}|!;,'\"*\\n\\r \\t&?+]",
						chars:      []rune{'[', ']', '<', '>', '(', ')', '{', '}', '|', '!', ';', ',', '\'', '"', '*', '\n', '\r', ' ', '\t', '&', '?', '+'},
						ignoreCase: false,
						inverted:   false,
					},
					&litMatcher{
						pos:        position{line: 1450, col: 47, offset: 39726},
						val:        "%21",
						ignoreCase: false,
						want:       "\"%21\"",
					},
					&litMatcher{
						pos:        position{line: 1450, col: 55, offset: 39734},
						val:        "%26",
						ignoreCase: false,
						want:       "\"%26\"",
					},
					&litMatcher{
						pos:        position{line: 1451, col: 16, offset: 39757},
						val:        "%2526",
						ignoreCase: false,
						want:       "\"%2526\"",
					},
					&litMatcher{
						pos:        position{line: 1451, col: 26, offset: 39767},
						val:        "%3B",
						ignoreCase: false,
						want:       "\"%3B\"",
					},
					&litMatcher{
						pos:        position{line: 1451, col: 34, offset: 39775},
						val:        "%7C",
						ignoreCase: false,
						want:       "\"%7C\"",
					},
					&litMatcher{
						pos:        position{line: 1451, col: 42, offset: 39783},
						val:        "%20",
						ignoreCase: false,
						want:       "\"%20\"",
					},
					&litMatcher{
						pos:        position{line: 1451, col: 50, offset: 39791},
						val:        "%2B",
						ignoreCase: false,
						want:       "\"%2B\"",
					},
					&litMatcher{
						pos:        position{line: 1451, col: 58, offset: 39799},
						val:        "%3D",
						ignoreCase: false,
						want:       "\"%3D\"",
					},
					&litMatcher{
						pos:        position{line: 1451, col: 66, offset: 39807},
						val:        "--",
						ignoreCase: false,
						want:       "\"--\"",
					},
					&litMatcher{
						pos:        position{line: 1452, col: 16, offset: 39829},
						val:        "%2520",
						ignoreCase: false,
						want:       "\"%2520\"",
					},
					&litMatcher{
						pos:        position{line: 1452, col: 26, offset: 39839},
						val:        "%5D",
						ignoreCase: false,
						want:       "\"%5D\"",
					},
					&litMatcher{
						pos:        position{line: 1452, col: 34, offset: 39847},
						val:        "%5B",
						ignoreCase: false,
						want:       "\"%5B\"",
					},
					&litMatcher{
						pos:        position{line: 1452, col: 42, offset: 39855},
						val:        "%3A",
						ignoreCase: false,
						want:       "\"%3A\"",
					},
					&litMatcher{
						pos:        position{line: 1452, col: 50, offset: 39863},
						val:        "%0A",
						ignoreCase: false,
						want:       "\"%0A\"",
					},
					&litMatcher{
						pos:        position{line: 1452, col: 58, offset: 39871},
						val:        "%2C",
						ignoreCase: false,
						want:       "\"%2C\"",
					},
					&litMatcher{
						pos:        position{line: 1452, col: 66, offset: 39879},
						val:        "%28",
						ignoreCase: false,
						want:       "\"%28\"",
					},
					&litMatcher{
						pos:        position{line: 1452, col: 74, offset: 39887},
						val:        "%29",
						ignoreCase: false,
						want:       "\"%29\"",
					},
				},
			},
		},
		{
			name: "MINOR_BREAK",
			pos:  position{line: 1453, col: 1, offset: 39893},
			expr: &choiceExpr{
				pos: position{line: 1453, col: 16, offset: 39908},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 1453, col: 16, offset: 39908},
						val:        "[/:=@.$#%_]",
						chars:      []rune{'/', ':', '=', '@', '.', '$', '#', '%', '_'},
						ignoreCase: false,
						inverted:   false,
					},
					&litMatcher{
						pos:        position{line: 1453, col: 30, offset: 39922},
						val:        "-",
						ignoreCase: false,
						want:       "\"-\"",
					},
					&litMatcher{
						pos:        position{line: 1453, col: 36, offset: 39928},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "NOT",
			pos:  position{line: 1455, col: 1, offset: 39934},
			expr: &seqExpr{
				pos: position{line: 1455, col: 8, offset: 39941},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1455, col: 8, offset: 39941},
						val:        "NOT",
						ignoreCase: false,
						want:       "\"NOT\"",
					},
					&ruleRefExpr{
						pos:  position{line: 1455, col: 14, offset: 39947},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "OR",
			pos:  position{line: 1456, col: 1, offset: 39953},
			expr: &seqExpr{
				pos: position{line: 1456, col: 7, offset: 39959},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 1456, col: 7, offset: 39959},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 1456, col: 13, offset: 39965},
						val:        "OR",
						ignoreCase: false,
						want:       "\"OR\"",
					},
					&ruleRefExpr{
						pos:  position{line: 1456, col: 18, offset: 39970},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "AND",
			pos:  position{line: 1457, col: 1, offset: 39976},
			expr: &seqExpr{
				pos: position{line: 1457, col: 8, offset: 39983},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 1457, col: 8, offset: 39983},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 1457, col: 14, offset: 39989},
						val:        "AND",
						ignoreCase: false,
						want:       "\"AND\"",
					},
					&ruleRefExpr{
						pos:  position{line: 1457, col: 20, offset: 39995},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "PIPE",
			pos:  position{line: 1458, col: 1, offset: 40001},
			expr: &seqExpr{
				pos: position{line: 1458, col: 9, offset: 40009},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 1458, col: 9, offset: 40009},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 1458, col: 15, offset: 40015},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&ruleRefExpr{
						pos:  position{line: 1458, col: 19, offset: 40019},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 1459, col: 1, offset: 40025},
			expr: &seqExpr{
				pos: position{line: 1459, col: 7, offset: 40031},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 1459, col: 7, offset: 40031},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 1459, col: 13, offset: 40037},
						val:        "AS",
						ignoreCase: false,
						want:       "\"AS\"",
					},
					&ruleRefExpr{
						pos:  position{line: 1459, col: 18, offset: 40042},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 1460, col: 1, offset: 40048},
			expr: &seqExpr{
				pos: position{line: 1460, col: 7, offset: 40054},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 1460, col: 7, offset: 40054},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 1460, col: 13, offset: 40060},
						val:        "BY",
						ignoreCase: false,
						want:       "\"BY\"",
					},
					&ruleRefExpr{
						pos:  position{line: 1460, col: 18, offset: 40065},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1462, col: 1, offset: 40072},
			expr: &notExpr{
				pos: position{line: 1462, col: 8, offset: 40079},
				expr: &anyMatcher{
					line: 1462, col: 9, offset: 40080,
				},
			},
		},
		{
			name: "SPACE",
			pos:  position{line: 1463, col: 1, offset: 40082},
			expr: &choiceExpr{
				pos: position{line: 1463, col: 10, offset: 40091},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 1463, col: 11, offset: 40092},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 1463, col: 11, offset: 40092},
								expr: &litMatcher{
									pos:        position{line: 1463, col: 11, offset: 40092},
									val:        " ",
									ignoreCase: false,
									want:       "\" \"",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1463, col: 16, offset: 40097},
								name: "COMMENT",
							},
							&zeroOrOneExpr{
								pos: position{line: 1463, col: 24, offset: 40105},
								expr: &litMatcher{
									pos:        position{line: 1463, col: 24, offset: 40105},
									val:        " ",
									ignoreCase: false,
									want:       "\" \"",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1463, col: 32, offset: 40113},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
				},
			},
		},
		{
			name: "COMMENT",
			pos:  position{line: 1464, col: 1, offset: 40117},
			expr: &seqExpr{
				pos: position{line: 1464, col: 12, offset: 40128},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1464, col: 12, offset: 40128},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1464, col: 18, offset: 40134},
						expr: &seqExpr{
							pos: position{line: 1464, col: 19, offset: 40135},
							exprs: []any{
								&notExpr{
									pos: position{line: 1464, col: 19, offset: 40135},
									expr: &litMatcher{
										pos:        position{line: 1464, col: 21, offset: 40137},
										val:        "```",
										ignoreCase: false,
										want:       "\"```\"",
									},
								},
								&anyMatcher{
									line: 1464, col: 28, offset: 40144,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1464, col: 32, offset: 40148},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
				},
			},
		},
	},
}

func (c *current) onStart1(initialSearch, filterBlocks, queryAggBlocks any) (any, error) {
	var q ast.QueryStruct
	q.SearchFilter = initialSearch.(*ast.Node)

	// Join the InitialSearchBlock with the FilterBlocks with AND nodes. For a
	// search like "A | B | C | D" we should generate the node structure below
	// so that when we run the search it evaluates A first.
	//
	//      AND
	//     /   \
	//    A     AND
	//         /   \
	//        B     AND
	//             /   \
	//            C     D

	filterBlocksSlice := filterBlocks.([]any)
	switch len(filterBlocksSlice) {
	case 0:
		q.SearchFilter = initialSearch.(*ast.Node)
	case 1:
		q.SearchFilter = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     initialSearch.(*ast.Node),
			Right:    filterBlocksSlice[0].(*ast.Node),
		}
	default: // len > 1
		// Iterate backwards so we build the node structure mentioned above.
		root := filterBlocksSlice[len(filterBlocksSlice)-1].(*ast.Node)
		for i := len(filterBlocksSlice) - 2; i > -1; i-- {
			newRoot := &ast.Node{
				NodeType: ast.NodeAnd,
				Left:     filterBlocksSlice[i].(*ast.Node),
				Right:    root,
			}

			root = newRoot
		}

		q.SearchFilter = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     initialSearch.(*ast.Node),
			Right:    root,
		}
	}

	if queryAggBlocks != nil {
		queryAggSlice := queryAggBlocks.([]any)

		if len(queryAggSlice) > 0 {
			// Chain together all QueryAggergators.
			q.PipeCommands = queryAggSlice[0].(*structs.QueryAggregators)

			// Go to the end of the first chain.
			curQueryAgg := q.PipeCommands
			for ; curQueryAgg.Next != nil; curQueryAgg = curQueryAgg.Next {
			}

			// Link the remaining chains.
			for i := range queryAggSlice[1:] {
				queryAgg := queryAggSlice[i+1].(*structs.QueryAggregators)
				curQueryAgg.Next = queryAgg

				// Go to the end of this chain.
				for ; curQueryAgg.Next != nil; curQueryAgg = curQueryAgg.Next {
				}
			}
		}
	}

	return q, nil
}

func (p *parser) callonStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStart1(stack["initialSearch"], stack["filterBlocks"], stack["queryAggBlocks"])
}

func (c *current) onInitialSearchBlock1(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonInitialSearchBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialSearchBlock1(stack["clause"])
}

func (c *current) onSearchBlock1(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonSearchBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBlock1(stack["clause"])
}

func (c *current) onFilterBlock1(block any) (any, error) {
	return block, nil
}

func (p *parser) callonFilterBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterBlock1(stack["block"])
}

func (c *current) onQueryAggergatorBlock1(block any) (any, error) {
	queryAgg := block.(*structs.QueryAggregators)
	return queryAgg, nil
}

func (p *parser) callonQueryAggergatorBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQueryAggergatorBlock1(stack["block"])
}

func (c *current) onFieldSelectBlock1(op, fields any) (any, error) {
	columnsRequest := &structs.ColumnsRequest{}
	if op == nil || string(op.([]byte)) == "+ " {
		columnsRequest.IncludeColumns = fields.([]string)
	} else {
		columnsRequest.ExcludeColumns = fields.([]string)
	}

	queryAggregator := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			OutputColumns: columnsRequest,
		},
	}

	return queryAggregator, nil
}

func (p *parser) callonFieldSelectBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldSelectBlock1(stack["op"], stack["fields"])
}

func (c *current) onAggregatorBlock1(aggs, byFields any) (any, error) {
	aggNode := &structs.QueryAggregators{}

	// Extract the MeasureAggregators and check if any of the aggregation fields
	// need to be renamed.
	aggsSlice := aggs.([]*aggregator)
	measureAggs := make([]*structs.MeasureAggregator, len(aggsSlice))
	columnsRequest := &structs.ColumnsRequest{}
	columnsRequest.RenameAggregationColumns = make(map[string]string, 0)

	for i, agg := range aggsSlice {
		measureAggs[i] = agg.aggregator

		if agg.renameOutputField {
			columnsRequest.RenameAggregationColumns[measureAggs[i].String()] = agg.outputFieldNewName
		}
	}

	// If any agg field was renamed, make a QueryAggregators for all the renames.
	if len(columnsRequest.RenameAggregationColumns) > 0 {
		renameNode := &structs.QueryAggregators{
			PipeCommandType: structs.OutputTransformType,
			OutputTransforms: &structs.OutputTransforms{
				OutputColumns: columnsRequest,
			},
		}

		aggNode.Next = renameNode
	}

	if byFields == nil {
		aggNode.PipeCommandType = structs.MeasureAggsType
		aggNode.MeasureOperations = measureAggs
	} else {
		aggNode.PipeCommandType = structs.GroupByType
		aggNode.GroupByRequest = &structs.GroupByRequest{
			MeasureOperations: measureAggs,
			GroupByColumns:    byFields.([]string),
		}
		aggNode.BucketLimit = query.MAX_GRP_BUCKS
	}

	return aggNode, nil
}

func (p *parser) callonAggregatorBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregatorBlock1(stack["aggs"], stack["byFields"])
}

func (c *current) onGroupbyBlock1(fields any) (any, error) {
	// Wildcard fields are not allowed. See https://docs.splunk.com/Documentation/Splunk/9.1.0/SearchReference/Stats
	for _, field := range fields.([]string) {
		if strings.Contains(field, "*") {
			return nil, errors.New("BY clause cannot contain fields with wildcards")
		}
	}

	return fields, nil
}

func (p *parser) callonGroupbyBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupbyBlock1(stack["fields"])
}

func (c *current) onRegexBlock1(keyAndOp, str any) (any, error) {
	var key, op string
	if keyAndOp == nil {
		key = "*"
		op = "="
	} else {
		keyAndOpSlice := keyAndOp.([]any)
		key = keyAndOpSlice[0].(string)
		op = keyAndOpSlice[1].(string)
	}

	// Remove the quotation marks.
	regex := str.(string)
	regex = regex[1 : len(regex)-1]

	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:           op,
			Field:        key,
			Values:       regex,
			ValueIsRegex: true,
		},
	}

	return node, nil
}

func (p *parser) callonRegexBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexBlock1(stack["keyAndOp"], stack["str"])
}

func (c *current) onClauseLevel41(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*ast.Node)
	for _, v := range rest.([]any) {
		parts := v.([]any) // This will be [(AND / SPACE), ClauseLevel3].
		cur = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     cur,
			Right:    parts[1].(*ast.Node),
		}
	}

	return cur, nil
}

func (p *parser) callonClauseLevel41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel41(stack["first"], stack["rest"])
}

func (c *current) onClauseLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*ast.Node)
	for _, v := range rest.([]any) {
		parts := v.([]any) // This will be [OR, ClauseLevel2].
		cur = &ast.Node{
			NodeType: ast.NodeOr,
			Left:     cur,
			Right:    parts[1].(*ast.Node),
		}
	}

	return cur, nil
}

func (p *parser) callonClauseLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel31(stack["first"], stack["rest"])
}

func (c *current) onClauseLevel22(notList, first any) (any, error) {
	// There's an issue with how queries with AST Not nodes are run, so use
	// De Morgan's law to manipulate the expression.
	node := first.(*ast.Node)
	numNots := len(notList.([]any))

	if numNots%2 == 1 {
		deMorgansLaw(node)
	}

	return node, nil
}

func (p *parser) callonClauseLevel22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel22(stack["notList"], stack["first"])
}

func (c *current) onClauseLevel29(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonClauseLevel29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel29(stack["clause"])
}

func (c *current) onClauseLevel12(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonClauseLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel12(stack["clause"])
}

func (c *current) onClauseLevel18(term any) (any, error) {
	return term, nil
}

func (p *parser) callonClauseLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel18(stack["term"])
}

func (c *current) onSearchTerm1(term any) (any, error) {
	return term, nil
}

func (p *parser) callonSearchTerm1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchTerm1(stack["term"])
}

func (c *current) onStatisticBlock1(statisticExpr any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		StatisticColRequest: statisticExpr.(*structs.StatisticExpr),
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	measureAgg := &structs.MeasureAggregator{
		MeasureCol:  "*",
		MeasureFunc: utils.Count,
	}

	measureOperations := make([]*structs.MeasureAggregator, 1)
	measureOperations[0] = measureAgg

	groupByColumns := append(statisticExpr.(*structs.StatisticExpr).FieldList, statisticExpr.(*structs.StatisticExpr).ByClause...)

	aggNode := &structs.QueryAggregators{}
	aggNode.Next = root
	aggNode.PipeCommandType = structs.GroupByType
	aggNode.GroupByRequest = &structs.GroupByRequest{
		MeasureOperations: measureOperations,
		GroupByColumns:    groupByColumns,
	}

	return aggNode, nil
}

func (p *parser) callonStatisticBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticBlock1(stack["statisticExpr"])
}

func (c *current) onStatisticExpr1(cmd, limit, fieldList, byClause, options any) (any, error) {

	statisticExpr := &structs.StatisticExpr{
		FieldList: fieldList.([]string),
	}

	statisticCmd, err := transferUint8ToString(cmd)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: StatisticExpr: %v", err)
	}

	if statisticCmd == "top" {
		statisticExpr.StatisticExprMode = structs.SEMTop
	} else {
		statisticExpr.StatisticExprMode = structs.SEMRare
	}

	if limit != nil {
		statisticExpr.Limit = limit.(string)
	}

	if options != nil {
		statisticExpr.Options = options.(*structs.Options)
	} else {
		statisticExpr.Options = &structs.Options{
			ShowCount:    true,
			CountField:   "count",
			ShowPerc:     true,
			PercentField: "percent",
			UseOther:     false,
			OtherStr:     "Other",
		}
	}

	if byClause != nil {
		statisticExpr.ByClause = byClause.([]string)
	}

	return statisticExpr, nil
}

func (p *parser) callonStatisticExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticExpr1(stack["cmd"], stack["limit"], stack["fieldList"], stack["byClause"], stack["options"])
}

func (c *current) onStatisticLimit2(number any) (any, error) {
	return number.(string), nil
}

func (p *parser) callonStatisticLimit2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticLimit2(stack["number"])
}

func (c *current) onStatisticLimit7(limit any) (any, error) {
	return limit.([]interface{})[2].(string), nil
}

func (p *parser) callonStatisticLimit7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticLimit7(stack["limit"])
}

func (c *current) onOptions1(option any) (any, error) {
	//Default value
	options := &structs.Options{
		ShowCount:    true,
		CountField:   "count",
		ShowPerc:     true,
		PercentField: "percent",
		UseOther:     false,
		OtherStr:     "other",
	}

	optionSlice := option.([]any)
	for _, opt := range optionSlice {
		optArr := opt.([]string)
		// 使用类型断言检查匹配的选项类型
		switch optArr[0] {
		case "showcount":
			showCountBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.ShowCount = showCountBool
		case "countfield":
			options.CountField = optArr[1]
		case "showperc":
			showPercBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.ShowPerc = showPercBool
		case "percentfield":
			options.PercentField = optArr[1]
		case "useother":
			useOtherBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.UseOther = useOtherBool
		case "otherstr":
			options.OtherStr = optArr[1]
		default:
			return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: invalid option")
		}
	}

	return options, nil
}

func (p *parser) callonOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptions1(stack["option"])
}

func (c *current) onOption1(optionCMD, field any) (any, error) {
	optionArr := []string{optionCMD.(string), field.(string)}
	return optionArr, nil
}

func (p *parser) callonOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOption1(stack["optionCMD"], stack["field"])
}

func (c *current) onOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: StatisticExpr: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionCMD1(stack["option"])
}

func (c *current) onFieldList1(field, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]string, 1+len(restSlice))
	slice[0] = field.(string)

	for i := range restSlice {
		fieldAtom := restSlice[i].([]any)
		slice[i+1] = fieldAtom[2].(string)
	}

	return slice, nil
}

func (p *parser) callonFieldList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldList1(stack["field"], stack["rest"])
}

func (c *current) onByClause1(fieldList any) (any, error) {
	return fieldList.([]string), nil
}

func (p *parser) callonByClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByClause1(stack["fieldList"])
}

func (c *current) onRexBlock1(field, str any) (any, error) {
	pattern := removeQuotes(str)
	rexColNames, err := getRexColNames(pattern)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: RexBlock: %v", err)
	}
	rexExpr := &structs.RexExpr{
		FieldName:   field.(string),
		Pattern:     transferPCREToRE2(pattern),
		RexColNames: rexColNames,
	}

	letColReq := &structs.LetColumnsRequest{
		RexColRequest: rexExpr,
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonRexBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRexBlock1(stack["field"], stack["str"])
}

func (c *current) onEvalBlock1(first, rest any) (any, error) {
	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: first.(*structs.LetColumnsRequest),
		},
	}

	leafQueryAgg := root
	restSlice := rest.([]any)
	for i := range restSlice {
		CommaSpaceAndEval := restSlice[i].([]any)
		nextQueryAgg := &structs.QueryAggregators{
			PipeCommandType: structs.OutputTransformType,
			OutputTransforms: &structs.OutputTransforms{
				LetColumns: CommaSpaceAndEval[2].(*structs.LetColumnsRequest),
			},
		}

		leafQueryAgg.Next = nextQueryAgg
		leafQueryAgg = leafQueryAgg.Next
	}

	return root, nil
}

func (p *parser) callonEvalBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalBlock1(stack["first"], stack["rest"])
}

func (c *current) onSingleEval1(field, expr any) (any, error) {
	fieldStr := field.(string)
	if strings.Contains(fieldStr, "*") {
		return nil, fmt.Errorf("New fields must not contain wildcards; invalid field: %v", field)
	}

	letColumnsRequest := expr.(*structs.LetColumnsRequest)
	letColumnsRequest.NewColName = fieldStr

	return letColumnsRequest, nil
}

func (p *parser) callonSingleEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleEval1(stack["field"], stack["expr"])
}

func (c *current) onEvalExpression1(value any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		ValueColRequest: value.(*structs.ValueExpr),
	}

	return letColReq, nil
}

func (p *parser) callonEvalExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalExpression1(stack["value"])
}

func (c *current) onConditionExpr1(condition, trueValue, falseValue any) (any, error) {

	node := &structs.ConditionExpr{
		Op:         "if",
		BoolExpr:   condition.(*structs.BoolExpr),
		TrueValue:  trueValue.(*structs.ValueExpr),
		FalseValue: falseValue.(*structs.ValueExpr),
	}

	return node, nil
}

func (p *parser) callonConditionExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr1(stack["condition"], stack["trueValue"], stack["falseValue"])
}

func (c *current) onTextExpr2(opName, stringExpr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:          opNameStr,
		Value:       stringExpr.(*structs.StringExpr),
		StrToRemove: "",
	}

	return node, nil
}

func (p *parser) callonTextExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr2(stack["opName"], stack["stringExpr"])
}

func (c *current) onTextExpr10(opName, firstVal, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	if rest == nil {
		return firstVal, nil
	}
	restSlice := rest.([]any)
	values := make([]*structs.StringExpr, 1+len(restSlice))
	values[0] = firstVal.(*structs.StringExpr)

	for i := range restSlice {
		stringAtom := restSlice[i].([]any)
		values[i+1] = stringAtom[1].(*structs.StringExpr)
	}
	node := &structs.TextExpr{
		Op:           opNameStr,
		MaxMinValues: values,
	}
	return node, nil

}

func (p *parser) callonTextExpr10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr10(stack["opName"], stack["firstVal"], stack["rest"])
}

func (c *current) onTextExpr25(opName, url any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:          opNameStr,
		Value:       url.(*structs.StringExpr),
		StrToRemove: "",
	}
	return node, nil

}

func (p *parser) callonTextExpr25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr25(stack["opName"], stack["url"])
}

func (c *current) onTextExpr33(opName, stringExpr, delim any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:        opNameStr,
		Value:     stringExpr.(*structs.StringExpr),
		Delimiter: delim.(*structs.StringExpr),
	}
	return node, nil
}

func (p *parser) callonTextExpr33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr33(stack["opName"], stack["stringExpr"], stack["delim"])
}

func (c *current) onTextExpr44(opName, expr, strToRemoveExpr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}

	stringExpr, ok := expr.(*structs.StringExpr)
	if !ok {
		return nil, fmt.Errorf("Spl peg: TextExpr: Failed to assert expr as *structs.StringExpr: %v", err)
	}

	strToRemove := " \t"
	if strToRemoveExpr != nil {
		strToRemove = strToRemoveExpr.(string)
	}

	node := &structs.TextExpr{
		Op:          opNameStr,
		Value:       stringExpr,
		StrToRemove: removeQuotes(strToRemove),
	}

	return node, nil
}

func (p *parser) callonTextExpr44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr44(stack["opName"], stack["expr"], stack["strToRemoveExpr"])
}

func (c *current) onStrToRemoveExpr1(strToRemove any) (any, error) {
	return strToRemove, nil
}

func (p *parser) callonStrToRemoveExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStrToRemoveExpr1(stack["strToRemove"])
}

func (c *current) onEvalFieldToRead2() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEvalFieldToRead2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalFieldToRead2()
}

func (c *current) onEvalFieldToRead8(field any) (any, error) {
	return field, nil
}

func (p *parser) callonEvalFieldToRead8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalFieldToRead8(stack["field"])
}

func (c *current) onWhereBlock1(condition any) (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			FilterRows: condition.(*structs.BoolExpr),
		},
	}

	return queryAgg, nil
}

func (p *parser) callonWhereBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereBlock1(stack["condition"])
}

func (c *current) onBoolExpr1(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonBoolExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExpr1(stack["expr"])
}

func (c *current) onBoolExprLevel41(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.BoolExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.BoolExpr{
			IsTerminal: false,
			BoolOp:     structs.BoolOpOr,
			LeftBool:   cur,
			RightBool:  opAndClause[1].(*structs.BoolExpr),
		}
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel41(stack["first"], stack["rest"])
}

func (c *current) onBoolExprLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.BoolExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.BoolExpr{
			IsTerminal: false,
			BoolOp:     structs.BoolOpAnd,
			LeftBool:   cur,
			RightBool:  opAndClause[1].(*structs.BoolExpr),
		}
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel31(stack["first"], stack["rest"])
}

func (c *current) onBoolExprLevel22(first any) (any, error) {
	cur := &structs.BoolExpr{
		IsTerminal: false,
		BoolOp:     structs.BoolOpNot,
		LeftBool:   first.(*structs.BoolExpr),
		RightBool:  nil,
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel22(stack["first"])
}

func (c *current) onBoolExprLevel29(first any) (any, error) {
	return first, nil
}

func (p *parser) callonBoolExprLevel29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel29(stack["first"])
}

func (c *current) onBoolExprLevel12(first any) (any, error) {
	return first, nil
}

func (p *parser) callonBoolExprLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel12(stack["first"])
}

func (c *current) onBoolExprLevel18(op, value any) (any, error) {
	opNameStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: BoolExpr: %v", err)
	}
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  value.(*structs.ValueExpr),
		RightValue: nil,
		ValueOp:    opNameStr,
	}
	return expr, nil
}

func (p *parser) callonBoolExprLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel18(stack["op"], stack["value"])
}

func (c *current) onBoolExprLevel120(inExpr any) (any, error) {
	return inExpr, nil
}

func (p *parser) callonBoolExprLevel120() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel120(stack["inExpr"])
}

func (c *current) onBoolExprLevel123(left, op, right any) (any, error) {
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  left.(*structs.ValueExpr),
		RightValue: right.(*structs.ValueExpr),
		ValueOp:    op.(string),
	}

	return expr, nil
}

func (p *parser) callonBoolExprLevel123() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel123(stack["left"], stack["op"], stack["right"])
}

func (c *current) onInExpr2(left, valueToJudge, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ValueExpr, 1+len(restSlice))
	slice[0] = valueToJudge.(*structs.ValueExpr)

	for i := range restSlice {
		valueAtom := restSlice[i].([]any)
		slice[i+1] = valueAtom[1].(*structs.ValueExpr)
	}

	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  left.(*structs.ValueExpr),
		ValueList:  slice,
		ValueOp:    "in",
	}
	return expr, nil
}

func (p *parser) callonInExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInExpr2(stack["left"], stack["valueToJudge"], stack["rest"])
}

func (c *current) onInExpr16(valueToJudge, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ValueExpr, len(restSlice))

	for i := range restSlice {
		valueAtom := restSlice[i].([]any)
		slice[i] = valueAtom[1].(*structs.ValueExpr)
	}

	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  valueToJudge.(*structs.ValueExpr),
		ValueList:  slice,
		ValueOp:    "in",
	}
	return expr, nil
}

func (p *parser) callonInExpr16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInExpr16(stack["valueToJudge"], stack["rest"])
}

func (c *current) onValueExpr2(condition any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMConditionExpr,
		ConditionExpr: condition.(*structs.ConditionExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr2(stack["condition"])
}

func (c *current) onValueExpr5(numeric any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMNumericExpr,
		NumericExpr:   numeric.(*structs.NumericExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr5(stack["numeric"])
}

func (c *current) onValueExpr8(str any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMStringExpr,
		StringExpr:    str.(*structs.StringExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr8(stack["str"])
}

func (c *current) onStringExpr2(text any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMTextExpr,
		TextExpr:       text.(*structs.TextExpr),
	}

	return expr, nil
}

func (p *parser) callonStringExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr2(stack["text"])
}

func (c *current) onStringExpr8(str any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMRawString,
		RawString:      removeQuotes(str),
	}

	return expr, nil
}

func (p *parser) callonStringExpr8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr8(stack["str"])
}

func (c *current) onStringExpr14(field any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMField,
		FieldName:      field.(string),
	}

	return expr, nil
}

func (p *parser) callonStringExpr14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr14(stack["field"])
}

func (c *current) onStringExpr26(concat any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMConcatExpr,
		ConcatExpr:     concat.(*structs.ConcatExpr),
	}

	return expr, nil
}

func (p *parser) callonStringExpr26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr26(stack["concat"])
}

func (c *current) onConcatExpr1(first, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ConcatAtom, 1+len(restSlice))
	slice[0] = first.(*structs.ConcatAtom)

	for i := range restSlice {
		concatAndAtom := restSlice[i].([]any)
		slice[i+1] = concatAndAtom[1].(*structs.ConcatAtom)
	}

	expr := &structs.ConcatExpr{
		Atoms: slice,
	}

	return expr, nil
}

func (p *parser) callonConcatExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatExpr1(stack["first"], stack["rest"])
}

func (c *current) onConcatAtom2(text any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField:  false,
		Value:    "",
		TextExpr: text.(*structs.TextExpr),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom2(stack["text"])
}

func (c *current) onConcatAtom5(str any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: false,
		Value:   removeQuotes(str),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom5(stack["str"])
}

func (c *current) onConcatAtom8(number any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: false,
		Value:   number.(string),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom8(stack["number"])
}

func (c *current) onConcatAtom11(field any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: true,
		Value:   field.(string),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom11(stack["field"])
}

func (c *current) onNumericExpr1(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExpr1(stack["expr"])
}

func (c *current) onNumericExprLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.NumericExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.NumericExpr{
			IsTerminal:      false,
			Op:              opAndClause[0].(string),
			Left:            cur,
			Right:           opAndClause[1].(*structs.NumericExpr),
			NumericExprMode: structs.NEMNumericExpr,
		}
	}

	return cur, nil
}

func (p *parser) callonNumericExprLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel31(stack["first"], stack["rest"])
}

func (c *current) onNumericExprLevel21(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.NumericExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.NumericExpr{
			IsTerminal:      false,
			Op:              opAndClause[0].(string),
			Left:            cur,
			Right:           opAndClause[1].(*structs.NumericExpr),
			NumericExprMode: structs.NEMNumericExpr,
		}
	}

	return cur, nil
}

func (p *parser) callonNumericExprLevel21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel21(stack["first"], stack["rest"])
}

func (c *current) onRoundPrecisionExpr1(expr any) (any, error) {
	rightNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	return rightNumericExpr, nil
}

func (p *parser) callonRoundPrecisionExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRoundPrecisionExpr1(stack["expr"])
}

func (c *current) onNumericExprLevel12(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericExprLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel12(stack["expr"])
}

func (c *current) onNumericExprLevel18(numericEvalExpr any) (any, error) {
	return numericEvalExpr, nil
}

func (p *parser) callonNumericExprLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel18(stack["numericEvalExpr"])
}

func (c *current) onNumericExprLevel111(field any) (any, error) {
	expr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    true,
		Value:           field.(string),
		NumericExprMode: structs.NEMNumberField,
	}

	return expr, nil
}

func (p *parser) callonNumericExprLevel111() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel111(stack["field"])
}

func (c *current) onNumericExprLevel114(number any) (any, error) {
	expr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    false,
		Value:           number.(string),
		NumericExprMode: structs.NEMNumber,
	}

	return expr, nil
}

func (p *parser) callonNumericExprLevel114() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel114(stack["number"])
}

func (c *current) onNumericEvalExpr2(opName, expr any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)
	node, err := createNumericExpr(opNameStr, leftNumericExpr, nil, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr2(stack["opName"], stack["expr"])
}

func (c *current) onNumericEvalExpr15(roundExpr, expr, roundPrecision any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	var rightNumericExpr *structs.NumericExpr
	if roundPrecision != nil {
		rightNumericExpr, ok = roundPrecision.(*structs.NumericExpr)
		if !ok {
			return nil, fmt.Errorf("Failed to assert roundPrecision as *structs.NumericExpr")
		}
	}

	node, err := createNumericExpr("round", leftNumericExpr, rightNumericExpr, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr15(stack["roundExpr"], stack["expr"], stack["roundPrecision"])
}

func (c *current) onNumericEvalExpr25(lenExpr, expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericEvalExpr25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr25(stack["lenExpr"], stack["expr"])
}

func (c *current) onLenExpr2(str any) (any, error) {

	leftNumericExpr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    false,
		Value:           str.(string),
		NumericExprMode: structs.NEMLenString,
	}

	node, err := createNumericExpr("len", leftNumericExpr, nil, structs.NEMLenString)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonLenExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLenExpr2(stack["str"])
}

func (c *current) onLenExpr8(field any) (any, error) {

	leftNumericExpr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    true,
		Value:           field.(string),
		NumericExprMode: structs.NEMLenField,
	}

	node, err := createNumericExpr("len", leftNumericExpr, nil, structs.NEMLenField)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonLenExpr8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLenExpr8(stack["field"])
}

func (c *current) onHeadBlock2(intAsStr any) (any, error) {
	limit, err := strconv.ParseUint(intAsStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid limit (%v): %v", intAsStr.(string), err)
	}

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			MaxRows: limit,
		},
	}

	return queryAgg, nil
}

func (p *parser) callonHeadBlock2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadBlock2(stack["intAsStr"])
}

func (c *current) onHeadBlock10() (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			MaxRows: uint64(10), // From https://docs.splunk.com/Documentation/Splunk/9.1.0/SearchReference/Head
		},
	}

	return queryAgg, nil
}

func (p *parser) callonHeadBlock10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadBlock10()
}

func (c *current) onAggregationList1(first, rest any) (any, error) {
	// Convert `rest` to a slice. Each element of the slice will be a 2-element
	// slice where the first element is ", " and the second is an Aggregator.
	restSlice := rest.([]any)

	numAggs := 1 + len(restSlice)
	aggsSlice := make([]*aggregator, numAggs)
	aggsSlice[0] = first.(*aggregator)

	for i := 1; i < numAggs; i++ {
		separatorAndAgg := restSlice[i-1].([]any)
		aggsSlice[i] = separatorAndAgg[1].(*aggregator)
	}

	return aggsSlice, nil
}

func (p *parser) callonAggregationList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregationList1(stack["first"], stack["rest"])
}

func (c *current) onAggregator1(aggFunc, asField any) (any, error) {
	agg := &aggregator{}
	agg.aggregator = aggFunc.(*structs.MeasureAggregator)

	if asField != nil {
		agg.renameOutputField = true
		agg.outputFieldNewName = asField.(string)
	}

	return agg, nil
}

func (p *parser) callonAggregator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregator1(stack["aggFunc"], stack["asField"])
}

func (c *current) onAggFunction1(agg any) (any, error) {
	return agg, nil
}

func (p *parser) callonAggFunction1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggFunction1(stack["agg"])
}

func (c *current) onAsField1(field any) (any, error) {
	fieldStr := field.(string)

	if strings.Contains(fieldStr, "*") {
		return nil, errors.New("The field specified in `AS` cannot contain wildcards")
	}

	return fieldStr, nil
}

func (p *parser) callonAsField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsField1(stack["field"])
}

func (c *current) onAggCount2(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Count,
	}

	return agg, nil
}

func (p *parser) callonAggCount2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggCount2(stack["field"])
}

func (c *current) onAggCount11() (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  "*",
		MeasureFunc: utils.Count,
	}

	return agg, nil
}

func (p *parser) callonAggCount11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggCount11()
}

func (c *current) onAggDistinctCount1(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Cardinality,
	}

	return agg, nil
}

func (p *parser) callonAggDistinctCount1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggDistinctCount1(stack["field"])
}

func (c *current) onAggAvg1(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Avg,
	}

	return agg, nil
}

func (p *parser) callonAggAvg1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAvg1(stack["field"])
}

func (c *current) onAggMin1(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Min,
	}

	return agg, nil
}

func (p *parser) callonAggMin1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMin1(stack["field"])
}

func (c *current) onAggMax1(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Max,
	}

	return agg, nil
}

func (p *parser) callonAggMax1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMax1(stack["field"])
}

func (c *current) onAggSum1(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Sum,
	}

	return agg, nil
}

func (p *parser) callonAggSum1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSum1(stack["field"])
}

func (c *current) onFieldWithNumberValue1(keyValuePair any) (any, error) {
	return keyValuePair, nil
}

func (p *parser) callonFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithNumberValue1(stack["keyValuePair"])
}

func (c *current) onNamedFieldWithNumberValue1(key, op, value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     op.(string),
			Field:  key.(string),
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonNamedFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedFieldWithNumberValue1(stack["key"], stack["op"], stack["value"])
}

func (c *current) onUnnamedFieldWithNumberValue1(value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     "=",
			Field:  "*",
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonUnnamedFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnnamedFieldWithNumberValue1(stack["value"])
}

func (c *current) onFieldWithStringValue1(keyValuePair any) (any, error) {
	return keyValuePair, nil
}

func (p *parser) callonFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithStringValue1(stack["keyValuePair"])
}

func (c *current) onNamedFieldWithStringValue1(key, op, value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     op.(string),
			Field:  key.(string),
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonNamedFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedFieldWithStringValue1(stack["key"], stack["op"], stack["value"])
}

func (c *current) onUnnamedFieldWithStringValue1(value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     "=",
			Field:  "*",
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonUnnamedFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnnamedFieldWithStringValue1(stack["value"])
}

func (c *current) onFieldNameList1(first, rest any) (any, error) {
	// Convert `rest` to a slice. Each element of the slice will be a 2-element
	// slice where the first element is ", " and the second is a FieldName.
	restSlice := rest.([]any)

	numFieldNames := 1 + len(restSlice)
	fields := make([]string, numFieldNames)
	fields[0] = first.(string)

	for i := 1; i < numFieldNames; i++ {
		separatorAndField := restSlice[i-1].([]any)
		fields[i] = separatorAndField[1].(string)
	}

	return fields, nil
}

func (p *parser) callonFieldNameList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldNameList1(stack["first"], stack["rest"])
}

func (c *current) onFieldName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFieldName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldName1()
}

func (c *current) onString1(str any) (any, error) {
	return str, nil
}

func (p *parser) callonString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onString1(stack["str"])
}

func (c *current) onQuotedString1() (any, error) {
	// The returned string has quotes as the first and last character.
	return string(c.text), nil
}

func (p *parser) callonQuotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString1()
}

func (c *current) onUnquotedString1() (any, error) {
	// Return the string wrapped in quotes.
	str := "\"" + string(c.text) + "\""
	return str, nil
}

func (p *parser) callonUnquotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedString1()
}

func (c *current) onNumber1(number any) (any, error) {
	return json.Number(number.(string)), nil
}

func (p *parser) callonNumber1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1(stack["number"])
}

func (c *current) onNumberAsString1(number any) (any, error) {
	return number, nil
}

func (p *parser) callonNumberAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumberAsString1(stack["number"])
}

func (c *current) onFloatAsString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatAsString1()
}

func (c *current) onIntegerAsString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIntegerAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerAsString1()
}

func (c *current) onEqualityOperator1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityOperator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator1()
}

func (c *current) onInequalityOperator1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonInequalityOperator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInequalityOperator1()
}

func (c *current) onEqualityOrInequality2(op any) (any, error) {
	return op, nil
}

func (p *parser) callonEqualityOrInequality2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOrInequality2(stack["op"])
}

func (c *current) onEqualityOrInequality5(op any) (any, error) {
	return op, nil
}

func (p *parser) callonEqualityOrInequality5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOrInequality5(stack["op"])
}

func (c *current) onOpPlus1() (any, error) {
	return "+", nil
}

func (p *parser) callonOpPlus1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpPlus1()
}

func (c *current) onOpMinus1() (any, error) {
	return "-", nil
}

func (p *parser) callonOpMinus1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpMinus1()
}

func (c *current) onOpMul1() (any, error) {
	return "*", nil
}

func (p *parser) callonOpMul1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpMul1()
}

func (c *current) onOpDiv1() (any, error) {
	return "/", nil
}

func (p *parser) callonOpDiv1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpDiv1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize {
		val, ok = p.parseRuleMemoize(rule)
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
