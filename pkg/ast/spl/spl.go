// Code generated by pigeon; DO NOT EDIT.

package spl

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/siglens/siglens/pkg/ast"
	"github.com/siglens/siglens/pkg/segment/aggregations"
	"github.com/siglens/siglens/pkg/segment/query"
	"github.com/siglens/siglens/pkg/segment/structs"
	"github.com/siglens/siglens/pkg/segment/utils"
	log "github.com/sirupsen/logrus"
)

func getParseError(err error) error {
	switch ev := err.(type) {
	case errList:
		if pe, ok := ev[0].(*parserError); ok {
			return &ast.ParseError{
				Inner:    pe.Inner,
				Line:     pe.pos.line,
				Column:   pe.pos.col,
				Offset:   pe.pos.offset,
				Prefix:   pe.prefix,
				Expected: pe.expected,
			}
		}
	}
	return err
}

// Remove the first and last character of the string
func removeQuotes(s any) string {
	str := s.(string)
	if len(str) < 3 {
		return ""
	}

	return str[1 : len(str)-1]
}

// Check if it rename fields with similar names using a wildcard
func isRegexRename(originalPattern, newPattern string) (bool, error) {
	oldWildcards := strings.Count(originalPattern, "*")
	newWildcards := strings.Count(newPattern, "*")

	if oldWildcards == 0 && newWildcards == 0 {
		return false, nil
	} else if oldWildcards > 0 && oldWildcards == newWildcards {
		return true, nil
	} else {
		return false, errors.New("Patterns do not match")
	}
}

func deMorgansLaw(node *ast.Node) {
	switch node.NodeType {
	case ast.NodeTerminal:
		switch node.Comparison.Op {
		case "=":
			node.Comparison.Op = "!="
		case "!=":
			node.Comparison.Op = "="
		case ">":
			node.Comparison.Op = "<="
		case "<":
			node.Comparison.Op = ">="
		case ">=":
			node.Comparison.Op = "<"
		case "<=":
			node.Comparison.Op = ">"
		default:
			log.Errorf("deMorgansLaw: unexpected node comparison op: %v", node.Comparison.Op)
		}
	case ast.NodeAnd:
		node.NodeType = ast.NodeOr
		deMorgansLaw(node.Left)
		deMorgansLaw(node.Right)
	case ast.NodeOr:
		node.NodeType = ast.NodeAnd
		deMorgansLaw(node.Left)
		deMorgansLaw(node.Right)
	default:
		log.Errorf("deMorgansLaw: unexpected NodeType: %v", node.NodeType)
	}
}

// Generate NumericExpr struct for eval functions
func createNumericExpr(op string, leftNumericExpr *structs.NumericExpr, rightNumericExpr *structs.NumericExpr, numericExprMode structs.NumericExprMode) (*structs.NumericExpr, error) {
	if leftNumericExpr == nil {
		return nil, fmt.Errorf("expr cannot be nil")
	}

	return &structs.NumericExpr{
		IsTerminal:      false,
		Op:              op,
		Left:            leftNumericExpr,
		Right:           rightNumericExpr,
		NumericExprMode: numericExprMode,
	}, nil
}

func transferUint8ToString(opName interface{}) (string, error) {
	strData, ok := opName.([]byte)
	if !ok {
		return "", fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)
	return opNameStr, nil
}

func transferPCREToRE2(pattern string) string {
	pattern = strings.Replace(pattern, "(?<", "(?P<", -1)
	return pattern
}

func getRexColNames(pattern string) ([]string, error) {
	re, err := regexp.Compile(`\?<(?P<GroupName>[a-zA-Z0-9_]+)>`)
	if err != nil {
		return nil, fmt.Errorf("getRexColNames: There are some errors in the pattern: %v", err)
	}
	matches := re.FindAllStringSubmatch(pattern, -1)

	var rexColNames []string
	for _, match := range matches {
		rexColNames = append(rexColNames, match[1])
	}

	return rexColNames, nil
}

type aggregator struct {
	measureAgg         *structs.MeasureAggregator
	renameOutputField  bool
	outputFieldNewName string
}

type singleAggTemp struct {
	aggregators   []*aggregator
	SplitByClause *structs.SplitByClause
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Start",
			pos:  position{line: 146, col: 1, offset: 3973},
			expr: &actionExpr{
				pos: position{line: 146, col: 10, offset: 3982},
				run: (*parser).callonStart1,
				expr: &seqExpr{
					pos: position{line: 146, col: 10, offset: 3982},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 146, col: 10, offset: 3982},
							expr: &ruleRefExpr{
								pos:  position{line: 146, col: 10, offset: 3982},
								name: "SPACE",
							},
						},
						&labeledExpr{
							pos:   position{line: 146, col: 17, offset: 3989},
							label: "initialSearch",
							expr: &ruleRefExpr{
								pos:  position{line: 146, col: 32, offset: 4004},
								name: "InitialSearchBlock",
							},
						},
						&labeledExpr{
							pos:   position{line: 146, col: 52, offset: 4024},
							label: "filterBlocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 146, col: 65, offset: 4037},
								expr: &ruleRefExpr{
									pos:  position{line: 146, col: 66, offset: 4038},
									name: "FilterBlock",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 146, col: 80, offset: 4052},
							label: "queryAggBlocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 146, col: 95, offset: 4067},
								expr: &ruleRefExpr{
									pos:  position{line: 146, col: 96, offset: 4068},
									name: "QueryAggergatorBlock",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 146, col: 119, offset: 4091},
							expr: &ruleRefExpr{
								pos:  position{line: 146, col: 119, offset: 4091},
								name: "SPACE",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 146, col: 126, offset: 4098},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "InitialSearchBlock",
			pos:  position{line: 217, col: 1, offset: 6307},
			expr: &actionExpr{
				pos: position{line: 217, col: 23, offset: 6329},
				run: (*parser).callonInitialSearchBlock1,
				expr: &seqExpr{
					pos: position{line: 217, col: 23, offset: 6329},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 217, col: 23, offset: 6329},
							expr: &ruleRefExpr{
								pos:  position{line: 217, col: 23, offset: 6329},
								name: "CMD_SEARCH",
							},
						},
						&labeledExpr{
							pos:   position{line: 217, col: 35, offset: 6341},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 217, col: 42, offset: 6348},
								name: "ClauseLevel4",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBlock",
			pos:  position{line: 221, col: 1, offset: 6389},
			expr: &actionExpr{
				pos: position{line: 221, col: 16, offset: 6404},
				run: (*parser).callonSearchBlock1,
				expr: &seqExpr{
					pos: position{line: 221, col: 16, offset: 6404},
					exprs: []any{
						&notExpr{
							pos: position{line: 221, col: 16, offset: 6404},
							expr: &ruleRefExpr{
								pos:  position{line: 221, col: 18, offset: 6406},
								name: "ALLCMD",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 221, col: 26, offset: 6414},
							expr: &ruleRefExpr{
								pos:  position{line: 221, col: 26, offset: 6414},
								name: "CMD_SEARCH",
							},
						},
						&labeledExpr{
							pos:   position{line: 221, col: 38, offset: 6426},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 221, col: 45, offset: 6433},
								name: "ClauseLevel4",
							},
						},
					},
				},
			},
		},
		{
			name: "FilterBlock",
			pos:  position{line: 225, col: 1, offset: 6474},
			expr: &actionExpr{
				pos: position{line: 225, col: 16, offset: 6489},
				run: (*parser).callonFilterBlock1,
				expr: &seqExpr{
					pos: position{line: 225, col: 16, offset: 6489},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 225, col: 16, offset: 6489},
							name: "PIPE",
						},
						&labeledExpr{
							pos:   position{line: 225, col: 21, offset: 6494},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 225, col: 28, offset: 6501},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 225, col: 28, offset: 6501},
										name: "SearchBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 225, col: 42, offset: 6515},
										name: "RegexBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QueryAggergatorBlock",
			pos:  position{line: 230, col: 1, offset: 6591},
			expr: &actionExpr{
				pos: position{line: 230, col: 25, offset: 6615},
				run: (*parser).callonQueryAggergatorBlock1,
				expr: &labeledExpr{
					pos:   position{line: 230, col: 25, offset: 6615},
					label: "block",
					expr: &choiceExpr{
						pos: position{line: 230, col: 32, offset: 6622},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 230, col: 32, offset: 6622},
								name: "FieldSelectBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 230, col: 51, offset: 6641},
								name: "AggregatorBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 230, col: 69, offset: 6659},
								name: "EvalBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 230, col: 81, offset: 6671},
								name: "WhereBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 230, col: 94, offset: 6684},
								name: "HeadBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 230, col: 106, offset: 6696},
								name: "RexBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 230, col: 117, offset: 6707},
								name: "StatisticBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 230, col: 134, offset: 6724},
								name: "RenameBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 230, col: 148, offset: 6738},
								name: "TimechartBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldSelectBlock",
			pos:  position{line: 235, col: 1, offset: 6834},
			expr: &actionExpr{
				pos: position{line: 235, col: 21, offset: 6854},
				run: (*parser).callonFieldSelectBlock1,
				expr: &seqExpr{
					pos: position{line: 235, col: 21, offset: 6854},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 235, col: 21, offset: 6854},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 26, offset: 6859},
							name: "CMD_FIELDS",
						},
						&labeledExpr{
							pos:   position{line: 235, col: 37, offset: 6870},
							label: "op",
							expr: &zeroOrOneExpr{
								pos: position{line: 235, col: 40, offset: 6873},
								expr: &choiceExpr{
									pos: position{line: 235, col: 41, offset: 6874},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 235, col: 41, offset: 6874},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
										&litMatcher{
											pos:        position{line: 235, col: 47, offset: 6880},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 53, offset: 6886},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 235, col: 68, offset: 6901},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 235, col: 75, offset: 6908},
								name: "FieldNameList",
							},
						},
					},
				},
			},
		},
		{
			name: "AggregatorBlock",
			pos:  position{line: 253, col: 1, offset: 7412},
			expr: &actionExpr{
				pos: position{line: 253, col: 20, offset: 7431},
				run: (*parser).callonAggregatorBlock1,
				expr: &seqExpr{
					pos: position{line: 253, col: 20, offset: 7431},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 253, col: 20, offset: 7431},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 253, col: 25, offset: 7436},
							name: "CMD_STATS",
						},
						&labeledExpr{
							pos:   position{line: 253, col: 35, offset: 7446},
							label: "aggs",
							expr: &ruleRefExpr{
								pos:  position{line: 253, col: 40, offset: 7451},
								name: "AggregationList",
							},
						},
						&labeledExpr{
							pos:   position{line: 253, col: 56, offset: 7467},
							label: "byFields",
							expr: &zeroOrOneExpr{
								pos: position{line: 253, col: 65, offset: 7476},
								expr: &ruleRefExpr{
									pos:  position{line: 253, col: 66, offset: 7477},
									name: "GroupbyBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GroupbyBlock",
			pos:  position{line: 298, col: 1, offset: 8971},
			expr: &actionExpr{
				pos: position{line: 298, col: 17, offset: 8987},
				run: (*parser).callonGroupbyBlock1,
				expr: &seqExpr{
					pos: position{line: 298, col: 17, offset: 8987},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 298, col: 17, offset: 8987},
							name: "BY",
						},
						&labeledExpr{
							pos:   position{line: 298, col: 20, offset: 8990},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 298, col: 27, offset: 8997},
								name: "FieldNameList",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexBlock",
			pos:  position{line: 309, col: 1, offset: 9346},
			expr: &actionExpr{
				pos: position{line: 309, col: 15, offset: 9360},
				run: (*parser).callonRegexBlock1,
				expr: &seqExpr{
					pos: position{line: 309, col: 15, offset: 9360},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 309, col: 15, offset: 9360},
							name: "CMD_REGEX",
						},
						&labeledExpr{
							pos:   position{line: 309, col: 25, offset: 9370},
							label: "keyAndOp",
							expr: &zeroOrOneExpr{
								pos: position{line: 309, col: 34, offset: 9379},
								expr: &seqExpr{
									pos: position{line: 309, col: 35, offset: 9380},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 309, col: 35, offset: 9380},
											name: "FieldName",
										},
										&ruleRefExpr{
											pos:  position{line: 309, col: 45, offset: 9390},
											name: "EqualityOperator",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 309, col: 64, offset: 9409},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 68, offset: 9413},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel4",
			pos:  position{line: 337, col: 1, offset: 9992},
			expr: &actionExpr{
				pos: position{line: 337, col: 17, offset: 10008},
				run: (*parser).callonClauseLevel41,
				expr: &seqExpr{
					pos: position{line: 337, col: 17, offset: 10008},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 337, col: 17, offset: 10008},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 337, col: 23, offset: 10014},
								name: "ClauseLevel3",
							},
						},
						&labeledExpr{
							pos:   position{line: 337, col: 36, offset: 10027},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 337, col: 41, offset: 10032},
								expr: &seqExpr{
									pos: position{line: 337, col: 42, offset: 10033},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 337, col: 43, offset: 10034},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 337, col: 43, offset: 10034},
													name: "AND",
												},
												&ruleRefExpr{
													pos:  position{line: 337, col: 49, offset: 10040},
													name: "SPACE",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 337, col: 56, offset: 10047},
											name: "ClauseLevel3",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel3",
			pos:  position{line: 355, col: 1, offset: 10424},
			expr: &actionExpr{
				pos: position{line: 355, col: 17, offset: 10440},
				run: (*parser).callonClauseLevel31,
				expr: &seqExpr{
					pos: position{line: 355, col: 17, offset: 10440},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 355, col: 17, offset: 10440},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 355, col: 23, offset: 10446},
								name: "ClauseLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 355, col: 36, offset: 10459},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 355, col: 41, offset: 10464},
								expr: &seqExpr{
									pos: position{line: 355, col: 42, offset: 10465},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 355, col: 42, offset: 10465},
											name: "OR",
										},
										&ruleRefExpr{
											pos:  position{line: 355, col: 45, offset: 10468},
											name: "ClauseLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel2",
			pos:  position{line: 373, col: 1, offset: 10833},
			expr: &choiceExpr{
				pos: position{line: 373, col: 17, offset: 10849},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 373, col: 17, offset: 10849},
						run: (*parser).callonClauseLevel22,
						expr: &seqExpr{
							pos: position{line: 373, col: 17, offset: 10849},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 373, col: 17, offset: 10849},
									label: "notList",
									expr: &oneOrMoreExpr{
										pos: position{line: 373, col: 25, offset: 10857},
										expr: &ruleRefExpr{
											pos:  position{line: 373, col: 25, offset: 10857},
											name: "NOT",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 373, col: 30, offset: 10862},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 373, col: 36, offset: 10868},
										name: "ClauseLevel1",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 384, col: 5, offset: 11164},
						run: (*parser).callonClauseLevel29,
						expr: &labeledExpr{
							pos:   position{line: 384, col: 5, offset: 11164},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 384, col: 12, offset: 11171},
								name: "ClauseLevel1",
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel1",
			pos:  position{line: 388, col: 1, offset: 11212},
			expr: &choiceExpr{
				pos: position{line: 388, col: 17, offset: 11228},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 388, col: 17, offset: 11228},
						run: (*parser).callonClauseLevel12,
						expr: &seqExpr{
							pos: position{line: 388, col: 17, offset: 11228},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 388, col: 17, offset: 11228},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 388, col: 25, offset: 11236},
									label: "clause",
									expr: &ruleRefExpr{
										pos:  position{line: 388, col: 32, offset: 11243},
										name: "ClauseLevel4",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 388, col: 45, offset: 11256},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 390, col: 5, offset: 11293},
						run: (*parser).callonClauseLevel18,
						expr: &labeledExpr{
							pos:   position{line: 390, col: 5, offset: 11293},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 390, col: 10, offset: 11298},
								name: "SearchTerm",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchTerm",
			pos:  position{line: 396, col: 1, offset: 11456},
			expr: &actionExpr{
				pos: position{line: 396, col: 15, offset: 11470},
				run: (*parser).callonSearchTerm1,
				expr: &labeledExpr{
					pos:   position{line: 396, col: 15, offset: 11470},
					label: "term",
					expr: &choiceExpr{
						pos: position{line: 396, col: 21, offset: 11476},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 396, col: 21, offset: 11476},
								name: "FieldWithNumberValue",
							},
							&ruleRefExpr{
								pos:  position{line: 396, col: 44, offset: 11499},
								name: "FieldWithStringValue",
							},
						},
					},
				},
			},
		},
		{
			name: "TimechartBlock",
			pos:  position{line: 401, col: 1, offset: 11640},
			expr: &actionExpr{
				pos: position{line: 401, col: 19, offset: 11658},
				run: (*parser).callonTimechartBlock1,
				expr: &seqExpr{
					pos: position{line: 401, col: 19, offset: 11658},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 401, col: 19, offset: 11658},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 401, col: 24, offset: 11663},
							name: "CMD_TIMECHART",
						},
						&labeledExpr{
							pos:   position{line: 401, col: 38, offset: 11677},
							label: "binOptions",
							expr: &zeroOrOneExpr{
								pos: position{line: 401, col: 49, offset: 11688},
								expr: &ruleRefExpr{
									pos:  position{line: 401, col: 50, offset: 11689},
									name: "BinOptions",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 401, col: 63, offset: 11702},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 401, col: 69, offset: 11708},
								name: "SingleAggExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 401, col: 84, offset: 11723},
							label: "limitExpr",
							expr: &zeroOrOneExpr{
								pos: position{line: 401, col: 94, offset: 11733},
								expr: &ruleRefExpr{
									pos:  position{line: 401, col: 95, offset: 11734},
									name: "LimitExpr",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleAggExpr",
			pos:  position{line: 462, col: 1, offset: 13775},
			expr: &actionExpr{
				pos: position{line: 462, col: 18, offset: 13792},
				run: (*parser).callonSingleAggExpr1,
				expr: &seqExpr{
					pos: position{line: 462, col: 18, offset: 13792},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 462, col: 18, offset: 13792},
							label: "aggs",
							expr: &ruleRefExpr{
								pos:  position{line: 462, col: 23, offset: 13797},
								name: "AggregationList",
							},
						},
						&labeledExpr{
							pos:   position{line: 462, col: 39, offset: 13813},
							label: "splitByClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 462, col: 53, offset: 13827},
								expr: &ruleRefExpr{
									pos:  position{line: 462, col: 54, offset: 13828},
									name: "SplitByClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SplitByClause",
			pos:  position{line: 476, col: 1, offset: 14168},
			expr: &actionExpr{
				pos: position{line: 476, col: 18, offset: 14185},
				run: (*parser).callonSplitByClause1,
				expr: &seqExpr{
					pos: position{line: 476, col: 18, offset: 14185},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 476, col: 18, offset: 14185},
							name: "BY",
						},
						&labeledExpr{
							pos:   position{line: 476, col: 21, offset: 14188},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 476, col: 27, offset: 14194},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 476, col: 37, offset: 14204},
							label: "tcOptions",
							expr: &zeroOrOneExpr{
								pos: position{line: 476, col: 47, offset: 14214},
								expr: &ruleRefExpr{
									pos:  position{line: 476, col: 48, offset: 14215},
									name: "TcOptions",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TcOptions",
			pos:  position{line: 487, col: 1, offset: 14443},
			expr: &actionExpr{
				pos: position{line: 487, col: 14, offset: 14456},
				run: (*parser).callonTcOptions1,
				expr: &seqExpr{
					pos: position{line: 487, col: 14, offset: 14456},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 487, col: 14, offset: 14456},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 487, col: 20, offset: 14462},
							label: "option",
							expr: &choiceExpr{
								pos: position{line: 487, col: 28, offset: 14470},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 487, col: 28, offset: 14470},
										name: "BinOptions",
									},
									&oneOrMoreExpr{
										pos: position{line: 487, col: 41, offset: 14483},
										expr: &ruleRefExpr{
											pos:  position{line: 487, col: 42, offset: 14484},
											name: "TcOption",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TcOption",
			pos:  position{line: 530, col: 1, offset: 16019},
			expr: &actionExpr{
				pos: position{line: 530, col: 13, offset: 16031},
				run: (*parser).callonTcOption1,
				expr: &seqExpr{
					pos: position{line: 530, col: 13, offset: 16031},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 530, col: 13, offset: 16031},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 530, col: 19, offset: 16037},
							label: "tcOptionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 530, col: 31, offset: 16049},
								name: "TcOptionCMD",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 530, col: 43, offset: 16061},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 530, col: 49, offset: 16067},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 530, col: 53, offset: 16071},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "TcOptionCMD",
			pos:  position{line: 535, col: 1, offset: 16184},
			expr: &actionExpr{
				pos: position{line: 535, col: 16, offset: 16199},
				run: (*parser).callonTcOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 535, col: 16, offset: 16199},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 535, col: 24, offset: 16207},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 535, col: 24, offset: 16207},
								val:        "usenull",
								ignoreCase: false,
								want:       "\"usenull\"",
							},
							&litMatcher{
								pos:        position{line: 535, col: 36, offset: 16219},
								val:        "useother",
								ignoreCase: false,
								want:       "\"useother\"",
							},
							&litMatcher{
								pos:        position{line: 535, col: 49, offset: 16232},
								val:        "nullstr",
								ignoreCase: false,
								want:       "\"nullstr\"",
							},
							&litMatcher{
								pos:        position{line: 535, col: 61, offset: 16244},
								val:        "otherstr",
								ignoreCase: false,
								want:       "\"otherstr\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BinOptions",
			pos:  position{line: 544, col: 1, offset: 16593},
			expr: &actionExpr{
				pos: position{line: 544, col: 15, offset: 16607},
				run: (*parser).callonBinOptions1,
				expr: &labeledExpr{
					pos:   position{line: 544, col: 15, offset: 16607},
					label: "spanOptions",
					expr: &ruleRefExpr{
						pos:  position{line: 544, col: 27, offset: 16619},
						name: "SpanOptions",
					},
				},
			},
		},
		{
			name: "SpanOptions",
			pos:  position{line: 552, col: 1, offset: 16844},
			expr: &actionExpr{
				pos: position{line: 552, col: 16, offset: 16859},
				run: (*parser).callonSpanOptions1,
				expr: &seqExpr{
					pos: position{line: 552, col: 16, offset: 16859},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 552, col: 16, offset: 16859},
							name: "CMD_SPAN",
						},
						&ruleRefExpr{
							pos:  position{line: 552, col: 25, offset: 16868},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 552, col: 31, offset: 16874},
							label: "spanLength",
							expr: &ruleRefExpr{
								pos:  position{line: 552, col: 42, offset: 16885},
								name: "SpanLength",
							},
						},
					},
				},
			},
		},
		{
			name: "SpanLength",
			pos:  position{line: 559, col: 1, offset: 17031},
			expr: &actionExpr{
				pos: position{line: 559, col: 15, offset: 17045},
				run: (*parser).callonSpanLength1,
				expr: &seqExpr{
					pos: position{line: 559, col: 15, offset: 17045},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 559, col: 15, offset: 17045},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 559, col: 24, offset: 17054},
								name: "IntegerAsString",
							},
						},
						&labeledExpr{
							pos:   position{line: 559, col: 40, offset: 17070},
							label: "timeScale",
							expr: &ruleRefExpr{
								pos:  position{line: 559, col: 50, offset: 17080},
								name: "TimeScale",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 559, col: 60, offset: 17090},
							name: "SPACE",
						},
					},
				},
			},
		},
		{
			name: "TimeScale",
			pos:  position{line: 572, col: 1, offset: 17404},
			expr: &actionExpr{
				pos: position{line: 572, col: 14, offset: 17417},
				run: (*parser).callonTimeScale1,
				expr: &labeledExpr{
					pos:   position{line: 572, col: 14, offset: 17417},
					label: "timeUnit",
					expr: &choiceExpr{
						pos: position{line: 572, col: 24, offset: 17427},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 572, col: 24, offset: 17427},
								name: "Second",
							},
							&ruleRefExpr{
								pos:  position{line: 572, col: 33, offset: 17436},
								name: "Minute",
							},
							&ruleRefExpr{
								pos:  position{line: 572, col: 42, offset: 17445},
								name: "Hour",
							},
							&ruleRefExpr{
								pos:  position{line: 572, col: 49, offset: 17452},
								name: "Day",
							},
							&ruleRefExpr{
								pos:  position{line: 572, col: 54, offset: 17457},
								name: "Week",
							},
							&ruleRefExpr{
								pos:  position{line: 572, col: 61, offset: 17464},
								name: "Month",
							},
							&ruleRefExpr{
								pos:  position{line: 572, col: 69, offset: 17472},
								name: "Quarter",
							},
							&ruleRefExpr{
								pos:  position{line: 572, col: 78, offset: 17481},
								name: "Subseconds",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitExpr",
			pos:  position{line: 577, col: 1, offset: 17603},
			expr: &actionExpr{
				pos: position{line: 577, col: 14, offset: 17616},
				run: (*parser).callonLimitExpr1,
				expr: &seqExpr{
					pos: position{line: 577, col: 14, offset: 17616},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 577, col: 14, offset: 17616},
							name: "SPACE",
						},
						&litMatcher{
							pos:        position{line: 577, col: 20, offset: 17622},
							val:        "limit",
							ignoreCase: false,
							want:       "\"limit\"",
						},
						&ruleRefExpr{
							pos:  position{line: 577, col: 28, offset: 17630},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 577, col: 34, offset: 17636},
							label: "sortBy",
							expr: &zeroOrOneExpr{
								pos: position{line: 577, col: 41, offset: 17643},
								expr: &choiceExpr{
									pos: position{line: 577, col: 42, offset: 17644},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 577, col: 42, offset: 17644},
											val:        "top",
											ignoreCase: false,
											want:       "\"top\"",
										},
										&litMatcher{
											pos:        position{line: 577, col: 50, offset: 17652},
											val:        "bottom",
											ignoreCase: false,
											want:       "\"bottom\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 577, col: 61, offset: 17663},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 577, col: 76, offset: 17678},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 577, col: 86, offset: 17688},
								name: "IntegerAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticBlock",
			pos:  position{line: 603, col: 1, offset: 18280},
			expr: &actionExpr{
				pos: position{line: 603, col: 19, offset: 18298},
				run: (*parser).callonStatisticBlock1,
				expr: &seqExpr{
					pos: position{line: 603, col: 19, offset: 18298},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 603, col: 19, offset: 18298},
							name: "PIPE",
						},
						&labeledExpr{
							pos:   position{line: 603, col: 24, offset: 18303},
							label: "statisticExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 38, offset: 18317},
								name: "StatisticExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticExpr",
			pos:  position{line: 636, col: 1, offset: 19295},
			expr: &actionExpr{
				pos: position{line: 636, col: 18, offset: 19312},
				run: (*parser).callonStatisticExpr1,
				expr: &seqExpr{
					pos: position{line: 636, col: 18, offset: 19312},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 636, col: 18, offset: 19312},
							label: "cmd",
							expr: &choiceExpr{
								pos: position{line: 636, col: 23, offset: 19317},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 636, col: 23, offset: 19317},
										name: "CMD_TOP",
									},
									&ruleRefExpr{
										pos:  position{line: 636, col: 33, offset: 19327},
										name: "CMD_RARE",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 636, col: 43, offset: 19337},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 636, col: 49, offset: 19343},
								expr: &ruleRefExpr{
									pos:  position{line: 636, col: 50, offset: 19344},
									name: "StatisticLimit",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 636, col: 67, offset: 19361},
							label: "fieldList",
							expr: &seqExpr{
								pos: position{line: 636, col: 78, offset: 19372},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 636, col: 78, offset: 19372},
										name: "SPACE",
									},
									&ruleRefExpr{
										pos:  position{line: 636, col: 84, offset: 19378},
										name: "FieldNameList",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 636, col: 99, offset: 19393},
							label: "byClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 636, col: 108, offset: 19402},
								expr: &ruleRefExpr{
									pos:  position{line: 636, col: 109, offset: 19403},
									name: "ByClause",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 636, col: 120, offset: 19414},
							label: "options",
							expr: &zeroOrOneExpr{
								pos: position{line: 636, col: 128, offset: 19422},
								expr: &ruleRefExpr{
									pos:  position{line: 636, col: 129, offset: 19423},
									name: "Options",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticLimit",
			pos:  position{line: 678, col: 1, offset: 20463},
			expr: &choiceExpr{
				pos: position{line: 678, col: 19, offset: 20481},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 678, col: 19, offset: 20481},
						run: (*parser).callonStatisticLimit2,
						expr: &seqExpr{
							pos: position{line: 678, col: 19, offset: 20481},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 678, col: 19, offset: 20481},
									name: "SPACE",
								},
								&labeledExpr{
									pos:   position{line: 678, col: 25, offset: 20487},
									label: "number",
									expr: &ruleRefExpr{
										pos:  position{line: 678, col: 32, offset: 20494},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 681, col: 3, offset: 20548},
						run: (*parser).callonStatisticLimit7,
						expr: &seqExpr{
							pos: position{line: 681, col: 3, offset: 20548},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 681, col: 3, offset: 20548},
									name: "SPACE",
								},
								&litMatcher{
									pos:        position{line: 681, col: 9, offset: 20554},
									val:        "limit",
									ignoreCase: false,
									want:       "\"limit\"",
								},
								&ruleRefExpr{
									pos:  position{line: 681, col: 17, offset: 20562},
									name: "EQUAL",
								},
								&labeledExpr{
									pos:   position{line: 681, col: 23, offset: 20568},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 681, col: 30, offset: 20575},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Options",
			pos:  position{line: 686, col: 1, offset: 20673},
			expr: &actionExpr{
				pos: position{line: 686, col: 12, offset: 20684},
				run: (*parser).callonOptions1,
				expr: &labeledExpr{
					pos:   position{line: 686, col: 12, offset: 20684},
					label: "option",
					expr: &zeroOrMoreExpr{
						pos: position{line: 686, col: 19, offset: 20691},
						expr: &ruleRefExpr{
							pos:  position{line: 686, col: 20, offset: 20692},
							name: "Option",
						},
					},
				},
			},
		},
		{
			name: "Option",
			pos:  position{line: 735, col: 1, offset: 22239},
			expr: &actionExpr{
				pos: position{line: 735, col: 11, offset: 22249},
				run: (*parser).callonOption1,
				expr: &seqExpr{
					pos: position{line: 735, col: 11, offset: 22249},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 735, col: 11, offset: 22249},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 735, col: 17, offset: 22255},
							label: "optionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 735, col: 27, offset: 22265},
								name: "OptionCMD",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 735, col: 37, offset: 22275},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 735, col: 43, offset: 22281},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 735, col: 49, offset: 22287},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "OptionCMD",
			pos:  position{line: 740, col: 1, offset: 22396},
			expr: &actionExpr{
				pos: position{line: 740, col: 14, offset: 22409},
				run: (*parser).callonOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 740, col: 14, offset: 22409},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 740, col: 22, offset: 22417},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 740, col: 22, offset: 22417},
								val:        "countfield",
								ignoreCase: false,
								want:       "\"countfield\"",
							},
							&litMatcher{
								pos:        position{line: 740, col: 37, offset: 22432},
								val:        "showcount",
								ignoreCase: false,
								want:       "\"showcount\"",
							},
							&litMatcher{
								pos:        position{line: 740, col: 51, offset: 22446},
								val:        "otherstr",
								ignoreCase: false,
								want:       "\"otherstr\"",
							},
							&litMatcher{
								pos:        position{line: 740, col: 64, offset: 22459},
								val:        "useother",
								ignoreCase: false,
								want:       "\"useother\"",
							},
							&litMatcher{
								pos:        position{line: 740, col: 76, offset: 22471},
								val:        "percentfield",
								ignoreCase: false,
								want:       "\"percentfield\"",
							},
							&litMatcher{
								pos:        position{line: 740, col: 93, offset: 22488},
								val:        "showperc",
								ignoreCase: false,
								want:       "\"showperc\"",
							},
						},
					},
				},
			},
		},
		{
			name: "ByClause",
			pos:  position{line: 748, col: 1, offset: 22675},
			expr: &choiceExpr{
				pos: position{line: 748, col: 13, offset: 22687},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 748, col: 13, offset: 22687},
						run: (*parser).callonByClause2,
						expr: &seqExpr{
							pos: position{line: 748, col: 13, offset: 22687},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 748, col: 13, offset: 22687},
									name: "BY",
								},
								&labeledExpr{
									pos:   position{line: 748, col: 16, offset: 22690},
									label: "fieldList",
									expr: &ruleRefExpr{
										pos:  position{line: 748, col: 26, offset: 22700},
										name: "FieldNameList",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 751, col: 3, offset: 22757},
						run: (*parser).callonByClause7,
						expr: &labeledExpr{
							pos:   position{line: 751, col: 3, offset: 22757},
							label: "groupByBlock",
							expr: &ruleRefExpr{
								pos:  position{line: 751, col: 16, offset: 22770},
								name: "GroupbyBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameBlock",
			pos:  position{line: 755, col: 1, offset: 22828},
			expr: &actionExpr{
				pos: position{line: 755, col: 16, offset: 22843},
				run: (*parser).callonRenameBlock1,
				expr: &seqExpr{
					pos: position{line: 755, col: 16, offset: 22843},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 755, col: 16, offset: 22843},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 755, col: 21, offset: 22848},
							name: "CMD_RENAME",
						},
						&labeledExpr{
							pos:   position{line: 755, col: 32, offset: 22859},
							label: "renameExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 755, col: 43, offset: 22870},
								name: "RenameExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameExpr",
			pos:  position{line: 771, col: 1, offset: 23245},
			expr: &choiceExpr{
				pos: position{line: 771, col: 15, offset: 23259},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 771, col: 15, offset: 23259},
						run: (*parser).callonRenameExpr2,
						expr: &seqExpr{
							pos: position{line: 771, col: 15, offset: 23259},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 771, col: 15, offset: 23259},
									label: "originalPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 771, col: 31, offset: 23275},
										name: "RenamePattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 771, col: 45, offset: 23289},
									name: "AS",
								},
								&labeledExpr{
									pos:   position{line: 771, col: 48, offset: 23292},
									label: "newPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 771, col: 59, offset: 23303},
										name: "QuotedString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 782, col: 3, offset: 23622},
						run: (*parser).callonRenameExpr9,
						expr: &seqExpr{
							pos: position{line: 782, col: 3, offset: 23622},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 782, col: 3, offset: 23622},
									label: "originalPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 782, col: 19, offset: 23638},
										name: "RenamePattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 782, col: 33, offset: 23652},
									name: "AS",
								},
								&labeledExpr{
									pos:   position{line: 782, col: 36, offset: 23655},
									label: "newPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 782, col: 47, offset: 23666},
										name: "RenamePattern",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RexBlock",
			pos:  position{line: 804, col: 1, offset: 24232},
			expr: &actionExpr{
				pos: position{line: 804, col: 13, offset: 24244},
				run: (*parser).callonRexBlock1,
				expr: &seqExpr{
					pos: position{line: 804, col: 13, offset: 24244},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 804, col: 13, offset: 24244},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 804, col: 18, offset: 24249},
							name: "CMD_REX",
						},
						&litMatcher{
							pos:        position{line: 804, col: 26, offset: 24257},
							val:        "field",
							ignoreCase: false,
							want:       "\"field\"",
						},
						&ruleRefExpr{
							pos:  position{line: 804, col: 34, offset: 24265},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 804, col: 40, offset: 24271},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 804, col: 46, offset: 24277},
								name: "EvalFieldToRead",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 804, col: 62, offset: 24293},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 804, col: 68, offset: 24299},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 804, col: 72, offset: 24303},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "EvalBlock",
			pos:  position{line: 831, col: 1, offset: 24988},
			expr: &actionExpr{
				pos: position{line: 831, col: 14, offset: 25001},
				run: (*parser).callonEvalBlock1,
				expr: &seqExpr{
					pos: position{line: 831, col: 14, offset: 25001},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 831, col: 14, offset: 25001},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 831, col: 19, offset: 25006},
							name: "CMD_EVAL",
						},
						&labeledExpr{
							pos:   position{line: 831, col: 28, offset: 25015},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 831, col: 34, offset: 25021},
								name: "SingleEval",
							},
						},
						&labeledExpr{
							pos:   position{line: 831, col: 45, offset: 25032},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 831, col: 50, offset: 25037},
								expr: &seqExpr{
									pos: position{line: 831, col: 51, offset: 25038},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 831, col: 51, offset: 25038},
											name: "COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 831, col: 57, offset: 25044},
											name: "SingleEval",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleEval",
			pos:  position{line: 858, col: 1, offset: 25845},
			expr: &actionExpr{
				pos: position{line: 858, col: 15, offset: 25859},
				run: (*parser).callonSingleEval1,
				expr: &seqExpr{
					pos: position{line: 858, col: 15, offset: 25859},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 858, col: 15, offset: 25859},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 858, col: 21, offset: 25865},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 858, col: 31, offset: 25875},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 858, col: 37, offset: 25881},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 858, col: 42, offset: 25886},
								name: "EvalExpression",
							},
						},
					},
				},
			},
		},
		{
			name: "EvalExpression",
			pos:  position{line: 871, col: 1, offset: 26287},
			expr: &actionExpr{
				pos: position{line: 871, col: 19, offset: 26305},
				run: (*parser).callonEvalExpression1,
				expr: &labeledExpr{
					pos:   position{line: 871, col: 19, offset: 26305},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 871, col: 25, offset: 26311},
						name: "ValueExpr",
					},
				},
			},
		},
		{
			name: "ConditionExpr",
			pos:  position{line: 879, col: 1, offset: 26458},
			expr: &actionExpr{
				pos: position{line: 879, col: 18, offset: 26475},
				run: (*parser).callonConditionExpr1,
				expr: &seqExpr{
					pos: position{line: 879, col: 18, offset: 26475},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 879, col: 18, offset: 26475},
							val:        "if",
							ignoreCase: false,
							want:       "\"if\"",
						},
						&ruleRefExpr{
							pos:  position{line: 879, col: 23, offset: 26480},
							name: "L_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 879, col: 31, offset: 26488},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 879, col: 41, offset: 26498},
								name: "BoolExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 879, col: 50, offset: 26507},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 879, col: 56, offset: 26513},
							label: "trueValue",
							expr: &ruleRefExpr{
								pos:  position{line: 879, col: 66, offset: 26523},
								name: "ValueExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 879, col: 76, offset: 26533},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 879, col: 82, offset: 26539},
							label: "falseValue",
							expr: &ruleRefExpr{
								pos:  position{line: 879, col: 93, offset: 26550},
								name: "ValueExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 879, col: 103, offset: 26560},
							name: "R_PAREN",
						},
					},
				},
			},
		},
		{
			name: "TextExpr",
			pos:  position{line: 891, col: 1, offset: 26810},
			expr: &choiceExpr{
				pos: position{line: 891, col: 13, offset: 26822},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 891, col: 13, offset: 26822},
						run: (*parser).callonTextExpr2,
						expr: &seqExpr{
							pos: position{line: 891, col: 14, offset: 26823},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 891, col: 14, offset: 26823},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 891, col: 22, offset: 26831},
										val:        "lower",
										ignoreCase: false,
										want:       "\"lower\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 891, col: 31, offset: 26840},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 891, col: 39, offset: 26848},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 891, col: 50, offset: 26859},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 891, col: 61, offset: 26870},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 905, col: 3, offset: 27182},
						run: (*parser).callonTextExpr10,
						expr: &seqExpr{
							pos: position{line: 905, col: 4, offset: 27183},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 905, col: 4, offset: 27183},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 905, col: 12, offset: 27191},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 905, col: 12, offset: 27191},
												val:        "max",
												ignoreCase: false,
												want:       "\"max\"",
											},
											&litMatcher{
												pos:        position{line: 905, col: 20, offset: 27199},
												val:        "min",
												ignoreCase: false,
												want:       "\"min\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 905, col: 27, offset: 27206},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 905, col: 35, offset: 27214},
									label: "firstVal",
									expr: &ruleRefExpr{
										pos:  position{line: 905, col: 44, offset: 27223},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 905, col: 55, offset: 27234},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 905, col: 60, offset: 27239},
										expr: &seqExpr{
											pos: position{line: 905, col: 61, offset: 27240},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 905, col: 61, offset: 27240},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 905, col: 67, offset: 27246},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 905, col: 80, offset: 27259},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 928, col: 3, offset: 27953},
						run: (*parser).callonTextExpr25,
						expr: &seqExpr{
							pos: position{line: 928, col: 4, offset: 27954},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 928, col: 4, offset: 27954},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 928, col: 12, offset: 27962},
										val:        "urldecode",
										ignoreCase: false,
										want:       "\"urldecode\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 928, col: 25, offset: 27975},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 928, col: 33, offset: 27983},
									label: "url",
									expr: &ruleRefExpr{
										pos:  position{line: 928, col: 37, offset: 27987},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 928, col: 48, offset: 27998},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 940, col: 3, offset: 28337},
						run: (*parser).callonTextExpr33,
						expr: &seqExpr{
							pos: position{line: 940, col: 4, offset: 28338},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 940, col: 4, offset: 28338},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 940, col: 12, offset: 28346},
										val:        "split",
										ignoreCase: false,
										want:       "\"split\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 940, col: 21, offset: 28355},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 940, col: 29, offset: 28363},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 940, col: 40, offset: 28374},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 940, col: 51, offset: 28385},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 940, col: 57, offset: 28391},
									label: "delim",
									expr: &ruleRefExpr{
										pos:  position{line: 940, col: 63, offset: 28397},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 940, col: 74, offset: 28408},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 952, col: 3, offset: 28741},
						run: (*parser).callonTextExpr44,
						expr: &seqExpr{
							pos: position{line: 952, col: 4, offset: 28742},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 952, col: 4, offset: 28742},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 952, col: 12, offset: 28750},
										val:        "substr",
										ignoreCase: false,
										want:       "\"substr\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 952, col: 22, offset: 28760},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 952, col: 30, offset: 28768},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 952, col: 41, offset: 28779},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 952, col: 52, offset: 28790},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 952, col: 58, offset: 28796},
									label: "startIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 952, col: 69, offset: 28807},
										name: "NumericExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 952, col: 81, offset: 28819},
									label: "lengthParam",
									expr: &zeroOrOneExpr{
										pos: position{line: 952, col: 93, offset: 28831},
										expr: &seqExpr{
											pos: position{line: 952, col: 94, offset: 28832},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 952, col: 94, offset: 28832},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 952, col: 100, offset: 28838},
													name: "NumericExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 952, col: 114, offset: 28852},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 986, col: 3, offset: 30038},
						run: (*parser).callonTextExpr60,
						expr: &seqExpr{
							pos: position{line: 986, col: 3, offset: 30038},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 986, col: 3, offset: 30038},
									val:        "tostring",
									ignoreCase: false,
									want:       "\"tostring\"",
								},
								&ruleRefExpr{
									pos:  position{line: 986, col: 14, offset: 30049},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 986, col: 22, offset: 30057},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 986, col: 28, offset: 30063},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 986, col: 38, offset: 30073},
									label: "format",
									expr: &zeroOrOneExpr{
										pos: position{line: 986, col: 45, offset: 30080},
										expr: &seqExpr{
											pos: position{line: 986, col: 46, offset: 30081},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 986, col: 46, offset: 30081},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 986, col: 52, offset: 30087},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 986, col: 66, offset: 30101},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 999, col: 3, offset: 30471},
						run: (*parser).callonTextExpr72,
						expr: &seqExpr{
							pos: position{line: 999, col: 4, offset: 30472},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 999, col: 4, offset: 30472},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 999, col: 12, offset: 30480},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 999, col: 12, offset: 30480},
												val:        "ltrim",
												ignoreCase: false,
												want:       "\"ltrim\"",
											},
											&litMatcher{
												pos:        position{line: 999, col: 22, offset: 30490},
												val:        "rtrim",
												ignoreCase: false,
												want:       "\"rtrim\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 999, col: 31, offset: 30499},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 999, col: 39, offset: 30507},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 999, col: 45, offset: 30513},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 999, col: 57, offset: 30525},
									label: "strToRemoveExpr",
									expr: &zeroOrOneExpr{
										pos: position{line: 999, col: 73, offset: 30541},
										expr: &ruleRefExpr{
											pos:  position{line: 999, col: 74, offset: 30542},
											name: "StrToRemoveExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 999, col: 92, offset: 30560},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StrToRemoveExpr",
			pos:  position{line: 1024, col: 1, offset: 31163},
			expr: &actionExpr{
				pos: position{line: 1024, col: 20, offset: 31182},
				run: (*parser).callonStrToRemoveExpr1,
				expr: &seqExpr{
					pos: position{line: 1024, col: 20, offset: 31182},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1024, col: 20, offset: 31182},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 1024, col: 26, offset: 31188},
							label: "strToRemove",
							expr: &ruleRefExpr{
								pos:  position{line: 1024, col: 38, offset: 31200},
								name: "String",
							},
						},
					},
				},
			},
		},
		{
			name: "EvalFieldToRead",
			pos:  position{line: 1030, col: 1, offset: 31385},
			expr: &choiceExpr{
				pos: position{line: 1030, col: 20, offset: 31404},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1030, col: 20, offset: 31404},
						run: (*parser).callonEvalFieldToRead2,
						expr: &seqExpr{
							pos: position{line: 1030, col: 20, offset: 31404},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 1030, col: 20, offset: 31404},
									expr: &charClassMatcher{
										pos:        position{line: 1030, col: 20, offset: 31404},
										val:        "[a-zA-Z_]",
										chars:      []rune{'_'},
										ranges:     []rune{'a', 'z', 'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&notExpr{
									pos: position{line: 1030, col: 31, offset: 31415},
									expr: &litMatcher{
										pos:        position{line: 1030, col: 33, offset: 31417},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1033, col: 3, offset: 31459},
						run: (*parser).callonEvalFieldToRead8,
						expr: &seqExpr{
							pos: position{line: 1033, col: 3, offset: 31459},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1033, col: 3, offset: 31459},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&labeledExpr{
									pos:   position{line: 1033, col: 7, offset: 31463},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1033, col: 13, offset: 31469},
										name: "FieldName",
									},
								},
								&litMatcher{
									pos:        position{line: 1033, col: 23, offset: 31479},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "WhereBlock",
			pos:  position{line: 1038, col: 1, offset: 31547},
			expr: &actionExpr{
				pos: position{line: 1038, col: 15, offset: 31561},
				run: (*parser).callonWhereBlock1,
				expr: &seqExpr{
					pos: position{line: 1038, col: 15, offset: 31561},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1038, col: 15, offset: 31561},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1038, col: 20, offset: 31566},
							name: "CMD_WHERE",
						},
						&labeledExpr{
							pos:   position{line: 1038, col: 30, offset: 31576},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 1038, col: 40, offset: 31586},
								name: "BoolExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExpr",
			pos:  position{line: 1050, col: 1, offset: 31879},
			expr: &actionExpr{
				pos: position{line: 1050, col: 13, offset: 31891},
				run: (*parser).callonBoolExpr1,
				expr: &labeledExpr{
					pos:   position{line: 1050, col: 13, offset: 31891},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 1050, col: 18, offset: 31896},
						name: "BoolExprLevel4",
					},
				},
			},
		},
		{
			name: "BoolExprLevel4",
			pos:  position{line: 1055, col: 1, offset: 31966},
			expr: &actionExpr{
				pos: position{line: 1055, col: 19, offset: 31984},
				run: (*parser).callonBoolExprLevel41,
				expr: &seqExpr{
					pos: position{line: 1055, col: 19, offset: 31984},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1055, col: 19, offset: 31984},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1055, col: 25, offset: 31990},
								name: "BoolExprLevel3",
							},
						},
						&labeledExpr{
							pos:   position{line: 1055, col: 40, offset: 32005},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1055, col: 45, offset: 32010},
								expr: &seqExpr{
									pos: position{line: 1055, col: 46, offset: 32011},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1055, col: 46, offset: 32011},
											name: "OR",
										},
										&ruleRefExpr{
											pos:  position{line: 1055, col: 49, offset: 32014},
											name: "BoolExprLevel3",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel3",
			pos:  position{line: 1075, col: 1, offset: 32452},
			expr: &actionExpr{
				pos: position{line: 1075, col: 19, offset: 32470},
				run: (*parser).callonBoolExprLevel31,
				expr: &seqExpr{
					pos: position{line: 1075, col: 19, offset: 32470},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1075, col: 19, offset: 32470},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1075, col: 25, offset: 32476},
								name: "BoolExprLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 1075, col: 40, offset: 32491},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1075, col: 45, offset: 32496},
								expr: &seqExpr{
									pos: position{line: 1075, col: 46, offset: 32497},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1075, col: 46, offset: 32497},
											name: "AND",
										},
										&ruleRefExpr{
											pos:  position{line: 1075, col: 50, offset: 32501},
											name: "BoolExprLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel2",
			pos:  position{line: 1095, col: 1, offset: 32940},
			expr: &choiceExpr{
				pos: position{line: 1095, col: 19, offset: 32958},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1095, col: 19, offset: 32958},
						run: (*parser).callonBoolExprLevel22,
						expr: &seqExpr{
							pos: position{line: 1095, col: 19, offset: 32958},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1095, col: 19, offset: 32958},
									name: "NOT",
								},
								&ruleRefExpr{
									pos:  position{line: 1095, col: 23, offset: 32962},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1095, col: 31, offset: 32970},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 1095, col: 37, offset: 32976},
										name: "BoolExprLevel1",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1095, col: 52, offset: 32991},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1105, col: 3, offset: 33194},
						run: (*parser).callonBoolExprLevel29,
						expr: &labeledExpr{
							pos:   position{line: 1105, col: 3, offset: 33194},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1105, col: 9, offset: 33200},
								name: "BoolExprLevel1",
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel1",
			pos:  position{line: 1110, col: 1, offset: 33271},
			expr: &choiceExpr{
				pos: position{line: 1110, col: 19, offset: 33289},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1110, col: 19, offset: 33289},
						run: (*parser).callonBoolExprLevel12,
						expr: &seqExpr{
							pos: position{line: 1110, col: 19, offset: 33289},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1110, col: 19, offset: 33289},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1110, col: 27, offset: 33297},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 1110, col: 33, offset: 33303},
										name: "BoolExprLevel4",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1110, col: 48, offset: 33318},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1113, col: 3, offset: 33354},
						run: (*parser).callonBoolExprLevel18,
						expr: &seqExpr{
							pos: position{line: 1113, col: 4, offset: 33355},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1113, col: 4, offset: 33355},
									label: "op",
									expr: &choiceExpr{
										pos: position{line: 1113, col: 8, offset: 33359},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1113, col: 8, offset: 33359},
												val:        "isbool",
												ignoreCase: false,
												want:       "\"isbool\"",
											},
											&litMatcher{
												pos:        position{line: 1113, col: 19, offset: 33370},
												val:        "isint",
												ignoreCase: false,
												want:       "\"isint\"",
											},
											&litMatcher{
												pos:        position{line: 1113, col: 29, offset: 33380},
												val:        "isstr",
												ignoreCase: false,
												want:       "\"isstr\"",
											},
											&litMatcher{
												pos:        position{line: 1113, col: 39, offset: 33390},
												val:        "isnull",
												ignoreCase: false,
												want:       "\"isnull\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1113, col: 49, offset: 33400},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1113, col: 57, offset: 33408},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 1113, col: 63, offset: 33414},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1113, col: 73, offset: 33424},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1126, col: 3, offset: 33760},
						run: (*parser).callonBoolExprLevel120,
						expr: &labeledExpr{
							pos:   position{line: 1126, col: 3, offset: 33760},
							label: "likeExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 1126, col: 13, offset: 33770},
								name: "LikeExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "LikeExpr",
			pos:  position{line: 1129, col: 1, offset: 33808},
			expr: &choiceExpr{
				pos: position{line: 1129, col: 13, offset: 33820},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1129, col: 13, offset: 33820},
						run: (*parser).callonLikeExpr2,
						expr: &seqExpr{
							pos: position{line: 1129, col: 13, offset: 33820},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1129, col: 13, offset: 33820},
									label: "left",
									expr: &ruleRefExpr{
										pos:  position{line: 1129, col: 18, offset: 33825},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1129, col: 28, offset: 33835},
									name: "SPACE",
								},
								&litMatcher{
									pos:        position{line: 1129, col: 34, offset: 33841},
									val:        "LIKE",
									ignoreCase: false,
									want:       "\"LIKE\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1129, col: 41, offset: 33848},
									name: "SPACE",
								},
								&labeledExpr{
									pos:   position{line: 1129, col: 47, offset: 33854},
									label: "right",
									expr: &ruleRefExpr{
										pos:  position{line: 1129, col: 53, offset: 33860},
										name: "ValueExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1138, col: 3, offset: 34080},
						run: (*parser).callonLikeExpr11,
						expr: &seqExpr{
							pos: position{line: 1138, col: 3, offset: 34080},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1138, col: 3, offset: 34080},
									val:        "like",
									ignoreCase: false,
									want:       "\"like\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1138, col: 10, offset: 34087},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1138, col: 18, offset: 34095},
									label: "stringr",
									expr: &ruleRefExpr{
										pos:  position{line: 1138, col: 26, offset: 34103},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1138, col: 36, offset: 34113},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1138, col: 42, offset: 34119},
									label: "pattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1138, col: 50, offset: 34127},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1138, col: 60, offset: 34137},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1147, col: 3, offset: 34368},
						run: (*parser).callonLikeExpr21,
						expr: &seqExpr{
							pos: position{line: 1147, col: 3, offset: 34368},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1147, col: 3, offset: 34368},
									val:        "match",
									ignoreCase: false,
									want:       "\"match\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1147, col: 11, offset: 34376},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1147, col: 19, offset: 34384},
									label: "stringVal",
									expr: &ruleRefExpr{
										pos:  position{line: 1147, col: 29, offset: 34394},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1147, col: 39, offset: 34404},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1147, col: 45, offset: 34410},
									label: "pattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1147, col: 53, offset: 34418},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1147, col: 63, offset: 34428},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1156, col: 3, offset: 34662},
						run: (*parser).callonLikeExpr31,
						expr: &seqExpr{
							pos: position{line: 1156, col: 3, offset: 34662},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1156, col: 3, offset: 34662},
									val:        "cidrmatch",
									ignoreCase: false,
									want:       "\"cidrmatch\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1156, col: 15, offset: 34674},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1156, col: 23, offset: 34682},
									label: "cidr",
									expr: &ruleRefExpr{
										pos:  position{line: 1156, col: 28, offset: 34687},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1156, col: 38, offset: 34697},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1156, col: 44, offset: 34703},
									label: "ip",
									expr: &ruleRefExpr{
										pos:  position{line: 1156, col: 47, offset: 34706},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1156, col: 57, offset: 34716},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1165, col: 3, offset: 34936},
						run: (*parser).callonLikeExpr41,
						expr: &labeledExpr{
							pos:   position{line: 1165, col: 3, offset: 34936},
							label: "inExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 1165, col: 11, offset: 34944},
								name: "InExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1168, col: 3, offset: 34980},
						run: (*parser).callonLikeExpr44,
						expr: &labeledExpr{
							pos:   position{line: 1168, col: 3, offset: 34980},
							label: "boolComparisonExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 1168, col: 22, offset: 34999},
								name: "BoolComparisonExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "BoolComparisonExpr",
			pos:  position{line: 1172, col: 1, offset: 35058},
			expr: &actionExpr{
				pos: position{line: 1172, col: 23, offset: 35080},
				run: (*parser).callonBoolComparisonExpr1,
				expr: &seqExpr{
					pos: position{line: 1172, col: 23, offset: 35080},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1172, col: 23, offset: 35080},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 1172, col: 28, offset: 35085},
								name: "ValueExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 1172, col: 38, offset: 35095},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 1172, col: 41, offset: 35098},
								name: "EqualityOrInequality",
							},
						},
						&labeledExpr{
							pos:   position{line: 1172, col: 62, offset: 35119},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 1172, col: 68, offset: 35125},
								name: "ValueExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "InExpr",
			pos:  position{line: 1184, col: 1, offset: 35351},
			expr: &choiceExpr{
				pos: position{line: 1184, col: 11, offset: 35361},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1184, col: 11, offset: 35361},
						run: (*parser).callonInExpr2,
						expr: &seqExpr{
							pos: position{line: 1184, col: 11, offset: 35361},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1184, col: 11, offset: 35361},
									label: "left",
									expr: &ruleRefExpr{
										pos:  position{line: 1184, col: 16, offset: 35366},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1184, col: 26, offset: 35376},
									name: "SPACE",
								},
								&litMatcher{
									pos:        position{line: 1184, col: 32, offset: 35382},
									val:        "in",
									ignoreCase: false,
									want:       "\"in\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1184, col: 37, offset: 35387},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1184, col: 45, offset: 35395},
									label: "valueToJudge",
									expr: &ruleRefExpr{
										pos:  position{line: 1184, col: 58, offset: 35408},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1184, col: 68, offset: 35418},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1184, col: 73, offset: 35423},
										expr: &seqExpr{
											pos: position{line: 1184, col: 74, offset: 35424},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1184, col: 74, offset: 35424},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1184, col: 80, offset: 35430},
													name: "ValueExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1184, col: 92, offset: 35442},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1203, col: 3, offset: 35993},
						run: (*parser).callonInExpr17,
						expr: &seqExpr{
							pos: position{line: 1203, col: 3, offset: 35993},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1203, col: 3, offset: 35993},
									val:        "in",
									ignoreCase: false,
									want:       "\"in\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1203, col: 8, offset: 35998},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1203, col: 16, offset: 36006},
									label: "valueToJudge",
									expr: &ruleRefExpr{
										pos:  position{line: 1203, col: 29, offset: 36019},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1203, col: 39, offset: 36029},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1203, col: 44, offset: 36034},
										expr: &seqExpr{
											pos: position{line: 1203, col: 45, offset: 36035},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1203, col: 45, offset: 36035},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1203, col: 51, offset: 36041},
													name: "ValueExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1203, col: 63, offset: 36053},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ValueExpr",
			pos:  position{line: 1228, col: 1, offset: 36843},
			expr: &choiceExpr{
				pos: position{line: 1228, col: 14, offset: 36856},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1228, col: 14, offset: 36856},
						run: (*parser).callonValueExpr2,
						expr: &labeledExpr{
							pos:   position{line: 1228, col: 14, offset: 36856},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 1228, col: 24, offset: 36866},
								name: "ConditionExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1237, col: 3, offset: 37056},
						run: (*parser).callonValueExpr5,
						expr: &seqExpr{
							pos: position{line: 1237, col: 3, offset: 37056},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1237, col: 3, offset: 37056},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1237, col: 12, offset: 37065},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 1237, col: 22, offset: 37075},
										name: "ConditionExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1237, col: 37, offset: 37090},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1246, col: 3, offset: 37274},
						run: (*parser).callonValueExpr11,
						expr: &labeledExpr{
							pos:   position{line: 1246, col: 3, offset: 37274},
							label: "numeric",
							expr: &ruleRefExpr{
								pos:  position{line: 1246, col: 11, offset: 37282},
								name: "NumericExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1255, col: 3, offset: 37462},
						run: (*parser).callonValueExpr14,
						expr: &labeledExpr{
							pos:   position{line: 1255, col: 3, offset: 37462},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 1255, col: 7, offset: 37466},
								name: "StringExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1264, col: 3, offset: 37638},
						run: (*parser).callonValueExpr17,
						expr: &seqExpr{
							pos: position{line: 1264, col: 3, offset: 37638},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1264, col: 3, offset: 37638},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1264, col: 12, offset: 37647},
									label: "str",
									expr: &ruleRefExpr{
										pos:  position{line: 1264, col: 16, offset: 37651},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1264, col: 28, offset: 37663},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1273, col: 3, offset: 37832},
						run: (*parser).callonValueExpr23,
						expr: &seqExpr{
							pos: position{line: 1273, col: 3, offset: 37832},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1273, col: 3, offset: 37832},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1273, col: 11, offset: 37840},
									label: "boolean",
									expr: &ruleRefExpr{
										pos:  position{line: 1273, col: 19, offset: 37848},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1273, col: 28, offset: 37857},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StringExpr",
			pos:  position{line: 1283, col: 1, offset: 38038},
			expr: &choiceExpr{
				pos: position{line: 1283, col: 15, offset: 38052},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1283, col: 15, offset: 38052},
						run: (*parser).callonStringExpr2,
						expr: &seqExpr{
							pos: position{line: 1283, col: 15, offset: 38052},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1283, col: 15, offset: 38052},
									label: "text",
									expr: &ruleRefExpr{
										pos:  position{line: 1283, col: 20, offset: 38057},
										name: "TextExpr",
									},
								},
								&notExpr{
									pos: position{line: 1283, col: 29, offset: 38066},
									expr: &ruleRefExpr{
										pos:  position{line: 1283, col: 31, offset: 38068},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1291, col: 3, offset: 38238},
						run: (*parser).callonStringExpr8,
						expr: &seqExpr{
							pos: position{line: 1291, col: 3, offset: 38238},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1291, col: 3, offset: 38238},
									label: "str",
									expr: &ruleRefExpr{
										pos:  position{line: 1291, col: 7, offset: 38242},
										name: "QuotedString",
									},
								},
								&notExpr{
									pos: position{line: 1291, col: 20, offset: 38255},
									expr: &ruleRefExpr{
										pos:  position{line: 1291, col: 22, offset: 38257},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1299, col: 3, offset: 38422},
						run: (*parser).callonStringExpr14,
						expr: &seqExpr{
							pos: position{line: 1299, col: 3, offset: 38422},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1299, col: 3, offset: 38422},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1299, col: 9, offset: 38428},
										name: "EvalFieldToRead",
									},
								},
								&notExpr{
									pos: position{line: 1299, col: 25, offset: 38444},
									expr: &choiceExpr{
										pos: position{line: 1299, col: 27, offset: 38446},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 1299, col: 27, offset: 38446},
												name: "OpPlus",
											},
											&ruleRefExpr{
												pos:  position{line: 1299, col: 36, offset: 38455},
												name: "OpMinus",
											},
											&ruleRefExpr{
												pos:  position{line: 1299, col: 46, offset: 38465},
												name: "OpMul",
											},
											&ruleRefExpr{
												pos:  position{line: 1299, col: 54, offset: 38473},
												name: "OpDiv",
											},
											&ruleRefExpr{
												pos:  position{line: 1299, col: 62, offset: 38481},
												name: "EVAL_CONCAT",
											},
											&litMatcher{
												pos:        position{line: 1299, col: 76, offset: 38495},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1307, col: 3, offset: 38645},
						run: (*parser).callonStringExpr26,
						expr: &labeledExpr{
							pos:   position{line: 1307, col: 3, offset: 38645},
							label: "concat",
							expr: &ruleRefExpr{
								pos:  position{line: 1307, col: 10, offset: 38652},
								name: "ConcatExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "ConcatExpr",
			pos:  position{line: 1317, col: 1, offset: 38858},
			expr: &actionExpr{
				pos: position{line: 1317, col: 15, offset: 38872},
				run: (*parser).callonConcatExpr1,
				expr: &seqExpr{
					pos: position{line: 1317, col: 15, offset: 38872},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1317, col: 15, offset: 38872},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1317, col: 21, offset: 38878},
								name: "ConcatAtom",
							},
						},
						&labeledExpr{
							pos:   position{line: 1317, col: 32, offset: 38889},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1317, col: 37, offset: 38894},
								expr: &seqExpr{
									pos: position{line: 1317, col: 38, offset: 38895},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1317, col: 38, offset: 38895},
											name: "EVAL_CONCAT",
										},
										&ruleRefExpr{
											pos:  position{line: 1317, col: 50, offset: 38907},
											name: "ConcatAtom",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 1317, col: 63, offset: 38920},
							expr: &choiceExpr{
								pos: position{line: 1317, col: 65, offset: 38922},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1317, col: 65, offset: 38922},
										name: "OpPlus",
									},
									&ruleRefExpr{
										pos:  position{line: 1317, col: 74, offset: 38931},
										name: "OpMinus",
									},
									&ruleRefExpr{
										pos:  position{line: 1317, col: 84, offset: 38941},
										name: "OpMul",
									},
									&ruleRefExpr{
										pos:  position{line: 1317, col: 92, offset: 38949},
										name: "OpDiv",
									},
									&litMatcher{
										pos:        position{line: 1317, col: 100, offset: 38957},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcatAtom",
			pos:  position{line: 1335, col: 1, offset: 39363},
			expr: &choiceExpr{
				pos: position{line: 1335, col: 15, offset: 39377},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1335, col: 15, offset: 39377},
						run: (*parser).callonConcatAtom2,
						expr: &labeledExpr{
							pos:   position{line: 1335, col: 15, offset: 39377},
							label: "text",
							expr: &ruleRefExpr{
								pos:  position{line: 1335, col: 20, offset: 39382},
								name: "TextExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1344, col: 3, offset: 39546},
						run: (*parser).callonConcatAtom5,
						expr: &labeledExpr{
							pos:   position{line: 1344, col: 3, offset: 39546},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 1344, col: 7, offset: 39550},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1352, col: 3, offset: 39689},
						run: (*parser).callonConcatAtom8,
						expr: &labeledExpr{
							pos:   position{line: 1352, col: 3, offset: 39689},
							label: "number",
							expr: &ruleRefExpr{
								pos:  position{line: 1352, col: 10, offset: 39696},
								name: "NumberAsString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1360, col: 3, offset: 39835},
						run: (*parser).callonConcatAtom11,
						expr: &labeledExpr{
							pos:   position{line: 1360, col: 3, offset: 39835},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1360, col: 9, offset: 39841},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExpr",
			pos:  position{line: 1370, col: 1, offset: 40010},
			expr: &actionExpr{
				pos: position{line: 1370, col: 16, offset: 40025},
				run: (*parser).callonNumericExpr1,
				expr: &seqExpr{
					pos: position{line: 1370, col: 16, offset: 40025},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1370, col: 16, offset: 40025},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 1370, col: 21, offset: 40030},
								name: "NumericExprLevel3",
							},
						},
						&notExpr{
							pos: position{line: 1370, col: 39, offset: 40048},
							expr: &choiceExpr{
								pos: position{line: 1370, col: 41, offset: 40050},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1370, col: 41, offset: 40050},
										name: "EVAL_CONCAT",
									},
									&litMatcher{
										pos:        position{line: 1370, col: 55, offset: 40064},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel3",
			pos:  position{line: 1375, col: 1, offset: 40129},
			expr: &actionExpr{
				pos: position{line: 1375, col: 22, offset: 40150},
				run: (*parser).callonNumericExprLevel31,
				expr: &seqExpr{
					pos: position{line: 1375, col: 22, offset: 40150},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1375, col: 22, offset: 40150},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1375, col: 28, offset: 40156},
								name: "NumericExprLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 1375, col: 46, offset: 40174},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1375, col: 51, offset: 40179},
								expr: &seqExpr{
									pos: position{line: 1375, col: 52, offset: 40180},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 1375, col: 53, offset: 40181},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 1375, col: 53, offset: 40181},
													name: "OpPlus",
												},
												&ruleRefExpr{
													pos:  position{line: 1375, col: 62, offset: 40190},
													name: "OpMinus",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1375, col: 71, offset: 40199},
											name: "NumericExprLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel2",
			pos:  position{line: 1396, col: 1, offset: 40700},
			expr: &actionExpr{
				pos: position{line: 1396, col: 22, offset: 40721},
				run: (*parser).callonNumericExprLevel21,
				expr: &seqExpr{
					pos: position{line: 1396, col: 22, offset: 40721},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1396, col: 22, offset: 40721},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1396, col: 28, offset: 40727},
								name: "NumericExprLevel1",
							},
						},
						&labeledExpr{
							pos:   position{line: 1396, col: 46, offset: 40745},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1396, col: 51, offset: 40750},
								expr: &seqExpr{
									pos: position{line: 1396, col: 52, offset: 40751},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 1396, col: 53, offset: 40752},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 1396, col: 53, offset: 40752},
													name: "OpMul",
												},
												&ruleRefExpr{
													pos:  position{line: 1396, col: 61, offset: 40760},
													name: "OpDiv",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1396, col: 68, offset: 40767},
											name: "NumericExprLevel1",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RoundPrecisionExpr",
			pos:  position{line: 1416, col: 1, offset: 41236},
			expr: &actionExpr{
				pos: position{line: 1416, col: 23, offset: 41258},
				run: (*parser).callonRoundPrecisionExpr1,
				expr: &seqExpr{
					pos: position{line: 1416, col: 23, offset: 41258},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1416, col: 23, offset: 41258},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 1416, col: 29, offset: 41264},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 1416, col: 34, offset: 41269},
								name: "NumericExprLevel3",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel1",
			pos:  position{line: 1426, col: 1, offset: 41517},
			expr: &choiceExpr{
				pos: position{line: 1426, col: 22, offset: 41538},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1426, col: 22, offset: 41538},
						run: (*parser).callonNumericExprLevel12,
						expr: &seqExpr{
							pos: position{line: 1426, col: 22, offset: 41538},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1426, col: 22, offset: 41538},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1426, col: 30, offset: 41546},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1426, col: 35, offset: 41551},
										name: "NumericExprLevel3",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1426, col: 53, offset: 41569},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1429, col: 3, offset: 41604},
						run: (*parser).callonNumericExprLevel18,
						expr: &labeledExpr{
							pos:   position{line: 1429, col: 3, offset: 41604},
							label: "numericEvalExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 1429, col: 20, offset: 41621},
								name: "NumericEvalExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1432, col: 3, offset: 41675},
						run: (*parser).callonNumericExprLevel111,
						expr: &labeledExpr{
							pos:   position{line: 1432, col: 3, offset: 41675},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1432, col: 9, offset: 41681},
								name: "EvalFieldToRead",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1442, col: 3, offset: 41900},
						run: (*parser).callonNumericExprLevel114,
						expr: &labeledExpr{
							pos:   position{line: 1442, col: 3, offset: 41900},
							label: "number",
							expr: &ruleRefExpr{
								pos:  position{line: 1442, col: 10, offset: 41907},
								name: "NumberAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericEvalExpr",
			pos:  position{line: 1454, col: 1, offset: 42165},
			expr: &choiceExpr{
				pos: position{line: 1454, col: 20, offset: 42184},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1454, col: 20, offset: 42184},
						run: (*parser).callonNumericEvalExpr2,
						expr: &seqExpr{
							pos: position{line: 1454, col: 21, offset: 42185},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1454, col: 21, offset: 42185},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1454, col: 29, offset: 42193},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1454, col: 29, offset: 42193},
												val:        "abs",
												ignoreCase: false,
												want:       "\"abs\"",
											},
											&litMatcher{
												pos:        position{line: 1454, col: 37, offset: 42201},
												val:        "ceil",
												ignoreCase: false,
												want:       "\"ceil\"",
											},
											&litMatcher{
												pos:        position{line: 1454, col: 46, offset: 42210},
												val:        "sqrt",
												ignoreCase: false,
												want:       "\"sqrt\"",
											},
											&litMatcher{
												pos:        position{line: 1454, col: 54, offset: 42218},
												val:        "exact",
												ignoreCase: false,
												want:       "\"exact\"",
											},
											&litMatcher{
												pos:        position{line: 1454, col: 63, offset: 42227},
												val:        "exp",
												ignoreCase: false,
												want:       "\"exp\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1454, col: 70, offset: 42234},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1454, col: 78, offset: 42242},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1454, col: 84, offset: 42248},
										name: "NumericExprLevel3",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1454, col: 103, offset: 42267},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1474, col: 3, offset: 42783},
						run: (*parser).callonNumericEvalExpr15,
						expr: &seqExpr{
							pos: position{line: 1474, col: 3, offset: 42783},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1474, col: 3, offset: 42783},
									label: "roundExpr",
									expr: &litMatcher{
										pos:        position{line: 1474, col: 13, offset: 42793},
										val:        "round",
										ignoreCase: false,
										want:       "\"round\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1474, col: 21, offset: 42801},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1474, col: 29, offset: 42809},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1474, col: 35, offset: 42815},
										name: "NumericExprLevel3",
									},
								},
								&labeledExpr{
									pos:   position{line: 1474, col: 54, offset: 42834},
									label: "roundPrecision",
									expr: &zeroOrOneExpr{
										pos: position{line: 1474, col: 69, offset: 42849},
										expr: &ruleRefExpr{
											pos:  position{line: 1474, col: 70, offset: 42850},
											name: "RoundPrecisionExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1474, col: 91, offset: 42871},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1495, col: 3, offset: 43495},
						run: (*parser).callonNumericEvalExpr26,
						expr: &seqExpr{
							pos: position{line: 1495, col: 3, offset: 43495},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1495, col: 3, offset: 43495},
									val:        "now",
									ignoreCase: false,
									want:       "\"now\"",
								},
								&litMatcher{
									pos:        position{line: 1495, col: 9, offset: 43501},
									val:        "()",
									ignoreCase: false,
									want:       "\"()\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1501, col: 3, offset: 43609},
						run: (*parser).callonNumericEvalExpr30,
						expr: &seqExpr{
							pos: position{line: 1501, col: 3, offset: 43609},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1501, col: 3, offset: 43609},
									val:        "tonumber",
									ignoreCase: false,
									want:       "\"tonumber\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1501, col: 14, offset: 43620},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1501, col: 22, offset: 43628},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1501, col: 33, offset: 43639},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1501, col: 44, offset: 43650},
									label: "baseExpr",
									expr: &zeroOrOneExpr{
										pos: position{line: 1501, col: 53, offset: 43659},
										expr: &seqExpr{
											pos: position{line: 1501, col: 54, offset: 43660},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1501, col: 54, offset: 43660},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1501, col: 60, offset: 43666},
													name: "NumericExprLevel3",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1501, col: 80, offset: 43686},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1529, col: 3, offset: 44533},
						run: (*parser).callonNumericEvalExpr42,
						expr: &seqExpr{
							pos: position{line: 1529, col: 3, offset: 44533},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1529, col: 3, offset: 44533},
									label: "lenExpr",
									expr: &litMatcher{
										pos:        position{line: 1529, col: 12, offset: 44542},
										val:        "len",
										ignoreCase: false,
										want:       "\"len\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1529, col: 18, offset: 44548},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1529, col: 26, offset: 44556},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1529, col: 31, offset: 44561},
										name: "LenExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1529, col: 39, offset: 44569},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LenExpr",
			pos:  position{line: 1533, col: 1, offset: 44603},
			expr: &choiceExpr{
				pos: position{line: 1533, col: 12, offset: 44614},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1533, col: 12, offset: 44614},
						run: (*parser).callonLenExpr2,
						expr: &seqExpr{
							pos: position{line: 1533, col: 12, offset: 44614},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1533, col: 12, offset: 44614},
									label: "str",
									expr: &ruleRefExpr{
										pos:  position{line: 1533, col: 16, offset: 44618},
										name: "QuotedString",
									},
								},
								&notExpr{
									pos: position{line: 1533, col: 29, offset: 44631},
									expr: &ruleRefExpr{
										pos:  position{line: 1533, col: 31, offset: 44633},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1549, col: 3, offset: 44998},
						run: (*parser).callonLenExpr8,
						expr: &seqExpr{
							pos: position{line: 1549, col: 3, offset: 44998},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1549, col: 3, offset: 44998},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1549, col: 9, offset: 45004},
										name: "EvalFieldToRead",
									},
								},
								&notExpr{
									pos: position{line: 1549, col: 25, offset: 45020},
									expr: &choiceExpr{
										pos: position{line: 1549, col: 27, offset: 45022},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 1549, col: 27, offset: 45022},
												name: "OpPlus",
											},
											&ruleRefExpr{
												pos:  position{line: 1549, col: 36, offset: 45031},
												name: "OpMinus",
											},
											&ruleRefExpr{
												pos:  position{line: 1549, col: 46, offset: 45041},
												name: "OpMul",
											},
											&ruleRefExpr{
												pos:  position{line: 1549, col: 54, offset: 45049},
												name: "OpDiv",
											},
											&ruleRefExpr{
												pos:  position{line: 1549, col: 62, offset: 45057},
												name: "EVAL_CONCAT",
											},
											&litMatcher{
												pos:        position{line: 1549, col: 76, offset: 45071},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HeadBlock",
			pos:  position{line: 1567, col: 1, offset: 45463},
			expr: &choiceExpr{
				pos: position{line: 1567, col: 14, offset: 45476},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1567, col: 14, offset: 45476},
						run: (*parser).callonHeadBlock2,
						expr: &seqExpr{
							pos: position{line: 1567, col: 14, offset: 45476},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1567, col: 14, offset: 45476},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 1567, col: 19, offset: 45481},
									name: "CMD_HEAD",
								},
								&zeroOrOneExpr{
									pos: position{line: 1567, col: 28, offset: 45490},
									expr: &seqExpr{
										pos: position{line: 1567, col: 29, offset: 45491},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 1567, col: 29, offset: 45491},
												val:        "limit",
												ignoreCase: false,
												want:       "\"limit\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1567, col: 37, offset: 45499},
												name: "EQUAL",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1567, col: 45, offset: 45507},
									label: "intAsStr",
									expr: &ruleRefExpr{
										pos:  position{line: 1567, col: 54, offset: 45516},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1582, col: 3, offset: 45932},
						run: (*parser).callonHeadBlock12,
						expr: &seqExpr{
							pos: position{line: 1582, col: 3, offset: 45932},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1582, col: 3, offset: 45932},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 1582, col: 8, offset: 45937},
									name: "CMD_HEAD_NO_SPACE",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggregationList",
			pos:  position{line: 1595, col: 1, offset: 46387},
			expr: &actionExpr{
				pos: position{line: 1595, col: 20, offset: 46406},
				run: (*parser).callonAggregationList1,
				expr: &seqExpr{
					pos: position{line: 1595, col: 20, offset: 46406},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1595, col: 20, offset: 46406},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1595, col: 26, offset: 46412},
								name: "Aggregator",
							},
						},
						&labeledExpr{
							pos:   position{line: 1595, col: 37, offset: 46423},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1595, col: 42, offset: 46428},
								expr: &seqExpr{
									pos: position{line: 1595, col: 43, offset: 46429},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 1595, col: 44, offset: 46430},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 1595, col: 44, offset: 46430},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1595, col: 52, offset: 46438},
													name: "SPACE",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1595, col: 59, offset: 46445},
											name: "Aggregator",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Aggregator",
			pos:  position{line: 1612, col: 1, offset: 46948},
			expr: &actionExpr{
				pos: position{line: 1612, col: 15, offset: 46962},
				run: (*parser).callonAggregator1,
				expr: &seqExpr{
					pos: position{line: 1612, col: 15, offset: 46962},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1612, col: 15, offset: 46962},
							label: "aggFunc",
							expr: &ruleRefExpr{
								pos:  position{line: 1612, col: 23, offset: 46970},
								name: "AggFunction",
							},
						},
						&labeledExpr{
							pos:   position{line: 1612, col: 35, offset: 46982},
							label: "asField",
							expr: &zeroOrOneExpr{
								pos: position{line: 1612, col: 43, offset: 46990},
								expr: &ruleRefExpr{
									pos:  position{line: 1612, col: 43, offset: 46990},
									name: "AsField",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggFunction",
			pos:  position{line: 1628, col: 1, offset: 47831},
			expr: &actionExpr{
				pos: position{line: 1628, col: 16, offset: 47846},
				run: (*parser).callonAggFunction1,
				expr: &labeledExpr{
					pos:   position{line: 1628, col: 16, offset: 47846},
					label: "agg",
					expr: &choiceExpr{
						pos: position{line: 1628, col: 21, offset: 47851},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1628, col: 21, offset: 47851},
								name: "AggCount",
							},
							&ruleRefExpr{
								pos:  position{line: 1628, col: 32, offset: 47862},
								name: "AggDistinctCount",
							},
							&ruleRefExpr{
								pos:  position{line: 1628, col: 51, offset: 47881},
								name: "AggAvg",
							},
							&ruleRefExpr{
								pos:  position{line: 1628, col: 60, offset: 47890},
								name: "AggMin",
							},
							&ruleRefExpr{
								pos:  position{line: 1628, col: 69, offset: 47899},
								name: "AggMax",
							},
							&ruleRefExpr{
								pos:  position{line: 1628, col: 78, offset: 47908},
								name: "AggRange",
							},
							&ruleRefExpr{
								pos:  position{line: 1628, col: 89, offset: 47919},
								name: "AggSum",
							},
							&ruleRefExpr{
								pos:  position{line: 1628, col: 98, offset: 47928},
								name: "AggValues",
							},
						},
					},
				},
			},
		},
		{
			name: "AsField",
			pos:  position{line: 1632, col: 1, offset: 47964},
			expr: &actionExpr{
				pos: position{line: 1632, col: 12, offset: 47975},
				run: (*parser).callonAsField1,
				expr: &seqExpr{
					pos: position{line: 1632, col: 12, offset: 47975},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1632, col: 12, offset: 47975},
							name: "AS",
						},
						&labeledExpr{
							pos:   position{line: 1632, col: 15, offset: 47978},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1632, col: 21, offset: 47984},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "AggCount",
			pos:  position{line: 1642, col: 1, offset: 48191},
			expr: &choiceExpr{
				pos: position{line: 1642, col: 13, offset: 48203},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1642, col: 13, offset: 48203},
						run: (*parser).callonAggCount2,
						expr: &seqExpr{
							pos: position{line: 1642, col: 13, offset: 48203},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 1642, col: 14, offset: 48204},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 1642, col: 14, offset: 48204},
											val:        "count",
											ignoreCase: false,
											want:       "\"count\"",
										},
										&litMatcher{
											pos:        position{line: 1642, col: 24, offset: 48214},
											val:        "c",
											ignoreCase: false,
											want:       "\"c\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1642, col: 29, offset: 48219},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 1642, col: 37, offset: 48227},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 1642, col: 44, offset: 48234},
									label: "boolExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1642, col: 53, offset: 48243},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1642, col: 62, offset: 48252},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1657, col: 3, offset: 48602},
						run: (*parser).callonAggCount12,
						expr: &seqExpr{
							pos: position{line: 1657, col: 3, offset: 48602},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 1657, col: 4, offset: 48603},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 1657, col: 4, offset: 48603},
											val:        "count",
											ignoreCase: false,
											want:       "\"count\"",
										},
										&litMatcher{
											pos:        position{line: 1657, col: 14, offset: 48613},
											val:        "c",
											ignoreCase: false,
											want:       "\"c\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1657, col: 19, offset: 48618},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1657, col: 27, offset: 48626},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1657, col: 33, offset: 48632},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1657, col: 43, offset: 48642},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1664, col: 5, offset: 48793},
						run: (*parser).callonAggCount21,
						expr: &choiceExpr{
							pos: position{line: 1664, col: 6, offset: 48794},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 1664, col: 6, offset: 48794},
									val:        "count",
									ignoreCase: false,
									want:       "\"count\"",
								},
								&litMatcher{
									pos:        position{line: 1664, col: 16, offset: 48804},
									val:        "c",
									ignoreCase: false,
									want:       "\"c\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggDistinctCount",
			pos:  position{line: 1673, col: 1, offset: 48941},
			expr: &choiceExpr{
				pos: position{line: 1673, col: 21, offset: 48961},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1673, col: 21, offset: 48961},
						run: (*parser).callonAggDistinctCount2,
						expr: &seqExpr{
							pos: position{line: 1673, col: 21, offset: 48961},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 1673, col: 22, offset: 48962},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 1673, col: 22, offset: 48962},
											val:        "distinct_count",
											ignoreCase: false,
											want:       "\"distinct_count\"",
										},
										&litMatcher{
											pos:        position{line: 1673, col: 41, offset: 48981},
											val:        "dc",
											ignoreCase: false,
											want:       "\"dc\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1673, col: 47, offset: 48987},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 1673, col: 55, offset: 48995},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 1673, col: 62, offset: 49002},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1673, col: 72, offset: 49012},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1673, col: 82, offset: 49022},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1683, col: 3, offset: 49256},
						run: (*parser).callonAggDistinctCount12,
						expr: &seqExpr{
							pos: position{line: 1683, col: 3, offset: 49256},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 1683, col: 4, offset: 49257},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 1683, col: 4, offset: 49257},
											val:        "distinct_count",
											ignoreCase: false,
											want:       "\"distinct_count\"",
										},
										&litMatcher{
											pos:        position{line: 1683, col: 23, offset: 49276},
											val:        "dc",
											ignoreCase: false,
											want:       "\"dc\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1683, col: 29, offset: 49282},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1683, col: 37, offset: 49290},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1683, col: 43, offset: 49296},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1683, col: 53, offset: 49306},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAvg",
			pos:  position{line: 1692, col: 1, offset: 49462},
			expr: &choiceExpr{
				pos: position{line: 1692, col: 11, offset: 49472},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1692, col: 11, offset: 49472},
						run: (*parser).callonAggAvg2,
						expr: &seqExpr{
							pos: position{line: 1692, col: 11, offset: 49472},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1692, col: 11, offset: 49472},
									val:        "avg",
									ignoreCase: false,
									want:       "\"avg\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1692, col: 17, offset: 49478},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 1692, col: 25, offset: 49486},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1692, col: 32, offset: 49493},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1692, col: 40, offset: 49501},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1692, col: 59, offset: 49520},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1692, col: 78, offset: 49539},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 1692, col: 86, offset: 49547},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1707, col: 3, offset: 49905},
						run: (*parser).callonAggAvg12,
						expr: &seqExpr{
							pos: position{line: 1707, col: 3, offset: 49905},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1707, col: 3, offset: 49905},
									val:        "avg",
									ignoreCase: false,
									want:       "\"avg\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1707, col: 9, offset: 49911},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1707, col: 17, offset: 49919},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1707, col: 23, offset: 49925},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1707, col: 33, offset: 49935},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMin",
			pos:  position{line: 1716, col: 1, offset: 50083},
			expr: &choiceExpr{
				pos: position{line: 1716, col: 11, offset: 50093},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1716, col: 11, offset: 50093},
						run: (*parser).callonAggMin2,
						expr: &seqExpr{
							pos: position{line: 1716, col: 11, offset: 50093},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1716, col: 11, offset: 50093},
									val:        "min",
									ignoreCase: false,
									want:       "\"min\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1716, col: 17, offset: 50099},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 1716, col: 25, offset: 50107},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1716, col: 32, offset: 50114},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1716, col: 40, offset: 50122},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1716, col: 59, offset: 50141},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1716, col: 78, offset: 50160},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 1716, col: 86, offset: 50168},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1731, col: 3, offset: 50526},
						run: (*parser).callonAggMin12,
						expr: &seqExpr{
							pos: position{line: 1731, col: 3, offset: 50526},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1731, col: 3, offset: 50526},
									val:        "min",
									ignoreCase: false,
									want:       "\"min\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1731, col: 9, offset: 50532},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1731, col: 17, offset: 50540},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1731, col: 23, offset: 50546},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1731, col: 33, offset: 50556},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMax",
			pos:  position{line: 1740, col: 1, offset: 50704},
			expr: &choiceExpr{
				pos: position{line: 1740, col: 11, offset: 50714},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1740, col: 11, offset: 50714},
						run: (*parser).callonAggMax2,
						expr: &seqExpr{
							pos: position{line: 1740, col: 11, offset: 50714},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1740, col: 11, offset: 50714},
									val:        "max",
									ignoreCase: false,
									want:       "\"max\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1740, col: 17, offset: 50720},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 1740, col: 25, offset: 50728},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1740, col: 32, offset: 50735},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1740, col: 41, offset: 50744},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1740, col: 60, offset: 50763},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1740, col: 79, offset: 50782},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 1740, col: 87, offset: 50790},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1755, col: 3, offset: 51148},
						run: (*parser).callonAggMax12,
						expr: &seqExpr{
							pos: position{line: 1755, col: 3, offset: 51148},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1755, col: 3, offset: 51148},
									val:        "max",
									ignoreCase: false,
									want:       "\"max\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1755, col: 9, offset: 51154},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1755, col: 17, offset: 51162},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1755, col: 23, offset: 51168},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1755, col: 33, offset: 51178},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggRange",
			pos:  position{line: 1764, col: 1, offset: 51326},
			expr: &choiceExpr{
				pos: position{line: 1764, col: 13, offset: 51338},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1764, col: 13, offset: 51338},
						run: (*parser).callonAggRange2,
						expr: &seqExpr{
							pos: position{line: 1764, col: 13, offset: 51338},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1764, col: 13, offset: 51338},
									val:        "range",
									ignoreCase: false,
									want:       "\"range\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1764, col: 21, offset: 51346},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 1764, col: 29, offset: 51354},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1764, col: 36, offset: 51361},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1764, col: 44, offset: 51369},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1764, col: 63, offset: 51388},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1764, col: 82, offset: 51407},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 1764, col: 90, offset: 51415},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1779, col: 3, offset: 51775},
						run: (*parser).callonAggRange12,
						expr: &seqExpr{
							pos: position{line: 1779, col: 3, offset: 51775},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1779, col: 3, offset: 51775},
									val:        "range",
									ignoreCase: false,
									want:       "\"range\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1779, col: 11, offset: 51783},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1779, col: 19, offset: 51791},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1779, col: 25, offset: 51797},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1779, col: 35, offset: 51807},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggSum",
			pos:  position{line: 1788, col: 1, offset: 51957},
			expr: &choiceExpr{
				pos: position{line: 1788, col: 11, offset: 51967},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1788, col: 11, offset: 51967},
						run: (*parser).callonAggSum2,
						expr: &seqExpr{
							pos: position{line: 1788, col: 11, offset: 51967},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1788, col: 11, offset: 51967},
									val:        "sum",
									ignoreCase: false,
									want:       "\"sum\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1788, col: 17, offset: 51973},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 1788, col: 25, offset: 51981},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1788, col: 32, offset: 51988},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1788, col: 40, offset: 51996},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1788, col: 59, offset: 52015},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1788, col: 78, offset: 52034},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 1788, col: 86, offset: 52042},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1803, col: 3, offset: 52400},
						run: (*parser).callonAggSum12,
						expr: &seqExpr{
							pos: position{line: 1803, col: 3, offset: 52400},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1803, col: 3, offset: 52400},
									val:        "sum",
									ignoreCase: false,
									want:       "\"sum\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1803, col: 9, offset: 52406},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1803, col: 17, offset: 52414},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1803, col: 23, offset: 52420},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1803, col: 33, offset: 52430},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggValues",
			pos:  position{line: 1812, col: 1, offset: 52578},
			expr: &choiceExpr{
				pos: position{line: 1812, col: 14, offset: 52591},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1812, col: 14, offset: 52591},
						run: (*parser).callonAggValues2,
						expr: &seqExpr{
							pos: position{line: 1812, col: 14, offset: 52591},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1812, col: 14, offset: 52591},
									val:        "values",
									ignoreCase: false,
									want:       "\"values\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1812, col: 23, offset: 52600},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 1812, col: 31, offset: 52608},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 1812, col: 38, offset: 52615},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1812, col: 48, offset: 52625},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1812, col: 58, offset: 52635},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1822, col: 3, offset: 52864},
						run: (*parser).callonAggValues10,
						expr: &seqExpr{
							pos: position{line: 1822, col: 3, offset: 52864},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1822, col: 3, offset: 52864},
									val:        "values",
									ignoreCase: false,
									want:       "\"values\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1822, col: 12, offset: 52873},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1822, col: 20, offset: 52881},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1822, col: 26, offset: 52887},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1822, col: 36, offset: 52897},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldWithNumberValue",
			pos:  position{line: 1831, col: 1, offset: 53048},
			expr: &actionExpr{
				pos: position{line: 1831, col: 25, offset: 53072},
				run: (*parser).callonFieldWithNumberValue1,
				expr: &labeledExpr{
					pos:   position{line: 1831, col: 25, offset: 53072},
					label: "keyValuePair",
					expr: &choiceExpr{
						pos: position{line: 1831, col: 39, offset: 53086},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1831, col: 39, offset: 53086},
								name: "NamedFieldWithNumberValue",
							},
							&ruleRefExpr{
								pos:  position{line: 1831, col: 67, offset: 53114},
								name: "UnnamedFieldWithNumberValue",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedFieldWithNumberValue",
			pos:  position{line: 1835, col: 1, offset: 53177},
			expr: &actionExpr{
				pos: position{line: 1835, col: 30, offset: 53206},
				run: (*parser).callonNamedFieldWithNumberValue1,
				expr: &seqExpr{
					pos: position{line: 1835, col: 30, offset: 53206},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1835, col: 30, offset: 53206},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 1835, col: 34, offset: 53210},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 1835, col: 44, offset: 53220},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 1835, col: 48, offset: 53224},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1835, col: 48, offset: 53224},
										name: "EqualityOperator",
									},
									&ruleRefExpr{
										pos:  position{line: 1835, col: 67, offset: 53243},
										name: "InequalityOperator",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1835, col: 87, offset: 53263},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1835, col: 93, offset: 53269},
								name: "Number",
							},
						},
					},
				},
			},
		},
		{
			name: "UnnamedFieldWithNumberValue",
			pos:  position{line: 1848, col: 1, offset: 53503},
			expr: &actionExpr{
				pos: position{line: 1848, col: 32, offset: 53534},
				run: (*parser).callonUnnamedFieldWithNumberValue1,
				expr: &labeledExpr{
					pos:   position{line: 1848, col: 32, offset: 53534},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 1848, col: 38, offset: 53540},
						name: "Number",
					},
				},
			},
		},
		{
			name: "FieldWithStringValue",
			pos:  position{line: 1861, col: 1, offset: 53757},
			expr: &actionExpr{
				pos: position{line: 1861, col: 25, offset: 53781},
				run: (*parser).callonFieldWithStringValue1,
				expr: &labeledExpr{
					pos:   position{line: 1861, col: 25, offset: 53781},
					label: "keyValuePair",
					expr: &choiceExpr{
						pos: position{line: 1861, col: 39, offset: 53795},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1861, col: 39, offset: 53795},
								name: "NamedFieldWithStringValue",
							},
							&ruleRefExpr{
								pos:  position{line: 1861, col: 67, offset: 53823},
								name: "UnnamedFieldWithStringValue",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedFieldWithStringValue",
			pos:  position{line: 1865, col: 1, offset: 53886},
			expr: &actionExpr{
				pos: position{line: 1865, col: 30, offset: 53915},
				run: (*parser).callonNamedFieldWithStringValue1,
				expr: &seqExpr{
					pos: position{line: 1865, col: 30, offset: 53915},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1865, col: 30, offset: 53915},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 1865, col: 34, offset: 53919},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 1865, col: 44, offset: 53929},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 1865, col: 47, offset: 53932},
								name: "EqualityOperator",
							},
						},
						&labeledExpr{
							pos:   position{line: 1865, col: 64, offset: 53949},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1865, col: 70, offset: 53955},
								name: "String",
							},
						},
					},
				},
			},
		},
		{
			name: "UnnamedFieldWithStringValue",
			pos:  position{line: 1877, col: 1, offset: 54188},
			expr: &actionExpr{
				pos: position{line: 1877, col: 32, offset: 54219},
				run: (*parser).callonUnnamedFieldWithStringValue1,
				expr: &labeledExpr{
					pos:   position{line: 1877, col: 32, offset: 54219},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 1877, col: 38, offset: 54225},
						name: "String",
					},
				},
			},
		},
		{
			name: "FieldNameList",
			pos:  position{line: 1891, col: 1, offset: 54556},
			expr: &actionExpr{
				pos: position{line: 1891, col: 18, offset: 54573},
				run: (*parser).callonFieldNameList1,
				expr: &seqExpr{
					pos: position{line: 1891, col: 18, offset: 54573},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1891, col: 18, offset: 54573},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1891, col: 24, offset: 54579},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 1891, col: 34, offset: 54589},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1891, col: 39, offset: 54594},
								expr: &seqExpr{
									pos: position{line: 1891, col: 40, offset: 54595},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1891, col: 40, offset: 54595},
											name: "COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 1891, col: 46, offset: 54601},
											name: "FieldName",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1911, col: 1, offset: 55364},
			expr: &actionExpr{
				pos: position{line: 1911, col: 14, offset: 55377},
				run: (*parser).callonFieldName1,
				expr: &seqExpr{
					pos: position{line: 1911, col: 14, offset: 55377},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 1911, col: 14, offset: 55377},
							val:        "[a-zA-Z0-9:*]",
							chars:      []rune{':', '*'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1911, col: 27, offset: 55390},
							expr: &charClassMatcher{
								pos:        position{line: 1911, col: 27, offset: 55390},
								val:        "[a-zA-Z0-9:_.*]",
								chars:      []rune{':', '_', '.', '*'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "String",
			pos:  position{line: 1915, col: 1, offset: 55443},
			expr: &actionExpr{
				pos: position{line: 1915, col: 11, offset: 55453},
				run: (*parser).callonString1,
				expr: &labeledExpr{
					pos:   position{line: 1915, col: 11, offset: 55453},
					label: "str",
					expr: &choiceExpr{
						pos: position{line: 1915, col: 16, offset: 55458},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1915, col: 16, offset: 55458},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1915, col: 31, offset: 55473},
								name: "UnquotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1919, col: 1, offset: 55514},
			expr: &actionExpr{
				pos: position{line: 1919, col: 17, offset: 55530},
				run: (*parser).callonQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1919, col: 17, offset: 55530},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1919, col: 17, offset: 55530},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1919, col: 21, offset: 55534},
							expr: &charClassMatcher{
								pos:        position{line: 1919, col: 21, offset: 55534},
								val:        "[^\"]",
								chars:      []rune{'"'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 1919, col: 27, offset: 55540},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UnquotedString",
			pos:  position{line: 1924, col: 1, offset: 55651},
			expr: &actionExpr{
				pos: position{line: 1924, col: 19, offset: 55669},
				run: (*parser).callonUnquotedString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1924, col: 19, offset: 55669},
					expr: &choiceExpr{
						pos: position{line: 1924, col: 20, offset: 55670},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 1924, col: 20, offset: 55670},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&seqExpr{
								pos: position{line: 1924, col: 27, offset: 55677},
								exprs: []any{
									&notExpr{
										pos: position{line: 1924, col: 27, offset: 55677},
										expr: &choiceExpr{
											pos: position{line: 1924, col: 29, offset: 55679},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 1924, col: 29, offset: 55679},
													name: "MAJOR_BREAK",
												},
												&ruleRefExpr{
													pos:  position{line: 1924, col: 43, offset: 55693},
													name: "EOF",
												},
											},
										},
									},
									&anyMatcher{
										line: 1924, col: 48, offset: 55698,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RenamePattern",
			pos:  position{line: 1931, col: 1, offset: 55872},
			expr: &actionExpr{
				pos: position{line: 1931, col: 18, offset: 55889},
				run: (*parser).callonRenamePattern1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1931, col: 18, offset: 55889},
					expr: &charClassMatcher{
						pos:        position{line: 1931, col: 18, offset: 55889},
						val:        "[a-zA-Z0-9_*]",
						chars:      []rune{'_', '*'},
						ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 1935, col: 1, offset: 55940},
			expr: &actionExpr{
				pos: position{line: 1935, col: 11, offset: 55950},
				run: (*parser).callonNumber1,
				expr: &labeledExpr{
					pos:   position{line: 1935, col: 11, offset: 55950},
					label: "number",
					expr: &ruleRefExpr{
						pos:  position{line: 1935, col: 18, offset: 55957},
						name: "NumberAsString",
					},
				},
			},
		},
		{
			name: "NumberAsString",
			pos:  position{line: 1941, col: 1, offset: 56146},
			expr: &actionExpr{
				pos: position{line: 1941, col: 19, offset: 56164},
				run: (*parser).callonNumberAsString1,
				expr: &seqExpr{
					pos: position{line: 1941, col: 19, offset: 56164},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1941, col: 19, offset: 56164},
							label: "number",
							expr: &choiceExpr{
								pos: position{line: 1941, col: 27, offset: 56172},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1941, col: 27, offset: 56172},
										name: "FloatAsString",
									},
									&ruleRefExpr{
										pos:  position{line: 1941, col: 43, offset: 56188},
										name: "IntegerAsString",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 1941, col: 60, offset: 56205},
							expr: &choiceExpr{
								pos: position{line: 1941, col: 62, offset: 56207},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1941, col: 62, offset: 56207},
										name: "SPACE",
									},
									&litMatcher{
										pos:        position{line: 1941, col: 70, offset: 56215},
										val:        ")",
										ignoreCase: false,
										want:       "\")\"",
									},
									&litMatcher{
										pos:        position{line: 1941, col: 76, offset: 56221},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&ruleRefExpr{
										pos:  position{line: 1941, col: 82, offset: 56227},
										name: "EOF",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FloatAsString",
			pos:  position{line: 1947, col: 1, offset: 56356},
			expr: &actionExpr{
				pos: position{line: 1947, col: 18, offset: 56373},
				run: (*parser).callonFloatAsString1,
				expr: &seqExpr{
					pos: position{line: 1947, col: 18, offset: 56373},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 1947, col: 18, offset: 56373},
							expr: &charClassMatcher{
								pos:        position{line: 1947, col: 18, offset: 56373},
								val:        "[-+]",
								chars:      []rune{'-', '+'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1947, col: 24, offset: 56379},
							expr: &charClassMatcher{
								pos:        position{line: 1947, col: 24, offset: 56379},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 1947, col: 31, offset: 56386},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1947, col: 35, offset: 56390},
							expr: &charClassMatcher{
								pos:        position{line: 1947, col: 35, offset: 56390},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "IntegerAsString",
			pos:  position{line: 1952, col: 1, offset: 56485},
			expr: &actionExpr{
				pos: position{line: 1952, col: 20, offset: 56504},
				run: (*parser).callonIntegerAsString1,
				expr: &seqExpr{
					pos: position{line: 1952, col: 20, offset: 56504},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 1952, col: 20, offset: 56504},
							expr: &charClassMatcher{
								pos:        position{line: 1952, col: 20, offset: 56504},
								val:        "[-+]",
								chars:      []rune{'-', '+'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1952, col: 26, offset: 56510},
							expr: &charClassMatcher{
								pos:        position{line: 1952, col: 26, offset: 56510},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 1956, col: 1, offset: 56553},
			expr: &actionExpr{
				pos: position{line: 1956, col: 21, offset: 56573},
				run: (*parser).callonEqualityOperator1,
				expr: &seqExpr{
					pos: position{line: 1956, col: 21, offset: 56573},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1956, col: 21, offset: 56573},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 1956, col: 36, offset: 56588},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 1956, col: 40, offset: 56592},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 1956, col: 40, offset: 56592},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
									&litMatcher{
										pos:        position{line: 1956, col: 46, offset: 56598},
										val:        "!=",
										ignoreCase: false,
										want:       "\"!=\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1956, col: 52, offset: 56604},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "InequalityOperator",
			pos:  position{line: 1964, col: 1, offset: 56785},
			expr: &actionExpr{
				pos: position{line: 1964, col: 23, offset: 56807},
				run: (*parser).callonInequalityOperator1,
				expr: &seqExpr{
					pos: position{line: 1964, col: 23, offset: 56807},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1964, col: 23, offset: 56807},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 1964, col: 38, offset: 56822},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 1964, col: 42, offset: 56826},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 1964, col: 42, offset: 56826},
										val:        "<=",
										ignoreCase: false,
										want:       "\"<=\"",
									},
									&litMatcher{
										pos:        position{line: 1964, col: 49, offset: 56833},
										val:        "<",
										ignoreCase: false,
										want:       "\"<\"",
									},
									&litMatcher{
										pos:        position{line: 1964, col: 55, offset: 56839},
										val:        ">=",
										ignoreCase: false,
										want:       "\">=\"",
									},
									&litMatcher{
										pos:        position{line: 1964, col: 62, offset: 56846},
										val:        ">",
										ignoreCase: false,
										want:       "\">\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1964, col: 67, offset: 56851},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "EqualityOrInequality",
			pos:  position{line: 1972, col: 1, offset: 57034},
			expr: &choiceExpr{
				pos: position{line: 1972, col: 25, offset: 57058},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1972, col: 25, offset: 57058},
						run: (*parser).callonEqualityOrInequality2,
						expr: &labeledExpr{
							pos:   position{line: 1972, col: 25, offset: 57058},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 1972, col: 28, offset: 57061},
								name: "EqualityOperator",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1975, col: 3, offset: 57103},
						run: (*parser).callonEqualityOrInequality5,
						expr: &labeledExpr{
							pos:   position{line: 1975, col: 3, offset: 57103},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 1975, col: 6, offset: 57106},
								name: "InequalityOperator",
							},
						},
					},
				},
			},
		},
		{
			name: "OpPlus",
			pos:  position{line: 1979, col: 1, offset: 57149},
			expr: &actionExpr{
				pos: position{line: 1979, col: 11, offset: 57159},
				run: (*parser).callonOpPlus1,
				expr: &seqExpr{
					pos: position{line: 1979, col: 11, offset: 57159},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1979, col: 11, offset: 57159},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 1979, col: 26, offset: 57174},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1979, col: 30, offset: 57178},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpMinus",
			pos:  position{line: 1983, col: 1, offset: 57218},
			expr: &actionExpr{
				pos: position{line: 1983, col: 12, offset: 57229},
				run: (*parser).callonOpMinus1,
				expr: &seqExpr{
					pos: position{line: 1983, col: 12, offset: 57229},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1983, col: 12, offset: 57229},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 1983, col: 27, offset: 57244},
							val:        "-",
							ignoreCase: false,
							want:       "\"-\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1983, col: 31, offset: 57248},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpMul",
			pos:  position{line: 1987, col: 1, offset: 57288},
			expr: &actionExpr{
				pos: position{line: 1987, col: 10, offset: 57297},
				run: (*parser).callonOpMul1,
				expr: &seqExpr{
					pos: position{line: 1987, col: 10, offset: 57297},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1987, col: 10, offset: 57297},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 1987, col: 25, offset: 57312},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1987, col: 29, offset: 57316},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpDiv",
			pos:  position{line: 1991, col: 1, offset: 57356},
			expr: &actionExpr{
				pos: position{line: 1991, col: 10, offset: 57365},
				run: (*parser).callonOpDiv1,
				expr: &seqExpr{
					pos: position{line: 1991, col: 10, offset: 57365},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1991, col: 10, offset: 57365},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 1991, col: 25, offset: 57380},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1991, col: 29, offset: 57384},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "Second",
			pos:  position{line: 1996, col: 1, offset: 57448},
			expr: &actionExpr{
				pos: position{line: 1996, col: 11, offset: 57458},
				run: (*parser).callonSecond1,
				expr: &choiceExpr{
					pos: position{line: 1996, col: 12, offset: 57459},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 1996, col: 12, offset: 57459},
							val:        "seconds",
							ignoreCase: false,
							want:       "\"seconds\"",
						},
						&litMatcher{
							pos:        position{line: 1996, col: 24, offset: 57471},
							val:        "second",
							ignoreCase: false,
							want:       "\"second\"",
						},
						&litMatcher{
							pos:        position{line: 1996, col: 35, offset: 57482},
							val:        "secs",
							ignoreCase: false,
							want:       "\"secs\"",
						},
						&litMatcher{
							pos:        position{line: 1996, col: 44, offset: 57491},
							val:        "sec",
							ignoreCase: false,
							want:       "\"sec\"",
						},
						&litMatcher{
							pos:        position{line: 1996, col: 52, offset: 57499},
							val:        "s",
							ignoreCase: false,
							want:       "\"s\"",
						},
					},
				},
			},
		},
		{
			name: "Minute",
			pos:  position{line: 2000, col: 1, offset: 57540},
			expr: &actionExpr{
				pos: position{line: 2000, col: 11, offset: 57550},
				run: (*parser).callonMinute1,
				expr: &choiceExpr{
					pos: position{line: 2000, col: 12, offset: 57551},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 2000, col: 12, offset: 57551},
							val:        "minutes",
							ignoreCase: false,
							want:       "\"minutes\"",
						},
						&litMatcher{
							pos:        position{line: 2000, col: 24, offset: 57563},
							val:        "minute",
							ignoreCase: false,
							want:       "\"minute\"",
						},
						&litMatcher{
							pos:        position{line: 2000, col: 35, offset: 57574},
							val:        "mins",
							ignoreCase: false,
							want:       "\"mins\"",
						},
						&litMatcher{
							pos:        position{line: 2000, col: 44, offset: 57583},
							val:        "min",
							ignoreCase: false,
							want:       "\"min\"",
						},
						&litMatcher{
							pos:        position{line: 2000, col: 52, offset: 57591},
							val:        "m",
							ignoreCase: false,
							want:       "\"m\"",
						},
					},
				},
			},
		},
		{
			name: "Hour",
			pos:  position{line: 2004, col: 1, offset: 57632},
			expr: &actionExpr{
				pos: position{line: 2004, col: 9, offset: 57640},
				run: (*parser).callonHour1,
				expr: &choiceExpr{
					pos: position{line: 2004, col: 10, offset: 57641},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 2004, col: 10, offset: 57641},
							val:        "hours",
							ignoreCase: false,
							want:       "\"hours\"",
						},
						&litMatcher{
							pos:        position{line: 2004, col: 20, offset: 57651},
							val:        "hour",
							ignoreCase: false,
							want:       "\"hour\"",
						},
						&litMatcher{
							pos:        position{line: 2004, col: 29, offset: 57660},
							val:        "hrs",
							ignoreCase: false,
							want:       "\"hrs\"",
						},
						&litMatcher{
							pos:        position{line: 2004, col: 37, offset: 57668},
							val:        "hr",
							ignoreCase: false,
							want:       "\"hr\"",
						},
						&litMatcher{
							pos:        position{line: 2004, col: 44, offset: 57675},
							val:        "h",
							ignoreCase: false,
							want:       "\"h\"",
						},
					},
				},
			},
		},
		{
			name: "Day",
			pos:  position{line: 2008, col: 1, offset: 57714},
			expr: &actionExpr{
				pos: position{line: 2008, col: 8, offset: 57721},
				run: (*parser).callonDay1,
				expr: &choiceExpr{
					pos: position{line: 2008, col: 9, offset: 57722},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 2008, col: 9, offset: 57722},
							val:        "days",
							ignoreCase: false,
							want:       "\"days\"",
						},
						&litMatcher{
							pos:        position{line: 2008, col: 18, offset: 57731},
							val:        "day",
							ignoreCase: false,
							want:       "\"day\"",
						},
						&litMatcher{
							pos:        position{line: 2008, col: 26, offset: 57739},
							val:        "d",
							ignoreCase: false,
							want:       "\"d\"",
						},
					},
				},
			},
		},
		{
			name: "Week",
			pos:  position{line: 2012, col: 1, offset: 57777},
			expr: &actionExpr{
				pos: position{line: 2012, col: 9, offset: 57785},
				run: (*parser).callonWeek1,
				expr: &choiceExpr{
					pos: position{line: 2012, col: 10, offset: 57786},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 2012, col: 10, offset: 57786},
							val:        "weeks",
							ignoreCase: false,
							want:       "\"weeks\"",
						},
						&litMatcher{
							pos:        position{line: 2012, col: 20, offset: 57796},
							val:        "week",
							ignoreCase: false,
							want:       "\"week\"",
						},
						&litMatcher{
							pos:        position{line: 2012, col: 29, offset: 57805},
							val:        "w",
							ignoreCase: false,
							want:       "\"w\"",
						},
					},
				},
			},
		},
		{
			name: "Month",
			pos:  position{line: 2016, col: 1, offset: 57844},
			expr: &actionExpr{
				pos: position{line: 2016, col: 10, offset: 57853},
				run: (*parser).callonMonth1,
				expr: &choiceExpr{
					pos: position{line: 2016, col: 11, offset: 57854},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 2016, col: 11, offset: 57854},
							val:        "months",
							ignoreCase: false,
							want:       "\"months\"",
						},
						&litMatcher{
							pos:        position{line: 2016, col: 22, offset: 57865},
							val:        "month",
							ignoreCase: false,
							want:       "\"month\"",
						},
						&litMatcher{
							pos:        position{line: 2016, col: 32, offset: 57875},
							val:        "mon",
							ignoreCase: false,
							want:       "\"mon\"",
						},
					},
				},
			},
		},
		{
			name: "Quarter",
			pos:  position{line: 2020, col: 1, offset: 57917},
			expr: &actionExpr{
				pos: position{line: 2020, col: 12, offset: 57928},
				run: (*parser).callonQuarter1,
				expr: &choiceExpr{
					pos: position{line: 2020, col: 13, offset: 57929},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 2020, col: 13, offset: 57929},
							val:        "quarters",
							ignoreCase: false,
							want:       "\"quarters\"",
						},
						&litMatcher{
							pos:        position{line: 2020, col: 26, offset: 57942},
							val:        "quarter",
							ignoreCase: false,
							want:       "\"quarter\"",
						},
						&litMatcher{
							pos:        position{line: 2020, col: 38, offset: 57954},
							val:        "qtrs",
							ignoreCase: false,
							want:       "\"qtrs\"",
						},
						&litMatcher{
							pos:        position{line: 2020, col: 47, offset: 57963},
							val:        "qtr",
							ignoreCase: false,
							want:       "\"qtr\"",
						},
						&litMatcher{
							pos:        position{line: 2020, col: 55, offset: 57971},
							val:        "q",
							ignoreCase: false,
							want:       "\"q\"",
						},
					},
				},
			},
		},
		{
			name: "Subseconds",
			pos:  position{line: 2025, col: 1, offset: 58105},
			expr: &actionExpr{
				pos: position{line: 2025, col: 15, offset: 58119},
				run: (*parser).callonSubseconds1,
				expr: &choiceExpr{
					pos: position{line: 2025, col: 16, offset: 58120},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 2025, col: 16, offset: 58120},
							val:        "us",
							ignoreCase: false,
							want:       "\"us\"",
						},
						&litMatcher{
							pos:        position{line: 2025, col: 23, offset: 58127},
							val:        "ms",
							ignoreCase: false,
							want:       "\"ms\"",
						},
						&litMatcher{
							pos:        position{line: 2025, col: 30, offset: 58134},
							val:        "cs",
							ignoreCase: false,
							want:       "\"cs\"",
						},
						&litMatcher{
							pos:        position{line: 2025, col: 37, offset: 58141},
							val:        "ds",
							ignoreCase: false,
							want:       "\"ds\"",
						},
					},
				},
			},
		},
		{
			name: "ALLCMD",
			pos:  position{line: 2034, col: 1, offset: 58356},
			expr: &choiceExpr{
				pos: position{line: 2034, col: 12, offset: 58367},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 2034, col: 12, offset: 58367},
						name: "CMD_REGEX",
					},
					&ruleRefExpr{
						pos:  position{line: 2034, col: 24, offset: 58379},
						name: "CMD_STATS",
					},
					&ruleRefExpr{
						pos:  position{line: 2034, col: 36, offset: 58391},
						name: "CMD_FIELDS",
					},
					&ruleRefExpr{
						pos:  position{line: 2034, col: 49, offset: 58404},
						name: "CMD_WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 2034, col: 61, offset: 58416},
						name: "CMD_HEAD_NO_SPACE",
					},
					&ruleRefExpr{
						pos:  position{line: 2034, col: 81, offset: 58436},
						name: "CMD_EVAL",
					},
					&ruleRefExpr{
						pos:  position{line: 2034, col: 92, offset: 58447},
						name: "CMD_REX",
					},
					&ruleRefExpr{
						pos:  position{line: 2034, col: 102, offset: 58457},
						name: "CMD_TOP",
					},
					&ruleRefExpr{
						pos:  position{line: 2034, col: 112, offset: 58467},
						name: "CMD_RARE",
					},
					&ruleRefExpr{
						pos:  position{line: 2034, col: 123, offset: 58478},
						name: "CMD_RENAME",
					},
					&ruleRefExpr{
						pos:  position{line: 2034, col: 136, offset: 58491},
						name: "CMD_TIMECHART",
					},
				},
			},
		},
		{
			name: "CMD_SEARCH",
			pos:  position{line: 2035, col: 1, offset: 58506},
			expr: &seqExpr{
				pos: position{line: 2035, col: 15, offset: 58520},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2035, col: 15, offset: 58520},
						val:        "search",
						ignoreCase: false,
						want:       "\"search\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2035, col: 24, offset: 58529},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_REGEX",
			pos:  position{line: 2036, col: 1, offset: 58535},
			expr: &seqExpr{
				pos: position{line: 2036, col: 14, offset: 58548},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2036, col: 14, offset: 58548},
						val:        "regex",
						ignoreCase: false,
						want:       "\"regex\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2036, col: 22, offset: 58556},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_STATS",
			pos:  position{line: 2037, col: 1, offset: 58562},
			expr: &seqExpr{
				pos: position{line: 2037, col: 14, offset: 58575},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2037, col: 14, offset: 58575},
						val:        "stats",
						ignoreCase: false,
						want:       "\"stats\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2037, col: 22, offset: 58583},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_FIELDS",
			pos:  position{line: 2038, col: 1, offset: 58589},
			expr: &seqExpr{
				pos: position{line: 2038, col: 15, offset: 58603},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2038, col: 15, offset: 58603},
						val:        "fields",
						ignoreCase: false,
						want:       "\"fields\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2038, col: 24, offset: 58612},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_WHERE",
			pos:  position{line: 2039, col: 1, offset: 58618},
			expr: &seqExpr{
				pos: position{line: 2039, col: 14, offset: 58631},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2039, col: 14, offset: 58631},
						val:        "where",
						ignoreCase: false,
						want:       "\"where\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2039, col: 22, offset: 58639},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_HEAD_NO_SPACE",
			pos:  position{line: 2040, col: 1, offset: 58645},
			expr: &litMatcher{
				pos:        position{line: 2040, col: 22, offset: 58666},
				val:        "head",
				ignoreCase: false,
				want:       "\"head\"",
			},
		},
		{
			name: "CMD_HEAD",
			pos:  position{line: 2041, col: 1, offset: 58673},
			expr: &seqExpr{
				pos: position{line: 2041, col: 13, offset: 58685},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 2041, col: 13, offset: 58685},
						name: "CMD_HEAD_NO_SPACE",
					},
					&ruleRefExpr{
						pos:  position{line: 2041, col: 31, offset: 58703},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_EVAL",
			pos:  position{line: 2042, col: 1, offset: 58709},
			expr: &seqExpr{
				pos: position{line: 2042, col: 13, offset: 58721},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2042, col: 13, offset: 58721},
						val:        "eval",
						ignoreCase: false,
						want:       "\"eval\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2042, col: 20, offset: 58728},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_REX",
			pos:  position{line: 2043, col: 1, offset: 58734},
			expr: &seqExpr{
				pos: position{line: 2043, col: 12, offset: 58745},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2043, col: 12, offset: 58745},
						val:        "rex",
						ignoreCase: false,
						want:       "\"rex\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2043, col: 18, offset: 58751},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_TOP",
			pos:  position{line: 2044, col: 1, offset: 58757},
			expr: &litMatcher{
				pos:        position{line: 2044, col: 12, offset: 58768},
				val:        "top",
				ignoreCase: false,
				want:       "\"top\"",
			},
		},
		{
			name: "CMD_RARE",
			pos:  position{line: 2045, col: 1, offset: 58774},
			expr: &litMatcher{
				pos:        position{line: 2045, col: 13, offset: 58786},
				val:        "rare",
				ignoreCase: false,
				want:       "\"rare\"",
			},
		},
		{
			name: "CMD_RENAME",
			pos:  position{line: 2046, col: 1, offset: 58793},
			expr: &seqExpr{
				pos: position{line: 2046, col: 15, offset: 58807},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2046, col: 15, offset: 58807},
						val:        "rename",
						ignoreCase: false,
						want:       "\"rename\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2046, col: 24, offset: 58816},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_TIMECHART",
			pos:  position{line: 2047, col: 1, offset: 58822},
			expr: &seqExpr{
				pos: position{line: 2047, col: 18, offset: 58839},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2047, col: 18, offset: 58839},
						val:        "timechart",
						ignoreCase: false,
						want:       "\"timechart\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2047, col: 30, offset: 58851},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_SPAN",
			pos:  position{line: 2048, col: 1, offset: 58857},
			expr: &litMatcher{
				pos:        position{line: 2048, col: 13, offset: 58869},
				val:        "span",
				ignoreCase: false,
				want:       "\"span\"",
			},
		},
		{
			name: "EVAL_CONCAT",
			pos:  position{line: 2049, col: 1, offset: 58876},
			expr: &seqExpr{
				pos: position{line: 2049, col: 16, offset: 58891},
				exprs: []any{
					&zeroOrOneExpr{
						pos: position{line: 2049, col: 16, offset: 58891},
						expr: &ruleRefExpr{
							pos:  position{line: 2049, col: 16, offset: 58891},
							name: "SPACE",
						},
					},
					&litMatcher{
						pos:        position{line: 2049, col: 23, offset: 58898},
						val:        ".",
						ignoreCase: false,
						want:       "\".\"",
					},
					&zeroOrOneExpr{
						pos: position{line: 2049, col: 27, offset: 58902},
						expr: &ruleRefExpr{
							pos:  position{line: 2049, col: 27, offset: 58902},
							name: "SPACE",
						},
					},
				},
			},
		},
		{
			name: "MAJOR_BREAK",
			pos:  position{line: 2052, col: 1, offset: 59013},
			expr: &choiceExpr{
				pos: position{line: 2052, col: 16, offset: 59028},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 2052, col: 16, offset: 59028},
						val:        "[[\\]<>(){}|!;,'\"*\\n\\r \\t&?+]",
						chars:      []rune{'[', ']', '<', '>', '(', ')', '{', '}', '|', '!', ';', ',', '\'', '"', '*', '\n', '\r', ' ', '\t', '&', '?', '+'},
						ignoreCase: false,
						inverted:   false,
					},
					&litMatcher{
						pos:        position{line: 2052, col: 47, offset: 59059},
						val:        "%21",
						ignoreCase: false,
						want:       "\"%21\"",
					},
					&litMatcher{
						pos:        position{line: 2052, col: 55, offset: 59067},
						val:        "%26",
						ignoreCase: false,
						want:       "\"%26\"",
					},
					&litMatcher{
						pos:        position{line: 2053, col: 16, offset: 59090},
						val:        "%2526",
						ignoreCase: false,
						want:       "\"%2526\"",
					},
					&litMatcher{
						pos:        position{line: 2053, col: 26, offset: 59100},
						val:        "%3B",
						ignoreCase: false,
						want:       "\"%3B\"",
					},
					&litMatcher{
						pos:        position{line: 2053, col: 34, offset: 59108},
						val:        "%7C",
						ignoreCase: false,
						want:       "\"%7C\"",
					},
					&litMatcher{
						pos:        position{line: 2053, col: 42, offset: 59116},
						val:        "%20",
						ignoreCase: false,
						want:       "\"%20\"",
					},
					&litMatcher{
						pos:        position{line: 2053, col: 50, offset: 59124},
						val:        "%2B",
						ignoreCase: false,
						want:       "\"%2B\"",
					},
					&litMatcher{
						pos:        position{line: 2053, col: 58, offset: 59132},
						val:        "%3D",
						ignoreCase: false,
						want:       "\"%3D\"",
					},
					&litMatcher{
						pos:        position{line: 2053, col: 66, offset: 59140},
						val:        "--",
						ignoreCase: false,
						want:       "\"--\"",
					},
					&litMatcher{
						pos:        position{line: 2054, col: 16, offset: 59162},
						val:        "%2520",
						ignoreCase: false,
						want:       "\"%2520\"",
					},
					&litMatcher{
						pos:        position{line: 2054, col: 26, offset: 59172},
						val:        "%5D",
						ignoreCase: false,
						want:       "\"%5D\"",
					},
					&litMatcher{
						pos:        position{line: 2054, col: 34, offset: 59180},
						val:        "%5B",
						ignoreCase: false,
						want:       "\"%5B\"",
					},
					&litMatcher{
						pos:        position{line: 2054, col: 42, offset: 59188},
						val:        "%3A",
						ignoreCase: false,
						want:       "\"%3A\"",
					},
					&litMatcher{
						pos:        position{line: 2054, col: 50, offset: 59196},
						val:        "%0A",
						ignoreCase: false,
						want:       "\"%0A\"",
					},
					&litMatcher{
						pos:        position{line: 2054, col: 58, offset: 59204},
						val:        "%2C",
						ignoreCase: false,
						want:       "\"%2C\"",
					},
					&litMatcher{
						pos:        position{line: 2054, col: 66, offset: 59212},
						val:        "%28",
						ignoreCase: false,
						want:       "\"%28\"",
					},
					&litMatcher{
						pos:        position{line: 2054, col: 74, offset: 59220},
						val:        "%29",
						ignoreCase: false,
						want:       "\"%29\"",
					},
				},
			},
		},
		{
			name: "MINOR_BREAK",
			pos:  position{line: 2055, col: 1, offset: 59226},
			expr: &choiceExpr{
				pos: position{line: 2055, col: 16, offset: 59241},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 2055, col: 16, offset: 59241},
						val:        "[/:=@.$#%_]",
						chars:      []rune{'/', ':', '=', '@', '.', '$', '#', '%', '_'},
						ignoreCase: false,
						inverted:   false,
					},
					&litMatcher{
						pos:        position{line: 2055, col: 30, offset: 59255},
						val:        "-",
						ignoreCase: false,
						want:       "\"-\"",
					},
					&litMatcher{
						pos:        position{line: 2055, col: 36, offset: 59261},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "NOT",
			pos:  position{line: 2059, col: 1, offset: 59417},
			expr: &seqExpr{
				pos: position{line: 2059, col: 8, offset: 59424},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2059, col: 8, offset: 59424},
						val:        "NOT",
						ignoreCase: false,
						want:       "\"NOT\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2059, col: 14, offset: 59430},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "OR",
			pos:  position{line: 2060, col: 1, offset: 59436},
			expr: &seqExpr{
				pos: position{line: 2060, col: 7, offset: 59442},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 2060, col: 7, offset: 59442},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 2060, col: 13, offset: 59448},
						val:        "OR",
						ignoreCase: false,
						want:       "\"OR\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2060, col: 18, offset: 59453},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "AND",
			pos:  position{line: 2061, col: 1, offset: 59459},
			expr: &seqExpr{
				pos: position{line: 2061, col: 8, offset: 59466},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 2061, col: 8, offset: 59466},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 2061, col: 14, offset: 59472},
						val:        "AND",
						ignoreCase: false,
						want:       "\"AND\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2061, col: 20, offset: 59478},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "PIPE",
			pos:  position{line: 2062, col: 1, offset: 59484},
			expr: &seqExpr{
				pos: position{line: 2062, col: 9, offset: 59492},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 2062, col: 9, offset: 59492},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 2062, col: 15, offset: 59498},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2062, col: 19, offset: 59502},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 2063, col: 1, offset: 59508},
			expr: &seqExpr{
				pos: position{line: 2063, col: 7, offset: 59514},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 2063, col: 7, offset: 59514},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 2063, col: 13, offset: 59520},
						val:        "as",
						ignoreCase: true,
						want:       "\"AS\"i",
					},
					&ruleRefExpr{
						pos:  position{line: 2063, col: 19, offset: 59526},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 2064, col: 1, offset: 59552},
			expr: &seqExpr{
				pos: position{line: 2064, col: 7, offset: 59558},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 2064, col: 7, offset: 59558},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 2064, col: 13, offset: 59564},
						val:        "by",
						ignoreCase: true,
						want:       "\"BY\"i",
					},
					&ruleRefExpr{
						pos:  position{line: 2064, col: 19, offset: 59570},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "EQUAL",
			pos:  position{line: 2066, col: 1, offset: 59597},
			expr: &seqExpr{
				pos: position{line: 2066, col: 10, offset: 59606},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 2066, col: 10, offset: 59606},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 2066, col: 25, offset: 59621},
						val:        "=",
						ignoreCase: false,
						want:       "\"=\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2066, col: 29, offset: 59625},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "COMMA",
			pos:  position{line: 2067, col: 1, offset: 59640},
			expr: &seqExpr{
				pos: position{line: 2067, col: 10, offset: 59649},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 2067, col: 10, offset: 59649},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 2067, col: 25, offset: 59664},
						val:        ",",
						ignoreCase: false,
						want:       "\",\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2067, col: 29, offset: 59668},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "L_PAREN",
			pos:  position{line: 2068, col: 1, offset: 59683},
			expr: &seqExpr{
				pos: position{line: 2068, col: 12, offset: 59694},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2068, col: 12, offset: 59694},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2068, col: 16, offset: 59698},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "R_PAREN",
			pos:  position{line: 2069, col: 1, offset: 59713},
			expr: &seqExpr{
				pos: position{line: 2069, col: 12, offset: 59724},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 2069, col: 12, offset: 59724},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 2069, col: 27, offset: 59739},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2071, col: 1, offset: 59744},
			expr: &notExpr{
				pos: position{line: 2071, col: 8, offset: 59751},
				expr: &anyMatcher{
					line: 2071, col: 9, offset: 59752,
				},
			},
		},
		{
			name: "SPACE",
			pos:  position{line: 2072, col: 1, offset: 59754},
			expr: &choiceExpr{
				pos: position{line: 2072, col: 10, offset: 59763},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 2072, col: 11, offset: 59764},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 2072, col: 11, offset: 59764},
								expr: &litMatcher{
									pos:        position{line: 2072, col: 11, offset: 59764},
									val:        " ",
									ignoreCase: false,
									want:       "\" \"",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 2072, col: 16, offset: 59769},
								name: "COMMENT",
							},
							&zeroOrOneExpr{
								pos: position{line: 2072, col: 24, offset: 59777},
								expr: &litMatcher{
									pos:        position{line: 2072, col: 24, offset: 59777},
									val:        " ",
									ignoreCase: false,
									want:       "\" \"",
								},
							},
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 2072, col: 32, offset: 59785},
						expr: &litMatcher{
							pos:        position{line: 2072, col: 32, offset: 59785},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
				},
			},
		},
		{
			name: "COMMENT",
			pos:  position{line: 2073, col: 1, offset: 59790},
			expr: &seqExpr{
				pos: position{line: 2073, col: 12, offset: 59801},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2073, col: 12, offset: 59801},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2073, col: 18, offset: 59807},
						expr: &seqExpr{
							pos: position{line: 2073, col: 19, offset: 59808},
							exprs: []any{
								&notExpr{
									pos: position{line: 2073, col: 19, offset: 59808},
									expr: &litMatcher{
										pos:        position{line: 2073, col: 21, offset: 59810},
										val:        "```",
										ignoreCase: false,
										want:       "\"```\"",
									},
								},
								&anyMatcher{
									line: 2073, col: 28, offset: 59817,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 2073, col: 32, offset: 59821},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
				},
			},
		},
		{
			name: "EMPTY_OR_SPACE",
			pos:  position{line: 2074, col: 1, offset: 59827},
			expr: &choiceExpr{
				pos: position{line: 2074, col: 20, offset: 59846},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 2074, col: 20, offset: 59846},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 2074, col: 28, offset: 59854},
						val:        "",
						ignoreCase: false,
						want:       "\"\"",
					},
				},
			},
		},
	},
}

func (c *current) onStart1(initialSearch, filterBlocks, queryAggBlocks any) (any, error) {
	var q ast.QueryStruct
	q.SearchFilter = initialSearch.(*ast.Node)

	// Join the InitialSearchBlock with the FilterBlocks with AND nodes. For a
	// search like "A | B | C | D" we should generate the node structure below
	// so that when we run the search it evaluates A first.
	//
	//      AND
	//     /   \
	//    A     AND
	//         /   \
	//        B     AND
	//             /   \
	//            C     D

	filterBlocksSlice := filterBlocks.([]any)
	switch len(filterBlocksSlice) {
	case 0:
		q.SearchFilter = initialSearch.(*ast.Node)
	case 1:
		q.SearchFilter = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     initialSearch.(*ast.Node),
			Right:    filterBlocksSlice[0].(*ast.Node),
		}
	default: // len > 1
		// Iterate backwards so we build the node structure mentioned above.
		root := filterBlocksSlice[len(filterBlocksSlice)-1].(*ast.Node)
		for i := len(filterBlocksSlice) - 2; i > -1; i-- {
			newRoot := &ast.Node{
				NodeType: ast.NodeAnd,
				Left:     filterBlocksSlice[i].(*ast.Node),
				Right:    root,
			}

			root = newRoot
		}

		q.SearchFilter = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     initialSearch.(*ast.Node),
			Right:    root,
		}
	}

	if queryAggBlocks != nil {
		queryAggSlice := queryAggBlocks.([]any)

		if len(queryAggSlice) > 0 {
			// Chain together all QueryAggergators.
			q.PipeCommands = queryAggSlice[0].(*structs.QueryAggregators)

			// Go to the end of the first chain.
			curQueryAgg := q.PipeCommands
			for ; curQueryAgg.Next != nil; curQueryAgg = curQueryAgg.Next {
			}

			// Link the remaining chains.
			for i := range queryAggSlice[1:] {
				queryAgg := queryAggSlice[i+1].(*structs.QueryAggregators)
				curQueryAgg.Next = queryAgg

				// Go to the end of this chain.
				for ; curQueryAgg.Next != nil; curQueryAgg = curQueryAgg.Next {
				}
			}
		}
	}

	return q, nil
}

func (p *parser) callonStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStart1(stack["initialSearch"], stack["filterBlocks"], stack["queryAggBlocks"])
}

func (c *current) onInitialSearchBlock1(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonInitialSearchBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialSearchBlock1(stack["clause"])
}

func (c *current) onSearchBlock1(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonSearchBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBlock1(stack["clause"])
}

func (c *current) onFilterBlock1(block any) (any, error) {
	return block, nil
}

func (p *parser) callonFilterBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterBlock1(stack["block"])
}

func (c *current) onQueryAggergatorBlock1(block any) (any, error) {
	queryAgg := block.(*structs.QueryAggregators)
	return queryAgg, nil
}

func (p *parser) callonQueryAggergatorBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQueryAggergatorBlock1(stack["block"])
}

func (c *current) onFieldSelectBlock1(op, fields any) (any, error) {
	columnsRequest := &structs.ColumnsRequest{}
	if op == nil || string(op.([]byte)) == "+" {
		columnsRequest.IncludeColumns = fields.([]string)
	} else {
		columnsRequest.ExcludeColumns = fields.([]string)
	}

	queryAggregator := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			OutputColumns: columnsRequest,
		},
	}

	return queryAggregator, nil
}

func (p *parser) callonFieldSelectBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldSelectBlock1(stack["op"], stack["fields"])
}

func (c *current) onAggregatorBlock1(aggs, byFields any) (any, error) {
	aggNode := &structs.QueryAggregators{}

	// Extract the MeasureAggregators and check if any of the aggregation fields
	// need to be renamed.
	aggsSlice := aggs.([]*aggregator)
	measureAggs := make([]*structs.MeasureAggregator, len(aggsSlice))
	columnsRequest := &structs.ColumnsRequest{}
	columnsRequest.RenameAggregationColumns = make(map[string]string, 0)

	for i, agg := range aggsSlice {
		measureAggs[i] = agg.measureAgg

		if agg.renameOutputField {
			columnsRequest.RenameAggregationColumns[measureAggs[i].String()] = agg.outputFieldNewName
		}
	}

	// If any agg field was renamed, make a QueryAggregators for all the renames.
	if len(columnsRequest.RenameAggregationColumns) > 0 {
		renameNode := &structs.QueryAggregators{
			PipeCommandType: structs.OutputTransformType,
			OutputTransforms: &structs.OutputTransforms{
				OutputColumns: columnsRequest,
			},
		}

		aggNode.Next = renameNode
	}

	if byFields == nil {
		aggNode.PipeCommandType = structs.MeasureAggsType
		aggNode.MeasureOperations = measureAggs
	} else {
		aggNode.PipeCommandType = structs.GroupByType
		aggNode.GroupByRequest = &structs.GroupByRequest{
			MeasureOperations: measureAggs,
			GroupByColumns:    byFields.([]string),
		}
		aggNode.BucketLimit = query.MAX_GRP_BUCKS
	}

	return aggNode, nil
}

func (p *parser) callonAggregatorBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregatorBlock1(stack["aggs"], stack["byFields"])
}

func (c *current) onGroupbyBlock1(fields any) (any, error) {
	// Wildcard fields are not allowed. See https://docs.splunk.com/Documentation/Splunk/9.1.0/SearchReference/Stats
	for _, field := range fields.([]string) {
		if strings.Contains(field, "*") {
			return nil, errors.New("BY clause cannot contain fields with wildcards")
		}
	}

	return fields, nil
}

func (p *parser) callonGroupbyBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupbyBlock1(stack["fields"])
}

func (c *current) onRegexBlock1(keyAndOp, str any) (any, error) {
	var key, op string
	if keyAndOp == nil {
		key = "*"
		op = "="
	} else {
		keyAndOpSlice := keyAndOp.([]any)
		key = keyAndOpSlice[0].(string)
		op = keyAndOpSlice[1].(string)
	}

	// Remove the quotation marks.
	regex := str.(string)
	regex = regex[1 : len(regex)-1]

	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:           op,
			Field:        key,
			Values:       regex,
			ValueIsRegex: true,
		},
	}

	return node, nil
}

func (p *parser) callonRegexBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexBlock1(stack["keyAndOp"], stack["str"])
}

func (c *current) onClauseLevel41(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*ast.Node)
	for _, v := range rest.([]any) {
		parts := v.([]any) // This will be [(AND / SPACE), ClauseLevel3].
		cur = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     cur,
			Right:    parts[1].(*ast.Node),
		}
	}

	return cur, nil
}

func (p *parser) callonClauseLevel41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel41(stack["first"], stack["rest"])
}

func (c *current) onClauseLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*ast.Node)
	for _, v := range rest.([]any) {
		parts := v.([]any) // This will be [OR, ClauseLevel2].
		cur = &ast.Node{
			NodeType: ast.NodeOr,
			Left:     cur,
			Right:    parts[1].(*ast.Node),
		}
	}

	return cur, nil
}

func (p *parser) callonClauseLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel31(stack["first"], stack["rest"])
}

func (c *current) onClauseLevel22(notList, first any) (any, error) {
	// There's an issue with how queries with AST Not nodes are run, so use
	// De Morgan's law to manipulate the expression.
	node := first.(*ast.Node)
	numNots := len(notList.([]any))

	if numNots%2 == 1 {
		deMorgansLaw(node)
	}

	return node, nil
}

func (p *parser) callonClauseLevel22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel22(stack["notList"], stack["first"])
}

func (c *current) onClauseLevel29(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonClauseLevel29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel29(stack["clause"])
}

func (c *current) onClauseLevel12(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonClauseLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel12(stack["clause"])
}

func (c *current) onClauseLevel18(term any) (any, error) {
	return term, nil
}

func (p *parser) callonClauseLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel18(stack["term"])
}

func (c *current) onSearchTerm1(term any) (any, error) {
	return term, nil
}

func (p *parser) callonSearchTerm1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchTerm1(stack["term"])
}

func (c *current) onTimechartBlock1(binOptions, expr, limitExpr any) (any, error) {
	aggNode := &structs.QueryAggregators{}

	columnsRequest := &structs.ColumnsRequest{}
	columnsRequest.RenameAggregationColumns = make(map[string]string, 0)
	measureAggs := make([]*structs.MeasureAggregator, 0)

	timechartExpr := &structs.TimechartExpr{}
	byField := ""

	switch expr.(type) {
	case *singleAggTemp:
		singleAgg := &structs.SingleAgg{}
		aggTemp := expr.(*singleAggTemp)

		for i, agg := range aggTemp.aggregators {
			measureAggs = append(measureAggs, agg.measureAgg)

			if agg.renameOutputField {
				measureAggs[i].StrEnc = agg.outputFieldNewName
			}
		}

		singleAgg.MeasureOperations = measureAggs
		timechartExpr.SingleAgg = singleAgg

		if aggTemp.SplitByClause != nil {
			byField = aggTemp.SplitByClause.Field
		}
	//  case (<eval-expression>) BY <split-by-clause>) to be finished
	default:
		return nil, fmt.Errorf("Spl peg: Timechart: either single-agg or eval-expression BY split-by-clause is required")
	}

	aggNode.PipeCommandType = structs.GroupByType
	aggNode.GroupByRequest = &structs.GroupByRequest{
		MeasureOperations: measureAggs,
		GroupByColumns:    []string{"timestamp"},
	}
	aggNode.BucketLimit = query.MAX_GRP_BUCKS

	bOptions := binOptions.(*structs.BinOptions)

	var limitExprTmp *structs.LimitExpr
	if limitExpr != nil {
		limitExprTmp = limitExpr.(*structs.LimitExpr)
		if len(measureAggs) > 1 {
			limitExprTmp.LimitScoreMode = structs.LSMByFreq
		}
	}

	timeBucket := aggregations.InitTimeBucket(bOptions.SpanOptions.SpanLength.Num, bOptions.SpanOptions.SpanLength.TimeScalr, byField, limitExprTmp, len(measureAggs))
	aggNode.TimeHistogram = timeBucket

	return aggNode, nil
}

func (p *parser) callonTimechartBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimechartBlock1(stack["binOptions"], stack["expr"], stack["limitExpr"])
}

func (c *current) onSingleAggExpr1(aggs, splitByClause any) (any, error) {
	singleAggExpr := &singleAggTemp{
		aggregators: aggs.([]*aggregator),
	}

	if splitByClause != nil {
		singleAggExpr.SplitByClause = splitByClause.(*structs.SplitByClause)
	}

	return singleAggExpr, nil
}

func (p *parser) callonSingleAggExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleAggExpr1(stack["aggs"], stack["splitByClause"])
}

func (c *current) onSplitByClause1(field, tcOptions any) (any, error) {
	splitByClause := &structs.SplitByClause{
		Field: field.(string),
	}

	if tcOptions != nil {
		splitByClause.TcOptions = tcOptions.(*structs.TcOptions)
	}
	return splitByClause, nil
}

func (p *parser) callonSplitByClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSplitByClause1(stack["field"], stack["tcOptions"])
}

func (c *current) onTcOptions1(option any) (any, error) {
	//Default value
	tcOptions := &structs.TcOptions{
		UseNull:  true,
		UseOther: true,
		NullStr:  "null",
		OtherStr: "other",
	}
	switch option.(type) {
	case *structs.BinOptions:
		tcOptions.BinOptions = option.(*structs.BinOptions)
	case [][]string:
		optionSlice := option.([]any)
		for _, opt := range optionSlice {
			optArr := opt.([]string)
			switch optArr[0] {
			case "usenull":
				useNullBool, err := strconv.ParseBool(optArr[1])
				if err != nil {
					return nil, fmt.Errorf("Spl peg: Timechart: TcOptions: %v", err)
				}
				tcOptions.UseNull = useNullBool
			case "useother":
				useOtherBool, err := strconv.ParseBool(optArr[1])
				if err != nil {
					return nil, fmt.Errorf("Spl peg: Timechart: TcOptions: %v", err)
				}
				tcOptions.UseOther = useOtherBool
			case "nullstr":
				tcOptions.OtherStr = optArr[1]
			case "otherstr":
				tcOptions.OtherStr = optArr[1]
			default:
				return nil, fmt.Errorf("Spl peg: Timechart: TcOptions: invalid option: %v", optArr[0])
			}

		}
	default:
		return nil, fmt.Errorf("Spl peg: Timechart: Invalid tcOptions %v", option)
	}
	return tcOptions, nil
}

func (p *parser) callonTcOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTcOptions1(stack["option"])
}

func (c *current) onTcOption1(tcOptionCMD, val any) (any, error) {
	tcOptionArr := []string{tcOptionCMD.(string), val.(string)}
	return tcOptionArr, nil
}

func (p *parser) callonTcOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTcOption1(stack["tcOptionCMD"], stack["val"])
}

func (c *current) onTcOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Timechart: TcOptionCMD: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonTcOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTcOptionCMD1(stack["option"])
}

func (c *current) onBinOptions1(spanOptions any) (any, error) {
	binOptions := &structs.BinOptions{
		SpanOptions: spanOptions.(*structs.SpanOptions),
	}
	return binOptions, nil
}

func (p *parser) callonBinOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptions1(stack["spanOptions"])
}

func (c *current) onSpanOptions1(spanLength any) (any, error) {
	spanOptions := &structs.SpanOptions{
		SpanLength: spanLength.(*structs.SpanLength),
	}
	return spanOptions, nil
}

func (p *parser) callonSpanOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpanOptions1(stack["spanLength"])
}

func (c *current) onSpanLength1(intAsStr, timeScale any) (any, error) {
	num, err := strconv.Atoi(intAsStr.(string))
	if err != nil {
		return nil, fmt.Errorf("SpanLength: Invalid num (%v): %v", intAsStr.(string), err)
	}

	spanLength := &structs.SpanLength{
		Num:       num,
		TimeScalr: timeScale.(utils.TimeUnit),
	}
	return spanLength, nil
}

func (p *parser) callonSpanLength1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpanLength1(stack["intAsStr"], stack["timeScale"])
}

func (c *current) onTimeScale1(timeUnit any) (any, error) {
	return timeUnit, nil
}

func (p *parser) callonTimeScale1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimeScale1(stack["timeUnit"])
}

func (c *current) onLimitExpr1(sortBy, intAsStr any) (any, error) {
	num, err := strconv.Atoi(intAsStr.(string))
	if err != nil {
		return nil, fmt.Errorf("SpanLength: Invalid num (%v): %v", intAsStr.(string), err)
	}

	limitExpr := &structs.LimitExpr{
		IsTop: true, // Default Value
		Num:   num,
	}

	if sortBy != nil {
		sortByStr, err := transferUint8ToString(sortBy)
		if err != nil {
			return nil, fmt.Errorf("Spl peg: Timechart: %v", err)
		}
		if sortByStr == "bottom" {
			limitExpr.IsTop = false
		}
	}

	return limitExpr, nil
}

func (p *parser) callonLimitExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitExpr1(stack["sortBy"], stack["intAsStr"])
}

func (c *current) onStatisticBlock1(statisticExpr any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		StatisticColRequest: statisticExpr.(*structs.StatisticExpr),
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	measureAgg := &structs.MeasureAggregator{
		MeasureCol:  "*",
		MeasureFunc: utils.Count,
	}

	measureOperations := make([]*structs.MeasureAggregator, 1)
	measureOperations[0] = measureAgg

	groupByColumns := append(statisticExpr.(*structs.StatisticExpr).FieldList, statisticExpr.(*structs.StatisticExpr).ByClause...)

	aggNode := &structs.QueryAggregators{}
	aggNode.Next = root
	aggNode.PipeCommandType = structs.GroupByType
	aggNode.GroupByRequest = &structs.GroupByRequest{
		MeasureOperations: measureOperations,
		GroupByColumns:    groupByColumns,
	}

	return aggNode, nil
}

func (p *parser) callonStatisticBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticBlock1(stack["statisticExpr"])
}

func (c *current) onStatisticExpr1(cmd, limit, fieldList, byClause, options any) (any, error) {

	statisticExpr := &structs.StatisticExpr{
		FieldList: fieldList.([]interface{})[1].([]string),
	}

	statisticCmd, err := transferUint8ToString(cmd)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: StatisticExpr: %v", err)
	}

	if statisticCmd == "top" {
		statisticExpr.StatisticFunctionMode = structs.SFMTop
	} else {
		statisticExpr.StatisticFunctionMode = structs.SFMRare
	}

	if limit != nil {
		statisticExpr.Limit = limit.(string)
	}

	if options != nil {
		statisticExpr.Options = options.(*structs.Options)
	} else {
		statisticExpr.Options = &structs.Options{
			ShowCount:    true,
			CountField:   "count",
			ShowPerc:     true,
			PercentField: "percent",
			UseOther:     false,
			OtherStr:     "Other",
		}
	}

	if byClause != nil {
		statisticExpr.ByClause = byClause.([]string)
	}

	return statisticExpr, nil
}

func (p *parser) callonStatisticExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticExpr1(stack["cmd"], stack["limit"], stack["fieldList"], stack["byClause"], stack["options"])
}

func (c *current) onStatisticLimit2(number any) (any, error) {
	return number.(string), nil
}

func (p *parser) callonStatisticLimit2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticLimit2(stack["number"])
}

func (c *current) onStatisticLimit7(limit any) (any, error) {
	return limit.(string), nil
}

func (p *parser) callonStatisticLimit7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticLimit7(stack["limit"])
}

func (c *current) onOptions1(option any) (any, error) {
	//Default value
	options := &structs.Options{
		ShowCount:    true,
		CountField:   "count",
		ShowPerc:     true,
		PercentField: "percent",
		UseOther:     false,
		OtherStr:     "other",
	}

	optionSlice := option.([]any)
	for _, opt := range optionSlice {
		optArr := opt.([]string)
		// Check for matching option types
		switch optArr[0] {
		case "showcount":
			showCountBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.ShowCount = showCountBool
		case "countfield":
			options.CountField = optArr[1]
		case "showperc":
			showPercBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.ShowPerc = showPercBool
		case "percentfield":
			options.PercentField = optArr[1]
		case "useother":
			useOtherBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.UseOther = useOtherBool
		case "otherstr":
			options.OtherStr = optArr[1]
		default:
			return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: invalid option")
		}
	}

	return options, nil
}

func (p *parser) callonOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptions1(stack["option"])
}

func (c *current) onOption1(optionCMD, field any) (any, error) {
	optionArr := []string{optionCMD.(string), field.(string)}
	return optionArr, nil
}

func (p *parser) callonOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOption1(stack["optionCMD"], stack["field"])
}

func (c *current) onOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: StatisticExpr: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionCMD1(stack["option"])
}

func (c *current) onByClause2(fieldList any) (any, error) {
	return fieldList.([]string), nil
}

func (p *parser) callonByClause2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByClause2(stack["fieldList"])
}

func (c *current) onByClause7(groupByBlock any) (any, error) {
	return groupByBlock.([]string), nil
}

func (p *parser) callonByClause7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByClause7(stack["groupByBlock"])
}

func (c *current) onRenameBlock1(renameExpr any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		RenameColRequest: renameExpr.(*structs.RenameExpr),
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonRenameBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameBlock1(stack["renameExpr"])
}

func (c *current) onRenameExpr2(originalPattern, newPattern any) (any, error) {
	renameExpr := &structs.RenameExpr{
		RenameExprMode:  structs.REMPhrase,
		OriginalPattern: originalPattern.(string),
		NewPattern:      removeQuotes(newPattern),
	}

	return renameExpr, nil
}

func (p *parser) callonRenameExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameExpr2(stack["originalPattern"], stack["newPattern"])
}

func (c *current) onRenameExpr9(originalPattern, newPattern any) (any, error) {
	isRegex, err := isRegexRename(originalPattern.(string), newPattern.(string))
	if err != nil {
		return nil, fmt.Errorf("Spl peg: RenameExpr: %v", err)
	}

	var renameExprMode structs.RenameExprMode
	if isRegex {
		renameExprMode = structs.REMRegex
	} else {
		renameExprMode = structs.REMOverride
	}

	renameExpr := &structs.RenameExpr{
		RenameExprMode:  renameExprMode,
		OriginalPattern: originalPattern.(string),
		NewPattern:      newPattern.(string),
	}

	return renameExpr, nil
}

func (p *parser) callonRenameExpr9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameExpr9(stack["originalPattern"], stack["newPattern"])
}

func (c *current) onRexBlock1(field, str any) (any, error) {
	pattern := removeQuotes(str)
	rexColNames, err := getRexColNames(pattern)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: RexBlock: %v", err)
	}
	rexExpr := &structs.RexExpr{
		FieldName:   field.(string),
		Pattern:     transferPCREToRE2(pattern),
		RexColNames: rexColNames,
	}

	letColReq := &structs.LetColumnsRequest{
		RexColRequest: rexExpr,
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonRexBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRexBlock1(stack["field"], stack["str"])
}

func (c *current) onEvalBlock1(first, rest any) (any, error) {
	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: first.(*structs.LetColumnsRequest),
		},
	}

	leafQueryAgg := root
	restSlice := rest.([]any)
	for i := range restSlice {
		CommaSpaceAndEval := restSlice[i].([]any)
		nextQueryAgg := &structs.QueryAggregators{
			PipeCommandType: structs.OutputTransformType,
			OutputTransforms: &structs.OutputTransforms{
				LetColumns: CommaSpaceAndEval[1].(*structs.LetColumnsRequest),
			},
		}

		leafQueryAgg.Next = nextQueryAgg
		leafQueryAgg = leafQueryAgg.Next
	}

	return root, nil
}

func (p *parser) callonEvalBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalBlock1(stack["first"], stack["rest"])
}

func (c *current) onSingleEval1(field, expr any) (any, error) {
	fieldStr := field.(string)
	if strings.Contains(fieldStr, "*") {
		return nil, fmt.Errorf("New fields must not contain wildcards; invalid field: %v", field)
	}

	letColumnsRequest := expr.(*structs.LetColumnsRequest)
	letColumnsRequest.NewColName = fieldStr

	return letColumnsRequest, nil
}

func (p *parser) callonSingleEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleEval1(stack["field"], stack["expr"])
}

func (c *current) onEvalExpression1(value any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		ValueColRequest: value.(*structs.ValueExpr),
	}

	return letColReq, nil
}

func (p *parser) callonEvalExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalExpression1(stack["value"])
}

func (c *current) onConditionExpr1(condition, trueValue, falseValue any) (any, error) {

	node := &structs.ConditionExpr{
		Op:         "if",
		BoolExpr:   condition.(*structs.BoolExpr),
		TrueValue:  trueValue.(*structs.ValueExpr),
		FalseValue: falseValue.(*structs.ValueExpr),
	}

	return node, nil
}

func (p *parser) callonConditionExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr1(stack["condition"], stack["trueValue"], stack["falseValue"])
}

func (c *current) onTextExpr2(opName, stringExpr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:          opNameStr,
		Value:       stringExpr.(*structs.StringExpr),
		StrToRemove: "",
	}

	return node, nil
}

func (p *parser) callonTextExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr2(stack["opName"], stack["stringExpr"])
}

func (c *current) onTextExpr10(opName, firstVal, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	if rest == nil {
		return firstVal, nil
	}
	restSlice := rest.([]any)
	values := make([]*structs.StringExpr, 1+len(restSlice))
	values[0] = firstVal.(*structs.StringExpr)

	for i := range restSlice {
		stringAtom := restSlice[i].([]any)
		values[i+1] = stringAtom[1].(*structs.StringExpr)
	}
	node := &structs.TextExpr{
		Op:           opNameStr,
		MaxMinValues: values,
	}
	return node, nil

}

func (p *parser) callonTextExpr10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr10(stack["opName"], stack["firstVal"], stack["rest"])
}

func (c *current) onTextExpr25(opName, url any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:          opNameStr,
		Value:       url.(*structs.StringExpr),
		StrToRemove: "",
	}
	return node, nil

}

func (p *parser) callonTextExpr25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr25(stack["opName"], stack["url"])
}

func (c *current) onTextExpr33(opName, stringExpr, delim any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:        opNameStr,
		Value:     stringExpr.(*structs.StringExpr),
		Delimiter: delim.(*structs.StringExpr),
	}
	return node, nil
}

func (p *parser) callonTextExpr33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr33(stack["opName"], stack["stringExpr"], stack["delim"])
}

func (c *current) onTextExpr44(opName, stringExpr, startIndex, lengthParam any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	stringExprConverted, ok := stringExpr.(*structs.StringExpr)
	if !ok {
		return nil, fmt.Errorf("Spl peg: TextExpr: Failed to assert stringExpr as *structs.StringExpr")
	}
	startIndexConverted, ok := startIndex.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Spl peg: TextExpr: Failed to assert startIndex as *structs.NumericExpr")
	}
	var lengthConverted *structs.NumericExpr
	if lengthParam != nil {
		lengthSlice, ok := lengthParam.([]interface{})
		if ok && len(lengthSlice) > 1 {
			length, ok := lengthSlice[1].(*structs.NumericExpr)
			if ok {
				lengthConverted = length
			} else {
				return nil, fmt.Errorf("Spl peg: TextExpr: Unable to assert length as *structs.NumericExpr")
			}
		}
	}
	node := &structs.TextExpr{
		Op:         opNameStr,
		Value:      stringExprConverted,
		StartIndex: startIndexConverted,
		LengthExpr: lengthConverted,
	}
	return node, nil
}

func (p *parser) callonTextExpr44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr44(stack["opName"], stack["stringExpr"], stack["startIndex"], stack["lengthParam"])
}

func (c *current) onTextExpr60(value, format any) (any, error) {
	var formatExpr *structs.StringExpr
	if format != nil {
		formatSlice := format.([]interface{})
		formatExpr, _ = formatSlice[1].(*structs.StringExpr)
	}
	return &structs.TextExpr{
		IsTerminal: false,
		Op:         "tostring",
		Val:        value.(*structs.ValueExpr),
		Format:     formatExpr,
	}, nil
}

func (p *parser) callonTextExpr60() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr60(stack["value"], stack["format"])
}

func (c *current) onTextExpr72(opName, expr, strToRemoveExpr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}

	stringExpr, ok := expr.(*structs.StringExpr)
	if !ok {
		return nil, fmt.Errorf("Spl peg: TextExpr: Failed to assert expr as *structs.StringExpr: %v", err)
	}

	strToRemove := " \t"
	if strToRemoveExpr != nil {
		strToRemove = strToRemoveExpr.(string)
	}

	node := &structs.TextExpr{
		Op:          opNameStr,
		Value:       stringExpr,
		StrToRemove: removeQuotes(strToRemove),
	}

	return node, nil
}

func (p *parser) callonTextExpr72() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr72(stack["opName"], stack["expr"], stack["strToRemoveExpr"])
}

func (c *current) onStrToRemoveExpr1(strToRemove any) (any, error) {
	return strToRemove, nil
}

func (p *parser) callonStrToRemoveExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStrToRemoveExpr1(stack["strToRemove"])
}

func (c *current) onEvalFieldToRead2() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEvalFieldToRead2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalFieldToRead2()
}

func (c *current) onEvalFieldToRead8(field any) (any, error) {
	return field, nil
}

func (p *parser) callonEvalFieldToRead8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalFieldToRead8(stack["field"])
}

func (c *current) onWhereBlock1(condition any) (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			FilterRows: condition.(*structs.BoolExpr),
		},
	}

	return queryAgg, nil
}

func (p *parser) callonWhereBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereBlock1(stack["condition"])
}

func (c *current) onBoolExpr1(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonBoolExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExpr1(stack["expr"])
}

func (c *current) onBoolExprLevel41(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.BoolExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.BoolExpr{
			IsTerminal: false,
			BoolOp:     structs.BoolOpOr,
			LeftBool:   cur,
			RightBool:  opAndClause[1].(*structs.BoolExpr),
		}
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel41(stack["first"], stack["rest"])
}

func (c *current) onBoolExprLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.BoolExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.BoolExpr{
			IsTerminal: false,
			BoolOp:     structs.BoolOpAnd,
			LeftBool:   cur,
			RightBool:  opAndClause[1].(*structs.BoolExpr),
		}
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel31(stack["first"], stack["rest"])
}

func (c *current) onBoolExprLevel22(first any) (any, error) {
	cur := &structs.BoolExpr{
		IsTerminal: false,
		BoolOp:     structs.BoolOpNot,
		LeftBool:   first.(*structs.BoolExpr),
		RightBool:  nil,
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel22(stack["first"])
}

func (c *current) onBoolExprLevel29(first any) (any, error) {
	return first, nil
}

func (p *parser) callonBoolExprLevel29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel29(stack["first"])
}

func (c *current) onBoolExprLevel12(first any) (any, error) {
	return first, nil
}

func (p *parser) callonBoolExprLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel12(stack["first"])
}

func (c *current) onBoolExprLevel18(op, value any) (any, error) {
	opNameStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: BoolExpr: %v", err)
	}
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  value.(*structs.ValueExpr),
		RightValue: nil,
		ValueOp:    opNameStr,
	}
	return expr, nil
}

func (p *parser) callonBoolExprLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel18(stack["op"], stack["value"])
}

func (c *current) onBoolExprLevel120(likeExpr any) (any, error) {
	return likeExpr, nil
}

func (p *parser) callonBoolExprLevel120() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel120(stack["likeExpr"])
}

func (c *current) onLikeExpr2(left, right any) (any, error) {
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  left.(*structs.ValueExpr),
		RightValue: right.(*structs.ValueExpr),
		ValueOp:    "like",
	}
	return expr, nil
}

func (p *parser) callonLikeExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLikeExpr2(stack["left"], stack["right"])
}

func (c *current) onLikeExpr11(stringr, pattern any) (any, error) {
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  stringr.(*structs.ValueExpr),
		RightValue: pattern.(*structs.ValueExpr),
		ValueOp:    "like",
	}
	return expr, nil

}

func (p *parser) callonLikeExpr11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLikeExpr11(stack["stringr"], stack["pattern"])
}

func (c *current) onLikeExpr21(stringVal, pattern any) (any, error) {
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  stringVal.(*structs.ValueExpr),
		RightValue: pattern.(*structs.ValueExpr),
		ValueOp:    "match",
	}
	return expr, nil

}

func (p *parser) callonLikeExpr21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLikeExpr21(stack["stringVal"], stack["pattern"])
}

func (c *current) onLikeExpr31(cidr, ip any) (any, error) {
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  cidr.(*structs.ValueExpr),
		RightValue: ip.(*structs.ValueExpr),
		ValueOp:    "cidrmatch",
	}
	return expr, nil
}

func (p *parser) callonLikeExpr31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLikeExpr31(stack["cidr"], stack["ip"])
}

func (c *current) onLikeExpr41(inExpr any) (any, error) {
	return inExpr, nil
}

func (p *parser) callonLikeExpr41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLikeExpr41(stack["inExpr"])
}

func (c *current) onLikeExpr44(boolComparisonExpr any) (any, error) {
	return boolComparisonExpr, nil
}

func (p *parser) callonLikeExpr44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLikeExpr44(stack["boolComparisonExpr"])
}

func (c *current) onBoolComparisonExpr1(left, op, right any) (any, error) {
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  left.(*structs.ValueExpr),
		RightValue: right.(*structs.ValueExpr),
		ValueOp:    op.(string),
	}

	return expr, nil
}

func (p *parser) callonBoolComparisonExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolComparisonExpr1(stack["left"], stack["op"], stack["right"])
}

func (c *current) onInExpr2(left, valueToJudge, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ValueExpr, 1+len(restSlice))
	slice[0] = valueToJudge.(*structs.ValueExpr)

	for i := range restSlice {
		valueAtom := restSlice[i].([]any)
		slice[i+1] = valueAtom[1].(*structs.ValueExpr)
	}

	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  left.(*structs.ValueExpr),
		ValueList:  slice,
		ValueOp:    "in",
	}
	return expr, nil
}

func (p *parser) callonInExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInExpr2(stack["left"], stack["valueToJudge"], stack["rest"])
}

func (c *current) onInExpr17(valueToJudge, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ValueExpr, len(restSlice))

	for i := range restSlice {
		valueAtom := restSlice[i].([]any)
		slice[i] = valueAtom[1].(*structs.ValueExpr)
	}

	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  valueToJudge.(*structs.ValueExpr),
		ValueList:  slice,
		ValueOp:    "in",
	}
	return expr, nil
}

func (p *parser) callonInExpr17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInExpr17(stack["valueToJudge"], stack["rest"])
}

func (c *current) onValueExpr2(condition any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMConditionExpr,
		ConditionExpr: condition.(*structs.ConditionExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr2(stack["condition"])
}

func (c *current) onValueExpr5(condition any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMConditionExpr,
		ConditionExpr: condition.(*structs.ConditionExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr5(stack["condition"])
}

func (c *current) onValueExpr11(numeric any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMNumericExpr,
		NumericExpr:   numeric.(*structs.NumericExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr11(stack["numeric"])
}

func (c *current) onValueExpr14(str any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMStringExpr,
		StringExpr:    str.(*structs.StringExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr14(stack["str"])
}

func (c *current) onValueExpr17(str any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMStringExpr,
		StringExpr:    str.(*structs.StringExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr17(stack["str"])
}

func (c *current) onValueExpr23(boolean any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolean.(*structs.BoolExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr23(stack["boolean"])
}

func (c *current) onStringExpr2(text any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMTextExpr,
		TextExpr:       text.(*structs.TextExpr),
	}

	return expr, nil
}

func (p *parser) callonStringExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr2(stack["text"])
}

func (c *current) onStringExpr8(str any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMRawString,
		RawString:      removeQuotes(str),
	}

	return expr, nil
}

func (p *parser) callonStringExpr8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr8(stack["str"])
}

func (c *current) onStringExpr14(field any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMField,
		FieldName:      field.(string),
	}

	return expr, nil
}

func (p *parser) callonStringExpr14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr14(stack["field"])
}

func (c *current) onStringExpr26(concat any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMConcatExpr,
		ConcatExpr:     concat.(*structs.ConcatExpr),
	}

	return expr, nil
}

func (p *parser) callonStringExpr26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr26(stack["concat"])
}

func (c *current) onConcatExpr1(first, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ConcatAtom, 1+len(restSlice))
	slice[0] = first.(*structs.ConcatAtom)

	for i := range restSlice {
		concatAndAtom := restSlice[i].([]any)
		slice[i+1] = concatAndAtom[1].(*structs.ConcatAtom)
	}

	expr := &structs.ConcatExpr{
		Atoms: slice,
	}

	return expr, nil
}

func (p *parser) callonConcatExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatExpr1(stack["first"], stack["rest"])
}

func (c *current) onConcatAtom2(text any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField:  false,
		Value:    "",
		TextExpr: text.(*structs.TextExpr),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom2(stack["text"])
}

func (c *current) onConcatAtom5(str any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: false,
		Value:   removeQuotes(str),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom5(stack["str"])
}

func (c *current) onConcatAtom8(number any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: false,
		Value:   number.(string),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom8(stack["number"])
}

func (c *current) onConcatAtom11(field any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: true,
		Value:   field.(string),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom11(stack["field"])
}

func (c *current) onNumericExpr1(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExpr1(stack["expr"])
}

func (c *current) onNumericExprLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.NumericExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.NumericExpr{
			IsTerminal:      false,
			Op:              opAndClause[0].(string),
			Left:            cur,
			Right:           opAndClause[1].(*structs.NumericExpr),
			NumericExprMode: structs.NEMNumericExpr,
		}
	}

	return cur, nil
}

func (p *parser) callonNumericExprLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel31(stack["first"], stack["rest"])
}

func (c *current) onNumericExprLevel21(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.NumericExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.NumericExpr{
			IsTerminal:      false,
			Op:              opAndClause[0].(string),
			Left:            cur,
			Right:           opAndClause[1].(*structs.NumericExpr),
			NumericExprMode: structs.NEMNumericExpr,
		}
	}

	return cur, nil
}

func (p *parser) callonNumericExprLevel21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel21(stack["first"], stack["rest"])
}

func (c *current) onRoundPrecisionExpr1(expr any) (any, error) {
	rightNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	return rightNumericExpr, nil
}

func (p *parser) callonRoundPrecisionExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRoundPrecisionExpr1(stack["expr"])
}

func (c *current) onNumericExprLevel12(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericExprLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel12(stack["expr"])
}

func (c *current) onNumericExprLevel18(numericEvalExpr any) (any, error) {
	return numericEvalExpr, nil
}

func (p *parser) callonNumericExprLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel18(stack["numericEvalExpr"])
}

func (c *current) onNumericExprLevel111(field any) (any, error) {
	expr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    true,
		Value:           field.(string),
		NumericExprMode: structs.NEMNumberField,
	}

	return expr, nil
}

func (p *parser) callonNumericExprLevel111() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel111(stack["field"])
}

func (c *current) onNumericExprLevel114(number any) (any, error) {
	expr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    false,
		Value:           number.(string),
		NumericExprMode: structs.NEMNumber,
	}

	return expr, nil
}

func (p *parser) callonNumericExprLevel114() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel114(stack["number"])
}

func (c *current) onNumericEvalExpr2(opName, expr any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)
	node, err := createNumericExpr(opNameStr, leftNumericExpr, nil, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr2(stack["opName"], stack["expr"])
}

func (c *current) onNumericEvalExpr15(roundExpr, expr, roundPrecision any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	var rightNumericExpr *structs.NumericExpr
	if roundPrecision != nil {
		rightNumericExpr, ok = roundPrecision.(*structs.NumericExpr)
		if !ok {
			return nil, fmt.Errorf("Failed to assert roundPrecision as *structs.NumericExpr")
		}
	}

	node, err := createNumericExpr("round", leftNumericExpr, rightNumericExpr, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr15(stack["roundExpr"], stack["expr"], stack["roundPrecision"])
}

func (c *current) onNumericEvalExpr26() (any, error) {
	return &structs.NumericExpr{
		IsTerminal: true,
		Op:         "now",
	}, nil
}

func (p *parser) callonNumericEvalExpr26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr26()
}

func (c *current) onNumericEvalExpr30(stringExpr, baseExpr any) (any, error) {
	stringExprConverted, ok := stringExpr.(*structs.StringExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert stringExpr as *structs.StringExpr")
	}

	var baseExprConverted *structs.NumericExpr
	if baseExpr != nil {
		baseSlice, ok := baseExpr.([]interface{})
		if ok && len(baseSlice) > 1 {
			if base, ok := baseSlice[1].(*structs.NumericExpr); ok {
				baseExprConverted = base
			} else {
				return nil, fmt.Errorf("Failed to assert base as *structs.NumericExpr")
			}
		}
	}

	node := &structs.NumericExpr{
		IsTerminal:      false,
		Op:              "tonumber",
		Left:            nil,
		Right:           baseExprConverted,
		Val:             stringExprConverted,
		NumericExprMode: structs.NEMNumericExpr,
	}
	return node, nil
}

func (p *parser) callonNumericEvalExpr30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr30(stack["stringExpr"], stack["baseExpr"])
}

func (c *current) onNumericEvalExpr42(lenExpr, expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericEvalExpr42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr42(stack["lenExpr"], stack["expr"])
}

func (c *current) onLenExpr2(str any) (any, error) {

	leftNumericExpr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    false,
		Value:           str.(string),
		NumericExprMode: structs.NEMLenString,
	}

	node, err := createNumericExpr("len", leftNumericExpr, nil, structs.NEMLenString)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonLenExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLenExpr2(stack["str"])
}

func (c *current) onLenExpr8(field any) (any, error) {

	leftNumericExpr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    true,
		Value:           field.(string),
		NumericExprMode: structs.NEMLenField,
	}

	node, err := createNumericExpr("len", leftNumericExpr, nil, structs.NEMLenField)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonLenExpr8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLenExpr8(stack["field"])
}

func (c *current) onHeadBlock2(intAsStr any) (any, error) {
	limit, err := strconv.ParseUint(intAsStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid limit (%v): %v", intAsStr.(string), err)
	}

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			MaxRows: limit,
		},
	}

	return queryAgg, nil
}

func (p *parser) callonHeadBlock2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadBlock2(stack["intAsStr"])
}

func (c *current) onHeadBlock12() (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			MaxRows: uint64(10), // From https://docs.splunk.com/Documentation/Splunk/9.1.0/SearchReference/Head
		},
	}

	return queryAgg, nil
}

func (p *parser) callonHeadBlock12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadBlock12()
}

func (c *current) onAggregationList1(first, rest any) (any, error) {
	// Convert `rest` to a slice. Each element of the slice will be a 2-element
	// slice where the first element is ", " and the second is an Aggregator.
	restSlice := rest.([]any)

	numAggs := 1 + len(restSlice)
	aggsSlice := make([]*aggregator, numAggs)
	aggsSlice[0] = first.(*aggregator)

	for i := 1; i < numAggs; i++ {
		separatorAndAgg := restSlice[i-1].([]any)
		aggsSlice[i] = separatorAndAgg[1].(*aggregator)
	}

	return aggsSlice, nil
}

func (p *parser) callonAggregationList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregationList1(stack["first"], stack["rest"])
}

func (c *current) onAggregator1(aggFunc, asField any) (any, error) {
	agg := &aggregator{}
	agg.measureAgg = aggFunc.(*structs.MeasureAggregator)

	if asField != nil {
		agg.renameOutputField = true
		agg.outputFieldNewName = asField.(string)
	}

	return agg, nil
}

func (p *parser) callonAggregator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregator1(stack["aggFunc"], stack["asField"])
}

func (c *current) onAggFunction1(agg any) (any, error) {
	return agg, nil
}

func (p *parser) callonAggFunction1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggFunction1(stack["agg"])
}

func (c *current) onAsField1(field any) (any, error) {
	fieldStr := field.(string)

	if strings.Contains(fieldStr, "*") {
		return nil, errors.New("The field specified in `AS` cannot contain wildcards")
	}

	return fieldStr, nil
}

func (p *parser) callonAsField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsField1(stack["field"])
}

func (c *current) onAggCount2(boolExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Count,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggCount2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggCount2(stack["boolExpr"])
}

func (c *current) onAggCount12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Count,
	}

	return agg, nil
}

func (p *parser) callonAggCount12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggCount12(stack["field"])
}

func (c *current) onAggCount21() (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  "*",
		MeasureFunc: utils.Count,
	}

	return agg, nil
}

func (p *parser) callonAggCount21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggCount21()
}

func (c *current) onAggDistinctCount2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Cardinality,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggDistinctCount2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggDistinctCount2(stack["valueExpr"])
}

func (c *current) onAggDistinctCount12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Cardinality,
	}

	return agg, nil
}

func (p *parser) callonAggDistinctCount12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggDistinctCount12(stack["field"])
}

func (c *current) onAggAvg2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Avg,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggAvg2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAvg2(stack["boolComparisonExpr"])
}

func (c *current) onAggAvg12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Avg,
	}

	return agg, nil
}

func (p *parser) callonAggAvg12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAvg12(stack["field"])
}

func (c *current) onAggMin2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Min,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggMin2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMin2(stack["boolComparisonExpr"])
}

func (c *current) onAggMin12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Min,
	}

	return agg, nil
}

func (p *parser) callonAggMin12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMin12(stack["field"])
}

func (c *current) onAggMax2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Max,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggMax2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMax2(stack["boolComparisonExpr"])
}

func (c *current) onAggMax12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Max,
	}

	return agg, nil
}

func (p *parser) callonAggMax12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMax12(stack["field"])
}

func (c *current) onAggRange2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Range,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggRange2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRange2(stack["boolComparisonExpr"])
}

func (c *current) onAggRange12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Range,
	}

	return agg, nil
}

func (p *parser) callonAggRange12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRange12(stack["field"])
}

func (c *current) onAggSum2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Sum,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggSum2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSum2(stack["boolComparisonExpr"])
}

func (c *current) onAggSum12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Sum,
	}

	return agg, nil
}

func (p *parser) callonAggSum12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSum12(stack["field"])
}

func (c *current) onAggValues2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Values,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggValues2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggValues2(stack["valueExpr"])
}

func (c *current) onAggValues10(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Values,
	}

	return agg, nil
}

func (p *parser) callonAggValues10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggValues10(stack["field"])
}

func (c *current) onFieldWithNumberValue1(keyValuePair any) (any, error) {
	return keyValuePair, nil
}

func (p *parser) callonFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithNumberValue1(stack["keyValuePair"])
}

func (c *current) onNamedFieldWithNumberValue1(key, op, value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     op.(string),
			Field:  key.(string),
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonNamedFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedFieldWithNumberValue1(stack["key"], stack["op"], stack["value"])
}

func (c *current) onUnnamedFieldWithNumberValue1(value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     "=",
			Field:  "*",
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonUnnamedFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnnamedFieldWithNumberValue1(stack["value"])
}

func (c *current) onFieldWithStringValue1(keyValuePair any) (any, error) {
	return keyValuePair, nil
}

func (p *parser) callonFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithStringValue1(stack["keyValuePair"])
}

func (c *current) onNamedFieldWithStringValue1(key, op, value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     op.(string),
			Field:  key.(string),
			Values: value,
		},
	}
	return node, nil
}

func (p *parser) callonNamedFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedFieldWithStringValue1(stack["key"], stack["op"], stack["value"])
}

func (c *current) onUnnamedFieldWithStringValue1(value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     "=",
			Field:  "*",
			Values: value,
		},
	}
	return node, nil
}

func (p *parser) callonUnnamedFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnnamedFieldWithStringValue1(stack["value"])
}

func (c *current) onFieldNameList1(first, rest any) (any, error) {
	// Convert `rest` to a slice. Each element of the slice will be a 2-element
	// slice where the first element is ", " and the second is a FieldName.
	restSlice := rest.([]any)

	numFieldNames := 1 + len(restSlice)
	fields := make([]string, numFieldNames)
	fields[0] = first.(string)

	for i := 1; i < numFieldNames; i++ {
		separatorAndField := restSlice[i-1].([]any)
		fields[i] = separatorAndField[1].(string)
	}

	return fields, nil
}

func (p *parser) callonFieldNameList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldNameList1(stack["first"], stack["rest"])
}

func (c *current) onFieldName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFieldName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldName1()
}

func (c *current) onString1(str any) (any, error) {
	return str, nil
}

func (p *parser) callonString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onString1(stack["str"])
}

func (c *current) onQuotedString1() (any, error) {
	// The returned string has quotes as the first and last character.
	return string(c.text), nil
}

func (p *parser) callonQuotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString1()
}

func (c *current) onUnquotedString1() (any, error) {
	// Return the string wrapped in quotes.
	str := "\"" + string(c.text) + "\""
	return str, nil
}

func (p *parser) callonUnquotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedString1()
}

func (c *current) onRenamePattern1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonRenamePattern1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenamePattern1()
}

func (c *current) onNumber1(number any) (any, error) {
	return json.Number(number.(string)), nil
}

func (p *parser) callonNumber1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1(stack["number"])
}

func (c *current) onNumberAsString1(number any) (any, error) {
	return number, nil
}

func (p *parser) callonNumberAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumberAsString1(stack["number"])
}

func (c *current) onFloatAsString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatAsString1()
}

func (c *current) onIntegerAsString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIntegerAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerAsString1()
}

func (c *current) onEqualityOperator1(op any) (any, error) {
	opStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: EqualityOperator: %v", err)
	}
	return opStr, nil
}

func (p *parser) callonEqualityOperator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator1(stack["op"])
}

func (c *current) onInequalityOperator1(op any) (any, error) {
	opStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: InequalityOperator: %v", err)
	}
	return opStr, nil
}

func (p *parser) callonInequalityOperator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInequalityOperator1(stack["op"])
}

func (c *current) onEqualityOrInequality2(op any) (any, error) {
	return op, nil
}

func (p *parser) callonEqualityOrInequality2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOrInequality2(stack["op"])
}

func (c *current) onEqualityOrInequality5(op any) (any, error) {
	return op, nil
}

func (p *parser) callonEqualityOrInequality5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOrInequality5(stack["op"])
}

func (c *current) onOpPlus1() (any, error) {
	return "+", nil
}

func (p *parser) callonOpPlus1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpPlus1()
}

func (c *current) onOpMinus1() (any, error) {
	return "-", nil
}

func (p *parser) callonOpMinus1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpMinus1()
}

func (c *current) onOpMul1() (any, error) {
	return "*", nil
}

func (p *parser) callonOpMul1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpMul1()
}

func (c *current) onOpDiv1() (any, error) {
	return "/", nil
}

func (p *parser) callonOpDiv1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpDiv1()
}

func (c *current) onSecond1() (any, error) {
	return utils.TMSecond, nil
}

func (p *parser) callonSecond1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSecond1()
}

func (c *current) onMinute1() (any, error) {
	return utils.TMMinute, nil
}

func (p *parser) callonMinute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinute1()
}

func (c *current) onHour1() (any, error) {
	return utils.TMHour, nil
}

func (p *parser) callonHour1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHour1()
}

func (c *current) onDay1() (any, error) {
	return utils.TMDay, nil
}

func (p *parser) callonDay1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDay1()
}

func (c *current) onWeek1() (any, error) {
	return utils.TMWeek, nil
}

func (p *parser) callonWeek1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeek1()
}

func (c *current) onMonth1() (any, error) {
	return utils.TMMonth, nil
}

func (p *parser) callonMonth1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMonth1()
}

func (c *current) onQuarter1() (any, error) {
	return utils.TMQuarter, nil
}

func (p *parser) callonQuarter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuarter1()
}

func (c *current) onSubseconds1() (any, error) {
	timeUnit, err := utils.ConvertSubseconds(string(c.text))
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Subseconds: %v", err)
	}
	return timeUnit, nil
}

func (p *parser) callonSubseconds1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubseconds1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize {
		val, ok = p.parseRuleMemoize(rule)
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
