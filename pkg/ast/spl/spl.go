// Code generated by pigeon; DO NOT EDIT.

// Copyright (c) 2021-2024 SigScalr, Inc.
//
// This file is part of SigLens Observability Solution
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

package spl

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"
	"unicode"
	"unicode/utf8"

	"github.com/siglens/siglens/pkg/ast"
	"github.com/siglens/siglens/pkg/segment/aggregations"
	"github.com/siglens/siglens/pkg/segment/query"
	"github.com/siglens/siglens/pkg/segment/structs"
	"github.com/siglens/siglens/pkg/segment/utils"
	toputils "github.com/siglens/siglens/pkg/utils"
	log "github.com/sirupsen/logrus"
)

// ConvertCustomDateTimeFormatToEpochMs converts a date string in the format "MM/DD/YYYY:HH:MM:SS"
// to Unix time in milliseconds (epoch ms).
func ConvertCustomDateTimeFormatToEpochMs(dateStr string) (int64, error) {
	loc, _ := time.LoadLocation("Local")
	t, err := time.ParseInLocation("01/02/2006:15:04:05", dateStr, loc)
	if err != nil {
		return 0, err
	}
	return t.UnixMilli(), nil
}

// This function would snap backwards based on unit present.
// For e.x. Consider the time (Wednesday) 06/05/2024:13:37:05.123 (mm/dd/yyyy:hh:mm:ss)
// Snapping on Second would be 06/05/2024:13:37:05.000
// Snapping on Minute would be 06/05/2024:13:37:00.000
// Snapping on Hour would be 06/05/2024:13:00:00.000
// Snapping on Day would be 06/05/2024:00:00:00.000
// Snapping on Month would be 06/05/2024:00:00:00.000
// Snapping on Quarter (would snap to recent most quarter out of Jan 1, Apr 1, Jul 1, Oct 1) would be 04/01/2024:00:00:00.000
// Snapping on Year would be 01/01/2024:00:00:00.000
// Snapping on weekdays (w0 to w7) would snap backward to that weekday.
// Snapping on w0 would be (Sunday) 06/02/2024:00:00:00.000
// Snapping on w1 would be (Monday) 06/03/2024:00:00:00.000 and so on.
// Snap on w0 and w7 is same.
// snap parameter would be a string of the form w0 or it would be utils.TimeUnit constant integers converted to string type (see Rule: RelTimeUnit)
func applySnap(snap string, t time.Time) (time.Time, error) {
	sec := t.Second()
	min := t.Minute()
	hour := t.Hour()
	day := t.Day()
	week := t.Weekday()
	mon := t.Month()
	year := t.Year()

	if snap[0] != 'w' {
		tunit, err := strconv.Atoi(snap)
		if err != nil {
			return t, fmt.Errorf("Error while converting the snap: %v to integer, err: %v", snap, err)
		}

		switch utils.TimeUnit(tunit) {
		case utils.TMSecond:
			return time.Date(year, mon, day, hour, min, sec, 0, time.Local), nil
		case utils.TMMinute:
			return time.Date(year, mon, day, hour, min, 0, 0, time.Local), nil
		case utils.TMHour:
			return time.Date(year, mon, day, hour, 0, 0, 0, time.Local), nil
		case utils.TMDay:
			return time.Date(year, mon, day, 0, 0, 0, 0, time.Local), nil
		case utils.TMWeek:
			diff := week - time.Sunday
			return time.Date(year, mon, day-int(diff), 0, 0, 0, 0, time.Local), nil
		case utils.TMMonth:
			return time.Date(year, mon, 1, 0, 0, 0, 0, time.Local), nil
		case utils.TMQuarter:
			if mon >= time.October {
				mon = time.October
			} else if mon >= time.July {
				mon = time.July
			} else if mon >= time.April {
				mon = time.April
			} else {
				mon = time.January
			}
			return time.Date(year, mon, 1, 0, 0, 0, 0, time.Local), nil
		case utils.TMYear:
			return time.Date(year, 1, 1, 0, 0, 0, 0, time.Local), nil
		default:
			return t, fmt.Errorf("Unsupported time unit for relative timestamp: %v", tunit)
		}
	} else {
		if len(snap) != 2 {
			return t, fmt.Errorf("Error for special week snap, should follow the regex w[0-7] got: %v", snap)
		}
		weeknum := int(snap[1] - '0')
		if weeknum == 7 {
			weeknum = 0
		}
		diff := int(week) - weeknum
		if diff < 0 {
			diff += 7
		}
		return time.Date(year, mon, day, 0, 0, 0, 0, time.Local).AddDate(0, 0, -diff), nil
	}
}

func CalculateRelativeTime(timeModifier ast.TimeModifier, currTime time.Time) (int64, error) {
	var epoch int64 = 0
	var err error
	if timeModifier.AbsoluteTime == "now" {
		epoch = currTime.UnixMilli()
	} else if timeModifier.AbsoluteTime == "1" {
		return 1, nil
	} else if timeModifier.AbsoluteTime != "" {
		epoch, err = ConvertCustomDateTimeFormatToEpochMs(timeModifier.AbsoluteTime)
		if err != nil {
			return 0, err
		}
	} else {
		offsetNum := timeModifier.RelativeTime.RelativeTimeOffset.Offset
		offsetTimeUnit := timeModifier.RelativeTime.RelativeTimeOffset.TimeUnit
		snap := timeModifier.RelativeTime.Snap
		finalTime := currTime
		if offsetNum != 0 {
			finalTime, err = utils.ApplyOffsetToTime(offsetNum, offsetTimeUnit, finalTime)
			if err != nil {
				return 0, err
			}
		}
		if snap != "" {
			finalTime, err = applySnap(snap, finalTime)
			if err != nil {
				return 0, err
			}
		}
		epoch = finalTime.UnixMilli()
	}

	return epoch, nil
}

func getParseError(err error) error {
	switch ev := err.(type) {
	case errList:
		if pe, ok := ev[0].(*parserError); ok {
			return &ast.ParseError{
				Inner:    pe.Inner,
				Line:     pe.pos.line,
				Column:   pe.pos.col,
				Offset:   pe.pos.offset,
				Prefix:   pe.prefix,
				Expected: pe.expected,
			}
		}
	}
	return err
}

// Remove the first and last character of the string
func removeQuotes(s any) string {
	str := s.(string)
	if len(str) < 3 {
		return ""
	}

	return str[1 : len(str)-1]
}

// Check if it rename fields with similar names using a wildcard
func isRegexRename(originalPattern, newPattern string) (bool, error) {
	oldWildcards := strings.Count(originalPattern, "*")
	newWildcards := strings.Count(newPattern, "*")

	if oldWildcards == 0 && newWildcards == 0 {
		return false, nil
	} else if oldWildcards > 0 && oldWildcards == newWildcards {
		return true, nil
	} else {
		return false, errors.New("Patterns do not match")
	}
}

func deMorgansLaw(node *ast.Node) {
	switch node.NodeType {
	case ast.NodeTerminal:
		switch node.Comparison.Op {
		case "=":
			node.Comparison.Op = "!="
		case "!=":
			node.Comparison.Op = "="
		case ">":
			node.Comparison.Op = "<="
		case "<":
			node.Comparison.Op = ">="
		case ">=":
			node.Comparison.Op = "<"
		case "<=":
			node.Comparison.Op = ">"
		default:
			log.Errorf("deMorgansLaw: unexpected node comparison op: %v", node.Comparison.Op)
		}
	case ast.NodeAnd:
		node.NodeType = ast.NodeOr
		deMorgansLaw(node.Left)
		deMorgansLaw(node.Right)
	case ast.NodeOr:
		node.NodeType = ast.NodeAnd
		deMorgansLaw(node.Left)
		deMorgansLaw(node.Right)
	default:
		log.Errorf("deMorgansLaw: unexpected NodeType: %v", node.NodeType)
	}
}

// Generate NumericExpr struct for eval functions
func createNumericExpr(op string, leftNumericExpr *structs.NumericExpr, rightNumericExpr *structs.NumericExpr, numericExprMode structs.NumericExprMode) (*structs.NumericExpr, error) {
	if leftNumericExpr == nil {
		return nil, fmt.Errorf("expr cannot be nil")
	}

	return &structs.NumericExpr{
		IsTerminal:      false,
		Op:              op,
		Left:            leftNumericExpr,
		Right:           rightNumericExpr,
		NumericExprMode: numericExprMode,
	}, nil
}

func transferUint8ToString(opName interface{}) (string, error) {
	strData, ok := opName.([]byte)
	if !ok {
		return "", fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)
	return opNameStr, nil
}

func transferPCREToRE2(pattern string) string {
	pattern = strings.Replace(pattern, "(?<", "(?P<", -1)
	return pattern
}

func getRexColNames(pattern string) ([]string, error) {
	re, err := regexp.Compile(`\?<(?P<GroupName>[a-zA-Z0-9_]+)>`)
	if err != nil {
		return nil, fmt.Errorf("getRexColNames: There are some errors in the pattern: %v", err)
	}
	matches := re.FindAllStringSubmatch(pattern, -1)

	var rexColNames []string
	for _, match := range matches {
		rexColNames = append(rexColNames, match[1])
	}

	return rexColNames, nil
}

func SearchMatchGetFields(searchStr string) ([]string, error) {

	kvPairs := strings.Fields(searchStr)
	if len(kvPairs) == 0 {
		return []string{}, fmt.Errorf("Spl peg: Invalid syntax for searchmatch")
	}
	fieldList := make([]string, 0)

	for _, kvPair := range kvPairs {
		parts := strings.Split(kvPair, "=")
		if len(parts) == 1 {
			if len(kvPairs) == 1 {
				fieldList = append(fieldList, "*")
				return fieldList, nil
			} else {
				return []string{}, fmt.Errorf("Spl peg: Invalid syntax for searchmatch")
			}
		}
		if len(parts) != 2 {
			return []string{}, fmt.Errorf("Spl peg: Invalid syntax for searchmatch")
		}
		// fieldname is empty
		if len(parts[0]) == 0 {
			return []string{}, fmt.Errorf("Spl peg: Invalid syntax for searchmatch")
		}

		fieldList = append(fieldList, parts[0])
	}

	return fieldList, nil
}

func initializeStatsOptions() *structs.StatsOptions {
	return &structs.StatsOptions{
		Delim:          " ",
		Partitions:     1,
		DedupSplitvals: false,
		Allnum:         false,
	}
}

func initializeStreamStatsOptions() *structs.StreamStatsOptions {
	return &structs.StreamStatsOptions{
		Current: true,
		Global:  true,
	}
}

func createSPathExpr(inputField, pathField, outputField string) (*structs.QueryAggregators, error) {

	if inputField == "" {
		inputField = "_raw"
	}

	spathExpr := &structs.SPathExpr{
		InputColName:  inputField,
		Path:          pathField,
		OutputColName: outputField,
	}
	return &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: &structs.LetColumnsRequest{
				ValueColRequest: &structs.ValueExpr{
					ValueExprMode: structs.VEMStringExpr,
					StringExpr: &structs.StringExpr{
						StringExprMode: structs.SEMTextExpr,
						TextExpr: &structs.TextExpr{
							IsTerminal: true,
							Op:         "spath",
							SPathExpr:  spathExpr,
						},
					},
				},
				NewColName: outputField,
			},
		},
	}, nil
}
func createEventCountExpr(indices []string, list_vix, report_size, summarize bool) (*structs.QueryAggregators, error) {
	eventCountExpr := &structs.EventCountExpr{
		Indices:    indices,
		ListVix:    list_vix,
		ReportSize: report_size,
		Summarize:  summarize,
	}
	return &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: &structs.LetColumnsRequest{
				EventCountRequest: eventCountExpr,
			},
		},
	}, nil
}
func getDefaultFormatResultsExpr() *structs.FormatResultsRequest {
	return &structs.FormatResultsRequest{
		MVSeparator: "OR",
		MaxResults:  0,
		EmptyString: "NOT()",
		RowColOptions: &structs.RowColOptions{
			RowPrefix:       "(",
			ColumnPrefix:    "(",
			ColumnSeparator: "AND",
			ColumnEnd:       ")",
			RowSeparator:    "OR",
			RowEnd:          ")",
		},
	}
}

type aggregator struct {
	measureAgg         *structs.MeasureAggregator
	renameOutputField  bool
	outputFieldNewName string
}

type singleAggTemp struct {
	aggregators   []*aggregator
	SplitByClause *structs.SplitByClause
}

type TxnArgs struct {
	argOption string
	arguments *structs.TransactionArguments
}

type TimechartArgs struct {
	singleAggExpr *singleAggTemp
	// TODO: Add eval clause expr.
	tcOptions *structs.TcOptions
}

type MultiValueColOptionArgs struct {
	argOption string
	mvColExpr *structs.MultiValueColLetRequest
}

type HeadOptionArgs struct {
	argOption string
	headExpr  *structs.HeadExpr
}

type BinOptionArgs struct {
	argOption  string
	binOptions *structs.BinCmdOptions
}

type StreamStatsOptionArgs struct {
	argOption          string
	streamStatsOptions *structs.StreamStatsOptions
}

type SPathFieldExpr struct {
	PathValue       string
	IsPathFieldName bool
}

type FormatResultsRequestArguments struct {
	argOption        string
	formatResultExpr *structs.FormatResultsRequest
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Start",
			pos:  position{line: 438, col: 1, offset: 13931},
			expr: &actionExpr{
				pos: position{line: 438, col: 10, offset: 13940},
				run: (*parser).callonStart1,
				expr: &seqExpr{
					pos: position{line: 438, col: 10, offset: 13940},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 438, col: 10, offset: 13940},
							expr: &ruleRefExpr{
								pos:  position{line: 438, col: 10, offset: 13940},
								name: "SPACE",
							},
						},
						&labeledExpr{
							pos:   position{line: 438, col: 17, offset: 13947},
							label: "initialSearch",
							expr: &ruleRefExpr{
								pos:  position{line: 438, col: 32, offset: 13962},
								name: "InitialSearchBlock",
							},
						},
						&labeledExpr{
							pos:   position{line: 438, col: 52, offset: 13982},
							label: "filterBlocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 438, col: 65, offset: 13995},
								expr: &ruleRefExpr{
									pos:  position{line: 438, col: 66, offset: 13996},
									name: "FilterBlock",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 438, col: 80, offset: 14010},
							label: "queryAggBlocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 438, col: 95, offset: 14025},
								expr: &ruleRefExpr{
									pos:  position{line: 438, col: 96, offset: 14026},
									name: "QueryAggergatorBlock",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 438, col: 119, offset: 14049},
							expr: &ruleRefExpr{
								pos:  position{line: 438, col: 119, offset: 14049},
								name: "SPACE",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 438, col: 126, offset: 14056},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "InitialSearchBlock",
			pos:  position{line: 509, col: 1, offset: 16257},
			expr: &actionExpr{
				pos: position{line: 509, col: 23, offset: 16279},
				run: (*parser).callonInitialSearchBlock1,
				expr: &seqExpr{
					pos: position{line: 509, col: 23, offset: 16279},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 509, col: 23, offset: 16279},
							expr: &ruleRefExpr{
								pos:  position{line: 509, col: 23, offset: 16279},
								name: "CMD_SEARCH",
							},
						},
						&labeledExpr{
							pos:   position{line: 509, col: 35, offset: 16291},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 509, col: 42, offset: 16298},
								name: "ClauseLevel4",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBlock",
			pos:  position{line: 513, col: 1, offset: 16339},
			expr: &actionExpr{
				pos: position{line: 513, col: 16, offset: 16354},
				run: (*parser).callonSearchBlock1,
				expr: &seqExpr{
					pos: position{line: 513, col: 16, offset: 16354},
					exprs: []any{
						&notExpr{
							pos: position{line: 513, col: 16, offset: 16354},
							expr: &ruleRefExpr{
								pos:  position{line: 513, col: 18, offset: 16356},
								name: "ALLCMD",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 513, col: 26, offset: 16364},
							expr: &ruleRefExpr{
								pos:  position{line: 513, col: 26, offset: 16364},
								name: "CMD_SEARCH",
							},
						},
						&labeledExpr{
							pos:   position{line: 513, col: 38, offset: 16376},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 513, col: 45, offset: 16383},
								name: "ClauseLevel4",
							},
						},
					},
				},
			},
		},
		{
			name: "FilterBlock",
			pos:  position{line: 517, col: 1, offset: 16424},
			expr: &actionExpr{
				pos: position{line: 517, col: 16, offset: 16439},
				run: (*parser).callonFilterBlock1,
				expr: &seqExpr{
					pos: position{line: 517, col: 16, offset: 16439},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 517, col: 16, offset: 16439},
							name: "PIPE",
						},
						&labeledExpr{
							pos:   position{line: 517, col: 21, offset: 16444},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 517, col: 28, offset: 16451},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 517, col: 28, offset: 16451},
										name: "SearchBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 517, col: 42, offset: 16465},
										name: "RegexBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 517, col: 55, offset: 16478},
										name: "TimeModifiers",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QueryAggergatorBlock",
			pos:  position{line: 522, col: 1, offset: 16557},
			expr: &actionExpr{
				pos: position{line: 522, col: 25, offset: 16581},
				run: (*parser).callonQueryAggergatorBlock1,
				expr: &labeledExpr{
					pos:   position{line: 522, col: 25, offset: 16581},
					label: "block",
					expr: &choiceExpr{
						pos: position{line: 522, col: 32, offset: 16588},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 522, col: 32, offset: 16588},
								name: "FieldSelectBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 522, col: 51, offset: 16607},
								name: "AggregatorBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 522, col: 69, offset: 16625},
								name: "EvalBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 522, col: 81, offset: 16637},
								name: "WhereBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 522, col: 94, offset: 16650},
								name: "HeadBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 522, col: 106, offset: 16662},
								name: "RexBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 522, col: 117, offset: 16673},
								name: "StatisticBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 522, col: 134, offset: 16690},
								name: "RenameBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 522, col: 148, offset: 16704},
								name: "TimechartBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 522, col: 165, offset: 16721},
								name: "TransactionBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 522, col: 184, offset: 16740},
								name: "DedupBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 522, col: 197, offset: 16753},
								name: "SortBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 522, col: 209, offset: 16765},
								name: "MultiValueBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 522, col: 227, offset: 16783},
								name: "SPathBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 522, col: 240, offset: 16796},
								name: "FormatBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 522, col: 254, offset: 16810},
								name: "EventCountBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 522, col: 272, offset: 16828},
								name: "TailBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 522, col: 284, offset: 16840},
								name: "BinBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 522, col: 295, offset: 16851},
								name: "StreamStatsBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 522, col: 314, offset: 16870},
								name: "FillNullBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldSelectBlock",
			pos:  position{line: 527, col: 1, offset: 16965},
			expr: &actionExpr{
				pos: position{line: 527, col: 21, offset: 16985},
				run: (*parser).callonFieldSelectBlock1,
				expr: &seqExpr{
					pos: position{line: 527, col: 21, offset: 16985},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 527, col: 21, offset: 16985},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 527, col: 26, offset: 16990},
							name: "CMD_FIELDS",
						},
						&labeledExpr{
							pos:   position{line: 527, col: 37, offset: 17001},
							label: "op",
							expr: &zeroOrOneExpr{
								pos: position{line: 527, col: 40, offset: 17004},
								expr: &choiceExpr{
									pos: position{line: 527, col: 41, offset: 17005},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 527, col: 41, offset: 17005},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
										&litMatcher{
											pos:        position{line: 527, col: 47, offset: 17011},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 527, col: 53, offset: 17017},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 527, col: 68, offset: 17032},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 527, col: 75, offset: 17039},
								name: "FieldNameList",
							},
						},
					},
				},
			},
		},
		{
			name: "CommonAggregatorBlock",
			pos:  position{line: 545, col: 1, offset: 17543},
			expr: &actionExpr{
				pos: position{line: 545, col: 26, offset: 17568},
				run: (*parser).callonCommonAggregatorBlock1,
				expr: &seqExpr{
					pos: position{line: 545, col: 26, offset: 17568},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 545, col: 26, offset: 17568},
							label: "aggs",
							expr: &ruleRefExpr{
								pos:  position{line: 545, col: 31, offset: 17573},
								name: "AggregationList",
							},
						},
						&labeledExpr{
							pos:   position{line: 545, col: 47, offset: 17589},
							label: "byFields",
							expr: &zeroOrOneExpr{
								pos: position{line: 545, col: 56, offset: 17598},
								expr: &ruleRefExpr{
									pos:  position{line: 545, col: 57, offset: 17599},
									name: "GroupbyBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggregatorBlock",
			pos:  position{line: 591, col: 1, offset: 19094},
			expr: &actionExpr{
				pos: position{line: 591, col: 20, offset: 19113},
				run: (*parser).callonAggregatorBlock1,
				expr: &seqExpr{
					pos: position{line: 591, col: 20, offset: 19113},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 591, col: 20, offset: 19113},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 591, col: 25, offset: 19118},
							name: "CMD_STATS",
						},
						&labeledExpr{
							pos:   position{line: 591, col: 35, offset: 19128},
							label: "aggs",
							expr: &ruleRefExpr{
								pos:  position{line: 591, col: 41, offset: 19134},
								name: "CommonAggregatorBlock",
							},
						},
						&labeledExpr{
							pos:   position{line: 591, col: 64, offset: 19157},
							label: "options",
							expr: &zeroOrOneExpr{
								pos: position{line: 591, col: 72, offset: 19165},
								expr: &ruleRefExpr{
									pos:  position{line: 591, col: 73, offset: 19166},
									name: "StatsOptions",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatsOptions",
			pos:  position{line: 605, col: 1, offset: 19499},
			expr: &actionExpr{
				pos: position{line: 605, col: 17, offset: 19515},
				run: (*parser).callonStatsOptions1,
				expr: &labeledExpr{
					pos:   position{line: 605, col: 17, offset: 19515},
					label: "option",
					expr: &zeroOrMoreExpr{
						pos: position{line: 605, col: 24, offset: 19522},
						expr: &ruleRefExpr{
							pos:  position{line: 605, col: 25, offset: 19523},
							name: "StatsOption",
						},
					},
				},
			},
		},
		{
			name: "StatsOption",
			pos:  position{line: 643, col: 1, offset: 20964},
			expr: &actionExpr{
				pos: position{line: 643, col: 16, offset: 20979},
				run: (*parser).callonStatsOption1,
				expr: &seqExpr{
					pos: position{line: 643, col: 16, offset: 20979},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 643, col: 16, offset: 20979},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 643, col: 22, offset: 20985},
							label: "optionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 643, col: 32, offset: 20995},
								name: "StatsOptionCMD",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 643, col: 47, offset: 21010},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 643, col: 53, offset: 21016},
							label: "str",
							expr: &choiceExpr{
								pos: position{line: 643, col: 58, offset: 21021},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 643, col: 58, offset: 21021},
										name: "IntegerAsString",
									},
									&ruleRefExpr{
										pos:  position{line: 643, col: 76, offset: 21039},
										name: "EvalFieldToRead",
									},
									&ruleRefExpr{
										pos:  position{line: 643, col: 94, offset: 21057},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatsOptionCMD",
			pos:  position{line: 648, col: 1, offset: 21162},
			expr: &actionExpr{
				pos: position{line: 648, col: 19, offset: 21180},
				run: (*parser).callonStatsOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 648, col: 19, offset: 21180},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 648, col: 27, offset: 21188},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 648, col: 27, offset: 21188},
								val:        "allnum",
								ignoreCase: false,
								want:       "\"allnum\"",
							},
							&litMatcher{
								pos:        position{line: 648, col: 38, offset: 21199},
								val:        "dedup_splitvals",
								ignoreCase: false,
								want:       "\"dedup_splitvals\"",
							},
							&litMatcher{
								pos:        position{line: 648, col: 58, offset: 21219},
								val:        "delim",
								ignoreCase: false,
								want:       "\"delim\"",
							},
							&litMatcher{
								pos:        position{line: 648, col: 68, offset: 21229},
								val:        "partitions",
								ignoreCase: false,
								want:       "\"partitions\"",
							},
						},
					},
				},
			},
		},
		{
			name: "GroupbyBlock",
			pos:  position{line: 656, col: 1, offset: 21419},
			expr: &actionExpr{
				pos: position{line: 656, col: 17, offset: 21435},
				run: (*parser).callonGroupbyBlock1,
				expr: &seqExpr{
					pos: position{line: 656, col: 17, offset: 21435},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 656, col: 17, offset: 21435},
							name: "BY",
						},
						&labeledExpr{
							pos:   position{line: 656, col: 20, offset: 21438},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 656, col: 27, offset: 21445},
								name: "FieldNameList",
							},
						},
					},
				},
			},
		},
		{
			name: "StreamStatsOptionResetOnChange",
			pos:  position{line: 668, col: 1, offset: 21795},
			expr: &actionExpr{
				pos: position{line: 668, col: 35, offset: 21829},
				run: (*parser).callonStreamStatsOptionResetOnChange1,
				expr: &seqExpr{
					pos: position{line: 668, col: 35, offset: 21829},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 668, col: 35, offset: 21829},
							val:        "reset_on_change",
							ignoreCase: false,
							want:       "\"reset_on_change\"",
						},
						&ruleRefExpr{
							pos:  position{line: 668, col: 53, offset: 21847},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 668, col: 59, offset: 21853},
							label: "boolVal",
							expr: &ruleRefExpr{
								pos:  position{line: 668, col: 67, offset: 21861},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "StreamStatsOptionCurrent",
			pos:  position{line: 680, col: 1, offset: 22122},
			expr: &actionExpr{
				pos: position{line: 680, col: 29, offset: 22150},
				run: (*parser).callonStreamStatsOptionCurrent1,
				expr: &seqExpr{
					pos: position{line: 680, col: 29, offset: 22150},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 680, col: 29, offset: 22150},
							val:        "current",
							ignoreCase: false,
							want:       "\"current\"",
						},
						&ruleRefExpr{
							pos:  position{line: 680, col: 39, offset: 22160},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 680, col: 45, offset: 22166},
							label: "boolVal",
							expr: &ruleRefExpr{
								pos:  position{line: 680, col: 53, offset: 22174},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "StreamStatsOptionGlobal",
			pos:  position{line: 692, col: 1, offset: 22421},
			expr: &actionExpr{
				pos: position{line: 692, col: 28, offset: 22448},
				run: (*parser).callonStreamStatsOptionGlobal1,
				expr: &seqExpr{
					pos: position{line: 692, col: 28, offset: 22448},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 692, col: 28, offset: 22448},
							val:        "global",
							ignoreCase: false,
							want:       "\"global\"",
						},
						&ruleRefExpr{
							pos:  position{line: 692, col: 37, offset: 22457},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 692, col: 43, offset: 22463},
							label: "boolVal",
							expr: &ruleRefExpr{
								pos:  position{line: 692, col: 51, offset: 22471},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "StreamStatsOptionAllNum",
			pos:  position{line: 705, col: 1, offset: 22805},
			expr: &actionExpr{
				pos: position{line: 705, col: 28, offset: 22832},
				run: (*parser).callonStreamStatsOptionAllNum1,
				expr: &seqExpr{
					pos: position{line: 705, col: 28, offset: 22832},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 705, col: 28, offset: 22832},
							val:        "allnum",
							ignoreCase: false,
							want:       "\"allnum\"",
						},
						&ruleRefExpr{
							pos:  position{line: 705, col: 37, offset: 22841},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 705, col: 43, offset: 22847},
							label: "boolVal",
							expr: &ruleRefExpr{
								pos:  position{line: 705, col: 51, offset: 22855},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "StreamStatsOptionWindow",
			pos:  position{line: 718, col: 1, offset: 23189},
			expr: &actionExpr{
				pos: position{line: 718, col: 28, offset: 23216},
				run: (*parser).callonStreamStatsOptionWindow1,
				expr: &seqExpr{
					pos: position{line: 718, col: 28, offset: 23216},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 718, col: 28, offset: 23216},
							val:        "window",
							ignoreCase: false,
							want:       "\"window\"",
						},
						&ruleRefExpr{
							pos:  position{line: 718, col: 37, offset: 23225},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 718, col: 43, offset: 23231},
							label: "windowSize",
							expr: &ruleRefExpr{
								pos:  position{line: 718, col: 54, offset: 23242},
								name: "PositiveIntegerAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "StreamStatsOptionResetBefore",
			pos:  position{line: 738, col: 1, offset: 23846},
			expr: &actionExpr{
				pos: position{line: 738, col: 33, offset: 23878},
				run: (*parser).callonStreamStatsOptionResetBefore1,
				expr: &seqExpr{
					pos: position{line: 738, col: 33, offset: 23878},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 738, col: 33, offset: 23878},
							val:        "reset_before",
							ignoreCase: false,
							want:       "\"reset_before\"",
						},
						&ruleRefExpr{
							pos:  position{line: 738, col: 48, offset: 23893},
							name: "EQUAL",
						},
						&ruleRefExpr{
							pos:  position{line: 738, col: 54, offset: 23899},
							name: "L_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 738, col: 62, offset: 23907},
							label: "boolExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 738, col: 71, offset: 23916},
								name: "BoolExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 738, col: 80, offset: 23925},
							name: "R_PAREN",
						},
					},
				},
			},
		},
		{
			name: "StreamStatsOptionResetAfter",
			pos:  position{line: 750, col: 1, offset: 24195},
			expr: &actionExpr{
				pos: position{line: 750, col: 32, offset: 24226},
				run: (*parser).callonStreamStatsOptionResetAfter1,
				expr: &seqExpr{
					pos: position{line: 750, col: 32, offset: 24226},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 750, col: 32, offset: 24226},
							val:        "reset_after",
							ignoreCase: false,
							want:       "\"reset_after\"",
						},
						&ruleRefExpr{
							pos:  position{line: 750, col: 46, offset: 24240},
							name: "EQUAL",
						},
						&ruleRefExpr{
							pos:  position{line: 750, col: 52, offset: 24246},
							name: "L_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 750, col: 60, offset: 24254},
							label: "boolExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 750, col: 69, offset: 24263},
								name: "BoolExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 750, col: 78, offset: 24272},
							name: "R_PAREN",
						},
					},
				},
			},
		},
		{
			name: "StreamStatsOptionTimeWindow",
			pos:  position{line: 762, col: 1, offset: 24540},
			expr: &actionExpr{
				pos: position{line: 762, col: 32, offset: 24571},
				run: (*parser).callonStreamStatsOptionTimeWindow1,
				expr: &seqExpr{
					pos: position{line: 762, col: 32, offset: 24571},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 762, col: 32, offset: 24571},
							val:        "time_window",
							ignoreCase: false,
							want:       "\"time_window\"",
						},
						&ruleRefExpr{
							pos:  position{line: 762, col: 46, offset: 24585},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 762, col: 52, offset: 24591},
							label: "spanLength",
							expr: &ruleRefExpr{
								pos:  position{line: 762, col: 63, offset: 24602},
								name: "BinSpanLenOption",
							},
						},
					},
				},
			},
		},
		{
			name: "StreamStatsOption",
			pos:  position{line: 778, col: 1, offset: 25064},
			expr: &actionExpr{
				pos: position{line: 778, col: 22, offset: 25085},
				run: (*parser).callonStreamStatsOption1,
				expr: &labeledExpr{
					pos:   position{line: 778, col: 22, offset: 25085},
					label: "ssOption",
					expr: &choiceExpr{
						pos: position{line: 778, col: 32, offset: 25095},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 778, col: 32, offset: 25095},
								name: "StreamStatsOptionResetOnChange",
							},
							&ruleRefExpr{
								pos:  position{line: 778, col: 65, offset: 25128},
								name: "StreamStatsOptionCurrent",
							},
							&ruleRefExpr{
								pos:  position{line: 778, col: 92, offset: 25155},
								name: "StreamStatsOptionGlobal",
							},
							&ruleRefExpr{
								pos:  position{line: 778, col: 118, offset: 25181},
								name: "StreamStatsOptionAllNum",
							},
							&ruleRefExpr{
								pos:  position{line: 778, col: 144, offset: 25207},
								name: "StreamStatsOptionWindow",
							},
							&ruleRefExpr{
								pos:  position{line: 778, col: 170, offset: 25233},
								name: "StreamStatsOptionResetBefore",
							},
							&ruleRefExpr{
								pos:  position{line: 778, col: 201, offset: 25264},
								name: "StreamStatsOptionResetAfter",
							},
							&ruleRefExpr{
								pos:  position{line: 778, col: 231, offset: 25294},
								name: "StreamStatsOptionTimeWindow",
							},
						},
					},
				},
			},
		},
		{
			name: "StreamStatsOptionList",
			pos:  position{line: 782, col: 1, offset: 25353},
			expr: &actionExpr{
				pos: position{line: 782, col: 26, offset: 25378},
				run: (*parser).callonStreamStatsOptionList1,
				expr: &seqExpr{
					pos: position{line: 782, col: 26, offset: 25378},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 782, col: 26, offset: 25378},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 782, col: 32, offset: 25384},
								name: "StreamStatsOption",
							},
						},
						&labeledExpr{
							pos:   position{line: 782, col: 50, offset: 25402},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 782, col: 55, offset: 25407},
								expr: &seqExpr{
									pos: position{line: 782, col: 56, offset: 25408},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 782, col: 56, offset: 25408},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 782, col: 62, offset: 25414},
											name: "StreamStatsOption",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StreamStatsBlock",
			pos:  position{line: 841, col: 1, offset: 27603},
			expr: &choiceExpr{
				pos: position{line: 841, col: 21, offset: 27623},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 841, col: 21, offset: 27623},
						run: (*parser).callonStreamStatsBlock2,
						expr: &seqExpr{
							pos: position{line: 841, col: 21, offset: 27623},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 841, col: 21, offset: 27623},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 841, col: 26, offset: 27628},
									name: "CMD_STREAMSTATS",
								},
								&labeledExpr{
									pos:   position{line: 841, col: 42, offset: 27644},
									label: "ssOptionList",
									expr: &ruleRefExpr{
										pos:  position{line: 841, col: 56, offset: 27658},
										name: "StreamStatsOptionList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 841, col: 79, offset: 27681},
									name: "SPACE",
								},
								&labeledExpr{
									pos:   position{line: 841, col: 85, offset: 27687},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 841, col: 91, offset: 27693},
										name: "CommonAggregatorBlock",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 848, col: 3, offset: 27872},
						run: (*parser).callonStreamStatsBlock11,
						expr: &seqExpr{
							pos: position{line: 848, col: 3, offset: 27872},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 848, col: 3, offset: 27872},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 848, col: 8, offset: 27877},
									name: "CMD_STREAMSTATS",
								},
								&labeledExpr{
									pos:   position{line: 848, col: 24, offset: 27893},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 848, col: 30, offset: 27899},
										name: "CommonAggregatorBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RegexBlock",
			pos:  position{line: 856, col: 1, offset: 28065},
			expr: &actionExpr{
				pos: position{line: 856, col: 15, offset: 28079},
				run: (*parser).callonRegexBlock1,
				expr: &seqExpr{
					pos: position{line: 856, col: 15, offset: 28079},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 856, col: 15, offset: 28079},
							name: "CMD_REGEX",
						},
						&labeledExpr{
							pos:   position{line: 856, col: 25, offset: 28089},
							label: "keyAndOp",
							expr: &zeroOrOneExpr{
								pos: position{line: 856, col: 34, offset: 28098},
								expr: &seqExpr{
									pos: position{line: 856, col: 35, offset: 28099},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 856, col: 35, offset: 28099},
											name: "FieldName",
										},
										&ruleRefExpr{
											pos:  position{line: 856, col: 45, offset: 28109},
											name: "EqualityOperator",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 856, col: 64, offset: 28128},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 856, col: 68, offset: 28132},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel4",
			pos:  position{line: 884, col: 1, offset: 28711},
			expr: &actionExpr{
				pos: position{line: 884, col: 17, offset: 28727},
				run: (*parser).callonClauseLevel41,
				expr: &seqExpr{
					pos: position{line: 884, col: 17, offset: 28727},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 884, col: 17, offset: 28727},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 884, col: 23, offset: 28733},
								name: "ClauseLevel3",
							},
						},
						&labeledExpr{
							pos:   position{line: 884, col: 36, offset: 28746},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 884, col: 41, offset: 28751},
								expr: &seqExpr{
									pos: position{line: 884, col: 42, offset: 28752},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 884, col: 43, offset: 28753},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 884, col: 43, offset: 28753},
													name: "AND",
												},
												&ruleRefExpr{
													pos:  position{line: 884, col: 49, offset: 28759},
													name: "SPACE",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 884, col: 56, offset: 28766},
											name: "ClauseLevel3",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel3",
			pos:  position{line: 902, col: 1, offset: 29143},
			expr: &actionExpr{
				pos: position{line: 902, col: 17, offset: 29159},
				run: (*parser).callonClauseLevel31,
				expr: &seqExpr{
					pos: position{line: 902, col: 17, offset: 29159},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 902, col: 17, offset: 29159},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 902, col: 23, offset: 29165},
								name: "ClauseLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 902, col: 36, offset: 29178},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 902, col: 41, offset: 29183},
								expr: &seqExpr{
									pos: position{line: 902, col: 42, offset: 29184},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 902, col: 42, offset: 29184},
											name: "OR",
										},
										&ruleRefExpr{
											pos:  position{line: 902, col: 45, offset: 29187},
											name: "ClauseLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel2",
			pos:  position{line: 920, col: 1, offset: 29552},
			expr: &choiceExpr{
				pos: position{line: 920, col: 17, offset: 29568},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 920, col: 17, offset: 29568},
						run: (*parser).callonClauseLevel22,
						expr: &seqExpr{
							pos: position{line: 920, col: 17, offset: 29568},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 920, col: 17, offset: 29568},
									label: "notList",
									expr: &oneOrMoreExpr{
										pos: position{line: 920, col: 25, offset: 29576},
										expr: &ruleRefExpr{
											pos:  position{line: 920, col: 25, offset: 29576},
											name: "NOT",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 920, col: 30, offset: 29581},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 920, col: 36, offset: 29587},
										name: "ClauseLevel1",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 931, col: 5, offset: 29883},
						run: (*parser).callonClauseLevel29,
						expr: &labeledExpr{
							pos:   position{line: 931, col: 5, offset: 29883},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 931, col: 12, offset: 29890},
								name: "ClauseLevel1",
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel1",
			pos:  position{line: 935, col: 1, offset: 29931},
			expr: &choiceExpr{
				pos: position{line: 935, col: 17, offset: 29947},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 935, col: 17, offset: 29947},
						run: (*parser).callonClauseLevel12,
						expr: &seqExpr{
							pos: position{line: 935, col: 17, offset: 29947},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 935, col: 17, offset: 29947},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 935, col: 25, offset: 29955},
									label: "clause",
									expr: &ruleRefExpr{
										pos:  position{line: 935, col: 32, offset: 29962},
										name: "ClauseLevel4",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 935, col: 45, offset: 29975},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 937, col: 5, offset: 30012},
						run: (*parser).callonClauseLevel18,
						expr: &labeledExpr{
							pos:   position{line: 937, col: 5, offset: 30012},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 937, col: 10, offset: 30017},
								name: "SearchTerm",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchTerm",
			pos:  position{line: 943, col: 1, offset: 30175},
			expr: &actionExpr{
				pos: position{line: 943, col: 15, offset: 30189},
				run: (*parser).callonSearchTerm1,
				expr: &labeledExpr{
					pos:   position{line: 943, col: 15, offset: 30189},
					label: "term",
					expr: &choiceExpr{
						pos: position{line: 943, col: 21, offset: 30195},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 943, col: 21, offset: 30195},
								name: "FieldWithNumberValue",
							},
							&ruleRefExpr{
								pos:  position{line: 943, col: 44, offset: 30218},
								name: "FieldWithBooleanValue",
							},
							&ruleRefExpr{
								pos:  position{line: 943, col: 68, offset: 30242},
								name: "FieldWithStringValue",
							},
						},
					},
				},
			},
		},
		{
			name: "TimechartBlock",
			pos:  position{line: 948, col: 1, offset: 30383},
			expr: &actionExpr{
				pos: position{line: 948, col: 19, offset: 30401},
				run: (*parser).callonTimechartBlock1,
				expr: &seqExpr{
					pos: position{line: 948, col: 19, offset: 30401},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 948, col: 19, offset: 30401},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 948, col: 24, offset: 30406},
							name: "CMD_TIMECHART",
						},
						&labeledExpr{
							pos:   position{line: 948, col: 38, offset: 30420},
							label: "tcArgs",
							expr: &ruleRefExpr{
								pos:  position{line: 948, col: 45, offset: 30427},
								name: "TimechartArgumentsList",
							},
						},
						&labeledExpr{
							pos:   position{line: 948, col: 68, offset: 30450},
							label: "limitExpr",
							expr: &zeroOrOneExpr{
								pos: position{line: 948, col: 78, offset: 30460},
								expr: &ruleRefExpr{
									pos:  position{line: 948, col: 79, offset: 30461},
									name: "LimitExpr",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimechartArgumentsList",
			pos:  position{line: 1036, col: 1, offset: 33204},
			expr: &actionExpr{
				pos: position{line: 1036, col: 27, offset: 33230},
				run: (*parser).callonTimechartArgumentsList1,
				expr: &seqExpr{
					pos: position{line: 1036, col: 27, offset: 33230},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1036, col: 27, offset: 33230},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1036, col: 33, offset: 33236},
								name: "TimechartArgument",
							},
						},
						&labeledExpr{
							pos:   position{line: 1036, col: 51, offset: 33254},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1036, col: 56, offset: 33259},
								expr: &seqExpr{
									pos: position{line: 1036, col: 57, offset: 33260},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1036, col: 57, offset: 33260},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 1036, col: 63, offset: 33266},
											name: "TimechartArgument",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimechartArgument",
			pos:  position{line: 1065, col: 1, offset: 34000},
			expr: &actionExpr{
				pos: position{line: 1065, col: 22, offset: 34021},
				run: (*parser).callonTimechartArgument1,
				expr: &labeledExpr{
					pos:   position{line: 1065, col: 22, offset: 34021},
					label: "tcArg",
					expr: &choiceExpr{
						pos: position{line: 1065, col: 29, offset: 34028},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1065, col: 29, offset: 34028},
								name: "SingleAggExpr",
							},
							&ruleRefExpr{
								pos:  position{line: 1065, col: 45, offset: 34044},
								name: "TcOptions",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleAggExpr",
			pos:  position{line: 1069, col: 1, offset: 34082},
			expr: &actionExpr{
				pos: position{line: 1069, col: 18, offset: 34099},
				run: (*parser).callonSingleAggExpr1,
				expr: &seqExpr{
					pos: position{line: 1069, col: 18, offset: 34099},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1069, col: 18, offset: 34099},
							label: "aggs",
							expr: &ruleRefExpr{
								pos:  position{line: 1069, col: 23, offset: 34104},
								name: "AggregationList",
							},
						},
						&labeledExpr{
							pos:   position{line: 1069, col: 39, offset: 34120},
							label: "splitByClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 1069, col: 53, offset: 34134},
								expr: &ruleRefExpr{
									pos:  position{line: 1069, col: 53, offset: 34134},
									name: "SplitByClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SplitByClause",
			pos:  position{line: 1083, col: 1, offset: 34473},
			expr: &actionExpr{
				pos: position{line: 1083, col: 18, offset: 34490},
				run: (*parser).callonSplitByClause1,
				expr: &seqExpr{
					pos: position{line: 1083, col: 18, offset: 34490},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1083, col: 18, offset: 34490},
							name: "BY",
						},
						&labeledExpr{
							pos:   position{line: 1083, col: 21, offset: 34493},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1083, col: 27, offset: 34499},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "TcOptions",
			pos:  position{line: 1091, col: 1, offset: 34628},
			expr: &actionExpr{
				pos: position{line: 1091, col: 14, offset: 34641},
				run: (*parser).callonTcOptions1,
				expr: &labeledExpr{
					pos:   position{line: 1091, col: 14, offset: 34641},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 1091, col: 22, offset: 34649},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1091, col: 22, offset: 34649},
								name: "BinOptions",
							},
							&oneOrMoreExpr{
								pos: position{line: 1091, col: 35, offset: 34662},
								expr: &ruleRefExpr{
									pos:  position{line: 1091, col: 36, offset: 34663},
									name: "TcOption",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TcOption",
			pos:  position{line: 1133, col: 1, offset: 36183},
			expr: &actionExpr{
				pos: position{line: 1133, col: 13, offset: 36195},
				run: (*parser).callonTcOption1,
				expr: &seqExpr{
					pos: position{line: 1133, col: 13, offset: 36195},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1133, col: 13, offset: 36195},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 1133, col: 19, offset: 36201},
							label: "tcOptionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 1133, col: 31, offset: 36213},
								name: "TcOptionCMD",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1133, col: 43, offset: 36225},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1133, col: 49, offset: 36231},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 1133, col: 53, offset: 36235},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "TcOptionCMD",
			pos:  position{line: 1138, col: 1, offset: 36348},
			expr: &actionExpr{
				pos: position{line: 1138, col: 16, offset: 36363},
				run: (*parser).callonTcOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 1138, col: 16, offset: 36363},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 1138, col: 24, offset: 36371},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 1138, col: 24, offset: 36371},
								val:        "usenull",
								ignoreCase: false,
								want:       "\"usenull\"",
							},
							&litMatcher{
								pos:        position{line: 1138, col: 36, offset: 36383},
								val:        "useother",
								ignoreCase: false,
								want:       "\"useother\"",
							},
							&litMatcher{
								pos:        position{line: 1138, col: 49, offset: 36396},
								val:        "nullstr",
								ignoreCase: false,
								want:       "\"nullstr\"",
							},
							&litMatcher{
								pos:        position{line: 1138, col: 61, offset: 36408},
								val:        "otherstr",
								ignoreCase: false,
								want:       "\"otherstr\"",
							},
						},
					},
				},
			},
		},
		{
			name: "AllTimeScale",
			pos:  position{line: 1146, col: 1, offset: 36604},
			expr: &actionExpr{
				pos: position{line: 1146, col: 17, offset: 36620},
				run: (*parser).callonAllTimeScale1,
				expr: &labeledExpr{
					pos:   position{line: 1146, col: 17, offset: 36620},
					label: "timeUnit",
					expr: &choiceExpr{
						pos: position{line: 1146, col: 27, offset: 36630},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1146, col: 27, offset: 36630},
								name: "Second",
							},
							&ruleRefExpr{
								pos:  position{line: 1146, col: 36, offset: 36639},
								name: "Month",
							},
							&ruleRefExpr{
								pos:  position{line: 1146, col: 44, offset: 36647},
								name: "Subseconds",
							},
							&ruleRefExpr{
								pos:  position{line: 1146, col: 57, offset: 36660},
								name: "Minute",
							},
							&ruleRefExpr{
								pos:  position{line: 1146, col: 66, offset: 36669},
								name: "Hour",
							},
							&ruleRefExpr{
								pos:  position{line: 1146, col: 73, offset: 36676},
								name: "Day",
							},
							&ruleRefExpr{
								pos:  position{line: 1146, col: 79, offset: 36682},
								name: "Week",
							},
							&ruleRefExpr{
								pos:  position{line: 1146, col: 86, offset: 36689},
								name: "Quarter",
							},
							&ruleRefExpr{
								pos:  position{line: 1146, col: 96, offset: 36699},
								name: "Year",
							},
						},
					},
				},
			},
		},
		{
			name: "BinSpanLenOption",
			pos:  position{line: 1150, col: 1, offset: 36735},
			expr: &actionExpr{
				pos: position{line: 1150, col: 21, offset: 36755},
				run: (*parser).callonBinSpanLenOption1,
				expr: &seqExpr{
					pos: position{line: 1150, col: 21, offset: 36755},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1150, col: 21, offset: 36755},
							label: "number",
							expr: &choiceExpr{
								pos: position{line: 1150, col: 29, offset: 36763},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1150, col: 29, offset: 36763},
										name: "FloatAsString",
									},
									&ruleRefExpr{
										pos:  position{line: 1150, col: 45, offset: 36779},
										name: "IntegerAsString",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1150, col: 62, offset: 36796},
							label: "timeScale",
							expr: &zeroOrOneExpr{
								pos: position{line: 1150, col: 72, offset: 36806},
								expr: &ruleRefExpr{
									pos:  position{line: 1150, col: 73, offset: 36807},
									name: "AllTimeScale",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BinOptionMinSpan",
			pos:  position{line: 1209, col: 1, offset: 39489},
			expr: &actionExpr{
				pos: position{line: 1209, col: 21, offset: 39509},
				run: (*parser).callonBinOptionMinSpan1,
				expr: &seqExpr{
					pos: position{line: 1209, col: 21, offset: 39509},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1209, col: 21, offset: 39509},
							val:        "minspan",
							ignoreCase: false,
							want:       "\"minspan\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1209, col: 31, offset: 39519},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1209, col: 37, offset: 39525},
							label: "spanLength",
							expr: &ruleRefExpr{
								pos:  position{line: 1209, col: 48, offset: 39536},
								name: "BinSpanLenOption",
							},
						},
					},
				},
			},
		},
		{
			name: "BinOptionMaxBins",
			pos:  position{line: 1220, col: 1, offset: 39777},
			expr: &actionExpr{
				pos: position{line: 1220, col: 21, offset: 39797},
				run: (*parser).callonBinOptionMaxBins1,
				expr: &seqExpr{
					pos: position{line: 1220, col: 21, offset: 39797},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1220, col: 21, offset: 39797},
							val:        "bins",
							ignoreCase: false,
							want:       "\"bins\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1220, col: 28, offset: 39804},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1220, col: 34, offset: 39810},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 1220, col: 43, offset: 39819},
								name: "IntegerAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "BinOptionAlignTime",
			pos:  position{line: 1241, col: 1, offset: 40398},
			expr: &choiceExpr{
				pos: position{line: 1241, col: 23, offset: 40420},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1241, col: 23, offset: 40420},
						run: (*parser).callonBinOptionAlignTime2,
						expr: &seqExpr{
							pos: position{line: 1241, col: 23, offset: 40420},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1241, col: 23, offset: 40420},
									val:        "aligntime",
									ignoreCase: false,
									want:       "\"aligntime\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1241, col: 35, offset: 40432},
									name: "EQUAL",
								},
								&labeledExpr{
									pos:   position{line: 1241, col: 41, offset: 40438},
									label: "utcEpoch",
									expr: &ruleRefExpr{
										pos:  position{line: 1241, col: 51, offset: 40448},
										name: "PositiveIntegerAsString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1255, col: 3, offset: 40867},
						run: (*parser).callonBinOptionAlignTime8,
						expr: &seqExpr{
							pos: position{line: 1255, col: 3, offset: 40867},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1255, col: 3, offset: 40867},
									val:        "aligntime",
									ignoreCase: false,
									want:       "\"aligntime\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1255, col: 15, offset: 40879},
									name: "EQUAL",
								},
								&labeledExpr{
									pos:   position{line: 1255, col: 21, offset: 40885},
									label: "timestamp",
									expr: &choiceExpr{
										pos: position{line: 1255, col: 32, offset: 40896},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 1255, col: 32, offset: 40896},
												name: "AbsoluteTimestamp",
											},
											&ruleRefExpr{
												pos:  position{line: 1255, col: 52, offset: 40916},
												name: "RelativeTimestamp",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BinOptionStart",
			pos:  position{line: 1275, col: 1, offset: 41385},
			expr: &actionExpr{
				pos: position{line: 1275, col: 19, offset: 41403},
				run: (*parser).callonBinOptionStart1,
				expr: &seqExpr{
					pos: position{line: 1275, col: 19, offset: 41403},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1275, col: 19, offset: 41403},
							val:        "start",
							ignoreCase: false,
							want:       "\"start\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1275, col: 27, offset: 41411},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1275, col: 33, offset: 41417},
							label: "number",
							expr: &choiceExpr{
								pos: position{line: 1275, col: 41, offset: 41425},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1275, col: 41, offset: 41425},
										name: "FloatAsString",
									},
									&ruleRefExpr{
										pos:  position{line: 1275, col: 57, offset: 41441},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BinOptionEnd",
			pos:  position{line: 1290, col: 1, offset: 41820},
			expr: &actionExpr{
				pos: position{line: 1290, col: 17, offset: 41836},
				run: (*parser).callonBinOptionEnd1,
				expr: &seqExpr{
					pos: position{line: 1290, col: 17, offset: 41836},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1290, col: 17, offset: 41836},
							val:        "end",
							ignoreCase: false,
							want:       "\"end\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1290, col: 23, offset: 41842},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1290, col: 29, offset: 41848},
							label: "number",
							expr: &choiceExpr{
								pos: position{line: 1290, col: 37, offset: 41856},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1290, col: 37, offset: 41856},
										name: "FloatAsString",
									},
									&ruleRefExpr{
										pos:  position{line: 1290, col: 53, offset: 41872},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BinOptionSpan",
			pos:  position{line: 1305, col: 1, offset: 42243},
			expr: &choiceExpr{
				pos: position{line: 1305, col: 18, offset: 42260},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1305, col: 18, offset: 42260},
						run: (*parser).callonBinOptionSpan2,
						expr: &seqExpr{
							pos: position{line: 1305, col: 18, offset: 42260},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1305, col: 18, offset: 42260},
									val:        "span",
									ignoreCase: false,
									want:       "\"span\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1305, col: 25, offset: 42267},
									name: "EQUAL",
								},
								&labeledExpr{
									pos:   position{line: 1305, col: 31, offset: 42273},
									label: "num1",
									expr: &zeroOrOneExpr{
										pos: position{line: 1305, col: 36, offset: 42278},
										expr: &choiceExpr{
											pos: position{line: 1305, col: 37, offset: 42279},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 1305, col: 37, offset: 42279},
													name: "FloatAsString",
												},
												&ruleRefExpr{
													pos:  position{line: 1305, col: 53, offset: 42295},
													name: "IntegerAsString",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1305, col: 71, offset: 42313},
									val:        "log",
									ignoreCase: false,
									want:       "\"log\"",
								},
								&labeledExpr{
									pos:   position{line: 1305, col: 77, offset: 42319},
									label: "num2",
									expr: &zeroOrOneExpr{
										pos: position{line: 1305, col: 82, offset: 42324},
										expr: &choiceExpr{
											pos: position{line: 1305, col: 83, offset: 42325},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 1305, col: 83, offset: 42325},
													name: "FloatAsString",
												},
												&ruleRefExpr{
													pos:  position{line: 1305, col: 99, offset: 42341},
													name: "IntegerAsString",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1348, col: 3, offset: 43777},
						run: (*parser).callonBinOptionSpan17,
						expr: &seqExpr{
							pos: position{line: 1348, col: 3, offset: 43777},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1348, col: 3, offset: 43777},
									val:        "span",
									ignoreCase: false,
									want:       "\"span\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1348, col: 10, offset: 43784},
									name: "EQUAL",
								},
								&labeledExpr{
									pos:   position{line: 1348, col: 16, offset: 43790},
									label: "spanLen",
									expr: &ruleRefExpr{
										pos:  position{line: 1348, col: 24, offset: 43798},
										name: "BinSpanLenOption",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BinCmdOption",
			pos:  position{line: 1363, col: 1, offset: 44129},
			expr: &actionExpr{
				pos: position{line: 1363, col: 17, offset: 44145},
				run: (*parser).callonBinCmdOption1,
				expr: &labeledExpr{
					pos:   position{line: 1363, col: 17, offset: 44145},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 1363, col: 25, offset: 44153},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1363, col: 25, offset: 44153},
								name: "BinOptionAlignTime",
							},
							&ruleRefExpr{
								pos:  position{line: 1363, col: 46, offset: 44174},
								name: "BinOptionMinSpan",
							},
							&ruleRefExpr{
								pos:  position{line: 1363, col: 65, offset: 44193},
								name: "BinOptionMaxBins",
							},
							&ruleRefExpr{
								pos:  position{line: 1363, col: 84, offset: 44212},
								name: "BinOptionStart",
							},
							&ruleRefExpr{
								pos:  position{line: 1363, col: 101, offset: 44229},
								name: "BinOptionEnd",
							},
							&ruleRefExpr{
								pos:  position{line: 1363, col: 116, offset: 44244},
								name: "BinOptionSpan",
							},
						},
					},
				},
			},
		},
		{
			name: "BinCmdOptionsList",
			pos:  position{line: 1367, col: 1, offset: 44287},
			expr: &actionExpr{
				pos: position{line: 1367, col: 22, offset: 44308},
				run: (*parser).callonBinCmdOptionsList1,
				expr: &seqExpr{
					pos: position{line: 1367, col: 22, offset: 44308},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1367, col: 22, offset: 44308},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1367, col: 29, offset: 44315},
								name: "BinCmdOption",
							},
						},
						&labeledExpr{
							pos:   position{line: 1367, col: 42, offset: 44328},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1367, col: 48, offset: 44334},
								expr: &seqExpr{
									pos: position{line: 1367, col: 49, offset: 44335},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1367, col: 49, offset: 44335},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 1367, col: 55, offset: 44341},
											name: "BinCmdOption",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BinBlock",
			pos:  position{line: 1413, col: 1, offset: 45825},
			expr: &choiceExpr{
				pos: position{line: 1413, col: 13, offset: 45837},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1413, col: 13, offset: 45837},
						run: (*parser).callonBinBlock2,
						expr: &seqExpr{
							pos: position{line: 1413, col: 13, offset: 45837},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1413, col: 13, offset: 45837},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 1413, col: 18, offset: 45842},
									name: "CMD_BIN",
								},
								&labeledExpr{
									pos:   position{line: 1413, col: 26, offset: 45850},
									label: "binCmdOption",
									expr: &ruleRefExpr{
										pos:  position{line: 1413, col: 40, offset: 45864},
										name: "BinCmdOptionsList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1413, col: 59, offset: 45883},
									name: "SPACE",
								},
								&labeledExpr{
									pos:   position{line: 1413, col: 65, offset: 45889},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1413, col: 71, offset: 45895},
										name: "FieldName",
									},
								},
								&labeledExpr{
									pos:   position{line: 1413, col: 81, offset: 45905},
									label: "newFieldName",
									expr: &zeroOrOneExpr{
										pos: position{line: 1413, col: 94, offset: 45918},
										expr: &ruleRefExpr{
											pos:  position{line: 1413, col: 95, offset: 45919},
											name: "AsField",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1436, col: 3, offset: 46548},
						run: (*parser).callonBinBlock14,
						expr: &seqExpr{
							pos: position{line: 1436, col: 3, offset: 46548},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1436, col: 3, offset: 46548},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 1436, col: 8, offset: 46553},
									name: "CMD_BIN",
								},
								&labeledExpr{
									pos:   position{line: 1436, col: 16, offset: 46561},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1436, col: 22, offset: 46567},
										name: "FieldName",
									},
								},
								&labeledExpr{
									pos:   position{line: 1436, col: 32, offset: 46577},
									label: "newFieldName",
									expr: &zeroOrOneExpr{
										pos: position{line: 1436, col: 45, offset: 46590},
										expr: &ruleRefExpr{
											pos:  position{line: 1436, col: 46, offset: 46591},
											name: "AsField",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BinOptions",
			pos:  position{line: 1463, col: 1, offset: 47329},
			expr: &actionExpr{
				pos: position{line: 1463, col: 15, offset: 47343},
				run: (*parser).callonBinOptions1,
				expr: &labeledExpr{
					pos:   position{line: 1463, col: 15, offset: 47343},
					label: "spanOptions",
					expr: &ruleRefExpr{
						pos:  position{line: 1463, col: 27, offset: 47355},
						name: "SpanOptions",
					},
				},
			},
		},
		{
			name: "SpanOptions",
			pos:  position{line: 1471, col: 1, offset: 47580},
			expr: &actionExpr{
				pos: position{line: 1471, col: 16, offset: 47595},
				run: (*parser).callonSpanOptions1,
				expr: &seqExpr{
					pos: position{line: 1471, col: 16, offset: 47595},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1471, col: 16, offset: 47595},
							name: "CMD_SPAN",
						},
						&ruleRefExpr{
							pos:  position{line: 1471, col: 25, offset: 47604},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1471, col: 31, offset: 47610},
							label: "spanLength",
							expr: &ruleRefExpr{
								pos:  position{line: 1471, col: 42, offset: 47621},
								name: "SpanLength",
							},
						},
					},
				},
			},
		},
		{
			name: "SpanLength",
			pos:  position{line: 1478, col: 1, offset: 47767},
			expr: &actionExpr{
				pos: position{line: 1478, col: 15, offset: 47781},
				run: (*parser).callonSpanLength1,
				expr: &seqExpr{
					pos: position{line: 1478, col: 15, offset: 47781},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1478, col: 15, offset: 47781},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 1478, col: 24, offset: 47790},
								name: "IntegerAsString",
							},
						},
						&labeledExpr{
							pos:   position{line: 1478, col: 40, offset: 47806},
							label: "timeScale",
							expr: &ruleRefExpr{
								pos:  position{line: 1478, col: 50, offset: 47816},
								name: "AllTimeScale",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitExpr",
			pos:  position{line: 1495, col: 1, offset: 48362},
			expr: &actionExpr{
				pos: position{line: 1495, col: 14, offset: 48375},
				run: (*parser).callonLimitExpr1,
				expr: &seqExpr{
					pos: position{line: 1495, col: 14, offset: 48375},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1495, col: 14, offset: 48375},
							name: "SPACE",
						},
						&litMatcher{
							pos:        position{line: 1495, col: 20, offset: 48381},
							val:        "limit",
							ignoreCase: false,
							want:       "\"limit\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1495, col: 28, offset: 48389},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1495, col: 34, offset: 48395},
							label: "sortBy",
							expr: &zeroOrOneExpr{
								pos: position{line: 1495, col: 41, offset: 48402},
								expr: &choiceExpr{
									pos: position{line: 1495, col: 42, offset: 48403},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 1495, col: 42, offset: 48403},
											val:        "top",
											ignoreCase: false,
											want:       "\"top\"",
										},
										&litMatcher{
											pos:        position{line: 1495, col: 50, offset: 48411},
											val:        "bottom",
											ignoreCase: false,
											want:       "\"bottom\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1495, col: 61, offset: 48422},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 1495, col: 76, offset: 48437},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 1495, col: 86, offset: 48447},
								name: "IntegerAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticBlock",
			pos:  position{line: 1519, col: 1, offset: 49028},
			expr: &actionExpr{
				pos: position{line: 1519, col: 19, offset: 49046},
				run: (*parser).callonStatisticBlock1,
				expr: &seqExpr{
					pos: position{line: 1519, col: 19, offset: 49046},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1519, col: 19, offset: 49046},
							name: "PIPE",
						},
						&labeledExpr{
							pos:   position{line: 1519, col: 24, offset: 49051},
							label: "statisticExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 1519, col: 38, offset: 49065},
								name: "StatisticExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticExpr",
			pos:  position{line: 1552, col: 1, offset: 50043},
			expr: &actionExpr{
				pos: position{line: 1552, col: 18, offset: 50060},
				run: (*parser).callonStatisticExpr1,
				expr: &seqExpr{
					pos: position{line: 1552, col: 18, offset: 50060},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1552, col: 18, offset: 50060},
							label: "cmd",
							expr: &choiceExpr{
								pos: position{line: 1552, col: 23, offset: 50065},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1552, col: 23, offset: 50065},
										name: "CMD_TOP",
									},
									&ruleRefExpr{
										pos:  position{line: 1552, col: 33, offset: 50075},
										name: "CMD_RARE",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1552, col: 43, offset: 50085},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 1552, col: 49, offset: 50091},
								expr: &ruleRefExpr{
									pos:  position{line: 1552, col: 50, offset: 50092},
									name: "StatisticLimit",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1552, col: 67, offset: 50109},
							label: "fieldList",
							expr: &seqExpr{
								pos: position{line: 1552, col: 78, offset: 50120},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 1552, col: 78, offset: 50120},
										name: "SPACE",
									},
									&ruleRefExpr{
										pos:  position{line: 1552, col: 84, offset: 50126},
										name: "FieldNameList",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1552, col: 99, offset: 50141},
							label: "byClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 1552, col: 108, offset: 50150},
								expr: &ruleRefExpr{
									pos:  position{line: 1552, col: 109, offset: 50151},
									name: "ByClause",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1552, col: 120, offset: 50162},
							label: "options",
							expr: &zeroOrOneExpr{
								pos: position{line: 1552, col: 128, offset: 50170},
								expr: &ruleRefExpr{
									pos:  position{line: 1552, col: 129, offset: 50171},
									name: "StatisticOptions",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticLimit",
			pos:  position{line: 1594, col: 1, offset: 51256},
			expr: &choiceExpr{
				pos: position{line: 1594, col: 19, offset: 51274},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1594, col: 19, offset: 51274},
						run: (*parser).callonStatisticLimit2,
						expr: &seqExpr{
							pos: position{line: 1594, col: 19, offset: 51274},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1594, col: 19, offset: 51274},
									name: "SPACE",
								},
								&labeledExpr{
									pos:   position{line: 1594, col: 25, offset: 51280},
									label: "number",
									expr: &ruleRefExpr{
										pos:  position{line: 1594, col: 32, offset: 51287},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1597, col: 3, offset: 51341},
						run: (*parser).callonStatisticLimit7,
						expr: &seqExpr{
							pos: position{line: 1597, col: 3, offset: 51341},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1597, col: 3, offset: 51341},
									name: "SPACE",
								},
								&litMatcher{
									pos:        position{line: 1597, col: 9, offset: 51347},
									val:        "limit",
									ignoreCase: false,
									want:       "\"limit\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1597, col: 17, offset: 51355},
									name: "EQUAL",
								},
								&labeledExpr{
									pos:   position{line: 1597, col: 23, offset: 51361},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 1597, col: 30, offset: 51368},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticOptions",
			pos:  position{line: 1602, col: 1, offset: 51466},
			expr: &actionExpr{
				pos: position{line: 1602, col: 21, offset: 51486},
				run: (*parser).callonStatisticOptions1,
				expr: &labeledExpr{
					pos:   position{line: 1602, col: 21, offset: 51486},
					label: "option",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1602, col: 28, offset: 51493},
						expr: &ruleRefExpr{
							pos:  position{line: 1602, col: 29, offset: 51494},
							name: "StatisticOption",
						},
					},
				},
			},
		},
		{
			name: "StatisticOption",
			pos:  position{line: 1651, col: 1, offset: 53056},
			expr: &actionExpr{
				pos: position{line: 1651, col: 20, offset: 53075},
				run: (*parser).callonStatisticOption1,
				expr: &seqExpr{
					pos: position{line: 1651, col: 20, offset: 53075},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1651, col: 20, offset: 53075},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 1651, col: 26, offset: 53081},
							label: "optionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 1651, col: 36, offset: 53091},
								name: "StatisticOptionCMD",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1651, col: 55, offset: 53110},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1651, col: 61, offset: 53116},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1651, col: 67, offset: 53122},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticOptionCMD",
			pos:  position{line: 1656, col: 1, offset: 53231},
			expr: &actionExpr{
				pos: position{line: 1656, col: 23, offset: 53253},
				run: (*parser).callonStatisticOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 1656, col: 23, offset: 53253},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 1656, col: 31, offset: 53261},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 1656, col: 31, offset: 53261},
								val:        "countfield",
								ignoreCase: false,
								want:       "\"countfield\"",
							},
							&litMatcher{
								pos:        position{line: 1656, col: 46, offset: 53276},
								val:        "showcount",
								ignoreCase: false,
								want:       "\"showcount\"",
							},
							&litMatcher{
								pos:        position{line: 1656, col: 60, offset: 53290},
								val:        "otherstr",
								ignoreCase: false,
								want:       "\"otherstr\"",
							},
							&litMatcher{
								pos:        position{line: 1656, col: 73, offset: 53303},
								val:        "useother",
								ignoreCase: false,
								want:       "\"useother\"",
							},
							&litMatcher{
								pos:        position{line: 1656, col: 85, offset: 53315},
								val:        "percentfield",
								ignoreCase: false,
								want:       "\"percentfield\"",
							},
							&litMatcher{
								pos:        position{line: 1656, col: 102, offset: 53332},
								val:        "showperc",
								ignoreCase: false,
								want:       "\"showperc\"",
							},
						},
					},
				},
			},
		},
		{
			name: "ByClause",
			pos:  position{line: 1664, col: 1, offset: 53519},
			expr: &choiceExpr{
				pos: position{line: 1664, col: 13, offset: 53531},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1664, col: 13, offset: 53531},
						run: (*parser).callonByClause2,
						expr: &seqExpr{
							pos: position{line: 1664, col: 13, offset: 53531},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1664, col: 13, offset: 53531},
									name: "BY",
								},
								&labeledExpr{
									pos:   position{line: 1664, col: 16, offset: 53534},
									label: "fieldList",
									expr: &ruleRefExpr{
										pos:  position{line: 1664, col: 26, offset: 53544},
										name: "FieldNameList",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1667, col: 3, offset: 53601},
						run: (*parser).callonByClause7,
						expr: &labeledExpr{
							pos:   position{line: 1667, col: 3, offset: 53601},
							label: "groupByBlock",
							expr: &ruleRefExpr{
								pos:  position{line: 1667, col: 16, offset: 53614},
								name: "GroupbyBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupBlock",
			pos:  position{line: 1671, col: 1, offset: 53672},
			expr: &actionExpr{
				pos: position{line: 1671, col: 15, offset: 53686},
				run: (*parser).callonDedupBlock1,
				expr: &seqExpr{
					pos: position{line: 1671, col: 15, offset: 53686},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1671, col: 15, offset: 53686},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1671, col: 20, offset: 53691},
							name: "CMD_DEDUP",
						},
						&labeledExpr{
							pos:   position{line: 1671, col: 30, offset: 53701},
							label: "dedupExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 1671, col: 40, offset: 53711},
								name: "DedupExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupExpr",
			pos:  position{line: 1691, col: 1, offset: 54279},
			expr: &actionExpr{
				pos: position{line: 1691, col: 14, offset: 54292},
				run: (*parser).callonDedupExpr1,
				expr: &seqExpr{
					pos: position{line: 1691, col: 14, offset: 54292},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1691, col: 14, offset: 54292},
							label: "limitArr",
							expr: &zeroOrOneExpr{
								pos: position{line: 1691, col: 23, offset: 54301},
								expr: &seqExpr{
									pos: position{line: 1691, col: 24, offset: 54302},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1691, col: 24, offset: 54302},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 1691, col: 30, offset: 54308},
											name: "IntegerAsString",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1691, col: 48, offset: 54326},
							label: "options1",
							expr: &zeroOrOneExpr{
								pos: position{line: 1691, col: 57, offset: 54335},
								expr: &ruleRefExpr{
									pos:  position{line: 1691, col: 58, offset: 54336},
									name: "DedupOptions",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1691, col: 73, offset: 54351},
							label: "fieldList",
							expr: &zeroOrOneExpr{
								pos: position{line: 1691, col: 83, offset: 54361},
								expr: &ruleRefExpr{
									pos:  position{line: 1691, col: 84, offset: 54362},
									name: "DedupFieldList",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1691, col: 101, offset: 54379},
							label: "options2",
							expr: &zeroOrOneExpr{
								pos: position{line: 1691, col: 110, offset: 54388},
								expr: &ruleRefExpr{
									pos:  position{line: 1691, col: 111, offset: 54389},
									name: "DedupOptions",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1691, col: 126, offset: 54404},
							label: "sortByClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 1691, col: 139, offset: 54417},
								expr: &ruleRefExpr{
									pos:  position{line: 1691, col: 140, offset: 54418},
									name: "DedupSortByClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DedupFieldName",
			pos:  position{line: 1748, col: 1, offset: 56156},
			expr: &actionExpr{
				pos: position{line: 1748, col: 19, offset: 56174},
				run: (*parser).callonDedupFieldName1,
				expr: &seqExpr{
					pos: position{line: 1748, col: 19, offset: 56174},
					exprs: []any{
						&notExpr{
							pos: position{line: 1748, col: 19, offset: 56174},
							expr: &litMatcher{
								pos:        position{line: 1748, col: 21, offset: 56176},
								val:        "sortby",
								ignoreCase: false,
								want:       "\"sortby\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1748, col: 31, offset: 56186},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1748, col: 37, offset: 56192},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "SpaceSeparatedFieldNameList",
			pos:  position{line: 1754, col: 1, offset: 56331},
			expr: &actionExpr{
				pos: position{line: 1754, col: 32, offset: 56362},
				run: (*parser).callonSpaceSeparatedFieldNameList1,
				expr: &seqExpr{
					pos: position{line: 1754, col: 32, offset: 56362},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1754, col: 32, offset: 56362},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1754, col: 38, offset: 56368},
								name: "FieldName",
							},
						},
						&notExpr{
							pos: position{line: 1754, col: 48, offset: 56378},
							expr: &ruleRefExpr{
								pos:  position{line: 1754, col: 50, offset: 56380},
								name: "EQUAL",
							},
						},
						&labeledExpr{
							pos:   position{line: 1754, col: 57, offset: 56387},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1754, col: 62, offset: 56392},
								expr: &seqExpr{
									pos: position{line: 1754, col: 63, offset: 56393},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1754, col: 63, offset: 56393},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 1754, col: 69, offset: 56399},
											name: "FieldName",
										},
										&notExpr{
											pos: position{line: 1754, col: 79, offset: 56409},
											expr: &ruleRefExpr{
												pos:  position{line: 1754, col: 81, offset: 56411},
												name: "EQUAL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DedupFieldList",
			pos:  position{line: 1765, col: 1, offset: 56686},
			expr: &actionExpr{
				pos: position{line: 1765, col: 19, offset: 56704},
				run: (*parser).callonDedupFieldList1,
				expr: &seqExpr{
					pos: position{line: 1765, col: 19, offset: 56704},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1765, col: 19, offset: 56704},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 1765, col: 25, offset: 56710},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1765, col: 31, offset: 56716},
								name: "DedupFieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 1765, col: 46, offset: 56731},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1765, col: 51, offset: 56736},
								expr: &seqExpr{
									pos: position{line: 1765, col: 52, offset: 56737},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1765, col: 52, offset: 56737},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 1765, col: 58, offset: 56743},
											name: "DedupFieldName",
										},
										&notExpr{
											pos: position{line: 1765, col: 73, offset: 56758},
											expr: &ruleRefExpr{
												pos:  position{line: 1765, col: 74, offset: 56759},
												name: "EQUAL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DedupOptions",
			pos:  position{line: 1783, col: 1, offset: 57287},
			expr: &actionExpr{
				pos: position{line: 1783, col: 17, offset: 57303},
				run: (*parser).callonDedupOptions1,
				expr: &labeledExpr{
					pos:   position{line: 1783, col: 17, offset: 57303},
					label: "option",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1783, col: 24, offset: 57310},
						expr: &ruleRefExpr{
							pos:  position{line: 1783, col: 25, offset: 57311},
							name: "DedupOption",
						},
					},
				},
			},
		},
		{
			name: "DedupOption",
			pos:  position{line: 1823, col: 1, offset: 58577},
			expr: &actionExpr{
				pos: position{line: 1823, col: 16, offset: 58592},
				run: (*parser).callonDedupOption1,
				expr: &seqExpr{
					pos: position{line: 1823, col: 16, offset: 58592},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1823, col: 16, offset: 58592},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 1823, col: 22, offset: 58598},
							label: "optionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 1823, col: 32, offset: 58608},
								name: "DedupOptionCMD",
							},
						},
						&litMatcher{
							pos:        position{line: 1823, col: 47, offset: 58623},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 1823, col: 51, offset: 58627},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1823, col: 57, offset: 58633},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupOptionCMD",
			pos:  position{line: 1828, col: 1, offset: 58742},
			expr: &actionExpr{
				pos: position{line: 1828, col: 19, offset: 58760},
				run: (*parser).callonDedupOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 1828, col: 19, offset: 58760},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 1828, col: 27, offset: 58768},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 1828, col: 27, offset: 58768},
								val:        "consecutive",
								ignoreCase: false,
								want:       "\"consecutive\"",
							},
							&litMatcher{
								pos:        position{line: 1828, col: 43, offset: 58784},
								val:        "keepempty",
								ignoreCase: false,
								want:       "\"keepempty\"",
							},
							&litMatcher{
								pos:        position{line: 1828, col: 57, offset: 58798},
								val:        "keepevents",
								ignoreCase: false,
								want:       "\"keepevents\"",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupSortByClause",
			pos:  position{line: 1836, col: 1, offset: 58983},
			expr: &actionExpr{
				pos: position{line: 1836, col: 22, offset: 59004},
				run: (*parser).callonDedupSortByClause1,
				expr: &seqExpr{
					pos: position{line: 1836, col: 22, offset: 59004},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1836, col: 22, offset: 59004},
							name: "CMD_DEDUP_SORTBY",
						},
						&labeledExpr{
							pos:   position{line: 1836, col: 39, offset: 59021},
							label: "dedupSortEles",
							expr: &ruleRefExpr{
								pos:  position{line: 1836, col: 53, offset: 59035},
								name: "SortElements",
							},
						},
					},
				},
			},
		},
		{
			name: "SortElements",
			pos:  position{line: 1841, col: 1, offset: 59143},
			expr: &actionExpr{
				pos: position{line: 1841, col: 17, offset: 59159},
				run: (*parser).callonSortElements1,
				expr: &seqExpr{
					pos: position{line: 1841, col: 17, offset: 59159},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1841, col: 17, offset: 59159},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1841, col: 23, offset: 59165},
								name: "SingleSortElement",
							},
						},
						&labeledExpr{
							pos:   position{line: 1841, col: 41, offset: 59183},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1841, col: 46, offset: 59188},
								expr: &seqExpr{
									pos: position{line: 1841, col: 47, offset: 59189},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1841, col: 47, offset: 59189},
											name: "SPACE_OR_COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 1841, col: 62, offset: 59204},
											name: "SingleSortElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleSortElement",
			pos:  position{line: 1856, col: 1, offset: 59562},
			expr: &actionExpr{
				pos: position{line: 1856, col: 22, offset: 59583},
				run: (*parser).callonSingleSortElement1,
				expr: &labeledExpr{
					pos:   position{line: 1856, col: 22, offset: 59583},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1856, col: 31, offset: 59592},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1856, col: 31, offset: 59592},
								name: "SingleSortElementWithCast",
							},
							&ruleRefExpr{
								pos:  position{line: 1856, col: 59, offset: 59620},
								name: "SingleSortElementWithoutCast",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleSortElementWithoutCast",
			pos:  position{line: 1860, col: 1, offset: 59679},
			expr: &actionExpr{
				pos: position{line: 1860, col: 33, offset: 59711},
				run: (*parser).callonSingleSortElementWithoutCast1,
				expr: &seqExpr{
					pos: position{line: 1860, col: 33, offset: 59711},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1860, col: 33, offset: 59711},
							label: "sortBySymbol",
							expr: &choiceExpr{
								pos: position{line: 1860, col: 47, offset: 59725},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 1860, col: 47, offset: 59725},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&litMatcher{
										pos:        position{line: 1860, col: 53, offset: 59731},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
									&litMatcher{
										pos:        position{line: 1860, col: 59, offset: 59737},
										val:        "",
										ignoreCase: false,
										want:       "\"\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1860, col: 63, offset: 59741},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1860, col: 69, offset: 59747},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleSortElementWithCast",
			pos:  position{line: 1875, col: 1, offset: 60022},
			expr: &actionExpr{
				pos: position{line: 1875, col: 30, offset: 60051},
				run: (*parser).callonSingleSortElementWithCast1,
				expr: &seqExpr{
					pos: position{line: 1875, col: 30, offset: 60051},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1875, col: 30, offset: 60051},
							label: "sortBySymbol",
							expr: &choiceExpr{
								pos: position{line: 1875, col: 44, offset: 60065},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 1875, col: 44, offset: 60065},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&litMatcher{
										pos:        position{line: 1875, col: 50, offset: 60071},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
									&litMatcher{
										pos:        position{line: 1875, col: 56, offset: 60077},
										val:        "",
										ignoreCase: false,
										want:       "\"\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1875, col: 60, offset: 60081},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 1875, col: 64, offset: 60085},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 1875, col: 64, offset: 60085},
										val:        "auto",
										ignoreCase: false,
										want:       "\"auto\"",
									},
									&litMatcher{
										pos:        position{line: 1875, col: 73, offset: 60094},
										val:        "str",
										ignoreCase: false,
										want:       "\"str\"",
									},
									&litMatcher{
										pos:        position{line: 1875, col: 81, offset: 60102},
										val:        "ip",
										ignoreCase: false,
										want:       "\"ip\"",
									},
									&litMatcher{
										pos:        position{line: 1875, col: 88, offset: 60109},
										val:        "num",
										ignoreCase: false,
										want:       "\"num\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1875, col: 95, offset: 60116},
							name: "L_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 1875, col: 103, offset: 60124},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1875, col: 109, offset: 60130},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1875, col: 119, offset: 60140},
							name: "R_PAREN",
						},
					},
				},
			},
		},
		{
			name: "RenameBlock",
			pos:  position{line: 1895, col: 1, offset: 60565},
			expr: &actionExpr{
				pos: position{line: 1895, col: 16, offset: 60580},
				run: (*parser).callonRenameBlock1,
				expr: &seqExpr{
					pos: position{line: 1895, col: 16, offset: 60580},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1895, col: 16, offset: 60580},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1895, col: 21, offset: 60585},
							name: "CMD_RENAME",
						},
						&labeledExpr{
							pos:   position{line: 1895, col: 32, offset: 60596},
							label: "renameExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 1895, col: 43, offset: 60607},
								name: "RenameExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameExpr",
			pos:  position{line: 1911, col: 1, offset: 60982},
			expr: &choiceExpr{
				pos: position{line: 1911, col: 15, offset: 60996},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1911, col: 15, offset: 60996},
						run: (*parser).callonRenameExpr2,
						expr: &seqExpr{
							pos: position{line: 1911, col: 15, offset: 60996},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1911, col: 15, offset: 60996},
									label: "originalPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1911, col: 31, offset: 61012},
										name: "RenamePattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1911, col: 45, offset: 61026},
									name: "AS",
								},
								&labeledExpr{
									pos:   position{line: 1911, col: 48, offset: 61029},
									label: "newPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1911, col: 59, offset: 61040},
										name: "QuotedString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1922, col: 3, offset: 61359},
						run: (*parser).callonRenameExpr9,
						expr: &seqExpr{
							pos: position{line: 1922, col: 3, offset: 61359},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1922, col: 3, offset: 61359},
									label: "originalPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1922, col: 19, offset: 61375},
										name: "RenamePattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1922, col: 33, offset: 61389},
									name: "AS",
								},
								&labeledExpr{
									pos:   position{line: 1922, col: 36, offset: 61392},
									label: "newPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1922, col: 47, offset: 61403},
										name: "RenamePattern",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RexBlock",
			pos:  position{line: 1944, col: 1, offset: 61969},
			expr: &actionExpr{
				pos: position{line: 1944, col: 13, offset: 61981},
				run: (*parser).callonRexBlock1,
				expr: &seqExpr{
					pos: position{line: 1944, col: 13, offset: 61981},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1944, col: 13, offset: 61981},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1944, col: 18, offset: 61986},
							name: "CMD_REX",
						},
						&litMatcher{
							pos:        position{line: 1944, col: 26, offset: 61994},
							val:        "field",
							ignoreCase: false,
							want:       "\"field\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1944, col: 34, offset: 62002},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1944, col: 40, offset: 62008},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1944, col: 46, offset: 62014},
								name: "EvalFieldToRead",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1944, col: 62, offset: 62030},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 1944, col: 68, offset: 62036},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 1944, col: 72, offset: 62040},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "SortBlock",
			pos:  position{line: 1972, col: 1, offset: 62743},
			expr: &actionExpr{
				pos: position{line: 1972, col: 14, offset: 62756},
				run: (*parser).callonSortBlock1,
				expr: &seqExpr{
					pos: position{line: 1972, col: 14, offset: 62756},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1972, col: 14, offset: 62756},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1972, col: 19, offset: 62761},
							name: "CMD_SORT",
						},
						&labeledExpr{
							pos:   position{line: 1972, col: 28, offset: 62770},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 1972, col: 34, offset: 62776},
								expr: &ruleRefExpr{
									pos:  position{line: 1972, col: 35, offset: 62777},
									name: "SortLimit",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1972, col: 47, offset: 62789},
							label: "sortByEles",
							expr: &ruleRefExpr{
								pos:  position{line: 1972, col: 58, offset: 62800},
								name: "SortElements",
							},
						},
					},
				},
			},
		},
		{
			name: "SortLimit",
			pos:  position{line: 2009, col: 1, offset: 63651},
			expr: &actionExpr{
				pos: position{line: 2009, col: 14, offset: 63664},
				run: (*parser).callonSortLimit1,
				expr: &seqExpr{
					pos: position{line: 2009, col: 14, offset: 63664},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 2009, col: 14, offset: 63664},
							expr: &seqExpr{
								pos: position{line: 2009, col: 15, offset: 63665},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 2009, col: 15, offset: 63665},
										val:        "limit",
										ignoreCase: false,
										want:       "\"limit\"",
									},
									&ruleRefExpr{
										pos:  position{line: 2009, col: 23, offset: 63673},
										name: "EQUAL",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2009, col: 31, offset: 63681},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 2009, col: 40, offset: 63690},
								name: "IntegerAsString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2009, col: 56, offset: 63706},
							name: "SPACE",
						},
					},
				},
			},
		},
		{
			name: "EvalBlock",
			pos:  position{line: 2023, col: 1, offset: 64005},
			expr: &actionExpr{
				pos: position{line: 2023, col: 14, offset: 64018},
				run: (*parser).callonEvalBlock1,
				expr: &seqExpr{
					pos: position{line: 2023, col: 14, offset: 64018},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2023, col: 14, offset: 64018},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 2023, col: 19, offset: 64023},
							name: "CMD_EVAL",
						},
						&labeledExpr{
							pos:   position{line: 2023, col: 28, offset: 64032},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2023, col: 34, offset: 64038},
								name: "SingleEval",
							},
						},
						&labeledExpr{
							pos:   position{line: 2023, col: 45, offset: 64049},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2023, col: 50, offset: 64054},
								expr: &seqExpr{
									pos: position{line: 2023, col: 51, offset: 64055},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 2023, col: 51, offset: 64055},
											name: "COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 2023, col: 57, offset: 64061},
											name: "SingleEval",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleEval",
			pos:  position{line: 2050, col: 1, offset: 64862},
			expr: &actionExpr{
				pos: position{line: 2050, col: 15, offset: 64876},
				run: (*parser).callonSingleEval1,
				expr: &seqExpr{
					pos: position{line: 2050, col: 15, offset: 64876},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2050, col: 15, offset: 64876},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 2050, col: 21, offset: 64882},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2050, col: 31, offset: 64892},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 2050, col: 37, offset: 64898},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 2050, col: 42, offset: 64903},
								name: "EvalExpression",
							},
						},
					},
				},
			},
		},
		{
			name: "EvalExpression",
			pos:  position{line: 2063, col: 1, offset: 65304},
			expr: &actionExpr{
				pos: position{line: 2063, col: 19, offset: 65322},
				run: (*parser).callonEvalExpression1,
				expr: &labeledExpr{
					pos:   position{line: 2063, col: 19, offset: 65322},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 2063, col: 25, offset: 65328},
						name: "ValueExpr",
					},
				},
			},
		},
		{
			name: "ConditionExpr",
			pos:  position{line: 2072, col: 1, offset: 65552},
			expr: &choiceExpr{
				pos: position{line: 2072, col: 18, offset: 65569},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2072, col: 18, offset: 65569},
						run: (*parser).callonConditionExpr2,
						expr: &seqExpr{
							pos: position{line: 2072, col: 18, offset: 65569},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2072, col: 18, offset: 65569},
									val:        "if",
									ignoreCase: false,
									want:       "\"if\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2072, col: 23, offset: 65574},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2072, col: 31, offset: 65582},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 2072, col: 41, offset: 65592},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2072, col: 50, offset: 65601},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2072, col: 56, offset: 65607},
									label: "trueValue",
									expr: &ruleRefExpr{
										pos:  position{line: 2072, col: 66, offset: 65617},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2072, col: 76, offset: 65627},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2072, col: 82, offset: 65633},
									label: "falseValue",
									expr: &ruleRefExpr{
										pos:  position{line: 2072, col: 93, offset: 65644},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2072, col: 103, offset: 65654},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2083, col: 3, offset: 65905},
						run: (*parser).callonConditionExpr15,
						expr: &seqExpr{
							pos: position{line: 2083, col: 3, offset: 65905},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2083, col: 3, offset: 65905},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2083, col: 11, offset: 65913},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2083, col: 11, offset: 65913},
												val:        "case",
												ignoreCase: false,
												want:       "\"case\"",
											},
											&litMatcher{
												pos:        position{line: 2083, col: 20, offset: 65922},
												val:        "validate",
												ignoreCase: false,
												want:       "\"validate\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2083, col: 32, offset: 65934},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2083, col: 40, offset: 65942},
									label: "pair",
									expr: &ruleRefExpr{
										pos:  position{line: 2083, col: 45, offset: 65947},
										name: "ConditionValuePair",
									},
								},
								&labeledExpr{
									pos:   position{line: 2083, col: 64, offset: 65966},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2083, col: 69, offset: 65971},
										expr: &seqExpr{
											pos: position{line: 2083, col: 70, offset: 65972},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2083, col: 70, offset: 65972},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2083, col: 76, offset: 65978},
													name: "ConditionValuePair",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2083, col: 97, offset: 65999},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2106, col: 3, offset: 66603},
						run: (*parser).callonConditionExpr30,
						expr: &seqExpr{
							pos: position{line: 2106, col: 3, offset: 66603},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2106, col: 3, offset: 66603},
									val:        "coalesce",
									ignoreCase: false,
									want:       "\"coalesce\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2106, col: 14, offset: 66614},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2106, col: 22, offset: 66622},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2106, col: 32, offset: 66632},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2106, col: 42, offset: 66642},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2106, col: 47, offset: 66647},
										expr: &seqExpr{
											pos: position{line: 2106, col: 48, offset: 66648},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2106, col: 48, offset: 66648},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2106, col: 54, offset: 66654},
													name: "ValueExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2106, col: 66, offset: 66666},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2123, col: 3, offset: 67085},
						run: (*parser).callonConditionExpr42,
						expr: &seqExpr{
							pos: position{line: 2123, col: 3, offset: 67085},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2123, col: 3, offset: 67085},
									val:        "nullif",
									ignoreCase: false,
									want:       "\"nullif\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2123, col: 12, offset: 67094},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2123, col: 20, offset: 67102},
									label: "leftValue",
									expr: &ruleRefExpr{
										pos:  position{line: 2123, col: 30, offset: 67112},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2123, col: 40, offset: 67122},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2123, col: 46, offset: 67128},
									label: "rightValue",
									expr: &ruleRefExpr{
										pos:  position{line: 2123, col: 57, offset: 67139},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2123, col: 67, offset: 67149},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2135, col: 3, offset: 67429},
						run: (*parser).callonConditionExpr52,
						expr: &seqExpr{
							pos: position{line: 2135, col: 3, offset: 67429},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2135, col: 3, offset: 67429},
									val:        "null",
									ignoreCase: false,
									want:       "\"null\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2135, col: 10, offset: 67436},
									name: "L_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2135, col: 18, offset: 67444},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConditionValuePair",
			pos:  position{line: 2142, col: 1, offset: 67541},
			expr: &actionExpr{
				pos: position{line: 2142, col: 23, offset: 67563},
				run: (*parser).callonConditionValuePair1,
				expr: &seqExpr{
					pos: position{line: 2142, col: 23, offset: 67563},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2142, col: 23, offset: 67563},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 2142, col: 33, offset: 67573},
								name: "BoolExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2142, col: 42, offset: 67582},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 2142, col: 48, offset: 67588},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 2142, col: 54, offset: 67594},
								name: "ValueExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "TextExpr",
			pos:  position{line: 2152, col: 1, offset: 68035},
			expr: &choiceExpr{
				pos: position{line: 2152, col: 13, offset: 68047},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2152, col: 13, offset: 68047},
						run: (*parser).callonTextExpr2,
						expr: &seqExpr{
							pos: position{line: 2152, col: 14, offset: 68048},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2152, col: 14, offset: 68048},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2152, col: 22, offset: 68056},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2152, col: 22, offset: 68056},
												val:        "lower",
												ignoreCase: false,
												want:       "\"lower\"",
											},
											&litMatcher{
												pos:        position{line: 2152, col: 32, offset: 68066},
												val:        "upper",
												ignoreCase: false,
												want:       "\"upper\"",
											},
											&litMatcher{
												pos:        position{line: 2152, col: 42, offset: 68076},
												val:        "urldecode",
												ignoreCase: false,
												want:       "\"urldecode\"",
											},
											&litMatcher{
												pos:        position{line: 2152, col: 56, offset: 68090},
												val:        "mvcount",
												ignoreCase: false,
												want:       "\"mvcount\"",
											},
											&litMatcher{
												pos:        position{line: 2152, col: 68, offset: 68102},
												val:        "mvdedup",
												ignoreCase: false,
												want:       "\"mvdedup\"",
											},
											&litMatcher{
												pos:        position{line: 2152, col: 80, offset: 68114},
												val:        "mvsort",
												ignoreCase: false,
												want:       "\"mvsort\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2152, col: 90, offset: 68124},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2152, col: 98, offset: 68132},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2152, col: 109, offset: 68143},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2152, col: 120, offset: 68154},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2164, col: 3, offset: 68468},
						run: (*parser).callonTextExpr16,
						expr: &seqExpr{
							pos: position{line: 2164, col: 4, offset: 68469},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2164, col: 4, offset: 68469},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2164, col: 12, offset: 68477},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2164, col: 12, offset: 68477},
												val:        "max",
												ignoreCase: false,
												want:       "\"max\"",
											},
											&litMatcher{
												pos:        position{line: 2164, col: 20, offset: 68485},
												val:        "min",
												ignoreCase: false,
												want:       "\"min\"",
											},
											&litMatcher{
												pos:        position{line: 2164, col: 28, offset: 68493},
												val:        "mvappend",
												ignoreCase: false,
												want:       "\"mvappend\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2164, col: 40, offset: 68505},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2164, col: 48, offset: 68513},
									label: "firstVal",
									expr: &ruleRefExpr{
										pos:  position{line: 2164, col: 57, offset: 68522},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2164, col: 68, offset: 68533},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2164, col: 73, offset: 68538},
										expr: &seqExpr{
											pos: position{line: 2164, col: 74, offset: 68539},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2164, col: 74, offset: 68539},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2164, col: 80, offset: 68545},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2164, col: 93, offset: 68558},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2186, col: 3, offset: 69158},
						run: (*parser).callonTextExpr32,
						expr: &seqExpr{
							pos: position{line: 2186, col: 4, offset: 69159},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2186, col: 4, offset: 69159},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2186, col: 12, offset: 69167},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2186, col: 12, offset: 69167},
												val:        "split",
												ignoreCase: false,
												want:       "\"split\"",
											},
											&litMatcher{
												pos:        position{line: 2186, col: 22, offset: 69177},
												val:        "mvjoin",
												ignoreCase: false,
												want:       "\"mvjoin\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2186, col: 32, offset: 69187},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2186, col: 40, offset: 69195},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2186, col: 51, offset: 69206},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2186, col: 62, offset: 69217},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2186, col: 68, offset: 69223},
									label: "delim",
									expr: &ruleRefExpr{
										pos:  position{line: 2186, col: 74, offset: 69229},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2186, col: 85, offset: 69240},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2199, col: 3, offset: 69574},
						run: (*parser).callonTextExpr45,
						expr: &seqExpr{
							pos: position{line: 2199, col: 4, offset: 69575},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2199, col: 4, offset: 69575},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2199, col: 12, offset: 69583},
										val:        "mvfind",
										ignoreCase: false,
										want:       "\"mvfind\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2199, col: 22, offset: 69593},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2199, col: 30, offset: 69601},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2199, col: 41, offset: 69612},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2199, col: 52, offset: 69623},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2199, col: 58, offset: 69629},
									label: "regexPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 2199, col: 71, offset: 69642},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2199, col: 82, offset: 69653},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2223, col: 3, offset: 70305},
						run: (*parser).callonTextExpr56,
						expr: &seqExpr{
							pos: position{line: 2223, col: 4, offset: 70306},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2223, col: 4, offset: 70306},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2223, col: 12, offset: 70314},
										val:        "substr",
										ignoreCase: false,
										want:       "\"substr\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2223, col: 22, offset: 70324},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2223, col: 30, offset: 70332},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2223, col: 41, offset: 70343},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2223, col: 52, offset: 70354},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2223, col: 58, offset: 70360},
									label: "startIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 2223, col: 69, offset: 70371},
										name: "NumericExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2223, col: 81, offset: 70383},
									label: "lengthParam",
									expr: &zeroOrOneExpr{
										pos: position{line: 2223, col: 93, offset: 70395},
										expr: &seqExpr{
											pos: position{line: 2223, col: 94, offset: 70396},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2223, col: 94, offset: 70396},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2223, col: 100, offset: 70402},
													name: "NumericExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2223, col: 114, offset: 70416},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2248, col: 3, offset: 71246},
						run: (*parser).callonTextExpr72,
						expr: &seqExpr{
							pos: position{line: 2248, col: 3, offset: 71246},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2248, col: 3, offset: 71246},
									val:        "tostring",
									ignoreCase: false,
									want:       "\"tostring\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2248, col: 14, offset: 71257},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2248, col: 22, offset: 71265},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 2248, col: 28, offset: 71271},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2248, col: 38, offset: 71281},
									label: "format",
									expr: &zeroOrOneExpr{
										pos: position{line: 2248, col: 45, offset: 71288},
										expr: &seqExpr{
											pos: position{line: 2248, col: 46, offset: 71289},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2248, col: 46, offset: 71289},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2248, col: 52, offset: 71295},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2248, col: 65, offset: 71308},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2261, col: 3, offset: 71676},
						run: (*parser).callonTextExpr84,
						expr: &seqExpr{
							pos: position{line: 2261, col: 4, offset: 71677},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2261, col: 4, offset: 71677},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2261, col: 12, offset: 71685},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2261, col: 12, offset: 71685},
												val:        "ltrim",
												ignoreCase: false,
												want:       "\"ltrim\"",
											},
											&litMatcher{
												pos:        position{line: 2261, col: 22, offset: 71695},
												val:        "rtrim",
												ignoreCase: false,
												want:       "\"rtrim\"",
											},
											&litMatcher{
												pos:        position{line: 2261, col: 32, offset: 71705},
												val:        "trim",
												ignoreCase: false,
												want:       "\"trim\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2261, col: 40, offset: 71713},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2261, col: 48, offset: 71721},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2261, col: 54, offset: 71727},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2261, col: 66, offset: 71739},
									label: "strToRemoveExpr",
									expr: &zeroOrOneExpr{
										pos: position{line: 2261, col: 82, offset: 71755},
										expr: &ruleRefExpr{
											pos:  position{line: 2261, col: 83, offset: 71756},
											name: "StrToRemoveExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2261, col: 101, offset: 71774},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2280, col: 3, offset: 72214},
						run: (*parser).callonTextExpr98,
						expr: &seqExpr{
							pos: position{line: 2280, col: 3, offset: 72214},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2280, col: 3, offset: 72214},
									val:        "spath",
									ignoreCase: false,
									want:       "\"spath\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2280, col: 11, offset: 72222},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2280, col: 19, offset: 72230},
									label: "inputField",
									expr: &ruleRefExpr{
										pos:  position{line: 2280, col: 30, offset: 72241},
										name: "FieldNameStartWith_",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2280, col: 50, offset: 72261},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2280, col: 56, offset: 72267},
									label: "path",
									expr: &choiceExpr{
										pos: position{line: 2280, col: 62, offset: 72273},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2280, col: 62, offset: 72273},
												name: "QuotedPathString",
											},
											&ruleRefExpr{
												pos:  position{line: 2280, col: 81, offset: 72292},
												name: "UnquotedPathValue",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2280, col: 100, offset: 72311},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2291, col: 3, offset: 72616},
						run: (*parser).callonTextExpr110,
						expr: &seqExpr{
							pos: position{line: 2291, col: 3, offset: 72616},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2291, col: 3, offset: 72616},
									val:        "ipmask",
									ignoreCase: false,
									want:       "\"ipmask\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2291, col: 12, offset: 72625},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2291, col: 20, offset: 72633},
									label: "mask",
									expr: &ruleRefExpr{
										pos:  position{line: 2291, col: 25, offset: 72638},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2291, col: 36, offset: 72649},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2291, col: 42, offset: 72655},
									label: "ip",
									expr: &ruleRefExpr{
										pos:  position{line: 2291, col: 45, offset: 72658},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2291, col: 55, offset: 72668},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2298, col: 3, offset: 72826},
						run: (*parser).callonTextExpr120,
						expr: &seqExpr{
							pos: position{line: 2298, col: 3, offset: 72826},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2298, col: 3, offset: 72826},
									val:        "object_to_array",
									ignoreCase: false,
									want:       "\"object_to_array\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2298, col: 21, offset: 72844},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2298, col: 29, offset: 72852},
									label: "obj",
									expr: &ruleRefExpr{
										pos:  position{line: 2298, col: 33, offset: 72856},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2298, col: 43, offset: 72866},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2298, col: 49, offset: 72872},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 2298, col: 53, offset: 72876},
										name: "QuotedString",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2298, col: 66, offset: 72889},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2298, col: 72, offset: 72895},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 2298, col: 78, offset: 72901},
										name: "QuotedString",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2298, col: 91, offset: 72914},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2309, col: 3, offset: 73222},
						run: (*parser).callonTextExpr133,
						expr: &seqExpr{
							pos: position{line: 2309, col: 3, offset: 73222},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2309, col: 3, offset: 73222},
									val:        "printf",
									ignoreCase: false,
									want:       "\"printf\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2309, col: 12, offset: 73231},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2309, col: 20, offset: 73239},
									label: "format",
									expr: &ruleRefExpr{
										pos:  position{line: 2309, col: 27, offset: 73246},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2309, col: 38, offset: 73257},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2309, col: 43, offset: 73262},
										expr: &seqExpr{
											pos: position{line: 2309, col: 44, offset: 73263},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2309, col: 44, offset: 73263},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2309, col: 50, offset: 73269},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2309, col: 63, offset: 73282},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2327, col: 3, offset: 73749},
						run: (*parser).callonTextExpr145,
						expr: &seqExpr{
							pos: position{line: 2327, col: 3, offset: 73749},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2327, col: 3, offset: 73749},
									val:        "tojson",
									ignoreCase: false,
									want:       "\"tojson\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2327, col: 12, offset: 73758},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2327, col: 20, offset: 73766},
									label: "containInternalFields",
									expr: &zeroOrOneExpr{
										pos: position{line: 2327, col: 42, offset: 73788},
										expr: &seqExpr{
											pos: position{line: 2327, col: 43, offset: 73789},
											exprs: []any{
												&choiceExpr{
													pos: position{line: 2327, col: 44, offset: 73790},
													alternatives: []any{
														&litMatcher{
															pos:        position{line: 2327, col: 44, offset: 73790},
															val:        "true",
															ignoreCase: false,
															want:       "\"true\"",
														},
														&litMatcher{
															pos:        position{line: 2327, col: 53, offset: 73799},
															val:        "false",
															ignoreCase: false,
															want:       "\"false\"",
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2327, col: 62, offset: 73808},
													val:        "()",
													ignoreCase: false,
													want:       "\"()\"",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2327, col: 69, offset: 73815},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2349, col: 3, offset: 74412},
						run: (*parser).callonTextExpr157,
						expr: &seqExpr{
							pos: position{line: 2349, col: 4, offset: 74413},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2349, col: 4, offset: 74413},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2349, col: 12, offset: 74421},
										val:        "mvfilter",
										ignoreCase: false,
										want:       "\"mvfilter\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2349, col: 24, offset: 74433},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2349, col: 32, offset: 74441},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 2349, col: 42, offset: 74451},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2349, col: 51, offset: 74460},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2362, col: 3, offset: 74795},
						run: (*parser).callonTextExpr165,
						expr: &seqExpr{
							pos: position{line: 2362, col: 4, offset: 74796},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2362, col: 4, offset: 74796},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2362, col: 12, offset: 74804},
										val:        "mvindex",
										ignoreCase: false,
										want:       "\"mvindex\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2362, col: 23, offset: 74815},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2362, col: 31, offset: 74823},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2362, col: 42, offset: 74834},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2362, col: 53, offset: 74845},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2362, col: 59, offset: 74851},
									label: "startIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 2362, col: 70, offset: 74862},
										name: "NumericExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2362, col: 82, offset: 74874},
									label: "endIndex",
									expr: &zeroOrOneExpr{
										pos: position{line: 2362, col: 91, offset: 74883},
										expr: &ruleRefExpr{
											pos:  position{line: 2362, col: 92, offset: 74884},
											name: "NumericParamExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2362, col: 111, offset: 74903},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2378, col: 3, offset: 75331},
						run: (*parser).callonTextExpr179,
						expr: &seqExpr{
							pos: position{line: 2378, col: 4, offset: 75332},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2378, col: 4, offset: 75332},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2378, col: 12, offset: 75340},
										val:        "mvmap",
										ignoreCase: false,
										want:       "\"mvmap\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2378, col: 21, offset: 75349},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2378, col: 29, offset: 75357},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2378, col: 40, offset: 75368},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2378, col: 51, offset: 75379},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2378, col: 57, offset: 75385},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2378, col: 62, offset: 75390},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2378, col: 72, offset: 75400},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2391, col: 3, offset: 75726},
						run: (*parser).callonTextExpr190,
						expr: &seqExpr{
							pos: position{line: 2391, col: 4, offset: 75727},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2391, col: 4, offset: 75727},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2391, col: 12, offset: 75735},
										val:        "mvrange",
										ignoreCase: false,
										want:       "\"mvrange\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2391, col: 23, offset: 75746},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2391, col: 31, offset: 75754},
									label: "startIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 2391, col: 42, offset: 75765},
										name: "NumericExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2391, col: 54, offset: 75777},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2391, col: 60, offset: 75783},
									label: "endIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 2391, col: 69, offset: 75792},
										name: "NumericExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2391, col: 81, offset: 75804},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2391, col: 87, offset: 75810},
									label: "stringExpr",
									expr: &zeroOrOneExpr{
										pos: position{line: 2391, col: 98, offset: 75821},
										expr: &ruleRefExpr{
											pos:  position{line: 2391, col: 99, offset: 75822},
											name: "StringExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2391, col: 112, offset: 75835},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2407, col: 3, offset: 76265},
						run: (*parser).callonTextExpr205,
						expr: &seqExpr{
							pos: position{line: 2407, col: 4, offset: 76266},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2407, col: 4, offset: 76266},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2407, col: 12, offset: 76274},
										val:        "mvzip",
										ignoreCase: false,
										want:       "\"mvzip\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2407, col: 21, offset: 76283},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2407, col: 29, offset: 76291},
									label: "mvLeft",
									expr: &ruleRefExpr{
										pos:  position{line: 2407, col: 36, offset: 76298},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2407, col: 47, offset: 76309},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2407, col: 53, offset: 76315},
									label: "mvRight",
									expr: &ruleRefExpr{
										pos:  position{line: 2407, col: 61, offset: 76323},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2407, col: 72, offset: 76334},
									label: "rest",
									expr: &zeroOrOneExpr{
										pos: position{line: 2407, col: 77, offset: 76339},
										expr: &seqExpr{
											pos: position{line: 2407, col: 78, offset: 76340},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2407, col: 78, offset: 76340},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2407, col: 84, offset: 76346},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2407, col: 97, offset: 76359},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2428, col: 3, offset: 76883},
						run: (*parser).callonTextExpr221,
						expr: &seqExpr{
							pos: position{line: 2428, col: 4, offset: 76884},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2428, col: 4, offset: 76884},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2428, col: 12, offset: 76892},
										val:        "mv_to_json_array",
										ignoreCase: false,
										want:       "\"mv_to_json_array\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2428, col: 32, offset: 76912},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2428, col: 40, offset: 76920},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2428, col: 51, offset: 76931},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2428, col: 62, offset: 76942},
									label: "rest",
									expr: &zeroOrOneExpr{
										pos: position{line: 2428, col: 67, offset: 76947},
										expr: &seqExpr{
											pos: position{line: 2428, col: 68, offset: 76948},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2428, col: 68, offset: 76948},
													name: "COMMA",
												},
												&choiceExpr{
													pos: position{line: 2428, col: 75, offset: 76955},
													alternatives: []any{
														&litMatcher{
															pos:        position{line: 2428, col: 75, offset: 76955},
															val:        "true",
															ignoreCase: false,
															want:       "\"true\"",
														},
														&litMatcher{
															pos:        position{line: 2428, col: 84, offset: 76964},
															val:        "false",
															ignoreCase: false,
															want:       "\"false\"",
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2428, col: 93, offset: 76973},
													val:        "()",
													ignoreCase: false,
													want:       "\"()\"",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2428, col: 100, offset: 76980},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2453, col: 3, offset: 77615},
						run: (*parser).callonTextExpr237,
						expr: &seqExpr{
							pos: position{line: 2453, col: 3, offset: 77615},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2453, col: 3, offset: 77615},
									val:        "cluster",
									ignoreCase: false,
									want:       "\"cluster\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2453, col: 13, offset: 77625},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2453, col: 21, offset: 77633},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2453, col: 27, offset: 77639},
										name: "EvalFieldToRead",
									},
								},
								&labeledExpr{
									pos:   position{line: 2453, col: 43, offset: 77655},
									label: "threshold",
									expr: &zeroOrOneExpr{
										pos: position{line: 2453, col: 53, offset: 77665},
										expr: &seqExpr{
											pos: position{line: 2453, col: 54, offset: 77666},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2453, col: 54, offset: 77666},
													name: "COMMA",
												},
												&litMatcher{
													pos:        position{line: 2453, col: 60, offset: 77672},
													val:        "threshold:",
													ignoreCase: false,
													want:       "\"threshold:\"",
												},
												&ruleRefExpr{
													pos:  position{line: 2453, col: 73, offset: 77685},
													name: "FloatAsString",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2453, col: 89, offset: 77701},
									label: "match",
									expr: &zeroOrOneExpr{
										pos: position{line: 2453, col: 95, offset: 77707},
										expr: &seqExpr{
											pos: position{line: 2453, col: 96, offset: 77708},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2453, col: 96, offset: 77708},
													name: "COMMA",
												},
												&litMatcher{
													pos:        position{line: 2453, col: 102, offset: 77714},
													val:        "match:",
													ignoreCase: false,
													want:       "\"match:\"",
												},
												&choiceExpr{
													pos: position{line: 2453, col: 112, offset: 77724},
													alternatives: []any{
														&litMatcher{
															pos:        position{line: 2453, col: 112, offset: 77724},
															val:        "termlist",
															ignoreCase: false,
															want:       "\"termlist\"",
														},
														&litMatcher{
															pos:        position{line: 2453, col: 125, offset: 77737},
															val:        "termset",
															ignoreCase: false,
															want:       "\"termset\"",
														},
														&litMatcher{
															pos:        position{line: 2453, col: 137, offset: 77749},
															val:        "ngramset",
															ignoreCase: false,
															want:       "\"ngramset\"",
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2453, col: 151, offset: 77763},
									label: "delims",
									expr: &zeroOrOneExpr{
										pos: position{line: 2453, col: 158, offset: 77770},
										expr: &seqExpr{
											pos: position{line: 2453, col: 159, offset: 77771},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2453, col: 159, offset: 77771},
													name: "COMMA",
												},
												&litMatcher{
													pos:        position{line: 2453, col: 165, offset: 77777},
													val:        "delims:",
													ignoreCase: false,
													want:       "\"delims:\"",
												},
												&ruleRefExpr{
													pos:  position{line: 2453, col: 175, offset: 77787},
													name: "QuotedString",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2453, col: 190, offset: 77802},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2493, col: 3, offset: 78797},
						run: (*parser).callonTextExpr265,
						expr: &seqExpr{
							pos: position{line: 2493, col: 3, offset: 78797},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2493, col: 3, offset: 78797},
									val:        "getfields",
									ignoreCase: false,
									want:       "\"getfields\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2493, col: 15, offset: 78809},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2493, col: 23, offset: 78817},
									label: "filter",
									expr: &zeroOrOneExpr{
										pos: position{line: 2493, col: 30, offset: 78824},
										expr: &ruleRefExpr{
											pos:  position{line: 2493, col: 31, offset: 78825},
											name: "StringExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2493, col: 44, offset: 78838},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2504, col: 3, offset: 79029},
						run: (*parser).callonTextExpr273,
						expr: &seqExpr{
							pos: position{line: 2504, col: 3, offset: 79029},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2504, col: 3, offset: 79029},
									val:        "typeof",
									ignoreCase: false,
									want:       "\"typeof\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2504, col: 12, offset: 79038},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2504, col: 20, offset: 79046},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2504, col: 30, offset: 79056},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2504, col: 40, offset: 79066},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2510, col: 3, offset: 79189},
						run: (*parser).callonTextExpr280,
						expr: &seqExpr{
							pos: position{line: 2510, col: 3, offset: 79189},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2510, col: 3, offset: 79189},
									val:        "replace",
									ignoreCase: false,
									want:       "\"replace\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2510, col: 13, offset: 79199},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2510, col: 21, offset: 79207},
									label: "val",
									expr: &ruleRefExpr{
										pos:  position{line: 2510, col: 25, offset: 79211},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2510, col: 35, offset: 79221},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2510, col: 41, offset: 79227},
									label: "regex",
									expr: &ruleRefExpr{
										pos:  position{line: 2510, col: 47, offset: 79233},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2510, col: 58, offset: 79244},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2510, col: 64, offset: 79250},
									label: "replacement",
									expr: &ruleRefExpr{
										pos:  position{line: 2510, col: 76, offset: 79262},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2510, col: 87, offset: 79273},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2517, col: 3, offset: 79497},
						run: (*parser).callonTextExpr293,
						expr: &seqExpr{
							pos: position{line: 2517, col: 3, offset: 79497},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2517, col: 3, offset: 79497},
									val:        "strftime",
									ignoreCase: false,
									want:       "\"strftime\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2517, col: 14, offset: 79508},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2517, col: 22, offset: 79516},
									label: "val",
									expr: &ruleRefExpr{
										pos:  position{line: 2517, col: 26, offset: 79520},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2517, col: 36, offset: 79530},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2517, col: 42, offset: 79536},
									label: "format",
									expr: &ruleRefExpr{
										pos:  position{line: 2517, col: 49, offset: 79543},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2517, col: 60, offset: 79554},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2525, col: 3, offset: 79718},
						run: (*parser).callonTextExpr303,
						expr: &seqExpr{
							pos: position{line: 2525, col: 3, offset: 79718},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2525, col: 3, offset: 79718},
									val:        "strptime",
									ignoreCase: false,
									want:       "\"strptime\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2525, col: 14, offset: 79729},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2525, col: 22, offset: 79737},
									label: "val",
									expr: &ruleRefExpr{
										pos:  position{line: 2525, col: 26, offset: 79741},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2525, col: 36, offset: 79751},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2525, col: 42, offset: 79757},
									label: "format",
									expr: &ruleRefExpr{
										pos:  position{line: 2525, col: 49, offset: 79764},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2525, col: 60, offset: 79775},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedPathString",
			pos:  position{line: 2533, col: 1, offset: 79937},
			expr: &actionExpr{
				pos: position{line: 2533, col: 21, offset: 79957},
				run: (*parser).callonQuotedPathString1,
				expr: &labeledExpr{
					pos:   position{line: 2533, col: 21, offset: 79957},
					label: "str",
					expr: &ruleRefExpr{
						pos:  position{line: 2533, col: 25, offset: 79961},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "UnquotedPathValue",
			pos:  position{line: 2540, col: 1, offset: 80088},
			expr: &actionExpr{
				pos: position{line: 2540, col: 22, offset: 80109},
				run: (*parser).callonUnquotedPathValue1,
				expr: &labeledExpr{
					pos:   position{line: 2540, col: 22, offset: 80109},
					label: "str",
					expr: &ruleRefExpr{
						pos:  position{line: 2540, col: 26, offset: 80113},
						name: "UnquotedString",
					},
				},
			},
		},
		{
			name: "StrToRemoveExpr",
			pos:  position{line: 2547, col: 1, offset: 80241},
			expr: &actionExpr{
				pos: position{line: 2547, col: 20, offset: 80260},
				run: (*parser).callonStrToRemoveExpr1,
				expr: &seqExpr{
					pos: position{line: 2547, col: 20, offset: 80260},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2547, col: 20, offset: 80260},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 2547, col: 26, offset: 80266},
							label: "strToRemove",
							expr: &ruleRefExpr{
								pos:  position{line: 2547, col: 38, offset: 80278},
								name: "String",
							},
						},
					},
				},
			},
		},
		{
			name: "EvalFieldToRead",
			pos:  position{line: 2553, col: 1, offset: 80463},
			expr: &choiceExpr{
				pos: position{line: 2553, col: 20, offset: 80482},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2553, col: 20, offset: 80482},
						run: (*parser).callonEvalFieldToRead2,
						expr: &seqExpr{
							pos: position{line: 2553, col: 20, offset: 80482},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 2553, col: 20, offset: 80482},
									expr: &charClassMatcher{
										pos:        position{line: 2553, col: 20, offset: 80482},
										val:        "[a-zA-Z_]",
										chars:      []rune{'_'},
										ranges:     []rune{'a', 'z', 'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&notExpr{
									pos: position{line: 2553, col: 31, offset: 80493},
									expr: &litMatcher{
										pos:        position{line: 2553, col: 33, offset: 80495},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2556, col: 3, offset: 80537},
						run: (*parser).callonEvalFieldToRead8,
						expr: &seqExpr{
							pos: position{line: 2556, col: 3, offset: 80537},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2556, col: 3, offset: 80537},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&labeledExpr{
									pos:   position{line: 2556, col: 7, offset: 80541},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2556, col: 13, offset: 80547},
										name: "FieldName",
									},
								},
								&litMatcher{
									pos:        position{line: 2556, col: 23, offset: 80557},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "WhereBlock",
			pos:  position{line: 2561, col: 1, offset: 80625},
			expr: &actionExpr{
				pos: position{line: 2561, col: 15, offset: 80639},
				run: (*parser).callonWhereBlock1,
				expr: &seqExpr{
					pos: position{line: 2561, col: 15, offset: 80639},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2561, col: 15, offset: 80639},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 2561, col: 20, offset: 80644},
							name: "CMD_WHERE",
						},
						&labeledExpr{
							pos:   position{line: 2561, col: 30, offset: 80654},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 2561, col: 40, offset: 80664},
								name: "BoolExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExpr",
			pos:  position{line: 2573, col: 1, offset: 80957},
			expr: &actionExpr{
				pos: position{line: 2573, col: 13, offset: 80969},
				run: (*parser).callonBoolExpr1,
				expr: &labeledExpr{
					pos:   position{line: 2573, col: 13, offset: 80969},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 2573, col: 18, offset: 80974},
						name: "BoolExprLevel4",
					},
				},
			},
		},
		{
			name: "BoolExprLevel4",
			pos:  position{line: 2578, col: 1, offset: 81044},
			expr: &actionExpr{
				pos: position{line: 2578, col: 19, offset: 81062},
				run: (*parser).callonBoolExprLevel41,
				expr: &seqExpr{
					pos: position{line: 2578, col: 19, offset: 81062},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2578, col: 19, offset: 81062},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2578, col: 25, offset: 81068},
								name: "BoolExprLevel3",
							},
						},
						&labeledExpr{
							pos:   position{line: 2578, col: 40, offset: 81083},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2578, col: 45, offset: 81088},
								expr: &seqExpr{
									pos: position{line: 2578, col: 46, offset: 81089},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 2578, col: 46, offset: 81089},
											name: "OR",
										},
										&ruleRefExpr{
											pos:  position{line: 2578, col: 49, offset: 81092},
											name: "BoolExprLevel3",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel3",
			pos:  position{line: 2598, col: 1, offset: 81530},
			expr: &actionExpr{
				pos: position{line: 2598, col: 19, offset: 81548},
				run: (*parser).callonBoolExprLevel31,
				expr: &seqExpr{
					pos: position{line: 2598, col: 19, offset: 81548},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2598, col: 19, offset: 81548},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2598, col: 25, offset: 81554},
								name: "BoolExprLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 2598, col: 40, offset: 81569},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2598, col: 45, offset: 81574},
								expr: &seqExpr{
									pos: position{line: 2598, col: 46, offset: 81575},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 2598, col: 46, offset: 81575},
											name: "AND",
										},
										&ruleRefExpr{
											pos:  position{line: 2598, col: 50, offset: 81579},
											name: "BoolExprLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel2",
			pos:  position{line: 2618, col: 1, offset: 82018},
			expr: &choiceExpr{
				pos: position{line: 2618, col: 19, offset: 82036},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2618, col: 19, offset: 82036},
						run: (*parser).callonBoolExprLevel22,
						expr: &seqExpr{
							pos: position{line: 2618, col: 19, offset: 82036},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2618, col: 19, offset: 82036},
									name: "NOT",
								},
								&ruleRefExpr{
									pos:  position{line: 2618, col: 23, offset: 82040},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2618, col: 31, offset: 82048},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 2618, col: 37, offset: 82054},
										name: "BoolExprLevel1",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2618, col: 52, offset: 82069},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2628, col: 3, offset: 82272},
						run: (*parser).callonBoolExprLevel29,
						expr: &labeledExpr{
							pos:   position{line: 2628, col: 3, offset: 82272},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2628, col: 9, offset: 82278},
								name: "BoolExprLevel1",
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel1",
			pos:  position{line: 2633, col: 1, offset: 82349},
			expr: &choiceExpr{
				pos: position{line: 2633, col: 19, offset: 82367},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2633, col: 19, offset: 82367},
						run: (*parser).callonBoolExprLevel12,
						expr: &seqExpr{
							pos: position{line: 2633, col: 19, offset: 82367},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2633, col: 19, offset: 82367},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2633, col: 27, offset: 82375},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 2633, col: 33, offset: 82381},
										name: "BoolExprLevel4",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2633, col: 48, offset: 82396},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2636, col: 3, offset: 82432},
						run: (*parser).callonBoolExprLevel18,
						expr: &labeledExpr{
							pos:   position{line: 2636, col: 3, offset: 82432},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 2636, col: 10, offset: 82439},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 2636, col: 10, offset: 82439},
										name: "EvalComparisonExpr",
									},
									&ruleRefExpr{
										pos:  position{line: 2636, col: 31, offset: 82460},
										name: "BoolComparisonExpr",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EvalComparisonExpr",
			pos:  position{line: 2641, col: 1, offset: 82580},
			expr: &choiceExpr{
				pos: position{line: 2641, col: 23, offset: 82602},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2641, col: 23, offset: 82602},
						run: (*parser).callonEvalComparisonExpr2,
						expr: &seqExpr{
							pos: position{line: 2641, col: 24, offset: 82603},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2641, col: 24, offset: 82603},
									label: "op",
									expr: &choiceExpr{
										pos: position{line: 2641, col: 28, offset: 82607},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2641, col: 28, offset: 82607},
												val:        "isbool",
												ignoreCase: false,
												want:       "\"isbool\"",
											},
											&litMatcher{
												pos:        position{line: 2641, col: 39, offset: 82618},
												val:        "isint",
												ignoreCase: false,
												want:       "\"isint\"",
											},
											&litMatcher{
												pos:        position{line: 2641, col: 49, offset: 82628},
												val:        "isstr",
												ignoreCase: false,
												want:       "\"isstr\"",
											},
											&litMatcher{
												pos:        position{line: 2641, col: 59, offset: 82638},
												val:        "isnull",
												ignoreCase: false,
												want:       "\"isnull\"",
											},
											&litMatcher{
												pos:        position{line: 2641, col: 70, offset: 82649},
												val:        "isnotnull",
												ignoreCase: false,
												want:       "\"isnotnull\"",
											},
											&litMatcher{
												pos:        position{line: 2641, col: 84, offset: 82663},
												val:        "isnum",
												ignoreCase: false,
												want:       "\"isnum\"",
											},
											&litMatcher{
												pos:        position{line: 2641, col: 94, offset: 82673},
												val:        "searchmatch",
												ignoreCase: false,
												want:       "\"searchmatch\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2641, col: 109, offset: 82688},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2641, col: 117, offset: 82696},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 2641, col: 123, offset: 82702},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2641, col: 133, offset: 82712},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2671, col: 3, offset: 83583},
						run: (*parser).callonEvalComparisonExpr17,
						expr: &seqExpr{
							pos: position{line: 2671, col: 3, offset: 83583},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2671, col: 3, offset: 83583},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2671, col: 11, offset: 83591},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2671, col: 11, offset: 83591},
												val:        "like",
												ignoreCase: false,
												want:       "\"like\"",
											},
											&litMatcher{
												pos:        position{line: 2671, col: 20, offset: 83600},
												val:        "Like",
												ignoreCase: false,
												want:       "\"Like\"",
											},
											&litMatcher{
												pos:        position{line: 2671, col: 29, offset: 83609},
												val:        "match",
												ignoreCase: false,
												want:       "\"match\"",
											},
											&litMatcher{
												pos:        position{line: 2671, col: 39, offset: 83619},
												val:        "cidrmatch",
												ignoreCase: false,
												want:       "\"cidrmatch\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2671, col: 52, offset: 83632},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2671, col: 60, offset: 83640},
									label: "leftValue",
									expr: &ruleRefExpr{
										pos:  position{line: 2671, col: 70, offset: 83650},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2671, col: 80, offset: 83660},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2671, col: 86, offset: 83666},
									label: "rightValue",
									expr: &ruleRefExpr{
										pos:  position{line: 2671, col: 97, offset: 83677},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2671, col: 107, offset: 83687},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2684, col: 3, offset: 84057},
						run: (*parser).callonEvalComparisonExpr32,
						expr: &seqExpr{
							pos: position{line: 2684, col: 3, offset: 84057},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2684, col: 3, offset: 84057},
									label: "left",
									expr: &ruleRefExpr{
										pos:  position{line: 2684, col: 8, offset: 84062},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2684, col: 18, offset: 84072},
									name: "SPACE",
								},
								&litMatcher{
									pos:        position{line: 2684, col: 24, offset: 84078},
									val:        "in",
									ignoreCase: false,
									want:       "\"in\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2684, col: 29, offset: 84083},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2684, col: 37, offset: 84091},
									label: "valueToJudge",
									expr: &ruleRefExpr{
										pos:  position{line: 2684, col: 50, offset: 84104},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2684, col: 60, offset: 84114},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2684, col: 65, offset: 84119},
										expr: &seqExpr{
											pos: position{line: 2684, col: 66, offset: 84120},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2684, col: 66, offset: 84120},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2684, col: 72, offset: 84126},
													name: "ValueExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2684, col: 84, offset: 84138},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2703, col: 3, offset: 84689},
						run: (*parser).callonEvalComparisonExpr47,
						expr: &seqExpr{
							pos: position{line: 2703, col: 3, offset: 84689},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2703, col: 3, offset: 84689},
									val:        "in",
									ignoreCase: false,
									want:       "\"in\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2703, col: 8, offset: 84694},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2703, col: 16, offset: 84702},
									label: "valueToJudge",
									expr: &ruleRefExpr{
										pos:  position{line: 2703, col: 29, offset: 84715},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2703, col: 39, offset: 84725},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2703, col: 44, offset: 84730},
										expr: &seqExpr{
											pos: position{line: 2703, col: 45, offset: 84731},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2703, col: 45, offset: 84731},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2703, col: 51, offset: 84737},
													name: "ValueExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2703, col: 63, offset: 84749},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoolComparisonExpr",
			pos:  position{line: 2721, col: 1, offset: 85170},
			expr: &actionExpr{
				pos: position{line: 2721, col: 23, offset: 85192},
				run: (*parser).callonBoolComparisonExpr1,
				expr: &seqExpr{
					pos: position{line: 2721, col: 23, offset: 85192},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2721, col: 23, offset: 85192},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 2721, col: 28, offset: 85197},
								name: "ValueExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 2721, col: 38, offset: 85207},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 2721, col: 41, offset: 85210},
								name: "EqualityOrInequality",
							},
						},
						&labeledExpr{
							pos:   position{line: 2721, col: 62, offset: 85231},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 2721, col: 68, offset: 85237},
								name: "ValueExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "ValueExpr",
			pos:  position{line: 2739, col: 1, offset: 85831},
			expr: &choiceExpr{
				pos: position{line: 2739, col: 14, offset: 85844},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2739, col: 14, offset: 85844},
						run: (*parser).callonValueExpr2,
						expr: &labeledExpr{
							pos:   position{line: 2739, col: 14, offset: 85844},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 2739, col: 24, offset: 85854},
								name: "ConditionExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2748, col: 3, offset: 86044},
						run: (*parser).callonValueExpr5,
						expr: &seqExpr{
							pos: position{line: 2748, col: 3, offset: 86044},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2748, col: 3, offset: 86044},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2748, col: 12, offset: 86053},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 2748, col: 22, offset: 86063},
										name: "ConditionExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2748, col: 37, offset: 86078},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2757, col: 3, offset: 86262},
						run: (*parser).callonValueExpr11,
						expr: &labeledExpr{
							pos:   position{line: 2757, col: 3, offset: 86262},
							label: "numeric",
							expr: &ruleRefExpr{
								pos:  position{line: 2757, col: 11, offset: 86270},
								name: "NumericExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2766, col: 3, offset: 86450},
						run: (*parser).callonValueExpr14,
						expr: &labeledExpr{
							pos:   position{line: 2766, col: 3, offset: 86450},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 2766, col: 7, offset: 86454},
								name: "StringExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2775, col: 3, offset: 86626},
						run: (*parser).callonValueExpr17,
						expr: &seqExpr{
							pos: position{line: 2775, col: 3, offset: 86626},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2775, col: 3, offset: 86626},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2775, col: 12, offset: 86635},
									label: "str",
									expr: &ruleRefExpr{
										pos:  position{line: 2775, col: 16, offset: 86639},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2775, col: 28, offset: 86651},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2784, col: 3, offset: 86820},
						run: (*parser).callonValueExpr23,
						expr: &seqExpr{
							pos: position{line: 2784, col: 3, offset: 86820},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2784, col: 3, offset: 86820},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2784, col: 11, offset: 86828},
									label: "boolean",
									expr: &ruleRefExpr{
										pos:  position{line: 2784, col: 19, offset: 86836},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2784, col: 28, offset: 86845},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StringExpr",
			pos:  position{line: 2794, col: 1, offset: 87016},
			expr: &choiceExpr{
				pos: position{line: 2794, col: 15, offset: 87030},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2794, col: 15, offset: 87030},
						run: (*parser).callonStringExpr2,
						expr: &seqExpr{
							pos: position{line: 2794, col: 15, offset: 87030},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2794, col: 15, offset: 87030},
									label: "text",
									expr: &ruleRefExpr{
										pos:  position{line: 2794, col: 20, offset: 87035},
										name: "TextExpr",
									},
								},
								&notExpr{
									pos: position{line: 2794, col: 29, offset: 87044},
									expr: &ruleRefExpr{
										pos:  position{line: 2794, col: 31, offset: 87046},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2802, col: 3, offset: 87216},
						run: (*parser).callonStringExpr8,
						expr: &seqExpr{
							pos: position{line: 2802, col: 3, offset: 87216},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2802, col: 3, offset: 87216},
									label: "str",
									expr: &ruleRefExpr{
										pos:  position{line: 2802, col: 7, offset: 87220},
										name: "QuotedString",
									},
								},
								&notExpr{
									pos: position{line: 2802, col: 20, offset: 87233},
									expr: &ruleRefExpr{
										pos:  position{line: 2802, col: 22, offset: 87235},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2810, col: 3, offset: 87400},
						run: (*parser).callonStringExpr14,
						expr: &seqExpr{
							pos: position{line: 2810, col: 3, offset: 87400},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2810, col: 3, offset: 87400},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2810, col: 9, offset: 87406},
										name: "EvalFieldToRead",
									},
								},
								&notExpr{
									pos: position{line: 2810, col: 25, offset: 87422},
									expr: &choiceExpr{
										pos: position{line: 2810, col: 27, offset: 87424},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2810, col: 27, offset: 87424},
												name: "OpPlus",
											},
											&ruleRefExpr{
												pos:  position{line: 2810, col: 36, offset: 87433},
												name: "OpMinus",
											},
											&ruleRefExpr{
												pos:  position{line: 2810, col: 46, offset: 87443},
												name: "OpMul",
											},
											&ruleRefExpr{
												pos:  position{line: 2810, col: 54, offset: 87451},
												name: "OpDiv",
											},
											&ruleRefExpr{
												pos:  position{line: 2810, col: 62, offset: 87459},
												name: "EVAL_CONCAT",
											},
											&litMatcher{
												pos:        position{line: 2810, col: 76, offset: 87473},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2818, col: 3, offset: 87623},
						run: (*parser).callonStringExpr26,
						expr: &labeledExpr{
							pos:   position{line: 2818, col: 3, offset: 87623},
							label: "concat",
							expr: &ruleRefExpr{
								pos:  position{line: 2818, col: 10, offset: 87630},
								name: "ConcatExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "ConcatExpr",
			pos:  position{line: 2828, col: 1, offset: 87836},
			expr: &actionExpr{
				pos: position{line: 2828, col: 15, offset: 87850},
				run: (*parser).callonConcatExpr1,
				expr: &seqExpr{
					pos: position{line: 2828, col: 15, offset: 87850},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2828, col: 15, offset: 87850},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2828, col: 21, offset: 87856},
								name: "ConcatAtom",
							},
						},
						&labeledExpr{
							pos:   position{line: 2828, col: 32, offset: 87867},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2828, col: 37, offset: 87872},
								expr: &seqExpr{
									pos: position{line: 2828, col: 38, offset: 87873},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 2828, col: 38, offset: 87873},
											name: "EVAL_CONCAT",
										},
										&ruleRefExpr{
											pos:  position{line: 2828, col: 50, offset: 87885},
											name: "ConcatAtom",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2828, col: 63, offset: 87898},
							expr: &choiceExpr{
								pos: position{line: 2828, col: 65, offset: 87900},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 2828, col: 65, offset: 87900},
										name: "OpPlus",
									},
									&ruleRefExpr{
										pos:  position{line: 2828, col: 74, offset: 87909},
										name: "OpMinus",
									},
									&ruleRefExpr{
										pos:  position{line: 2828, col: 84, offset: 87919},
										name: "OpMul",
									},
									&ruleRefExpr{
										pos:  position{line: 2828, col: 92, offset: 87927},
										name: "OpDiv",
									},
									&litMatcher{
										pos:        position{line: 2828, col: 100, offset: 87935},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcatAtom",
			pos:  position{line: 2846, col: 1, offset: 88341},
			expr: &choiceExpr{
				pos: position{line: 2846, col: 15, offset: 88355},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2846, col: 15, offset: 88355},
						run: (*parser).callonConcatAtom2,
						expr: &labeledExpr{
							pos:   position{line: 2846, col: 15, offset: 88355},
							label: "text",
							expr: &ruleRefExpr{
								pos:  position{line: 2846, col: 20, offset: 88360},
								name: "TextExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2855, col: 3, offset: 88524},
						run: (*parser).callonConcatAtom5,
						expr: &labeledExpr{
							pos:   position{line: 2855, col: 3, offset: 88524},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 2855, col: 7, offset: 88528},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2863, col: 3, offset: 88667},
						run: (*parser).callonConcatAtom8,
						expr: &labeledExpr{
							pos:   position{line: 2863, col: 3, offset: 88667},
							label: "number",
							expr: &ruleRefExpr{
								pos:  position{line: 2863, col: 10, offset: 88674},
								name: "NumberAsString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2871, col: 3, offset: 88813},
						run: (*parser).callonConcatAtom11,
						expr: &labeledExpr{
							pos:   position{line: 2871, col: 3, offset: 88813},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 2871, col: 9, offset: 88819},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExpr",
			pos:  position{line: 2881, col: 1, offset: 88988},
			expr: &actionExpr{
				pos: position{line: 2881, col: 16, offset: 89003},
				run: (*parser).callonNumericExpr1,
				expr: &seqExpr{
					pos: position{line: 2881, col: 16, offset: 89003},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2881, col: 16, offset: 89003},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 2881, col: 21, offset: 89008},
								name: "NumericExprLevel3",
							},
						},
						&notExpr{
							pos: position{line: 2881, col: 39, offset: 89026},
							expr: &choiceExpr{
								pos: position{line: 2881, col: 41, offset: 89028},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 2881, col: 41, offset: 89028},
										name: "EVAL_CONCAT",
									},
									&litMatcher{
										pos:        position{line: 2881, col: 55, offset: 89042},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel3",
			pos:  position{line: 2886, col: 1, offset: 89107},
			expr: &actionExpr{
				pos: position{line: 2886, col: 22, offset: 89128},
				run: (*parser).callonNumericExprLevel31,
				expr: &seqExpr{
					pos: position{line: 2886, col: 22, offset: 89128},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2886, col: 22, offset: 89128},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2886, col: 28, offset: 89134},
								name: "NumericExprLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 2886, col: 46, offset: 89152},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2886, col: 51, offset: 89157},
								expr: &seqExpr{
									pos: position{line: 2886, col: 52, offset: 89158},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 2886, col: 53, offset: 89159},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 2886, col: 53, offset: 89159},
													name: "OpPlus",
												},
												&ruleRefExpr{
													pos:  position{line: 2886, col: 62, offset: 89168},
													name: "OpMinus",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2886, col: 71, offset: 89177},
											name: "NumericExprLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel2",
			pos:  position{line: 2907, col: 1, offset: 89678},
			expr: &actionExpr{
				pos: position{line: 2907, col: 22, offset: 89699},
				run: (*parser).callonNumericExprLevel21,
				expr: &seqExpr{
					pos: position{line: 2907, col: 22, offset: 89699},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2907, col: 22, offset: 89699},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2907, col: 28, offset: 89705},
								name: "NumericExprLevel1",
							},
						},
						&labeledExpr{
							pos:   position{line: 2907, col: 46, offset: 89723},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2907, col: 51, offset: 89728},
								expr: &seqExpr{
									pos: position{line: 2907, col: 52, offset: 89729},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 2907, col: 53, offset: 89730},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 2907, col: 53, offset: 89730},
													name: "OpMul",
												},
												&ruleRefExpr{
													pos:  position{line: 2907, col: 61, offset: 89738},
													name: "OpDiv",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2907, col: 68, offset: 89745},
											name: "NumericExprLevel1",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NumericParamExpr",
			pos:  position{line: 2927, col: 1, offset: 90214},
			expr: &actionExpr{
				pos: position{line: 2927, col: 21, offset: 90234},
				run: (*parser).callonNumericParamExpr1,
				expr: &seqExpr{
					pos: position{line: 2927, col: 21, offset: 90234},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2927, col: 21, offset: 90234},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 2927, col: 27, offset: 90240},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 2927, col: 32, offset: 90245},
								name: "NumericExprLevel3",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel1",
			pos:  position{line: 2937, col: 1, offset: 90489},
			expr: &choiceExpr{
				pos: position{line: 2937, col: 22, offset: 90510},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2937, col: 22, offset: 90510},
						run: (*parser).callonNumericExprLevel12,
						expr: &seqExpr{
							pos: position{line: 2937, col: 22, offset: 90510},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2937, col: 22, offset: 90510},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2937, col: 30, offset: 90518},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2937, col: 35, offset: 90523},
										name: "NumericExprLevel3",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2937, col: 53, offset: 90541},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2940, col: 3, offset: 90576},
						run: (*parser).callonNumericExprLevel18,
						expr: &labeledExpr{
							pos:   position{line: 2940, col: 3, offset: 90576},
							label: "numericEvalExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 2940, col: 20, offset: 90593},
								name: "NumericEvalExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2943, col: 3, offset: 90647},
						run: (*parser).callonNumericExprLevel111,
						expr: &labeledExpr{
							pos:   position{line: 2943, col: 3, offset: 90647},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 2943, col: 9, offset: 90653},
								name: "EvalFieldToRead",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2953, col: 3, offset: 90872},
						run: (*parser).callonNumericExprLevel114,
						expr: &labeledExpr{
							pos:   position{line: 2953, col: 3, offset: 90872},
							label: "number",
							expr: &ruleRefExpr{
								pos:  position{line: 2953, col: 10, offset: 90879},
								name: "NumberAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericEvalExpr",
			pos:  position{line: 2966, col: 1, offset: 91257},
			expr: &choiceExpr{
				pos: position{line: 2966, col: 20, offset: 91276},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2966, col: 20, offset: 91276},
						run: (*parser).callonNumericEvalExpr2,
						expr: &seqExpr{
							pos: position{line: 2966, col: 21, offset: 91277},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2966, col: 21, offset: 91277},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2966, col: 29, offset: 91285},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2966, col: 29, offset: 91285},
												val:        "abs",
												ignoreCase: false,
												want:       "\"abs\"",
											},
											&litMatcher{
												pos:        position{line: 2966, col: 37, offset: 91293},
												val:        "ceil",
												ignoreCase: false,
												want:       "\"ceil\"",
											},
											&litMatcher{
												pos:        position{line: 2966, col: 46, offset: 91302},
												val:        "ceiling",
												ignoreCase: false,
												want:       "\"ceiling\"",
											},
											&litMatcher{
												pos:        position{line: 2966, col: 58, offset: 91314},
												val:        "sqrt",
												ignoreCase: false,
												want:       "\"sqrt\"",
											},
											&litMatcher{
												pos:        position{line: 2966, col: 67, offset: 91323},
												val:        "exact",
												ignoreCase: false,
												want:       "\"exact\"",
											},
											&litMatcher{
												pos:        position{line: 2966, col: 77, offset: 91333},
												val:        "exp",
												ignoreCase: false,
												want:       "\"exp\"",
											},
											&litMatcher{
												pos:        position{line: 2966, col: 85, offset: 91341},
												val:        "floor",
												ignoreCase: false,
												want:       "\"floor\"",
											},
											&litMatcher{
												pos:        position{line: 2966, col: 95, offset: 91351},
												val:        "ln",
												ignoreCase: false,
												want:       "\"ln\"",
											},
											&litMatcher{
												pos:        position{line: 2966, col: 102, offset: 91358},
												val:        "sigfig",
												ignoreCase: false,
												want:       "\"sigfig\"",
											},
											&litMatcher{
												pos:        position{line: 2966, col: 113, offset: 91369},
												val:        "acosh",
												ignoreCase: false,
												want:       "\"acosh\"",
											},
											&litMatcher{
												pos:        position{line: 2966, col: 123, offset: 91379},
												val:        "acos",
												ignoreCase: false,
												want:       "\"acos\"",
											},
											&litMatcher{
												pos:        position{line: 2966, col: 132, offset: 91388},
												val:        "asinh",
												ignoreCase: false,
												want:       "\"asinh\"",
											},
											&litMatcher{
												pos:        position{line: 2966, col: 142, offset: 91398},
												val:        "asin",
												ignoreCase: false,
												want:       "\"asin\"",
											},
											&litMatcher{
												pos:        position{line: 2966, col: 151, offset: 91407},
												val:        "atanh",
												ignoreCase: false,
												want:       "\"atanh\"",
											},
											&litMatcher{
												pos:        position{line: 2966, col: 161, offset: 91417},
												val:        "atan",
												ignoreCase: false,
												want:       "\"atan\"",
											},
											&litMatcher{
												pos:        position{line: 2966, col: 170, offset: 91426},
												val:        "cosh",
												ignoreCase: false,
												want:       "\"cosh\"",
											},
											&litMatcher{
												pos:        position{line: 2966, col: 179, offset: 91435},
												val:        "cos",
												ignoreCase: false,
												want:       "\"cos\"",
											},
											&litMatcher{
												pos:        position{line: 2966, col: 187, offset: 91443},
												val:        "sinh",
												ignoreCase: false,
												want:       "\"sinh\"",
											},
											&litMatcher{
												pos:        position{line: 2966, col: 196, offset: 91452},
												val:        "sin",
												ignoreCase: false,
												want:       "\"sin\"",
											},
											&litMatcher{
												pos:        position{line: 2966, col: 204, offset: 91460},
												val:        "tanh",
												ignoreCase: false,
												want:       "\"tanh\"",
											},
											&litMatcher{
												pos:        position{line: 2966, col: 213, offset: 91469},
												val:        "tan",
												ignoreCase: false,
												want:       "\"tan\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2966, col: 220, offset: 91476},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2966, col: 228, offset: 91484},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2966, col: 234, offset: 91490},
										name: "NumericExprLevel3",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2966, col: 253, offset: 91509},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2986, col: 3, offset: 92021},
						run: (*parser).callonNumericEvalExpr31,
						expr: &seqExpr{
							pos: position{line: 2986, col: 3, offset: 92021},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2986, col: 3, offset: 92021},
									label: "roundExpr",
									expr: &litMatcher{
										pos:        position{line: 2986, col: 13, offset: 92031},
										val:        "round",
										ignoreCase: false,
										want:       "\"round\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2986, col: 21, offset: 92039},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2986, col: 29, offset: 92047},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2986, col: 35, offset: 92053},
										name: "NumericExprLevel3",
									},
								},
								&labeledExpr{
									pos:   position{line: 2986, col: 54, offset: 92072},
									label: "roundPrecision",
									expr: &zeroOrOneExpr{
										pos: position{line: 2986, col: 69, offset: 92087},
										expr: &ruleRefExpr{
											pos:  position{line: 2986, col: 70, offset: 92088},
											name: "NumericParamExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2986, col: 89, offset: 92107},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3007, col: 3, offset: 92725},
						run: (*parser).callonNumericEvalExpr42,
						expr: &seqExpr{
							pos: position{line: 3007, col: 4, offset: 92726},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 3007, col: 4, offset: 92726},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 3007, col: 12, offset: 92734},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 3007, col: 12, offset: 92734},
												val:        "now",
												ignoreCase: false,
												want:       "\"now\"",
											},
											&litMatcher{
												pos:        position{line: 3007, col: 20, offset: 92742},
												val:        "pi",
												ignoreCase: false,
												want:       "\"pi\"",
											},
											&litMatcher{
												pos:        position{line: 3007, col: 27, offset: 92749},
												val:        "random",
												ignoreCase: false,
												want:       "\"random\"",
											},
											&litMatcher{
												pos:        position{line: 3007, col: 38, offset: 92760},
												val:        "time",
												ignoreCase: false,
												want:       "\"time\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3007, col: 46, offset: 92768},
									name: "L_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3007, col: 54, offset: 92776},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3020, col: 3, offset: 93062},
						run: (*parser).callonNumericEvalExpr52,
						expr: &seqExpr{
							pos: position{line: 3020, col: 3, offset: 93062},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3020, col: 3, offset: 93062},
									val:        "tonumber",
									ignoreCase: false,
									want:       "\"tonumber\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3020, col: 14, offset: 93073},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3020, col: 22, offset: 93081},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3020, col: 33, offset: 93092},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 3020, col: 44, offset: 93103},
									label: "baseExpr",
									expr: &zeroOrOneExpr{
										pos: position{line: 3020, col: 53, offset: 93112},
										expr: &seqExpr{
											pos: position{line: 3020, col: 54, offset: 93113},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 3020, col: 54, offset: 93113},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 3020, col: 60, offset: 93119},
													name: "NumericExprLevel3",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3020, col: 80, offset: 93139},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3048, col: 3, offset: 93981},
						run: (*parser).callonNumericEvalExpr64,
						expr: &seqExpr{
							pos: position{line: 3048, col: 3, offset: 93981},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 3048, col: 3, offset: 93981},
									label: "lenExpr",
									expr: &litMatcher{
										pos:        position{line: 3048, col: 12, offset: 93990},
										val:        "len",
										ignoreCase: false,
										want:       "\"len\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3048, col: 18, offset: 93996},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3048, col: 26, offset: 94004},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 3048, col: 31, offset: 94009},
										name: "LenExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3048, col: 39, offset: 94017},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3051, col: 3, offset: 94052},
						run: (*parser).callonNumericEvalExpr72,
						expr: &seqExpr{
							pos: position{line: 3051, col: 4, offset: 94053},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 3051, col: 4, offset: 94053},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 3051, col: 12, offset: 94061},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 3051, col: 12, offset: 94061},
												val:        "pow",
												ignoreCase: false,
												want:       "\"pow\"",
											},
											&litMatcher{
												pos:        position{line: 3051, col: 20, offset: 94069},
												val:        "atan2",
												ignoreCase: false,
												want:       "\"atan2\"",
											},
											&litMatcher{
												pos:        position{line: 3051, col: 30, offset: 94079},
												val:        "hypot",
												ignoreCase: false,
												want:       "\"hypot\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3051, col: 39, offset: 94088},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3051, col: 47, offset: 94096},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 3051, col: 53, offset: 94102},
										name: "NumericExprLevel3",
									},
								},
								&labeledExpr{
									pos:   position{line: 3051, col: 72, offset: 94121},
									label: "param",
									expr: &ruleRefExpr{
										pos:  position{line: 3051, col: 79, offset: 94128},
										name: "NumericParamExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3051, col: 97, offset: 94146},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3081, col: 3, offset: 94985},
						run: (*parser).callonNumericEvalExpr85,
						expr: &seqExpr{
							pos: position{line: 3081, col: 4, offset: 94986},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 3081, col: 4, offset: 94986},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 3081, col: 11, offset: 94993},
										val:        "log",
										ignoreCase: false,
										want:       "\"log\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3081, col: 17, offset: 94999},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3081, col: 25, offset: 95007},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 3081, col: 31, offset: 95013},
										name: "NumericExprLevel3",
									},
								},
								&labeledExpr{
									pos:   position{line: 3081, col: 50, offset: 95032},
									label: "param",
									expr: &zeroOrOneExpr{
										pos: position{line: 3081, col: 56, offset: 95038},
										expr: &ruleRefExpr{
											pos:  position{line: 3081, col: 57, offset: 95039},
											name: "NumericParamExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3081, col: 76, offset: 95058},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3110, col: 3, offset: 95831},
						run: (*parser).callonNumericEvalExpr96,
						expr: &seqExpr{
							pos: position{line: 3110, col: 3, offset: 95831},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 3110, col: 3, offset: 95831},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 3110, col: 11, offset: 95839},
										val:        "relative_time",
										ignoreCase: false,
										want:       "\"relative_time\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3110, col: 28, offset: 95856},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3110, col: 36, offset: 95864},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 3110, col: 42, offset: 95870},
										name: "NumericExprLevel3",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3110, col: 61, offset: 95889},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 3110, col: 67, offset: 95895},
									label: "specifier",
									expr: &ruleRefExpr{
										pos:  position{line: 3110, col: 77, offset: 95905},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3110, col: 88, offset: 95916},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LenExpr",
			pos:  position{line: 3123, col: 1, offset: 96293},
			expr: &choiceExpr{
				pos: position{line: 3123, col: 12, offset: 96304},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3123, col: 12, offset: 96304},
						run: (*parser).callonLenExpr2,
						expr: &seqExpr{
							pos: position{line: 3123, col: 12, offset: 96304},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 3123, col: 12, offset: 96304},
									label: "str",
									expr: &ruleRefExpr{
										pos:  position{line: 3123, col: 16, offset: 96308},
										name: "QuotedString",
									},
								},
								&notExpr{
									pos: position{line: 3123, col: 29, offset: 96321},
									expr: &ruleRefExpr{
										pos:  position{line: 3123, col: 31, offset: 96323},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3139, col: 3, offset: 96684},
						run: (*parser).callonLenExpr8,
						expr: &seqExpr{
							pos: position{line: 3139, col: 3, offset: 96684},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 3139, col: 3, offset: 96684},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3139, col: 9, offset: 96690},
										name: "EvalFieldToRead",
									},
								},
								&notExpr{
									pos: position{line: 3139, col: 25, offset: 96706},
									expr: &choiceExpr{
										pos: position{line: 3139, col: 27, offset: 96708},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 3139, col: 27, offset: 96708},
												name: "OpPlus",
											},
											&ruleRefExpr{
												pos:  position{line: 3139, col: 36, offset: 96717},
												name: "OpMinus",
											},
											&ruleRefExpr{
												pos:  position{line: 3139, col: 46, offset: 96727},
												name: "OpMul",
											},
											&ruleRefExpr{
												pos:  position{line: 3139, col: 54, offset: 96735},
												name: "OpDiv",
											},
											&ruleRefExpr{
												pos:  position{line: 3139, col: 62, offset: 96743},
												name: "EVAL_CONCAT",
											},
											&litMatcher{
												pos:        position{line: 3139, col: 76, offset: 96757},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOptionNull",
			pos:  position{line: 3156, col: 1, offset: 97108},
			expr: &actionExpr{
				pos: position{line: 3156, col: 19, offset: 97126},
				run: (*parser).callonHeadOptionNull1,
				expr: &seqExpr{
					pos: position{line: 3156, col: 19, offset: 97126},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3156, col: 19, offset: 97126},
							val:        "null",
							ignoreCase: false,
							want:       "\"null\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3156, col: 26, offset: 97133},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3156, col: 32, offset: 97139},
							label: "boolVal",
							expr: &ruleRefExpr{
								pos:  position{line: 3156, col: 40, offset: 97147},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOptionKeeplast",
			pos:  position{line: 3167, col: 1, offset: 97336},
			expr: &actionExpr{
				pos: position{line: 3167, col: 23, offset: 97358},
				run: (*parser).callonHeadOptionKeeplast1,
				expr: &seqExpr{
					pos: position{line: 3167, col: 23, offset: 97358},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3167, col: 23, offset: 97358},
							val:        "keeplast",
							ignoreCase: false,
							want:       "\"keeplast\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3167, col: 34, offset: 97369},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3167, col: 40, offset: 97375},
							label: "boolVal",
							expr: &ruleRefExpr{
								pos:  position{line: 3167, col: 48, offset: 97383},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOptionLimit",
			pos:  position{line: 3178, col: 1, offset: 97580},
			expr: &actionExpr{
				pos: position{line: 3178, col: 20, offset: 97599},
				run: (*parser).callonHeadOptionLimit1,
				expr: &seqExpr{
					pos: position{line: 3178, col: 20, offset: 97599},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3178, col: 20, offset: 97599},
							val:        "limit",
							ignoreCase: false,
							want:       "\"limit\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3178, col: 28, offset: 97607},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3178, col: 34, offset: 97613},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 3178, col: 43, offset: 97622},
								name: "IntegerAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOptionExpr",
			pos:  position{line: 3193, col: 1, offset: 97984},
			expr: &actionExpr{
				pos: position{line: 3193, col: 19, offset: 98002},
				run: (*parser).callonHeadOptionExpr1,
				expr: &labeledExpr{
					pos:   position{line: 3193, col: 19, offset: 98002},
					label: "boolExpr",
					expr: &ruleRefExpr{
						pos:  position{line: 3193, col: 28, offset: 98011},
						name: "BoolExpr",
					},
				},
			},
		},
		{
			name: "HeadOption",
			pos:  position{line: 3204, col: 1, offset: 98223},
			expr: &actionExpr{
				pos: position{line: 3204, col: 15, offset: 98237},
				run: (*parser).callonHeadOption1,
				expr: &labeledExpr{
					pos:   position{line: 3204, col: 15, offset: 98237},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 3204, col: 23, offset: 98245},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3204, col: 23, offset: 98245},
								name: "HeadOptionKeeplast",
							},
							&ruleRefExpr{
								pos:  position{line: 3204, col: 44, offset: 98266},
								name: "HeadOptionNull",
							},
							&ruleRefExpr{
								pos:  position{line: 3204, col: 61, offset: 98283},
								name: "HeadOptionLimit",
							},
							&ruleRefExpr{
								pos:  position{line: 3204, col: 79, offset: 98301},
								name: "HeadOptionExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOptionList",
			pos:  position{line: 3208, col: 1, offset: 98345},
			expr: &actionExpr{
				pos: position{line: 3208, col: 19, offset: 98363},
				run: (*parser).callonHeadOptionList1,
				expr: &seqExpr{
					pos: position{line: 3208, col: 19, offset: 98363},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3208, col: 19, offset: 98363},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 3208, col: 26, offset: 98370},
								name: "HeadOption",
							},
						},
						&labeledExpr{
							pos:   position{line: 3208, col: 37, offset: 98381},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3208, col: 43, offset: 98387},
								expr: &seqExpr{
									pos: position{line: 3208, col: 44, offset: 98388},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 3208, col: 44, offset: 98388},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 3208, col: 50, offset: 98394},
											name: "HeadOption",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HeadBlock",
			pos:  position{line: 3270, col: 1, offset: 100441},
			expr: &choiceExpr{
				pos: position{line: 3270, col: 14, offset: 100454},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3270, col: 14, offset: 100454},
						run: (*parser).callonHeadBlock2,
						expr: &seqExpr{
							pos: position{line: 3270, col: 14, offset: 100454},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 3270, col: 14, offset: 100454},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 3270, col: 19, offset: 100459},
									name: "CMD_HEAD",
								},
								&labeledExpr{
									pos:   position{line: 3270, col: 28, offset: 100468},
									label: "headExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3270, col: 37, offset: 100477},
										name: "HeadOptionList",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3280, col: 3, offset: 100748},
						run: (*parser).callonHeadBlock8,
						expr: &seqExpr{
							pos: position{line: 3280, col: 3, offset: 100748},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 3280, col: 3, offset: 100748},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 3280, col: 8, offset: 100753},
									name: "CMD_HEAD",
								},
								&labeledExpr{
									pos:   position{line: 3280, col: 17, offset: 100762},
									label: "intAsStr",
									expr: &ruleRefExpr{
										pos:  position{line: 3280, col: 26, offset: 100771},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3297, col: 3, offset: 101250},
						run: (*parser).callonHeadBlock14,
						expr: &seqExpr{
							pos: position{line: 3297, col: 3, offset: 101250},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 3297, col: 3, offset: 101250},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 3297, col: 8, offset: 101255},
									name: "CMD_HEAD_NO_SPACE",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TailBlock",
			pos:  position{line: 3311, col: 1, offset: 101686},
			expr: &choiceExpr{
				pos: position{line: 3311, col: 14, offset: 101699},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3311, col: 14, offset: 101699},
						run: (*parser).callonTailBlock2,
						expr: &seqExpr{
							pos: position{line: 3311, col: 14, offset: 101699},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 3311, col: 14, offset: 101699},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 3311, col: 19, offset: 101704},
									name: "CMD_TAIL",
								},
								&labeledExpr{
									pos:   position{line: 3311, col: 28, offset: 101713},
									label: "intAsStr",
									expr: &ruleRefExpr{
										pos:  position{line: 3311, col: 37, offset: 101722},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3331, col: 3, offset: 102271},
						run: (*parser).callonTailBlock8,
						expr: &seqExpr{
							pos: position{line: 3331, col: 3, offset: 102271},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 3331, col: 3, offset: 102271},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 3331, col: 8, offset: 102276},
									name: "CMD_TAIL_NO_SPACE",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggregationList",
			pos:  position{line: 3351, col: 1, offset: 102869},
			expr: &actionExpr{
				pos: position{line: 3351, col: 20, offset: 102888},
				run: (*parser).callonAggregationList1,
				expr: &seqExpr{
					pos: position{line: 3351, col: 20, offset: 102888},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3351, col: 20, offset: 102888},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 3351, col: 26, offset: 102894},
								name: "Aggregator",
							},
						},
						&labeledExpr{
							pos:   position{line: 3351, col: 37, offset: 102905},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3351, col: 42, offset: 102910},
								expr: &seqExpr{
									pos: position{line: 3351, col: 43, offset: 102911},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 3351, col: 44, offset: 102912},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 3351, col: 44, offset: 102912},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 3351, col: 52, offset: 102920},
													name: "SPACE",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 3351, col: 59, offset: 102927},
											name: "Aggregator",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Aggregator",
			pos:  position{line: 3368, col: 1, offset: 103430},
			expr: &actionExpr{
				pos: position{line: 3368, col: 15, offset: 103444},
				run: (*parser).callonAggregator1,
				expr: &seqExpr{
					pos: position{line: 3368, col: 15, offset: 103444},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3368, col: 15, offset: 103444},
							label: "aggFunc",
							expr: &ruleRefExpr{
								pos:  position{line: 3368, col: 23, offset: 103452},
								name: "AggFunction",
							},
						},
						&labeledExpr{
							pos:   position{line: 3368, col: 35, offset: 103464},
							label: "asField",
							expr: &zeroOrOneExpr{
								pos: position{line: 3368, col: 43, offset: 103472},
								expr: &ruleRefExpr{
									pos:  position{line: 3368, col: 43, offset: 103472},
									name: "AsField",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggFunction",
			pos:  position{line: 3384, col: 1, offset: 104313},
			expr: &actionExpr{
				pos: position{line: 3384, col: 16, offset: 104328},
				run: (*parser).callonAggFunction1,
				expr: &labeledExpr{
					pos:   position{line: 3384, col: 16, offset: 104328},
					label: "agg",
					expr: &choiceExpr{
						pos: position{line: 3384, col: 21, offset: 104333},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3384, col: 21, offset: 104333},
								name: "AggCount",
							},
							&ruleRefExpr{
								pos:  position{line: 3384, col: 32, offset: 104344},
								name: "AggDistinctCount",
							},
							&ruleRefExpr{
								pos:  position{line: 3384, col: 51, offset: 104363},
								name: "AggAvg",
							},
							&ruleRefExpr{
								pos:  position{line: 3384, col: 60, offset: 104372},
								name: "AggMin",
							},
							&ruleRefExpr{
								pos:  position{line: 3384, col: 69, offset: 104381},
								name: "AggMax",
							},
							&ruleRefExpr{
								pos:  position{line: 3384, col: 78, offset: 104390},
								name: "AggRange",
							},
							&ruleRefExpr{
								pos:  position{line: 3384, col: 89, offset: 104401},
								name: "AggSum",
							},
							&ruleRefExpr{
								pos:  position{line: 3384, col: 98, offset: 104410},
								name: "AggValues",
							},
							&ruleRefExpr{
								pos:  position{line: 3384, col: 110, offset: 104422},
								name: "AggEstdc",
							},
							&ruleRefExpr{
								pos:  position{line: 3384, col: 121, offset: 104433},
								name: "AggEstdcError",
							},
							&ruleRefExpr{
								pos:  position{line: 3384, col: 137, offset: 104449},
								name: "AggExactPerc",
							},
							&ruleRefExpr{
								pos:  position{line: 3384, col: 152, offset: 104464},
								name: "AggMedian",
							},
							&ruleRefExpr{
								pos:  position{line: 3384, col: 164, offset: 104476},
								name: "AggMode",
							},
							&ruleRefExpr{
								pos:  position{line: 3384, col: 174, offset: 104486},
								name: "AggPerc",
							},
							&ruleRefExpr{
								pos:  position{line: 3385, col: 1, offset: 104496},
								name: "AggStdev",
							},
							&ruleRefExpr{
								pos:  position{line: 3385, col: 12, offset: 104507},
								name: "AggStdevp",
							},
							&ruleRefExpr{
								pos:  position{line: 3385, col: 24, offset: 104519},
								name: "AggSumsq",
							},
							&ruleRefExpr{
								pos:  position{line: 3385, col: 35, offset: 104530},
								name: "AggUpperPerc",
							},
							&ruleRefExpr{
								pos:  position{line: 3385, col: 50, offset: 104545},
								name: "AggVar",
							},
							&ruleRefExpr{
								pos:  position{line: 3385, col: 59, offset: 104554},
								name: "AggVarp",
							},
							&ruleRefExpr{
								pos:  position{line: 3385, col: 69, offset: 104564},
								name: "AggFirst",
							},
							&ruleRefExpr{
								pos:  position{line: 3385, col: 80, offset: 104575},
								name: "AggLast",
							},
							&ruleRefExpr{
								pos:  position{line: 3385, col: 90, offset: 104585},
								name: "AggList",
							},
							&ruleRefExpr{
								pos:  position{line: 3385, col: 100, offset: 104595},
								name: "AggEarliest",
							},
							&ruleRefExpr{
								pos:  position{line: 3385, col: 114, offset: 104609},
								name: "AggEarliestTime",
							},
							&ruleRefExpr{
								pos:  position{line: 3385, col: 132, offset: 104627},
								name: "AggLatest",
							},
							&ruleRefExpr{
								pos:  position{line: 3385, col: 144, offset: 104639},
								name: "AggLatestTime",
							},
							&ruleRefExpr{
								pos:  position{line: 3385, col: 160, offset: 104655},
								name: "AggRate",
							},
						},
					},
				},
			},
		},
		{
			name: "AsField",
			pos:  position{line: 3389, col: 1, offset: 104689},
			expr: &actionExpr{
				pos: position{line: 3389, col: 12, offset: 104700},
				run: (*parser).callonAsField1,
				expr: &seqExpr{
					pos: position{line: 3389, col: 12, offset: 104700},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3389, col: 12, offset: 104700},
							name: "AS",
						},
						&labeledExpr{
							pos:   position{line: 3389, col: 15, offset: 104703},
							label: "field",
							expr: &choiceExpr{
								pos: position{line: 3389, col: 23, offset: 104711},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 3389, col: 23, offset: 104711},
										name: "FieldName",
									},
									&ruleRefExpr{
										pos:  position{line: 3389, col: 35, offset: 104723},
										name: "String",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggCount",
			pos:  position{line: 3403, col: 1, offset: 105052},
			expr: &choiceExpr{
				pos: position{line: 3403, col: 13, offset: 105064},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3403, col: 13, offset: 105064},
						run: (*parser).callonAggCount2,
						expr: &seqExpr{
							pos: position{line: 3403, col: 13, offset: 105064},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 3403, col: 14, offset: 105065},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 3403, col: 14, offset: 105065},
											val:        "count",
											ignoreCase: false,
											want:       "\"count\"",
										},
										&litMatcher{
											pos:        position{line: 3403, col: 24, offset: 105075},
											val:        "c",
											ignoreCase: false,
											want:       "\"c\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3403, col: 29, offset: 105080},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3403, col: 37, offset: 105088},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 3403, col: 44, offset: 105095},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3403, col: 54, offset: 105105},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3403, col: 64, offset: 105115},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3413, col: 3, offset: 105343},
						run: (*parser).callonAggCount12,
						expr: &seqExpr{
							pos: position{line: 3413, col: 3, offset: 105343},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 3413, col: 4, offset: 105344},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 3413, col: 4, offset: 105344},
											val:        "count",
											ignoreCase: false,
											want:       "\"count\"",
										},
										&litMatcher{
											pos:        position{line: 3413, col: 14, offset: 105354},
											val:        "c",
											ignoreCase: false,
											want:       "\"c\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3413, col: 19, offset: 105359},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3413, col: 27, offset: 105367},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3413, col: 33, offset: 105373},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3413, col: 43, offset: 105383},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3420, col: 5, offset: 105534},
						run: (*parser).callonAggCount21,
						expr: &choiceExpr{
							pos: position{line: 3420, col: 6, offset: 105535},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 3420, col: 6, offset: 105535},
									val:        "count",
									ignoreCase: false,
									want:       "\"count\"",
								},
								&litMatcher{
									pos:        position{line: 3420, col: 16, offset: 105545},
									val:        "c",
									ignoreCase: false,
									want:       "\"c\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggDistinctCount",
			pos:  position{line: 3429, col: 1, offset: 105681},
			expr: &choiceExpr{
				pos: position{line: 3429, col: 21, offset: 105701},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3429, col: 21, offset: 105701},
						run: (*parser).callonAggDistinctCount2,
						expr: &seqExpr{
							pos: position{line: 3429, col: 21, offset: 105701},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 3429, col: 22, offset: 105702},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 3429, col: 22, offset: 105702},
											val:        "distinct_count",
											ignoreCase: false,
											want:       "\"distinct_count\"",
										},
										&litMatcher{
											pos:        position{line: 3429, col: 41, offset: 105721},
											val:        "dc",
											ignoreCase: false,
											want:       "\"dc\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3429, col: 47, offset: 105727},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3429, col: 55, offset: 105735},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 3429, col: 62, offset: 105742},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3429, col: 72, offset: 105752},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3429, col: 82, offset: 105762},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3439, col: 3, offset: 105996},
						run: (*parser).callonAggDistinctCount12,
						expr: &seqExpr{
							pos: position{line: 3439, col: 3, offset: 105996},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 3439, col: 4, offset: 105997},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 3439, col: 4, offset: 105997},
											val:        "distinct_count",
											ignoreCase: false,
											want:       "\"distinct_count\"",
										},
										&litMatcher{
											pos:        position{line: 3439, col: 23, offset: 106016},
											val:        "dc",
											ignoreCase: false,
											want:       "\"dc\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3439, col: 29, offset: 106022},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3439, col: 37, offset: 106030},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3439, col: 43, offset: 106036},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3439, col: 53, offset: 106046},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAvg",
			pos:  position{line: 3448, col: 1, offset: 106202},
			expr: &choiceExpr{
				pos: position{line: 3448, col: 11, offset: 106212},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3448, col: 11, offset: 106212},
						run: (*parser).callonAggAvg2,
						expr: &seqExpr{
							pos: position{line: 3448, col: 11, offset: 106212},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3448, col: 11, offset: 106212},
									val:        "avg",
									ignoreCase: false,
									want:       "\"avg\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3448, col: 17, offset: 106218},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3448, col: 25, offset: 106226},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 3448, col: 32, offset: 106233},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3448, col: 42, offset: 106243},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3448, col: 52, offset: 106253},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3458, col: 3, offset: 106479},
						run: (*parser).callonAggAvg10,
						expr: &seqExpr{
							pos: position{line: 3458, col: 3, offset: 106479},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3458, col: 3, offset: 106479},
									val:        "avg",
									ignoreCase: false,
									want:       "\"avg\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3458, col: 9, offset: 106485},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3458, col: 17, offset: 106493},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3458, col: 23, offset: 106499},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3458, col: 33, offset: 106509},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMin",
			pos:  position{line: 3467, col: 1, offset: 106657},
			expr: &choiceExpr{
				pos: position{line: 3467, col: 11, offset: 106667},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3467, col: 11, offset: 106667},
						run: (*parser).callonAggMin2,
						expr: &seqExpr{
							pos: position{line: 3467, col: 11, offset: 106667},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3467, col: 11, offset: 106667},
									val:        "min",
									ignoreCase: false,
									want:       "\"min\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3467, col: 17, offset: 106673},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3467, col: 25, offset: 106681},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 3467, col: 32, offset: 106688},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3467, col: 42, offset: 106698},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3467, col: 52, offset: 106708},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3477, col: 3, offset: 106934},
						run: (*parser).callonAggMin10,
						expr: &seqExpr{
							pos: position{line: 3477, col: 3, offset: 106934},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3477, col: 3, offset: 106934},
									val:        "min",
									ignoreCase: false,
									want:       "\"min\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3477, col: 9, offset: 106940},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3477, col: 17, offset: 106948},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3477, col: 23, offset: 106954},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3477, col: 33, offset: 106964},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMax",
			pos:  position{line: 3486, col: 1, offset: 107112},
			expr: &choiceExpr{
				pos: position{line: 3486, col: 11, offset: 107122},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3486, col: 11, offset: 107122},
						run: (*parser).callonAggMax2,
						expr: &seqExpr{
							pos: position{line: 3486, col: 11, offset: 107122},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3486, col: 11, offset: 107122},
									val:        "max",
									ignoreCase: false,
									want:       "\"max\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3486, col: 17, offset: 107128},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3486, col: 25, offset: 107136},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 3486, col: 32, offset: 107143},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3486, col: 42, offset: 107153},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3486, col: 52, offset: 107163},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3496, col: 3, offset: 107389},
						run: (*parser).callonAggMax10,
						expr: &seqExpr{
							pos: position{line: 3496, col: 3, offset: 107389},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3496, col: 3, offset: 107389},
									val:        "max",
									ignoreCase: false,
									want:       "\"max\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3496, col: 9, offset: 107395},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3496, col: 17, offset: 107403},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3496, col: 23, offset: 107409},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3496, col: 33, offset: 107419},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggRange",
			pos:  position{line: 3505, col: 1, offset: 107567},
			expr: &choiceExpr{
				pos: position{line: 3505, col: 13, offset: 107579},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3505, col: 13, offset: 107579},
						run: (*parser).callonAggRange2,
						expr: &seqExpr{
							pos: position{line: 3505, col: 13, offset: 107579},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3505, col: 13, offset: 107579},
									val:        "range",
									ignoreCase: false,
									want:       "\"range\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3505, col: 21, offset: 107587},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3505, col: 29, offset: 107595},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 3505, col: 36, offset: 107602},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3505, col: 46, offset: 107612},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3505, col: 56, offset: 107622},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3515, col: 3, offset: 107850},
						run: (*parser).callonAggRange10,
						expr: &seqExpr{
							pos: position{line: 3515, col: 3, offset: 107850},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3515, col: 3, offset: 107850},
									val:        "range",
									ignoreCase: false,
									want:       "\"range\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3515, col: 11, offset: 107858},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3515, col: 19, offset: 107866},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3515, col: 25, offset: 107872},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3515, col: 35, offset: 107882},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggSum",
			pos:  position{line: 3524, col: 1, offset: 108032},
			expr: &choiceExpr{
				pos: position{line: 3524, col: 11, offset: 108042},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3524, col: 11, offset: 108042},
						run: (*parser).callonAggSum2,
						expr: &seqExpr{
							pos: position{line: 3524, col: 11, offset: 108042},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3524, col: 11, offset: 108042},
									val:        "sum",
									ignoreCase: false,
									want:       "\"sum\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3524, col: 17, offset: 108048},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3524, col: 25, offset: 108056},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 3524, col: 32, offset: 108063},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3524, col: 42, offset: 108073},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3524, col: 52, offset: 108083},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3534, col: 3, offset: 108309},
						run: (*parser).callonAggSum10,
						expr: &seqExpr{
							pos: position{line: 3534, col: 3, offset: 108309},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3534, col: 3, offset: 108309},
									val:        "sum",
									ignoreCase: false,
									want:       "\"sum\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3534, col: 9, offset: 108315},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3534, col: 17, offset: 108323},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3534, col: 23, offset: 108329},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3534, col: 33, offset: 108339},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggEstdc",
			pos:  position{line: 3544, col: 1, offset: 108527},
			expr: &choiceExpr{
				pos: position{line: 3544, col: 13, offset: 108539},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3544, col: 13, offset: 108539},
						run: (*parser).callonAggEstdc2,
						expr: &seqExpr{
							pos: position{line: 3544, col: 13, offset: 108539},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3544, col: 13, offset: 108539},
									val:        "estdc",
									ignoreCase: false,
									want:       "\"estdc\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3544, col: 21, offset: 108547},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3544, col: 29, offset: 108555},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3544, col: 36, offset: 108562},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3544, col: 44, offset: 108570},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3544, col: 63, offset: 108589},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3544, col: 82, offset: 108608},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3544, col: 90, offset: 108616},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3559, col: 3, offset: 108976},
						run: (*parser).callonAggEstdc12,
						expr: &seqExpr{
							pos: position{line: 3559, col: 3, offset: 108976},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3559, col: 3, offset: 108976},
									val:        "estdc",
									ignoreCase: false,
									want:       "\"estdc\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3559, col: 11, offset: 108984},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3559, col: 19, offset: 108992},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3559, col: 25, offset: 108998},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3559, col: 35, offset: 109008},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggEstdcError",
			pos:  position{line: 3569, col: 1, offset: 109198},
			expr: &choiceExpr{
				pos: position{line: 3569, col: 18, offset: 109215},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3569, col: 18, offset: 109215},
						run: (*parser).callonAggEstdcError2,
						expr: &seqExpr{
							pos: position{line: 3569, col: 18, offset: 109215},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3569, col: 18, offset: 109215},
									val:        "estdc_error",
									ignoreCase: false,
									want:       "\"estdc_error\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3569, col: 32, offset: 109229},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3569, col: 40, offset: 109237},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3569, col: 47, offset: 109244},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3569, col: 55, offset: 109252},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3569, col: 74, offset: 109271},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3569, col: 93, offset: 109290},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3569, col: 101, offset: 109298},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3584, col: 3, offset: 109663},
						run: (*parser).callonAggEstdcError12,
						expr: &seqExpr{
							pos: position{line: 3584, col: 3, offset: 109663},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3584, col: 3, offset: 109663},
									val:        "estdc_error",
									ignoreCase: false,
									want:       "\"estdc_error\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3584, col: 17, offset: 109677},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3584, col: 25, offset: 109685},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3584, col: 31, offset: 109691},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3584, col: 41, offset: 109701},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggExactPerc",
			pos:  position{line: 3594, col: 1, offset: 109896},
			expr: &choiceExpr{
				pos: position{line: 3594, col: 17, offset: 109912},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3594, col: 17, offset: 109912},
						run: (*parser).callonAggExactPerc2,
						expr: &seqExpr{
							pos: position{line: 3594, col: 17, offset: 109912},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3594, col: 17, offset: 109912},
									val:        "exactperc",
									ignoreCase: false,
									want:       "\"exactperc\"",
								},
								&labeledExpr{
									pos:   position{line: 3594, col: 29, offset: 109924},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 3594, col: 37, offset: 109932},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 3594, col: 37, offset: 109932},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 3594, col: 53, offset: 109948},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3594, col: 70, offset: 109965},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3594, col: 78, offset: 109973},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3594, col: 85, offset: 109980},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3594, col: 93, offset: 109988},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3594, col: 112, offset: 110007},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3594, col: 131, offset: 110026},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3594, col: 139, offset: 110034},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3610, col: 3, offset: 110430},
						run: (*parser).callonAggExactPerc16,
						expr: &seqExpr{
							pos: position{line: 3610, col: 3, offset: 110430},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3610, col: 3, offset: 110430},
									val:        "exactperc",
									ignoreCase: false,
									want:       "\"exactperc\"",
								},
								&labeledExpr{
									pos:   position{line: 3610, col: 15, offset: 110442},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 3610, col: 23, offset: 110450},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 3610, col: 23, offset: 110450},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 3610, col: 39, offset: 110466},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3610, col: 56, offset: 110483},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3610, col: 64, offset: 110491},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3610, col: 70, offset: 110497},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3610, col: 80, offset: 110507},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggPerc",
			pos:  position{line: 3621, col: 1, offset: 110733},
			expr: &choiceExpr{
				pos: position{line: 3621, col: 12, offset: 110744},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3621, col: 12, offset: 110744},
						run: (*parser).callonAggPerc2,
						expr: &seqExpr{
							pos: position{line: 3621, col: 12, offset: 110744},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3621, col: 12, offset: 110744},
									val:        "perc",
									ignoreCase: false,
									want:       "\"perc\"",
								},
								&labeledExpr{
									pos:   position{line: 3621, col: 19, offset: 110751},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 3621, col: 27, offset: 110759},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 3621, col: 27, offset: 110759},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 3621, col: 43, offset: 110775},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3621, col: 60, offset: 110792},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3621, col: 68, offset: 110800},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3621, col: 75, offset: 110807},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3621, col: 83, offset: 110815},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3621, col: 102, offset: 110834},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3621, col: 121, offset: 110853},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3621, col: 129, offset: 110861},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3637, col: 3, offset: 111252},
						run: (*parser).callonAggPerc16,
						expr: &seqExpr{
							pos: position{line: 3637, col: 3, offset: 111252},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3637, col: 3, offset: 111252},
									val:        "perc",
									ignoreCase: false,
									want:       "\"perc\"",
								},
								&labeledExpr{
									pos:   position{line: 3637, col: 10, offset: 111259},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 3637, col: 18, offset: 111267},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 3637, col: 18, offset: 111267},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 3637, col: 34, offset: 111283},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3637, col: 51, offset: 111300},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3637, col: 59, offset: 111308},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3637, col: 65, offset: 111314},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3637, col: 75, offset: 111324},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggUpperPerc",
			pos:  position{line: 3648, col: 1, offset: 111545},
			expr: &choiceExpr{
				pos: position{line: 3648, col: 17, offset: 111561},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3648, col: 17, offset: 111561},
						run: (*parser).callonAggUpperPerc2,
						expr: &seqExpr{
							pos: position{line: 3648, col: 17, offset: 111561},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3648, col: 17, offset: 111561},
									val:        "upperperc",
									ignoreCase: false,
									want:       "\"upperperc\"",
								},
								&labeledExpr{
									pos:   position{line: 3648, col: 29, offset: 111573},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 3648, col: 37, offset: 111581},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 3648, col: 37, offset: 111581},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 3648, col: 53, offset: 111597},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3648, col: 70, offset: 111614},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3648, col: 78, offset: 111622},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3648, col: 85, offset: 111629},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3648, col: 93, offset: 111637},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3648, col: 112, offset: 111656},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3648, col: 131, offset: 111675},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3648, col: 139, offset: 111683},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3664, col: 3, offset: 112079},
						run: (*parser).callonAggUpperPerc16,
						expr: &seqExpr{
							pos: position{line: 3664, col: 3, offset: 112079},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3664, col: 3, offset: 112079},
									val:        "upperperc",
									ignoreCase: false,
									want:       "\"upperperc\"",
								},
								&labeledExpr{
									pos:   position{line: 3664, col: 15, offset: 112091},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 3664, col: 23, offset: 112099},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 3664, col: 23, offset: 112099},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 3664, col: 39, offset: 112115},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3664, col: 56, offset: 112132},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3664, col: 64, offset: 112140},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3664, col: 70, offset: 112146},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3664, col: 80, offset: 112156},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMedian",
			pos:  position{line: 3675, col: 1, offset: 112382},
			expr: &choiceExpr{
				pos: position{line: 3675, col: 14, offset: 112395},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3675, col: 14, offset: 112395},
						run: (*parser).callonAggMedian2,
						expr: &seqExpr{
							pos: position{line: 3675, col: 14, offset: 112395},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3675, col: 14, offset: 112395},
									val:        "median",
									ignoreCase: false,
									want:       "\"median\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3675, col: 23, offset: 112404},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3675, col: 31, offset: 112412},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3675, col: 38, offset: 112419},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3675, col: 46, offset: 112427},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3675, col: 65, offset: 112446},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3675, col: 84, offset: 112465},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3675, col: 92, offset: 112473},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3690, col: 3, offset: 112834},
						run: (*parser).callonAggMedian12,
						expr: &seqExpr{
							pos: position{line: 3690, col: 3, offset: 112834},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3690, col: 3, offset: 112834},
									val:        "median",
									ignoreCase: false,
									want:       "\"median\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3690, col: 12, offset: 112843},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3690, col: 20, offset: 112851},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3690, col: 26, offset: 112857},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3690, col: 36, offset: 112867},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMode",
			pos:  position{line: 3700, col: 1, offset: 113058},
			expr: &choiceExpr{
				pos: position{line: 3700, col: 12, offset: 113069},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3700, col: 12, offset: 113069},
						run: (*parser).callonAggMode2,
						expr: &seqExpr{
							pos: position{line: 3700, col: 12, offset: 113069},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3700, col: 12, offset: 113069},
									val:        "mode",
									ignoreCase: false,
									want:       "\"mode\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3700, col: 19, offset: 113076},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3700, col: 27, offset: 113084},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3700, col: 34, offset: 113091},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3700, col: 42, offset: 113099},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3700, col: 61, offset: 113118},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3700, col: 80, offset: 113137},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3700, col: 88, offset: 113145},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3715, col: 3, offset: 113504},
						run: (*parser).callonAggMode12,
						expr: &seqExpr{
							pos: position{line: 3715, col: 3, offset: 113504},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3715, col: 3, offset: 113504},
									val:        "mode",
									ignoreCase: false,
									want:       "\"mode\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3715, col: 10, offset: 113511},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3715, col: 18, offset: 113519},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3715, col: 24, offset: 113525},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3715, col: 34, offset: 113535},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggStdev",
			pos:  position{line: 3725, col: 1, offset: 113724},
			expr: &choiceExpr{
				pos: position{line: 3725, col: 13, offset: 113736},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3725, col: 13, offset: 113736},
						run: (*parser).callonAggStdev2,
						expr: &seqExpr{
							pos: position{line: 3725, col: 13, offset: 113736},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3725, col: 13, offset: 113736},
									val:        "stdev",
									ignoreCase: false,
									want:       "\"stdev\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3725, col: 21, offset: 113744},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3725, col: 29, offset: 113752},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3725, col: 36, offset: 113759},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3725, col: 44, offset: 113767},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3725, col: 63, offset: 113786},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3725, col: 82, offset: 113805},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3725, col: 90, offset: 113813},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3740, col: 3, offset: 114173},
						run: (*parser).callonAggStdev12,
						expr: &seqExpr{
							pos: position{line: 3740, col: 3, offset: 114173},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3740, col: 3, offset: 114173},
									val:        "stdev",
									ignoreCase: false,
									want:       "\"stdev\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3740, col: 11, offset: 114181},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3740, col: 19, offset: 114189},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3740, col: 25, offset: 114195},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3740, col: 35, offset: 114205},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggStdevp",
			pos:  position{line: 3750, col: 1, offset: 114395},
			expr: &choiceExpr{
				pos: position{line: 3750, col: 14, offset: 114408},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3750, col: 14, offset: 114408},
						run: (*parser).callonAggStdevp2,
						expr: &seqExpr{
							pos: position{line: 3750, col: 14, offset: 114408},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3750, col: 14, offset: 114408},
									val:        "stdevp",
									ignoreCase: false,
									want:       "\"stdevp\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3750, col: 23, offset: 114417},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3750, col: 31, offset: 114425},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3750, col: 38, offset: 114432},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3750, col: 46, offset: 114440},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3750, col: 65, offset: 114459},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3750, col: 84, offset: 114478},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3750, col: 92, offset: 114486},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3765, col: 3, offset: 114847},
						run: (*parser).callonAggStdevp12,
						expr: &seqExpr{
							pos: position{line: 3765, col: 3, offset: 114847},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3765, col: 3, offset: 114847},
									val:        "stdevp",
									ignoreCase: false,
									want:       "\"stdevp\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3765, col: 12, offset: 114856},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3765, col: 20, offset: 114864},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3765, col: 26, offset: 114870},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3765, col: 36, offset: 114880},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggSumsq",
			pos:  position{line: 3775, col: 1, offset: 115071},
			expr: &choiceExpr{
				pos: position{line: 3775, col: 13, offset: 115083},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3775, col: 13, offset: 115083},
						run: (*parser).callonAggSumsq2,
						expr: &seqExpr{
							pos: position{line: 3775, col: 13, offset: 115083},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3775, col: 13, offset: 115083},
									val:        "sumsq",
									ignoreCase: false,
									want:       "\"sumsq\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3775, col: 21, offset: 115091},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3775, col: 29, offset: 115099},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3775, col: 36, offset: 115106},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3775, col: 44, offset: 115114},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3775, col: 63, offset: 115133},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3775, col: 82, offset: 115152},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3775, col: 90, offset: 115160},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3790, col: 3, offset: 115520},
						run: (*parser).callonAggSumsq12,
						expr: &seqExpr{
							pos: position{line: 3790, col: 3, offset: 115520},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3790, col: 3, offset: 115520},
									val:        "sumsq",
									ignoreCase: false,
									want:       "\"sumsq\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3790, col: 11, offset: 115528},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3790, col: 19, offset: 115536},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3790, col: 25, offset: 115542},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3790, col: 35, offset: 115552},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggVar",
			pos:  position{line: 3800, col: 1, offset: 115742},
			expr: &choiceExpr{
				pos: position{line: 3800, col: 11, offset: 115752},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3800, col: 11, offset: 115752},
						run: (*parser).callonAggVar2,
						expr: &seqExpr{
							pos: position{line: 3800, col: 11, offset: 115752},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3800, col: 11, offset: 115752},
									val:        "var",
									ignoreCase: false,
									want:       "\"var\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3800, col: 17, offset: 115758},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3800, col: 25, offset: 115766},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3800, col: 32, offset: 115773},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3800, col: 40, offset: 115781},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3800, col: 59, offset: 115800},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3800, col: 78, offset: 115819},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3800, col: 86, offset: 115827},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3815, col: 3, offset: 116185},
						run: (*parser).callonAggVar12,
						expr: &seqExpr{
							pos: position{line: 3815, col: 3, offset: 116185},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3815, col: 3, offset: 116185},
									val:        "var",
									ignoreCase: false,
									want:       "\"var\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3815, col: 9, offset: 116191},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3815, col: 17, offset: 116199},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3815, col: 23, offset: 116205},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3815, col: 33, offset: 116215},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggVarp",
			pos:  position{line: 3825, col: 1, offset: 116403},
			expr: &choiceExpr{
				pos: position{line: 3825, col: 12, offset: 116414},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3825, col: 12, offset: 116414},
						run: (*parser).callonAggVarp2,
						expr: &seqExpr{
							pos: position{line: 3825, col: 12, offset: 116414},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3825, col: 12, offset: 116414},
									val:        "varp",
									ignoreCase: false,
									want:       "\"varp\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3825, col: 19, offset: 116421},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3825, col: 27, offset: 116429},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3825, col: 34, offset: 116436},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3825, col: 42, offset: 116444},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3825, col: 61, offset: 116463},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3825, col: 80, offset: 116482},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3825, col: 88, offset: 116490},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3840, col: 3, offset: 116849},
						run: (*parser).callonAggVarp12,
						expr: &seqExpr{
							pos: position{line: 3840, col: 3, offset: 116849},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3840, col: 3, offset: 116849},
									val:        "varp",
									ignoreCase: false,
									want:       "\"varp\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3840, col: 10, offset: 116856},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3840, col: 18, offset: 116864},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3840, col: 24, offset: 116870},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3840, col: 34, offset: 116880},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggFirst",
			pos:  position{line: 3850, col: 1, offset: 117069},
			expr: &choiceExpr{
				pos: position{line: 3850, col: 13, offset: 117081},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3850, col: 13, offset: 117081},
						run: (*parser).callonAggFirst2,
						expr: &seqExpr{
							pos: position{line: 3850, col: 13, offset: 117081},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3850, col: 13, offset: 117081},
									val:        "first",
									ignoreCase: false,
									want:       "\"first\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3850, col: 21, offset: 117089},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3850, col: 29, offset: 117097},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3850, col: 36, offset: 117104},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3850, col: 44, offset: 117112},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3850, col: 63, offset: 117131},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3850, col: 82, offset: 117150},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3850, col: 90, offset: 117158},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3865, col: 3, offset: 117518},
						run: (*parser).callonAggFirst12,
						expr: &seqExpr{
							pos: position{line: 3865, col: 3, offset: 117518},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3865, col: 3, offset: 117518},
									val:        "first",
									ignoreCase: false,
									want:       "\"first\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3865, col: 11, offset: 117526},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3865, col: 19, offset: 117534},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3865, col: 25, offset: 117540},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3865, col: 35, offset: 117550},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggLast",
			pos:  position{line: 3875, col: 1, offset: 117740},
			expr: &choiceExpr{
				pos: position{line: 3875, col: 12, offset: 117751},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3875, col: 12, offset: 117751},
						run: (*parser).callonAggLast2,
						expr: &seqExpr{
							pos: position{line: 3875, col: 12, offset: 117751},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3875, col: 12, offset: 117751},
									val:        "last",
									ignoreCase: false,
									want:       "\"last\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3875, col: 19, offset: 117758},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3875, col: 27, offset: 117766},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3875, col: 34, offset: 117773},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3875, col: 42, offset: 117781},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3875, col: 61, offset: 117800},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3875, col: 80, offset: 117819},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3875, col: 88, offset: 117827},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3890, col: 3, offset: 118186},
						run: (*parser).callonAggLast12,
						expr: &seqExpr{
							pos: position{line: 3890, col: 3, offset: 118186},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3890, col: 3, offset: 118186},
									val:        "last",
									ignoreCase: false,
									want:       "\"last\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3890, col: 10, offset: 118193},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3890, col: 18, offset: 118201},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3890, col: 24, offset: 118207},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3890, col: 34, offset: 118217},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggList",
			pos:  position{line: 3900, col: 1, offset: 118406},
			expr: &choiceExpr{
				pos: position{line: 3900, col: 12, offset: 118417},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3900, col: 12, offset: 118417},
						run: (*parser).callonAggList2,
						expr: &seqExpr{
							pos: position{line: 3900, col: 12, offset: 118417},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3900, col: 12, offset: 118417},
									val:        "list",
									ignoreCase: false,
									want:       "\"list\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3900, col: 19, offset: 118424},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3900, col: 27, offset: 118432},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 3900, col: 34, offset: 118439},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3900, col: 44, offset: 118449},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3900, col: 54, offset: 118459},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3910, col: 3, offset: 118686},
						run: (*parser).callonAggList10,
						expr: &seqExpr{
							pos: position{line: 3910, col: 3, offset: 118686},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3910, col: 3, offset: 118686},
									val:        "list",
									ignoreCase: false,
									want:       "\"list\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3910, col: 10, offset: 118693},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3910, col: 18, offset: 118701},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3910, col: 24, offset: 118707},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3910, col: 34, offset: 118717},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggEarliest",
			pos:  position{line: 3920, col: 1, offset: 118906},
			expr: &choiceExpr{
				pos: position{line: 3920, col: 16, offset: 118921},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3920, col: 16, offset: 118921},
						run: (*parser).callonAggEarliest2,
						expr: &seqExpr{
							pos: position{line: 3920, col: 16, offset: 118921},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3920, col: 16, offset: 118921},
									val:        "earliest",
									ignoreCase: false,
									want:       "\"earliest\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3920, col: 27, offset: 118932},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3920, col: 35, offset: 118940},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3920, col: 42, offset: 118947},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3920, col: 50, offset: 118955},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3920, col: 69, offset: 118974},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3920, col: 88, offset: 118993},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3920, col: 96, offset: 119001},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3935, col: 3, offset: 119364},
						run: (*parser).callonAggEarliest12,
						expr: &seqExpr{
							pos: position{line: 3935, col: 3, offset: 119364},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3935, col: 3, offset: 119364},
									val:        "earliest",
									ignoreCase: false,
									want:       "\"earliest\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3935, col: 14, offset: 119375},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3935, col: 22, offset: 119383},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3935, col: 28, offset: 119389},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3935, col: 38, offset: 119399},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggEarliestTime",
			pos:  position{line: 3945, col: 1, offset: 119592},
			expr: &choiceExpr{
				pos: position{line: 3945, col: 20, offset: 119611},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3945, col: 20, offset: 119611},
						run: (*parser).callonAggEarliestTime2,
						expr: &seqExpr{
							pos: position{line: 3945, col: 20, offset: 119611},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3945, col: 20, offset: 119611},
									val:        "earliest_time",
									ignoreCase: false,
									want:       "\"earliest_time\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3945, col: 36, offset: 119627},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3945, col: 44, offset: 119635},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3945, col: 51, offset: 119642},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3945, col: 59, offset: 119650},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3945, col: 78, offset: 119669},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3945, col: 97, offset: 119688},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3945, col: 105, offset: 119696},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3960, col: 3, offset: 120063},
						run: (*parser).callonAggEarliestTime12,
						expr: &seqExpr{
							pos: position{line: 3960, col: 3, offset: 120063},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3960, col: 3, offset: 120063},
									val:        "earliest_time",
									ignoreCase: false,
									want:       "\"earliest_time\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3960, col: 19, offset: 120079},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3960, col: 27, offset: 120087},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3960, col: 33, offset: 120093},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3960, col: 43, offset: 120103},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggLatest",
			pos:  position{line: 3970, col: 1, offset: 120300},
			expr: &choiceExpr{
				pos: position{line: 3970, col: 14, offset: 120313},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3970, col: 14, offset: 120313},
						run: (*parser).callonAggLatest2,
						expr: &seqExpr{
							pos: position{line: 3970, col: 14, offset: 120313},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3970, col: 14, offset: 120313},
									val:        "latest",
									ignoreCase: false,
									want:       "\"latest\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3970, col: 23, offset: 120322},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3970, col: 31, offset: 120330},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3970, col: 38, offset: 120337},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3970, col: 46, offset: 120345},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3970, col: 65, offset: 120364},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3970, col: 84, offset: 120383},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3970, col: 92, offset: 120391},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3985, col: 3, offset: 120752},
						run: (*parser).callonAggLatest12,
						expr: &seqExpr{
							pos: position{line: 3985, col: 3, offset: 120752},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3985, col: 3, offset: 120752},
									val:        "latest",
									ignoreCase: false,
									want:       "\"latest\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3985, col: 12, offset: 120761},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3985, col: 20, offset: 120769},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3985, col: 26, offset: 120775},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3985, col: 36, offset: 120785},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggLatestTime",
			pos:  position{line: 3995, col: 1, offset: 120976},
			expr: &choiceExpr{
				pos: position{line: 3995, col: 18, offset: 120993},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3995, col: 18, offset: 120993},
						run: (*parser).callonAggLatestTime2,
						expr: &seqExpr{
							pos: position{line: 3995, col: 18, offset: 120993},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3995, col: 18, offset: 120993},
									val:        "latest_time",
									ignoreCase: false,
									want:       "\"latest_time\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3995, col: 32, offset: 121007},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3995, col: 40, offset: 121015},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3995, col: 47, offset: 121022},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3995, col: 55, offset: 121030},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3995, col: 74, offset: 121049},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3995, col: 93, offset: 121068},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3995, col: 101, offset: 121076},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 4010, col: 3, offset: 121441},
						run: (*parser).callonAggLatestTime12,
						expr: &seqExpr{
							pos: position{line: 4010, col: 3, offset: 121441},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4010, col: 3, offset: 121441},
									val:        "latest_time",
									ignoreCase: false,
									want:       "\"latest_time\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4010, col: 17, offset: 121455},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 4010, col: 25, offset: 121463},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 4010, col: 31, offset: 121469},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 4010, col: 41, offset: 121479},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggRate",
			pos:  position{line: 4020, col: 1, offset: 121674},
			expr: &choiceExpr{
				pos: position{line: 4020, col: 12, offset: 121685},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 4020, col: 12, offset: 121685},
						run: (*parser).callonAggRate2,
						expr: &seqExpr{
							pos: position{line: 4020, col: 12, offset: 121685},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4020, col: 12, offset: 121685},
									val:        "rate",
									ignoreCase: false,
									want:       "\"rate\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4020, col: 19, offset: 121692},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 4020, col: 27, offset: 121700},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4020, col: 34, offset: 121707},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 4020, col: 42, offset: 121715},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 4020, col: 61, offset: 121734},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 4020, col: 80, offset: 121753},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 4020, col: 88, offset: 121761},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 4035, col: 3, offset: 122125},
						run: (*parser).callonAggRate12,
						expr: &seqExpr{
							pos: position{line: 4035, col: 3, offset: 122125},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4035, col: 3, offset: 122125},
									val:        "rate",
									ignoreCase: false,
									want:       "\"rate\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4035, col: 10, offset: 122132},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 4035, col: 18, offset: 122140},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 4035, col: 24, offset: 122146},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 4035, col: 34, offset: 122156},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggValues",
			pos:  position{line: 4044, col: 1, offset: 122310},
			expr: &choiceExpr{
				pos: position{line: 4044, col: 14, offset: 122323},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 4044, col: 14, offset: 122323},
						run: (*parser).callonAggValues2,
						expr: &seqExpr{
							pos: position{line: 4044, col: 14, offset: 122323},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4044, col: 14, offset: 122323},
									val:        "values",
									ignoreCase: false,
									want:       "\"values\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4044, col: 23, offset: 122332},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 4044, col: 31, offset: 122340},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 4044, col: 38, offset: 122347},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 4044, col: 48, offset: 122357},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 4044, col: 58, offset: 122367},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 4054, col: 3, offset: 122596},
						run: (*parser).callonAggValues10,
						expr: &seqExpr{
							pos: position{line: 4054, col: 3, offset: 122596},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4054, col: 3, offset: 122596},
									val:        "values",
									ignoreCase: false,
									want:       "\"values\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4054, col: 12, offset: 122605},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 4054, col: 20, offset: 122613},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 4054, col: 26, offset: 122619},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 4054, col: 36, offset: 122629},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldWithNumberValue",
			pos:  position{line: 4063, col: 1, offset: 122780},
			expr: &actionExpr{
				pos: position{line: 4063, col: 25, offset: 122804},
				run: (*parser).callonFieldWithNumberValue1,
				expr: &labeledExpr{
					pos:   position{line: 4063, col: 25, offset: 122804},
					label: "keyValuePair",
					expr: &choiceExpr{
						pos: position{line: 4063, col: 39, offset: 122818},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4063, col: 39, offset: 122818},
								name: "NamedFieldWithNumberValue",
							},
							&ruleRefExpr{
								pos:  position{line: 4063, col: 67, offset: 122846},
								name: "UnnamedFieldWithNumberValue",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedFieldWithNumberValue",
			pos:  position{line: 4067, col: 1, offset: 122909},
			expr: &actionExpr{
				pos: position{line: 4067, col: 30, offset: 122938},
				run: (*parser).callonNamedFieldWithNumberValue1,
				expr: &seqExpr{
					pos: position{line: 4067, col: 30, offset: 122938},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4067, col: 30, offset: 122938},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 4067, col: 34, offset: 122942},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 4067, col: 44, offset: 122952},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 4067, col: 48, offset: 122956},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 4067, col: 48, offset: 122956},
										name: "EqualityOperator",
									},
									&ruleRefExpr{
										pos:  position{line: 4067, col: 67, offset: 122975},
										name: "InequalityOperator",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 4067, col: 87, offset: 122995},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 4067, col: 93, offset: 123001},
								name: "Number",
							},
						},
					},
				},
			},
		},
		{
			name: "UnnamedFieldWithNumberValue",
			pos:  position{line: 4080, col: 1, offset: 123235},
			expr: &actionExpr{
				pos: position{line: 4080, col: 32, offset: 123266},
				run: (*parser).callonUnnamedFieldWithNumberValue1,
				expr: &labeledExpr{
					pos:   position{line: 4080, col: 32, offset: 123266},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 4080, col: 38, offset: 123272},
						name: "Number",
					},
				},
			},
		},
		{
			name: "FieldWithBooleanValue",
			pos:  position{line: 4093, col: 1, offset: 123489},
			expr: &actionExpr{
				pos: position{line: 4093, col: 26, offset: 123514},
				run: (*parser).callonFieldWithBooleanValue1,
				expr: &seqExpr{
					pos: position{line: 4093, col: 26, offset: 123514},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4093, col: 26, offset: 123514},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 4093, col: 30, offset: 123518},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 4093, col: 40, offset: 123528},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 4093, col: 43, offset: 123531},
								name: "EqualityOperator",
							},
						},
						&labeledExpr{
							pos:   position{line: 4093, col: 60, offset: 123548},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 4093, col: 66, offset: 123554},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldWithStringValue",
			pos:  position{line: 4106, col: 1, offset: 123789},
			expr: &actionExpr{
				pos: position{line: 4106, col: 25, offset: 123813},
				run: (*parser).callonFieldWithStringValue1,
				expr: &labeledExpr{
					pos:   position{line: 4106, col: 25, offset: 123813},
					label: "keyValuePair",
					expr: &choiceExpr{
						pos: position{line: 4106, col: 39, offset: 123827},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4106, col: 39, offset: 123827},
								name: "NamedFieldWithStringValue",
							},
							&ruleRefExpr{
								pos:  position{line: 4106, col: 67, offset: 123855},
								name: "UnnamedFieldWithStringValue",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedFieldWithStringValue",
			pos:  position{line: 4110, col: 1, offset: 123918},
			expr: &actionExpr{
				pos: position{line: 4110, col: 30, offset: 123947},
				run: (*parser).callonNamedFieldWithStringValue1,
				expr: &seqExpr{
					pos: position{line: 4110, col: 30, offset: 123947},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4110, col: 30, offset: 123947},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 4110, col: 34, offset: 123951},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 4110, col: 44, offset: 123961},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 4110, col: 47, offset: 123964},
								name: "EqualityOperator",
							},
						},
						&labeledExpr{
							pos:   position{line: 4110, col: 64, offset: 123981},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 4110, col: 70, offset: 123987},
								name: "String",
							},
						},
					},
				},
			},
		},
		{
			name: "UnnamedFieldWithStringValue",
			pos:  position{line: 4122, col: 1, offset: 124220},
			expr: &actionExpr{
				pos: position{line: 4122, col: 32, offset: 124251},
				run: (*parser).callonUnnamedFieldWithStringValue1,
				expr: &labeledExpr{
					pos:   position{line: 4122, col: 32, offset: 124251},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 4122, col: 38, offset: 124257},
						name: "String",
					},
				},
			},
		},
		{
			name: "FieldNameList",
			pos:  position{line: 4136, col: 1, offset: 124588},
			expr: &actionExpr{
				pos: position{line: 4136, col: 18, offset: 124605},
				run: (*parser).callonFieldNameList1,
				expr: &seqExpr{
					pos: position{line: 4136, col: 18, offset: 124605},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4136, col: 18, offset: 124605},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 4136, col: 24, offset: 124611},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 4136, col: 34, offset: 124621},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 4136, col: 39, offset: 124626},
								expr: &seqExpr{
									pos: position{line: 4136, col: 40, offset: 124627},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 4136, col: 40, offset: 124627},
											name: "COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 4136, col: 46, offset: 124633},
											name: "FieldName",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeModifiers",
			pos:  position{line: 4153, col: 1, offset: 125128},
			expr: &choiceExpr{
				pos: position{line: 4153, col: 18, offset: 125145},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 4153, col: 18, offset: 125145},
						name: "EarliestAndLatest",
					},
					&ruleRefExpr{
						pos:  position{line: 4153, col: 38, offset: 125165},
						name: "EarliestOnly",
					},
				},
			},
		},
		{
			name: "EarliestAndLatest",
			pos:  position{line: 4155, col: 1, offset: 125179},
			expr: &actionExpr{
				pos: position{line: 4155, col: 22, offset: 125200},
				run: (*parser).callonEarliestAndLatest1,
				expr: &seqExpr{
					pos: position{line: 4155, col: 22, offset: 125200},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4155, col: 22, offset: 125200},
							name: "CMD_EARLIEST",
						},
						&ruleRefExpr{
							pos:  position{line: 4155, col: 35, offset: 125213},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4155, col: 41, offset: 125219},
							label: "earliestTime",
							expr: &choiceExpr{
								pos: position{line: 4155, col: 55, offset: 125233},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 4155, col: 55, offset: 125233},
										name: "AbsoluteTimestamp",
									},
									&ruleRefExpr{
										pos:  position{line: 4155, col: 75, offset: 125253},
										name: "RelativeTimestamp",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4155, col: 94, offset: 125272},
							name: "SPACE",
						},
						&ruleRefExpr{
							pos:  position{line: 4155, col: 100, offset: 125278},
							name: "CMD_LATEST",
						},
						&ruleRefExpr{
							pos:  position{line: 4155, col: 111, offset: 125289},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4155, col: 117, offset: 125295},
							label: "latestTime",
							expr: &choiceExpr{
								pos: position{line: 4155, col: 129, offset: 125307},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 4155, col: 129, offset: 125307},
										name: "AbsoluteTimestamp",
									},
									&ruleRefExpr{
										pos:  position{line: 4155, col: 149, offset: 125327},
										name: "RelativeTimestamp",
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 4155, col: 168, offset: 125346},
							expr: &anyMatcher{
								line: 4155, col: 169, offset: 125347,
							},
						},
					},
				},
			},
		},
		{
			name: "EarliestOnly",
			pos:  position{line: 4186, col: 1, offset: 126079},
			expr: &actionExpr{
				pos: position{line: 4186, col: 17, offset: 126095},
				run: (*parser).callonEarliestOnly1,
				expr: &seqExpr{
					pos: position{line: 4186, col: 17, offset: 126095},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4186, col: 17, offset: 126095},
							name: "CMD_EARLIEST",
						},
						&ruleRefExpr{
							pos:  position{line: 4186, col: 30, offset: 126108},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4186, col: 36, offset: 126114},
							label: "earliestTime",
							expr: &choiceExpr{
								pos: position{line: 4186, col: 50, offset: 126128},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 4186, col: 50, offset: 126128},
										name: "AbsoluteTimestamp",
									},
									&ruleRefExpr{
										pos:  position{line: 4186, col: 70, offset: 126148},
										name: "RelativeTimestamp",
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 4186, col: 89, offset: 126167},
							expr: &anyMatcher{
								line: 4186, col: 90, offset: 126168,
							},
						},
					},
				},
			},
		},
		{
			name: "RelIntegerAsString",
			pos:  position{line: 4209, col: 1, offset: 126679},
			expr: &actionExpr{
				pos: position{line: 4209, col: 23, offset: 126701},
				run: (*parser).callonRelIntegerAsString1,
				expr: &seqExpr{
					pos: position{line: 4209, col: 23, offset: 126701},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 4209, col: 23, offset: 126701},
							val:        "[-+]",
							chars:      []rune{'-', '+'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 4209, col: 27, offset: 126705},
							expr: &charClassMatcher{
								pos:        position{line: 4209, col: 27, offset: 126705},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "WeekSnap",
			pos:  position{line: 4213, col: 1, offset: 126748},
			expr: &actionExpr{
				pos: position{line: 4213, col: 13, offset: 126760},
				run: (*parser).callonWeekSnap1,
				expr: &seqExpr{
					pos: position{line: 4213, col: 14, offset: 126761},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4213, col: 14, offset: 126761},
							val:        "w",
							ignoreCase: false,
							want:       "\"w\"",
						},
						&charClassMatcher{
							pos:        position{line: 4213, col: 17, offset: 126764},
							val:        "[0-7]",
							ranges:     []rune{'0', '7'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "RelTimeUnit",
			pos:  position{line: 4217, col: 1, offset: 126807},
			expr: &actionExpr{
				pos: position{line: 4217, col: 16, offset: 126822},
				run: (*parser).callonRelTimeUnit1,
				expr: &labeledExpr{
					pos:   position{line: 4217, col: 16, offset: 126822},
					label: "timeUnit",
					expr: &ruleRefExpr{
						pos:  position{line: 4217, col: 26, offset: 126832},
						name: "AllTimeScale",
					},
				},
			},
		},
		{
			name: "Snap",
			pos:  position{line: 4224, col: 1, offset: 127056},
			expr: &actionExpr{
				pos: position{line: 4224, col: 9, offset: 127064},
				run: (*parser).callonSnap1,
				expr: &seqExpr{
					pos: position{line: 4224, col: 9, offset: 127064},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4224, col: 9, offset: 127064},
							val:        "@",
							ignoreCase: false,
							want:       "\"@\"",
						},
						&labeledExpr{
							pos:   position{line: 4224, col: 13, offset: 127068},
							label: "snap",
							expr: &choiceExpr{
								pos: position{line: 4224, col: 19, offset: 127074},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 4224, col: 19, offset: 127074},
										name: "WeekSnap",
									},
									&ruleRefExpr{
										pos:  position{line: 4224, col: 30, offset: 127085},
										name: "RelTimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Offset",
			pos:  position{line: 4228, col: 1, offset: 127133},
			expr: &actionExpr{
				pos: position{line: 4228, col: 11, offset: 127143},
				run: (*parser).callonOffset1,
				expr: &seqExpr{
					pos: position{line: 4228, col: 11, offset: 127143},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4228, col: 11, offset: 127143},
							label: "off",
							expr: &ruleRefExpr{
								pos:  position{line: 4228, col: 16, offset: 127148},
								name: "RelIntegerAsString",
							},
						},
						&labeledExpr{
							pos:   position{line: 4228, col: 36, offset: 127168},
							label: "tuOff",
							expr: &ruleRefExpr{
								pos:  position{line: 4228, col: 43, offset: 127175},
								name: "RelTimeUnit",
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeTimestamp",
			pos:  position{line: 4259, col: 1, offset: 128060},
			expr: &actionExpr{
				pos: position{line: 4259, col: 22, offset: 128081},
				run: (*parser).callonRelativeTimestamp1,
				expr: &seqExpr{
					pos: position{line: 4259, col: 22, offset: 128081},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4259, col: 22, offset: 128081},
							label: "defaultTime",
							expr: &zeroOrOneExpr{
								pos: position{line: 4259, col: 34, offset: 128093},
								expr: &choiceExpr{
									pos: position{line: 4259, col: 35, offset: 128094},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 4259, col: 35, offset: 128094},
											val:        "now",
											ignoreCase: false,
											want:       "\"now\"",
										},
										&litMatcher{
											pos:        position{line: 4259, col: 43, offset: 128102},
											val:        "1",
											ignoreCase: false,
											want:       "\"1\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 4259, col: 49, offset: 128108},
							label: "offset",
							expr: &zeroOrOneExpr{
								pos: position{line: 4259, col: 56, offset: 128115},
								expr: &ruleRefExpr{
									pos:  position{line: 4259, col: 57, offset: 128116},
									name: "Offset",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 4259, col: 66, offset: 128125},
							label: "snapParam",
							expr: &zeroOrOneExpr{
								pos: position{line: 4259, col: 76, offset: 128135},
								expr: &ruleRefExpr{
									pos:  position{line: 4259, col: 77, offset: 128136},
									name: "Snap",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AbsoluteTimestamp",
			pos:  position{line: 4303, col: 1, offset: 129316},
			expr: &actionExpr{
				pos: position{line: 4303, col: 22, offset: 129337},
				run: (*parser).callonAbsoluteTimestamp1,
				expr: &seqExpr{
					pos: position{line: 4303, col: 22, offset: 129337},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 4303, col: 22, offset: 129337},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 4303, col: 27, offset: 129342},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 4303, col: 33, offset: 129348},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&charClassMatcher{
							pos:        position{line: 4303, col: 37, offset: 129352},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 4303, col: 42, offset: 129357},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 4303, col: 48, offset: 129363},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&charClassMatcher{
							pos:        position{line: 4303, col: 52, offset: 129367},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 4303, col: 57, offset: 129372},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 4303, col: 62, offset: 129377},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 4303, col: 67, offset: 129382},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 4303, col: 73, offset: 129388},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&charClassMatcher{
							pos:        position{line: 4303, col: 77, offset: 129392},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 4303, col: 82, offset: 129397},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 4303, col: 88, offset: 129403},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&charClassMatcher{
							pos:        position{line: 4303, col: 92, offset: 129407},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 4303, col: 97, offset: 129412},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 4303, col: 103, offset: 129418},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&charClassMatcher{
							pos:        position{line: 4303, col: 107, offset: 129422},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 4303, col: 112, offset: 129427},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 4313, col: 1, offset: 129823},
			expr: &actionExpr{
				pos: position{line: 4313, col: 14, offset: 129836},
				run: (*parser).callonFieldName1,
				expr: &seqExpr{
					pos: position{line: 4313, col: 14, offset: 129836},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 4313, col: 14, offset: 129836},
							val:        "[a-zA-Z0-9:*]",
							chars:      []rune{':', '*'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 4313, col: 27, offset: 129849},
							expr: &charClassMatcher{
								pos:        position{line: 4313, col: 27, offset: 129849},
								val:        "[a-zA-Z0-9:_.*]",
								chars:      []rune{':', '_', '.', '*'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "FieldNameStartWith_",
			pos:  position{line: 4317, col: 1, offset: 129902},
			expr: &actionExpr{
				pos: position{line: 4317, col: 24, offset: 129925},
				run: (*parser).callonFieldNameStartWith_1,
				expr: &seqExpr{
					pos: position{line: 4317, col: 24, offset: 129925},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 4317, col: 24, offset: 129925},
							val:        "[a-zA-Z0-9:_.*]",
							chars:      []rune{':', '_', '.', '*'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 4317, col: 39, offset: 129940},
							expr: &charClassMatcher{
								pos:        position{line: 4317, col: 39, offset: 129940},
								val:        "[a-zA-Z0-9:_.*]",
								chars:      []rune{':', '_', '.', '*'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "String",
			pos:  position{line: 4321, col: 1, offset: 129993},
			expr: &actionExpr{
				pos: position{line: 4321, col: 11, offset: 130003},
				run: (*parser).callonString1,
				expr: &labeledExpr{
					pos:   position{line: 4321, col: 11, offset: 130003},
					label: "str",
					expr: &choiceExpr{
						pos: position{line: 4321, col: 16, offset: 130008},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4321, col: 16, offset: 130008},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 4321, col: 31, offset: 130023},
								name: "UnquotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 4325, col: 1, offset: 130064},
			expr: &actionExpr{
				pos: position{line: 4325, col: 17, offset: 130080},
				run: (*parser).callonQuotedString1,
				expr: &seqExpr{
					pos: position{line: 4325, col: 17, offset: 130080},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4325, col: 17, offset: 130080},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 4325, col: 21, offset: 130084},
							expr: &charClassMatcher{
								pos:        position{line: 4325, col: 21, offset: 130084},
								val:        "[^\"]",
								chars:      []rune{'"'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 4325, col: 27, offset: 130090},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UnquotedString",
			pos:  position{line: 4330, col: 1, offset: 130201},
			expr: &actionExpr{
				pos: position{line: 4330, col: 19, offset: 130219},
				run: (*parser).callonUnquotedString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 4330, col: 19, offset: 130219},
					expr: &choiceExpr{
						pos: position{line: 4330, col: 20, offset: 130220},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 4330, col: 20, offset: 130220},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&seqExpr{
								pos: position{line: 4330, col: 27, offset: 130227},
								exprs: []any{
									&notExpr{
										pos: position{line: 4330, col: 27, offset: 130227},
										expr: &choiceExpr{
											pos: position{line: 4330, col: 29, offset: 130229},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 4330, col: 29, offset: 130229},
													name: "MAJOR_BREAK",
												},
												&litMatcher{
													pos:        position{line: 4330, col: 43, offset: 130243},
													val:        "|",
													ignoreCase: false,
													want:       "\"|\"",
												},
												&ruleRefExpr{
													pos:  position{line: 4330, col: 49, offset: 130249},
													name: "EOF",
												},
											},
										},
									},
									&anyMatcher{
										line: 4330, col: 54, offset: 130254,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AllowedChar",
			pos:  position{line: 4337, col: 1, offset: 130369},
			expr: &choiceExpr{
				pos: position{line: 4337, col: 16, offset: 130384},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 4337, col: 16, offset: 130384},
						val:        "[a-zA-Z0-9:_{}@.]",
						chars:      []rune{':', '_', '{', '}', '@', '.'},
						ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&seqExpr{
						pos: position{line: 4337, col: 37, offset: 130405},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 4337, col: 37, offset: 130405},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 4337, col: 41, offset: 130409},
								expr: &charClassMatcher{
									pos:        position{line: 4337, col: 41, offset: 130409},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&litMatcher{
								pos:        position{line: 4337, col: 48, offset: 130416},
								val:        "}",
								ignoreCase: false,
								want:       "\"}\"",
							},
						},
					},
				},
			},
		},
		{
			name: "UnquotedStringWithTemplateWildCard",
			pos:  position{line: 4339, col: 1, offset: 130422},
			expr: &actionExpr{
				pos: position{line: 4339, col: 39, offset: 130460},
				run: (*parser).callonUnquotedStringWithTemplateWildCard1,
				expr: &oneOrMoreExpr{
					pos: position{line: 4339, col: 39, offset: 130460},
					expr: &choiceExpr{
						pos: position{line: 4339, col: 40, offset: 130461},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4339, col: 40, offset: 130461},
								name: "AllowedChar",
							},
							&seqExpr{
								pos: position{line: 4339, col: 54, offset: 130475},
								exprs: []any{
									&notExpr{
										pos: position{line: 4339, col: 54, offset: 130475},
										expr: &choiceExpr{
											pos: position{line: 4339, col: 56, offset: 130477},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 4339, col: 56, offset: 130477},
													name: "MAJOR_BREAK",
												},
												&litMatcher{
													pos:        position{line: 4339, col: 70, offset: 130491},
													val:        "|",
													ignoreCase: false,
													want:       "\"|\"",
												},
												&ruleRefExpr{
													pos:  position{line: 4339, col: 76, offset: 130497},
													name: "EOF",
												},
											},
										},
									},
									&anyMatcher{
										line: 4339, col: 81, offset: 130502,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Boolean",
			pos:  position{line: 4343, col: 1, offset: 130542},
			expr: &actionExpr{
				pos: position{line: 4343, col: 12, offset: 130553},
				run: (*parser).callonBoolean1,
				expr: &choiceExpr{
					pos: position{line: 4343, col: 13, offset: 130554},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4343, col: 13, offset: 130554},
							val:        "true",
							ignoreCase: false,
							want:       "\"true\"",
						},
						&litMatcher{
							pos:        position{line: 4343, col: 22, offset: 130563},
							val:        "false",
							ignoreCase: false,
							want:       "\"false\"",
						},
					},
				},
			},
		},
		{
			name: "RenamePattern",
			pos:  position{line: 4349, col: 1, offset: 130717},
			expr: &actionExpr{
				pos: position{line: 4349, col: 18, offset: 130734},
				run: (*parser).callonRenamePattern1,
				expr: &oneOrMoreExpr{
					pos: position{line: 4349, col: 18, offset: 130734},
					expr: &charClassMatcher{
						pos:        position{line: 4349, col: 18, offset: 130734},
						val:        "[a-zA-Z0-9_*]",
						chars:      []rune{'_', '*'},
						ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 4353, col: 1, offset: 130785},
			expr: &actionExpr{
				pos: position{line: 4353, col: 11, offset: 130795},
				run: (*parser).callonNumber1,
				expr: &labeledExpr{
					pos:   position{line: 4353, col: 11, offset: 130795},
					label: "number",
					expr: &ruleRefExpr{
						pos:  position{line: 4353, col: 18, offset: 130802},
						name: "NumberAsString",
					},
				},
			},
		},
		{
			name: "NumberAsString",
			pos:  position{line: 4359, col: 1, offset: 130991},
			expr: &actionExpr{
				pos: position{line: 4359, col: 19, offset: 131009},
				run: (*parser).callonNumberAsString1,
				expr: &seqExpr{
					pos: position{line: 4359, col: 19, offset: 131009},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4359, col: 19, offset: 131009},
							label: "number",
							expr: &choiceExpr{
								pos: position{line: 4359, col: 27, offset: 131017},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 4359, col: 27, offset: 131017},
										name: "FloatAsString",
									},
									&ruleRefExpr{
										pos:  position{line: 4359, col: 43, offset: 131033},
										name: "IntegerAsString",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 4359, col: 60, offset: 131050},
							expr: &choiceExpr{
								pos: position{line: 4359, col: 62, offset: 131052},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 4359, col: 62, offset: 131052},
										name: "SPACE",
									},
									&litMatcher{
										pos:        position{line: 4359, col: 70, offset: 131060},
										val:        "|",
										ignoreCase: false,
										want:       "\"|\"",
									},
									&litMatcher{
										pos:        position{line: 4359, col: 76, offset: 131066},
										val:        ")",
										ignoreCase: false,
										want:       "\")\"",
									},
									&litMatcher{
										pos:        position{line: 4359, col: 82, offset: 131072},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&ruleRefExpr{
										pos:  position{line: 4359, col: 88, offset: 131078},
										name: "EOF",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FloatAsString",
			pos:  position{line: 4365, col: 1, offset: 131207},
			expr: &actionExpr{
				pos: position{line: 4365, col: 18, offset: 131224},
				run: (*parser).callonFloatAsString1,
				expr: &seqExpr{
					pos: position{line: 4365, col: 18, offset: 131224},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 4365, col: 18, offset: 131224},
							expr: &charClassMatcher{
								pos:        position{line: 4365, col: 18, offset: 131224},
								val:        "[-+]",
								chars:      []rune{'-', '+'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 4365, col: 24, offset: 131230},
							expr: &charClassMatcher{
								pos:        position{line: 4365, col: 24, offset: 131230},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 4365, col: 31, offset: 131237},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 4365, col: 35, offset: 131241},
							expr: &charClassMatcher{
								pos:        position{line: 4365, col: 35, offset: 131241},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "IntegerAsString",
			pos:  position{line: 4370, col: 1, offset: 131336},
			expr: &actionExpr{
				pos: position{line: 4370, col: 20, offset: 131355},
				run: (*parser).callonIntegerAsString1,
				expr: &seqExpr{
					pos: position{line: 4370, col: 20, offset: 131355},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 4370, col: 20, offset: 131355},
							expr: &charClassMatcher{
								pos:        position{line: 4370, col: 20, offset: 131355},
								val:        "[-+]",
								chars:      []rune{'-', '+'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 4370, col: 26, offset: 131361},
							expr: &charClassMatcher{
								pos:        position{line: 4370, col: 26, offset: 131361},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PositiveIntegerAsString",
			pos:  position{line: 4374, col: 1, offset: 131404},
			expr: &actionExpr{
				pos: position{line: 4374, col: 28, offset: 131431},
				run: (*parser).callonPositiveIntegerAsString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 4374, col: 28, offset: 131431},
					expr: &charClassMatcher{
						pos:        position{line: 4374, col: 28, offset: 131431},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 4378, col: 1, offset: 131474},
			expr: &actionExpr{
				pos: position{line: 4378, col: 21, offset: 131494},
				run: (*parser).callonEqualityOperator1,
				expr: &seqExpr{
					pos: position{line: 4378, col: 21, offset: 131494},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4378, col: 21, offset: 131494},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4378, col: 36, offset: 131509},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 4378, col: 40, offset: 131513},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 4378, col: 40, offset: 131513},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
									&litMatcher{
										pos:        position{line: 4378, col: 46, offset: 131519},
										val:        "!=",
										ignoreCase: false,
										want:       "\"!=\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4378, col: 52, offset: 131525},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "InequalityOperator",
			pos:  position{line: 4386, col: 1, offset: 131706},
			expr: &actionExpr{
				pos: position{line: 4386, col: 23, offset: 131728},
				run: (*parser).callonInequalityOperator1,
				expr: &seqExpr{
					pos: position{line: 4386, col: 23, offset: 131728},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4386, col: 23, offset: 131728},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4386, col: 38, offset: 131743},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 4386, col: 42, offset: 131747},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 4386, col: 42, offset: 131747},
										val:        "<=",
										ignoreCase: false,
										want:       "\"<=\"",
									},
									&litMatcher{
										pos:        position{line: 4386, col: 49, offset: 131754},
										val:        "<",
										ignoreCase: false,
										want:       "\"<\"",
									},
									&litMatcher{
										pos:        position{line: 4386, col: 55, offset: 131760},
										val:        ">=",
										ignoreCase: false,
										want:       "\">=\"",
									},
									&litMatcher{
										pos:        position{line: 4386, col: 62, offset: 131767},
										val:        ">",
										ignoreCase: false,
										want:       "\">\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4386, col: 67, offset: 131772},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "EqualityOrInequality",
			pos:  position{line: 4394, col: 1, offset: 131955},
			expr: &choiceExpr{
				pos: position{line: 4394, col: 25, offset: 131979},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 4394, col: 25, offset: 131979},
						run: (*parser).callonEqualityOrInequality2,
						expr: &labeledExpr{
							pos:   position{line: 4394, col: 25, offset: 131979},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 4394, col: 28, offset: 131982},
								name: "EqualityOperator",
							},
						},
					},
					&actionExpr{
						pos: position{line: 4397, col: 3, offset: 132024},
						run: (*parser).callonEqualityOrInequality5,
						expr: &labeledExpr{
							pos:   position{line: 4397, col: 3, offset: 132024},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 4397, col: 6, offset: 132027},
								name: "InequalityOperator",
							},
						},
					},
				},
			},
		},
		{
			name: "OpPlus",
			pos:  position{line: 4401, col: 1, offset: 132070},
			expr: &actionExpr{
				pos: position{line: 4401, col: 11, offset: 132080},
				run: (*parser).callonOpPlus1,
				expr: &seqExpr{
					pos: position{line: 4401, col: 11, offset: 132080},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4401, col: 11, offset: 132080},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 4401, col: 26, offset: 132095},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4401, col: 30, offset: 132099},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpMinus",
			pos:  position{line: 4405, col: 1, offset: 132139},
			expr: &actionExpr{
				pos: position{line: 4405, col: 12, offset: 132150},
				run: (*parser).callonOpMinus1,
				expr: &seqExpr{
					pos: position{line: 4405, col: 12, offset: 132150},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4405, col: 12, offset: 132150},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 4405, col: 27, offset: 132165},
							val:        "-",
							ignoreCase: false,
							want:       "\"-\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4405, col: 31, offset: 132169},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpMul",
			pos:  position{line: 4409, col: 1, offset: 132209},
			expr: &actionExpr{
				pos: position{line: 4409, col: 10, offset: 132218},
				run: (*parser).callonOpMul1,
				expr: &seqExpr{
					pos: position{line: 4409, col: 10, offset: 132218},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4409, col: 10, offset: 132218},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 4409, col: 25, offset: 132233},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4409, col: 29, offset: 132237},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpDiv",
			pos:  position{line: 4413, col: 1, offset: 132277},
			expr: &actionExpr{
				pos: position{line: 4413, col: 10, offset: 132286},
				run: (*parser).callonOpDiv1,
				expr: &seqExpr{
					pos: position{line: 4413, col: 10, offset: 132286},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4413, col: 10, offset: 132286},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 4413, col: 25, offset: 132301},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4413, col: 29, offset: 132305},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "Second",
			pos:  position{line: 4418, col: 1, offset: 132369},
			expr: &actionExpr{
				pos: position{line: 4418, col: 11, offset: 132379},
				run: (*parser).callonSecond1,
				expr: &choiceExpr{
					pos: position{line: 4418, col: 12, offset: 132380},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4418, col: 12, offset: 132380},
							val:        "seconds",
							ignoreCase: false,
							want:       "\"seconds\"",
						},
						&litMatcher{
							pos:        position{line: 4418, col: 24, offset: 132392},
							val:        "second",
							ignoreCase: false,
							want:       "\"second\"",
						},
						&litMatcher{
							pos:        position{line: 4418, col: 35, offset: 132403},
							val:        "secs",
							ignoreCase: false,
							want:       "\"secs\"",
						},
						&litMatcher{
							pos:        position{line: 4418, col: 44, offset: 132412},
							val:        "sec",
							ignoreCase: false,
							want:       "\"sec\"",
						},
						&litMatcher{
							pos:        position{line: 4418, col: 52, offset: 132420},
							val:        "s",
							ignoreCase: false,
							want:       "\"s\"",
						},
					},
				},
			},
		},
		{
			name: "Minute",
			pos:  position{line: 4422, col: 1, offset: 132461},
			expr: &actionExpr{
				pos: position{line: 4422, col: 11, offset: 132471},
				run: (*parser).callonMinute1,
				expr: &choiceExpr{
					pos: position{line: 4422, col: 12, offset: 132472},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4422, col: 12, offset: 132472},
							val:        "minutes",
							ignoreCase: false,
							want:       "\"minutes\"",
						},
						&litMatcher{
							pos:        position{line: 4422, col: 24, offset: 132484},
							val:        "minute",
							ignoreCase: false,
							want:       "\"minute\"",
						},
						&litMatcher{
							pos:        position{line: 4422, col: 35, offset: 132495},
							val:        "mins",
							ignoreCase: false,
							want:       "\"mins\"",
						},
						&litMatcher{
							pos:        position{line: 4422, col: 44, offset: 132504},
							val:        "min",
							ignoreCase: false,
							want:       "\"min\"",
						},
						&litMatcher{
							pos:        position{line: 4422, col: 52, offset: 132512},
							val:        "m",
							ignoreCase: false,
							want:       "\"m\"",
						},
					},
				},
			},
		},
		{
			name: "Hour",
			pos:  position{line: 4426, col: 1, offset: 132553},
			expr: &actionExpr{
				pos: position{line: 4426, col: 9, offset: 132561},
				run: (*parser).callonHour1,
				expr: &choiceExpr{
					pos: position{line: 4426, col: 10, offset: 132562},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4426, col: 10, offset: 132562},
							val:        "hours",
							ignoreCase: false,
							want:       "\"hours\"",
						},
						&litMatcher{
							pos:        position{line: 4426, col: 20, offset: 132572},
							val:        "hour",
							ignoreCase: false,
							want:       "\"hour\"",
						},
						&litMatcher{
							pos:        position{line: 4426, col: 29, offset: 132581},
							val:        "hrs",
							ignoreCase: false,
							want:       "\"hrs\"",
						},
						&litMatcher{
							pos:        position{line: 4426, col: 37, offset: 132589},
							val:        "hr",
							ignoreCase: false,
							want:       "\"hr\"",
						},
						&litMatcher{
							pos:        position{line: 4426, col: 44, offset: 132596},
							val:        "h",
							ignoreCase: false,
							want:       "\"h\"",
						},
					},
				},
			},
		},
		{
			name: "Day",
			pos:  position{line: 4430, col: 1, offset: 132635},
			expr: &actionExpr{
				pos: position{line: 4430, col: 8, offset: 132642},
				run: (*parser).callonDay1,
				expr: &choiceExpr{
					pos: position{line: 4430, col: 9, offset: 132643},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4430, col: 9, offset: 132643},
							val:        "days",
							ignoreCase: false,
							want:       "\"days\"",
						},
						&litMatcher{
							pos:        position{line: 4430, col: 18, offset: 132652},
							val:        "day",
							ignoreCase: false,
							want:       "\"day\"",
						},
						&litMatcher{
							pos:        position{line: 4430, col: 26, offset: 132660},
							val:        "d",
							ignoreCase: false,
							want:       "\"d\"",
						},
					},
				},
			},
		},
		{
			name: "Week",
			pos:  position{line: 4434, col: 1, offset: 132698},
			expr: &actionExpr{
				pos: position{line: 4434, col: 9, offset: 132706},
				run: (*parser).callonWeek1,
				expr: &choiceExpr{
					pos: position{line: 4434, col: 10, offset: 132707},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4434, col: 10, offset: 132707},
							val:        "weeks",
							ignoreCase: false,
							want:       "\"weeks\"",
						},
						&litMatcher{
							pos:        position{line: 4434, col: 20, offset: 132717},
							val:        "week",
							ignoreCase: false,
							want:       "\"week\"",
						},
						&litMatcher{
							pos:        position{line: 4434, col: 29, offset: 132726},
							val:        "w",
							ignoreCase: false,
							want:       "\"w\"",
						},
					},
				},
			},
		},
		{
			name: "Month",
			pos:  position{line: 4438, col: 1, offset: 132765},
			expr: &actionExpr{
				pos: position{line: 4438, col: 10, offset: 132774},
				run: (*parser).callonMonth1,
				expr: &choiceExpr{
					pos: position{line: 4438, col: 11, offset: 132775},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4438, col: 11, offset: 132775},
							val:        "months",
							ignoreCase: false,
							want:       "\"months\"",
						},
						&litMatcher{
							pos:        position{line: 4438, col: 22, offset: 132786},
							val:        "month",
							ignoreCase: false,
							want:       "\"month\"",
						},
						&litMatcher{
							pos:        position{line: 4438, col: 32, offset: 132796},
							val:        "mon",
							ignoreCase: false,
							want:       "\"mon\"",
						},
					},
				},
			},
		},
		{
			name: "Quarter",
			pos:  position{line: 4442, col: 1, offset: 132838},
			expr: &actionExpr{
				pos: position{line: 4442, col: 12, offset: 132849},
				run: (*parser).callonQuarter1,
				expr: &choiceExpr{
					pos: position{line: 4442, col: 13, offset: 132850},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4442, col: 13, offset: 132850},
							val:        "quarters",
							ignoreCase: false,
							want:       "\"quarters\"",
						},
						&litMatcher{
							pos:        position{line: 4442, col: 26, offset: 132863},
							val:        "quarter",
							ignoreCase: false,
							want:       "\"quarter\"",
						},
						&litMatcher{
							pos:        position{line: 4442, col: 38, offset: 132875},
							val:        "qtrs",
							ignoreCase: false,
							want:       "\"qtrs\"",
						},
						&litMatcher{
							pos:        position{line: 4442, col: 47, offset: 132884},
							val:        "qtr",
							ignoreCase: false,
							want:       "\"qtr\"",
						},
						&litMatcher{
							pos:        position{line: 4442, col: 55, offset: 132892},
							val:        "q",
							ignoreCase: false,
							want:       "\"q\"",
						},
					},
				},
			},
		},
		{
			name: "Year",
			pos:  position{line: 4446, col: 1, offset: 132934},
			expr: &actionExpr{
				pos: position{line: 4446, col: 9, offset: 132942},
				run: (*parser).callonYear1,
				expr: &choiceExpr{
					pos: position{line: 4446, col: 10, offset: 132943},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4446, col: 10, offset: 132943},
							val:        "years",
							ignoreCase: false,
							want:       "\"years\"",
						},
						&litMatcher{
							pos:        position{line: 4446, col: 20, offset: 132953},
							val:        "year",
							ignoreCase: false,
							want:       "\"year\"",
						},
						&litMatcher{
							pos:        position{line: 4446, col: 29, offset: 132962},
							val:        "yrs",
							ignoreCase: false,
							want:       "\"yrs\"",
						},
						&litMatcher{
							pos:        position{line: 4446, col: 37, offset: 132970},
							val:        "yr",
							ignoreCase: false,
							want:       "\"yr\"",
						},
						&litMatcher{
							pos:        position{line: 4446, col: 44, offset: 132977},
							val:        "y",
							ignoreCase: false,
							want:       "\"y\"",
						},
					},
				},
			},
		},
		{
			name: "Subseconds",
			pos:  position{line: 4451, col: 1, offset: 133108},
			expr: &actionExpr{
				pos: position{line: 4451, col: 15, offset: 133122},
				run: (*parser).callonSubseconds1,
				expr: &choiceExpr{
					pos: position{line: 4451, col: 16, offset: 133123},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4451, col: 16, offset: 133123},
							val:        "us",
							ignoreCase: false,
							want:       "\"us\"",
						},
						&litMatcher{
							pos:        position{line: 4451, col: 23, offset: 133130},
							val:        "ms",
							ignoreCase: false,
							want:       "\"ms\"",
						},
						&litMatcher{
							pos:        position{line: 4451, col: 30, offset: 133137},
							val:        "cs",
							ignoreCase: false,
							want:       "\"cs\"",
						},
						&litMatcher{
							pos:        position{line: 4451, col: 37, offset: 133144},
							val:        "ds",
							ignoreCase: false,
							want:       "\"ds\"",
						},
					},
				},
			},
		},
		{
			name: "TransactionBlock",
			pos:  position{line: 4460, col: 1, offset: 133367},
			expr: &actionExpr{
				pos: position{line: 4460, col: 21, offset: 133387},
				run: (*parser).callonTransactionBlock1,
				expr: &seqExpr{
					pos: position{line: 4460, col: 21, offset: 133387},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4460, col: 21, offset: 133387},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 4460, col: 26, offset: 133392},
							name: "CMD_TRANSACTION",
						},
						&labeledExpr{
							pos:   position{line: 4460, col: 42, offset: 133408},
							label: "txnOptions",
							expr: &ruleRefExpr{
								pos:  position{line: 4460, col: 53, offset: 133419},
								name: "TransactionOptions",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionOptions",
			pos:  position{line: 4469, col: 1, offset: 133725},
			expr: &actionExpr{
				pos: position{line: 4469, col: 23, offset: 133747},
				run: (*parser).callonTransactionOptions1,
				expr: &labeledExpr{
					pos:   position{line: 4469, col: 23, offset: 133747},
					label: "txnOptions",
					expr: &zeroOrOneExpr{
						pos: position{line: 4469, col: 34, offset: 133758},
						expr: &ruleRefExpr{
							pos:  position{line: 4469, col: 34, offset: 133758},
							name: "TransactionDefinitionOptionsList",
						},
					},
				},
			},
		},
		{
			name: "TransactionDefinitionOptionsList",
			pos:  position{line: 4484, col: 1, offset: 134149},
			expr: &actionExpr{
				pos: position{line: 4484, col: 37, offset: 134185},
				run: (*parser).callonTransactionDefinitionOptionsList1,
				expr: &seqExpr{
					pos: position{line: 4484, col: 37, offset: 134185},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4484, col: 37, offset: 134185},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 4484, col: 43, offset: 134191},
								name: "TransactionDefinitionOption",
							},
						},
						&labeledExpr{
							pos:   position{line: 4484, col: 71, offset: 134219},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 4484, col: 76, offset: 134224},
								expr: &seqExpr{
									pos: position{line: 4484, col: 77, offset: 134225},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 4484, col: 77, offset: 134225},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 4484, col: 83, offset: 134231},
											name: "TransactionDefinitionOption",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionDefinitionOption",
			pos:  position{line: 4519, col: 1, offset: 135220},
			expr: &actionExpr{
				pos: position{line: 4519, col: 32, offset: 135251},
				run: (*parser).callonTransactionDefinitionOption1,
				expr: &labeledExpr{
					pos:   position{line: 4519, col: 32, offset: 135251},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 4519, col: 40, offset: 135259},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4519, col: 40, offset: 135259},
								name: "TransactionSpaceSeparatedFieldList",
							},
							&ruleRefExpr{
								pos:  position{line: 4519, col: 77, offset: 135296},
								name: "StartsWithOption",
							},
							&ruleRefExpr{
								pos:  position{line: 4519, col: 96, offset: 135315},
								name: "EndsWithOption",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionSpaceSeparatedFieldList",
			pos:  position{line: 4523, col: 1, offset: 135359},
			expr: &actionExpr{
				pos: position{line: 4523, col: 39, offset: 135397},
				run: (*parser).callonTransactionSpaceSeparatedFieldList1,
				expr: &labeledExpr{
					pos:   position{line: 4523, col: 39, offset: 135397},
					label: "fields",
					expr: &ruleRefExpr{
						pos:  position{line: 4523, col: 46, offset: 135404},
						name: "SpaceSeparatedFieldNameList",
					},
				},
			},
		},
		{
			name: "StartsWithOption",
			pos:  position{line: 4534, col: 1, offset: 135620},
			expr: &actionExpr{
				pos: position{line: 4534, col: 21, offset: 135640},
				run: (*parser).callonStartsWithOption1,
				expr: &seqExpr{
					pos: position{line: 4534, col: 21, offset: 135640},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4534, col: 21, offset: 135640},
							val:        "startswith",
							ignoreCase: false,
							want:       "\"startswith\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4534, col: 34, offset: 135653},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4534, col: 40, offset: 135659},
							label: "strExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 4534, col: 48, offset: 135667},
								name: "TransactionFilterString",
							},
						},
					},
				},
			},
		},
		{
			name: "EndsWithOption",
			pos:  position{line: 4544, col: 1, offset: 135905},
			expr: &actionExpr{
				pos: position{line: 4544, col: 19, offset: 135923},
				run: (*parser).callonEndsWithOption1,
				expr: &seqExpr{
					pos: position{line: 4544, col: 19, offset: 135923},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4544, col: 19, offset: 135923},
							val:        "endswith",
							ignoreCase: false,
							want:       "\"endswith\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4544, col: 30, offset: 135934},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4544, col: 36, offset: 135940},
							label: "strExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 4544, col: 44, offset: 135948},
								name: "TransactionFilterString",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionFilterString",
			pos:  position{line: 4555, col: 1, offset: 136217},
			expr: &actionExpr{
				pos: position{line: 4555, col: 28, offset: 136244},
				run: (*parser).callonTransactionFilterString1,
				expr: &labeledExpr{
					pos:   position{line: 4555, col: 28, offset: 136244},
					label: "strExpr",
					expr: &choiceExpr{
						pos: position{line: 4555, col: 37, offset: 136253},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4555, col: 37, offset: 136253},
								name: "TransactionQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 4555, col: 63, offset: 136279},
								name: "TransactionEval",
							},
							&ruleRefExpr{
								pos:  position{line: 4555, col: 81, offset: 136297},
								name: "TransactionSearch",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionQuotedString",
			pos:  position{line: 4559, col: 1, offset: 136345},
			expr: &actionExpr{
				pos: position{line: 4559, col: 28, offset: 136372},
				run: (*parser).callonTransactionQuotedString1,
				expr: &labeledExpr{
					pos:   position{line: 4559, col: 28, offset: 136372},
					label: "str",
					expr: &choiceExpr{
						pos: position{line: 4559, col: 33, offset: 136377},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4559, col: 33, offset: 136377},
								name: "TransactionQuotedStringValue",
							},
							&ruleRefExpr{
								pos:  position{line: 4559, col: 64, offset: 136408},
								name: "TransactionQuotedStringSearchExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionQuotedStringSearchExpr",
			pos:  position{line: 4563, col: 1, offset: 136468},
			expr: &actionExpr{
				pos: position{line: 4563, col: 38, offset: 136505},
				run: (*parser).callonTransactionQuotedStringSearchExpr1,
				expr: &seqExpr{
					pos: position{line: 4563, col: 38, offset: 136505},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4563, col: 38, offset: 136505},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 4563, col: 42, offset: 136509},
							label: "searchClause",
							expr: &ruleRefExpr{
								pos:  position{line: 4563, col: 55, offset: 136522},
								name: "ClauseLevel4",
							},
						},
						&litMatcher{
							pos:        position{line: 4563, col: 68, offset: 136535},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedStringNoOp",
			pos:  position{line: 4571, col: 1, offset: 136674},
			expr: &actionExpr{
				pos: position{line: 4571, col: 21, offset: 136694},
				run: (*parser).callonQuotedStringNoOp1,
				expr: &seqExpr{
					pos: position{line: 4571, col: 21, offset: 136694},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4571, col: 21, offset: 136694},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 4571, col: 25, offset: 136698},
							expr: &charClassMatcher{
								pos:        position{line: 4571, col: 25, offset: 136698},
								val:        "[^\" !(OR / AND)]",
								chars:      []rune{'"', ' ', '!', '(', 'O', 'R', ' ', '/', ' ', 'A', 'N', 'D', ')'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 4571, col: 44, offset: 136717},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "TransactionQuotedStringValue",
			pos:  position{line: 4576, col: 1, offset: 136828},
			expr: &actionExpr{
				pos: position{line: 4576, col: 33, offset: 136860},
				run: (*parser).callonTransactionQuotedStringValue1,
				expr: &labeledExpr{
					pos:   position{line: 4576, col: 33, offset: 136860},
					label: "str",
					expr: &ruleRefExpr{
						pos:  position{line: 4576, col: 37, offset: 136864},
						name: "QuotedStringNoOp",
					},
				},
			},
		},
		{
			name: "TransactionSearch",
			pos:  position{line: 4584, col: 1, offset: 137019},
			expr: &actionExpr{
				pos: position{line: 4584, col: 22, offset: 137040},
				run: (*parser).callonTransactionSearch1,
				expr: &labeledExpr{
					pos:   position{line: 4584, col: 22, offset: 137040},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 4584, col: 27, offset: 137045},
						name: "ClauseLevel1",
					},
				},
			},
		},
		{
			name: "TransactionEval",
			pos:  position{line: 4594, col: 1, offset: 137217},
			expr: &actionExpr{
				pos: position{line: 4594, col: 20, offset: 137236},
				run: (*parser).callonTransactionEval1,
				expr: &seqExpr{
					pos: position{line: 4594, col: 20, offset: 137236},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4594, col: 20, offset: 137236},
							val:        "eval",
							ignoreCase: false,
							want:       "\"eval\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4594, col: 27, offset: 137243},
							name: "EMPTY_OR_SPACE",
						},
						&ruleRefExpr{
							pos:  position{line: 4594, col: 42, offset: 137258},
							name: "L_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 4594, col: 50, offset: 137266},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 4594, col: 60, offset: 137276},
								name: "BoolExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4594, col: 69, offset: 137285},
							name: "R_PAREN",
						},
					},
				},
			},
		},
		{
			name: "MultiValueBlock",
			pos:  position{line: 4604, col: 1, offset: 137588},
			expr: &actionExpr{
				pos: position{line: 4604, col: 20, offset: 137607},
				run: (*parser).callonMultiValueBlock1,
				expr: &seqExpr{
					pos: position{line: 4604, col: 20, offset: 137607},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4604, col: 20, offset: 137607},
							name: "PIPE",
						},
						&labeledExpr{
							pos:   position{line: 4604, col: 25, offset: 137612},
							label: "mvQueryAggNode",
							expr: &ruleRefExpr{
								pos:  position{line: 4604, col: 42, offset: 137629},
								name: "MakeMVBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "MakeMVBlock",
			pos:  position{line: 4608, col: 1, offset: 137678},
			expr: &actionExpr{
				pos: position{line: 4608, col: 16, offset: 137693},
				run: (*parser).callonMakeMVBlock1,
				expr: &seqExpr{
					pos: position{line: 4608, col: 16, offset: 137693},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4608, col: 16, offset: 137693},
							name: "CMD_MAKEMV",
						},
						&ruleRefExpr{
							pos:  position{line: 4608, col: 27, offset: 137704},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4608, col: 33, offset: 137710},
							label: "mvColOptionExpr",
							expr: &zeroOrOneExpr{
								pos: position{line: 4608, col: 50, offset: 137727},
								expr: &ruleRefExpr{
									pos:  position{line: 4608, col: 50, offset: 137727},
									name: "MVBlockOptionsList",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4608, col: 70, offset: 137747},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4608, col: 85, offset: 137762},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 4608, col: 91, offset: 137768},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "MVBlockOptionsList",
			pos:  position{line: 4636, col: 1, offset: 138508},
			expr: &actionExpr{
				pos: position{line: 4636, col: 23, offset: 138530},
				run: (*parser).callonMVBlockOptionsList1,
				expr: &seqExpr{
					pos: position{line: 4636, col: 23, offset: 138530},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4636, col: 23, offset: 138530},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 4636, col: 31, offset: 138538},
								name: "MVBlockOption",
							},
						},
						&labeledExpr{
							pos:   position{line: 4636, col: 46, offset: 138553},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 4636, col: 52, offset: 138559},
								expr: &seqExpr{
									pos: position{line: 4636, col: 53, offset: 138560},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 4636, col: 53, offset: 138560},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 4636, col: 59, offset: 138566},
											name: "MVBlockOption",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MVBlockOption",
			pos:  position{line: 4670, col: 1, offset: 139622},
			expr: &actionExpr{
				pos: position{line: 4670, col: 18, offset: 139639},
				run: (*parser).callonMVBlockOption1,
				expr: &labeledExpr{
					pos:   position{line: 4670, col: 18, offset: 139639},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 4670, col: 27, offset: 139648},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4670, col: 27, offset: 139648},
								name: "DelimOption",
							},
							&ruleRefExpr{
								pos:  position{line: 4670, col: 41, offset: 139662},
								name: "AllowEmptyOption",
							},
							&ruleRefExpr{
								pos:  position{line: 4670, col: 60, offset: 139681},
								name: "SetSvOption",
							},
						},
					},
				},
			},
		},
		{
			name: "DelimOption",
			pos:  position{line: 4674, col: 1, offset: 139722},
			expr: &actionExpr{
				pos: position{line: 4674, col: 16, offset: 139737},
				run: (*parser).callonDelimOption1,
				expr: &labeledExpr{
					pos:   position{line: 4674, col: 16, offset: 139737},
					label: "delimExpr",
					expr: &choiceExpr{
						pos: position{line: 4674, col: 28, offset: 139749},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4674, col: 28, offset: 139749},
								name: "StringDelimiter",
							},
							&ruleRefExpr{
								pos:  position{line: 4674, col: 46, offset: 139767},
								name: "RegexDelimiter",
							},
						},
					},
				},
			},
		},
		{
			name: "StringDelimiter",
			pos:  position{line: 4678, col: 1, offset: 139814},
			expr: &actionExpr{
				pos: position{line: 4678, col: 20, offset: 139833},
				run: (*parser).callonStringDelimiter1,
				expr: &seqExpr{
					pos: position{line: 4678, col: 20, offset: 139833},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4678, col: 20, offset: 139833},
							val:        "delim",
							ignoreCase: false,
							want:       "\"delim\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4678, col: 28, offset: 139841},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4678, col: 34, offset: 139847},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 4678, col: 38, offset: 139851},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexDelimiter",
			pos:  position{line: 4689, col: 1, offset: 140102},
			expr: &actionExpr{
				pos: position{line: 4689, col: 19, offset: 140120},
				run: (*parser).callonRegexDelimiter1,
				expr: &seqExpr{
					pos: position{line: 4689, col: 19, offset: 140120},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4689, col: 19, offset: 140120},
							val:        "tokenizer",
							ignoreCase: false,
							want:       "\"tokenizer\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4689, col: 31, offset: 140132},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4689, col: 37, offset: 140138},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 4689, col: 41, offset: 140142},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "AllowEmptyOption",
			pos:  position{line: 4707, col: 1, offset: 140613},
			expr: &actionExpr{
				pos: position{line: 4707, col: 21, offset: 140633},
				run: (*parser).callonAllowEmptyOption1,
				expr: &seqExpr{
					pos: position{line: 4707, col: 21, offset: 140633},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4707, col: 21, offset: 140633},
							val:        "allowempty",
							ignoreCase: false,
							want:       "\"allowempty\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4707, col: 34, offset: 140646},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4707, col: 40, offset: 140652},
							label: "boolVal",
							expr: &ruleRefExpr{
								pos:  position{line: 4707, col: 48, offset: 140660},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "SetSvOption",
			pos:  position{line: 4719, col: 1, offset: 140900},
			expr: &actionExpr{
				pos: position{line: 4719, col: 16, offset: 140915},
				run: (*parser).callonSetSvOption1,
				expr: &seqExpr{
					pos: position{line: 4719, col: 16, offset: 140915},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4719, col: 16, offset: 140915},
							val:        "setsv",
							ignoreCase: false,
							want:       "\"setsv\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4719, col: 24, offset: 140923},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4719, col: 30, offset: 140929},
							label: "boolVal",
							expr: &ruleRefExpr{
								pos:  position{line: 4719, col: 38, offset: 140937},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "SPathBlock",
			pos:  position{line: 4731, col: 1, offset: 141202},
			expr: &actionExpr{
				pos: position{line: 4731, col: 15, offset: 141216},
				run: (*parser).callonSPathBlock1,
				expr: &seqExpr{
					pos: position{line: 4731, col: 15, offset: 141216},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4731, col: 15, offset: 141216},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 4731, col: 20, offset: 141221},
							name: "CMD_SPATH",
						},
						&labeledExpr{
							pos:   position{line: 4731, col: 30, offset: 141231},
							label: "spathExpr",
							expr: &zeroOrOneExpr{
								pos: position{line: 4731, col: 40, offset: 141241},
								expr: &ruleRefExpr{
									pos:  position{line: 4731, col: 40, offset: 141241},
									name: "SPathArgumentsList",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SPathArgumentsList",
			pos:  position{line: 4738, col: 1, offset: 141367},
			expr: &actionExpr{
				pos: position{line: 4738, col: 23, offset: 141389},
				run: (*parser).callonSPathArgumentsList1,
				expr: &seqExpr{
					pos: position{line: 4738, col: 23, offset: 141389},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4738, col: 23, offset: 141389},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4738, col: 29, offset: 141395},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 4738, col: 35, offset: 141401},
								name: "SPathArgument",
							},
						},
						&labeledExpr{
							pos:   position{line: 4738, col: 49, offset: 141415},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 4738, col: 54, offset: 141420},
								expr: &seqExpr{
									pos: position{line: 4738, col: 55, offset: 141421},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 4738, col: 55, offset: 141421},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 4738, col: 61, offset: 141427},
											name: "SPathArgument",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SPathArgument",
			pos:  position{line: 4770, col: 1, offset: 142320},
			expr: &actionExpr{
				pos: position{line: 4770, col: 18, offset: 142337},
				run: (*parser).callonSPathArgument1,
				expr: &labeledExpr{
					pos:   position{line: 4770, col: 18, offset: 142337},
					label: "arg",
					expr: &choiceExpr{
						pos: position{line: 4770, col: 23, offset: 142342},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4770, col: 23, offset: 142342},
								name: "InputField",
							},
							&ruleRefExpr{
								pos:  position{line: 4770, col: 36, offset: 142355},
								name: "OutputField",
							},
							&ruleRefExpr{
								pos:  position{line: 4770, col: 50, offset: 142369},
								name: "PathField",
							},
						},
					},
				},
			},
		},
		{
			name: "InputField",
			pos:  position{line: 4774, col: 1, offset: 142405},
			expr: &actionExpr{
				pos: position{line: 4774, col: 15, offset: 142419},
				run: (*parser).callonInputField1,
				expr: &seqExpr{
					pos: position{line: 4774, col: 15, offset: 142419},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4774, col: 15, offset: 142419},
							val:        "input",
							ignoreCase: false,
							want:       "\"input\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4774, col: 23, offset: 142427},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4774, col: 29, offset: 142433},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 4774, col: 35, offset: 142439},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "OutputField",
			pos:  position{line: 4777, col: 1, offset: 142495},
			expr: &actionExpr{
				pos: position{line: 4777, col: 16, offset: 142510},
				run: (*parser).callonOutputField1,
				expr: &seqExpr{
					pos: position{line: 4777, col: 16, offset: 142510},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4777, col: 16, offset: 142510},
							val:        "output",
							ignoreCase: false,
							want:       "\"output\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4777, col: 25, offset: 142519},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4777, col: 31, offset: 142525},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 4777, col: 37, offset: 142531},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "PathField",
			pos:  position{line: 4780, col: 1, offset: 142588},
			expr: &actionExpr{
				pos: position{line: 4780, col: 14, offset: 142601},
				run: (*parser).callonPathField1,
				expr: &choiceExpr{
					pos: position{line: 4780, col: 15, offset: 142602},
					alternatives: []any{
						&seqExpr{
							pos: position{line: 4780, col: 15, offset: 142602},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4780, col: 15, offset: 142602},
									val:        "path",
									ignoreCase: false,
									want:       "\"path\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4780, col: 22, offset: 142609},
									name: "EQUAL",
								},
								&ruleRefExpr{
									pos:  position{line: 4780, col: 28, offset: 142615},
									name: "SPathFieldString",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4780, col: 47, offset: 142634},
							name: "SPathFieldString",
						},
					},
				},
			},
		},
		{
			name: "SPathFieldString",
			pos:  position{line: 4792, col: 1, offset: 143046},
			expr: &choiceExpr{
				pos: position{line: 4792, col: 21, offset: 143066},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 4792, col: 21, offset: 143066},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 4792, col: 36, offset: 143081},
						name: "UnquotedStringWithTemplateWildCard",
					},
				},
			},
		},
		{
			name: "FormatBlock",
			pos:  position{line: 4795, col: 1, offset: 143154},
			expr: &actionExpr{
				pos: position{line: 4795, col: 16, offset: 143169},
				run: (*parser).callonFormatBlock1,
				expr: &seqExpr{
					pos: position{line: 4795, col: 16, offset: 143169},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4795, col: 16, offset: 143169},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 4795, col: 21, offset: 143174},
							name: "CMD_FORMAT",
						},
						&labeledExpr{
							pos:   position{line: 4795, col: 32, offset: 143185},
							label: "formatArgExpr",
							expr: &zeroOrOneExpr{
								pos: position{line: 4795, col: 46, offset: 143199},
								expr: &ruleRefExpr{
									pos:  position{line: 4795, col: 46, offset: 143199},
									name: "FormatArgumentsList",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FormatArgumentsList",
			pos:  position{line: 4817, col: 1, offset: 143808},
			expr: &actionExpr{
				pos: position{line: 4817, col: 24, offset: 143831},
				run: (*parser).callonFormatArgumentsList1,
				expr: &seqExpr{
					pos: position{line: 4817, col: 24, offset: 143831},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4817, col: 24, offset: 143831},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4817, col: 30, offset: 143837},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 4817, col: 37, offset: 143844},
								name: "FormatArgument",
							},
						},
						&labeledExpr{
							pos:   position{line: 4817, col: 52, offset: 143859},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 4817, col: 57, offset: 143864},
								expr: &seqExpr{
									pos: position{line: 4817, col: 58, offset: 143865},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 4817, col: 58, offset: 143865},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 4817, col: 64, offset: 143871},
											name: "FormatArgument",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FormatArgument",
			pos:  position{line: 4851, col: 1, offset: 145060},
			expr: &actionExpr{
				pos: position{line: 4851, col: 19, offset: 145078},
				run: (*parser).callonFormatArgument1,
				expr: &labeledExpr{
					pos:   position{line: 4851, col: 19, offset: 145078},
					label: "argExpr",
					expr: &choiceExpr{
						pos: position{line: 4851, col: 28, offset: 145087},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4851, col: 28, offset: 145087},
								name: "FormatSeparator",
							},
							&ruleRefExpr{
								pos:  position{line: 4851, col: 46, offset: 145105},
								name: "FormatMaxResults",
							},
							&ruleRefExpr{
								pos:  position{line: 4851, col: 65, offset: 145124},
								name: "FormatEmptyStr",
							},
							&ruleRefExpr{
								pos:  position{line: 4851, col: 82, offset: 145141},
								name: "FormatRowColOptions",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatSeparator",
			pos:  position{line: 4855, col: 1, offset: 145191},
			expr: &actionExpr{
				pos: position{line: 4855, col: 20, offset: 145210},
				run: (*parser).callonFormatSeparator1,
				expr: &seqExpr{
					pos: position{line: 4855, col: 20, offset: 145210},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4855, col: 20, offset: 145210},
							val:        "mvsep",
							ignoreCase: false,
							want:       "\"mvsep\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4855, col: 28, offset: 145218},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4855, col: 34, offset: 145224},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 4855, col: 38, offset: 145228},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatMaxResults",
			pos:  position{line: 4864, col: 1, offset: 145440},
			expr: &actionExpr{
				pos: position{line: 4864, col: 21, offset: 145460},
				run: (*parser).callonFormatMaxResults1,
				expr: &seqExpr{
					pos: position{line: 4864, col: 21, offset: 145460},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4864, col: 21, offset: 145460},
							val:        "maxresults",
							ignoreCase: false,
							want:       "\"maxresults\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4864, col: 34, offset: 145473},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4864, col: 40, offset: 145479},
							label: "numStr",
							expr: &ruleRefExpr{
								pos:  position{line: 4864, col: 47, offset: 145486},
								name: "IntegerAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatEmptyStr",
			pos:  position{line: 4877, col: 1, offset: 145892},
			expr: &actionExpr{
				pos: position{line: 4877, col: 19, offset: 145910},
				run: (*parser).callonFormatEmptyStr1,
				expr: &seqExpr{
					pos: position{line: 4877, col: 19, offset: 145910},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4877, col: 19, offset: 145910},
							val:        "emptystr",
							ignoreCase: false,
							want:       "\"emptystr\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4877, col: 30, offset: 145921},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4877, col: 36, offset: 145927},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 4877, col: 40, offset: 145931},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatRowColOptions",
			pos:  position{line: 4886, col: 1, offset: 146146},
			expr: &actionExpr{
				pos: position{line: 4886, col: 24, offset: 146169},
				run: (*parser).callonFormatRowColOptions1,
				expr: &seqExpr{
					pos: position{line: 4886, col: 24, offset: 146169},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4886, col: 24, offset: 146169},
							label: "rowPrefix",
							expr: &ruleRefExpr{
								pos:  position{line: 4886, col: 34, offset: 146179},
								name: "QuotedString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4886, col: 47, offset: 146192},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4886, col: 53, offset: 146198},
							label: "colPrefix",
							expr: &ruleRefExpr{
								pos:  position{line: 4886, col: 63, offset: 146208},
								name: "QuotedString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4886, col: 76, offset: 146221},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4886, col: 82, offset: 146227},
							label: "colSeparator",
							expr: &ruleRefExpr{
								pos:  position{line: 4886, col: 95, offset: 146240},
								name: "QuotedString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4886, col: 108, offset: 146253},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4886, col: 114, offset: 146259},
							label: "colEnd",
							expr: &ruleRefExpr{
								pos:  position{line: 4886, col: 121, offset: 146266},
								name: "QuotedString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4886, col: 134, offset: 146279},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4886, col: 140, offset: 146285},
							label: "rowSeparator",
							expr: &ruleRefExpr{
								pos:  position{line: 4886, col: 153, offset: 146298},
								name: "QuotedString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4886, col: 166, offset: 146311},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4886, col: 172, offset: 146317},
							label: "rowEnd",
							expr: &ruleRefExpr{
								pos:  position{line: 4886, col: 179, offset: 146324},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "EventCountBlock",
			pos:  position{line: 4904, col: 1, offset: 146900},
			expr: &actionExpr{
				pos: position{line: 4904, col: 20, offset: 146919},
				run: (*parser).callonEventCountBlock1,
				expr: &seqExpr{
					pos: position{line: 4904, col: 20, offset: 146919},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4904, col: 20, offset: 146919},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 4904, col: 25, offset: 146924},
							name: "CMD_EVENTCOUNT",
						},
						&labeledExpr{
							pos:   position{line: 4904, col: 40, offset: 146939},
							label: "eventCountExpr",
							expr: &zeroOrOneExpr{
								pos: position{line: 4904, col: 55, offset: 146954},
								expr: &ruleRefExpr{
									pos:  position{line: 4904, col: 55, offset: 146954},
									name: "EventCountArgumentsList",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EventCountArgumentsList",
			pos:  position{line: 4911, col: 1, offset: 147107},
			expr: &actionExpr{
				pos: position{line: 4911, col: 28, offset: 147134},
				run: (*parser).callonEventCountArgumentsList1,
				expr: &seqExpr{
					pos: position{line: 4911, col: 28, offset: 147134},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4911, col: 28, offset: 147134},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4911, col: 34, offset: 147140},
							label: "first",
							expr: &zeroOrOneExpr{
								pos: position{line: 4911, col: 40, offset: 147146},
								expr: &ruleRefExpr{
									pos:  position{line: 4911, col: 40, offset: 147146},
									name: "EventCountArgument",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 4911, col: 60, offset: 147166},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 4911, col: 65, offset: 147171},
								expr: &seqExpr{
									pos: position{line: 4911, col: 66, offset: 147172},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 4911, col: 66, offset: 147172},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 4911, col: 72, offset: 147178},
											name: "EventCountArgument",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EventCountArgument",
			pos:  position{line: 4967, col: 1, offset: 149055},
			expr: &actionExpr{
				pos: position{line: 4967, col: 23, offset: 149077},
				run: (*parser).callonEventCountArgument1,
				expr: &labeledExpr{
					pos:   position{line: 4967, col: 23, offset: 149077},
					label: "arg",
					expr: &choiceExpr{
						pos: position{line: 4967, col: 28, offset: 149082},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4967, col: 28, offset: 149082},
								name: "IndexField",
							},
							&ruleRefExpr{
								pos:  position{line: 4967, col: 41, offset: 149095},
								name: "SummarizeField",
							},
							&ruleRefExpr{
								pos:  position{line: 4967, col: 58, offset: 149112},
								name: "ReportSizeField",
							},
							&ruleRefExpr{
								pos:  position{line: 4967, col: 76, offset: 149130},
								name: "ListVixField",
							},
						},
					},
				},
			},
		},
		{
			name: "IndexField",
			pos:  position{line: 4971, col: 1, offset: 149169},
			expr: &actionExpr{
				pos: position{line: 4971, col: 15, offset: 149183},
				run: (*parser).callonIndexField1,
				expr: &seqExpr{
					pos: position{line: 4971, col: 15, offset: 149183},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4971, col: 15, offset: 149183},
							val:        "index",
							ignoreCase: false,
							want:       "\"index\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4971, col: 23, offset: 149191},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4971, col: 29, offset: 149197},
							label: "index",
							expr: &ruleRefExpr{
								pos:  position{line: 4971, col: 35, offset: 149203},
								name: "IndexName",
							},
						},
					},
				},
			},
		},
		{
			name: "SummarizeField",
			pos:  position{line: 4974, col: 1, offset: 149259},
			expr: &actionExpr{
				pos: position{line: 4974, col: 19, offset: 149277},
				run: (*parser).callonSummarizeField1,
				expr: &seqExpr{
					pos: position{line: 4974, col: 19, offset: 149277},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4974, col: 19, offset: 149277},
							val:        "summarize",
							ignoreCase: false,
							want:       "\"summarize\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4974, col: 31, offset: 149289},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4974, col: 37, offset: 149295},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 4974, col: 43, offset: 149301},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "ReportSizeField",
			pos:  position{line: 4977, col: 1, offset: 149377},
			expr: &actionExpr{
				pos: position{line: 4977, col: 20, offset: 149396},
				run: (*parser).callonReportSizeField1,
				expr: &seqExpr{
					pos: position{line: 4977, col: 20, offset: 149396},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4977, col: 20, offset: 149396},
							val:        "report_size",
							ignoreCase: false,
							want:       "\"report_size\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4977, col: 34, offset: 149410},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4977, col: 40, offset: 149416},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 4977, col: 46, offset: 149422},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "ListVixField",
			pos:  position{line: 4980, col: 1, offset: 149500},
			expr: &actionExpr{
				pos: position{line: 4980, col: 17, offset: 149516},
				run: (*parser).callonListVixField1,
				expr: &seqExpr{
					pos: position{line: 4980, col: 17, offset: 149516},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4980, col: 17, offset: 149516},
							val:        "list_vix",
							ignoreCase: false,
							want:       "\"list_vix\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4980, col: 28, offset: 149527},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4980, col: 34, offset: 149533},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 4980, col: 40, offset: 149539},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "IndexName",
			pos:  position{line: 4984, col: 1, offset: 149615},
			expr: &actionExpr{
				pos: position{line: 4984, col: 14, offset: 149628},
				run: (*parser).callonIndexName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 4984, col: 14, offset: 149628},
					expr: &seqExpr{
						pos: position{line: 4984, col: 15, offset: 149629},
						exprs: []any{
							&notExpr{
								pos: position{line: 4984, col: 15, offset: 149629},
								expr: &ruleRefExpr{
									pos:  position{line: 4984, col: 16, offset: 149630},
									name: "SPACE",
								},
							},
							&anyMatcher{
								line: 4984, col: 22, offset: 149636,
							},
						},
					},
				},
			},
		},
		{
			name: "FillNullBlock",
			pos:  position{line: 4989, col: 1, offset: 149709},
			expr: &actionExpr{
				pos: position{line: 4989, col: 18, offset: 149726},
				run: (*parser).callonFillNullBlock1,
				expr: &seqExpr{
					pos: position{line: 4989, col: 18, offset: 149726},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4989, col: 18, offset: 149726},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 4989, col: 23, offset: 149731},
							name: "CMD_FILLNULL",
						},
						&labeledExpr{
							pos:   position{line: 4989, col: 36, offset: 149744},
							label: "valueOption",
							expr: &zeroOrOneExpr{
								pos: position{line: 4989, col: 49, offset: 149757},
								expr: &ruleRefExpr{
									pos:  position{line: 4989, col: 49, offset: 149757},
									name: "FillNullValueOption",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 4989, col: 70, offset: 149778},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 4989, col: 77, offset: 149785},
								expr: &ruleRefExpr{
									pos:  position{line: 4989, col: 77, offset: 149785},
									name: "FillNullFieldList",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FillNullValueOption",
			pos:  position{line: 5018, col: 1, offset: 150512},
			expr: &actionExpr{
				pos: position{line: 5018, col: 24, offset: 150535},
				run: (*parser).callonFillNullValueOption1,
				expr: &seqExpr{
					pos: position{line: 5018, col: 24, offset: 150535},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 5018, col: 24, offset: 150535},
							name: "SPACE",
						},
						&litMatcher{
							pos:        position{line: 5018, col: 30, offset: 150541},
							val:        "value",
							ignoreCase: false,
							want:       "\"value\"",
						},
						&ruleRefExpr{
							pos:  position{line: 5018, col: 38, offset: 150549},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 5018, col: 44, offset: 150555},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 5018, col: 48, offset: 150559},
								name: "String",
							},
						},
					},
				},
			},
		},
		{
			name: "FillNullFieldList",
			pos:  position{line: 5022, col: 1, offset: 150605},
			expr: &actionExpr{
				pos: position{line: 5022, col: 22, offset: 150626},
				run: (*parser).callonFillNullFieldList1,
				expr: &seqExpr{
					pos: position{line: 5022, col: 22, offset: 150626},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 5022, col: 22, offset: 150626},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 5022, col: 28, offset: 150632},
							label: "fieldList",
							expr: &ruleRefExpr{
								pos:  position{line: 5022, col: 38, offset: 150642},
								name: "SpaceSeparatedFieldNameList",
							},
						},
					},
				},
			},
		},
		{
			name: "ALLCMD",
			pos:  position{line: 5027, col: 1, offset: 150730},
			expr: &choiceExpr{
				pos: position{line: 5027, col: 12, offset: 150741},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 5027, col: 12, offset: 150741},
						name: "CMD_REGEX",
					},
					&ruleRefExpr{
						pos:  position{line: 5027, col: 24, offset: 150753},
						name: "CMD_STATS",
					},
					&ruleRefExpr{
						pos:  position{line: 5027, col: 36, offset: 150765},
						name: "CMD_FIELDS",
					},
					&ruleRefExpr{
						pos:  position{line: 5027, col: 49, offset: 150778},
						name: "CMD_WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 5027, col: 61, offset: 150790},
						name: "CMD_HEAD_NO_SPACE",
					},
					&ruleRefExpr{
						pos:  position{line: 5027, col: 81, offset: 150810},
						name: "CMD_HEAD",
					},
					&ruleRefExpr{
						pos:  position{line: 5027, col: 92, offset: 150821},
						name: "CMD_TAIL_NO_SPACE",
					},
					&ruleRefExpr{
						pos:  position{line: 5027, col: 112, offset: 150841},
						name: "CMD_TAIL",
					},
					&ruleRefExpr{
						pos:  position{line: 5027, col: 123, offset: 150852},
						name: "CMD_EVAL",
					},
					&ruleRefExpr{
						pos:  position{line: 5027, col: 134, offset: 150863},
						name: "CMD_REX",
					},
					&ruleRefExpr{
						pos:  position{line: 5027, col: 144, offset: 150873},
						name: "CMD_TOP",
					},
					&ruleRefExpr{
						pos:  position{line: 5027, col: 154, offset: 150883},
						name: "CMD_RARE",
					},
					&ruleRefExpr{
						pos:  position{line: 5027, col: 165, offset: 150894},
						name: "CMD_RENAME",
					},
					&ruleRefExpr{
						pos:  position{line: 5027, col: 178, offset: 150907},
						name: "CMD_TIMECHART",
					},
					&ruleRefExpr{
						pos:  position{line: 5027, col: 194, offset: 150923},
						name: "CMD_TRANSACTION",
					},
					&ruleRefExpr{
						pos:  position{line: 5027, col: 212, offset: 150941},
						name: "CMD_DEDUP",
					},
					&ruleRefExpr{
						pos:  position{line: 5027, col: 224, offset: 150953},
						name: "CMD_SORT",
					},
					&ruleRefExpr{
						pos:  position{line: 5027, col: 235, offset: 150964},
						name: "CMD_MAKEMV",
					},
					&ruleRefExpr{
						pos:  position{line: 5027, col: 248, offset: 150977},
						name: "CMD_SPATH",
					},
					&ruleRefExpr{
						pos:  position{line: 5027, col: 260, offset: 150989},
						name: "CMD_FORMAT",
					},
					&ruleRefExpr{
						pos:  position{line: 5027, col: 273, offset: 151002},
						name: "CMD_EARLIEST",
					},
					&ruleRefExpr{
						pos:  position{line: 5027, col: 288, offset: 151017},
						name: "CMD_LATEST",
					},
					&ruleRefExpr{
						pos:  position{line: 5027, col: 301, offset: 151030},
						name: "CMD_EVENTCOUNT",
					},
					&ruleRefExpr{
						pos:  position{line: 5027, col: 318, offset: 151047},
						name: "CMD_BIN",
					},
					&ruleRefExpr{
						pos:  position{line: 5027, col: 328, offset: 151057},
						name: "CMD_STREAMSTATS",
					},
					&ruleRefExpr{
						pos:  position{line: 5027, col: 346, offset: 151075},
						name: "CMD_FILLNULL",
					},
				},
			},
		},
		{
			name: "CMD_SEARCH",
			pos:  position{line: 5028, col: 1, offset: 151089},
			expr: &seqExpr{
				pos: position{line: 5028, col: 15, offset: 151103},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5028, col: 15, offset: 151103},
						val:        "search",
						ignoreCase: false,
						want:       "\"search\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5028, col: 24, offset: 151112},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_REGEX",
			pos:  position{line: 5029, col: 1, offset: 151118},
			expr: &seqExpr{
				pos: position{line: 5029, col: 14, offset: 151131},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5029, col: 14, offset: 151131},
						val:        "regex",
						ignoreCase: false,
						want:       "\"regex\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5029, col: 22, offset: 151139},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_STATS",
			pos:  position{line: 5030, col: 1, offset: 151145},
			expr: &seqExpr{
				pos: position{line: 5030, col: 14, offset: 151158},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5030, col: 14, offset: 151158},
						val:        "stats",
						ignoreCase: false,
						want:       "\"stats\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5030, col: 22, offset: 151166},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_STREAMSTATS",
			pos:  position{line: 5031, col: 1, offset: 151172},
			expr: &seqExpr{
				pos: position{line: 5031, col: 20, offset: 151191},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5031, col: 20, offset: 151191},
						val:        "streamstats",
						ignoreCase: false,
						want:       "\"streamstats\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5031, col: 34, offset: 151205},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_FIELDS",
			pos:  position{line: 5032, col: 1, offset: 151211},
			expr: &seqExpr{
				pos: position{line: 5032, col: 15, offset: 151225},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5032, col: 15, offset: 151225},
						val:        "fields",
						ignoreCase: false,
						want:       "\"fields\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5032, col: 24, offset: 151234},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_WHERE",
			pos:  position{line: 5033, col: 1, offset: 151240},
			expr: &seqExpr{
				pos: position{line: 5033, col: 14, offset: 151253},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5033, col: 14, offset: 151253},
						val:        "where",
						ignoreCase: false,
						want:       "\"where\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5033, col: 22, offset: 151261},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_HEAD_NO_SPACE",
			pos:  position{line: 5034, col: 1, offset: 151267},
			expr: &litMatcher{
				pos:        position{line: 5034, col: 22, offset: 151288},
				val:        "head",
				ignoreCase: false,
				want:       "\"head\"",
			},
		},
		{
			name: "CMD_HEAD",
			pos:  position{line: 5035, col: 1, offset: 151295},
			expr: &seqExpr{
				pos: position{line: 5035, col: 13, offset: 151307},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 5035, col: 13, offset: 151307},
						name: "CMD_HEAD_NO_SPACE",
					},
					&ruleRefExpr{
						pos:  position{line: 5035, col: 31, offset: 151325},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_TAIL_NO_SPACE",
			pos:  position{line: 5036, col: 1, offset: 151331},
			expr: &litMatcher{
				pos:        position{line: 5036, col: 22, offset: 151352},
				val:        "tail",
				ignoreCase: false,
				want:       "\"tail\"",
			},
		},
		{
			name: "CMD_TAIL",
			pos:  position{line: 5037, col: 1, offset: 151359},
			expr: &seqExpr{
				pos: position{line: 5037, col: 13, offset: 151371},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 5037, col: 13, offset: 151371},
						name: "CMD_TAIL_NO_SPACE",
					},
					&ruleRefExpr{
						pos:  position{line: 5037, col: 31, offset: 151389},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_EVAL",
			pos:  position{line: 5038, col: 1, offset: 151395},
			expr: &seqExpr{
				pos: position{line: 5038, col: 13, offset: 151407},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5038, col: 13, offset: 151407},
						val:        "eval",
						ignoreCase: false,
						want:       "\"eval\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5038, col: 20, offset: 151414},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_REX",
			pos:  position{line: 5039, col: 1, offset: 151420},
			expr: &seqExpr{
				pos: position{line: 5039, col: 12, offset: 151431},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5039, col: 12, offset: 151431},
						val:        "rex",
						ignoreCase: false,
						want:       "\"rex\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5039, col: 18, offset: 151437},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_SORT",
			pos:  position{line: 5040, col: 1, offset: 151443},
			expr: &seqExpr{
				pos: position{line: 5040, col: 13, offset: 151455},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5040, col: 13, offset: 151455},
						val:        "sort",
						ignoreCase: false,
						want:       "\"sort\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5040, col: 20, offset: 151462},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_TOP",
			pos:  position{line: 5041, col: 1, offset: 151468},
			expr: &litMatcher{
				pos:        position{line: 5041, col: 12, offset: 151479},
				val:        "top",
				ignoreCase: false,
				want:       "\"top\"",
			},
		},
		{
			name: "CMD_RARE",
			pos:  position{line: 5042, col: 1, offset: 151485},
			expr: &litMatcher{
				pos:        position{line: 5042, col: 13, offset: 151497},
				val:        "rare",
				ignoreCase: false,
				want:       "\"rare\"",
			},
		},
		{
			name: "CMD_RENAME",
			pos:  position{line: 5043, col: 1, offset: 151504},
			expr: &seqExpr{
				pos: position{line: 5043, col: 15, offset: 151518},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5043, col: 15, offset: 151518},
						val:        "rename",
						ignoreCase: false,
						want:       "\"rename\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5043, col: 24, offset: 151527},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_TIMECHART",
			pos:  position{line: 5044, col: 1, offset: 151533},
			expr: &seqExpr{
				pos: position{line: 5044, col: 18, offset: 151550},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5044, col: 18, offset: 151550},
						val:        "timechart",
						ignoreCase: false,
						want:       "\"timechart\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5044, col: 30, offset: 151562},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_BIN",
			pos:  position{line: 5045, col: 1, offset: 151568},
			expr: &seqExpr{
				pos: position{line: 5045, col: 12, offset: 151579},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5045, col: 12, offset: 151579},
						val:        "bin",
						ignoreCase: false,
						want:       "\"bin\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5045, col: 18, offset: 151585},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_SPAN",
			pos:  position{line: 5046, col: 1, offset: 151591},
			expr: &litMatcher{
				pos:        position{line: 5046, col: 13, offset: 151603},
				val:        "span",
				ignoreCase: false,
				want:       "\"span\"",
			},
		},
		{
			name: "CMD_TRANSACTION",
			pos:  position{line: 5047, col: 1, offset: 151610},
			expr: &seqExpr{
				pos: position{line: 5047, col: 20, offset: 151629},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5047, col: 20, offset: 151629},
						val:        "transaction",
						ignoreCase: false,
						want:       "\"transaction\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5047, col: 34, offset: 151643},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_DEDUP",
			pos:  position{line: 5048, col: 1, offset: 151649},
			expr: &litMatcher{
				pos:        position{line: 5048, col: 14, offset: 151662},
				val:        "dedup",
				ignoreCase: false,
				want:       "\"dedup\"",
			},
		},
		{
			name: "CMD_DEDUP_SORTBY",
			pos:  position{line: 5049, col: 1, offset: 151670},
			expr: &seqExpr{
				pos: position{line: 5049, col: 21, offset: 151690},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 5049, col: 21, offset: 151690},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 5049, col: 27, offset: 151696},
						val:        "sortby",
						ignoreCase: false,
						want:       "\"sortby\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5049, col: 36, offset: 151705},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_MAKEMV",
			pos:  position{line: 5050, col: 1, offset: 151711},
			expr: &litMatcher{
				pos:        position{line: 5050, col: 15, offset: 151725},
				val:        "makemv",
				ignoreCase: false,
				want:       "\"makemv\"",
			},
		},
		{
			name: "CMD_SPATH",
			pos:  position{line: 5051, col: 1, offset: 151734},
			expr: &litMatcher{
				pos:        position{line: 5051, col: 14, offset: 151747},
				val:        "spath",
				ignoreCase: false,
				want:       "\"spath\"",
			},
		},
		{
			name: "CMD_FORMAT",
			pos:  position{line: 5052, col: 1, offset: 151755},
			expr: &litMatcher{
				pos:        position{line: 5052, col: 15, offset: 151769},
				val:        "format",
				ignoreCase: false,
				want:       "\"format\"",
			},
		},
		{
			name: "CMD_EARLIEST",
			pos:  position{line: 5053, col: 1, offset: 151778},
			expr: &litMatcher{
				pos:        position{line: 5053, col: 17, offset: 151794},
				val:        "earliest",
				ignoreCase: false,
				want:       "\"earliest\"",
			},
		},
		{
			name: "CMD_LATEST",
			pos:  position{line: 5054, col: 1, offset: 151805},
			expr: &litMatcher{
				pos:        position{line: 5054, col: 15, offset: 151819},
				val:        "latest",
				ignoreCase: false,
				want:       "\"latest\"",
			},
		},
		{
			name: "CMD_EVENTCOUNT",
			pos:  position{line: 5055, col: 1, offset: 151828},
			expr: &litMatcher{
				pos:        position{line: 5055, col: 19, offset: 151846},
				val:        "eventcount",
				ignoreCase: false,
				want:       "\"eventcount\"",
			},
		},
		{
			name: "CMD_FILLNULL",
			pos:  position{line: 5056, col: 1, offset: 151859},
			expr: &litMatcher{
				pos:        position{line: 5056, col: 17, offset: 151875},
				val:        "fillnull",
				ignoreCase: false,
				want:       "\"fillnull\"",
			},
		},
		{
			name: "EVAL_CONCAT",
			pos:  position{line: 5057, col: 1, offset: 151886},
			expr: &seqExpr{
				pos: position{line: 5057, col: 16, offset: 151901},
				exprs: []any{
					&zeroOrOneExpr{
						pos: position{line: 5057, col: 16, offset: 151901},
						expr: &ruleRefExpr{
							pos:  position{line: 5057, col: 16, offset: 151901},
							name: "SPACE",
						},
					},
					&litMatcher{
						pos:        position{line: 5057, col: 23, offset: 151908},
						val:        ".",
						ignoreCase: false,
						want:       "\".\"",
					},
					&zeroOrOneExpr{
						pos: position{line: 5057, col: 27, offset: 151912},
						expr: &ruleRefExpr{
							pos:  position{line: 5057, col: 27, offset: 151912},
							name: "SPACE",
						},
					},
				},
			},
		},
		{
			name: "MAJOR_BREAK",
			pos:  position{line: 5060, col: 1, offset: 152023},
			expr: &choiceExpr{
				pos: position{line: 5060, col: 16, offset: 152038},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 5060, col: 16, offset: 152038},
						val:        "[[\\]<>(){}|!;,'\"*\\n\\r \\t&?+]",
						chars:      []rune{'[', ']', '<', '>', '(', ')', '{', '}', '|', '!', ';', ',', '\'', '"', '*', '\n', '\r', ' ', '\t', '&', '?', '+'},
						ignoreCase: false,
						inverted:   false,
					},
					&litMatcher{
						pos:        position{line: 5060, col: 47, offset: 152069},
						val:        "%21",
						ignoreCase: false,
						want:       "\"%21\"",
					},
					&litMatcher{
						pos:        position{line: 5060, col: 55, offset: 152077},
						val:        "%26",
						ignoreCase: false,
						want:       "\"%26\"",
					},
					&litMatcher{
						pos:        position{line: 5061, col: 16, offset: 152100},
						val:        "%2526",
						ignoreCase: false,
						want:       "\"%2526\"",
					},
					&litMatcher{
						pos:        position{line: 5061, col: 26, offset: 152110},
						val:        "%3B",
						ignoreCase: false,
						want:       "\"%3B\"",
					},
					&litMatcher{
						pos:        position{line: 5061, col: 34, offset: 152118},
						val:        "%7C",
						ignoreCase: false,
						want:       "\"%7C\"",
					},
					&litMatcher{
						pos:        position{line: 5061, col: 42, offset: 152126},
						val:        "%20",
						ignoreCase: false,
						want:       "\"%20\"",
					},
					&litMatcher{
						pos:        position{line: 5061, col: 50, offset: 152134},
						val:        "%2B",
						ignoreCase: false,
						want:       "\"%2B\"",
					},
					&litMatcher{
						pos:        position{line: 5061, col: 58, offset: 152142},
						val:        "%3D",
						ignoreCase: false,
						want:       "\"%3D\"",
					},
					&litMatcher{
						pos:        position{line: 5061, col: 66, offset: 152150},
						val:        "--",
						ignoreCase: false,
						want:       "\"--\"",
					},
					&litMatcher{
						pos:        position{line: 5062, col: 16, offset: 152172},
						val:        "%2520",
						ignoreCase: false,
						want:       "\"%2520\"",
					},
					&litMatcher{
						pos:        position{line: 5062, col: 26, offset: 152182},
						val:        "%5D",
						ignoreCase: false,
						want:       "\"%5D\"",
					},
					&litMatcher{
						pos:        position{line: 5062, col: 34, offset: 152190},
						val:        "%5B",
						ignoreCase: false,
						want:       "\"%5B\"",
					},
					&litMatcher{
						pos:        position{line: 5062, col: 42, offset: 152198},
						val:        "%3A",
						ignoreCase: false,
						want:       "\"%3A\"",
					},
					&litMatcher{
						pos:        position{line: 5062, col: 50, offset: 152206},
						val:        "%0A",
						ignoreCase: false,
						want:       "\"%0A\"",
					},
					&litMatcher{
						pos:        position{line: 5062, col: 58, offset: 152214},
						val:        "%2C",
						ignoreCase: false,
						want:       "\"%2C\"",
					},
					&litMatcher{
						pos:        position{line: 5062, col: 66, offset: 152222},
						val:        "%28",
						ignoreCase: false,
						want:       "\"%28\"",
					},
					&litMatcher{
						pos:        position{line: 5062, col: 74, offset: 152230},
						val:        "%29",
						ignoreCase: false,
						want:       "\"%29\"",
					},
				},
			},
		},
		{
			name: "MINOR_BREAK",
			pos:  position{line: 5063, col: 1, offset: 152236},
			expr: &choiceExpr{
				pos: position{line: 5063, col: 16, offset: 152251},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 5063, col: 16, offset: 152251},
						val:        "[/:=@.$#%_]",
						chars:      []rune{'/', ':', '=', '@', '.', '$', '#', '%', '_'},
						ignoreCase: false,
						inverted:   false,
					},
					&litMatcher{
						pos:        position{line: 5063, col: 30, offset: 152265},
						val:        "-",
						ignoreCase: false,
						want:       "\"-\"",
					},
					&litMatcher{
						pos:        position{line: 5063, col: 36, offset: 152271},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "NOT",
			pos:  position{line: 5067, col: 1, offset: 152427},
			expr: &seqExpr{
				pos: position{line: 5067, col: 8, offset: 152434},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5067, col: 8, offset: 152434},
						val:        "NOT",
						ignoreCase: false,
						want:       "\"NOT\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5067, col: 14, offset: 152440},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "OR",
			pos:  position{line: 5068, col: 1, offset: 152446},
			expr: &seqExpr{
				pos: position{line: 5068, col: 7, offset: 152452},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 5068, col: 7, offset: 152452},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 5068, col: 13, offset: 152458},
						val:        "OR",
						ignoreCase: false,
						want:       "\"OR\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5068, col: 18, offset: 152463},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "AND",
			pos:  position{line: 5069, col: 1, offset: 152469},
			expr: &seqExpr{
				pos: position{line: 5069, col: 8, offset: 152476},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 5069, col: 8, offset: 152476},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 5069, col: 14, offset: 152482},
						val:        "AND",
						ignoreCase: false,
						want:       "\"AND\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5069, col: 20, offset: 152488},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "PIPE",
			pos:  position{line: 5070, col: 1, offset: 152494},
			expr: &seqExpr{
				pos: position{line: 5070, col: 9, offset: 152502},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 5070, col: 9, offset: 152502},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 5070, col: 24, offset: 152517},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5070, col: 28, offset: 152521},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 5071, col: 1, offset: 152536},
			expr: &seqExpr{
				pos: position{line: 5071, col: 7, offset: 152542},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 5071, col: 7, offset: 152542},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 5071, col: 13, offset: 152548},
						val:        "as",
						ignoreCase: true,
						want:       "\"AS\"i",
					},
					&ruleRefExpr{
						pos:  position{line: 5071, col: 19, offset: 152554},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 5072, col: 1, offset: 152580},
			expr: &seqExpr{
				pos: position{line: 5072, col: 7, offset: 152586},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 5072, col: 7, offset: 152586},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 5072, col: 13, offset: 152592},
						val:        "by",
						ignoreCase: true,
						want:       "\"BY\"i",
					},
					&ruleRefExpr{
						pos:  position{line: 5072, col: 19, offset: 152598},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "EQUAL",
			pos:  position{line: 5074, col: 1, offset: 152625},
			expr: &seqExpr{
				pos: position{line: 5074, col: 10, offset: 152634},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 5074, col: 10, offset: 152634},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 5074, col: 25, offset: 152649},
						val:        "=",
						ignoreCase: false,
						want:       "\"=\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5074, col: 29, offset: 152653},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "COMMA",
			pos:  position{line: 5075, col: 1, offset: 152668},
			expr: &seqExpr{
				pos: position{line: 5075, col: 10, offset: 152677},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 5075, col: 10, offset: 152677},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 5075, col: 25, offset: 152692},
						val:        ",",
						ignoreCase: false,
						want:       "\",\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5075, col: 29, offset: 152696},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "L_PAREN",
			pos:  position{line: 5076, col: 1, offset: 152711},
			expr: &seqExpr{
				pos: position{line: 5076, col: 12, offset: 152722},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5076, col: 12, offset: 152722},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5076, col: 16, offset: 152726},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "R_PAREN",
			pos:  position{line: 5077, col: 1, offset: 152741},
			expr: &seqExpr{
				pos: position{line: 5077, col: 12, offset: 152752},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 5077, col: 12, offset: 152752},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 5077, col: 27, offset: 152767},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 5079, col: 1, offset: 152772},
			expr: &notExpr{
				pos: position{line: 5079, col: 8, offset: 152779},
				expr: &anyMatcher{
					line: 5079, col: 9, offset: 152780,
				},
			},
		},
		{
			name: "WHITESPACE",
			pos:  position{line: 5080, col: 1, offset: 152782},
			expr: &choiceExpr{
				pos: position{line: 5080, col: 15, offset: 152796},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 5080, col: 15, offset: 152796},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&litMatcher{
						pos:        position{line: 5080, col: 21, offset: 152802},
						val:        "\t",
						ignoreCase: false,
						want:       "\"\\t\"",
					},
					&litMatcher{
						pos:        position{line: 5080, col: 28, offset: 152809},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
					&litMatcher{
						pos:        position{line: 5080, col: 35, offset: 152816},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
				},
			},
		},
		{
			name: "SPACE",
			pos:  position{line: 5081, col: 1, offset: 152821},
			expr: &choiceExpr{
				pos: position{line: 5081, col: 10, offset: 152830},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 5081, col: 11, offset: 152831},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 5081, col: 11, offset: 152831},
								expr: &ruleRefExpr{
									pos:  position{line: 5081, col: 11, offset: 152831},
									name: "WHITESPACE",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 5081, col: 23, offset: 152843},
								name: "COMMENT",
							},
							&zeroOrOneExpr{
								pos: position{line: 5081, col: 31, offset: 152851},
								expr: &ruleRefExpr{
									pos:  position{line: 5081, col: 31, offset: 152851},
									name: "WHITESPACE",
								},
							},
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 5081, col: 46, offset: 152866},
						expr: &ruleRefExpr{
							pos:  position{line: 5081, col: 46, offset: 152866},
							name: "WHITESPACE",
						},
					},
				},
			},
		},
		{
			name: "COMMENT",
			pos:  position{line: 5082, col: 1, offset: 152878},
			expr: &seqExpr{
				pos: position{line: 5082, col: 12, offset: 152889},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5082, col: 12, offset: 152889},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 5082, col: 18, offset: 152895},
						expr: &seqExpr{
							pos: position{line: 5082, col: 19, offset: 152896},
							exprs: []any{
								&notExpr{
									pos: position{line: 5082, col: 19, offset: 152896},
									expr: &litMatcher{
										pos:        position{line: 5082, col: 21, offset: 152898},
										val:        "```",
										ignoreCase: false,
										want:       "\"```\"",
									},
								},
								&anyMatcher{
									line: 5082, col: 28, offset: 152905,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 5082, col: 32, offset: 152909},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
				},
			},
		},
		{
			name: "EMPTY_OR_SPACE",
			pos:  position{line: 5083, col: 1, offset: 152915},
			expr: &choiceExpr{
				pos: position{line: 5083, col: 20, offset: 152934},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 5083, col: 20, offset: 152934},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 5083, col: 28, offset: 152942},
						val:        "",
						ignoreCase: false,
						want:       "\"\"",
					},
				},
			},
		},
		{
			name: "SPACE_OR_COMMA",
			pos:  position{line: 5084, col: 1, offset: 152945},
			expr: &choiceExpr{
				pos: position{line: 5084, col: 19, offset: 152963},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 5084, col: 19, offset: 152963},
						name: "COMMA",
					},
					&ruleRefExpr{
						pos:  position{line: 5084, col: 27, offset: 152971},
						name: "SPACE",
					},
				},
			},
		},
	},
}

func (c *current) onStart1(initialSearch, filterBlocks, queryAggBlocks any) (any, error) {
	var q ast.QueryStruct
	q.SearchFilter = initialSearch.(*ast.Node)

	// Join the InitialSearchBlock with the FilterBlocks with AND nodes. For a
	// search like "A | B | C | D" we should generate the node structure below
	// so that when we run the search it evaluates A first.
	//
	//      AND
	//     /   \
	//    A     AND
	//         /   \
	//        B     AND
	//             /   \
	//            C     D

	filterBlocksSlice := filterBlocks.([]any)
	switch len(filterBlocksSlice) {
	case 0:
		q.SearchFilter = initialSearch.(*ast.Node)
	case 1:
		q.SearchFilter = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     initialSearch.(*ast.Node),
			Right:    filterBlocksSlice[0].(*ast.Node),
		}
	default: // len > 1
		// Iterate backwards so we build the node structure mentioned above.
		root := filterBlocksSlice[len(filterBlocksSlice)-1].(*ast.Node)
		for i := len(filterBlocksSlice) - 2; i > -1; i-- {
			newRoot := &ast.Node{
				NodeType: ast.NodeAnd,
				Left:     filterBlocksSlice[i].(*ast.Node),
				Right:    root,
			}

			root = newRoot
		}

		q.SearchFilter = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     initialSearch.(*ast.Node),
			Right:    root,
		}
	}

	if queryAggBlocks != nil {
		queryAggSlice := queryAggBlocks.([]any)

		if len(queryAggSlice) > 0 {
			// Chain together all QueryAggergators.
			q.PipeCommands = queryAggSlice[0].(*structs.QueryAggregators)

			// Go to the end of the first chain.
			curQueryAgg := q.PipeCommands
			for ; curQueryAgg.Next != nil; curQueryAgg = curQueryAgg.Next {
			}

			// Link the remaining chains.
			for i := range queryAggSlice[1:] {
				queryAgg := queryAggSlice[i+1].(*structs.QueryAggregators)
				curQueryAgg.Next = queryAgg

				// Go to the end of this chain.
				for ; curQueryAgg.Next != nil; curQueryAgg = curQueryAgg.Next {
				}
			}
		}
	}

	return q, nil
}

func (p *parser) callonStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStart1(stack["initialSearch"], stack["filterBlocks"], stack["queryAggBlocks"])
}

func (c *current) onInitialSearchBlock1(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonInitialSearchBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialSearchBlock1(stack["clause"])
}

func (c *current) onSearchBlock1(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonSearchBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBlock1(stack["clause"])
}

func (c *current) onFilterBlock1(block any) (any, error) {
	return block, nil
}

func (p *parser) callonFilterBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterBlock1(stack["block"])
}

func (c *current) onQueryAggergatorBlock1(block any) (any, error) {
	queryAgg := block.(*structs.QueryAggregators)
	return queryAgg, nil
}

func (p *parser) callonQueryAggergatorBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQueryAggergatorBlock1(stack["block"])
}

func (c *current) onFieldSelectBlock1(op, fields any) (any, error) {
	columnsRequest := &structs.ColumnsRequest{}
	if op == nil || string(op.([]byte)) == "+" {
		columnsRequest.IncludeColumns = fields.([]string)
	} else {
		columnsRequest.ExcludeColumns = fields.([]string)
	}

	queryAggregator := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			OutputColumns: columnsRequest,
		},
	}

	return queryAggregator, nil
}

func (p *parser) callonFieldSelectBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldSelectBlock1(stack["op"], stack["fields"])
}

func (c *current) onCommonAggregatorBlock1(aggs, byFields any) (any, error) {
	aggNode := &structs.QueryAggregators{}

	// Extract the MeasureAggregators and check if any of the aggregation fields
	// need to be renamed.
	aggsSlice := aggs.([]*aggregator)
	measureAggs := make([]*structs.MeasureAggregator, len(aggsSlice))
	columnsRequest := &structs.ColumnsRequest{}
	columnsRequest.RenameAggregationColumns = make(map[string]string, 0)

	for i, agg := range aggsSlice {
		measureAggs[i] = agg.measureAgg

		if agg.renameOutputField {
			columnsRequest.RenameAggregationColumns[measureAggs[i].String()] = agg.outputFieldNewName
		}
	}

	// If any agg field was renamed, make a QueryAggregators for all the renames.
	if len(columnsRequest.RenameAggregationColumns) > 0 {
		renameNode := &structs.QueryAggregators{
			PipeCommandType: structs.OutputTransformType,
			OutputTransforms: &structs.OutputTransforms{
				OutputColumns: columnsRequest,
			},
		}

		aggNode.Next = renameNode
	}

	if byFields == nil {
		aggNode.PipeCommandType = structs.MeasureAggsType
		aggNode.MeasureOperations = measureAggs
	} else {
		aggNode.PipeCommandType = structs.GroupByType
		aggNode.GroupByRequest = &structs.GroupByRequest{
			MeasureOperations: measureAggs,
			GroupByColumns:    byFields.([]string),
		}
		aggNode.BucketLimit = query.MAX_GRP_BUCKS
	}

	return aggNode, nil
}

func (p *parser) callonCommonAggregatorBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommonAggregatorBlock1(stack["aggs"], stack["byFields"])
}

func (c *current) onAggregatorBlock1(aggs, options any) (any, error) {
	aggNode := aggs.(*structs.QueryAggregators)

	if options != nil {
		aggNode.StatsOptions = options.(*structs.StatsOptions)
	} else {
		aggNode.StatsOptions = initializeStatsOptions()
	}

	return aggNode, nil
}

func (p *parser) callonAggregatorBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregatorBlock1(stack["aggs"], stack["options"])
}

func (c *current) onStatsOptions1(option any) (any, error) {
	//Default value
	options := initializeStatsOptions()

	optionSlice := option.([]any)
	for _, opt := range optionSlice {
		optArr := opt.([]string)
		// Check for matching option types
		switch optArr[0] {
		case "dedup_splitvals":
			dedupSplitvalsBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatsBlock: Options: invalid param for dedup_splitvals option, param: %v, err: %v", optArr[1], err)
			}
			options.DedupSplitvals = dedupSplitvalsBool
		case "partitions":
			pVal, err := strconv.ParseUint(optArr[1], 10, 64)
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatsBlock: Options: invalid param for partitions option, param: %v, err: %v", optArr[1], err)
			}
			options.Partitions = pVal
		case "allnum":
			allnumBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatsBlock: Options: invalid param for allnum option, param: %v, err: %v", optArr[1], err)
			}
			options.Allnum = allnumBool
		case "delim":
			options.Delim = optArr[1]
		default:
			return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: invalid option: %v", optArr[0])
		}
	}

	return options, nil
}

func (p *parser) callonStatsOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatsOptions1(stack["option"])
}

func (c *current) onStatsOption1(optionCMD, str any) (any, error) {
	optionArr := []string{optionCMD.(string), str.(string)}
	return optionArr, nil
}

func (p *parser) callonStatsOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatsOption1(stack["optionCMD"], stack["str"])
}

func (c *current) onStatsOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: StatsOptionCMD: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonStatsOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatsOptionCMD1(stack["option"])
}

func (c *current) onGroupbyBlock1(fields any) (any, error) {
	// Wildcard fields are not allowed. See https://docs.splunk.com/Documentation/Splunk/9.1.0/SearchReference/Stats
	for _, field := range fields.([]string) {
		if strings.Contains(field, "*") {
			return nil, errors.New("BY clause cannot contain fields with wildcards")
		}
	}

	return fields, nil
}

func (p *parser) callonGroupbyBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupbyBlock1(stack["fields"])
}

func (c *current) onStreamStatsOptionResetOnChange1(boolVal any) (any, error) {
	ssOption := &structs.StreamStatsOptions{
		ResetOnChange: boolVal.(bool),
	}
	ssOptionArg := &StreamStatsOptionArgs{
		argOption:          "reset_on_change",
		streamStatsOptions: ssOption,
	}

	return ssOptionArg, nil
}

func (p *parser) callonStreamStatsOptionResetOnChange1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStreamStatsOptionResetOnChange1(stack["boolVal"])
}

func (c *current) onStreamStatsOptionCurrent1(boolVal any) (any, error) {
	ssOption := &structs.StreamStatsOptions{
		Current: boolVal.(bool),
	}
	ssOptionArg := &StreamStatsOptionArgs{
		argOption:          "current",
		streamStatsOptions: ssOption,
	}

	return ssOptionArg, nil
}

func (p *parser) callonStreamStatsOptionCurrent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStreamStatsOptionCurrent1(stack["boolVal"])
}

func (c *current) onStreamStatsOptionGlobal1(boolVal any) (any, error) {
	// TODO: Verify if needed, in splunk it does nothing as of now based on experiments.
	ssOption := &structs.StreamStatsOptions{
		Global: boolVal.(bool),
	}
	ssOptionArg := &StreamStatsOptionArgs{
		argOption:          "global",
		streamStatsOptions: ssOption,
	}

	return ssOptionArg, nil
}

func (p *parser) callonStreamStatsOptionGlobal1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStreamStatsOptionGlobal1(stack["boolVal"])
}

func (c *current) onStreamStatsOptionAllNum1(boolVal any) (any, error) {
	// TODO: Verify if needed, in splunk it does nothing as of now based on experiments.
	ssOption := &structs.StreamStatsOptions{
		AllNum: boolVal.(bool),
	}
	ssOptionArg := &StreamStatsOptionArgs{
		argOption:          "allnum",
		streamStatsOptions: ssOption,
	}

	return ssOptionArg, nil
}

func (p *parser) callonStreamStatsOptionAllNum1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStreamStatsOptionAllNum1(stack["boolVal"])
}

func (c *current) onStreamStatsOptionWindow1(windowSize any) (any, error) {
	window, err := strconv.ParseUint(windowSize.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Invalid window size: %v, must be a positive integer", windowSize.(string))
	}
	if window > 10000 {
		return nil, fmt.Errorf("Spl peg: Invalid window size: %v, must be less than or equal to 10000", window)
	}
	ssOption := &structs.StreamStatsOptions{
		Window: window,
	}
	ssOptionArg := &StreamStatsOptionArgs{
		argOption:          "window",
		streamStatsOptions: ssOption,
	}

	return ssOptionArg, nil
}

func (p *parser) callonStreamStatsOptionWindow1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStreamStatsOptionWindow1(stack["windowSize"])
}

func (c *current) onStreamStatsOptionResetBefore1(boolExpr any) (any, error) {
	ssOption := &structs.StreamStatsOptions{
		ResetBefore: boolExpr.(*structs.BoolExpr),
	}
	ssOptionArg := &StreamStatsOptionArgs{
		argOption:          "reset_before",
		streamStatsOptions: ssOption,
	}

	return ssOptionArg, nil
}

func (p *parser) callonStreamStatsOptionResetBefore1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStreamStatsOptionResetBefore1(stack["boolExpr"])
}

func (c *current) onStreamStatsOptionResetAfter1(boolExpr any) (any, error) {
	ssOption := &structs.StreamStatsOptions{
		ResetAfter: boolExpr.(*structs.BoolExpr),
	}
	ssOptionArg := &StreamStatsOptionArgs{
		argOption:          "reset_after",
		streamStatsOptions: ssOption,
	}

	return ssOptionArg, nil
}

func (p *parser) callonStreamStatsOptionResetAfter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStreamStatsOptionResetAfter1(stack["boolExpr"])
}

func (c *current) onStreamStatsOptionTimeWindow1(spanLength any) (any, error) {
	spanLen := spanLength.(*structs.BinSpanLength)
	if spanLen.TimeScale == utils.TMInvalid {
		return nil, fmt.Errorf("Invalid Syntax, time_window option cannot be used without time scale")
	}
	ssOption := &structs.StreamStatsOptions{
		TimeWindow: spanLen,
	}
	ssOptionArg := &StreamStatsOptionArgs{
		argOption:          "time_window",
		streamStatsOptions: ssOption,
	}

	return ssOptionArg, nil
}

func (p *parser) callonStreamStatsOptionTimeWindow1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStreamStatsOptionTimeWindow1(stack["spanLength"])
}

func (c *current) onStreamStatsOption1(ssOption any) (any, error) {
	return ssOption, nil
}

func (p *parser) callonStreamStatsOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStreamStatsOption1(stack["ssOption"])
}

func (c *current) onStreamStatsOptionList1(first, rest any) (any, error) {
	restSlice := rest.([]any)
	optionWasSpecified := make(map[string]bool)

	numOptions := 1 + len(restSlice)

	ssOption := initializeStreamStatsOptions()

	for i := 0; i < numOptions; i++ {
		var ssOptArg *StreamStatsOptionArgs
		if i == 0 {
			ssOptArg = first.(*StreamStatsOptionArgs)
		} else {
			separator := restSlice[i-1].([]any)
			ssOptArg = separator[1].(*StreamStatsOptionArgs)
		}

		argOption := ssOptArg.argOption
		val, exist := optionWasSpecified[argOption]
		if exist && val {
			return nil, fmt.Errorf("Invalid Syntax, option: %v is already specified", argOption)
		}
		optionWasSpecified[argOption] = true

		switch argOption {
		case "reset_on_change":
			ssOption.ResetOnChange = ssOptArg.streamStatsOptions.ResetOnChange
		case "current":
			ssOption.Current = ssOptArg.streamStatsOptions.Current
		case "global":
			ssOption.Global = ssOptArg.streamStatsOptions.Global
		case "allnum":
			ssOption.AllNum = ssOptArg.streamStatsOptions.AllNum
		case "window":
			ssOption.Window = ssOptArg.streamStatsOptions.Window
		case "time_window":
			ssOption.TimeWindow = ssOptArg.streamStatsOptions.TimeWindow
		case "reset_before":
			ssOption.ResetBefore = ssOptArg.streamStatsOptions.ResetBefore
		case "reset_after":
			ssOption.ResetAfter = ssOptArg.streamStatsOptions.ResetAfter
		default:
			return nil, fmt.Errorf("Not a Valid Streamstats Command Option: %v", argOption)
		}
	}

	timeWindowSpecified, exist := optionWasSpecified["time_window"]
	if exist && timeWindowSpecified {
		if !ssOption.Current {
			return nil, fmt.Errorf("Invalid Syntax, current cannot be set to false with time_window option")
		}
		if !ssOption.Global {
			return nil, fmt.Errorf("Invalid Syntax, global cannot be set to false with time_window option")
		}
	}

	return ssOption, nil
}

func (p *parser) callonStreamStatsOptionList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStreamStatsOptionList1(stack["first"], stack["rest"])
}

func (c *current) onStreamStatsBlock2(ssOptionList, aggs any) (any, error) {
	aggNode := aggs.(*structs.QueryAggregators)

	aggNode.StreamStatsOptions = ssOptionList.(*structs.StreamStatsOptions)

	return aggNode, nil
}

func (p *parser) callonStreamStatsBlock2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStreamStatsBlock2(stack["ssOptionList"], stack["aggs"])
}

func (c *current) onStreamStatsBlock11(aggs any) (any, error) {
	aggNode := aggs.(*structs.QueryAggregators)

	aggNode.StreamStatsOptions = initializeStreamStatsOptions()

	return aggNode, nil
}

func (p *parser) callonStreamStatsBlock11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStreamStatsBlock11(stack["aggs"])
}

func (c *current) onRegexBlock1(keyAndOp, str any) (any, error) {
	var key, op string
	if keyAndOp == nil {
		key = "*"
		op = "="
	} else {
		keyAndOpSlice := keyAndOp.([]any)
		key = keyAndOpSlice[0].(string)
		op = keyAndOpSlice[1].(string)
	}

	// Remove the quotation marks.
	regex := str.(string)
	regex = regex[1 : len(regex)-1]

	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:           op,
			Field:        key,
			Values:       regex,
			ValueIsRegex: true,
		},
	}

	return node, nil
}

func (p *parser) callonRegexBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexBlock1(stack["keyAndOp"], stack["str"])
}

func (c *current) onClauseLevel41(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*ast.Node)
	for _, v := range rest.([]any) {
		parts := v.([]any) // This will be [(AND / SPACE), ClauseLevel3].
		cur = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     cur,
			Right:    parts[1].(*ast.Node),
		}
	}

	return cur, nil
}

func (p *parser) callonClauseLevel41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel41(stack["first"], stack["rest"])
}

func (c *current) onClauseLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*ast.Node)
	for _, v := range rest.([]any) {
		parts := v.([]any) // This will be [OR, ClauseLevel2].
		cur = &ast.Node{
			NodeType: ast.NodeOr,
			Left:     cur,
			Right:    parts[1].(*ast.Node),
		}
	}

	return cur, nil
}

func (p *parser) callonClauseLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel31(stack["first"], stack["rest"])
}

func (c *current) onClauseLevel22(notList, first any) (any, error) {
	// There's an issue with how queries with AST Not nodes are run, so use
	// De Morgan's law to manipulate the expression.
	node := first.(*ast.Node)
	numNots := len(notList.([]any))

	if numNots%2 == 1 {
		deMorgansLaw(node)
	}

	return node, nil
}

func (p *parser) callonClauseLevel22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel22(stack["notList"], stack["first"])
}

func (c *current) onClauseLevel29(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonClauseLevel29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel29(stack["clause"])
}

func (c *current) onClauseLevel12(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonClauseLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel12(stack["clause"])
}

func (c *current) onClauseLevel18(term any) (any, error) {
	return term, nil
}

func (p *parser) callonClauseLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel18(stack["term"])
}

func (c *current) onSearchTerm1(term any) (any, error) {
	return term, nil
}

func (p *parser) callonSearchTerm1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchTerm1(stack["term"])
}

func (c *current) onTimechartBlock1(tcArgs, limitExpr any) (any, error) {
	aggNode := &structs.QueryAggregators{}

	columnsRequest := &structs.ColumnsRequest{}
	columnsRequest.RenameAggregationColumns = make(map[string]string, 0)
	measureAggs := make([]*structs.MeasureAggregator, 0)

	timechartExpr := &structs.TimechartExpr{}
	byField := ""

	if tcArgs == nil {
		return nil, fmt.Errorf("spl peg: timechart: either single-agg or eval-expression by split-by-clause is required")
	}

	timechartArgs := tcArgs.(*TimechartArgs)

	// TODO: Should add || timechartArgs.evalExpr == nil
	if timechartArgs.singleAggExpr == nil {
		return nil, fmt.Errorf("spl peg: timechart: either single-agg or eval-expression by split-by-clause is required")
	}

	var bOptions *structs.BinOptions

	if timechartArgs.tcOptions != nil {
		if timechartArgs.tcOptions.BinOptions != nil {
			bOptions = timechartArgs.tcOptions.BinOptions
		}
	}

	if timechartArgs.singleAggExpr != nil {
		singleAgg := &structs.SingleAgg{}
		aggTemp := timechartArgs.singleAggExpr

		for i, agg := range aggTemp.aggregators {
			measureAggs = append(measureAggs, agg.measureAgg)

			if agg.renameOutputField {
				measureAggs[i].StrEnc = agg.outputFieldNewName
			}
		}

		singleAgg.MeasureOperations = measureAggs
		timechartExpr.SingleAgg = singleAgg

		if aggTemp.SplitByClause != nil {
			byField = aggTemp.SplitByClause.Field
		}
	}

	// TODO: if timechartArgs.evalExpr != nil {}

	aggNode.PipeCommandType = structs.GroupByType
	aggNode.GroupByRequest = &structs.GroupByRequest{
		MeasureOperations: measureAggs,
		GroupByColumns:    []string{"timestamp"},
	}
	aggNode.BucketLimit = query.MAX_GRP_BUCKS

	if bOptions == nil {
		bOptions = &structs.BinOptions{
			SpanOptions: &structs.SpanOptions{
				DefaultSettings: true,
				SpanLength: &structs.SpanLength{
					Num:       1,
					TimeScalr: utils.TMMinute,
				},
			},
		}
	}

	var limitExprTmp *structs.LimitExpr
	if limitExpr != nil {
		limitExprTmp = limitExpr.(*structs.LimitExpr)
		if len(measureAggs) > 1 {
			limitExprTmp.LimitScoreMode = structs.LSMByFreq
		}
	}

	timeBucket := aggregations.InitTimeBucket(bOptions.SpanOptions.SpanLength.Num, bOptions.SpanOptions.SpanLength.TimeScalr, byField, limitExprTmp, len(measureAggs))
	aggNode.TimeHistogram = timeBucket

	return aggNode, nil
}

func (p *parser) callonTimechartBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimechartBlock1(stack["tcArgs"], stack["limitExpr"])
}

func (c *current) onTimechartArgumentsList1(first, rest any) (any, error) {
	restSlice := rest.([]any)
	timechartArgs := &TimechartArgs{}

	numArgs := 1 + len(restSlice)

	for i := 0; i < numArgs; i++ {

		var numArg interface{}

		if i == 0 {
			numArg = first
		} else {
			numArg = restSlice[i-1].([]any)[1]
		}

		switch numArg.(type) {
		case *singleAggTemp:
			timechartArgs.singleAggExpr = numArg.(*singleAggTemp)
		case *structs.TcOptions:
			timechartArgs.tcOptions = numArg.(*structs.TcOptions)
		default:
			return nil, fmt.Errorf("Spl peg: Timechart: invalid timechart argument: %v", numArg)
		}
	}

	return timechartArgs, nil
}

func (p *parser) callonTimechartArgumentsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimechartArgumentsList1(stack["first"], stack["rest"])
}

func (c *current) onTimechartArgument1(tcArg any) (any, error) {
	return tcArg, nil
}

func (p *parser) callonTimechartArgument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimechartArgument1(stack["tcArg"])
}

func (c *current) onSingleAggExpr1(aggs, splitByClause any) (any, error) {
	singleAggExpr := &singleAggTemp{
		aggregators: aggs.([]*aggregator),
	}

	if splitByClause != nil {
		singleAggExpr.SplitByClause = splitByClause.(*structs.SplitByClause)
	}

	return singleAggExpr, nil
}

func (p *parser) callonSingleAggExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleAggExpr1(stack["aggs"], stack["splitByClause"])
}

func (c *current) onSplitByClause1(field any) (any, error) {
	splitByClause := &structs.SplitByClause{
		Field: field.(string),
	}

	return splitByClause, nil
}

func (p *parser) callonSplitByClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSplitByClause1(stack["field"])
}

func (c *current) onTcOptions1(option any) (any, error) {
	//Default value
	tcOptions := &structs.TcOptions{
		UseNull:  true,
		UseOther: true,
		NullStr:  "null",
		OtherStr: "other",
	}
	switch option.(type) {
	case *structs.BinOptions:
		tcOptions.BinOptions = option.(*structs.BinOptions)
	case [][]string:
		optionSlice := option.([]any)
		for _, opt := range optionSlice {
			optArr := opt.([]string)
			switch optArr[0] {
			case "usenull":
				useNullBool, err := strconv.ParseBool(optArr[1])
				if err != nil {
					return nil, fmt.Errorf("Spl peg: Timechart: TcOptions: %v", err)
				}
				tcOptions.UseNull = useNullBool
			case "useother":
				useOtherBool, err := strconv.ParseBool(optArr[1])
				if err != nil {
					return nil, fmt.Errorf("Spl peg: Timechart: TcOptions: %v", err)
				}
				tcOptions.UseOther = useOtherBool
			case "nullstr":
				tcOptions.OtherStr = optArr[1]
			case "otherstr":
				tcOptions.OtherStr = optArr[1]
			default:
				return nil, fmt.Errorf("Spl peg: Timechart: TcOptions: invalid option: %v", optArr[0])
			}
		}
	default:
		return nil, fmt.Errorf("Spl peg: Timechart: Invalid tcOptions %v", option)
	}
	return tcOptions, nil
}

func (p *parser) callonTcOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTcOptions1(stack["option"])
}

func (c *current) onTcOption1(tcOptionCMD, val any) (any, error) {
	tcOptionArr := []string{tcOptionCMD.(string), val.(string)}
	return tcOptionArr, nil
}

func (p *parser) callonTcOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTcOption1(stack["tcOptionCMD"], stack["val"])
}

func (c *current) onTcOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Timechart: TcOptionCMD: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonTcOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTcOptionCMD1(stack["option"])
}

func (c *current) onAllTimeScale1(timeUnit any) (any, error) {
	return timeUnit, nil
}

func (p *parser) callonAllTimeScale1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAllTimeScale1(stack["timeUnit"])
}

func (c *current) onBinSpanLenOption1(number, timeScale any) (any, error) {
	if timeScale != nil {
		num, err := strconv.ParseInt(number.(string), 10, 64)
		if err != nil {
			return nil, fmt.Errorf("BinSpanLenOption: Invalid Number: %v is not an integer, err: %v", number.(string), err)
		}
		if num <= 0 {
			return nil, fmt.Errorf("BinSpanLenOption: Invalid span %v, span value must be greater than 0", num)
		}

		switch timeScale.(utils.TimeUnit) {
		case utils.TMDecisecond:
			if 10%num != 0 || num >= 10 {
				return nil, fmt.Errorf("BinSpanLenOption: Invalid span for decisecond %v, span value must be less than 1 second and 1 second must be evenly divisble by span", num)
			}
		case utils.TMCentisecond:
			if 100%num != 0 || num >= 100 {
				return nil, fmt.Errorf("BinSpanLenOption: Invalid span for centisecond %v, span value must be less than 1 second and 1 second must be evenly divisble by span", num)
			}
		case utils.TMMillisecond:
			if 1000%num != 0 || num >= 1000 {
				return nil, fmt.Errorf("BinSpanLenOption: Invalid span for millisecond %v, span value must be less than 1 second and 1 second must be evenly divisble by span", num)
			}
		case utils.TMMicrosecond:
			return nil, fmt.Errorf("BinSpanLenOption: Invalid span microsecond is not supported!")
		case utils.TMMonth:
			if num > 12 || 12%num != 0 {
				return nil, fmt.Errorf("BinSpanLenOption: Invalid span for month %v, span value must be less or equal to 1 year and 1 year must be evenly divisble by span", num)
			}
		case utils.TMQuarter:
			if num > 4 || 4%num != 0 {
				return nil, fmt.Errorf("BinSpanLenOption: Invalid span for quarter %v, span value must be less or equal to 1 year and 1 year must be evenly divisble by span", num)
			}
		}

		spanLength := &structs.BinSpanLength{
			Num:       float64(num),
			TimeScale: timeScale.(utils.TimeUnit),
		}

		return spanLength, nil
	}

	num, err := strconv.ParseFloat(number.(string), 64)
	if err != nil {
		return nil, fmt.Errorf("BinSpanLenOption: Invalid Number: %v is not a numerical value, err: %v", number.(string), err)
	}
	if num <= 0.0 {
		return nil, fmt.Errorf("BinSpanLenOption: Invalid span %v, span value must be greater than 0", num)
	}

	spanLength := &structs.BinSpanLength{
		Num:       num,
		TimeScale: utils.TMInvalid,
	}

	return spanLength, nil
}

func (p *parser) callonBinSpanLenOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinSpanLenOption1(stack["number"], stack["timeScale"])
}

func (c *current) onBinOptionMinSpan1(spanLength any) (any, error) {

	binOptionArgs := &BinOptionArgs{
		argOption: "minspan",
		binOptions: &structs.BinCmdOptions{
			MinSpan: spanLength.(*structs.BinSpanLength),
		},
	}
	return binOptionArgs, nil
}

func (p *parser) callonBinOptionMinSpan1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptionMinSpan1(stack["spanLength"])
}

func (c *current) onBinOptionMaxBins1(intAsStr any) (any, error) {
	numBins, err := strconv.ParseUint(intAsStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid limit (%v): %v", intAsStr.(string), err)
	}
	if numBins < 2 || numBins > 50000 {
		return nil, fmt.Errorf("Invalid number of bins %v: must be between 2 and 50000", numBins)
	}
	binOptionArgs := &BinOptionArgs{
		argOption: "bins",
		binOptions: &structs.BinCmdOptions{
			MaxBins: numBins,
		},
	}
	return binOptionArgs, nil
}

func (p *parser) callonBinOptionMaxBins1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptionMaxBins1(stack["intAsStr"])
}

func (c *current) onBinOptionAlignTime2(utcEpoch any) (any, error) {
	epoch, err := strconv.ParseUint(utcEpoch.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Invalid utc epoch value: %v for align time", utcEpoch.(string))
	}
	binOptionArgs := &BinOptionArgs{
		argOption: "aligntime",
		binOptions: &structs.BinCmdOptions{
			AlignTime: &epoch,
		},
	}

	return binOptionArgs, nil
}

func (p *parser) callonBinOptionAlignTime2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptionAlignTime2(stack["utcEpoch"])
}

func (c *current) onBinOptionAlignTime8(timestamp any) (any, error) {
	var epoch uint64 = 0
	var err error
	relTimeModifier := timestamp.(ast.TimeModifier)
	epochVal, err := CalculateRelativeTime(relTimeModifier, time.Now())
	epoch = uint64(epochVal)
	if err != nil {
		return nil, err
	}

	binOptionArgs := &BinOptionArgs{
		argOption: "aligntime",
		binOptions: &structs.BinCmdOptions{
			AlignTime: &epoch,
		},
	}

	return binOptionArgs, nil
}

func (p *parser) callonBinOptionAlignTime8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptionAlignTime8(stack["timestamp"])
}

func (c *current) onBinOptionStart1(number any) (any, error) {
	start, err := strconv.ParseFloat(number.(string), 64)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Cannot convert %v to float", number.(string))
	}
	binOptionArgs := &BinOptionArgs{
		argOption: "start",
		binOptions: &structs.BinCmdOptions{
			Start: &start,
		},
	}

	return binOptionArgs, nil
}

func (p *parser) callonBinOptionStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptionStart1(stack["number"])
}

func (c *current) onBinOptionEnd1(number any) (any, error) {
	end, err := strconv.ParseFloat(number.(string), 64)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Cannot convert %v to float", number.(string))
	}
	binOptionArgs := &BinOptionArgs{
		argOption: "end",
		binOptions: &structs.BinCmdOptions{
			End: &end,
		},
	}

	return binOptionArgs, nil
}

func (p *parser) callonBinOptionEnd1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptionEnd1(stack["number"])
}

func (c *current) onBinOptionSpan2(num1, num2 any) (any, error) {
	var coeff float64 = 1.0
	var base float64 = 10.0
	var err error

	if num2 != nil {
		base, err = strconv.ParseFloat(num2.(string), 64)
		if err != nil {
			return nil, fmt.Errorf("Spl peg: Invalid base in log span, %v cannot be converted to floar, err: %v", num2.(string), err)
		}
		if base <= 1.0 {
			return nil, fmt.Errorf("Spl peg: Invalid base in log span, base must be greater than 1")
		}
	}

	if num1 != nil {
		coeff, err = strconv.ParseFloat(num1.(string), 64)
		if err != nil {
			return nil, fmt.Errorf("Spl peg: Invalid coefficient in log span, %v cannot be converted to float, err: %v", num1.(string), err)
		}
		if coeff < 1.0 {
			return nil, fmt.Errorf("Spl peg: Invalid coefficient in log span, coefficient must be greater than or equal to 1")
		}
		if coeff >= base {
			return nil, fmt.Errorf("Spl peg: Invalid coefficient in log span, coefficient must be less than base")
		}
	}

	logSpan := &structs.LogSpan{
		Coefficient: coeff,
		Base:        base,
	}
	spanOptions := &structs.BinSpanOptions{
		LogSpan: logSpan,
	}
	binOptionArgs := &BinOptionArgs{
		argOption: "span",
		binOptions: &structs.BinCmdOptions{
			BinSpanOptions: spanOptions,
		},
	}
	return binOptionArgs, nil
}

func (p *parser) callonBinOptionSpan2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptionSpan2(stack["num1"], stack["num2"])
}

func (c *current) onBinOptionSpan17(spanLen any) (any, error) {

	spanOptions := &structs.BinSpanOptions{
		BinSpanLength: spanLen.(*structs.BinSpanLength),
	}

	binOptionArgs := &BinOptionArgs{
		argOption: "span",
		binOptions: &structs.BinCmdOptions{
			BinSpanOptions: spanOptions,
		},
	}
	return binOptionArgs, nil
}

func (p *parser) callonBinOptionSpan17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptionSpan17(stack["spanLen"])
}

func (c *current) onBinCmdOption1(option any) (any, error) {
	return option, nil
}

func (p *parser) callonBinCmdOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinCmdOption1(stack["option"])
}

func (c *current) onBinCmdOptionsList1(first, rest any) (any, error) {
	restSlice := rest.([]any)
	optionWasSpecified := make(map[string]bool)

	numOptions := 1 + len(restSlice)

	binCmdOption := &structs.BinCmdOptions{}

	for i := 0; i < numOptions; i++ {
		var binOptArg *BinOptionArgs
		if i == 0 {
			binOptArg = first.(*BinOptionArgs)
		} else {
			separator := restSlice[i-1].([]any)
			binOptArg = separator[1].(*BinOptionArgs)
		}

		argOption := binOptArg.argOption
		val, exist := optionWasSpecified[argOption]
		if exist && val {
			return nil, fmt.Errorf("Invalid Syntax, option: %v is already specified", argOption)
		}
		optionWasSpecified[argOption] = true

		switch argOption {
		case "minspan":
			binCmdOption.MinSpan = binOptArg.binOptions.MinSpan
		case "span":
			binCmdOption.BinSpanOptions = binOptArg.binOptions.BinSpanOptions
		case "bins":
			binCmdOption.MaxBins = binOptArg.binOptions.MaxBins
		case "start":
			binCmdOption.Start = binOptArg.binOptions.Start
		case "end":
			binCmdOption.End = binOptArg.binOptions.End
		case "aligntime":
			binCmdOption.AlignTime = binOptArg.binOptions.AlignTime
		default:
			return nil, fmt.Errorf("Not a Valid Bin Command Option: %v", argOption)
		}
	}

	return binCmdOption, nil
}

func (p *parser) callonBinCmdOptionsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinCmdOptionsList1(stack["first"], stack["rest"])
}

func (c *current) onBinBlock2(binCmdOption, field, newFieldName any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		NewColName: field.(string),
	}
	if newFieldName != nil {
		letColReq.NewColName = newFieldName.(string)
	}

	letColReq.BinRequest = binCmdOption.(*structs.BinCmdOptions)
	if letColReq.BinRequest.MaxBins == 0 {
		letColReq.BinRequest.MaxBins = 100
	}
	letColReq.BinRequest.Field = field.(string)

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return queryAgg, nil
}

func (p *parser) callonBinBlock2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinBlock2(stack["binCmdOption"], stack["field"], stack["newFieldName"])
}

func (c *current) onBinBlock14(field, newFieldName any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		NewColName: field.(string),
	}
	if newFieldName != nil {
		letColReq.NewColName = newFieldName.(string)
	}

	binCmdOption := &structs.BinCmdOptions{
		MaxBins: 100,
	}

	letColReq.BinRequest = binCmdOption
	letColReq.BinRequest.Field = field.(string)

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return queryAgg, nil
}

func (p *parser) callonBinBlock14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinBlock14(stack["field"], stack["newFieldName"])
}

func (c *current) onBinOptions1(spanOptions any) (any, error) {
	binOptions := &structs.BinOptions{
		SpanOptions: spanOptions.(*structs.SpanOptions),
	}
	return binOptions, nil
}

func (p *parser) callonBinOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptions1(stack["spanOptions"])
}

func (c *current) onSpanOptions1(spanLength any) (any, error) {
	spanOptions := &structs.SpanOptions{
		SpanLength: spanLength.(*structs.SpanLength),
	}
	return spanOptions, nil
}

func (p *parser) callonSpanOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpanOptions1(stack["spanLength"])
}

func (c *current) onSpanLength1(intAsStr, timeScale any) (any, error) {
	if timeScale.(utils.TimeUnit) == utils.TMYear {
		return nil, fmt.Errorf("SpanLength: Invalid time unit, year is not supported")
	}
	num, err := strconv.Atoi(intAsStr.(string))
	if err != nil {
		return nil, fmt.Errorf("SpanLength: Invalid num (%v): %v", intAsStr.(string), err)
	}

	spanLength := &structs.SpanLength{
		Num:       num,
		TimeScalr: timeScale.(utils.TimeUnit),
	}
	return spanLength, nil
}

func (p *parser) callonSpanLength1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpanLength1(stack["intAsStr"], stack["timeScale"])
}

func (c *current) onLimitExpr1(sortBy, intAsStr any) (any, error) {
	num, err := strconv.Atoi(intAsStr.(string))
	if err != nil {
		return nil, fmt.Errorf("SpanLength: Invalid num (%v): %v", intAsStr.(string), err)
	}

	limitExpr := &structs.LimitExpr{
		IsTop: true, // Default Value
		Num:   num,
	}

	if sortBy != nil {
		sortByStr, err := transferUint8ToString(sortBy)
		if err != nil {
			return nil, fmt.Errorf("Spl peg: Timechart: %v", err)
		}
		if sortByStr == "bottom" {
			limitExpr.IsTop = false
		}
	}

	return limitExpr, nil
}

func (p *parser) callonLimitExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitExpr1(stack["sortBy"], stack["intAsStr"])
}

func (c *current) onStatisticBlock1(statisticExpr any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		StatisticColRequest: statisticExpr.(*structs.StatisticExpr),
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	measureAgg := &structs.MeasureAggregator{
		MeasureCol:  "*",
		MeasureFunc: utils.Count,
	}

	measureOperations := make([]*structs.MeasureAggregator, 1)
	measureOperations[0] = measureAgg

	groupByColumns := append(statisticExpr.(*structs.StatisticExpr).FieldList, statisticExpr.(*structs.StatisticExpr).ByClause...)

	aggNode := &structs.QueryAggregators{}
	aggNode.Next = root
	aggNode.PipeCommandType = structs.GroupByType
	aggNode.GroupByRequest = &structs.GroupByRequest{
		MeasureOperations: measureOperations,
		GroupByColumns:    groupByColumns,
	}

	return aggNode, nil
}

func (p *parser) callonStatisticBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticBlock1(stack["statisticExpr"])
}

func (c *current) onStatisticExpr1(cmd, limit, fieldList, byClause, options any) (any, error) {

	statisticExpr := &structs.StatisticExpr{
		FieldList: fieldList.([]interface{})[1].([]string),
	}

	statisticCmd, err := transferUint8ToString(cmd)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: StatisticExpr: %v", err)
	}

	if statisticCmd == "top" {
		statisticExpr.StatisticFunctionMode = structs.SFMTop
	} else {
		statisticExpr.StatisticFunctionMode = structs.SFMRare
	}

	if limit != nil {
		statisticExpr.Limit = limit.(string)
	}

	if options != nil {
		statisticExpr.StatisticOptions = options.(*structs.StatisticOptions)
	} else {
		statisticExpr.StatisticOptions = &structs.StatisticOptions{
			ShowCount:    true,
			CountField:   "count",
			ShowPerc:     true,
			PercentField: "percent",
			UseOther:     false,
			OtherStr:     "Other",
		}
	}

	if byClause != nil {
		statisticExpr.ByClause = byClause.([]string)
	}

	return statisticExpr, nil
}

func (p *parser) callonStatisticExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticExpr1(stack["cmd"], stack["limit"], stack["fieldList"], stack["byClause"], stack["options"])
}

func (c *current) onStatisticLimit2(number any) (any, error) {
	return number.(string), nil
}

func (p *parser) callonStatisticLimit2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticLimit2(stack["number"])
}

func (c *current) onStatisticLimit7(limit any) (any, error) {
	return limit.(string), nil
}

func (p *parser) callonStatisticLimit7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticLimit7(stack["limit"])
}

func (c *current) onStatisticOptions1(option any) (any, error) {
	//Default value
	options := &structs.StatisticOptions{
		ShowCount:    true,
		CountField:   "count",
		ShowPerc:     true,
		PercentField: "percent",
		UseOther:     false,
		OtherStr:     "other",
	}

	optionSlice := option.([]any)
	for _, opt := range optionSlice {
		optArr := opt.([]string)
		// Check for matching option types
		switch optArr[0] {
		case "showcount":
			showCountBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.ShowCount = showCountBool
		case "countfield":
			options.CountField = optArr[1]
		case "showperc":
			showPercBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.ShowPerc = showPercBool
		case "percentfield":
			options.PercentField = optArr[1]
		case "useother":
			useOtherBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.UseOther = useOtherBool
		case "otherstr":
			options.OtherStr = optArr[1]
		default:
			return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: invalid option")
		}
	}

	return options, nil
}

func (p *parser) callonStatisticOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticOptions1(stack["option"])
}

func (c *current) onStatisticOption1(optionCMD, field any) (any, error) {
	optionArr := []string{optionCMD.(string), field.(string)}
	return optionArr, nil
}

func (p *parser) callonStatisticOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticOption1(stack["optionCMD"], stack["field"])
}

func (c *current) onStatisticOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: StatisticExpr: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonStatisticOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticOptionCMD1(stack["option"])
}

func (c *current) onByClause2(fieldList any) (any, error) {
	return fieldList.([]string), nil
}

func (p *parser) callonByClause2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByClause2(stack["fieldList"])
}

func (c *current) onByClause7(groupByBlock any) (any, error) {
	return groupByBlock.([]string), nil
}

func (p *parser) callonByClause7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByClause7(stack["groupByBlock"])
}

func (c *current) onDedupBlock1(dedupExpr any) (any, error) {

	letColReq := &structs.LetColumnsRequest{
		DedupColRequest: dedupExpr.(*structs.DedupExpr),
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonDedupBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupBlock1(stack["dedupExpr"])
}

func (c *current) onDedupExpr1(limitArr, options1, fieldList, options2, sortByClause any) (any, error) {
	dedupExpr := &structs.DedupExpr{
		FieldList:         fieldList.([]string),
		Limit:             1,
		DedupCombinations: make(map[string]map[int][]structs.SortValue, 0),
		DedupRecords:      make(map[string]map[string]interface{}, 0),
	}

	if limitArr != nil {
		limitStr := limitArr.([]interface{})[1].(string)
		limit, err := strconv.ParseUint(limitStr, 10, 64)
		if err != nil || limit == 0 {
			return nil, fmt.Errorf("Invalid limit (%v): %v", limitStr, err)
		}
		dedupExpr.Limit = limit
	}

	dedupExpr.DedupOptions = &structs.DedupOptions{
		Consecutive: false,
		KeepEmpty:   false,
		KeepEvents:  false,
	}

	if options1 != nil {
		dedupExpr.DedupOptions = options1.(*structs.DedupOptions)
	}
	if options2 != nil {
		options := options2.(*structs.DedupOptions)

		if options.Consecutive {
			dedupExpr.DedupOptions.Consecutive = options.Consecutive
		}
		if options.KeepEmpty {
			dedupExpr.DedupOptions.KeepEmpty = options.KeepEmpty
		}
		if options.KeepEvents {
			dedupExpr.DedupOptions.KeepEvents = options.KeepEvents
		}
	}

	if sortByClause != nil {
		dedupExpr.DedupSortEles = sortByClause.([]*structs.SortElement)

		// Make the DedupSortAscending from the DedupSortEles.
		dedupExpr.DedupSortAscending = make([]int, len(dedupExpr.DedupSortEles))
		for i, ele := range dedupExpr.DedupSortEles {
			if ele.SortByAsc {
				dedupExpr.DedupSortAscending[i] = 1
			} else {
				dedupExpr.DedupSortAscending[i] = -1
			}
		}
	}

	return dedupExpr, nil
}

func (p *parser) callonDedupExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupExpr1(stack["limitArr"], stack["options1"], stack["fieldList"], stack["options2"], stack["sortByClause"])
}

func (c *current) onDedupFieldName1(field any) (any, error) {
	return field, nil
}

func (p *parser) callonDedupFieldName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupFieldName1(stack["field"])
}

func (c *current) onSpaceSeparatedFieldNameList1(first, rest any) (any, error) {
	var fields []string
	fields = append(fields, first.(string))
	for _, r := range rest.([]any) {
		// Extracting the field name from the tuple (SPACE, FieldName)
		fields = append(fields, r.([]any)[1].(string))
	}

	return fields, nil
}

func (p *parser) callonSpaceSeparatedFieldNameList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpaceSeparatedFieldNameList1(stack["first"], stack["rest"])
}

func (c *current) onDedupFieldList1(first, rest any) (any, error) {
	// Convert `rest` to a slice. Each element of the slice will be a 2-element
	// slice where the first element is " " and the second is a FieldName.
	restSlice := rest.([]any)

	numFieldNames := 1 + len(restSlice)
	fields := make([]string, numFieldNames)
	fields[0] = first.(string)

	for i := 1; i < numFieldNames; i++ {
		separatorAndField := restSlice[i-1].([]any)
		fields[i] = separatorAndField[1].(string)
	}

	return fields, nil
}

func (p *parser) callonDedupFieldList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupFieldList1(stack["first"], stack["rest"])
}

func (c *current) onDedupOptions1(option any) (any, error) {
	//Default value
	options := &structs.DedupOptions{
		Consecutive: false,
		KeepEmpty:   false,
		KeepEvents:  false,
	}

	optionSlice := option.([]any)
	for _, opt := range optionSlice {
		optArr := opt.([]string)
		// Check for matching option types
		switch optArr[0] {
		case "consecutive":
			consecutiveBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: DedupBlock: Options: %v", err)
			}
			options.Consecutive = consecutiveBool
		case "keepempty":
			keepEmptyBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: DedupBlock: Options: %v", err)
			}
			options.KeepEmpty = keepEmptyBool
		case "keepevents":
			keepEventsBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: DedupBlock: Options: %v", err)
			}
			options.KeepEvents = keepEventsBool
		default:
			return nil, fmt.Errorf("Spl peg: DedupBlock: Options: invalid option")
		}
	}

	return options, nil
}

func (p *parser) callonDedupOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupOptions1(stack["option"])
}

func (c *current) onDedupOption1(optionCMD, field any) (any, error) {
	optionArr := []string{optionCMD.(string), field.(string)}
	return optionArr, nil
}

func (p *parser) callonDedupOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupOption1(stack["optionCMD"], stack["field"])
}

func (c *current) onDedupOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: DedupExpr: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonDedupOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupOptionCMD1(stack["option"])
}

func (c *current) onDedupSortByClause1(dedupSortEles any) (any, error) {
	return dedupSortEles, nil
}

func (p *parser) callonDedupSortByClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupSortByClause1(stack["dedupSortEles"])
}

func (c *current) onSortElements1(first, rest any) (any, error) {
	restSlice := rest.([]any)

	length := 1 + len(restSlice)
	sortEles := make([]*structs.SortElement, length)
	sortEles[0] = first.(*structs.SortElement)

	for i := 1; i < length; i++ {
		elements := restSlice[i-1].([]any)
		sortEles[i] = elements[1].(*structs.SortElement)
	}

	return sortEles, nil
}

func (p *parser) callonSortElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortElements1(stack["first"], stack["rest"])
}

func (c *current) onSingleSortElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSingleSortElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleSortElement1(stack["element"])
}

func (c *current) onSingleSortElementWithoutCast1(sortBySymbol, field any) (any, error) {
	sortByAsc := true

	symbol := sortBySymbol.([]byte)
	if len(symbol) > 0 && symbol[0] == '-' {
		sortByAsc = false
	}

	return &structs.SortElement{
		SortByAsc: sortByAsc,
		Op:        "",
		Field:     field.(string),
	}, nil
}

func (p *parser) callonSingleSortElementWithoutCast1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleSortElementWithoutCast1(stack["sortBySymbol"], stack["field"])
}

func (c *current) onSingleSortElementWithCast1(sortBySymbol, op, field any) (any, error) {
	sortByAsc := true

	symbol := sortBySymbol.([]byte)
	if len(symbol) > 0 && symbol[0] == '-' {
		sortByAsc = false
	}

	opStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: singleSortElementWithCast: %v", err)
	}

	return &structs.SortElement{
		SortByAsc: sortByAsc,
		Op:        opStr,
		Field:     field.(string),
	}, nil
}

func (p *parser) callonSingleSortElementWithCast1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleSortElementWithCast1(stack["sortBySymbol"], stack["op"], stack["field"])
}

func (c *current) onRenameBlock1(renameExpr any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		RenameColRequest: renameExpr.(*structs.RenameExpr),
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonRenameBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameBlock1(stack["renameExpr"])
}

func (c *current) onRenameExpr2(originalPattern, newPattern any) (any, error) {
	renameExpr := &structs.RenameExpr{
		RenameExprMode:  structs.REMPhrase,
		OriginalPattern: originalPattern.(string),
		NewPattern:      removeQuotes(newPattern),
	}

	return renameExpr, nil
}

func (p *parser) callonRenameExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameExpr2(stack["originalPattern"], stack["newPattern"])
}

func (c *current) onRenameExpr9(originalPattern, newPattern any) (any, error) {
	isRegex, err := isRegexRename(originalPattern.(string), newPattern.(string))
	if err != nil {
		return nil, fmt.Errorf("Spl peg: RenameExpr: %v", err)
	}

	var renameExprMode structs.RenameExprMode
	if isRegex {
		renameExprMode = structs.REMRegex
	} else {
		renameExprMode = structs.REMOverride
	}

	renameExpr := &structs.RenameExpr{
		RenameExprMode:  renameExprMode,
		OriginalPattern: originalPattern.(string),
		NewPattern:      newPattern.(string),
	}

	return renameExpr, nil
}

func (p *parser) callonRenameExpr9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameExpr9(stack["originalPattern"], stack["newPattern"])
}

func (c *current) onRexBlock1(field, str any) (any, error) {
	pattern := removeQuotes(str)
	rexColNames, err := getRexColNames(pattern)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: RexBlock: %v", err)
	}
	rexExpr := &structs.RexExpr{
		FieldName:   field.(string),
		Pattern:     transferPCREToRE2(pattern),
		RexColNames: rexColNames,
	}

	letColReq := &structs.LetColumnsRequest{
		RexColRequest: rexExpr,
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonRexBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRexBlock1(stack["field"], stack["str"])
}

func (c *current) onSortBlock1(limit, sortByEles any) (any, error) {

	sortExpr := &structs.SortExpr{
		SortEles:    sortByEles.([]*structs.SortElement),
		SortRecords: make(map[string]map[string]interface{}, 0),
		Limit:       10000,
	}

	if limit != nil {
		sortExpr.Limit = limit.(uint64)
	}

	ascendingArr := make([]int, len(sortExpr.SortEles))
	for i, ele := range sortExpr.SortEles {
		if ele.SortByAsc {
			ascendingArr[i] = 1
		} else {
			ascendingArr[i] = -1
		}
	}

	sortExpr.SortAscending = ascendingArr

	letColReq := &structs.LetColumnsRequest{
		SortColRequest: sortExpr,
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonSortBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortBlock1(stack["limit"], stack["sortByEles"])
}

func (c *current) onSortLimit1(intAsStr any) (any, error) {
	limit, err := strconv.ParseUint(intAsStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid limit (%v): %v", intAsStr.(string), err)
	}

	if limit == 0 {
		limit = math.MaxUint64
	}

	return limit, nil
}

func (p *parser) callonSortLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortLimit1(stack["intAsStr"])
}

func (c *current) onEvalBlock1(first, rest any) (any, error) {
	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: first.(*structs.LetColumnsRequest),
		},
	}

	leafQueryAgg := root
	restSlice := rest.([]any)
	for i := range restSlice {
		CommaSpaceAndEval := restSlice[i].([]any)
		nextQueryAgg := &structs.QueryAggregators{
			PipeCommandType: structs.OutputTransformType,
			OutputTransforms: &structs.OutputTransforms{
				LetColumns: CommaSpaceAndEval[1].(*structs.LetColumnsRequest),
			},
		}

		leafQueryAgg.Next = nextQueryAgg
		leafQueryAgg = leafQueryAgg.Next
	}

	return root, nil
}

func (p *parser) callonEvalBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalBlock1(stack["first"], stack["rest"])
}

func (c *current) onSingleEval1(field, expr any) (any, error) {
	fieldStr := field.(string)
	if strings.Contains(fieldStr, "*") {
		return nil, fmt.Errorf("New fields must not contain wildcards; invalid field: %v", field)
	}

	letColumnsRequest := expr.(*structs.LetColumnsRequest)
	letColumnsRequest.NewColName = fieldStr

	return letColumnsRequest, nil
}

func (p *parser) callonSingleEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleEval1(stack["field"], stack["expr"])
}

func (c *current) onEvalExpression1(value any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		ValueColRequest: value.(*structs.ValueExpr),
	}

	return letColReq, nil
}

func (p *parser) callonEvalExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalExpression1(stack["value"])
}

func (c *current) onConditionExpr2(condition, trueValue, falseValue any) (any, error) {

	node := &structs.ConditionExpr{
		Op:         "if",
		BoolExpr:   condition.(*structs.BoolExpr),
		TrueValue:  trueValue.(*structs.ValueExpr),
		FalseValue: falseValue.(*structs.ValueExpr),
	}

	return node, nil
}

func (p *parser) callonConditionExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr2(stack["condition"], stack["trueValue"], stack["falseValue"])
}

func (c *current) onConditionExpr15(opName, pair, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: ConditionExpr: %v", err)
	}
	pairs := make([]*structs.ConditionValuePair, 1)
	pairs[0] = pair.(*structs.ConditionValuePair)

	if rest != nil {
		restSlice := rest.([]any)
		for i := range restSlice {
			ele := restSlice[i].([]any)
			pairs = append(pairs, ele[1].(*structs.ConditionValuePair))
		}
	}

	node := &structs.ConditionExpr{
		Op:                  opNameStr,
		ConditionValuePairs: pairs,
	}

	return node, nil
}

func (p *parser) callonConditionExpr15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr15(stack["opName"], stack["pair"], stack["rest"])
}

func (c *current) onConditionExpr30(valueExpr, rest any) (any, error) {
	restSlice := rest.([]any)
	valueList := make([]*structs.ValueExpr, 1+len(restSlice))
	valueList[0] = valueExpr.(*structs.ValueExpr)

	for i := range restSlice {
		valueAtom := restSlice[i].([]any)
		valueList[i+1] = valueAtom[1].(*structs.ValueExpr)
	}

	node := &structs.ConditionExpr{
		Op:        "coalesce",
		ValueList: valueList,
	}

	return node, nil
}

func (p *parser) callonConditionExpr30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr30(stack["valueExpr"], stack["rest"])
}

func (c *current) onConditionExpr42(leftValue, rightValue any) (any, error) {
	valueList := make([]*structs.ValueExpr, 2)
	valueList[0] = leftValue.(*structs.ValueExpr)
	valueList[1] = rightValue.(*structs.ValueExpr)

	node := &structs.ConditionExpr{
		Op:        "nullif",
		ValueList: valueList,
	}

	return node, nil
}

func (p *parser) callonConditionExpr42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr42(stack["leftValue"], stack["rightValue"])
}

func (c *current) onConditionExpr52() (any, error) {
	node := &structs.ConditionExpr{
		Op: "null",
	}
	return node, nil
}

func (p *parser) callonConditionExpr52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr52()
}

func (c *current) onConditionValuePair1(condition, value any) (any, error) {
	conditionValuePair := &structs.ConditionValuePair{
		Condition: condition.(*structs.BoolExpr),
		Value:     value.(*structs.ValueExpr),
	}
	return conditionValuePair, nil
}

func (p *parser) callonConditionValuePair1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionValuePair1(stack["condition"], stack["value"])
}

func (c *current) onTextExpr2(opName, stringExpr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:          opNameStr,
		Param:       stringExpr.(*structs.StringExpr),
		StrToRemove: "",
	}
	return node, nil
}

func (p *parser) callonTextExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr2(stack["opName"], stack["stringExpr"])
}

func (c *current) onTextExpr16(opName, firstVal, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	if rest == nil {
		return firstVal, nil
	}
	restSlice := rest.([]any)
	values := make([]*structs.StringExpr, 1+len(restSlice))
	values[0] = firstVal.(*structs.StringExpr)

	for i := range restSlice {
		stringAtom := restSlice[i].([]any)
		values[i+1] = stringAtom[1].(*structs.StringExpr)
	}
	node := &structs.TextExpr{
		Op:        opNameStr,
		ValueList: values,
	}
	return node, nil
}

func (p *parser) callonTextExpr16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr16(stack["opName"], stack["firstVal"], stack["rest"])
}

func (c *current) onTextExpr32(opName, stringExpr, delim any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:        opNameStr,
		Param:     stringExpr.(*structs.StringExpr),
		Delimiter: delim.(*structs.StringExpr),
	}
	return node, nil
}

func (p *parser) callonTextExpr32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr32(stack["opName"], stack["stringExpr"], stack["delim"])
}

func (c *current) onTextExpr45(opName, stringExpr, regexPattern any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("spl peg: TextExpr: %v", err)
	}
	regex, ok := regexPattern.(*structs.StringExpr)
	if !ok {
		return nil, fmt.Errorf("spl peg: regexPattern type assertion to StringExpr failed")
	}

	gobRegex := toputils.GobbableRegex{}
	err = gobRegex.SetRegex(regex.RawString)
	if err != nil {
		return nil, fmt.Errorf("spl peg: Regex compile: %v", err)
	}

	node := &structs.TextExpr{
		Op:    opNameStr,
		Param: stringExpr.(*structs.StringExpr),
		Regex: &gobRegex,
	}
	return node, nil
}

func (p *parser) callonTextExpr45() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr45(stack["opName"], stack["stringExpr"], stack["regexPattern"])
}

func (c *current) onTextExpr56(opName, stringExpr, startIndex, lengthParam any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	var lengthConverted *structs.NumericExpr
	if lengthParam != nil {
		lengthSlice, ok := lengthParam.([]interface{})
		if ok && len(lengthSlice) > 1 {
			length, ok := lengthSlice[1].(*structs.NumericExpr)
			if ok {
				lengthConverted = length
			} else {
				return nil, fmt.Errorf("Spl peg: TextExpr: Unable to assert length as *structs.NumericExpr")
			}
		}
	}
	node := &structs.TextExpr{
		Op:         opNameStr,
		Param:      stringExpr.(*structs.StringExpr),
		StartIndex: startIndex.(*structs.NumericExpr),
		LengthExpr: lengthConverted,
	}
	return node, nil
}

func (p *parser) callonTextExpr56() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr56(stack["opName"], stack["stringExpr"], stack["startIndex"], stack["lengthParam"])
}

func (c *current) onTextExpr72(value, format any) (any, error) {
	var formatExpr *structs.StringExpr
	if format != nil {
		formatSlice := format.([]interface{})
		formatExpr, _ = formatSlice[1].(*structs.StringExpr)
	}
	return &structs.TextExpr{
		IsTerminal: false,
		Op:         "tostring",
		Val:        value.(*structs.ValueExpr),
		Param:      formatExpr,
	}, nil
}

func (p *parser) callonTextExpr72() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr72(stack["value"], stack["format"])
}

func (c *current) onTextExpr84(opName, expr, strToRemoveExpr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}

	strToRemove := " \t"
	if strToRemoveExpr != nil {
		strToRemove = strToRemoveExpr.(string)
	}

	node := &structs.TextExpr{
		Op:          opNameStr,
		Param:       expr.(*structs.StringExpr),
		StrToRemove: removeQuotes(strToRemove),
	}

	return node, nil
}

func (p *parser) callonTextExpr84() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr84(stack["opName"], stack["expr"], stack["strToRemoveExpr"])
}

func (c *current) onTextExpr98(inputField, path any) (any, error) {
	pathExpr := path.(*SPathFieldExpr)
	return &structs.TextExpr{
		Op: "spath",
		SPathExpr: &structs.SPathExpr{
			InputColName:    inputField.(string),
			Path:            pathExpr.PathValue,
			IsPathFieldName: pathExpr.IsPathFieldName,
		},
	}, nil
}

func (p *parser) callonTextExpr98() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr98(stack["inputField"], stack["path"])
}

func (c *current) onTextExpr110(mask, ip any) (any, error) {
	return &structs.TextExpr{
		Op:    "ipmask",
		Val:   ip.(*structs.ValueExpr),
		Param: mask.(*structs.StringExpr),
	}, nil
}

func (p *parser) callonTextExpr110() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr110(stack["mask"], stack["ip"])
}

func (c *current) onTextExpr120(obj, key, value any) (any, error) {
	stringExpr := &structs.StringExpr{
		StringExprMode: structs.SEMRawStringList,
		StringList:     []string{key.(string), value.(string)},
	}
	return &structs.TextExpr{
		Op:    "object_to_array",
		Val:   obj.(*structs.ValueExpr),
		Param: stringExpr,
	}, nil
}

func (p *parser) callonTextExpr120() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr120(stack["obj"], stack["key"], stack["value"])
}

func (c *current) onTextExpr133(format, rest any) (any, error) {
	textExpr := &structs.TextExpr{
		Op:    "printf",
		Param: format.(*structs.StringExpr),
	}
	if rest != nil {
		restSlice := rest.([]any)
		valueList := make([]*structs.StringExpr, len(restSlice))

		for i := range restSlice {
			valueAtom := restSlice[i].([]any)
			valueList[i] = valueAtom[1].(*structs.StringExpr)
		}
		textExpr.ValueList = valueList
	}

	return textExpr, nil
}

func (p *parser) callonTextExpr133() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr133(stack["format"], stack["rest"])
}

func (c *current) onTextExpr145(containInternalFields any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMRawString,
		RawString:      "true", // default value
	}

	if containInternalFields != nil {
		restSlice := containInternalFields.([]any)
		containInternalFieldsStr, err := transferUint8ToString(restSlice[0])
		if err != nil {
			return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
		}
		if containInternalFieldsStr == "false" {
			expr.RawString = "false"
		}
	}

	return &structs.TextExpr{
		Op:    "tojson",
		Param: expr,
	}, nil
}

func (p *parser) callonTextExpr145() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr145(stack["containInternalFields"])
}

func (c *current) onTextExpr157(opName, condition any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: Failed to recognize operator: %v, err= %v", opName, err)
	}

	node := &structs.TextExpr{
		Op:        opNameStr,
		Condition: condition.(*structs.BoolExpr),
	}

	return node, nil
}

func (p *parser) callonTextExpr157() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr157(stack["opName"], stack["condition"])
}

func (c *current) onTextExpr165(opName, stringExpr, startIndex, endIndex any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:         opNameStr,
		Param:      stringExpr.(*structs.StringExpr),
		StartIndex: startIndex.(*structs.NumericExpr),
	}
	if endIndex != nil {
		node.EndIndex = endIndex.(*structs.NumericExpr)
	}

	return node, nil
}

func (p *parser) callonTextExpr165() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr165(stack["opName"], stack["stringExpr"], stack["startIndex"], stack["endIndex"])
}

func (c *current) onTextExpr179(opName, stringExpr, expr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:    opNameStr,
		Val:   expr.(*structs.ValueExpr),
		Param: stringExpr.(*structs.StringExpr),
	}

	return node, nil
}

func (p *parser) callonTextExpr179() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr179(stack["opName"], stack["stringExpr"], stack["expr"])
}

func (c *current) onTextExpr190(opName, startIndex, endIndex, stringExpr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:         opNameStr,
		StartIndex: startIndex.(*structs.NumericExpr),
		EndIndex:   endIndex.(*structs.NumericExpr),
	}
	if stringExpr != nil {
		node.Param = stringExpr.(*structs.StringExpr)
	}

	return node, nil
}

func (p *parser) callonTextExpr190() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr190(stack["opName"], stack["startIndex"], stack["endIndex"], stack["stringExpr"])
}

func (c *current) onTextExpr205(opName, mvLeft, mvRight, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	values := make([]*structs.StringExpr, 2)
	values[0] = mvLeft.(*structs.StringExpr)
	values[1] = mvRight.(*structs.StringExpr)

	node := &structs.TextExpr{
		Op:        opNameStr,
		ValueList: values,
	}

	if rest != nil {
		restSlice := rest.([]any)
		node.Delimiter = restSlice[1].(*structs.StringExpr)
	}

	return node, nil
}

func (p *parser) callonTextExpr205() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr205(stack["opName"], stack["mvLeft"], stack["mvRight"], stack["rest"])
}

func (c *current) onTextExpr221(opName, stringExpr, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}

	node := &structs.TextExpr{
		Op:         opNameStr,
		Param:      stringExpr.(*structs.StringExpr),
		InferTypes: false, // default value
	}

	if rest != nil {
		restSlice := rest.([]any)
		inferTypes, err := transferUint8ToString(restSlice[1])
		if err != nil {
			return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
		}
		if inferTypes == "true" {
			node.InferTypes = true
		}
	}

	return node, nil
}

func (p *parser) callonTextExpr221() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr221(stack["opName"], stack["stringExpr"], stack["rest"])
}

func (c *current) onTextExpr237(field, threshold, match, delims any) (any, error) {
	textExpr := &structs.TextExpr{
		Op: "cluster",
	}

	cluster := &structs.Cluster{
		Field:     field.(string),
		Threshold: 0.8,
		Match:     "termlist",
	}

	if threshold != nil {
		slice := threshold.([]interface{})
		thresholdStr := slice[2].(string)
		val, err := strconv.ParseFloat(thresholdStr, 64)
		if err != nil {
			return nil, fmt.Errorf("Spl peg: TextExpr: invalid threshold: %v", thresholdStr)
		}
		cluster.Threshold = val
	}

	if match != nil {
		slice := match.([]interface{})
		matchStr, err := transferUint8ToString(slice[2])
		if err != nil {
			return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
		}
		cluster.Match = matchStr
	}

	if delims != nil {
		slice := delims.([]interface{})
		delimsStr := slice[2].(string)
		cluster.Delims = delimsStr
	}

	textExpr.Cluster = cluster

	return textExpr, nil
}

func (p *parser) callonTextExpr237() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr237(stack["field"], stack["threshold"], stack["match"], stack["delims"])
}

func (c *current) onTextExpr265(filter any) (any, error) {
	textExpr := &structs.TextExpr{
		Op: "getfields",
	}

	if filter != nil {
		textExpr.Param = filter.(*structs.StringExpr)
	}

	return textExpr, nil
}

func (p *parser) callonTextExpr265() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr265(stack["filter"])
}

func (c *current) onTextExpr273(valueExpr any) (any, error) {
	return &structs.TextExpr{
		Op:  "typeof",
		Val: valueExpr.(*structs.ValueExpr),
	}, nil
}

func (p *parser) callonTextExpr273() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr273(stack["valueExpr"])
}

func (c *current) onTextExpr280(val, regex, replacement any) (any, error) {
	return &structs.TextExpr{
		Op:        "replace",
		Val:       val.(*structs.ValueExpr),
		ValueList: []*structs.StringExpr{regex.(*structs.StringExpr), replacement.(*structs.StringExpr)},
	}, nil
}

func (p *parser) callonTextExpr280() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr280(stack["val"], stack["regex"], stack["replacement"])
}

func (c *current) onTextExpr293(val, format any) (any, error) {
	return &structs.TextExpr{
		Op:    "strftime",
		Val:   val.(*structs.ValueExpr),
		Param: format.(*structs.StringExpr),
	}, nil
}

func (p *parser) callonTextExpr293() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr293(stack["val"], stack["format"])
}

func (c *current) onTextExpr303(val, format any) (any, error) {
	return &structs.TextExpr{
		Op:    "strptime",
		Val:   val.(*structs.ValueExpr),
		Param: format.(*structs.StringExpr),
	}, nil
}

func (p *parser) callonTextExpr303() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr303(stack["val"], stack["format"])
}

func (c *current) onQuotedPathString1(str any) (any, error) {
	return &SPathFieldExpr{
		PathValue:       removeQuotes(str),
		IsPathFieldName: false,
	}, nil
}

func (p *parser) callonQuotedPathString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedPathString1(stack["str"])
}

func (c *current) onUnquotedPathValue1(str any) (any, error) {
	return &SPathFieldExpr{
		PathValue:       removeQuotes(str),
		IsPathFieldName: true,
	}, nil
}

func (p *parser) callonUnquotedPathValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedPathValue1(stack["str"])
}

func (c *current) onStrToRemoveExpr1(strToRemove any) (any, error) {
	return strToRemove, nil
}

func (p *parser) callonStrToRemoveExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStrToRemoveExpr1(stack["strToRemove"])
}

func (c *current) onEvalFieldToRead2() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEvalFieldToRead2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalFieldToRead2()
}

func (c *current) onEvalFieldToRead8(field any) (any, error) {
	return field, nil
}

func (p *parser) callonEvalFieldToRead8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalFieldToRead8(stack["field"])
}

func (c *current) onWhereBlock1(condition any) (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			FilterRows: condition.(*structs.BoolExpr),
		},
	}

	return queryAgg, nil
}

func (p *parser) callonWhereBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereBlock1(stack["condition"])
}

func (c *current) onBoolExpr1(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonBoolExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExpr1(stack["expr"])
}

func (c *current) onBoolExprLevel41(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.BoolExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.BoolExpr{
			IsTerminal: false,
			BoolOp:     structs.BoolOpOr,
			LeftBool:   cur,
			RightBool:  opAndClause[1].(*structs.BoolExpr),
		}
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel41(stack["first"], stack["rest"])
}

func (c *current) onBoolExprLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.BoolExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.BoolExpr{
			IsTerminal: false,
			BoolOp:     structs.BoolOpAnd,
			LeftBool:   cur,
			RightBool:  opAndClause[1].(*structs.BoolExpr),
		}
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel31(stack["first"], stack["rest"])
}

func (c *current) onBoolExprLevel22(first any) (any, error) {
	cur := &structs.BoolExpr{
		IsTerminal: false,
		BoolOp:     structs.BoolOpNot,
		LeftBool:   first.(*structs.BoolExpr),
		RightBool:  nil,
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel22(stack["first"])
}

func (c *current) onBoolExprLevel29(first any) (any, error) {
	return first, nil
}

func (p *parser) callonBoolExprLevel29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel29(stack["first"])
}

func (c *current) onBoolExprLevel12(first any) (any, error) {
	return first, nil
}

func (p *parser) callonBoolExprLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel12(stack["first"])
}

func (c *current) onBoolExprLevel18(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonBoolExprLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel18(stack["expr"])
}

func (c *current) onEvalComparisonExpr2(op, value any) (any, error) {
	opNameStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: BoolExpr: %v", err)
	}
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  value.(*structs.ValueExpr),
		RightValue: nil,
		ValueOp:    opNameStr,
	}

	if opNameStr == "searchmatch" {
		valExpr := value.(*structs.ValueExpr)
		if valExpr.StringExpr == nil {
			return nil, fmt.Errorf("Spl peg: Searchmatch should only have string values as argument")
		}

		fieldsList, err := SearchMatchGetFields(valExpr.StringExpr.RawString)
		if err != nil {
			return nil, err
		}

		valExpr.StringExpr.StringExprMode = structs.SEMFieldList
		valExpr.StringExpr.FieldList = fieldsList
		expr.LeftValue = valExpr
	}

	return expr, nil
}

func (p *parser) callonEvalComparisonExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalComparisonExpr2(stack["op"], stack["value"])
}

func (c *current) onEvalComparisonExpr17(opName, leftValue, rightValue any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: BoolExpr: %v", err)
	}
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  leftValue.(*structs.ValueExpr),
		RightValue: rightValue.(*structs.ValueExpr),
		ValueOp:    opNameStr,
	}
	return expr, nil
}

func (p *parser) callonEvalComparisonExpr17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalComparisonExpr17(stack["opName"], stack["leftValue"], stack["rightValue"])
}

func (c *current) onEvalComparisonExpr32(left, valueToJudge, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ValueExpr, 1+len(restSlice))
	slice[0] = valueToJudge.(*structs.ValueExpr)

	for i := range restSlice {
		valueAtom := restSlice[i].([]any)
		slice[i+1] = valueAtom[1].(*structs.ValueExpr)
	}

	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  left.(*structs.ValueExpr),
		ValueList:  slice,
		ValueOp:    "in",
	}
	return expr, nil
}

func (p *parser) callonEvalComparisonExpr32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalComparisonExpr32(stack["left"], stack["valueToJudge"], stack["rest"])
}

func (c *current) onEvalComparisonExpr47(valueToJudge, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ValueExpr, len(restSlice))

	for i := range restSlice {
		valueAtom := restSlice[i].([]any)
		slice[i] = valueAtom[1].(*structs.ValueExpr)
	}

	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  valueToJudge.(*structs.ValueExpr),
		ValueList:  slice,
		ValueOp:    "in",
	}
	return expr, nil
}

func (p *parser) callonEvalComparisonExpr47() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalComparisonExpr47(stack["valueToJudge"], stack["rest"])
}

func (c *current) onBoolComparisonExpr1(left, op, right any) (any, error) {
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  left.(*structs.ValueExpr),
		RightValue: right.(*structs.ValueExpr),
		ValueOp:    op.(string),
	}

	return expr, nil
}

func (p *parser) callonBoolComparisonExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolComparisonExpr1(stack["left"], stack["op"], stack["right"])
}

func (c *current) onValueExpr2(condition any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMConditionExpr,
		ConditionExpr: condition.(*structs.ConditionExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr2(stack["condition"])
}

func (c *current) onValueExpr5(condition any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMConditionExpr,
		ConditionExpr: condition.(*structs.ConditionExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr5(stack["condition"])
}

func (c *current) onValueExpr11(numeric any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMNumericExpr,
		NumericExpr:   numeric.(*structs.NumericExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr11(stack["numeric"])
}

func (c *current) onValueExpr14(str any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMStringExpr,
		StringExpr:    str.(*structs.StringExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr14(stack["str"])
}

func (c *current) onValueExpr17(str any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMStringExpr,
		StringExpr:    str.(*structs.StringExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr17(stack["str"])
}

func (c *current) onValueExpr23(boolean any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolean.(*structs.BoolExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr23(stack["boolean"])
}

func (c *current) onStringExpr2(text any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMTextExpr,
		TextExpr:       text.(*structs.TextExpr),
	}

	return expr, nil
}

func (p *parser) callonStringExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr2(stack["text"])
}

func (c *current) onStringExpr8(str any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMRawString,
		RawString:      removeQuotes(str),
	}

	return expr, nil
}

func (p *parser) callonStringExpr8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr8(stack["str"])
}

func (c *current) onStringExpr14(field any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMField,
		FieldName:      field.(string),
	}

	return expr, nil
}

func (p *parser) callonStringExpr14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr14(stack["field"])
}

func (c *current) onStringExpr26(concat any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMConcatExpr,
		ConcatExpr:     concat.(*structs.ConcatExpr),
	}

	return expr, nil
}

func (p *parser) callonStringExpr26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr26(stack["concat"])
}

func (c *current) onConcatExpr1(first, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ConcatAtom, 1+len(restSlice))
	slice[0] = first.(*structs.ConcatAtom)

	for i := range restSlice {
		concatAndAtom := restSlice[i].([]any)
		slice[i+1] = concatAndAtom[1].(*structs.ConcatAtom)
	}

	expr := &structs.ConcatExpr{
		Atoms: slice,
	}

	return expr, nil
}

func (p *parser) callonConcatExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatExpr1(stack["first"], stack["rest"])
}

func (c *current) onConcatAtom2(text any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField:  false,
		Value:    "",
		TextExpr: text.(*structs.TextExpr),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom2(stack["text"])
}

func (c *current) onConcatAtom5(str any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: false,
		Value:   removeQuotes(str),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom5(stack["str"])
}

func (c *current) onConcatAtom8(number any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: false,
		Value:   number.(string),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom8(stack["number"])
}

func (c *current) onConcatAtom11(field any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: true,
		Value:   field.(string),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom11(stack["field"])
}

func (c *current) onNumericExpr1(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExpr1(stack["expr"])
}

func (c *current) onNumericExprLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.NumericExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.NumericExpr{
			IsTerminal:      false,
			Op:              opAndClause[0].(string),
			Left:            cur,
			Right:           opAndClause[1].(*structs.NumericExpr),
			NumericExprMode: structs.NEMNumericExpr,
		}
	}

	return cur, nil
}

func (p *parser) callonNumericExprLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel31(stack["first"], stack["rest"])
}

func (c *current) onNumericExprLevel21(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.NumericExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.NumericExpr{
			IsTerminal:      false,
			Op:              opAndClause[0].(string),
			Left:            cur,
			Right:           opAndClause[1].(*structs.NumericExpr),
			NumericExprMode: structs.NEMNumericExpr,
		}
	}

	return cur, nil
}

func (p *parser) callonNumericExprLevel21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel21(stack["first"], stack["rest"])
}

func (c *current) onNumericParamExpr1(expr any) (any, error) {
	rightNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	return rightNumericExpr, nil
}

func (p *parser) callonNumericParamExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericParamExpr1(stack["expr"])
}

func (c *current) onNumericExprLevel12(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericExprLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel12(stack["expr"])
}

func (c *current) onNumericExprLevel18(numericEvalExpr any) (any, error) {
	return numericEvalExpr, nil
}

func (p *parser) callonNumericExprLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel18(stack["numericEvalExpr"])
}

func (c *current) onNumericExprLevel111(field any) (any, error) {
	expr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    true,
		Value:           field.(string),
		NumericExprMode: structs.NEMNumberField,
	}

	return expr, nil
}

func (p *parser) callonNumericExprLevel111() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel111(stack["field"])
}

func (c *current) onNumericExprLevel114(number any) (any, error) {
	expr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    false,
		Value:           number.(string),
		NumericExprMode: structs.NEMNumber,
	}

	return expr, nil
}

func (p *parser) callonNumericExprLevel114() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel114(stack["number"])
}

func (c *current) onNumericEvalExpr2(opName, expr any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)
	node, err := createNumericExpr(opNameStr, leftNumericExpr, nil, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr2(stack["opName"], stack["expr"])
}

func (c *current) onNumericEvalExpr31(roundExpr, expr, roundPrecision any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	var rightNumericExpr *structs.NumericExpr
	if roundPrecision != nil {
		rightNumericExpr, ok = roundPrecision.(*structs.NumericExpr)
		if !ok {
			return nil, fmt.Errorf("Failed to assert roundPrecision as *structs.NumericExpr")
		}
	}

	node, err := createNumericExpr("round", leftNumericExpr, rightNumericExpr, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr31(stack["roundExpr"], stack["expr"], stack["roundPrecision"])
}

func (c *current) onNumericEvalExpr42(opName any) (any, error) {
	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)
	return &structs.NumericExpr{
		IsTerminal: true,
		Op:         opNameStr,
	}, nil
}

func (p *parser) callonNumericEvalExpr42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr42(stack["opName"])
}

func (c *current) onNumericEvalExpr52(stringExpr, baseExpr any) (any, error) {
	stringExprConverted, ok := stringExpr.(*structs.StringExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert stringExpr as *structs.StringExpr")
	}

	var baseExprConverted *structs.NumericExpr
	if baseExpr != nil {
		baseSlice, ok := baseExpr.([]interface{})
		if ok && len(baseSlice) > 1 {
			if base, ok := baseSlice[1].(*structs.NumericExpr); ok {
				baseExprConverted = base
			} else {
				return nil, fmt.Errorf("Failed to assert base as *structs.NumericExpr")
			}
		}
	}

	node := &structs.NumericExpr{
		IsTerminal:      false,
		Op:              "tonumber",
		Left:            nil,
		Right:           baseExprConverted,
		Val:             stringExprConverted,
		NumericExprMode: structs.NEMNumericExpr,
	}
	return node, nil
}

func (p *parser) callonNumericEvalExpr52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr52(stack["stringExpr"], stack["baseExpr"])
}

func (c *current) onNumericEvalExpr64(lenExpr, expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericEvalExpr64() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr64(stack["lenExpr"], stack["expr"])
}

func (c *current) onNumericEvalExpr72(opName, expr, param any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)

	var rightNumericExpr *structs.NumericExpr
	if param == nil {
		return nil, fmt.Errorf("Function: %v 's param can not be nil", opNameStr)
	}
	rightNumericExpr, ok = param.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert param as *structs.NumericExpr")
	}

	node, err := createNumericExpr(opNameStr, leftNumericExpr, rightNumericExpr, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr72() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr72(stack["opName"], stack["expr"], stack["param"])
}

func (c *current) onNumericEvalExpr85(opName, expr, param any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)

	var rightNumericExpr *structs.NumericExpr
	if param != nil {
		rightNumericExpr, ok = param.(*structs.NumericExpr)
		if !ok {
			return nil, fmt.Errorf("Failed to assert param as *structs.NumericExpr")
		}
	}

	node, err := createNumericExpr(opNameStr, leftNumericExpr, rightNumericExpr, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr85() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr85(stack["opName"], stack["expr"], stack["param"])
}

func (c *current) onNumericEvalExpr96(opName, expr, specifier any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: NumericExpr: %v", err)
	}
	node, err := createNumericExpr(opNameStr, expr.(*structs.NumericExpr), nil, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}
	node.Val = specifier.(*structs.StringExpr)
	return node, nil
}

func (p *parser) callonNumericEvalExpr96() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr96(stack["opName"], stack["expr"], stack["specifier"])
}

func (c *current) onLenExpr2(str any) (any, error) {

	leftNumericExpr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    false,
		Value:           str.(string),
		NumericExprMode: structs.NEMLenString,
	}

	node, err := createNumericExpr("len", leftNumericExpr, nil, structs.NEMLenString)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonLenExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLenExpr2(stack["str"])
}

func (c *current) onLenExpr8(field any) (any, error) {

	leftNumericExpr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    true,
		Value:           field.(string),
		NumericExprMode: structs.NEMLenField,
	}

	node, err := createNumericExpr("len", leftNumericExpr, nil, structs.NEMLenField)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonLenExpr8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLenExpr8(stack["field"])
}

func (c *current) onHeadOptionNull1(boolVal any) (any, error) {
	optionArg := &HeadOptionArgs{
		argOption: "null",
		headExpr: &structs.HeadExpr{
			Null: boolVal.(bool),
		},
	}

	return optionArg, nil
}

func (p *parser) callonHeadOptionNull1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOptionNull1(stack["boolVal"])
}

func (c *current) onHeadOptionKeeplast1(boolVal any) (any, error) {
	optionArg := &HeadOptionArgs{
		argOption: "keeplast",
		headExpr: &structs.HeadExpr{
			Keeplast: boolVal.(bool),
		},
	}

	return optionArg, nil
}

func (p *parser) callonHeadOptionKeeplast1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOptionKeeplast1(stack["boolVal"])
}

func (c *current) onHeadOptionLimit1(intAsStr any) (any, error) {
	limit, err := strconv.ParseUint(intAsStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid limit (%v): %v", intAsStr.(string), err)
	}
	optionArg := &HeadOptionArgs{
		argOption: "limit",
		headExpr: &structs.HeadExpr{
			MaxRows: limit,
		},
	}

	return optionArg, nil
}

func (p *parser) callonHeadOptionLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOptionLimit1(stack["intAsStr"])
}

func (c *current) onHeadOptionExpr1(boolExpr any) (any, error) {
	optionArg := &HeadOptionArgs{
		argOption: "boolexpr",
		headExpr: &structs.HeadExpr{
			BoolExpr: boolExpr.(*structs.BoolExpr),
		},
	}

	return optionArg, nil
}

func (p *parser) callonHeadOptionExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOptionExpr1(stack["boolExpr"])
}

func (c *current) onHeadOption1(option any) (any, error) {
	return option, nil
}

func (p *parser) callonHeadOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOption1(stack["option"])
}

func (c *current) onHeadOptionList1(first, rest any) (any, error) {
	restSlice := rest.([]any)
	optionWasSpecified := make(map[string]bool)
	optionWasSpecified["null"] = false
	optionWasSpecified["keeplast"] = false
	optionWasSpecified["boolexpr"] = false
	optionWasSpecified["limit"] = false

	numOptions := 1 + len(restSlice)

	headExpr := &structs.HeadExpr{}

	for i := 0; i < numOptions; i++ {
		var headOptArg *HeadOptionArgs
		if i == 0 {
			headOptArg = first.(*HeadOptionArgs)
		} else {
			separator := restSlice[i-1].([]any)
			headOptArg = separator[1].(*HeadOptionArgs)
		}

		argOption := headOptArg.argOption
		val, exist := optionWasSpecified[argOption]
		if !exist {
			return nil, fmt.Errorf("Not a Valid HeadOption: %v", argOption)
		}
		if val {
			return nil, fmt.Errorf("Invalid Syntax, option: %v is already specified", argOption)
		}
		optionWasSpecified[argOption] = true

		switch argOption {
		case "null":
			headExpr.Null = headOptArg.headExpr.Null
		case "keeplast":
			headExpr.Keeplast = headOptArg.headExpr.Keeplast
		case "limit":
			headExpr.MaxRows = headOptArg.headExpr.MaxRows
		case "boolexpr":
			headExpr.BoolExpr = headOptArg.headExpr.BoolExpr
		default:
			return nil, fmt.Errorf("Not a Valid HeadOption: %v", argOption)
		}
	}

	isBoolExpr, _ := optionWasSpecified["boolexpr"]
	if !isBoolExpr {
		isNull, _ := optionWasSpecified["null"]
		if isNull {
			return nil, fmt.Errorf("Invalid Syntax, null option can only be present with condition boolean expression")
		}
		isKeeplast, _ := optionWasSpecified["keeplast"]
		if isKeeplast {
			return nil, fmt.Errorf("Invalid Syntax, keeplast option can only be present with condition boolean expression")
		}
	}

	return headExpr, nil
}

func (p *parser) callonHeadOptionList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOptionList1(stack["first"], stack["rest"])
}

func (c *current) onHeadBlock2(headExpr any) (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			HeadRequest: headExpr.(*structs.HeadExpr),
		},
	}

	return queryAgg, nil
}

func (p *parser) callonHeadBlock2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadBlock2(stack["headExpr"])
}

func (c *current) onHeadBlock8(intAsStr any) (any, error) {
	limit, err := strconv.ParseUint(intAsStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid limit (%v): %v", intAsStr.(string), err)
	}

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			HeadRequest: &structs.HeadExpr{
				MaxRows: limit,
			},
		},
	}

	return queryAgg, nil
}

func (p *parser) callonHeadBlock8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadBlock8(stack["intAsStr"])
}

func (c *current) onHeadBlock14() (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			HeadRequest: &structs.HeadExpr{
				MaxRows: uint64(10), // From https://docs.splunk.com/Documentation/Splunk/9.1.0/SearchReference/Head
			},
		},
	}

	return queryAgg, nil
}

func (p *parser) callonHeadBlock14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadBlock14()
}

func (c *current) onTailBlock2(intAsStr any) (any, error) {
	limit, err := strconv.ParseUint(intAsStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid limit (%v): %v", intAsStr.(string), err)
	}

	tExpr := &structs.TailExpr{
		TailRecords: make(map[string]map[string]interface{}, 0),
		TailRows:    limit,
	}

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			TailRequest: tExpr,
		},
	}

	return queryAgg, nil
}

func (p *parser) callonTailBlock2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailBlock2(stack["intAsStr"])
}

func (c *current) onTailBlock8() (any, error) {

	tExpr := &structs.TailExpr{
		TailRecords: make(map[string]map[string]interface{}, 0),
		TailRows:    uint64(10), // From https://docs.splunk.com/Documentation/SplunkCloud/9.1.2308/SearchReference/Tail
	}

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			TailRequest: tExpr,
		},
	}

	return queryAgg, nil
}

func (p *parser) callonTailBlock8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailBlock8()
}

func (c *current) onAggregationList1(first, rest any) (any, error) {
	// Convert `rest` to a slice. Each element of the slice will be a 2-element
	// slice where the first element is ", " and the second is an Aggregator.
	restSlice := rest.([]any)

	numAggs := 1 + len(restSlice)
	aggsSlice := make([]*aggregator, numAggs)
	aggsSlice[0] = first.(*aggregator)

	for i := 1; i < numAggs; i++ {
		separatorAndAgg := restSlice[i-1].([]any)
		aggsSlice[i] = separatorAndAgg[1].(*aggregator)
	}

	return aggsSlice, nil
}

func (p *parser) callonAggregationList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregationList1(stack["first"], stack["rest"])
}

func (c *current) onAggregator1(aggFunc, asField any) (any, error) {
	agg := &aggregator{}
	agg.measureAgg = aggFunc.(*structs.MeasureAggregator)

	if asField != nil {
		agg.renameOutputField = true
		agg.outputFieldNewName = asField.(string)
	}

	return agg, nil
}

func (p *parser) callonAggregator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregator1(stack["aggFunc"], stack["asField"])
}

func (c *current) onAggFunction1(agg any) (any, error) {
	return agg, nil
}

func (p *parser) callonAggFunction1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggFunction1(stack["agg"])
}

func (c *current) onAsField1(field any) (any, error) {
	fieldStr := field.(string)

	if strings.Contains(fieldStr, "*") {
		return nil, errors.New("The field specified in `AS` cannot contain wildcards")
	}

	if fieldStr[0] == '"' && fieldStr[len(fieldStr)-1] == '"' {
		fieldStr = fieldStr[1 : len(fieldStr)-1]
	}

	return fieldStr, nil
}

func (p *parser) callonAsField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsField1(stack["field"])
}

func (c *current) onAggCount2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Count,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggCount2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggCount2(stack["valueExpr"])
}

func (c *current) onAggCount12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Count,
	}

	return agg, nil
}

func (p *parser) callonAggCount12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggCount12(stack["field"])
}

func (c *current) onAggCount21() (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  "*",
		MeasureFunc: utils.Count,
	}

	return agg, nil
}

func (p *parser) callonAggCount21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggCount21()
}

func (c *current) onAggDistinctCount2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Cardinality,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggDistinctCount2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggDistinctCount2(stack["valueExpr"])
}

func (c *current) onAggDistinctCount12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Cardinality,
	}

	return agg, nil
}

func (p *parser) callonAggDistinctCount12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggDistinctCount12(stack["field"])
}

func (c *current) onAggAvg2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Avg,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggAvg2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAvg2(stack["valueExpr"])
}

func (c *current) onAggAvg10(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Avg,
	}

	return agg, nil
}

func (p *parser) callonAggAvg10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAvg10(stack["field"])
}

func (c *current) onAggMin2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Min,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggMin2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMin2(stack["valueExpr"])
}

func (c *current) onAggMin10(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Min,
	}

	return agg, nil
}

func (p *parser) callonAggMin10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMin10(stack["field"])
}

func (c *current) onAggMax2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Max,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggMax2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMax2(stack["valueExpr"])
}

func (c *current) onAggMax10(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Max,
	}

	return agg, nil
}

func (p *parser) callonAggMax10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMax10(stack["field"])
}

func (c *current) onAggRange2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Range,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggRange2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRange2(stack["valueExpr"])
}

func (c *current) onAggRange10(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Range,
	}

	return agg, nil
}

func (p *parser) callonAggRange10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRange10(stack["field"])
}

func (c *current) onAggSum2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Sum,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggSum2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSum2(stack["valueExpr"])
}

func (c *current) onAggSum10(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Sum,
	}

	return agg, nil
}

func (p *parser) callonAggSum10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSum10(stack["field"])
}

func (c *current) onAggEstdc2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Estdc,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggEstdc2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEstdc2(stack["boolComparisonExpr"])
}

func (c *current) onAggEstdc12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Estdc,
	}

	return agg, nil
}

func (p *parser) callonAggEstdc12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEstdc12(stack["field"])
}

func (c *current) onAggEstdcError2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.EstdcError,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggEstdcError2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEstdcError2(stack["boolComparisonExpr"])
}

func (c *current) onAggEstdcError12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.EstdcError,
	}

	return agg, nil
}

func (p *parser) callonAggEstdcError12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEstdcError12(stack["field"])
}

func (c *current) onAggExactPerc2(numStr, boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.ExactPerc,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
		Param:           numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggExactPerc2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggExactPerc2(stack["numStr"], stack["boolComparisonExpr"])
}

func (c *current) onAggExactPerc16(numStr, field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.ExactPerc,
		Param:       numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggExactPerc16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggExactPerc16(stack["numStr"], stack["field"])
}

func (c *current) onAggPerc2(numStr, boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Perc,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
		Param:           numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggPerc2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggPerc2(stack["numStr"], stack["boolComparisonExpr"])
}

func (c *current) onAggPerc16(numStr, field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Perc,
		Param:       numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggPerc16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggPerc16(stack["numStr"], stack["field"])
}

func (c *current) onAggUpperPerc2(numStr, boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.UpperPerc,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
		Param:           numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggUpperPerc2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggUpperPerc2(stack["numStr"], stack["boolComparisonExpr"])
}

func (c *current) onAggUpperPerc16(numStr, field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.UpperPerc,
		Param:       numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggUpperPerc16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggUpperPerc16(stack["numStr"], stack["field"])
}

func (c *current) onAggMedian2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Median,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggMedian2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMedian2(stack["boolComparisonExpr"])
}

func (c *current) onAggMedian12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Median,
	}

	return agg, nil
}

func (p *parser) callonAggMedian12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMedian12(stack["field"])
}

func (c *current) onAggMode2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Mode,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggMode2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMode2(stack["boolComparisonExpr"])
}

func (c *current) onAggMode12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Mode,
	}

	return agg, nil
}

func (p *parser) callonAggMode12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMode12(stack["field"])
}

func (c *current) onAggStdev2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Stdev,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggStdev2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggStdev2(stack["boolComparisonExpr"])
}

func (c *current) onAggStdev12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Stdev,
	}

	return agg, nil
}

func (p *parser) callonAggStdev12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggStdev12(stack["field"])
}

func (c *current) onAggStdevp2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Stdevp,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggStdevp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggStdevp2(stack["boolComparisonExpr"])
}

func (c *current) onAggStdevp12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Stdevp,
	}

	return agg, nil
}

func (p *parser) callonAggStdevp12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggStdevp12(stack["field"])
}

func (c *current) onAggSumsq2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Sumsq,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggSumsq2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSumsq2(stack["boolComparisonExpr"])
}

func (c *current) onAggSumsq12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Sumsq,
	}

	return agg, nil
}

func (p *parser) callonAggSumsq12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSumsq12(stack["field"])
}

func (c *current) onAggVar2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Var,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggVar2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggVar2(stack["boolComparisonExpr"])
}

func (c *current) onAggVar12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Var,
	}

	return agg, nil
}

func (p *parser) callonAggVar12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggVar12(stack["field"])
}

func (c *current) onAggVarp2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Varp,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggVarp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggVarp2(stack["boolComparisonExpr"])
}

func (c *current) onAggVarp12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Varp,
	}

	return agg, nil
}

func (p *parser) callonAggVarp12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggVarp12(stack["field"])
}

func (c *current) onAggFirst2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.First,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggFirst2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggFirst2(stack["boolComparisonExpr"])
}

func (c *current) onAggFirst12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.First,
	}

	return agg, nil
}

func (p *parser) callonAggFirst12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggFirst12(stack["field"])
}

func (c *current) onAggLast2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Last,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggLast2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLast2(stack["boolComparisonExpr"])
}

func (c *current) onAggLast12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Last,
	}

	return agg, nil
}

func (p *parser) callonAggLast12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLast12(stack["field"])
}

func (c *current) onAggList2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.List,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggList2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggList2(stack["valueExpr"])
}

func (c *current) onAggList10(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.List,
	}

	return agg, nil
}

func (p *parser) callonAggList10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggList10(stack["field"])
}

func (c *current) onAggEarliest2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Earliest,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggEarliest2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEarliest2(stack["boolComparisonExpr"])
}

func (c *current) onAggEarliest12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Earliest,
	}

	return agg, nil
}

func (p *parser) callonAggEarliest12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEarliest12(stack["field"])
}

func (c *current) onAggEarliestTime2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.EarliestTime,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggEarliestTime2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEarliestTime2(stack["boolComparisonExpr"])
}

func (c *current) onAggEarliestTime12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.EarliestTime,
	}

	return agg, nil
}

func (p *parser) callonAggEarliestTime12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEarliestTime12(stack["field"])
}

func (c *current) onAggLatest2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Latest,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggLatest2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLatest2(stack["boolComparisonExpr"])
}

func (c *current) onAggLatest12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Latest,
	}

	return agg, nil
}

func (p *parser) callonAggLatest12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLatest12(stack["field"])
}

func (c *current) onAggLatestTime2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.LatestTime,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggLatestTime2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLatestTime2(stack["boolComparisonExpr"])
}

func (c *current) onAggLatestTime12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.LatestTime,
	}

	return agg, nil
}

func (p *parser) callonAggLatestTime12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLatestTime12(stack["field"])
}

func (c *current) onAggRate2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.StatsRate,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggRate2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRate2(stack["boolComparisonExpr"])
}

func (c *current) onAggRate12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.StatsRate,
	}

	return agg, nil
}

func (p *parser) callonAggRate12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRate12(stack["field"])
}

func (c *current) onAggValues2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Values,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggValues2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggValues2(stack["valueExpr"])
}

func (c *current) onAggValues10(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Values,
	}

	return agg, nil
}

func (p *parser) callonAggValues10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggValues10(stack["field"])
}

func (c *current) onFieldWithNumberValue1(keyValuePair any) (any, error) {
	return keyValuePair, nil
}

func (p *parser) callonFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithNumberValue1(stack["keyValuePair"])
}

func (c *current) onNamedFieldWithNumberValue1(key, op, value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     op.(string),
			Field:  key.(string),
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonNamedFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedFieldWithNumberValue1(stack["key"], stack["op"], stack["value"])
}

func (c *current) onUnnamedFieldWithNumberValue1(value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     "=",
			Field:  "*",
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonUnnamedFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnnamedFieldWithNumberValue1(stack["value"])
}

func (c *current) onFieldWithBooleanValue1(key, op, value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     op.(string),
			Field:  key.(string),
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonFieldWithBooleanValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithBooleanValue1(stack["key"], stack["op"], stack["value"])
}

func (c *current) onFieldWithStringValue1(keyValuePair any) (any, error) {
	return keyValuePair, nil
}

func (p *parser) callonFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithStringValue1(stack["keyValuePair"])
}

func (c *current) onNamedFieldWithStringValue1(key, op, value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     op.(string),
			Field:  key.(string),
			Values: value,
		},
	}
	return node, nil
}

func (p *parser) callonNamedFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedFieldWithStringValue1(stack["key"], stack["op"], stack["value"])
}

func (c *current) onUnnamedFieldWithStringValue1(value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     "=",
			Field:  "*",
			Values: value,
		},
	}
	return node, nil
}

func (p *parser) callonUnnamedFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnnamedFieldWithStringValue1(stack["value"])
}

func (c *current) onFieldNameList1(first, rest any) (any, error) {
	// Convert `rest` to a slice. Each element of the slice will be a 2-element
	// slice where the first element is ", " and the second is a FieldName.
	restSlice := rest.([]any)

	numFieldNames := 1 + len(restSlice)
	fields := make([]string, numFieldNames)
	fields[0] = first.(string)

	for i := 1; i < numFieldNames; i++ {
		separatorAndField := restSlice[i-1].([]any)
		fields[i] = separatorAndField[1].(string)
	}

	return fields, nil
}

func (p *parser) callonFieldNameList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldNameList1(stack["first"], stack["rest"])
}

func (c *current) onEarliestAndLatest1(earliestTime, latestTime any) (any, error) {
	var startEpoch int64 = 0
	var endEpoch int64 = 0
	var err error

	earliestTimeModifier := earliestTime.(ast.TimeModifier)
	latestTimeModifier := latestTime.(ast.TimeModifier)

	currTime := time.Now()
	startEpoch, err = CalculateRelativeTime(earliestTimeModifier, currTime)
	if err != nil {
		return nil, err
	}

	endEpoch, err = CalculateRelativeTime(latestTimeModifier, currTime)
	if err != nil {
		return nil, err
	}

	// Create AST node
	node := &ast.Node{
		NodeType: ast.TimeModifierNode,
		TimeModifiers: &ast.TimeModifiers{
			StartEpoch: uint64(startEpoch),
			EndEpoch:   uint64(endEpoch),
		},
	}

	return node, nil
}

func (p *parser) callonEarliestAndLatest1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEarliestAndLatest1(stack["earliestTime"], stack["latestTime"])
}

func (c *current) onEarliestOnly1(earliestTime any) (any, error) {
	var startEpoch int64 = 0
	var err error

	earliestTimeModifier := earliestTime.(ast.TimeModifier)

	startEpoch, err = CalculateRelativeTime(earliestTimeModifier, time.Now())
	if err != nil {
		return nil, err
	}

	// Create AST node
	node := &ast.Node{
		NodeType: ast.TimeModifierNode,
		TimeModifiers: &ast.TimeModifiers{
			StartEpoch: uint64(startEpoch),
			EndEpoch:   uint64(time.Now().UnixMilli()),
		},
	}

	return node, nil
}

func (p *parser) callonEarliestOnly1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEarliestOnly1(stack["earliestTime"])
}

func (c *current) onRelIntegerAsString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonRelIntegerAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelIntegerAsString1()
}

func (c *current) onWeekSnap1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonWeekSnap1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeekSnap1()
}

func (c *current) onRelTimeUnit1(timeUnit any) (any, error) {
	if utils.IsSubseconds(timeUnit.(utils.TimeUnit)) {
		return nil, fmt.Errorf("Relative Time Format does not support subseconds")
	}
	return strconv.Itoa(int(timeUnit.(utils.TimeUnit))), nil
}

func (p *parser) callonRelTimeUnit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelTimeUnit1(stack["timeUnit"])
}

func (c *current) onSnap1(snap any) (any, error) {
	return snap.(string), nil
}

func (p *parser) callonSnap1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSnap1(stack["snap"])
}

func (c *current) onOffset1(off, tuOff any) (any, error) {
	var offsetNum int64 = 0
	var err error
	offStr := off.(string)
	if offStr == "+" {
		offsetNum = 1
	} else if offStr == "-" {
		offsetNum = -1
	} else {
		offsetNum, err = strconv.ParseInt(offStr, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("Invalid Relative Time Format time unit value: (%v): , err: %v", offStr, err)
		}
	}

	timeUnit, err := strconv.Atoi(tuOff.(string))
	if err != nil {
		return nil, fmt.Errorf("Invalid Time Unit value: (%v), err: %v", tuOff.(string), err)
	}

	relTimeOffset := ast.RelativeTimeOffset{
		Offset:   offsetNum,
		TimeUnit: utils.TimeUnit(timeUnit),
	}

	return relTimeOffset, nil
}

func (p *parser) callonOffset1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOffset1(stack["off"], stack["tuOff"])
}

func (c *current) onRelativeTimestamp1(defaultTime, offset, snapParam any) (any, error) {

	if defaultTime != nil {
		if offset != nil || snapParam != nil {
			return nil, fmt.Errorf("Invalid Relative timestamp cannot combine default with offset or snap")
		}
		defTime, err := transferUint8ToString(defaultTime)
		if err != nil {
			return nil, fmt.Errorf("Spl peg: Relative timestamp for default time, err: %v", err)
		}

		timeModifier := ast.TimeModifier{
			AbsoluteTime: defTime,
		}

		return timeModifier, nil
	}

	if offset == nil && snapParam == nil {
		return nil, fmt.Errorf("Invalid Relative Time Format: Need either offset or snap param")
	}

	relTimeOffset := ast.RelativeTimeOffset{}
	snap := ""
	if snapParam != nil {
		snap = snapParam.(string)
	}

	if offset != nil {
		relTimeOffset.Offset = offset.(ast.RelativeTimeOffset).Offset
		relTimeOffset.TimeUnit = offset.(ast.RelativeTimeOffset).TimeUnit
	}

	timeModifier := ast.TimeModifier{
		RelativeTime: ast.RelativeTimeModifier{
			RelativeTimeOffset: relTimeOffset,
			Snap:               snap,
		},
	}

	return timeModifier, nil
}

func (p *parser) callonRelativeTimestamp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeTimestamp1(stack["defaultTime"], stack["offset"], stack["snapParam"])
}

func (c *current) onAbsoluteTimestamp1() (any, error) {
	relTimeModifier := ast.TimeModifier{
		AbsoluteTime: string(c.text),
	}
	return relTimeModifier, nil
}

func (p *parser) callonAbsoluteTimestamp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAbsoluteTimestamp1()
}

func (c *current) onFieldName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFieldName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldName1()
}

func (c *current) onFieldNameStartWith_1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFieldNameStartWith_1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldNameStartWith_1()
}

func (c *current) onString1(str any) (any, error) {
	return str, nil
}

func (p *parser) callonString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onString1(stack["str"])
}

func (c *current) onQuotedString1() (any, error) {
	// The returned string has quotes as the first and last character.
	return string(c.text), nil
}

func (p *parser) callonQuotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString1()
}

func (c *current) onUnquotedString1() (any, error) {
	// Return the string wrapped in quotes.
	str := "\"" + string(c.text) + "\""
	return str, nil
}

func (p *parser) callonUnquotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedString1()
}

func (c *current) onUnquotedStringWithTemplateWildCard1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUnquotedStringWithTemplateWildCard1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedStringWithTemplateWildCard1()
}

func (c *current) onBoolean1() (any, error) {
	boolValue, _ := strconv.ParseBool(string(c.text))
	return boolValue, nil
}

func (p *parser) callonBoolean1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolean1()
}

func (c *current) onRenamePattern1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonRenamePattern1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenamePattern1()
}

func (c *current) onNumber1(number any) (any, error) {
	return json.Number(number.(string)), nil
}

func (p *parser) callonNumber1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1(stack["number"])
}

func (c *current) onNumberAsString1(number any) (any, error) {
	return number, nil
}

func (p *parser) callonNumberAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumberAsString1(stack["number"])
}

func (c *current) onFloatAsString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatAsString1()
}

func (c *current) onIntegerAsString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIntegerAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerAsString1()
}

func (c *current) onPositiveIntegerAsString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonPositiveIntegerAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositiveIntegerAsString1()
}

func (c *current) onEqualityOperator1(op any) (any, error) {
	opStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: EqualityOperator: %v", err)
	}
	return opStr, nil
}

func (p *parser) callonEqualityOperator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator1(stack["op"])
}

func (c *current) onInequalityOperator1(op any) (any, error) {
	opStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: InequalityOperator: %v", err)
	}
	return opStr, nil
}

func (p *parser) callonInequalityOperator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInequalityOperator1(stack["op"])
}

func (c *current) onEqualityOrInequality2(op any) (any, error) {
	return op, nil
}

func (p *parser) callonEqualityOrInequality2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOrInequality2(stack["op"])
}

func (c *current) onEqualityOrInequality5(op any) (any, error) {
	return op, nil
}

func (p *parser) callonEqualityOrInequality5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOrInequality5(stack["op"])
}

func (c *current) onOpPlus1() (any, error) {
	return "+", nil
}

func (p *parser) callonOpPlus1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpPlus1()
}

func (c *current) onOpMinus1() (any, error) {
	return "-", nil
}

func (p *parser) callonOpMinus1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpMinus1()
}

func (c *current) onOpMul1() (any, error) {
	return "*", nil
}

func (p *parser) callonOpMul1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpMul1()
}

func (c *current) onOpDiv1() (any, error) {
	return "/", nil
}

func (p *parser) callonOpDiv1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpDiv1()
}

func (c *current) onSecond1() (any, error) {
	return utils.TMSecond, nil
}

func (p *parser) callonSecond1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSecond1()
}

func (c *current) onMinute1() (any, error) {
	return utils.TMMinute, nil
}

func (p *parser) callonMinute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinute1()
}

func (c *current) onHour1() (any, error) {
	return utils.TMHour, nil
}

func (p *parser) callonHour1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHour1()
}

func (c *current) onDay1() (any, error) {
	return utils.TMDay, nil
}

func (p *parser) callonDay1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDay1()
}

func (c *current) onWeek1() (any, error) {
	return utils.TMWeek, nil
}

func (p *parser) callonWeek1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeek1()
}

func (c *current) onMonth1() (any, error) {
	return utils.TMMonth, nil
}

func (p *parser) callonMonth1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMonth1()
}

func (c *current) onQuarter1() (any, error) {
	return utils.TMQuarter, nil
}

func (p *parser) callonQuarter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuarter1()
}

func (c *current) onYear1() (any, error) {
	return utils.TMYear, nil
}

func (p *parser) callonYear1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYear1()
}

func (c *current) onSubseconds1() (any, error) {
	timeUnit, err := utils.ConvertSubseconds(string(c.text))
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Subseconds: %v", err)
	}
	return timeUnit, nil
}

func (p *parser) callonSubseconds1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubseconds1()
}

func (c *current) onTransactionBlock1(txnOptions any) (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType:      structs.TransactionType,
		TransactionArguments: txnOptions.(*structs.TransactionArguments),
	}
	return queryAgg, nil
}

func (p *parser) callonTransactionBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionBlock1(stack["txnOptions"])
}

func (c *current) onTransactionOptions1(txnOptions any) (any, error) {

	transactionRequest := &structs.TransactionArguments{}

	if txnOptions != nil {
		txnArgs := txnOptions.(*TxnArgs).arguments
		transactionRequest.Fields = txnArgs.Fields
		transactionRequest.StartsWith = txnArgs.StartsWith
		transactionRequest.EndsWith = txnArgs.EndsWith
	}

	return transactionRequest, nil
}

func (p *parser) callonTransactionOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionOptions1(stack["txnOptions"])
}

func (c *current) onTransactionDefinitionOptionsList1(first, rest any) (any, error) {

	restSlice := rest.([]any)
	txnArgs := &TxnArgs{
		argOption: "txn-definition",
		arguments: &structs.TransactionArguments{},
	}

	numArgs := 1 + len(restSlice)

	for i := 0; i < numArgs; i++ {
		var txnArg *TxnArgs
		if i == 0 {
			txnArg = first.(*TxnArgs)
		} else {
			separatorAndArg := restSlice[i-1].([]any)
			txnArg = separatorAndArg[1].(*TxnArgs)
		}
		argOption := txnArg.argOption

		switch argOption {
		case "fields":
			txnArgs.arguments.Fields = txnArg.arguments.Fields
		case "startswith":
			txnArgs.arguments.StartsWith = txnArg.arguments.StartsWith
		case "endswith":
			txnArgs.arguments.EndsWith = txnArg.arguments.EndsWith
		default:
			return nil, fmt.Errorf("Not a Valid Transaction Argument option")
		}
	}

	return txnArgs, nil
}

func (p *parser) callonTransactionDefinitionOptionsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionDefinitionOptionsList1(stack["first"], stack["rest"])
}

func (c *current) onTransactionDefinitionOption1(option any) (any, error) {
	return option, nil
}

func (p *parser) callonTransactionDefinitionOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionDefinitionOption1(stack["option"])
}

func (c *current) onTransactionSpaceSeparatedFieldList1(fields any) (any, error) {
	txnArg := &TxnArgs{
		argOption: "fields",
		arguments: &structs.TransactionArguments{
			Fields: fields.([]string),
		},
	}

	return txnArg, nil
}

func (p *parser) callonTransactionSpaceSeparatedFieldList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionSpaceSeparatedFieldList1(stack["fields"])
}

func (c *current) onStartsWithOption1(strExpr any) (any, error) {
	txnArg := &TxnArgs{
		argOption: "startswith",
		arguments: &structs.TransactionArguments{
			StartsWith: strExpr.(*structs.FilterStringExpr),
		},
	}
	return txnArg, nil
}

func (p *parser) callonStartsWithOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStartsWithOption1(stack["strExpr"])
}

func (c *current) onEndsWithOption1(strExpr any) (any, error) {
	txnArg := &TxnArgs{
		argOption: "endswith",
		arguments: &structs.TransactionArguments{
			EndsWith: strExpr.(*structs.FilterStringExpr),
		},
	}
	return txnArg, nil
}

func (p *parser) callonEndsWithOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEndsWithOption1(stack["strExpr"])
}

func (c *current) onTransactionFilterString1(strExpr any) (any, error) {
	return strExpr, nil
}

func (p *parser) callonTransactionFilterString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionFilterString1(stack["strExpr"])
}

func (c *current) onTransactionQuotedString1(str any) (any, error) {
	return str, nil
}

func (p *parser) callonTransactionQuotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionQuotedString1(stack["str"])
}

func (c *current) onTransactionQuotedStringSearchExpr1(searchClause any) (any, error) {
	filterStrExpr := &structs.FilterStringExpr{
		SearchNode: searchClause.(*ast.Node),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionQuotedStringSearchExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionQuotedStringSearchExpr1(stack["searchClause"])
}

func (c *current) onQuotedStringNoOp1() (any, error) {
	// The returned string has quotes as the first and last character.
	return string(c.text), nil
}

func (p *parser) callonQuotedStringNoOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedStringNoOp1()
}

func (c *current) onTransactionQuotedStringValue1(str any) (any, error) {
	filterStrExpr := &structs.FilterStringExpr{
		StringValue: removeQuotes(str.(string)),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionQuotedStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionQuotedStringValue1(stack["str"])
}

func (c *current) onTransactionSearch1(expr any) (any, error) {

	filterStrExpr := &structs.FilterStringExpr{
		SearchNode: expr.(*ast.Node),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionSearch1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionSearch1(stack["expr"])
}

func (c *current) onTransactionEval1(condition any) (any, error) {
	filterStrExpr := &structs.FilterStringExpr{
		EvalBoolExpr: condition.(*structs.BoolExpr),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionEval1(stack["condition"])
}

func (c *current) onMultiValueBlock1(mvQueryAggNode any) (any, error) {
	return mvQueryAggNode, nil
}

func (p *parser) callonMultiValueBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiValueBlock1(stack["mvQueryAggNode"])
}

func (c *current) onMakeMVBlock1(mvColOptionExpr, field any) (any, error) {
	var mvColExpr *structs.MultiValueColLetRequest

	if mvColOptionExpr != nil {
		mvColExpr = mvColOptionExpr.(*structs.MultiValueColLetRequest)
	} else {
		mvColExpr = &structs.MultiValueColLetRequest{}
	}

	mvColExpr.Command = "makemv"
	mvColExpr.ColName = field.(string)

	if mvColExpr.DelimiterString == "" {
		mvColExpr.DelimiterString = " " // default single space
	}

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: &structs.LetColumnsRequest{
				MultiValueColRequest: mvColExpr,
			},
		},
	}

	return queryAgg, nil
}

func (p *parser) callonMakeMVBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMakeMVBlock1(stack["mvColOptionExpr"], stack["field"])
}

func (c *current) onMVBlockOptionsList1(first, rest any) (any, error) {
	restSlice := rest.([]any)

	numOptions := 1 + len(restSlice)

	mvColExpr := &structs.MultiValueColLetRequest{}

	for i := 0; i < numOptions; i++ {
		var currMvColExpr *MultiValueColOptionArgs
		if i == 0 {
			currMvColExpr = first.(*MultiValueColOptionArgs)
		} else {
			separator := restSlice[i-1].([]any)
			currMvColExpr = separator[1].(*MultiValueColOptionArgs)
		}

		argOption := currMvColExpr.argOption

		switch argOption {
		case "delimiter":
			mvColExpr.DelimiterString = currMvColExpr.mvColExpr.DelimiterString
			mvColExpr.IsRegex = currMvColExpr.mvColExpr.IsRegex
		case "allowempty":
			mvColExpr.AllowEmpty = currMvColExpr.mvColExpr.AllowEmpty
		case "setsv":
			mvColExpr.Setsv = currMvColExpr.mvColExpr.Setsv
		default:
			return nil, fmt.Errorf("Not a Valid MVBlockOption: %v", argOption)
		}
	}

	return mvColExpr, nil
}

func (p *parser) callonMVBlockOptionsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMVBlockOptionsList1(stack["first"], stack["rest"])
}

func (c *current) onMVBlockOption1(option any) (any, error) {
	return option, nil
}

func (p *parser) callonMVBlockOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMVBlockOption1(stack["option"])
}

func (c *current) onDelimOption1(delimExpr any) (any, error) {
	return delimExpr, nil
}

func (p *parser) callonDelimOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimOption1(stack["delimExpr"])
}

func (c *current) onStringDelimiter1(str any) (any, error) {
	mvColOptionArgs := &MultiValueColOptionArgs{
		argOption: "delimiter",
		mvColExpr: &structs.MultiValueColLetRequest{
			DelimiterString: removeQuotes(str),
		},
	}

	return mvColOptionArgs, nil
}

func (p *parser) callonStringDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringDelimiter1(stack["str"])
}

func (c *current) onRegexDelimiter1(str any) (any, error) {
	pattern := removeQuotes(str)
	_, err := regexp.Compile(pattern)
	if err != nil {
		return nil, fmt.Errorf("Error parsing tokenizer regular expression: %v. Error: %v", pattern, err)
	}

	mvColOptionArgs := &MultiValueColOptionArgs{
		argOption: "delimiter",
		mvColExpr: &structs.MultiValueColLetRequest{
			DelimiterString: pattern,
			IsRegex:         true,
		},
	}

	return mvColOptionArgs, nil
}

func (p *parser) callonRegexDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexDelimiter1(stack["str"])
}

func (c *current) onAllowEmptyOption1(boolVal any) (any, error) {

	mvColOptionArgs := &MultiValueColOptionArgs{
		argOption: "allowempty",
		mvColExpr: &structs.MultiValueColLetRequest{
			AllowEmpty: boolVal.(bool),
		},
	}

	return mvColOptionArgs, nil
}

func (p *parser) callonAllowEmptyOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAllowEmptyOption1(stack["boolVal"])
}

func (c *current) onSetSvOption1(boolVal any) (any, error) {
	mvColOptionArgs := &MultiValueColOptionArgs{
		argOption: "setsv",
		mvColExpr: &structs.MultiValueColLetRequest{
			Setsv: boolVal.(bool),
		},
	}

	return mvColOptionArgs, nil
}

func (p *parser) callonSetSvOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSetSvOption1(stack["boolVal"])
}

func (c *current) onSPathBlock1(spathExpr any) (any, error) {
	if spathExpr == nil {
		return createSPathExpr("", "", "")
	}
	return spathExpr, nil
}

func (p *parser) callonSPathBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSPathBlock1(stack["spathExpr"])
}

func (c *current) onSPathArgumentsList1(first, rest any) (any, error) {

	restSlice := rest.([]any)

	inputField, pathField, outputField := "", "", ""

	numArgs := 1 + len(restSlice)

	for i := 0; i < numArgs; i++ {
		var arg string
		if i == 0 {
			arg = first.(string)
		} else {
			separator := restSlice[i-1].([]any)
			arg = separator[1].(string)
		}

		switch {
		case strings.HasPrefix(arg, "input="):
			inputField = strings.TrimPrefix(arg, "input=")
		case strings.HasPrefix(arg, "output="):
			outputField = strings.TrimPrefix(arg, "output=")
		case strings.HasPrefix(arg, "path="):
			pathField = strings.TrimPrefix(arg, "path=")
		default:
			return nil, fmt.Errorf("SPathArguments: Invalid Spath Argument: %v", arg)
		}
	}

	return createSPathExpr(inputField, pathField, outputField)
}

func (p *parser) callonSPathArgumentsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSPathArgumentsList1(stack["first"], stack["rest"])
}

func (c *current) onSPathArgument1(arg any) (any, error) {
	return arg, nil
}

func (p *parser) callonSPathArgument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSPathArgument1(stack["arg"])
}

func (c *current) onInputField1(field any) (any, error) {
	return "input=" + field.(string), nil
}

func (p *parser) callonInputField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInputField1(stack["field"])
}

func (c *current) onOutputField1(field any) (any, error) {
	return "output=" + field.(string), nil
}

func (p *parser) callonOutputField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOutputField1(stack["field"])
}

func (c *current) onPathField1() (any, error) {
	pathField := string(c.text)
	if strings.HasPrefix(pathField, "path") {
		pathField = strings.TrimSpace(strings.TrimPrefix(pathField, "path="))
		pathField = strings.TrimSpace(strings.TrimPrefix(pathField, "path ="))
		if pathField != "" && pathField[0] == '"' {
			pathField = removeQuotes(pathField)
		}
	}
	return "path=" + pathField, nil
}

func (p *parser) callonPathField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPathField1()
}

func (c *current) onFormatBlock1(formatArgExpr any) (any, error) {
	var formatResultExpr *structs.FormatResultsRequest

	if formatArgExpr != nil {
		formatResultExpr = formatArgExpr.(*structs.FormatResultsRequest)
	} else {
		formatResultExpr = getDefaultFormatResultsExpr()
	}

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: &structs.LetColumnsRequest{
				NewColName:    "search",
				FormatResults: formatResultExpr,
			},
		},
	}

	return queryAgg, nil
}

func (p *parser) callonFormatBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatBlock1(stack["formatArgExpr"])
}

func (c *current) onFormatArgumentsList1(first, rest any) (any, error) {
	restSlice := rest.([]any)

	numOptions := 1 + len(restSlice)

	formatResultExpr := getDefaultFormatResultsExpr()

	for i := 0; i < numOptions; i++ {
		var currFormatExpr *FormatResultsRequestArguments

		if i == 0 {
			currFormatExpr = first.(*FormatResultsRequestArguments)
		} else {
			separator := restSlice[i-1].([]any)
			currFormatExpr = separator[1].(*FormatResultsRequestArguments)
		}

		switch currFormatExpr.argOption {
		case "mvsep":
			formatResultExpr.MVSeparator = currFormatExpr.formatResultExpr.MVSeparator
		case "maxresults":
			formatResultExpr.MaxResults = currFormatExpr.formatResultExpr.MaxResults
		case "emptystr":
			formatResultExpr.EmptyString = currFormatExpr.formatResultExpr.EmptyString
		case "rowColOptions":
			formatResultExpr.RowColOptions = currFormatExpr.formatResultExpr.RowColOptions
		default:
			return nil, fmt.Errorf("not a valid Format Result Argument: %v", currFormatExpr.argOption)
		}
	}

	return formatResultExpr, nil
}

func (p *parser) callonFormatArgumentsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArgumentsList1(stack["first"], stack["rest"])
}

func (c *current) onFormatArgument1(argExpr any) (any, error) {
	return argExpr, nil
}

func (p *parser) callonFormatArgument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArgument1(stack["argExpr"])
}

func (c *current) onFormatSeparator1(str any) (any, error) {
	return &FormatResultsRequestArguments{
		argOption: "mvsep",
		formatResultExpr: &structs.FormatResultsRequest{
			MVSeparator: removeQuotes(str),
		},
	}, nil
}

func (p *parser) callonFormatSeparator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatSeparator1(stack["str"])
}

func (c *current) onFormatMaxResults1(numStr any) (any, error) {
	num, err := strconv.ParseUint(numStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid Max results value is set for format: (%v): Error=%v", numStr.(string), err)
	}
	return &FormatResultsRequestArguments{
		argOption: "maxresults",
		formatResultExpr: &structs.FormatResultsRequest{
			MaxResults: num,
		},
	}, nil
}

func (p *parser) callonFormatMaxResults1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatMaxResults1(stack["numStr"])
}

func (c *current) onFormatEmptyStr1(str any) (any, error) {
	return &FormatResultsRequestArguments{
		argOption: "emptystr",
		formatResultExpr: &structs.FormatResultsRequest{
			EmptyString: removeQuotes(str),
		},
	}, nil
}

func (p *parser) callonFormatEmptyStr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatEmptyStr1(stack["str"])
}

func (c *current) onFormatRowColOptions1(rowPrefix, colPrefix, colSeparator, colEnd, rowSeparator, rowEnd any) (any, error) {
	rowColOptions := &structs.RowColOptions{
		RowPrefix:       removeQuotes(rowPrefix),
		ColumnPrefix:    removeQuotes(colPrefix),
		ColumnSeparator: removeQuotes(colSeparator),
		ColumnEnd:       removeQuotes(colEnd),
		RowSeparator:    removeQuotes(rowSeparator),
		RowEnd:          removeQuotes(rowEnd),
	}

	return &FormatResultsRequestArguments{
		argOption: "rowColOptions",
		formatResultExpr: &structs.FormatResultsRequest{
			RowColOptions: rowColOptions,
		},
	}, nil
}

func (p *parser) callonFormatRowColOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatRowColOptions1(stack["rowPrefix"], stack["colPrefix"], stack["colSeparator"], stack["colEnd"], stack["rowSeparator"], stack["rowEnd"])
}

func (c *current) onEventCountBlock1(eventCountExpr any) (any, error) {
	if eventCountExpr == nil {
		return createEventCountExpr([]string{"*"}, true, false, true)
	}
	return eventCountExpr, nil
}

func (p *parser) callonEventCountBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEventCountBlock1(stack["eventCountExpr"])
}

func (c *current) onEventCountArgumentsList1(first, rest any) (any, error) {

	restSlice := rest.([]any)

	indices := []string{}
	list_vix, report_size, summarize := true, false, true

	numArgs := 0
	if first != nil {
		numArgs++
	}
	numArgs += len(restSlice)

	for i := 0; i < numArgs; i++ {
		var arg string
		if i == 0 && first != nil {
			arg = first.(string)
		} else {
			separator := restSlice[i-1].([]any)
			arg = separator[1].(string)
		}

		switch {
		case strings.HasPrefix(arg, "index="):
			indices = append(indices, strings.TrimPrefix(arg, "index="))
		case strings.HasPrefix(arg, "list_vix="):
			var err error
			list_vix, err = strconv.ParseBool(strings.TrimPrefix(arg, "list_vix="))
			if err != nil {
				return nil, fmt.Errorf("EventCountArguments: Invalid value for list_vix: %v", err)
			}
		case strings.HasPrefix(arg, "report_size="):
			var err error
			report_size, err = strconv.ParseBool(strings.TrimPrefix(arg, "report_size="))
			if err != nil {
				return nil, fmt.Errorf("EventCountArguments: Invalid value for report_size: %v", err)
			}
		case strings.HasPrefix(arg, "summarize="):
			var err error
			summarize, err = strconv.ParseBool(strings.TrimPrefix(arg, "summarize="))
			if err != nil {
				return nil, fmt.Errorf("EventCountArguments: Invalid value for summarize: %v", err)
			}
		default:
			return nil, fmt.Errorf("EventCountArguments: Invalid EventCount Argument: %v", arg)
		}
	}

	// If no indices were provided, use the default value "*"
	if len(indices) == 0 {
		indices = append(indices, "*")
	}

	return createEventCountExpr(indices, list_vix, report_size, summarize)
}

func (p *parser) callonEventCountArgumentsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEventCountArgumentsList1(stack["first"], stack["rest"])
}

func (c *current) onEventCountArgument1(arg any) (any, error) {
	return arg, nil
}

func (p *parser) callonEventCountArgument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEventCountArgument1(stack["arg"])
}

func (c *current) onIndexField1(index any) (any, error) {
	return "index=" + index.(string), nil
}

func (p *parser) callonIndexField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexField1(stack["index"])
}

func (c *current) onSummarizeField1(field any) (any, error) {
	return "summarize=" + strconv.FormatBool(field.(bool)), nil
}

func (p *parser) callonSummarizeField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSummarizeField1(stack["field"])
}

func (c *current) onReportSizeField1(field any) (any, error) {
	return "report_size=" + strconv.FormatBool(field.(bool)), nil
}

func (p *parser) callonReportSizeField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReportSizeField1(stack["field"])
}

func (c *current) onListVixField1(field any) (any, error) {
	return "list_vix=" + strconv.FormatBool(field.(bool)), nil
}

func (p *parser) callonListVixField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListVixField1(stack["field"])
}

func (c *current) onIndexName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexName1()
}

func (c *current) onFillNullBlock1(valueOption, fields any) (any, error) {
	valueStr := "0"
	fieldList := make([]string, 0)

	if valueOption != nil {
		valueStr = valueOption.(string)
	}

	if fields != nil {
		fieldList = fields.([]string)
	}

	fillNullExpr := &structs.FillNullExpr{
		Value:     valueStr,
		FieldList: fieldList,
	}
	fillNullExpr.Records = make(map[string]map[string]interface{}, 0)
	fillNullExpr.FinalCols = make(map[string]bool, 0)

	return &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: &structs.LetColumnsRequest{
				FillNullRequest: fillNullExpr,
			},
		},
	}, nil
}

func (p *parser) callonFillNullBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFillNullBlock1(stack["valueOption"], stack["fields"])
}

func (c *current) onFillNullValueOption1(str any) (any, error) {
	return removeQuotes(str), nil
}

func (p *parser) callonFillNullValueOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFillNullValueOption1(stack["str"])
}

func (c *current) onFillNullFieldList1(fieldList any) (any, error) {
	return fieldList, nil
}

func (p *parser) callonFillNullFieldList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFillNullFieldList1(stack["fieldList"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize {
		val, ok = p.parseRuleMemoize(rule)
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
