// Code generated by pigeon; DO NOT EDIT.

// Copyright (c) 2021-2024 SigScalr, Inc.
//
// This file is part of SigLens Observability Solution
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

package spl

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"
	"unicode"
	"unicode/utf8"

	"github.com/siglens/siglens/pkg/ast"
	"github.com/siglens/siglens/pkg/segment/aggregations"
	"github.com/siglens/siglens/pkg/segment/query"
	"github.com/siglens/siglens/pkg/segment/structs"
	"github.com/siglens/siglens/pkg/segment/utils"
	toputils "github.com/siglens/siglens/pkg/utils"
	log "github.com/sirupsen/logrus"
)

func CalculateRelativeTime(timeModifier ast.TimeModifier, currTime time.Time) (int64, error) {
	var epoch int64 = 0
	var err error
	if timeModifier.AbsoluteTime == "now" {
		epoch = currTime.UnixMilli()
	} else if timeModifier.AbsoluteTime == "1" {
		return 1, nil
	} else if timeModifier.AbsoluteTime != "" {
		epoch, err = utils.ConvertCustomDateTimeFormatToEpochMs(timeModifier.AbsoluteTime)
		if err != nil {
			return 0, err
		}
	} else {
		offsetNum := timeModifier.RelativeTime.RelativeTimeOffset.Offset
		offsetTimeUnit := timeModifier.RelativeTime.RelativeTimeOffset.TimeUnit
		snap := timeModifier.RelativeTime.Snap
		finalTime := currTime
		if offsetNum != 0 {
			finalTime, err = utils.ApplyOffsetToTime(offsetNum, offsetTimeUnit, finalTime)
			if err != nil {
				return 0, err
			}
		}
		if snap != "" {
			finalTime, err = utils.ApplySnap(snap, finalTime)
			if err != nil {
				return 0, err
			}
		}
		epoch = finalTime.UnixMilli()
	}

	return epoch, nil
}

func applyTimeModifiers(initialEpoch int64, chainedOffsets []ast.RelativeTimeOffset, chainedSnaps []string) (int64, error) {
	offsetsLen := len(chainedOffsets)
	snapsLen := len(chainedSnaps)

	if offsetsLen != snapsLen {
		return 0, fmt.Errorf("chainedOffsets and chainedSnaps length not equal")
	}

	var err error
	for i := 0; i < offsetsLen; i++ {
		var relativeTimeModifier ast.RelativeTimeModifier

		relativeTimeModifier.RelativeTimeOffset = chainedOffsets[i]
		relativeTimeModifier.Snap = chainedSnaps[i]

		initialEpoch, err = CalculateRelativeTime(ast.TimeModifier{RelativeTime: relativeTimeModifier}, time.UnixMilli(initialEpoch))
		if err != nil {
			return 0, err
		}
	}
	return initialEpoch, nil
}

func getParseError(err error) error {
	switch ev := err.(type) {
	case errList:
		if pe, ok := ev[0].(*parserError); ok {
			return &ast.ParseError{
				Inner:    pe.Inner,
				Line:     pe.pos.line,
				Column:   pe.pos.col,
				Offset:   pe.pos.offset,
				Prefix:   pe.prefix,
				Expected: pe.expected,
			}
		}
	}
	return err
}

// Remove the first and last character of the string
func removeQuotes(s any) string {
	str := s.(string)
	if len(str) < 3 {
		return ""
	}

	return str[1 : len(str)-1]
}

// Check if it rename fields with similar names using a wildcard
func isRegexRename(originalPattern, newPattern string) (bool, error) {
	oldWildcards := strings.Count(originalPattern, "*")
	newWildcards := strings.Count(newPattern, "*")

	if oldWildcards == 0 && newWildcards == 0 {
		return false, nil
	} else if oldWildcards > 0 && oldWildcards == newWildcards {
		return true, nil
	} else {
		return false, errors.New("Patterns do not match")
	}
}

func deMorgansLaw(node *ast.Node) {
	switch node.NodeType {
	case ast.NodeTerminal:
		switch node.Comparison.Op {
		case "=":
			node.Comparison.Op = "!="
		case "!=":
			node.Comparison.Op = "="
		case ">":
			node.Comparison.Op = "<="
		case "<":
			node.Comparison.Op = ">="
		case ">=":
			node.Comparison.Op = "<"
		case "<=":
			node.Comparison.Op = ">"
		default:
			log.Errorf("deMorgansLaw: unexpected node comparison op: %v", node.Comparison.Op)
		}
	case ast.NodeAnd:
		node.NodeType = ast.NodeOr
		deMorgansLaw(node.Left)
		deMorgansLaw(node.Right)
	case ast.NodeOr:
		node.NodeType = ast.NodeAnd
		deMorgansLaw(node.Left)
		deMorgansLaw(node.Right)
	default:
		log.Errorf("deMorgansLaw: unexpected NodeType: %v", node.NodeType)
	}
}

// Generate NumericExpr struct for eval functions
func createNumericExpr(op string, leftNumericExpr *structs.NumericExpr, rightNumericExpr *structs.NumericExpr, numericExprMode structs.NumericExprMode) (*structs.NumericExpr, error) {
	if leftNumericExpr == nil {
		return nil, fmt.Errorf("expr cannot be nil")
	}

	return &structs.NumericExpr{
		IsTerminal:      false,
		Op:              op,
		Left:            leftNumericExpr,
		Right:           rightNumericExpr,
		NumericExprMode: numericExprMode,
	}, nil
}

func transferUint8ToString(opName interface{}) (string, error) {
	strData, ok := opName.([]byte)
	if !ok {
		return "", fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)
	return opNameStr, nil
}

func transferPCREToRE2(pattern string) string {
	pattern = strings.Replace(pattern, "(?<", "(?P<", -1)
	return pattern
}

func getRexColNames(pattern string) ([]string, error) {
	re, err := regexp.Compile(`\?<(?P<GroupName>[a-zA-Z0-9_]+)>`)
	if err != nil {
		return nil, fmt.Errorf("getRexColNames: There are some errors in the pattern: %v", err)
	}
	matches := re.FindAllStringSubmatch(pattern, -1)

	var rexColNames []string
	for _, match := range matches {
		rexColNames = append(rexColNames, match[1])
	}

	return rexColNames, nil
}

func SearchMatchGetFields(searchStr string) ([]string, error) {

	kvPairs := strings.Fields(searchStr)
	if len(kvPairs) == 0 {
		return []string{}, fmt.Errorf("Spl peg: Invalid syntax for searchmatch")
	}
	fieldList := make([]string, 0)

	for _, kvPair := range kvPairs {
		parts := strings.Split(kvPair, "=")
		if len(parts) == 1 {
			if len(kvPairs) == 1 {
				fieldList = append(fieldList, "*")
				return fieldList, nil
			} else {
				return []string{}, fmt.Errorf("Spl peg: Invalid syntax for searchmatch")
			}
		}
		if len(parts) != 2 {
			return []string{}, fmt.Errorf("Spl peg: Invalid syntax for searchmatch")
		}
		// fieldname is empty
		if len(parts[0]) == 0 {
			return []string{}, fmt.Errorf("Spl peg: Invalid syntax for searchmatch")
		}

		fieldList = append(fieldList, parts[0])
	}

	return fieldList, nil
}

func initializeStatsOptions() *structs.StatsOptions {
	return &structs.StatsOptions{
		Delim:          " ",
		Partitions:     1,
		DedupSplitvals: false,
		Allnum:         false,
	}
}

func initializeStreamStatsOptions() *structs.StreamStatsOptions {
	return &structs.StreamStatsOptions{
		Current: true,
		Global:  true,
	}
}

func initializeGenTimesOption() (*structs.GenTimes, error) {
	endTime := time.Now()
	daySnap := fmt.Sprintf("%v", utils.TMDay)
	endTime, err := utils.ApplySnap(daySnap, endTime)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Error while applying the snap: %v", err)
	}

	return &structs.GenTimes{
		EndTime: uint64(endTime.UnixMilli()),
		Interval: &structs.SpanLength{
			Num:       1,
			TimeScalr: utils.TMDay,
		},
	}, nil
}

func createSPathExpr(inputField, pathField, outputField string) (*structs.QueryAggregators, error) {

	if inputField == "" {
		inputField = "_raw"
	}

	spathExpr := &structs.SPathExpr{
		InputColName:  inputField,
		Path:          pathField,
		OutputColName: outputField,
	}
	return &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: &structs.LetColumnsRequest{
				ValueColRequest: &structs.ValueExpr{
					ValueExprMode: structs.VEMStringExpr,
					StringExpr: &structs.StringExpr{
						StringExprMode: structs.SEMTextExpr,
						TextExpr: &structs.TextExpr{
							IsTerminal: true,
							Op:         "spath",
							SPathExpr:  spathExpr,
						},
					},
				},
				NewColName: outputField,
			},
		},
	}, nil
}
func createEventCountExpr(indices []string, list_vix, report_size, summarize bool) (*structs.QueryAggregators, error) {
	eventCountExpr := &structs.EventCountExpr{
		Indices:    indices,
		ListVix:    list_vix,
		ReportSize: report_size,
		Summarize:  summarize,
	}
	return &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: &structs.LetColumnsRequest{
				EventCountRequest: eventCountExpr,
			},
		},
	}, nil
}
func getDefaultFormatResultsExpr() *structs.FormatResultsRequest {
	return &structs.FormatResultsRequest{
		MVSeparator: "OR",
		MaxResults:  0,
		EmptyString: "NOT()",
		RowColOptions: &structs.RowColOptions{
			RowPrefix:       "(",
			ColumnPrefix:    "(",
			ColumnSeparator: "AND",
			ColumnEnd:       ")",
			RowSeparator:    "OR",
			RowEnd:          ")",
		},
	}
}

func chainAggregators(curQueryAgg *structs.QueryAggregators, queryAggs []any) {
	for ; curQueryAgg.Next != nil; curQueryAgg = curQueryAgg.Next {
	}

	// Link the remaining chains.
	for i := range queryAggs {
		queryAgg := queryAggs[i].(*structs.QueryAggregators)
		curQueryAgg.Next = queryAgg

		// Go to the end of this chain.
		for ; curQueryAgg.Next != nil; curQueryAgg = curQueryAgg.Next {
		}
	}
}

type aggregator struct {
	measureAgg         *structs.MeasureAggregator
	renameOutputField  bool
	outputFieldNewName string
}

type singleAggTemp struct {
	aggregators   []*aggregator
	SplitByClause *structs.SplitByClause
}

type TxnArgs struct {
	argOption string
	arguments *structs.TransactionArguments
}

type TimechartArgs struct {
	singleAggExpr *singleAggTemp
	// TODO: Add eval clause expr.
	tcOptions *structs.TcOptions
}

type MultiValueColOptionArgs struct {
	argOption string
	mvColExpr *structs.MultiValueColLetRequest
}

type HeadOptionArgs struct {
	argOption string
	headExpr  *structs.HeadExpr
}

type BinOptionArgs struct {
	argOption  string
	binOptions *structs.BinCmdOptions
}

type StreamStatsOptionArgs struct {
	argOption          string
	streamStatsOptions *structs.StreamStatsOptions
}

type GenTimesOptionArgs struct {
	argOption      string
	genTimesOption *structs.GenTimes
}

type InputLookupOptionArgs struct {
	argOption         string
	inputLookupOption *structs.InputLookup
}

type SPathFieldExpr struct {
	PathValue       string
	IsPathFieldName bool
}

type FormatResultsRequestArguments struct {
	argOption        string
	formatResultExpr *structs.FormatResultsRequest
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Start",
			pos:  position{line: 416, col: 1, offset: 12162},
			expr: &choiceExpr{
				pos: position{line: 416, col: 10, offset: 12171},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 416, col: 10, offset: 12171},
						run: (*parser).callonStart2,
						expr: &seqExpr{
							pos: position{line: 416, col: 10, offset: 12171},
							exprs: []any{
								&zeroOrOneExpr{
									pos: position{line: 416, col: 10, offset: 12171},
									expr: &ruleRefExpr{
										pos:  position{line: 416, col: 10, offset: 12171},
										name: "SPACE",
									},
								},
								&labeledExpr{
									pos:   position{line: 416, col: 17, offset: 12178},
									label: "initialSearch",
									expr: &ruleRefExpr{
										pos:  position{line: 416, col: 32, offset: 12193},
										name: "InitialSearchBlock",
									},
								},
								&labeledExpr{
									pos:   position{line: 416, col: 52, offset: 12213},
									label: "filterBlocks",
									expr: &zeroOrMoreExpr{
										pos: position{line: 416, col: 65, offset: 12226},
										expr: &ruleRefExpr{
											pos:  position{line: 416, col: 66, offset: 12227},
											name: "FilterBlock",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 416, col: 80, offset: 12241},
									label: "queryAggBlocks",
									expr: &zeroOrMoreExpr{
										pos: position{line: 416, col: 95, offset: 12256},
										expr: &ruleRefExpr{
											pos:  position{line: 416, col: 96, offset: 12257},
											name: "QueryAggergatorBlock",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 416, col: 119, offset: 12280},
									expr: &ruleRefExpr{
										pos:  position{line: 416, col: 119, offset: 12280},
										name: "SPACE",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 416, col: 126, offset: 12287},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 480, col: 3, offset: 14162},
						run: (*parser).callonStart17,
						expr: &seqExpr{
							pos: position{line: 480, col: 3, offset: 14162},
							exprs: []any{
								&zeroOrOneExpr{
									pos: position{line: 480, col: 3, offset: 14162},
									expr: &ruleRefExpr{
										pos:  position{line: 480, col: 3, offset: 14162},
										name: "SPACE",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 480, col: 10, offset: 14169},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 480, col: 15, offset: 14174},
									name: "CMD_GENTIMES",
								},
								&ruleRefExpr{
									pos:  position{line: 480, col: 28, offset: 14187},
									name: "SPACE",
								},
								&labeledExpr{
									pos:   position{line: 480, col: 34, offset: 14193},
									label: "genTimesOption",
									expr: &ruleRefExpr{
										pos:  position{line: 480, col: 50, offset: 14209},
										name: "GenTimesOptionList",
									},
								},
								&labeledExpr{
									pos:   position{line: 480, col: 70, offset: 14229},
									label: "queryAggBlocks",
									expr: &zeroOrMoreExpr{
										pos: position{line: 480, col: 85, offset: 14244},
										expr: &ruleRefExpr{
											pos:  position{line: 480, col: 86, offset: 14245},
											name: "QueryAggergatorBlock",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 480, col: 109, offset: 14268},
									expr: &ruleRefExpr{
										pos:  position{line: 480, col: 109, offset: 14268},
										name: "SPACE",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 480, col: 116, offset: 14275},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 498, col: 3, offset: 14730},
						run: (*parser).callonStart32,
						expr: &seqExpr{
							pos: position{line: 498, col: 3, offset: 14730},
							exprs: []any{
								&zeroOrOneExpr{
									pos: position{line: 498, col: 3, offset: 14730},
									expr: &ruleRefExpr{
										pos:  position{line: 498, col: 3, offset: 14730},
										name: "SPACE",
									},
								},
								&labeledExpr{
									pos:   position{line: 498, col: 10, offset: 14737},
									label: "inputLookup",
									expr: &ruleRefExpr{
										pos:  position{line: 498, col: 22, offset: 14749},
										name: "InputLookupBlock",
									},
								},
								&labeledExpr{
									pos:   position{line: 498, col: 39, offset: 14766},
									label: "queryAggBlocks",
									expr: &zeroOrMoreExpr{
										pos: position{line: 498, col: 54, offset: 14781},
										expr: &ruleRefExpr{
											pos:  position{line: 498, col: 55, offset: 14782},
											name: "QueryAggergatorBlock",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 498, col: 78, offset: 14805},
									expr: &ruleRefExpr{
										pos:  position{line: 498, col: 78, offset: 14805},
										name: "SPACE",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 498, col: 85, offset: 14812},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PartialTimestamp",
			pos:  position{line: 512, col: 1, offset: 15105},
			expr: &actionExpr{
				pos: position{line: 512, col: 21, offset: 15125},
				run: (*parser).callonPartialTimestamp1,
				expr: &seqExpr{
					pos: position{line: 512, col: 21, offset: 15125},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 512, col: 21, offset: 15125},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 512, col: 26, offset: 15130},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 512, col: 32, offset: 15136},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&charClassMatcher{
							pos:        position{line: 512, col: 36, offset: 15140},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 512, col: 41, offset: 15145},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 512, col: 47, offset: 15151},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&charClassMatcher{
							pos:        position{line: 512, col: 51, offset: 15155},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 512, col: 56, offset: 15160},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 512, col: 61, offset: 15165},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 512, col: 66, offset: 15170},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "IntegerAsTimeToUnixEpochMs",
			pos:  position{line: 519, col: 1, offset: 15311},
			expr: &actionExpr{
				pos: position{line: 519, col: 31, offset: 15341},
				run: (*parser).callonIntegerAsTimeToUnixEpochMs1,
				expr: &labeledExpr{
					pos:   position{line: 519, col: 31, offset: 15341},
					label: "intStr",
					expr: &ruleRefExpr{
						pos:  position{line: 519, col: 38, offset: 15348},
						name: "IntegerAsString",
					},
				},
			},
		},
		{
			name: "DateTimeToUnixEpochMs",
			pos:  position{line: 537, col: 1, offset: 15987},
			expr: &actionExpr{
				pos: position{line: 537, col: 26, offset: 16012},
				run: (*parser).callonDateTimeToUnixEpochMs1,
				expr: &labeledExpr{
					pos:   position{line: 537, col: 26, offset: 16012},
					label: "timeStamp",
					expr: &choiceExpr{
						pos: position{line: 537, col: 37, offset: 16023},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 537, col: 37, offset: 16023},
								name: "FullTimeStamp",
							},
							&ruleRefExpr{
								pos:  position{line: 537, col: 53, offset: 16039},
								name: "PartialTimestamp",
							},
						},
					},
				},
			},
		},
		{
			name: "GenTimestamp",
			pos:  position{line: 546, col: 1, offset: 16296},
			expr: &actionExpr{
				pos: position{line: 546, col: 17, offset: 16312},
				run: (*parser).callonGenTimestamp1,
				expr: &labeledExpr{
					pos:   position{line: 546, col: 17, offset: 16312},
					label: "epochInMilli",
					expr: &choiceExpr{
						pos: position{line: 546, col: 31, offset: 16326},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 546, col: 31, offset: 16326},
								name: "DateTimeToUnixEpochMs",
							},
							&ruleRefExpr{
								pos:  position{line: 546, col: 55, offset: 16350},
								name: "IntegerAsTimeToUnixEpochMs",
							},
						},
					},
				},
			},
		},
		{
			name: "GenTimesOptionEnd",
			pos:  position{line: 550, col: 1, offset: 16412},
			expr: &actionExpr{
				pos: position{line: 550, col: 22, offset: 16433},
				run: (*parser).callonGenTimesOptionEnd1,
				expr: &seqExpr{
					pos: position{line: 550, col: 22, offset: 16433},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 550, col: 22, offset: 16433},
							val:        "end",
							ignoreCase: false,
							want:       "\"end\"",
						},
						&ruleRefExpr{
							pos:  position{line: 550, col: 28, offset: 16439},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 550, col: 34, offset: 16445},
							label: "timeStamp",
							expr: &ruleRefExpr{
								pos:  position{line: 550, col: 45, offset: 16456},
								name: "GenTimestamp",
							},
						},
					},
				},
			},
		},
		{
			name: "GenTimesOptionStart",
			pos:  position{line: 559, col: 1, offset: 16646},
			expr: &actionExpr{
				pos: position{line: 559, col: 24, offset: 16669},
				run: (*parser).callonGenTimesOptionStart1,
				expr: &seqExpr{
					pos: position{line: 559, col: 24, offset: 16669},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 559, col: 24, offset: 16669},
							val:        "start",
							ignoreCase: false,
							want:       "\"start\"",
						},
						&ruleRefExpr{
							pos:  position{line: 559, col: 32, offset: 16677},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 559, col: 38, offset: 16683},
							label: "timeStamp",
							expr: &ruleRefExpr{
								pos:  position{line: 559, col: 49, offset: 16694},
								name: "GenTimestamp",
							},
						},
					},
				},
			},
		},
		{
			name: "GenTimesOptionIncrement",
			pos:  position{line: 568, col: 1, offset: 16888},
			expr: &actionExpr{
				pos: position{line: 568, col: 28, offset: 16915},
				run: (*parser).callonGenTimesOptionIncrement1,
				expr: &seqExpr{
					pos: position{line: 568, col: 28, offset: 16915},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 568, col: 28, offset: 16915},
							val:        "increment",
							ignoreCase: false,
							want:       "\"increment\"",
						},
						&ruleRefExpr{
							pos:  position{line: 568, col: 40, offset: 16927},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 568, col: 46, offset: 16933},
							label: "intStr",
							expr: &ruleRefExpr{
								pos:  position{line: 568, col: 53, offset: 16940},
								name: "IntegerAsString",
							},
						},
						&labeledExpr{
							pos:   position{line: 568, col: 69, offset: 16956},
							label: "unitStr",
							expr: &zeroOrOneExpr{
								pos: position{line: 568, col: 77, offset: 16964},
								expr: &choiceExpr{
									pos: position{line: 568, col: 78, offset: 16965},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 568, col: 78, offset: 16965},
											val:        "s",
											ignoreCase: false,
											want:       "\"s\"",
										},
										&litMatcher{
											pos:        position{line: 568, col: 84, offset: 16971},
											val:        "m",
											ignoreCase: false,
											want:       "\"m\"",
										},
										&litMatcher{
											pos:        position{line: 568, col: 90, offset: 16977},
											val:        "d",
											ignoreCase: false,
											want:       "\"d\"",
										},
										&litMatcher{
											pos:        position{line: 568, col: 96, offset: 16983},
											val:        "h",
											ignoreCase: false,
											want:       "\"h\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GenTimesOption",
			pos:  position{line: 609, col: 1, offset: 18130},
			expr: &actionExpr{
				pos: position{line: 609, col: 19, offset: 18148},
				run: (*parser).callonGenTimesOption1,
				expr: &labeledExpr{
					pos:   position{line: 609, col: 19, offset: 18148},
					label: "genTimesOption",
					expr: &choiceExpr{
						pos: position{line: 609, col: 35, offset: 18164},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 609, col: 35, offset: 18164},
								name: "GenTimesOptionEnd",
							},
							&ruleRefExpr{
								pos:  position{line: 609, col: 55, offset: 18184},
								name: "GenTimesOptionStart",
							},
							&ruleRefExpr{
								pos:  position{line: 609, col: 77, offset: 18206},
								name: "GenTimesOptionIncrement",
							},
						},
					},
				},
			},
		},
		{
			name: "GenTimesOptionList",
			pos:  position{line: 613, col: 1, offset: 18267},
			expr: &actionExpr{
				pos: position{line: 613, col: 23, offset: 18289},
				run: (*parser).callonGenTimesOptionList1,
				expr: &seqExpr{
					pos: position{line: 613, col: 23, offset: 18289},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 613, col: 23, offset: 18289},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 613, col: 29, offset: 18295},
								name: "GenTimesOption",
							},
						},
						&labeledExpr{
							pos:   position{line: 613, col: 44, offset: 18310},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 613, col: 49, offset: 18315},
								expr: &seqExpr{
									pos: position{line: 613, col: 50, offset: 18316},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 613, col: 50, offset: 18316},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 613, col: 56, offset: 18322},
											name: "GenTimesOption",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InitialSearchBlock",
			pos:  position{line: 660, col: 1, offset: 19865},
			expr: &actionExpr{
				pos: position{line: 660, col: 23, offset: 19887},
				run: (*parser).callonInitialSearchBlock1,
				expr: &seqExpr{
					pos: position{line: 660, col: 23, offset: 19887},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 660, col: 23, offset: 19887},
							expr: &ruleRefExpr{
								pos:  position{line: 660, col: 23, offset: 19887},
								name: "CMD_SEARCH",
							},
						},
						&labeledExpr{
							pos:   position{line: 660, col: 35, offset: 19899},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 660, col: 42, offset: 19906},
								name: "ClauseLevel4",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBlock",
			pos:  position{line: 664, col: 1, offset: 19947},
			expr: &actionExpr{
				pos: position{line: 664, col: 16, offset: 19962},
				run: (*parser).callonSearchBlock1,
				expr: &seqExpr{
					pos: position{line: 664, col: 16, offset: 19962},
					exprs: []any{
						&notExpr{
							pos: position{line: 664, col: 16, offset: 19962},
							expr: &ruleRefExpr{
								pos:  position{line: 664, col: 18, offset: 19964},
								name: "ALLCMD",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 664, col: 26, offset: 19972},
							expr: &ruleRefExpr{
								pos:  position{line: 664, col: 26, offset: 19972},
								name: "CMD_SEARCH",
							},
						},
						&labeledExpr{
							pos:   position{line: 664, col: 38, offset: 19984},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 664, col: 45, offset: 19991},
								name: "ClauseLevel4",
							},
						},
					},
				},
			},
		},
		{
			name: "FilterBlock",
			pos:  position{line: 668, col: 1, offset: 20032},
			expr: &actionExpr{
				pos: position{line: 668, col: 16, offset: 20047},
				run: (*parser).callonFilterBlock1,
				expr: &seqExpr{
					pos: position{line: 668, col: 16, offset: 20047},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 668, col: 16, offset: 20047},
							name: "PIPE",
						},
						&labeledExpr{
							pos:   position{line: 668, col: 21, offset: 20052},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 668, col: 28, offset: 20059},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 668, col: 28, offset: 20059},
										name: "SearchBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 668, col: 42, offset: 20073},
										name: "RegexBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 668, col: 55, offset: 20086},
										name: "TimeModifiers",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QueryAggergatorBlock",
			pos:  position{line: 673, col: 1, offset: 20165},
			expr: &actionExpr{
				pos: position{line: 673, col: 25, offset: 20189},
				run: (*parser).callonQueryAggergatorBlock1,
				expr: &labeledExpr{
					pos:   position{line: 673, col: 25, offset: 20189},
					label: "block",
					expr: &choiceExpr{
						pos: position{line: 673, col: 32, offset: 20196},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 673, col: 32, offset: 20196},
								name: "FieldSelectBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 673, col: 51, offset: 20215},
								name: "AggregatorBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 673, col: 69, offset: 20233},
								name: "EvalBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 673, col: 81, offset: 20245},
								name: "WhereBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 673, col: 94, offset: 20258},
								name: "HeadBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 673, col: 106, offset: 20270},
								name: "RexBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 673, col: 117, offset: 20281},
								name: "StatisticBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 673, col: 134, offset: 20298},
								name: "RenameBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 673, col: 148, offset: 20312},
								name: "TimechartBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 673, col: 165, offset: 20329},
								name: "TransactionBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 673, col: 184, offset: 20348},
								name: "DedupBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 673, col: 197, offset: 20361},
								name: "SortBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 673, col: 209, offset: 20373},
								name: "MultiValueBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 673, col: 227, offset: 20391},
								name: "SPathBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 673, col: 240, offset: 20404},
								name: "FormatBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 673, col: 254, offset: 20418},
								name: "EventCountBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 673, col: 272, offset: 20436},
								name: "TailBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 673, col: 284, offset: 20448},
								name: "BinBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 673, col: 295, offset: 20459},
								name: "StreamStatsBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 673, col: 314, offset: 20478},
								name: "FillNullBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 673, col: 330, offset: 20494},
								name: "MvexpandBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 673, col: 346, offset: 20510},
								name: "InputLookupAggBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldSelectBlock",
			pos:  position{line: 678, col: 1, offset: 20611},
			expr: &actionExpr{
				pos: position{line: 678, col: 21, offset: 20631},
				run: (*parser).callonFieldSelectBlock1,
				expr: &seqExpr{
					pos: position{line: 678, col: 21, offset: 20631},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 678, col: 21, offset: 20631},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 678, col: 26, offset: 20636},
							name: "CMD_FIELDS",
						},
						&labeledExpr{
							pos:   position{line: 678, col: 37, offset: 20647},
							label: "op",
							expr: &zeroOrOneExpr{
								pos: position{line: 678, col: 40, offset: 20650},
								expr: &choiceExpr{
									pos: position{line: 678, col: 41, offset: 20651},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 678, col: 41, offset: 20651},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
										&litMatcher{
											pos:        position{line: 678, col: 47, offset: 20657},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 678, col: 53, offset: 20663},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 678, col: 68, offset: 20678},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 678, col: 75, offset: 20685},
								name: "FieldNameList",
							},
						},
					},
				},
			},
		},
		{
			name: "CommonAggregatorBlock",
			pos:  position{line: 696, col: 1, offset: 21189},
			expr: &actionExpr{
				pos: position{line: 696, col: 26, offset: 21214},
				run: (*parser).callonCommonAggregatorBlock1,
				expr: &seqExpr{
					pos: position{line: 696, col: 26, offset: 21214},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 696, col: 26, offset: 21214},
							label: "aggs",
							expr: &ruleRefExpr{
								pos:  position{line: 696, col: 31, offset: 21219},
								name: "AggregationList",
							},
						},
						&labeledExpr{
							pos:   position{line: 696, col: 47, offset: 21235},
							label: "byFields",
							expr: &zeroOrOneExpr{
								pos: position{line: 696, col: 56, offset: 21244},
								expr: &ruleRefExpr{
									pos:  position{line: 696, col: 57, offset: 21245},
									name: "GroupbyBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggregatorBlock",
			pos:  position{line: 742, col: 1, offset: 22740},
			expr: &actionExpr{
				pos: position{line: 742, col: 20, offset: 22759},
				run: (*parser).callonAggregatorBlock1,
				expr: &seqExpr{
					pos: position{line: 742, col: 20, offset: 22759},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 742, col: 20, offset: 22759},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 742, col: 25, offset: 22764},
							name: "CMD_STATS",
						},
						&labeledExpr{
							pos:   position{line: 742, col: 35, offset: 22774},
							label: "aggs",
							expr: &ruleRefExpr{
								pos:  position{line: 742, col: 41, offset: 22780},
								name: "CommonAggregatorBlock",
							},
						},
						&labeledExpr{
							pos:   position{line: 742, col: 64, offset: 22803},
							label: "options",
							expr: &zeroOrOneExpr{
								pos: position{line: 742, col: 72, offset: 22811},
								expr: &ruleRefExpr{
									pos:  position{line: 742, col: 73, offset: 22812},
									name: "StatsOptions",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatsOptions",
			pos:  position{line: 756, col: 1, offset: 23145},
			expr: &actionExpr{
				pos: position{line: 756, col: 17, offset: 23161},
				run: (*parser).callonStatsOptions1,
				expr: &labeledExpr{
					pos:   position{line: 756, col: 17, offset: 23161},
					label: "option",
					expr: &zeroOrMoreExpr{
						pos: position{line: 756, col: 24, offset: 23168},
						expr: &ruleRefExpr{
							pos:  position{line: 756, col: 25, offset: 23169},
							name: "StatsOption",
						},
					},
				},
			},
		},
		{
			name: "StatsOption",
			pos:  position{line: 794, col: 1, offset: 24610},
			expr: &actionExpr{
				pos: position{line: 794, col: 16, offset: 24625},
				run: (*parser).callonStatsOption1,
				expr: &seqExpr{
					pos: position{line: 794, col: 16, offset: 24625},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 794, col: 16, offset: 24625},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 794, col: 22, offset: 24631},
							label: "optionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 794, col: 32, offset: 24641},
								name: "StatsOptionCMD",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 794, col: 47, offset: 24656},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 794, col: 53, offset: 24662},
							label: "str",
							expr: &choiceExpr{
								pos: position{line: 794, col: 58, offset: 24667},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 794, col: 58, offset: 24667},
										name: "IntegerAsString",
									},
									&ruleRefExpr{
										pos:  position{line: 794, col: 76, offset: 24685},
										name: "EvalFieldToRead",
									},
									&ruleRefExpr{
										pos:  position{line: 794, col: 94, offset: 24703},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatsOptionCMD",
			pos:  position{line: 799, col: 1, offset: 24808},
			expr: &actionExpr{
				pos: position{line: 799, col: 19, offset: 24826},
				run: (*parser).callonStatsOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 799, col: 19, offset: 24826},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 799, col: 27, offset: 24834},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 799, col: 27, offset: 24834},
								val:        "allnum",
								ignoreCase: false,
								want:       "\"allnum\"",
							},
							&litMatcher{
								pos:        position{line: 799, col: 38, offset: 24845},
								val:        "dedup_splitvals",
								ignoreCase: false,
								want:       "\"dedup_splitvals\"",
							},
							&litMatcher{
								pos:        position{line: 799, col: 58, offset: 24865},
								val:        "delim",
								ignoreCase: false,
								want:       "\"delim\"",
							},
							&litMatcher{
								pos:        position{line: 799, col: 68, offset: 24875},
								val:        "partitions",
								ignoreCase: false,
								want:       "\"partitions\"",
							},
						},
					},
				},
			},
		},
		{
			name: "GroupbyBlock",
			pos:  position{line: 807, col: 1, offset: 25065},
			expr: &actionExpr{
				pos: position{line: 807, col: 17, offset: 25081},
				run: (*parser).callonGroupbyBlock1,
				expr: &seqExpr{
					pos: position{line: 807, col: 17, offset: 25081},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 807, col: 17, offset: 25081},
							name: "BY",
						},
						&labeledExpr{
							pos:   position{line: 807, col: 20, offset: 25084},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 807, col: 27, offset: 25091},
								name: "FieldNameList",
							},
						},
					},
				},
			},
		},
		{
			name: "StreamStatsOptionResetOnChange",
			pos:  position{line: 819, col: 1, offset: 25441},
			expr: &actionExpr{
				pos: position{line: 819, col: 35, offset: 25475},
				run: (*parser).callonStreamStatsOptionResetOnChange1,
				expr: &seqExpr{
					pos: position{line: 819, col: 35, offset: 25475},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 819, col: 35, offset: 25475},
							val:        "reset_on_change",
							ignoreCase: false,
							want:       "\"reset_on_change\"",
						},
						&ruleRefExpr{
							pos:  position{line: 819, col: 53, offset: 25493},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 819, col: 59, offset: 25499},
							label: "boolVal",
							expr: &ruleRefExpr{
								pos:  position{line: 819, col: 67, offset: 25507},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "StreamStatsOptionCurrent",
			pos:  position{line: 831, col: 1, offset: 25768},
			expr: &actionExpr{
				pos: position{line: 831, col: 29, offset: 25796},
				run: (*parser).callonStreamStatsOptionCurrent1,
				expr: &seqExpr{
					pos: position{line: 831, col: 29, offset: 25796},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 831, col: 29, offset: 25796},
							val:        "current",
							ignoreCase: false,
							want:       "\"current\"",
						},
						&ruleRefExpr{
							pos:  position{line: 831, col: 39, offset: 25806},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 831, col: 45, offset: 25812},
							label: "boolVal",
							expr: &ruleRefExpr{
								pos:  position{line: 831, col: 53, offset: 25820},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "StreamStatsOptionGlobal",
			pos:  position{line: 843, col: 1, offset: 26067},
			expr: &actionExpr{
				pos: position{line: 843, col: 28, offset: 26094},
				run: (*parser).callonStreamStatsOptionGlobal1,
				expr: &seqExpr{
					pos: position{line: 843, col: 28, offset: 26094},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 843, col: 28, offset: 26094},
							val:        "global",
							ignoreCase: false,
							want:       "\"global\"",
						},
						&ruleRefExpr{
							pos:  position{line: 843, col: 37, offset: 26103},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 843, col: 43, offset: 26109},
							label: "boolVal",
							expr: &ruleRefExpr{
								pos:  position{line: 843, col: 51, offset: 26117},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "StreamStatsOptionAllNum",
			pos:  position{line: 856, col: 1, offset: 26451},
			expr: &actionExpr{
				pos: position{line: 856, col: 28, offset: 26478},
				run: (*parser).callonStreamStatsOptionAllNum1,
				expr: &seqExpr{
					pos: position{line: 856, col: 28, offset: 26478},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 856, col: 28, offset: 26478},
							val:        "allnum",
							ignoreCase: false,
							want:       "\"allnum\"",
						},
						&ruleRefExpr{
							pos:  position{line: 856, col: 37, offset: 26487},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 856, col: 43, offset: 26493},
							label: "boolVal",
							expr: &ruleRefExpr{
								pos:  position{line: 856, col: 51, offset: 26501},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "StreamStatsOptionWindow",
			pos:  position{line: 869, col: 1, offset: 26835},
			expr: &actionExpr{
				pos: position{line: 869, col: 28, offset: 26862},
				run: (*parser).callonStreamStatsOptionWindow1,
				expr: &seqExpr{
					pos: position{line: 869, col: 28, offset: 26862},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 869, col: 28, offset: 26862},
							val:        "window",
							ignoreCase: false,
							want:       "\"window\"",
						},
						&ruleRefExpr{
							pos:  position{line: 869, col: 37, offset: 26871},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 869, col: 43, offset: 26877},
							label: "windowSize",
							expr: &ruleRefExpr{
								pos:  position{line: 869, col: 54, offset: 26888},
								name: "PositiveIntegerAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "StreamStatsOptionResetBefore",
			pos:  position{line: 889, col: 1, offset: 27492},
			expr: &actionExpr{
				pos: position{line: 889, col: 33, offset: 27524},
				run: (*parser).callonStreamStatsOptionResetBefore1,
				expr: &seqExpr{
					pos: position{line: 889, col: 33, offset: 27524},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 889, col: 33, offset: 27524},
							val:        "reset_before",
							ignoreCase: false,
							want:       "\"reset_before\"",
						},
						&ruleRefExpr{
							pos:  position{line: 889, col: 48, offset: 27539},
							name: "EQUAL",
						},
						&ruleRefExpr{
							pos:  position{line: 889, col: 54, offset: 27545},
							name: "L_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 889, col: 62, offset: 27553},
							label: "boolExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 889, col: 71, offset: 27562},
								name: "BoolExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 889, col: 80, offset: 27571},
							name: "R_PAREN",
						},
					},
				},
			},
		},
		{
			name: "StreamStatsOptionResetAfter",
			pos:  position{line: 901, col: 1, offset: 27841},
			expr: &actionExpr{
				pos: position{line: 901, col: 32, offset: 27872},
				run: (*parser).callonStreamStatsOptionResetAfter1,
				expr: &seqExpr{
					pos: position{line: 901, col: 32, offset: 27872},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 901, col: 32, offset: 27872},
							val:        "reset_after",
							ignoreCase: false,
							want:       "\"reset_after\"",
						},
						&ruleRefExpr{
							pos:  position{line: 901, col: 46, offset: 27886},
							name: "EQUAL",
						},
						&ruleRefExpr{
							pos:  position{line: 901, col: 52, offset: 27892},
							name: "L_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 901, col: 60, offset: 27900},
							label: "boolExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 901, col: 69, offset: 27909},
								name: "BoolExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 901, col: 78, offset: 27918},
							name: "R_PAREN",
						},
					},
				},
			},
		},
		{
			name: "StreamStatsOptionTimeWindow",
			pos:  position{line: 913, col: 1, offset: 28186},
			expr: &actionExpr{
				pos: position{line: 913, col: 32, offset: 28217},
				run: (*parser).callonStreamStatsOptionTimeWindow1,
				expr: &seqExpr{
					pos: position{line: 913, col: 32, offset: 28217},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 913, col: 32, offset: 28217},
							val:        "time_window",
							ignoreCase: false,
							want:       "\"time_window\"",
						},
						&ruleRefExpr{
							pos:  position{line: 913, col: 46, offset: 28231},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 913, col: 52, offset: 28237},
							label: "spanLength",
							expr: &ruleRefExpr{
								pos:  position{line: 913, col: 63, offset: 28248},
								name: "BinSpanLenOption",
							},
						},
					},
				},
			},
		},
		{
			name: "StreamStatsOption",
			pos:  position{line: 929, col: 1, offset: 28710},
			expr: &actionExpr{
				pos: position{line: 929, col: 22, offset: 28731},
				run: (*parser).callonStreamStatsOption1,
				expr: &labeledExpr{
					pos:   position{line: 929, col: 22, offset: 28731},
					label: "ssOption",
					expr: &choiceExpr{
						pos: position{line: 929, col: 32, offset: 28741},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 929, col: 32, offset: 28741},
								name: "StreamStatsOptionResetOnChange",
							},
							&ruleRefExpr{
								pos:  position{line: 929, col: 65, offset: 28774},
								name: "StreamStatsOptionCurrent",
							},
							&ruleRefExpr{
								pos:  position{line: 929, col: 92, offset: 28801},
								name: "StreamStatsOptionGlobal",
							},
							&ruleRefExpr{
								pos:  position{line: 929, col: 118, offset: 28827},
								name: "StreamStatsOptionAllNum",
							},
							&ruleRefExpr{
								pos:  position{line: 929, col: 144, offset: 28853},
								name: "StreamStatsOptionWindow",
							},
							&ruleRefExpr{
								pos:  position{line: 929, col: 170, offset: 28879},
								name: "StreamStatsOptionResetBefore",
							},
							&ruleRefExpr{
								pos:  position{line: 929, col: 201, offset: 28910},
								name: "StreamStatsOptionResetAfter",
							},
							&ruleRefExpr{
								pos:  position{line: 929, col: 231, offset: 28940},
								name: "StreamStatsOptionTimeWindow",
							},
						},
					},
				},
			},
		},
		{
			name: "StreamStatsOptionList",
			pos:  position{line: 933, col: 1, offset: 28999},
			expr: &actionExpr{
				pos: position{line: 933, col: 26, offset: 29024},
				run: (*parser).callonStreamStatsOptionList1,
				expr: &seqExpr{
					pos: position{line: 933, col: 26, offset: 29024},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 933, col: 26, offset: 29024},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 933, col: 32, offset: 29030},
								name: "StreamStatsOption",
							},
						},
						&labeledExpr{
							pos:   position{line: 933, col: 50, offset: 29048},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 933, col: 55, offset: 29053},
								expr: &seqExpr{
									pos: position{line: 933, col: 56, offset: 29054},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 933, col: 56, offset: 29054},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 933, col: 62, offset: 29060},
											name: "StreamStatsOption",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StreamStatsBlock",
			pos:  position{line: 992, col: 1, offset: 31249},
			expr: &choiceExpr{
				pos: position{line: 992, col: 21, offset: 31269},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 992, col: 21, offset: 31269},
						run: (*parser).callonStreamStatsBlock2,
						expr: &seqExpr{
							pos: position{line: 992, col: 21, offset: 31269},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 992, col: 21, offset: 31269},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 992, col: 26, offset: 31274},
									name: "CMD_STREAMSTATS",
								},
								&labeledExpr{
									pos:   position{line: 992, col: 42, offset: 31290},
									label: "ssOptionList",
									expr: &ruleRefExpr{
										pos:  position{line: 992, col: 56, offset: 31304},
										name: "StreamStatsOptionList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 992, col: 79, offset: 31327},
									name: "SPACE",
								},
								&labeledExpr{
									pos:   position{line: 992, col: 85, offset: 31333},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 992, col: 91, offset: 31339},
										name: "CommonAggregatorBlock",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 999, col: 3, offset: 31518},
						run: (*parser).callonStreamStatsBlock11,
						expr: &seqExpr{
							pos: position{line: 999, col: 3, offset: 31518},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 999, col: 3, offset: 31518},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 999, col: 8, offset: 31523},
									name: "CMD_STREAMSTATS",
								},
								&labeledExpr{
									pos:   position{line: 999, col: 24, offset: 31539},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 999, col: 30, offset: 31545},
										name: "CommonAggregatorBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RegexBlock",
			pos:  position{line: 1007, col: 1, offset: 31711},
			expr: &actionExpr{
				pos: position{line: 1007, col: 15, offset: 31725},
				run: (*parser).callonRegexBlock1,
				expr: &seqExpr{
					pos: position{line: 1007, col: 15, offset: 31725},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1007, col: 15, offset: 31725},
							name: "CMD_REGEX",
						},
						&labeledExpr{
							pos:   position{line: 1007, col: 25, offset: 31735},
							label: "keyAndOp",
							expr: &zeroOrOneExpr{
								pos: position{line: 1007, col: 34, offset: 31744},
								expr: &seqExpr{
									pos: position{line: 1007, col: 35, offset: 31745},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1007, col: 35, offset: 31745},
											name: "FieldName",
										},
										&ruleRefExpr{
											pos:  position{line: 1007, col: 45, offset: 31755},
											name: "EqualityOperator",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1007, col: 64, offset: 31774},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 1007, col: 68, offset: 31778},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel4",
			pos:  position{line: 1035, col: 1, offset: 32357},
			expr: &actionExpr{
				pos: position{line: 1035, col: 17, offset: 32373},
				run: (*parser).callonClauseLevel41,
				expr: &seqExpr{
					pos: position{line: 1035, col: 17, offset: 32373},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1035, col: 17, offset: 32373},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1035, col: 23, offset: 32379},
								name: "ClauseLevel3",
							},
						},
						&labeledExpr{
							pos:   position{line: 1035, col: 36, offset: 32392},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1035, col: 41, offset: 32397},
								expr: &seqExpr{
									pos: position{line: 1035, col: 42, offset: 32398},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 1035, col: 43, offset: 32399},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 1035, col: 43, offset: 32399},
													name: "AND",
												},
												&ruleRefExpr{
													pos:  position{line: 1035, col: 49, offset: 32405},
													name: "SPACE",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1035, col: 56, offset: 32412},
											name: "ClauseLevel3",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel3",
			pos:  position{line: 1053, col: 1, offset: 32789},
			expr: &actionExpr{
				pos: position{line: 1053, col: 17, offset: 32805},
				run: (*parser).callonClauseLevel31,
				expr: &seqExpr{
					pos: position{line: 1053, col: 17, offset: 32805},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1053, col: 17, offset: 32805},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1053, col: 23, offset: 32811},
								name: "ClauseLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 1053, col: 36, offset: 32824},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1053, col: 41, offset: 32829},
								expr: &seqExpr{
									pos: position{line: 1053, col: 42, offset: 32830},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1053, col: 42, offset: 32830},
											name: "OR",
										},
										&ruleRefExpr{
											pos:  position{line: 1053, col: 45, offset: 32833},
											name: "ClauseLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel2",
			pos:  position{line: 1071, col: 1, offset: 33198},
			expr: &choiceExpr{
				pos: position{line: 1071, col: 17, offset: 33214},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1071, col: 17, offset: 33214},
						run: (*parser).callonClauseLevel22,
						expr: &seqExpr{
							pos: position{line: 1071, col: 17, offset: 33214},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1071, col: 17, offset: 33214},
									label: "notList",
									expr: &oneOrMoreExpr{
										pos: position{line: 1071, col: 25, offset: 33222},
										expr: &ruleRefExpr{
											pos:  position{line: 1071, col: 25, offset: 33222},
											name: "NOT",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1071, col: 30, offset: 33227},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 1071, col: 36, offset: 33233},
										name: "ClauseLevel1",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1082, col: 5, offset: 33529},
						run: (*parser).callonClauseLevel29,
						expr: &labeledExpr{
							pos:   position{line: 1082, col: 5, offset: 33529},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 1082, col: 12, offset: 33536},
								name: "ClauseLevel1",
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel1",
			pos:  position{line: 1086, col: 1, offset: 33577},
			expr: &choiceExpr{
				pos: position{line: 1086, col: 17, offset: 33593},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1086, col: 17, offset: 33593},
						run: (*parser).callonClauseLevel12,
						expr: &seqExpr{
							pos: position{line: 1086, col: 17, offset: 33593},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1086, col: 17, offset: 33593},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1086, col: 25, offset: 33601},
									label: "clause",
									expr: &ruleRefExpr{
										pos:  position{line: 1086, col: 32, offset: 33608},
										name: "ClauseLevel4",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1086, col: 45, offset: 33621},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1088, col: 5, offset: 33658},
						run: (*parser).callonClauseLevel18,
						expr: &labeledExpr{
							pos:   position{line: 1088, col: 5, offset: 33658},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1088, col: 10, offset: 33663},
								name: "SearchTerm",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchTerm",
			pos:  position{line: 1094, col: 1, offset: 33821},
			expr: &actionExpr{
				pos: position{line: 1094, col: 15, offset: 33835},
				run: (*parser).callonSearchTerm1,
				expr: &labeledExpr{
					pos:   position{line: 1094, col: 15, offset: 33835},
					label: "term",
					expr: &choiceExpr{
						pos: position{line: 1094, col: 21, offset: 33841},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1094, col: 21, offset: 33841},
								name: "FieldWithNumberValue",
							},
							&ruleRefExpr{
								pos:  position{line: 1094, col: 44, offset: 33864},
								name: "FieldWithBooleanValue",
							},
							&ruleRefExpr{
								pos:  position{line: 1094, col: 68, offset: 33888},
								name: "FieldWithStringValue",
							},
						},
					},
				},
			},
		},
		{
			name: "TimechartBlock",
			pos:  position{line: 1099, col: 1, offset: 34029},
			expr: &actionExpr{
				pos: position{line: 1099, col: 19, offset: 34047},
				run: (*parser).callonTimechartBlock1,
				expr: &seqExpr{
					pos: position{line: 1099, col: 19, offset: 34047},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1099, col: 19, offset: 34047},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1099, col: 24, offset: 34052},
							name: "CMD_TIMECHART",
						},
						&labeledExpr{
							pos:   position{line: 1099, col: 38, offset: 34066},
							label: "tcArgs",
							expr: &ruleRefExpr{
								pos:  position{line: 1099, col: 45, offset: 34073},
								name: "TimechartArgumentsList",
							},
						},
						&labeledExpr{
							pos:   position{line: 1099, col: 68, offset: 34096},
							label: "limitExpr",
							expr: &zeroOrOneExpr{
								pos: position{line: 1099, col: 78, offset: 34106},
								expr: &ruleRefExpr{
									pos:  position{line: 1099, col: 79, offset: 34107},
									name: "LimitExpr",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimechartArgumentsList",
			pos:  position{line: 1187, col: 1, offset: 36850},
			expr: &actionExpr{
				pos: position{line: 1187, col: 27, offset: 36876},
				run: (*parser).callonTimechartArgumentsList1,
				expr: &seqExpr{
					pos: position{line: 1187, col: 27, offset: 36876},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1187, col: 27, offset: 36876},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1187, col: 33, offset: 36882},
								name: "TimechartArgument",
							},
						},
						&labeledExpr{
							pos:   position{line: 1187, col: 51, offset: 36900},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1187, col: 56, offset: 36905},
								expr: &seqExpr{
									pos: position{line: 1187, col: 57, offset: 36906},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1187, col: 57, offset: 36906},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 1187, col: 63, offset: 36912},
											name: "TimechartArgument",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimechartArgument",
			pos:  position{line: 1216, col: 1, offset: 37646},
			expr: &actionExpr{
				pos: position{line: 1216, col: 22, offset: 37667},
				run: (*parser).callonTimechartArgument1,
				expr: &labeledExpr{
					pos:   position{line: 1216, col: 22, offset: 37667},
					label: "tcArg",
					expr: &choiceExpr{
						pos: position{line: 1216, col: 29, offset: 37674},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1216, col: 29, offset: 37674},
								name: "SingleAggExpr",
							},
							&ruleRefExpr{
								pos:  position{line: 1216, col: 45, offset: 37690},
								name: "TcOptions",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleAggExpr",
			pos:  position{line: 1220, col: 1, offset: 37728},
			expr: &actionExpr{
				pos: position{line: 1220, col: 18, offset: 37745},
				run: (*parser).callonSingleAggExpr1,
				expr: &seqExpr{
					pos: position{line: 1220, col: 18, offset: 37745},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1220, col: 18, offset: 37745},
							label: "aggs",
							expr: &ruleRefExpr{
								pos:  position{line: 1220, col: 23, offset: 37750},
								name: "AggregationList",
							},
						},
						&labeledExpr{
							pos:   position{line: 1220, col: 39, offset: 37766},
							label: "splitByClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 1220, col: 53, offset: 37780},
								expr: &ruleRefExpr{
									pos:  position{line: 1220, col: 53, offset: 37780},
									name: "SplitByClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SplitByClause",
			pos:  position{line: 1234, col: 1, offset: 38119},
			expr: &actionExpr{
				pos: position{line: 1234, col: 18, offset: 38136},
				run: (*parser).callonSplitByClause1,
				expr: &seqExpr{
					pos: position{line: 1234, col: 18, offset: 38136},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1234, col: 18, offset: 38136},
							name: "BY",
						},
						&labeledExpr{
							pos:   position{line: 1234, col: 21, offset: 38139},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1234, col: 27, offset: 38145},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "TcOptions",
			pos:  position{line: 1242, col: 1, offset: 38274},
			expr: &actionExpr{
				pos: position{line: 1242, col: 14, offset: 38287},
				run: (*parser).callonTcOptions1,
				expr: &labeledExpr{
					pos:   position{line: 1242, col: 14, offset: 38287},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 1242, col: 22, offset: 38295},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1242, col: 22, offset: 38295},
								name: "BinOptions",
							},
							&oneOrMoreExpr{
								pos: position{line: 1242, col: 35, offset: 38308},
								expr: &ruleRefExpr{
									pos:  position{line: 1242, col: 36, offset: 38309},
									name: "TcOption",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TcOption",
			pos:  position{line: 1284, col: 1, offset: 39829},
			expr: &actionExpr{
				pos: position{line: 1284, col: 13, offset: 39841},
				run: (*parser).callonTcOption1,
				expr: &seqExpr{
					pos: position{line: 1284, col: 13, offset: 39841},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1284, col: 13, offset: 39841},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 1284, col: 19, offset: 39847},
							label: "tcOptionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 1284, col: 31, offset: 39859},
								name: "TcOptionCMD",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1284, col: 43, offset: 39871},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1284, col: 49, offset: 39877},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 1284, col: 53, offset: 39881},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "TcOptionCMD",
			pos:  position{line: 1289, col: 1, offset: 39994},
			expr: &actionExpr{
				pos: position{line: 1289, col: 16, offset: 40009},
				run: (*parser).callonTcOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 1289, col: 16, offset: 40009},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 1289, col: 24, offset: 40017},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 1289, col: 24, offset: 40017},
								val:        "usenull",
								ignoreCase: false,
								want:       "\"usenull\"",
							},
							&litMatcher{
								pos:        position{line: 1289, col: 36, offset: 40029},
								val:        "useother",
								ignoreCase: false,
								want:       "\"useother\"",
							},
							&litMatcher{
								pos:        position{line: 1289, col: 49, offset: 40042},
								val:        "nullstr",
								ignoreCase: false,
								want:       "\"nullstr\"",
							},
							&litMatcher{
								pos:        position{line: 1289, col: 61, offset: 40054},
								val:        "otherstr",
								ignoreCase: false,
								want:       "\"otherstr\"",
							},
						},
					},
				},
			},
		},
		{
			name: "AllTimeScale",
			pos:  position{line: 1297, col: 1, offset: 40250},
			expr: &actionExpr{
				pos: position{line: 1297, col: 17, offset: 40266},
				run: (*parser).callonAllTimeScale1,
				expr: &labeledExpr{
					pos:   position{line: 1297, col: 17, offset: 40266},
					label: "timeUnit",
					expr: &choiceExpr{
						pos: position{line: 1297, col: 27, offset: 40276},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1297, col: 27, offset: 40276},
								name: "Second",
							},
							&ruleRefExpr{
								pos:  position{line: 1297, col: 36, offset: 40285},
								name: "Month",
							},
							&ruleRefExpr{
								pos:  position{line: 1297, col: 44, offset: 40293},
								name: "Subseconds",
							},
							&ruleRefExpr{
								pos:  position{line: 1297, col: 57, offset: 40306},
								name: "Minute",
							},
							&ruleRefExpr{
								pos:  position{line: 1297, col: 66, offset: 40315},
								name: "Hour",
							},
							&ruleRefExpr{
								pos:  position{line: 1297, col: 73, offset: 40322},
								name: "Day",
							},
							&ruleRefExpr{
								pos:  position{line: 1297, col: 79, offset: 40328},
								name: "Week",
							},
							&ruleRefExpr{
								pos:  position{line: 1297, col: 86, offset: 40335},
								name: "Quarter",
							},
							&ruleRefExpr{
								pos:  position{line: 1297, col: 96, offset: 40345},
								name: "Year",
							},
						},
					},
				},
			},
		},
		{
			name: "BinSpanLenOption",
			pos:  position{line: 1301, col: 1, offset: 40381},
			expr: &actionExpr{
				pos: position{line: 1301, col: 21, offset: 40401},
				run: (*parser).callonBinSpanLenOption1,
				expr: &seqExpr{
					pos: position{line: 1301, col: 21, offset: 40401},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1301, col: 21, offset: 40401},
							label: "number",
							expr: &choiceExpr{
								pos: position{line: 1301, col: 29, offset: 40409},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1301, col: 29, offset: 40409},
										name: "FloatAsString",
									},
									&ruleRefExpr{
										pos:  position{line: 1301, col: 45, offset: 40425},
										name: "IntegerAsString",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1301, col: 62, offset: 40442},
							label: "timeScale",
							expr: &zeroOrOneExpr{
								pos: position{line: 1301, col: 72, offset: 40452},
								expr: &ruleRefExpr{
									pos:  position{line: 1301, col: 73, offset: 40453},
									name: "AllTimeScale",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BinOptionMinSpan",
			pos:  position{line: 1360, col: 1, offset: 43135},
			expr: &actionExpr{
				pos: position{line: 1360, col: 21, offset: 43155},
				run: (*parser).callonBinOptionMinSpan1,
				expr: &seqExpr{
					pos: position{line: 1360, col: 21, offset: 43155},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1360, col: 21, offset: 43155},
							val:        "minspan",
							ignoreCase: false,
							want:       "\"minspan\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1360, col: 31, offset: 43165},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1360, col: 37, offset: 43171},
							label: "spanLength",
							expr: &ruleRefExpr{
								pos:  position{line: 1360, col: 48, offset: 43182},
								name: "BinSpanLenOption",
							},
						},
					},
				},
			},
		},
		{
			name: "BinOptionMaxBins",
			pos:  position{line: 1371, col: 1, offset: 43423},
			expr: &actionExpr{
				pos: position{line: 1371, col: 21, offset: 43443},
				run: (*parser).callonBinOptionMaxBins1,
				expr: &seqExpr{
					pos: position{line: 1371, col: 21, offset: 43443},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1371, col: 21, offset: 43443},
							val:        "bins",
							ignoreCase: false,
							want:       "\"bins\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1371, col: 28, offset: 43450},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1371, col: 34, offset: 43456},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 1371, col: 43, offset: 43465},
								name: "IntegerAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "BinOptionAlignTime",
			pos:  position{line: 1392, col: 1, offset: 44044},
			expr: &choiceExpr{
				pos: position{line: 1392, col: 23, offset: 44066},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1392, col: 23, offset: 44066},
						run: (*parser).callonBinOptionAlignTime2,
						expr: &seqExpr{
							pos: position{line: 1392, col: 23, offset: 44066},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1392, col: 23, offset: 44066},
									val:        "aligntime",
									ignoreCase: false,
									want:       "\"aligntime\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1392, col: 35, offset: 44078},
									name: "EQUAL",
								},
								&labeledExpr{
									pos:   position{line: 1392, col: 41, offset: 44084},
									label: "utcEpoch",
									expr: &ruleRefExpr{
										pos:  position{line: 1392, col: 51, offset: 44094},
										name: "PositiveIntegerAsString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1406, col: 3, offset: 44513},
						run: (*parser).callonBinOptionAlignTime8,
						expr: &seqExpr{
							pos: position{line: 1406, col: 3, offset: 44513},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1406, col: 3, offset: 44513},
									val:        "aligntime",
									ignoreCase: false,
									want:       "\"aligntime\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1406, col: 15, offset: 44525},
									name: "EQUAL",
								},
								&labeledExpr{
									pos:   position{line: 1406, col: 21, offset: 44531},
									label: "timestamp",
									expr: &choiceExpr{
										pos: position{line: 1406, col: 32, offset: 44542},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 1406, col: 32, offset: 44542},
												name: "AbsoluteTimestamp",
											},
											&ruleRefExpr{
												pos:  position{line: 1406, col: 52, offset: 44562},
												name: "RelativeTimestamp",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BinOptionStart",
			pos:  position{line: 1426, col: 1, offset: 45031},
			expr: &actionExpr{
				pos: position{line: 1426, col: 19, offset: 45049},
				run: (*parser).callonBinOptionStart1,
				expr: &seqExpr{
					pos: position{line: 1426, col: 19, offset: 45049},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1426, col: 19, offset: 45049},
							val:        "start",
							ignoreCase: false,
							want:       "\"start\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1426, col: 27, offset: 45057},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1426, col: 33, offset: 45063},
							label: "number",
							expr: &choiceExpr{
								pos: position{line: 1426, col: 41, offset: 45071},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1426, col: 41, offset: 45071},
										name: "FloatAsString",
									},
									&ruleRefExpr{
										pos:  position{line: 1426, col: 57, offset: 45087},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BinOptionEnd",
			pos:  position{line: 1441, col: 1, offset: 45466},
			expr: &actionExpr{
				pos: position{line: 1441, col: 17, offset: 45482},
				run: (*parser).callonBinOptionEnd1,
				expr: &seqExpr{
					pos: position{line: 1441, col: 17, offset: 45482},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1441, col: 17, offset: 45482},
							val:        "end",
							ignoreCase: false,
							want:       "\"end\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1441, col: 23, offset: 45488},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1441, col: 29, offset: 45494},
							label: "number",
							expr: &choiceExpr{
								pos: position{line: 1441, col: 37, offset: 45502},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1441, col: 37, offset: 45502},
										name: "FloatAsString",
									},
									&ruleRefExpr{
										pos:  position{line: 1441, col: 53, offset: 45518},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BinOptionSpan",
			pos:  position{line: 1456, col: 1, offset: 45889},
			expr: &choiceExpr{
				pos: position{line: 1456, col: 18, offset: 45906},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1456, col: 18, offset: 45906},
						run: (*parser).callonBinOptionSpan2,
						expr: &seqExpr{
							pos: position{line: 1456, col: 18, offset: 45906},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1456, col: 18, offset: 45906},
									val:        "span",
									ignoreCase: false,
									want:       "\"span\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1456, col: 25, offset: 45913},
									name: "EQUAL",
								},
								&labeledExpr{
									pos:   position{line: 1456, col: 31, offset: 45919},
									label: "num1",
									expr: &zeroOrOneExpr{
										pos: position{line: 1456, col: 36, offset: 45924},
										expr: &choiceExpr{
											pos: position{line: 1456, col: 37, offset: 45925},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 1456, col: 37, offset: 45925},
													name: "FloatAsString",
												},
												&ruleRefExpr{
													pos:  position{line: 1456, col: 53, offset: 45941},
													name: "IntegerAsString",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1456, col: 71, offset: 45959},
									val:        "log",
									ignoreCase: false,
									want:       "\"log\"",
								},
								&labeledExpr{
									pos:   position{line: 1456, col: 77, offset: 45965},
									label: "num2",
									expr: &zeroOrOneExpr{
										pos: position{line: 1456, col: 82, offset: 45970},
										expr: &choiceExpr{
											pos: position{line: 1456, col: 83, offset: 45971},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 1456, col: 83, offset: 45971},
													name: "FloatAsString",
												},
												&ruleRefExpr{
													pos:  position{line: 1456, col: 99, offset: 45987},
													name: "IntegerAsString",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1499, col: 3, offset: 47423},
						run: (*parser).callonBinOptionSpan17,
						expr: &seqExpr{
							pos: position{line: 1499, col: 3, offset: 47423},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1499, col: 3, offset: 47423},
									val:        "span",
									ignoreCase: false,
									want:       "\"span\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1499, col: 10, offset: 47430},
									name: "EQUAL",
								},
								&labeledExpr{
									pos:   position{line: 1499, col: 16, offset: 47436},
									label: "spanLen",
									expr: &ruleRefExpr{
										pos:  position{line: 1499, col: 24, offset: 47444},
										name: "BinSpanLenOption",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BinCmdOption",
			pos:  position{line: 1514, col: 1, offset: 47775},
			expr: &actionExpr{
				pos: position{line: 1514, col: 17, offset: 47791},
				run: (*parser).callonBinCmdOption1,
				expr: &labeledExpr{
					pos:   position{line: 1514, col: 17, offset: 47791},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 1514, col: 25, offset: 47799},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1514, col: 25, offset: 47799},
								name: "BinOptionAlignTime",
							},
							&ruleRefExpr{
								pos:  position{line: 1514, col: 46, offset: 47820},
								name: "BinOptionMinSpan",
							},
							&ruleRefExpr{
								pos:  position{line: 1514, col: 65, offset: 47839},
								name: "BinOptionMaxBins",
							},
							&ruleRefExpr{
								pos:  position{line: 1514, col: 84, offset: 47858},
								name: "BinOptionStart",
							},
							&ruleRefExpr{
								pos:  position{line: 1514, col: 101, offset: 47875},
								name: "BinOptionEnd",
							},
							&ruleRefExpr{
								pos:  position{line: 1514, col: 116, offset: 47890},
								name: "BinOptionSpan",
							},
						},
					},
				},
			},
		},
		{
			name: "BinCmdOptionsList",
			pos:  position{line: 1518, col: 1, offset: 47933},
			expr: &actionExpr{
				pos: position{line: 1518, col: 22, offset: 47954},
				run: (*parser).callonBinCmdOptionsList1,
				expr: &seqExpr{
					pos: position{line: 1518, col: 22, offset: 47954},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1518, col: 22, offset: 47954},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1518, col: 29, offset: 47961},
								name: "BinCmdOption",
							},
						},
						&labeledExpr{
							pos:   position{line: 1518, col: 42, offset: 47974},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1518, col: 48, offset: 47980},
								expr: &seqExpr{
									pos: position{line: 1518, col: 49, offset: 47981},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1518, col: 49, offset: 47981},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 1518, col: 55, offset: 47987},
											name: "BinCmdOption",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BinBlock",
			pos:  position{line: 1564, col: 1, offset: 49471},
			expr: &choiceExpr{
				pos: position{line: 1564, col: 13, offset: 49483},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1564, col: 13, offset: 49483},
						run: (*parser).callonBinBlock2,
						expr: &seqExpr{
							pos: position{line: 1564, col: 13, offset: 49483},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1564, col: 13, offset: 49483},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 1564, col: 18, offset: 49488},
									name: "CMD_BIN",
								},
								&labeledExpr{
									pos:   position{line: 1564, col: 26, offset: 49496},
									label: "binCmdOption",
									expr: &ruleRefExpr{
										pos:  position{line: 1564, col: 40, offset: 49510},
										name: "BinCmdOptionsList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1564, col: 59, offset: 49529},
									name: "SPACE",
								},
								&labeledExpr{
									pos:   position{line: 1564, col: 65, offset: 49535},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1564, col: 71, offset: 49541},
										name: "FieldName",
									},
								},
								&labeledExpr{
									pos:   position{line: 1564, col: 81, offset: 49551},
									label: "newFieldName",
									expr: &zeroOrOneExpr{
										pos: position{line: 1564, col: 94, offset: 49564},
										expr: &ruleRefExpr{
											pos:  position{line: 1564, col: 95, offset: 49565},
											name: "AsField",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1587, col: 3, offset: 50194},
						run: (*parser).callonBinBlock14,
						expr: &seqExpr{
							pos: position{line: 1587, col: 3, offset: 50194},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1587, col: 3, offset: 50194},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 1587, col: 8, offset: 50199},
									name: "CMD_BIN",
								},
								&labeledExpr{
									pos:   position{line: 1587, col: 16, offset: 50207},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1587, col: 22, offset: 50213},
										name: "FieldName",
									},
								},
								&labeledExpr{
									pos:   position{line: 1587, col: 32, offset: 50223},
									label: "newFieldName",
									expr: &zeroOrOneExpr{
										pos: position{line: 1587, col: 45, offset: 50236},
										expr: &ruleRefExpr{
											pos:  position{line: 1587, col: 46, offset: 50237},
											name: "AsField",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BinOptions",
			pos:  position{line: 1614, col: 1, offset: 50975},
			expr: &actionExpr{
				pos: position{line: 1614, col: 15, offset: 50989},
				run: (*parser).callonBinOptions1,
				expr: &labeledExpr{
					pos:   position{line: 1614, col: 15, offset: 50989},
					label: "spanOptions",
					expr: &ruleRefExpr{
						pos:  position{line: 1614, col: 27, offset: 51001},
						name: "SpanOptions",
					},
				},
			},
		},
		{
			name: "SpanOptions",
			pos:  position{line: 1622, col: 1, offset: 51226},
			expr: &actionExpr{
				pos: position{line: 1622, col: 16, offset: 51241},
				run: (*parser).callonSpanOptions1,
				expr: &seqExpr{
					pos: position{line: 1622, col: 16, offset: 51241},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1622, col: 16, offset: 51241},
							name: "CMD_SPAN",
						},
						&ruleRefExpr{
							pos:  position{line: 1622, col: 25, offset: 51250},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1622, col: 31, offset: 51256},
							label: "spanLength",
							expr: &ruleRefExpr{
								pos:  position{line: 1622, col: 42, offset: 51267},
								name: "SpanLength",
							},
						},
					},
				},
			},
		},
		{
			name: "SpanLength",
			pos:  position{line: 1629, col: 1, offset: 51413},
			expr: &actionExpr{
				pos: position{line: 1629, col: 15, offset: 51427},
				run: (*parser).callonSpanLength1,
				expr: &seqExpr{
					pos: position{line: 1629, col: 15, offset: 51427},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1629, col: 15, offset: 51427},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 1629, col: 24, offset: 51436},
								name: "IntegerAsString",
							},
						},
						&labeledExpr{
							pos:   position{line: 1629, col: 40, offset: 51452},
							label: "timeScale",
							expr: &ruleRefExpr{
								pos:  position{line: 1629, col: 50, offset: 51462},
								name: "AllTimeScale",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitExpr",
			pos:  position{line: 1646, col: 1, offset: 52008},
			expr: &actionExpr{
				pos: position{line: 1646, col: 14, offset: 52021},
				run: (*parser).callonLimitExpr1,
				expr: &seqExpr{
					pos: position{line: 1646, col: 14, offset: 52021},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1646, col: 14, offset: 52021},
							name: "SPACE",
						},
						&litMatcher{
							pos:        position{line: 1646, col: 20, offset: 52027},
							val:        "limit",
							ignoreCase: false,
							want:       "\"limit\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1646, col: 28, offset: 52035},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1646, col: 34, offset: 52041},
							label: "sortBy",
							expr: &zeroOrOneExpr{
								pos: position{line: 1646, col: 41, offset: 52048},
								expr: &choiceExpr{
									pos: position{line: 1646, col: 42, offset: 52049},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 1646, col: 42, offset: 52049},
											val:        "top",
											ignoreCase: false,
											want:       "\"top\"",
										},
										&litMatcher{
											pos:        position{line: 1646, col: 50, offset: 52057},
											val:        "bottom",
											ignoreCase: false,
											want:       "\"bottom\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1646, col: 61, offset: 52068},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 1646, col: 76, offset: 52083},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 1646, col: 86, offset: 52093},
								name: "IntegerAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticBlock",
			pos:  position{line: 1670, col: 1, offset: 52674},
			expr: &actionExpr{
				pos: position{line: 1670, col: 19, offset: 52692},
				run: (*parser).callonStatisticBlock1,
				expr: &seqExpr{
					pos: position{line: 1670, col: 19, offset: 52692},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1670, col: 19, offset: 52692},
							name: "PIPE",
						},
						&labeledExpr{
							pos:   position{line: 1670, col: 24, offset: 52697},
							label: "statisticExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 1670, col: 38, offset: 52711},
								name: "StatisticExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticExpr",
			pos:  position{line: 1703, col: 1, offset: 53689},
			expr: &actionExpr{
				pos: position{line: 1703, col: 18, offset: 53706},
				run: (*parser).callonStatisticExpr1,
				expr: &seqExpr{
					pos: position{line: 1703, col: 18, offset: 53706},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1703, col: 18, offset: 53706},
							label: "cmd",
							expr: &choiceExpr{
								pos: position{line: 1703, col: 23, offset: 53711},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1703, col: 23, offset: 53711},
										name: "CMD_TOP",
									},
									&ruleRefExpr{
										pos:  position{line: 1703, col: 33, offset: 53721},
										name: "CMD_RARE",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1703, col: 43, offset: 53731},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 1703, col: 49, offset: 53737},
								expr: &ruleRefExpr{
									pos:  position{line: 1703, col: 50, offset: 53738},
									name: "StatisticLimit",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1703, col: 67, offset: 53755},
							label: "fieldList",
							expr: &seqExpr{
								pos: position{line: 1703, col: 78, offset: 53766},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 1703, col: 78, offset: 53766},
										name: "SPACE",
									},
									&ruleRefExpr{
										pos:  position{line: 1703, col: 84, offset: 53772},
										name: "FieldNameList",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1703, col: 99, offset: 53787},
							label: "byClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 1703, col: 108, offset: 53796},
								expr: &ruleRefExpr{
									pos:  position{line: 1703, col: 109, offset: 53797},
									name: "ByClause",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1703, col: 120, offset: 53808},
							label: "options",
							expr: &zeroOrOneExpr{
								pos: position{line: 1703, col: 128, offset: 53816},
								expr: &ruleRefExpr{
									pos:  position{line: 1703, col: 129, offset: 53817},
									name: "StatisticOptions",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticLimit",
			pos:  position{line: 1745, col: 1, offset: 54902},
			expr: &choiceExpr{
				pos: position{line: 1745, col: 19, offset: 54920},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1745, col: 19, offset: 54920},
						run: (*parser).callonStatisticLimit2,
						expr: &seqExpr{
							pos: position{line: 1745, col: 19, offset: 54920},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1745, col: 19, offset: 54920},
									name: "SPACE",
								},
								&labeledExpr{
									pos:   position{line: 1745, col: 25, offset: 54926},
									label: "number",
									expr: &ruleRefExpr{
										pos:  position{line: 1745, col: 32, offset: 54933},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1748, col: 3, offset: 54987},
						run: (*parser).callonStatisticLimit7,
						expr: &seqExpr{
							pos: position{line: 1748, col: 3, offset: 54987},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1748, col: 3, offset: 54987},
									name: "SPACE",
								},
								&litMatcher{
									pos:        position{line: 1748, col: 9, offset: 54993},
									val:        "limit",
									ignoreCase: false,
									want:       "\"limit\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1748, col: 17, offset: 55001},
									name: "EQUAL",
								},
								&labeledExpr{
									pos:   position{line: 1748, col: 23, offset: 55007},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 1748, col: 30, offset: 55014},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticOptions",
			pos:  position{line: 1753, col: 1, offset: 55112},
			expr: &actionExpr{
				pos: position{line: 1753, col: 21, offset: 55132},
				run: (*parser).callonStatisticOptions1,
				expr: &labeledExpr{
					pos:   position{line: 1753, col: 21, offset: 55132},
					label: "option",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1753, col: 28, offset: 55139},
						expr: &ruleRefExpr{
							pos:  position{line: 1753, col: 29, offset: 55140},
							name: "StatisticOption",
						},
					},
				},
			},
		},
		{
			name: "StatisticOption",
			pos:  position{line: 1802, col: 1, offset: 56702},
			expr: &actionExpr{
				pos: position{line: 1802, col: 20, offset: 56721},
				run: (*parser).callonStatisticOption1,
				expr: &seqExpr{
					pos: position{line: 1802, col: 20, offset: 56721},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1802, col: 20, offset: 56721},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 1802, col: 26, offset: 56727},
							label: "optionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 1802, col: 36, offset: 56737},
								name: "StatisticOptionCMD",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1802, col: 55, offset: 56756},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1802, col: 61, offset: 56762},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1802, col: 67, offset: 56768},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticOptionCMD",
			pos:  position{line: 1807, col: 1, offset: 56877},
			expr: &actionExpr{
				pos: position{line: 1807, col: 23, offset: 56899},
				run: (*parser).callonStatisticOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 1807, col: 23, offset: 56899},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 1807, col: 31, offset: 56907},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 1807, col: 31, offset: 56907},
								val:        "countfield",
								ignoreCase: false,
								want:       "\"countfield\"",
							},
							&litMatcher{
								pos:        position{line: 1807, col: 46, offset: 56922},
								val:        "showcount",
								ignoreCase: false,
								want:       "\"showcount\"",
							},
							&litMatcher{
								pos:        position{line: 1807, col: 60, offset: 56936},
								val:        "otherstr",
								ignoreCase: false,
								want:       "\"otherstr\"",
							},
							&litMatcher{
								pos:        position{line: 1807, col: 73, offset: 56949},
								val:        "useother",
								ignoreCase: false,
								want:       "\"useother\"",
							},
							&litMatcher{
								pos:        position{line: 1807, col: 85, offset: 56961},
								val:        "percentfield",
								ignoreCase: false,
								want:       "\"percentfield\"",
							},
							&litMatcher{
								pos:        position{line: 1807, col: 102, offset: 56978},
								val:        "showperc",
								ignoreCase: false,
								want:       "\"showperc\"",
							},
						},
					},
				},
			},
		},
		{
			name: "ByClause",
			pos:  position{line: 1815, col: 1, offset: 57165},
			expr: &choiceExpr{
				pos: position{line: 1815, col: 13, offset: 57177},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1815, col: 13, offset: 57177},
						run: (*parser).callonByClause2,
						expr: &seqExpr{
							pos: position{line: 1815, col: 13, offset: 57177},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1815, col: 13, offset: 57177},
									name: "BY",
								},
								&labeledExpr{
									pos:   position{line: 1815, col: 16, offset: 57180},
									label: "fieldList",
									expr: &ruleRefExpr{
										pos:  position{line: 1815, col: 26, offset: 57190},
										name: "FieldNameList",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1818, col: 3, offset: 57247},
						run: (*parser).callonByClause7,
						expr: &labeledExpr{
							pos:   position{line: 1818, col: 3, offset: 57247},
							label: "groupByBlock",
							expr: &ruleRefExpr{
								pos:  position{line: 1818, col: 16, offset: 57260},
								name: "GroupbyBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupBlock",
			pos:  position{line: 1822, col: 1, offset: 57318},
			expr: &actionExpr{
				pos: position{line: 1822, col: 15, offset: 57332},
				run: (*parser).callonDedupBlock1,
				expr: &seqExpr{
					pos: position{line: 1822, col: 15, offset: 57332},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1822, col: 15, offset: 57332},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1822, col: 20, offset: 57337},
							name: "CMD_DEDUP",
						},
						&labeledExpr{
							pos:   position{line: 1822, col: 30, offset: 57347},
							label: "dedupExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 1822, col: 40, offset: 57357},
								name: "DedupExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupExpr",
			pos:  position{line: 1842, col: 1, offset: 57925},
			expr: &actionExpr{
				pos: position{line: 1842, col: 14, offset: 57938},
				run: (*parser).callonDedupExpr1,
				expr: &seqExpr{
					pos: position{line: 1842, col: 14, offset: 57938},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1842, col: 14, offset: 57938},
							label: "limitArr",
							expr: &zeroOrOneExpr{
								pos: position{line: 1842, col: 23, offset: 57947},
								expr: &seqExpr{
									pos: position{line: 1842, col: 24, offset: 57948},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1842, col: 24, offset: 57948},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 1842, col: 30, offset: 57954},
											name: "IntegerAsString",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1842, col: 48, offset: 57972},
							label: "options1",
							expr: &zeroOrOneExpr{
								pos: position{line: 1842, col: 57, offset: 57981},
								expr: &ruleRefExpr{
									pos:  position{line: 1842, col: 58, offset: 57982},
									name: "DedupOptions",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1842, col: 73, offset: 57997},
							label: "fieldList",
							expr: &zeroOrOneExpr{
								pos: position{line: 1842, col: 83, offset: 58007},
								expr: &ruleRefExpr{
									pos:  position{line: 1842, col: 84, offset: 58008},
									name: "DedupFieldList",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1842, col: 101, offset: 58025},
							label: "options2",
							expr: &zeroOrOneExpr{
								pos: position{line: 1842, col: 110, offset: 58034},
								expr: &ruleRefExpr{
									pos:  position{line: 1842, col: 111, offset: 58035},
									name: "DedupOptions",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1842, col: 126, offset: 58050},
							label: "sortByClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 1842, col: 139, offset: 58063},
								expr: &ruleRefExpr{
									pos:  position{line: 1842, col: 140, offset: 58064},
									name: "DedupSortByClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DedupFieldName",
			pos:  position{line: 1899, col: 1, offset: 59802},
			expr: &actionExpr{
				pos: position{line: 1899, col: 19, offset: 59820},
				run: (*parser).callonDedupFieldName1,
				expr: &seqExpr{
					pos: position{line: 1899, col: 19, offset: 59820},
					exprs: []any{
						&notExpr{
							pos: position{line: 1899, col: 19, offset: 59820},
							expr: &litMatcher{
								pos:        position{line: 1899, col: 21, offset: 59822},
								val:        "sortby",
								ignoreCase: false,
								want:       "\"sortby\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1899, col: 31, offset: 59832},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1899, col: 37, offset: 59838},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "SpaceSeparatedFieldNameList",
			pos:  position{line: 1905, col: 1, offset: 59977},
			expr: &actionExpr{
				pos: position{line: 1905, col: 32, offset: 60008},
				run: (*parser).callonSpaceSeparatedFieldNameList1,
				expr: &seqExpr{
					pos: position{line: 1905, col: 32, offset: 60008},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1905, col: 32, offset: 60008},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1905, col: 38, offset: 60014},
								name: "FieldName",
							},
						},
						&notExpr{
							pos: position{line: 1905, col: 48, offset: 60024},
							expr: &ruleRefExpr{
								pos:  position{line: 1905, col: 50, offset: 60026},
								name: "EQUAL",
							},
						},
						&labeledExpr{
							pos:   position{line: 1905, col: 57, offset: 60033},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1905, col: 62, offset: 60038},
								expr: &seqExpr{
									pos: position{line: 1905, col: 63, offset: 60039},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1905, col: 63, offset: 60039},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 1905, col: 69, offset: 60045},
											name: "FieldName",
										},
										&notExpr{
											pos: position{line: 1905, col: 79, offset: 60055},
											expr: &ruleRefExpr{
												pos:  position{line: 1905, col: 81, offset: 60057},
												name: "EQUAL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DedupFieldList",
			pos:  position{line: 1916, col: 1, offset: 60332},
			expr: &actionExpr{
				pos: position{line: 1916, col: 19, offset: 60350},
				run: (*parser).callonDedupFieldList1,
				expr: &seqExpr{
					pos: position{line: 1916, col: 19, offset: 60350},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1916, col: 19, offset: 60350},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 1916, col: 25, offset: 60356},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1916, col: 31, offset: 60362},
								name: "DedupFieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 1916, col: 46, offset: 60377},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1916, col: 51, offset: 60382},
								expr: &seqExpr{
									pos: position{line: 1916, col: 52, offset: 60383},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1916, col: 52, offset: 60383},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 1916, col: 58, offset: 60389},
											name: "DedupFieldName",
										},
										&notExpr{
											pos: position{line: 1916, col: 73, offset: 60404},
											expr: &ruleRefExpr{
												pos:  position{line: 1916, col: 74, offset: 60405},
												name: "EQUAL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DedupOptions",
			pos:  position{line: 1934, col: 1, offset: 60933},
			expr: &actionExpr{
				pos: position{line: 1934, col: 17, offset: 60949},
				run: (*parser).callonDedupOptions1,
				expr: &labeledExpr{
					pos:   position{line: 1934, col: 17, offset: 60949},
					label: "option",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1934, col: 24, offset: 60956},
						expr: &ruleRefExpr{
							pos:  position{line: 1934, col: 25, offset: 60957},
							name: "DedupOption",
						},
					},
				},
			},
		},
		{
			name: "DedupOption",
			pos:  position{line: 1974, col: 1, offset: 62223},
			expr: &actionExpr{
				pos: position{line: 1974, col: 16, offset: 62238},
				run: (*parser).callonDedupOption1,
				expr: &seqExpr{
					pos: position{line: 1974, col: 16, offset: 62238},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1974, col: 16, offset: 62238},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 1974, col: 22, offset: 62244},
							label: "optionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 1974, col: 32, offset: 62254},
								name: "DedupOptionCMD",
							},
						},
						&litMatcher{
							pos:        position{line: 1974, col: 47, offset: 62269},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 1974, col: 51, offset: 62273},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1974, col: 57, offset: 62279},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupOptionCMD",
			pos:  position{line: 1979, col: 1, offset: 62388},
			expr: &actionExpr{
				pos: position{line: 1979, col: 19, offset: 62406},
				run: (*parser).callonDedupOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 1979, col: 19, offset: 62406},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 1979, col: 27, offset: 62414},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 1979, col: 27, offset: 62414},
								val:        "consecutive",
								ignoreCase: false,
								want:       "\"consecutive\"",
							},
							&litMatcher{
								pos:        position{line: 1979, col: 43, offset: 62430},
								val:        "keepempty",
								ignoreCase: false,
								want:       "\"keepempty\"",
							},
							&litMatcher{
								pos:        position{line: 1979, col: 57, offset: 62444},
								val:        "keepevents",
								ignoreCase: false,
								want:       "\"keepevents\"",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupSortByClause",
			pos:  position{line: 1987, col: 1, offset: 62629},
			expr: &actionExpr{
				pos: position{line: 1987, col: 22, offset: 62650},
				run: (*parser).callonDedupSortByClause1,
				expr: &seqExpr{
					pos: position{line: 1987, col: 22, offset: 62650},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1987, col: 22, offset: 62650},
							name: "CMD_DEDUP_SORTBY",
						},
						&labeledExpr{
							pos:   position{line: 1987, col: 39, offset: 62667},
							label: "dedupSortEles",
							expr: &ruleRefExpr{
								pos:  position{line: 1987, col: 53, offset: 62681},
								name: "SortElements",
							},
						},
					},
				},
			},
		},
		{
			name: "SortElements",
			pos:  position{line: 1992, col: 1, offset: 62789},
			expr: &actionExpr{
				pos: position{line: 1992, col: 17, offset: 62805},
				run: (*parser).callonSortElements1,
				expr: &seqExpr{
					pos: position{line: 1992, col: 17, offset: 62805},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1992, col: 17, offset: 62805},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1992, col: 23, offset: 62811},
								name: "SingleSortElement",
							},
						},
						&labeledExpr{
							pos:   position{line: 1992, col: 41, offset: 62829},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1992, col: 46, offset: 62834},
								expr: &seqExpr{
									pos: position{line: 1992, col: 47, offset: 62835},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1992, col: 47, offset: 62835},
											name: "SPACE_OR_COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 1992, col: 62, offset: 62850},
											name: "SingleSortElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleSortElement",
			pos:  position{line: 2007, col: 1, offset: 63208},
			expr: &actionExpr{
				pos: position{line: 2007, col: 22, offset: 63229},
				run: (*parser).callonSingleSortElement1,
				expr: &labeledExpr{
					pos:   position{line: 2007, col: 22, offset: 63229},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 2007, col: 31, offset: 63238},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 2007, col: 31, offset: 63238},
								name: "SingleSortElementWithCast",
							},
							&ruleRefExpr{
								pos:  position{line: 2007, col: 59, offset: 63266},
								name: "SingleSortElementWithoutCast",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleSortElementWithoutCast",
			pos:  position{line: 2011, col: 1, offset: 63325},
			expr: &actionExpr{
				pos: position{line: 2011, col: 33, offset: 63357},
				run: (*parser).callonSingleSortElementWithoutCast1,
				expr: &seqExpr{
					pos: position{line: 2011, col: 33, offset: 63357},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2011, col: 33, offset: 63357},
							label: "sortBySymbol",
							expr: &choiceExpr{
								pos: position{line: 2011, col: 47, offset: 63371},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 2011, col: 47, offset: 63371},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&litMatcher{
										pos:        position{line: 2011, col: 53, offset: 63377},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
									&litMatcher{
										pos:        position{line: 2011, col: 59, offset: 63383},
										val:        "",
										ignoreCase: false,
										want:       "\"\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2011, col: 63, offset: 63387},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 2011, col: 69, offset: 63393},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleSortElementWithCast",
			pos:  position{line: 2026, col: 1, offset: 63668},
			expr: &actionExpr{
				pos: position{line: 2026, col: 30, offset: 63697},
				run: (*parser).callonSingleSortElementWithCast1,
				expr: &seqExpr{
					pos: position{line: 2026, col: 30, offset: 63697},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2026, col: 30, offset: 63697},
							label: "sortBySymbol",
							expr: &choiceExpr{
								pos: position{line: 2026, col: 44, offset: 63711},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 2026, col: 44, offset: 63711},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&litMatcher{
										pos:        position{line: 2026, col: 50, offset: 63717},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
									&litMatcher{
										pos:        position{line: 2026, col: 56, offset: 63723},
										val:        "",
										ignoreCase: false,
										want:       "\"\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2026, col: 60, offset: 63727},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 2026, col: 64, offset: 63731},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 2026, col: 64, offset: 63731},
										val:        "auto",
										ignoreCase: false,
										want:       "\"auto\"",
									},
									&litMatcher{
										pos:        position{line: 2026, col: 73, offset: 63740},
										val:        "str",
										ignoreCase: false,
										want:       "\"str\"",
									},
									&litMatcher{
										pos:        position{line: 2026, col: 81, offset: 63748},
										val:        "ip",
										ignoreCase: false,
										want:       "\"ip\"",
									},
									&litMatcher{
										pos:        position{line: 2026, col: 88, offset: 63755},
										val:        "num",
										ignoreCase: false,
										want:       "\"num\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2026, col: 95, offset: 63762},
							name: "L_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 2026, col: 103, offset: 63770},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 2026, col: 109, offset: 63776},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2026, col: 119, offset: 63786},
							name: "R_PAREN",
						},
					},
				},
			},
		},
		{
			name: "RenameBlock",
			pos:  position{line: 2046, col: 1, offset: 64211},
			expr: &actionExpr{
				pos: position{line: 2046, col: 16, offset: 64226},
				run: (*parser).callonRenameBlock1,
				expr: &seqExpr{
					pos: position{line: 2046, col: 16, offset: 64226},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2046, col: 16, offset: 64226},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 2046, col: 21, offset: 64231},
							name: "CMD_RENAME",
						},
						&labeledExpr{
							pos:   position{line: 2046, col: 32, offset: 64242},
							label: "renameExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 2046, col: 43, offset: 64253},
								name: "RenameExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameExpr",
			pos:  position{line: 2062, col: 1, offset: 64628},
			expr: &choiceExpr{
				pos: position{line: 2062, col: 15, offset: 64642},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2062, col: 15, offset: 64642},
						run: (*parser).callonRenameExpr2,
						expr: &seqExpr{
							pos: position{line: 2062, col: 15, offset: 64642},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2062, col: 15, offset: 64642},
									label: "originalPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 2062, col: 31, offset: 64658},
										name: "RenamePattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2062, col: 45, offset: 64672},
									name: "AS",
								},
								&labeledExpr{
									pos:   position{line: 2062, col: 48, offset: 64675},
									label: "newPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 2062, col: 59, offset: 64686},
										name: "QuotedString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2073, col: 3, offset: 65005},
						run: (*parser).callonRenameExpr9,
						expr: &seqExpr{
							pos: position{line: 2073, col: 3, offset: 65005},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2073, col: 3, offset: 65005},
									label: "originalPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 2073, col: 19, offset: 65021},
										name: "RenamePattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2073, col: 33, offset: 65035},
									name: "AS",
								},
								&labeledExpr{
									pos:   position{line: 2073, col: 36, offset: 65038},
									label: "newPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 2073, col: 47, offset: 65049},
										name: "RenamePattern",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RexBlock",
			pos:  position{line: 2095, col: 1, offset: 65615},
			expr: &actionExpr{
				pos: position{line: 2095, col: 13, offset: 65627},
				run: (*parser).callonRexBlock1,
				expr: &seqExpr{
					pos: position{line: 2095, col: 13, offset: 65627},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2095, col: 13, offset: 65627},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 2095, col: 18, offset: 65632},
							name: "CMD_REX",
						},
						&litMatcher{
							pos:        position{line: 2095, col: 26, offset: 65640},
							val:        "field",
							ignoreCase: false,
							want:       "\"field\"",
						},
						&ruleRefExpr{
							pos:  position{line: 2095, col: 34, offset: 65648},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 2095, col: 40, offset: 65654},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 2095, col: 46, offset: 65660},
								name: "EvalFieldToRead",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2095, col: 62, offset: 65676},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 2095, col: 68, offset: 65682},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 2095, col: 72, offset: 65686},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "SortBlock",
			pos:  position{line: 2123, col: 1, offset: 66389},
			expr: &actionExpr{
				pos: position{line: 2123, col: 14, offset: 66402},
				run: (*parser).callonSortBlock1,
				expr: &seqExpr{
					pos: position{line: 2123, col: 14, offset: 66402},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2123, col: 14, offset: 66402},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 2123, col: 19, offset: 66407},
							name: "CMD_SORT",
						},
						&labeledExpr{
							pos:   position{line: 2123, col: 28, offset: 66416},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 2123, col: 34, offset: 66422},
								expr: &ruleRefExpr{
									pos:  position{line: 2123, col: 35, offset: 66423},
									name: "SortLimit",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2123, col: 47, offset: 66435},
							label: "sortByEles",
							expr: &ruleRefExpr{
								pos:  position{line: 2123, col: 58, offset: 66446},
								name: "SortElements",
							},
						},
					},
				},
			},
		},
		{
			name: "SortLimit",
			pos:  position{line: 2160, col: 1, offset: 67297},
			expr: &actionExpr{
				pos: position{line: 2160, col: 14, offset: 67310},
				run: (*parser).callonSortLimit1,
				expr: &seqExpr{
					pos: position{line: 2160, col: 14, offset: 67310},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 2160, col: 14, offset: 67310},
							expr: &seqExpr{
								pos: position{line: 2160, col: 15, offset: 67311},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 2160, col: 15, offset: 67311},
										val:        "limit",
										ignoreCase: false,
										want:       "\"limit\"",
									},
									&ruleRefExpr{
										pos:  position{line: 2160, col: 23, offset: 67319},
										name: "EQUAL",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2160, col: 31, offset: 67327},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 2160, col: 40, offset: 67336},
								name: "IntegerAsString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2160, col: 56, offset: 67352},
							name: "SPACE",
						},
					},
				},
			},
		},
		{
			name: "EvalBlock",
			pos:  position{line: 2174, col: 1, offset: 67651},
			expr: &actionExpr{
				pos: position{line: 2174, col: 14, offset: 67664},
				run: (*parser).callonEvalBlock1,
				expr: &seqExpr{
					pos: position{line: 2174, col: 14, offset: 67664},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2174, col: 14, offset: 67664},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 2174, col: 19, offset: 67669},
							name: "CMD_EVAL",
						},
						&labeledExpr{
							pos:   position{line: 2174, col: 28, offset: 67678},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2174, col: 34, offset: 67684},
								name: "SingleEval",
							},
						},
						&labeledExpr{
							pos:   position{line: 2174, col: 45, offset: 67695},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2174, col: 50, offset: 67700},
								expr: &seqExpr{
									pos: position{line: 2174, col: 51, offset: 67701},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 2174, col: 51, offset: 67701},
											name: "COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 2174, col: 57, offset: 67707},
											name: "SingleEval",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleEval",
			pos:  position{line: 2201, col: 1, offset: 68508},
			expr: &actionExpr{
				pos: position{line: 2201, col: 15, offset: 68522},
				run: (*parser).callonSingleEval1,
				expr: &seqExpr{
					pos: position{line: 2201, col: 15, offset: 68522},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2201, col: 15, offset: 68522},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 2201, col: 21, offset: 68528},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2201, col: 31, offset: 68538},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 2201, col: 37, offset: 68544},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 2201, col: 42, offset: 68549},
								name: "EvalExpression",
							},
						},
					},
				},
			},
		},
		{
			name: "EvalExpression",
			pos:  position{line: 2214, col: 1, offset: 68950},
			expr: &actionExpr{
				pos: position{line: 2214, col: 19, offset: 68968},
				run: (*parser).callonEvalExpression1,
				expr: &labeledExpr{
					pos:   position{line: 2214, col: 19, offset: 68968},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 2214, col: 25, offset: 68974},
						name: "ValueExpr",
					},
				},
			},
		},
		{
			name: "ConditionExpr",
			pos:  position{line: 2223, col: 1, offset: 69198},
			expr: &choiceExpr{
				pos: position{line: 2223, col: 18, offset: 69215},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2223, col: 18, offset: 69215},
						run: (*parser).callonConditionExpr2,
						expr: &seqExpr{
							pos: position{line: 2223, col: 18, offset: 69215},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2223, col: 18, offset: 69215},
									val:        "if",
									ignoreCase: false,
									want:       "\"if\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2223, col: 23, offset: 69220},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2223, col: 31, offset: 69228},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 2223, col: 41, offset: 69238},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2223, col: 50, offset: 69247},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2223, col: 56, offset: 69253},
									label: "trueValue",
									expr: &ruleRefExpr{
										pos:  position{line: 2223, col: 66, offset: 69263},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2223, col: 76, offset: 69273},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2223, col: 82, offset: 69279},
									label: "falseValue",
									expr: &ruleRefExpr{
										pos:  position{line: 2223, col: 93, offset: 69290},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2223, col: 103, offset: 69300},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2234, col: 3, offset: 69551},
						run: (*parser).callonConditionExpr15,
						expr: &seqExpr{
							pos: position{line: 2234, col: 3, offset: 69551},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2234, col: 3, offset: 69551},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2234, col: 11, offset: 69559},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2234, col: 11, offset: 69559},
												val:        "case",
												ignoreCase: false,
												want:       "\"case\"",
											},
											&litMatcher{
												pos:        position{line: 2234, col: 20, offset: 69568},
												val:        "validate",
												ignoreCase: false,
												want:       "\"validate\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2234, col: 32, offset: 69580},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2234, col: 40, offset: 69588},
									label: "pair",
									expr: &ruleRefExpr{
										pos:  position{line: 2234, col: 45, offset: 69593},
										name: "ConditionValuePair",
									},
								},
								&labeledExpr{
									pos:   position{line: 2234, col: 64, offset: 69612},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2234, col: 69, offset: 69617},
										expr: &seqExpr{
											pos: position{line: 2234, col: 70, offset: 69618},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2234, col: 70, offset: 69618},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2234, col: 76, offset: 69624},
													name: "ConditionValuePair",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2234, col: 97, offset: 69645},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2257, col: 3, offset: 70249},
						run: (*parser).callonConditionExpr30,
						expr: &seqExpr{
							pos: position{line: 2257, col: 3, offset: 70249},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2257, col: 3, offset: 70249},
									val:        "coalesce",
									ignoreCase: false,
									want:       "\"coalesce\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2257, col: 14, offset: 70260},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2257, col: 22, offset: 70268},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2257, col: 32, offset: 70278},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2257, col: 42, offset: 70288},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2257, col: 47, offset: 70293},
										expr: &seqExpr{
											pos: position{line: 2257, col: 48, offset: 70294},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2257, col: 48, offset: 70294},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2257, col: 54, offset: 70300},
													name: "ValueExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2257, col: 66, offset: 70312},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2274, col: 3, offset: 70731},
						run: (*parser).callonConditionExpr42,
						expr: &seqExpr{
							pos: position{line: 2274, col: 3, offset: 70731},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2274, col: 3, offset: 70731},
									val:        "nullif",
									ignoreCase: false,
									want:       "\"nullif\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2274, col: 12, offset: 70740},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2274, col: 20, offset: 70748},
									label: "leftValue",
									expr: &ruleRefExpr{
										pos:  position{line: 2274, col: 30, offset: 70758},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2274, col: 40, offset: 70768},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2274, col: 46, offset: 70774},
									label: "rightValue",
									expr: &ruleRefExpr{
										pos:  position{line: 2274, col: 57, offset: 70785},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2274, col: 67, offset: 70795},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2286, col: 3, offset: 71075},
						run: (*parser).callonConditionExpr52,
						expr: &seqExpr{
							pos: position{line: 2286, col: 3, offset: 71075},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2286, col: 3, offset: 71075},
									val:        "null",
									ignoreCase: false,
									want:       "\"null\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2286, col: 10, offset: 71082},
									name: "L_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2286, col: 18, offset: 71090},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConditionValuePair",
			pos:  position{line: 2293, col: 1, offset: 71187},
			expr: &actionExpr{
				pos: position{line: 2293, col: 23, offset: 71209},
				run: (*parser).callonConditionValuePair1,
				expr: &seqExpr{
					pos: position{line: 2293, col: 23, offset: 71209},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2293, col: 23, offset: 71209},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 2293, col: 33, offset: 71219},
								name: "BoolExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2293, col: 42, offset: 71228},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 2293, col: 48, offset: 71234},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 2293, col: 54, offset: 71240},
								name: "ValueExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "StringExprAsValueExpr",
			pos:  position{line: 2301, col: 1, offset: 71445},
			expr: &actionExpr{
				pos: position{line: 2301, col: 26, offset: 71470},
				run: (*parser).callonStringExprAsValueExpr1,
				expr: &labeledExpr{
					pos:   position{line: 2301, col: 26, offset: 71470},
					label: "stringExpr",
					expr: &ruleRefExpr{
						pos:  position{line: 2301, col: 37, offset: 71481},
						name: "StringExpr",
					},
				},
			},
		},
		{
			name: "MultiValueExprAsValueExpr",
			pos:  position{line: 2311, col: 1, offset: 71690},
			expr: &actionExpr{
				pos: position{line: 2311, col: 30, offset: 71719},
				run: (*parser).callonMultiValueExprAsValueExpr1,
				expr: &labeledExpr{
					pos:   position{line: 2311, col: 30, offset: 71719},
					label: "multiValueExpr",
					expr: &ruleRefExpr{
						pos:  position{line: 2311, col: 45, offset: 71734},
						name: "MultiValueExpr",
					},
				},
			},
		},
		{
			name: "StringOrMultiValueExpr",
			pos:  position{line: 2320, col: 1, offset: 71940},
			expr: &actionExpr{
				pos: position{line: 2320, col: 27, offset: 71966},
				run: (*parser).callonStringOrMultiValueExpr1,
				expr: &labeledExpr{
					pos:   position{line: 2320, col: 27, offset: 71966},
					label: "strOrMVExpr",
					expr: &choiceExpr{
						pos: position{line: 2320, col: 40, offset: 71979},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 2320, col: 40, offset: 71979},
								name: "MultiValueExprAsValueExpr",
							},
							&ruleRefExpr{
								pos:  position{line: 2320, col: 68, offset: 72007},
								name: "StringExprAsValueExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiValueExpr",
			pos:  position{line: 2324, col: 1, offset: 72084},
			expr: &choiceExpr{
				pos: position{line: 2324, col: 19, offset: 72102},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2324, col: 19, offset: 72102},
						run: (*parser).callonMultiValueExpr2,
						expr: &seqExpr{
							pos: position{line: 2324, col: 20, offset: 72103},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2324, col: 20, offset: 72103},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2324, col: 28, offset: 72111},
										val:        "split",
										ignoreCase: false,
										want:       "\"split\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2324, col: 37, offset: 72120},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2324, col: 45, offset: 72128},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2324, col: 56, offset: 72139},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2324, col: 67, offset: 72150},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2324, col: 73, offset: 72156},
									label: "delim",
									expr: &ruleRefExpr{
										pos:  position{line: 2324, col: 79, offset: 72162},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2324, col: 90, offset: 72173},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2336, col: 3, offset: 72534},
						run: (*parser).callonMultiValueExpr13,
						expr: &seqExpr{
							pos: position{line: 2336, col: 4, offset: 72535},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2336, col: 4, offset: 72535},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2336, col: 12, offset: 72543},
										val:        "mvindex",
										ignoreCase: false,
										want:       "\"mvindex\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2336, col: 23, offset: 72554},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2336, col: 31, offset: 72562},
									label: "multiValueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2336, col: 46, offset: 72577},
										name: "MultiValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2336, col: 61, offset: 72592},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2336, col: 67, offset: 72598},
									label: "startIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 2336, col: 78, offset: 72609},
										name: "NumericExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2336, col: 90, offset: 72621},
									label: "endIndex",
									expr: &zeroOrOneExpr{
										pos: position{line: 2336, col: 99, offset: 72630},
										expr: &ruleRefExpr{
											pos:  position{line: 2336, col: 100, offset: 72631},
											name: "NumericParamExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2336, col: 119, offset: 72650},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2352, col: 3, offset: 73212},
						run: (*parser).callonMultiValueExpr27,
						expr: &seqExpr{
							pos: position{line: 2352, col: 4, offset: 73213},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2352, col: 4, offset: 73213},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2352, col: 12, offset: 73221},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2352, col: 12, offset: 73221},
												val:        "mvdedup",
												ignoreCase: false,
												want:       "\"mvdedup\"",
											},
											&litMatcher{
												pos:        position{line: 2352, col: 24, offset: 73233},
												val:        "mvsort",
												ignoreCase: false,
												want:       "\"mvsort\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2352, col: 34, offset: 73243},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2352, col: 42, offset: 73251},
									label: "multiValueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2352, col: 57, offset: 73266},
										name: "MultiValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2352, col: 72, offset: 73281},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2364, col: 3, offset: 73629},
						run: (*parser).callonMultiValueExpr37,
						expr: &seqExpr{
							pos: position{line: 2364, col: 4, offset: 73630},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2364, col: 4, offset: 73630},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2364, col: 12, offset: 73638},
										val:        "mvfilter",
										ignoreCase: false,
										want:       "\"mvfilter\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2364, col: 24, offset: 73650},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2364, col: 32, offset: 73658},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 2364, col: 42, offset: 73668},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2364, col: 51, offset: 73677},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2377, col: 3, offset: 74024},
						run: (*parser).callonMultiValueExpr45,
						expr: &seqExpr{
							pos: position{line: 2377, col: 4, offset: 74025},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2377, col: 4, offset: 74025},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2377, col: 12, offset: 74033},
										val:        "mvmap",
										ignoreCase: false,
										want:       "\"mvmap\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2377, col: 21, offset: 74042},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2377, col: 29, offset: 74050},
									label: "multiValueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2377, col: 44, offset: 74065},
										name: "MultiValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2377, col: 59, offset: 74080},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2377, col: 65, offset: 74086},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2377, col: 70, offset: 74091},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2377, col: 80, offset: 74101},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2390, col: 3, offset: 74523},
						run: (*parser).callonMultiValueExpr56,
						expr: &seqExpr{
							pos: position{line: 2390, col: 4, offset: 74524},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2390, col: 4, offset: 74524},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2390, col: 12, offset: 74532},
										val:        "mvrange",
										ignoreCase: false,
										want:       "\"mvrange\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2390, col: 23, offset: 74543},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2390, col: 31, offset: 74551},
									label: "startIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 2390, col: 42, offset: 74562},
										name: "NumericExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2390, col: 54, offset: 74574},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2390, col: 60, offset: 74580},
									label: "endIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 2390, col: 69, offset: 74589},
										name: "NumericExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2390, col: 81, offset: 74601},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2390, col: 87, offset: 74607},
									label: "stringExpr",
									expr: &zeroOrOneExpr{
										pos: position{line: 2390, col: 98, offset: 74618},
										expr: &ruleRefExpr{
											pos:  position{line: 2390, col: 99, offset: 74619},
											name: "StringExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2390, col: 112, offset: 74632},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2403, col: 3, offset: 75083},
						run: (*parser).callonMultiValueExpr71,
						expr: &seqExpr{
							pos: position{line: 2403, col: 4, offset: 75084},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2403, col: 4, offset: 75084},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2403, col: 12, offset: 75092},
										val:        "mvzip",
										ignoreCase: false,
										want:       "\"mvzip\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2403, col: 21, offset: 75101},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2403, col: 29, offset: 75109},
									label: "mvLeft",
									expr: &ruleRefExpr{
										pos:  position{line: 2403, col: 36, offset: 75116},
										name: "MultiValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2403, col: 51, offset: 75131},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2403, col: 57, offset: 75137},
									label: "mvRight",
									expr: &ruleRefExpr{
										pos:  position{line: 2403, col: 65, offset: 75145},
										name: "MultiValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2403, col: 80, offset: 75160},
									label: "rest",
									expr: &zeroOrOneExpr{
										pos: position{line: 2403, col: 85, offset: 75165},
										expr: &seqExpr{
											pos: position{line: 2403, col: 86, offset: 75166},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2403, col: 86, offset: 75166},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2403, col: 92, offset: 75172},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2403, col: 105, offset: 75185},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2420, col: 3, offset: 75713},
						run: (*parser).callonMultiValueExpr87,
						expr: &seqExpr{
							pos: position{line: 2420, col: 4, offset: 75714},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2420, col: 4, offset: 75714},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2420, col: 12, offset: 75722},
										val:        "mv_to_json_array",
										ignoreCase: false,
										want:       "\"mv_to_json_array\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2420, col: 32, offset: 75742},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2420, col: 40, offset: 75750},
									label: "multiValueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2420, col: 55, offset: 75765},
										name: "MultiValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2420, col: 70, offset: 75780},
									label: "rest",
									expr: &zeroOrOneExpr{
										pos: position{line: 2420, col: 75, offset: 75785},
										expr: &seqExpr{
											pos: position{line: 2420, col: 76, offset: 75786},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2420, col: 76, offset: 75786},
													name: "COMMA",
												},
												&choiceExpr{
													pos: position{line: 2420, col: 83, offset: 75793},
													alternatives: []any{
														&litMatcher{
															pos:        position{line: 2420, col: 83, offset: 75793},
															val:        "true",
															ignoreCase: false,
															want:       "\"true\"",
														},
														&litMatcher{
															pos:        position{line: 2420, col: 92, offset: 75802},
															val:        "false",
															ignoreCase: false,
															want:       "\"false\"",
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2420, col: 101, offset: 75811},
													val:        "()",
													ignoreCase: false,
													want:       "\"()\"",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2420, col: 108, offset: 75818},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2445, col: 3, offset: 76521},
						run: (*parser).callonMultiValueExpr103,
						expr: &seqExpr{
							pos: position{line: 2445, col: 4, offset: 76522},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2445, col: 4, offset: 76522},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2445, col: 12, offset: 76530},
										val:        "mvappend",
										ignoreCase: false,
										want:       "\"mvappend\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2445, col: 24, offset: 76542},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2445, col: 32, offset: 76550},
									label: "firstVal",
									expr: &ruleRefExpr{
										pos:  position{line: 2445, col: 41, offset: 76559},
										name: "StringOrMultiValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2445, col: 64, offset: 76582},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2445, col: 69, offset: 76587},
										expr: &seqExpr{
											pos: position{line: 2445, col: 70, offset: 76588},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2445, col: 70, offset: 76588},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2445, col: 76, offset: 76594},
													name: "StringOrMultiValueExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2445, col: 101, offset: 76619},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2465, col: 3, offset: 77207},
						run: (*parser).callonMultiValueExpr116,
						expr: &seqExpr{
							pos: position{line: 2465, col: 3, offset: 77207},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2465, col: 3, offset: 77207},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2465, col: 9, offset: 77213},
										name: "EvalFieldToRead",
									},
								},
								&notExpr{
									pos: position{line: 2465, col: 25, offset: 77229},
									expr: &choiceExpr{
										pos: position{line: 2465, col: 27, offset: 77231},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2465, col: 27, offset: 77231},
												name: "OpPlus",
											},
											&ruleRefExpr{
												pos:  position{line: 2465, col: 36, offset: 77240},
												name: "OpMinus",
											},
											&ruleRefExpr{
												pos:  position{line: 2465, col: 46, offset: 77250},
												name: "OpMul",
											},
											&ruleRefExpr{
												pos:  position{line: 2465, col: 54, offset: 77258},
												name: "OpDiv",
											},
											&ruleRefExpr{
												pos:  position{line: 2465, col: 62, offset: 77266},
												name: "OpMod",
											},
											&ruleRefExpr{
												pos:  position{line: 2465, col: 70, offset: 77274},
												name: "EVAL_CONCAT",
											},
											&litMatcher{
												pos:        position{line: 2465, col: 84, offset: 77288},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextExpr",
			pos:  position{line: 2477, col: 1, offset: 77683},
			expr: &choiceExpr{
				pos: position{line: 2477, col: 13, offset: 77695},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2477, col: 13, offset: 77695},
						run: (*parser).callonTextExpr2,
						expr: &seqExpr{
							pos: position{line: 2477, col: 14, offset: 77696},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2477, col: 14, offset: 77696},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2477, col: 22, offset: 77704},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2477, col: 22, offset: 77704},
												val:        "lower",
												ignoreCase: false,
												want:       "\"lower\"",
											},
											&litMatcher{
												pos:        position{line: 2477, col: 32, offset: 77714},
												val:        "upper",
												ignoreCase: false,
												want:       "\"upper\"",
											},
											&litMatcher{
												pos:        position{line: 2477, col: 42, offset: 77724},
												val:        "urldecode",
												ignoreCase: false,
												want:       "\"urldecode\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2477, col: 55, offset: 77737},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2477, col: 63, offset: 77745},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2477, col: 74, offset: 77756},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2477, col: 85, offset: 77767},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2489, col: 3, offset: 78081},
						run: (*parser).callonTextExpr13,
						expr: &seqExpr{
							pos: position{line: 2489, col: 4, offset: 78082},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2489, col: 4, offset: 78082},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2489, col: 12, offset: 78090},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2489, col: 12, offset: 78090},
												val:        "max",
												ignoreCase: false,
												want:       "\"max\"",
											},
											&litMatcher{
												pos:        position{line: 2489, col: 20, offset: 78098},
												val:        "min",
												ignoreCase: false,
												want:       "\"min\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2489, col: 27, offset: 78105},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2489, col: 35, offset: 78113},
									label: "firstVal",
									expr: &ruleRefExpr{
										pos:  position{line: 2489, col: 44, offset: 78122},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2489, col: 55, offset: 78133},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2489, col: 60, offset: 78138},
										expr: &seqExpr{
											pos: position{line: 2489, col: 61, offset: 78139},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2489, col: 61, offset: 78139},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2489, col: 67, offset: 78145},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2489, col: 80, offset: 78158},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2511, col: 3, offset: 78758},
						run: (*parser).callonTextExpr28,
						expr: &seqExpr{
							pos: position{line: 2511, col: 4, offset: 78759},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2511, col: 4, offset: 78759},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2511, col: 12, offset: 78767},
										val:        "mvcount",
										ignoreCase: false,
										want:       "\"mvcount\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2511, col: 23, offset: 78778},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2511, col: 31, offset: 78786},
									label: "multiValueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2511, col: 46, offset: 78801},
										name: "MultiValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2511, col: 61, offset: 78816},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2522, col: 3, offset: 79118},
						run: (*parser).callonTextExpr36,
						expr: &seqExpr{
							pos: position{line: 2522, col: 4, offset: 79119},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2522, col: 4, offset: 79119},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2522, col: 12, offset: 79127},
										val:        "mvjoin",
										ignoreCase: false,
										want:       "\"mvjoin\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2522, col: 22, offset: 79137},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2522, col: 30, offset: 79145},
									label: "multiValueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2522, col: 45, offset: 79160},
										name: "MultiValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2522, col: 60, offset: 79175},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2522, col: 66, offset: 79181},
									label: "delim",
									expr: &ruleRefExpr{
										pos:  position{line: 2522, col: 72, offset: 79187},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2522, col: 83, offset: 79198},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2534, col: 3, offset: 79548},
						run: (*parser).callonTextExpr47,
						expr: &seqExpr{
							pos: position{line: 2534, col: 4, offset: 79549},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2534, col: 4, offset: 79549},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2534, col: 12, offset: 79557},
										val:        "mvfind",
										ignoreCase: false,
										want:       "\"mvfind\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2534, col: 22, offset: 79567},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2534, col: 30, offset: 79575},
									label: "multiValueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2534, col: 45, offset: 79590},
										name: "MultiValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2534, col: 60, offset: 79605},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2534, col: 66, offset: 79611},
									label: "regexPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 2534, col: 79, offset: 79624},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2534, col: 90, offset: 79635},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2558, col: 3, offset: 80304},
						run: (*parser).callonTextExpr58,
						expr: &seqExpr{
							pos: position{line: 2558, col: 4, offset: 80305},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2558, col: 4, offset: 80305},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2558, col: 12, offset: 80313},
										val:        "substr",
										ignoreCase: false,
										want:       "\"substr\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2558, col: 22, offset: 80323},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2558, col: 30, offset: 80331},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2558, col: 41, offset: 80342},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2558, col: 52, offset: 80353},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2558, col: 58, offset: 80359},
									label: "startIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 2558, col: 69, offset: 80370},
										name: "NumericExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2558, col: 81, offset: 80382},
									label: "lengthParam",
									expr: &zeroOrOneExpr{
										pos: position{line: 2558, col: 93, offset: 80394},
										expr: &seqExpr{
											pos: position{line: 2558, col: 94, offset: 80395},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2558, col: 94, offset: 80395},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2558, col: 100, offset: 80401},
													name: "NumericExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2558, col: 114, offset: 80415},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2583, col: 3, offset: 81245},
						run: (*parser).callonTextExpr74,
						expr: &seqExpr{
							pos: position{line: 2583, col: 3, offset: 81245},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2583, col: 3, offset: 81245},
									val:        "tostring",
									ignoreCase: false,
									want:       "\"tostring\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2583, col: 14, offset: 81256},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2583, col: 22, offset: 81264},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 2583, col: 28, offset: 81270},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2583, col: 38, offset: 81280},
									label: "format",
									expr: &zeroOrOneExpr{
										pos: position{line: 2583, col: 45, offset: 81287},
										expr: &seqExpr{
											pos: position{line: 2583, col: 46, offset: 81288},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2583, col: 46, offset: 81288},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2583, col: 52, offset: 81294},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2583, col: 65, offset: 81307},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2596, col: 3, offset: 81675},
						run: (*parser).callonTextExpr86,
						expr: &seqExpr{
							pos: position{line: 2596, col: 4, offset: 81676},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2596, col: 4, offset: 81676},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2596, col: 12, offset: 81684},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2596, col: 12, offset: 81684},
												val:        "ltrim",
												ignoreCase: false,
												want:       "\"ltrim\"",
											},
											&litMatcher{
												pos:        position{line: 2596, col: 22, offset: 81694},
												val:        "rtrim",
												ignoreCase: false,
												want:       "\"rtrim\"",
											},
											&litMatcher{
												pos:        position{line: 2596, col: 32, offset: 81704},
												val:        "trim",
												ignoreCase: false,
												want:       "\"trim\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2596, col: 40, offset: 81712},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2596, col: 48, offset: 81720},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2596, col: 54, offset: 81726},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2596, col: 66, offset: 81738},
									label: "strToRemoveExpr",
									expr: &zeroOrOneExpr{
										pos: position{line: 2596, col: 82, offset: 81754},
										expr: &ruleRefExpr{
											pos:  position{line: 2596, col: 83, offset: 81755},
											name: "StrToRemoveExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2596, col: 101, offset: 81773},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2615, col: 3, offset: 82213},
						run: (*parser).callonTextExpr100,
						expr: &seqExpr{
							pos: position{line: 2615, col: 3, offset: 82213},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2615, col: 3, offset: 82213},
									val:        "spath",
									ignoreCase: false,
									want:       "\"spath\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2615, col: 11, offset: 82221},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2615, col: 19, offset: 82229},
									label: "inputField",
									expr: &ruleRefExpr{
										pos:  position{line: 2615, col: 30, offset: 82240},
										name: "FieldNameStartWith_",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2615, col: 50, offset: 82260},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2615, col: 56, offset: 82266},
									label: "path",
									expr: &choiceExpr{
										pos: position{line: 2615, col: 62, offset: 82272},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2615, col: 62, offset: 82272},
												name: "QuotedPathString",
											},
											&ruleRefExpr{
												pos:  position{line: 2615, col: 81, offset: 82291},
												name: "UnquotedPathValue",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2615, col: 100, offset: 82310},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2626, col: 3, offset: 82615},
						run: (*parser).callonTextExpr112,
						expr: &seqExpr{
							pos: position{line: 2626, col: 3, offset: 82615},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2626, col: 3, offset: 82615},
									val:        "ipmask",
									ignoreCase: false,
									want:       "\"ipmask\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2626, col: 12, offset: 82624},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2626, col: 20, offset: 82632},
									label: "mask",
									expr: &ruleRefExpr{
										pos:  position{line: 2626, col: 25, offset: 82637},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2626, col: 36, offset: 82648},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2626, col: 42, offset: 82654},
									label: "ip",
									expr: &ruleRefExpr{
										pos:  position{line: 2626, col: 45, offset: 82657},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2626, col: 55, offset: 82667},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2633, col: 3, offset: 82825},
						run: (*parser).callonTextExpr122,
						expr: &seqExpr{
							pos: position{line: 2633, col: 3, offset: 82825},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2633, col: 3, offset: 82825},
									val:        "object_to_array",
									ignoreCase: false,
									want:       "\"object_to_array\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2633, col: 21, offset: 82843},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2633, col: 29, offset: 82851},
									label: "obj",
									expr: &ruleRefExpr{
										pos:  position{line: 2633, col: 33, offset: 82855},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2633, col: 43, offset: 82865},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2633, col: 49, offset: 82871},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 2633, col: 53, offset: 82875},
										name: "QuotedString",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2633, col: 66, offset: 82888},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2633, col: 72, offset: 82894},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 2633, col: 78, offset: 82900},
										name: "QuotedString",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2633, col: 91, offset: 82913},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2644, col: 3, offset: 83221},
						run: (*parser).callonTextExpr135,
						expr: &seqExpr{
							pos: position{line: 2644, col: 3, offset: 83221},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2644, col: 3, offset: 83221},
									val:        "printf",
									ignoreCase: false,
									want:       "\"printf\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2644, col: 12, offset: 83230},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2644, col: 20, offset: 83238},
									label: "format",
									expr: &ruleRefExpr{
										pos:  position{line: 2644, col: 27, offset: 83245},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2644, col: 38, offset: 83256},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2644, col: 43, offset: 83261},
										expr: &seqExpr{
											pos: position{line: 2644, col: 44, offset: 83262},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2644, col: 44, offset: 83262},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2644, col: 50, offset: 83268},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2644, col: 63, offset: 83281},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2662, col: 3, offset: 83748},
						run: (*parser).callonTextExpr147,
						expr: &seqExpr{
							pos: position{line: 2662, col: 3, offset: 83748},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2662, col: 3, offset: 83748},
									val:        "tojson",
									ignoreCase: false,
									want:       "\"tojson\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2662, col: 12, offset: 83757},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2662, col: 20, offset: 83765},
									label: "containInternalFields",
									expr: &zeroOrOneExpr{
										pos: position{line: 2662, col: 42, offset: 83787},
										expr: &seqExpr{
											pos: position{line: 2662, col: 43, offset: 83788},
											exprs: []any{
												&choiceExpr{
													pos: position{line: 2662, col: 44, offset: 83789},
													alternatives: []any{
														&litMatcher{
															pos:        position{line: 2662, col: 44, offset: 83789},
															val:        "true",
															ignoreCase: false,
															want:       "\"true\"",
														},
														&litMatcher{
															pos:        position{line: 2662, col: 53, offset: 83798},
															val:        "false",
															ignoreCase: false,
															want:       "\"false\"",
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2662, col: 62, offset: 83807},
													val:        "()",
													ignoreCase: false,
													want:       "\"()\"",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2662, col: 69, offset: 83814},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2684, col: 3, offset: 84411},
						run: (*parser).callonTextExpr159,
						expr: &seqExpr{
							pos: position{line: 2684, col: 3, offset: 84411},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2684, col: 3, offset: 84411},
									val:        "cluster",
									ignoreCase: false,
									want:       "\"cluster\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2684, col: 13, offset: 84421},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2684, col: 21, offset: 84429},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2684, col: 27, offset: 84435},
										name: "EvalFieldToRead",
									},
								},
								&labeledExpr{
									pos:   position{line: 2684, col: 43, offset: 84451},
									label: "threshold",
									expr: &zeroOrOneExpr{
										pos: position{line: 2684, col: 53, offset: 84461},
										expr: &seqExpr{
											pos: position{line: 2684, col: 54, offset: 84462},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2684, col: 54, offset: 84462},
													name: "COMMA",
												},
												&litMatcher{
													pos:        position{line: 2684, col: 60, offset: 84468},
													val:        "threshold:",
													ignoreCase: false,
													want:       "\"threshold:\"",
												},
												&ruleRefExpr{
													pos:  position{line: 2684, col: 73, offset: 84481},
													name: "FloatAsString",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2684, col: 89, offset: 84497},
									label: "match",
									expr: &zeroOrOneExpr{
										pos: position{line: 2684, col: 95, offset: 84503},
										expr: &seqExpr{
											pos: position{line: 2684, col: 96, offset: 84504},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2684, col: 96, offset: 84504},
													name: "COMMA",
												},
												&litMatcher{
													pos:        position{line: 2684, col: 102, offset: 84510},
													val:        "match:",
													ignoreCase: false,
													want:       "\"match:\"",
												},
												&choiceExpr{
													pos: position{line: 2684, col: 112, offset: 84520},
													alternatives: []any{
														&litMatcher{
															pos:        position{line: 2684, col: 112, offset: 84520},
															val:        "termlist",
															ignoreCase: false,
															want:       "\"termlist\"",
														},
														&litMatcher{
															pos:        position{line: 2684, col: 125, offset: 84533},
															val:        "termset",
															ignoreCase: false,
															want:       "\"termset\"",
														},
														&litMatcher{
															pos:        position{line: 2684, col: 137, offset: 84545},
															val:        "ngramset",
															ignoreCase: false,
															want:       "\"ngramset\"",
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2684, col: 151, offset: 84559},
									label: "delims",
									expr: &zeroOrOneExpr{
										pos: position{line: 2684, col: 158, offset: 84566},
										expr: &seqExpr{
											pos: position{line: 2684, col: 159, offset: 84567},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2684, col: 159, offset: 84567},
													name: "COMMA",
												},
												&litMatcher{
													pos:        position{line: 2684, col: 165, offset: 84573},
													val:        "delims:",
													ignoreCase: false,
													want:       "\"delims:\"",
												},
												&ruleRefExpr{
													pos:  position{line: 2684, col: 175, offset: 84583},
													name: "QuotedString",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2684, col: 190, offset: 84598},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2724, col: 3, offset: 85593},
						run: (*parser).callonTextExpr187,
						expr: &seqExpr{
							pos: position{line: 2724, col: 3, offset: 85593},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2724, col: 3, offset: 85593},
									val:        "getfields",
									ignoreCase: false,
									want:       "\"getfields\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2724, col: 15, offset: 85605},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2724, col: 23, offset: 85613},
									label: "filter",
									expr: &zeroOrOneExpr{
										pos: position{line: 2724, col: 30, offset: 85620},
										expr: &ruleRefExpr{
											pos:  position{line: 2724, col: 31, offset: 85621},
											name: "StringExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2724, col: 44, offset: 85634},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2735, col: 3, offset: 85825},
						run: (*parser).callonTextExpr195,
						expr: &seqExpr{
							pos: position{line: 2735, col: 3, offset: 85825},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2735, col: 3, offset: 85825},
									val:        "typeof",
									ignoreCase: false,
									want:       "\"typeof\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2735, col: 12, offset: 85834},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2735, col: 20, offset: 85842},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2735, col: 30, offset: 85852},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2735, col: 40, offset: 85862},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2741, col: 3, offset: 85985},
						run: (*parser).callonTextExpr202,
						expr: &seqExpr{
							pos: position{line: 2741, col: 3, offset: 85985},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2741, col: 3, offset: 85985},
									val:        "replace",
									ignoreCase: false,
									want:       "\"replace\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2741, col: 13, offset: 85995},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2741, col: 21, offset: 86003},
									label: "val",
									expr: &ruleRefExpr{
										pos:  position{line: 2741, col: 25, offset: 86007},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2741, col: 35, offset: 86017},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2741, col: 41, offset: 86023},
									label: "regex",
									expr: &ruleRefExpr{
										pos:  position{line: 2741, col: 47, offset: 86029},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2741, col: 58, offset: 86040},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2741, col: 64, offset: 86046},
									label: "replacement",
									expr: &ruleRefExpr{
										pos:  position{line: 2741, col: 76, offset: 86058},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2741, col: 87, offset: 86069},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2748, col: 3, offset: 86293},
						run: (*parser).callonTextExpr215,
						expr: &seqExpr{
							pos: position{line: 2748, col: 3, offset: 86293},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2748, col: 3, offset: 86293},
									val:        "strftime",
									ignoreCase: false,
									want:       "\"strftime\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2748, col: 14, offset: 86304},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2748, col: 22, offset: 86312},
									label: "val",
									expr: &ruleRefExpr{
										pos:  position{line: 2748, col: 26, offset: 86316},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2748, col: 36, offset: 86326},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2748, col: 42, offset: 86332},
									label: "format",
									expr: &ruleRefExpr{
										pos:  position{line: 2748, col: 49, offset: 86339},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2748, col: 60, offset: 86350},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2756, col: 3, offset: 86514},
						run: (*parser).callonTextExpr225,
						expr: &seqExpr{
							pos: position{line: 2756, col: 3, offset: 86514},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2756, col: 3, offset: 86514},
									val:        "strptime",
									ignoreCase: false,
									want:       "\"strptime\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2756, col: 14, offset: 86525},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2756, col: 22, offset: 86533},
									label: "val",
									expr: &ruleRefExpr{
										pos:  position{line: 2756, col: 26, offset: 86537},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2756, col: 36, offset: 86547},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2756, col: 42, offset: 86553},
									label: "format",
									expr: &ruleRefExpr{
										pos:  position{line: 2756, col: 49, offset: 86560},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2756, col: 60, offset: 86571},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedPathString",
			pos:  position{line: 2764, col: 1, offset: 86733},
			expr: &actionExpr{
				pos: position{line: 2764, col: 21, offset: 86753},
				run: (*parser).callonQuotedPathString1,
				expr: &labeledExpr{
					pos:   position{line: 2764, col: 21, offset: 86753},
					label: "str",
					expr: &ruleRefExpr{
						pos:  position{line: 2764, col: 25, offset: 86757},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "UnquotedPathValue",
			pos:  position{line: 2771, col: 1, offset: 86884},
			expr: &actionExpr{
				pos: position{line: 2771, col: 22, offset: 86905},
				run: (*parser).callonUnquotedPathValue1,
				expr: &labeledExpr{
					pos:   position{line: 2771, col: 22, offset: 86905},
					label: "str",
					expr: &ruleRefExpr{
						pos:  position{line: 2771, col: 26, offset: 86909},
						name: "UnquotedString",
					},
				},
			},
		},
		{
			name: "StrToRemoveExpr",
			pos:  position{line: 2778, col: 1, offset: 87037},
			expr: &actionExpr{
				pos: position{line: 2778, col: 20, offset: 87056},
				run: (*parser).callonStrToRemoveExpr1,
				expr: &seqExpr{
					pos: position{line: 2778, col: 20, offset: 87056},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2778, col: 20, offset: 87056},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 2778, col: 26, offset: 87062},
							label: "strToRemove",
							expr: &ruleRefExpr{
								pos:  position{line: 2778, col: 38, offset: 87074},
								name: "String",
							},
						},
					},
				},
			},
		},
		{
			name: "EvalFieldToRead",
			pos:  position{line: 2784, col: 1, offset: 87259},
			expr: &choiceExpr{
				pos: position{line: 2784, col: 20, offset: 87278},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2784, col: 20, offset: 87278},
						run: (*parser).callonEvalFieldToRead2,
						expr: &seqExpr{
							pos: position{line: 2784, col: 20, offset: 87278},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 2784, col: 20, offset: 87278},
									expr: &charClassMatcher{
										pos:        position{line: 2784, col: 20, offset: 87278},
										val:        "[a-zA-Z_]",
										chars:      []rune{'_'},
										ranges:     []rune{'a', 'z', 'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&notExpr{
									pos: position{line: 2784, col: 31, offset: 87289},
									expr: &litMatcher{
										pos:        position{line: 2784, col: 33, offset: 87291},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2787, col: 3, offset: 87333},
						run: (*parser).callonEvalFieldToRead8,
						expr: &seqExpr{
							pos: position{line: 2787, col: 3, offset: 87333},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2787, col: 3, offset: 87333},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&labeledExpr{
									pos:   position{line: 2787, col: 7, offset: 87337},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2787, col: 13, offset: 87343},
										name: "FieldName",
									},
								},
								&litMatcher{
									pos:        position{line: 2787, col: 23, offset: 87353},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "WhereBlock",
			pos:  position{line: 2792, col: 1, offset: 87421},
			expr: &actionExpr{
				pos: position{line: 2792, col: 15, offset: 87435},
				run: (*parser).callonWhereBlock1,
				expr: &seqExpr{
					pos: position{line: 2792, col: 15, offset: 87435},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2792, col: 15, offset: 87435},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 2792, col: 20, offset: 87440},
							name: "CMD_WHERE",
						},
						&labeledExpr{
							pos:   position{line: 2792, col: 30, offset: 87450},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 2792, col: 40, offset: 87460},
								name: "BoolExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExpr",
			pos:  position{line: 2804, col: 1, offset: 87753},
			expr: &actionExpr{
				pos: position{line: 2804, col: 13, offset: 87765},
				run: (*parser).callonBoolExpr1,
				expr: &labeledExpr{
					pos:   position{line: 2804, col: 13, offset: 87765},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 2804, col: 18, offset: 87770},
						name: "BoolExprLevel4",
					},
				},
			},
		},
		{
			name: "BoolExprLevel4",
			pos:  position{line: 2809, col: 1, offset: 87840},
			expr: &actionExpr{
				pos: position{line: 2809, col: 19, offset: 87858},
				run: (*parser).callonBoolExprLevel41,
				expr: &seqExpr{
					pos: position{line: 2809, col: 19, offset: 87858},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2809, col: 19, offset: 87858},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2809, col: 25, offset: 87864},
								name: "BoolExprLevel3",
							},
						},
						&labeledExpr{
							pos:   position{line: 2809, col: 40, offset: 87879},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2809, col: 45, offset: 87884},
								expr: &seqExpr{
									pos: position{line: 2809, col: 46, offset: 87885},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 2809, col: 46, offset: 87885},
											name: "OR",
										},
										&ruleRefExpr{
											pos:  position{line: 2809, col: 49, offset: 87888},
											name: "BoolExprLevel3",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel3",
			pos:  position{line: 2829, col: 1, offset: 88326},
			expr: &actionExpr{
				pos: position{line: 2829, col: 19, offset: 88344},
				run: (*parser).callonBoolExprLevel31,
				expr: &seqExpr{
					pos: position{line: 2829, col: 19, offset: 88344},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2829, col: 19, offset: 88344},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2829, col: 25, offset: 88350},
								name: "BoolExprLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 2829, col: 40, offset: 88365},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2829, col: 45, offset: 88370},
								expr: &seqExpr{
									pos: position{line: 2829, col: 46, offset: 88371},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 2829, col: 46, offset: 88371},
											name: "AND",
										},
										&ruleRefExpr{
											pos:  position{line: 2829, col: 50, offset: 88375},
											name: "BoolExprLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel2",
			pos:  position{line: 2849, col: 1, offset: 88814},
			expr: &choiceExpr{
				pos: position{line: 2849, col: 19, offset: 88832},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2849, col: 19, offset: 88832},
						run: (*parser).callonBoolExprLevel22,
						expr: &seqExpr{
							pos: position{line: 2849, col: 19, offset: 88832},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2849, col: 19, offset: 88832},
									name: "NOT",
								},
								&ruleRefExpr{
									pos:  position{line: 2849, col: 23, offset: 88836},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2849, col: 31, offset: 88844},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 2849, col: 37, offset: 88850},
										name: "BoolExprLevel1",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2849, col: 52, offset: 88865},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2859, col: 3, offset: 89068},
						run: (*parser).callonBoolExprLevel29,
						expr: &labeledExpr{
							pos:   position{line: 2859, col: 3, offset: 89068},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2859, col: 9, offset: 89074},
								name: "BoolExprLevel1",
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel1",
			pos:  position{line: 2864, col: 1, offset: 89145},
			expr: &choiceExpr{
				pos: position{line: 2864, col: 19, offset: 89163},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2864, col: 19, offset: 89163},
						run: (*parser).callonBoolExprLevel12,
						expr: &seqExpr{
							pos: position{line: 2864, col: 19, offset: 89163},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2864, col: 19, offset: 89163},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2864, col: 27, offset: 89171},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 2864, col: 33, offset: 89177},
										name: "BoolExprLevel4",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2864, col: 48, offset: 89192},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2867, col: 3, offset: 89228},
						run: (*parser).callonBoolExprLevel18,
						expr: &labeledExpr{
							pos:   position{line: 2867, col: 3, offset: 89228},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 2867, col: 10, offset: 89235},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 2867, col: 10, offset: 89235},
										name: "EvalComparisonExpr",
									},
									&ruleRefExpr{
										pos:  position{line: 2867, col: 31, offset: 89256},
										name: "BoolComparisonExpr",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EvalComparisonExpr",
			pos:  position{line: 2872, col: 1, offset: 89376},
			expr: &choiceExpr{
				pos: position{line: 2872, col: 23, offset: 89398},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2872, col: 23, offset: 89398},
						run: (*parser).callonEvalComparisonExpr2,
						expr: &seqExpr{
							pos: position{line: 2872, col: 24, offset: 89399},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2872, col: 24, offset: 89399},
									label: "op",
									expr: &choiceExpr{
										pos: position{line: 2872, col: 28, offset: 89403},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2872, col: 28, offset: 89403},
												val:        "isbool",
												ignoreCase: false,
												want:       "\"isbool\"",
											},
											&litMatcher{
												pos:        position{line: 2872, col: 39, offset: 89414},
												val:        "isint",
												ignoreCase: false,
												want:       "\"isint\"",
											},
											&litMatcher{
												pos:        position{line: 2872, col: 49, offset: 89424},
												val:        "isstr",
												ignoreCase: false,
												want:       "\"isstr\"",
											},
											&litMatcher{
												pos:        position{line: 2872, col: 59, offset: 89434},
												val:        "isnull",
												ignoreCase: false,
												want:       "\"isnull\"",
											},
											&litMatcher{
												pos:        position{line: 2872, col: 70, offset: 89445},
												val:        "isnotnull",
												ignoreCase: false,
												want:       "\"isnotnull\"",
											},
											&litMatcher{
												pos:        position{line: 2872, col: 84, offset: 89459},
												val:        "isnum",
												ignoreCase: false,
												want:       "\"isnum\"",
											},
											&litMatcher{
												pos:        position{line: 2872, col: 94, offset: 89469},
												val:        "searchmatch",
												ignoreCase: false,
												want:       "\"searchmatch\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2872, col: 109, offset: 89484},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2872, col: 117, offset: 89492},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 2872, col: 123, offset: 89498},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2872, col: 133, offset: 89508},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2902, col: 3, offset: 90379},
						run: (*parser).callonEvalComparisonExpr17,
						expr: &seqExpr{
							pos: position{line: 2902, col: 3, offset: 90379},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2902, col: 3, offset: 90379},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2902, col: 11, offset: 90387},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2902, col: 11, offset: 90387},
												val:        "like",
												ignoreCase: false,
												want:       "\"like\"",
											},
											&litMatcher{
												pos:        position{line: 2902, col: 20, offset: 90396},
												val:        "Like",
												ignoreCase: false,
												want:       "\"Like\"",
											},
											&litMatcher{
												pos:        position{line: 2902, col: 29, offset: 90405},
												val:        "match",
												ignoreCase: false,
												want:       "\"match\"",
											},
											&litMatcher{
												pos:        position{line: 2902, col: 39, offset: 90415},
												val:        "cidrmatch",
												ignoreCase: false,
												want:       "\"cidrmatch\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2902, col: 52, offset: 90428},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2902, col: 60, offset: 90436},
									label: "leftValue",
									expr: &ruleRefExpr{
										pos:  position{line: 2902, col: 70, offset: 90446},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2902, col: 80, offset: 90456},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2902, col: 86, offset: 90462},
									label: "rightValue",
									expr: &ruleRefExpr{
										pos:  position{line: 2902, col: 97, offset: 90473},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2902, col: 107, offset: 90483},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2915, col: 3, offset: 90853},
						run: (*parser).callonEvalComparisonExpr32,
						expr: &seqExpr{
							pos: position{line: 2915, col: 3, offset: 90853},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2915, col: 3, offset: 90853},
									label: "left",
									expr: &ruleRefExpr{
										pos:  position{line: 2915, col: 8, offset: 90858},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2915, col: 18, offset: 90868},
									name: "SPACE",
								},
								&litMatcher{
									pos:        position{line: 2915, col: 24, offset: 90874},
									val:        "in",
									ignoreCase: false,
									want:       "\"in\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2915, col: 29, offset: 90879},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2915, col: 37, offset: 90887},
									label: "valueToJudge",
									expr: &ruleRefExpr{
										pos:  position{line: 2915, col: 50, offset: 90900},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2915, col: 60, offset: 90910},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2915, col: 65, offset: 90915},
										expr: &seqExpr{
											pos: position{line: 2915, col: 66, offset: 90916},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2915, col: 66, offset: 90916},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2915, col: 72, offset: 90922},
													name: "ValueExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2915, col: 84, offset: 90934},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2934, col: 3, offset: 91485},
						run: (*parser).callonEvalComparisonExpr47,
						expr: &seqExpr{
							pos: position{line: 2934, col: 3, offset: 91485},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2934, col: 3, offset: 91485},
									val:        "in",
									ignoreCase: false,
									want:       "\"in\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2934, col: 8, offset: 91490},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2934, col: 16, offset: 91498},
									label: "valueToJudge",
									expr: &ruleRefExpr{
										pos:  position{line: 2934, col: 29, offset: 91511},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2934, col: 39, offset: 91521},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2934, col: 44, offset: 91526},
										expr: &seqExpr{
											pos: position{line: 2934, col: 45, offset: 91527},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2934, col: 45, offset: 91527},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2934, col: 51, offset: 91533},
													name: "ValueExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2934, col: 63, offset: 91545},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoolComparisonExpr",
			pos:  position{line: 2952, col: 1, offset: 91966},
			expr: &actionExpr{
				pos: position{line: 2952, col: 23, offset: 91988},
				run: (*parser).callonBoolComparisonExpr1,
				expr: &seqExpr{
					pos: position{line: 2952, col: 23, offset: 91988},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2952, col: 23, offset: 91988},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 2952, col: 28, offset: 91993},
								name: "ValueExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 2952, col: 38, offset: 92003},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 2952, col: 41, offset: 92006},
								name: "EqualityOrInequality",
							},
						},
						&labeledExpr{
							pos:   position{line: 2952, col: 62, offset: 92027},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 2952, col: 68, offset: 92033},
								name: "ValueExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "ValueExpr",
			pos:  position{line: 2970, col: 1, offset: 92627},
			expr: &choiceExpr{
				pos: position{line: 2970, col: 14, offset: 92640},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2970, col: 14, offset: 92640},
						run: (*parser).callonValueExpr2,
						expr: &labeledExpr{
							pos:   position{line: 2970, col: 14, offset: 92640},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 2970, col: 24, offset: 92650},
								name: "ConditionExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2979, col: 3, offset: 92840},
						run: (*parser).callonValueExpr5,
						expr: &seqExpr{
							pos: position{line: 2979, col: 3, offset: 92840},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2979, col: 3, offset: 92840},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2979, col: 12, offset: 92849},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 2979, col: 22, offset: 92859},
										name: "ConditionExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2979, col: 37, offset: 92874},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2988, col: 3, offset: 93058},
						run: (*parser).callonValueExpr11,
						expr: &labeledExpr{
							pos:   position{line: 2988, col: 3, offset: 93058},
							label: "numeric",
							expr: &ruleRefExpr{
								pos:  position{line: 2988, col: 11, offset: 93066},
								name: "NumericExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2997, col: 3, offset: 93246},
						run: (*parser).callonValueExpr14,
						expr: &labeledExpr{
							pos:   position{line: 2997, col: 3, offset: 93246},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 2997, col: 7, offset: 93250},
								name: "StringExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 3006, col: 3, offset: 93422},
						run: (*parser).callonValueExpr17,
						expr: &seqExpr{
							pos: position{line: 3006, col: 3, offset: 93422},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 3006, col: 3, offset: 93422},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3006, col: 12, offset: 93431},
									label: "str",
									expr: &ruleRefExpr{
										pos:  position{line: 3006, col: 16, offset: 93435},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3006, col: 28, offset: 93447},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3015, col: 3, offset: 93616},
						run: (*parser).callonValueExpr23,
						expr: &seqExpr{
							pos: position{line: 3015, col: 3, offset: 93616},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 3015, col: 3, offset: 93616},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3015, col: 11, offset: 93624},
									label: "boolean",
									expr: &ruleRefExpr{
										pos:  position{line: 3015, col: 19, offset: 93632},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3015, col: 28, offset: 93641},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3024, col: 3, offset: 93813},
						run: (*parser).callonValueExpr29,
						expr: &labeledExpr{
							pos:   position{line: 3024, col: 3, offset: 93813},
							label: "multiValueExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 3024, col: 18, offset: 93828},
								name: "MultiValueExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "StringExpr",
			pos:  position{line: 3034, col: 1, offset: 94025},
			expr: &choiceExpr{
				pos: position{line: 3034, col: 15, offset: 94039},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3034, col: 15, offset: 94039},
						run: (*parser).callonStringExpr2,
						expr: &seqExpr{
							pos: position{line: 3034, col: 15, offset: 94039},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 3034, col: 15, offset: 94039},
									label: "text",
									expr: &ruleRefExpr{
										pos:  position{line: 3034, col: 20, offset: 94044},
										name: "TextExpr",
									},
								},
								&notExpr{
									pos: position{line: 3034, col: 29, offset: 94053},
									expr: &ruleRefExpr{
										pos:  position{line: 3034, col: 31, offset: 94055},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3042, col: 3, offset: 94225},
						run: (*parser).callonStringExpr8,
						expr: &seqExpr{
							pos: position{line: 3042, col: 3, offset: 94225},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 3042, col: 3, offset: 94225},
									label: "str",
									expr: &ruleRefExpr{
										pos:  position{line: 3042, col: 7, offset: 94229},
										name: "QuotedString",
									},
								},
								&notExpr{
									pos: position{line: 3042, col: 20, offset: 94242},
									expr: &ruleRefExpr{
										pos:  position{line: 3042, col: 22, offset: 94244},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3050, col: 3, offset: 94409},
						run: (*parser).callonStringExpr14,
						expr: &seqExpr{
							pos: position{line: 3050, col: 3, offset: 94409},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 3050, col: 3, offset: 94409},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3050, col: 9, offset: 94415},
										name: "EvalFieldToRead",
									},
								},
								&notExpr{
									pos: position{line: 3050, col: 25, offset: 94431},
									expr: &choiceExpr{
										pos: position{line: 3050, col: 27, offset: 94433},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 3050, col: 27, offset: 94433},
												name: "OpPlus",
											},
											&ruleRefExpr{
												pos:  position{line: 3050, col: 36, offset: 94442},
												name: "OpMinus",
											},
											&ruleRefExpr{
												pos:  position{line: 3050, col: 46, offset: 94452},
												name: "OpMul",
											},
											&ruleRefExpr{
												pos:  position{line: 3050, col: 54, offset: 94460},
												name: "OpDiv",
											},
											&ruleRefExpr{
												pos:  position{line: 3050, col: 62, offset: 94468},
												name: "OpMod",
											},
											&ruleRefExpr{
												pos:  position{line: 3050, col: 70, offset: 94476},
												name: "EVAL_CONCAT",
											},
											&litMatcher{
												pos:        position{line: 3050, col: 84, offset: 94490},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3058, col: 3, offset: 94640},
						run: (*parser).callonStringExpr27,
						expr: &labeledExpr{
							pos:   position{line: 3058, col: 3, offset: 94640},
							label: "concat",
							expr: &ruleRefExpr{
								pos:  position{line: 3058, col: 10, offset: 94647},
								name: "ConcatExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "ConcatExpr",
			pos:  position{line: 3068, col: 1, offset: 94853},
			expr: &actionExpr{
				pos: position{line: 3068, col: 15, offset: 94867},
				run: (*parser).callonConcatExpr1,
				expr: &seqExpr{
					pos: position{line: 3068, col: 15, offset: 94867},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3068, col: 15, offset: 94867},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 3068, col: 21, offset: 94873},
								name: "ConcatAtom",
							},
						},
						&labeledExpr{
							pos:   position{line: 3068, col: 32, offset: 94884},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3068, col: 37, offset: 94889},
								expr: &seqExpr{
									pos: position{line: 3068, col: 38, offset: 94890},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 3068, col: 38, offset: 94890},
											name: "EVAL_CONCAT",
										},
										&ruleRefExpr{
											pos:  position{line: 3068, col: 50, offset: 94902},
											name: "ConcatAtom",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 3068, col: 63, offset: 94915},
							expr: &choiceExpr{
								pos: position{line: 3068, col: 65, offset: 94917},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 3068, col: 65, offset: 94917},
										name: "OpPlus",
									},
									&ruleRefExpr{
										pos:  position{line: 3068, col: 74, offset: 94926},
										name: "OpMinus",
									},
									&ruleRefExpr{
										pos:  position{line: 3068, col: 84, offset: 94936},
										name: "OpMul",
									},
									&ruleRefExpr{
										pos:  position{line: 3068, col: 92, offset: 94944},
										name: "OpDiv",
									},
									&litMatcher{
										pos:        position{line: 3068, col: 100, offset: 94952},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcatAtom",
			pos:  position{line: 3086, col: 1, offset: 95358},
			expr: &choiceExpr{
				pos: position{line: 3086, col: 15, offset: 95372},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3086, col: 15, offset: 95372},
						run: (*parser).callonConcatAtom2,
						expr: &labeledExpr{
							pos:   position{line: 3086, col: 15, offset: 95372},
							label: "text",
							expr: &ruleRefExpr{
								pos:  position{line: 3086, col: 20, offset: 95377},
								name: "TextExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 3095, col: 3, offset: 95541},
						run: (*parser).callonConcatAtom5,
						expr: &labeledExpr{
							pos:   position{line: 3095, col: 3, offset: 95541},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 3095, col: 7, offset: 95545},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 3103, col: 3, offset: 95684},
						run: (*parser).callonConcatAtom8,
						expr: &labeledExpr{
							pos:   position{line: 3103, col: 3, offset: 95684},
							label: "number",
							expr: &ruleRefExpr{
								pos:  position{line: 3103, col: 10, offset: 95691},
								name: "NumberAsString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 3111, col: 3, offset: 95830},
						run: (*parser).callonConcatAtom11,
						expr: &labeledExpr{
							pos:   position{line: 3111, col: 3, offset: 95830},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 3111, col: 9, offset: 95836},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExpr",
			pos:  position{line: 3121, col: 1, offset: 96005},
			expr: &actionExpr{
				pos: position{line: 3121, col: 16, offset: 96020},
				run: (*parser).callonNumericExpr1,
				expr: &seqExpr{
					pos: position{line: 3121, col: 16, offset: 96020},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3121, col: 16, offset: 96020},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 3121, col: 21, offset: 96025},
								name: "NumericExprLevel3",
							},
						},
						&notExpr{
							pos: position{line: 3121, col: 39, offset: 96043},
							expr: &choiceExpr{
								pos: position{line: 3121, col: 41, offset: 96045},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 3121, col: 41, offset: 96045},
										name: "EVAL_CONCAT",
									},
									&litMatcher{
										pos:        position{line: 3121, col: 55, offset: 96059},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel3",
			pos:  position{line: 3126, col: 1, offset: 96124},
			expr: &actionExpr{
				pos: position{line: 3126, col: 22, offset: 96145},
				run: (*parser).callonNumericExprLevel31,
				expr: &seqExpr{
					pos: position{line: 3126, col: 22, offset: 96145},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3126, col: 22, offset: 96145},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 3126, col: 28, offset: 96151},
								name: "NumericExprLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 3126, col: 46, offset: 96169},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3126, col: 51, offset: 96174},
								expr: &seqExpr{
									pos: position{line: 3126, col: 52, offset: 96175},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 3126, col: 53, offset: 96176},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 3126, col: 53, offset: 96176},
													name: "OpPlus",
												},
												&ruleRefExpr{
													pos:  position{line: 3126, col: 62, offset: 96185},
													name: "OpMinus",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 3126, col: 71, offset: 96194},
											name: "NumericExprLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel2",
			pos:  position{line: 3147, col: 1, offset: 96695},
			expr: &actionExpr{
				pos: position{line: 3147, col: 22, offset: 96716},
				run: (*parser).callonNumericExprLevel21,
				expr: &seqExpr{
					pos: position{line: 3147, col: 22, offset: 96716},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3147, col: 22, offset: 96716},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 3147, col: 28, offset: 96722},
								name: "NumericExprLevel1",
							},
						},
						&labeledExpr{
							pos:   position{line: 3147, col: 46, offset: 96740},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3147, col: 51, offset: 96745},
								expr: &seqExpr{
									pos: position{line: 3147, col: 52, offset: 96746},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 3147, col: 53, offset: 96747},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 3147, col: 53, offset: 96747},
													name: "OpMul",
												},
												&ruleRefExpr{
													pos:  position{line: 3147, col: 61, offset: 96755},
													name: "OpDiv",
												},
												&ruleRefExpr{
													pos:  position{line: 3147, col: 69, offset: 96763},
													name: "OpMod",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 3147, col: 76, offset: 96770},
											name: "NumericExprLevel1",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NumericParamExpr",
			pos:  position{line: 3167, col: 1, offset: 97239},
			expr: &actionExpr{
				pos: position{line: 3167, col: 21, offset: 97259},
				run: (*parser).callonNumericParamExpr1,
				expr: &seqExpr{
					pos: position{line: 3167, col: 21, offset: 97259},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3167, col: 21, offset: 97259},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 3167, col: 27, offset: 97265},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 3167, col: 32, offset: 97270},
								name: "NumericExprLevel3",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel1",
			pos:  position{line: 3177, col: 1, offset: 97514},
			expr: &choiceExpr{
				pos: position{line: 3177, col: 22, offset: 97535},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3177, col: 22, offset: 97535},
						run: (*parser).callonNumericExprLevel12,
						expr: &seqExpr{
							pos: position{line: 3177, col: 22, offset: 97535},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 3177, col: 22, offset: 97535},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3177, col: 30, offset: 97543},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 3177, col: 35, offset: 97548},
										name: "NumericExprLevel3",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3177, col: 53, offset: 97566},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3180, col: 3, offset: 97601},
						run: (*parser).callonNumericExprLevel18,
						expr: &labeledExpr{
							pos:   position{line: 3180, col: 3, offset: 97601},
							label: "numericEvalExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 3180, col: 20, offset: 97618},
								name: "NumericEvalExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 3183, col: 3, offset: 97672},
						run: (*parser).callonNumericExprLevel111,
						expr: &labeledExpr{
							pos:   position{line: 3183, col: 3, offset: 97672},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 3183, col: 9, offset: 97678},
								name: "EvalFieldToRead",
							},
						},
					},
					&actionExpr{
						pos: position{line: 3193, col: 3, offset: 97897},
						run: (*parser).callonNumericExprLevel114,
						expr: &labeledExpr{
							pos:   position{line: 3193, col: 3, offset: 97897},
							label: "number",
							expr: &ruleRefExpr{
								pos:  position{line: 3193, col: 10, offset: 97904},
								name: "NumberAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericEvalExpr",
			pos:  position{line: 3206, col: 1, offset: 98282},
			expr: &choiceExpr{
				pos: position{line: 3206, col: 20, offset: 98301},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3206, col: 20, offset: 98301},
						run: (*parser).callonNumericEvalExpr2,
						expr: &seqExpr{
							pos: position{line: 3206, col: 21, offset: 98302},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 3206, col: 21, offset: 98302},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 3206, col: 29, offset: 98310},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 3206, col: 29, offset: 98310},
												val:        "abs",
												ignoreCase: false,
												want:       "\"abs\"",
											},
											&litMatcher{
												pos:        position{line: 3206, col: 37, offset: 98318},
												val:        "ceil",
												ignoreCase: false,
												want:       "\"ceil\"",
											},
											&litMatcher{
												pos:        position{line: 3206, col: 46, offset: 98327},
												val:        "ceiling",
												ignoreCase: false,
												want:       "\"ceiling\"",
											},
											&litMatcher{
												pos:        position{line: 3206, col: 58, offset: 98339},
												val:        "sqrt",
												ignoreCase: false,
												want:       "\"sqrt\"",
											},
											&litMatcher{
												pos:        position{line: 3206, col: 67, offset: 98348},
												val:        "exact",
												ignoreCase: false,
												want:       "\"exact\"",
											},
											&litMatcher{
												pos:        position{line: 3206, col: 77, offset: 98358},
												val:        "exp",
												ignoreCase: false,
												want:       "\"exp\"",
											},
											&litMatcher{
												pos:        position{line: 3206, col: 85, offset: 98366},
												val:        "floor",
												ignoreCase: false,
												want:       "\"floor\"",
											},
											&litMatcher{
												pos:        position{line: 3206, col: 95, offset: 98376},
												val:        "ln",
												ignoreCase: false,
												want:       "\"ln\"",
											},
											&litMatcher{
												pos:        position{line: 3206, col: 102, offset: 98383},
												val:        "sigfig",
												ignoreCase: false,
												want:       "\"sigfig\"",
											},
											&litMatcher{
												pos:        position{line: 3206, col: 113, offset: 98394},
												val:        "acosh",
												ignoreCase: false,
												want:       "\"acosh\"",
											},
											&litMatcher{
												pos:        position{line: 3206, col: 123, offset: 98404},
												val:        "acos",
												ignoreCase: false,
												want:       "\"acos\"",
											},
											&litMatcher{
												pos:        position{line: 3206, col: 132, offset: 98413},
												val:        "asinh",
												ignoreCase: false,
												want:       "\"asinh\"",
											},
											&litMatcher{
												pos:        position{line: 3206, col: 142, offset: 98423},
												val:        "asin",
												ignoreCase: false,
												want:       "\"asin\"",
											},
											&litMatcher{
												pos:        position{line: 3206, col: 151, offset: 98432},
												val:        "atanh",
												ignoreCase: false,
												want:       "\"atanh\"",
											},
											&litMatcher{
												pos:        position{line: 3206, col: 161, offset: 98442},
												val:        "atan",
												ignoreCase: false,
												want:       "\"atan\"",
											},
											&litMatcher{
												pos:        position{line: 3206, col: 170, offset: 98451},
												val:        "cosh",
												ignoreCase: false,
												want:       "\"cosh\"",
											},
											&litMatcher{
												pos:        position{line: 3206, col: 179, offset: 98460},
												val:        "cos",
												ignoreCase: false,
												want:       "\"cos\"",
											},
											&litMatcher{
												pos:        position{line: 3206, col: 187, offset: 98468},
												val:        "sinh",
												ignoreCase: false,
												want:       "\"sinh\"",
											},
											&litMatcher{
												pos:        position{line: 3206, col: 196, offset: 98477},
												val:        "sin",
												ignoreCase: false,
												want:       "\"sin\"",
											},
											&litMatcher{
												pos:        position{line: 3206, col: 204, offset: 98485},
												val:        "tanh",
												ignoreCase: false,
												want:       "\"tanh\"",
											},
											&litMatcher{
												pos:        position{line: 3206, col: 213, offset: 98494},
												val:        "tan",
												ignoreCase: false,
												want:       "\"tan\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3206, col: 220, offset: 98501},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3206, col: 228, offset: 98509},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 3206, col: 234, offset: 98515},
										name: "NumericExprLevel3",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3206, col: 253, offset: 98534},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3226, col: 3, offset: 99046},
						run: (*parser).callonNumericEvalExpr31,
						expr: &seqExpr{
							pos: position{line: 3226, col: 3, offset: 99046},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 3226, col: 3, offset: 99046},
									label: "roundExpr",
									expr: &litMatcher{
										pos:        position{line: 3226, col: 13, offset: 99056},
										val:        "round",
										ignoreCase: false,
										want:       "\"round\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3226, col: 21, offset: 99064},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3226, col: 29, offset: 99072},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 3226, col: 35, offset: 99078},
										name: "NumericExprLevel3",
									},
								},
								&labeledExpr{
									pos:   position{line: 3226, col: 54, offset: 99097},
									label: "roundPrecision",
									expr: &zeroOrOneExpr{
										pos: position{line: 3226, col: 69, offset: 99112},
										expr: &ruleRefExpr{
											pos:  position{line: 3226, col: 70, offset: 99113},
											name: "NumericParamExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3226, col: 89, offset: 99132},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3247, col: 3, offset: 99750},
						run: (*parser).callonNumericEvalExpr42,
						expr: &seqExpr{
							pos: position{line: 3247, col: 4, offset: 99751},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 3247, col: 4, offset: 99751},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 3247, col: 12, offset: 99759},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 3247, col: 12, offset: 99759},
												val:        "now",
												ignoreCase: false,
												want:       "\"now\"",
											},
											&litMatcher{
												pos:        position{line: 3247, col: 20, offset: 99767},
												val:        "pi",
												ignoreCase: false,
												want:       "\"pi\"",
											},
											&litMatcher{
												pos:        position{line: 3247, col: 27, offset: 99774},
												val:        "random",
												ignoreCase: false,
												want:       "\"random\"",
											},
											&litMatcher{
												pos:        position{line: 3247, col: 38, offset: 99785},
												val:        "time",
												ignoreCase: false,
												want:       "\"time\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3247, col: 46, offset: 99793},
									name: "L_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3247, col: 54, offset: 99801},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3260, col: 3, offset: 100087},
						run: (*parser).callonNumericEvalExpr52,
						expr: &seqExpr{
							pos: position{line: 3260, col: 3, offset: 100087},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3260, col: 3, offset: 100087},
									val:        "tonumber",
									ignoreCase: false,
									want:       "\"tonumber\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3260, col: 14, offset: 100098},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3260, col: 22, offset: 100106},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3260, col: 33, offset: 100117},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 3260, col: 44, offset: 100128},
									label: "baseExpr",
									expr: &zeroOrOneExpr{
										pos: position{line: 3260, col: 53, offset: 100137},
										expr: &seqExpr{
											pos: position{line: 3260, col: 54, offset: 100138},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 3260, col: 54, offset: 100138},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 3260, col: 60, offset: 100144},
													name: "NumericExprLevel3",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3260, col: 80, offset: 100164},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3288, col: 3, offset: 101006},
						run: (*parser).callonNumericEvalExpr64,
						expr: &seqExpr{
							pos: position{line: 3288, col: 3, offset: 101006},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 3288, col: 3, offset: 101006},
									label: "lenExpr",
									expr: &litMatcher{
										pos:        position{line: 3288, col: 12, offset: 101015},
										val:        "len",
										ignoreCase: false,
										want:       "\"len\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3288, col: 18, offset: 101021},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3288, col: 26, offset: 101029},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 3288, col: 31, offset: 101034},
										name: "LenExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3288, col: 39, offset: 101042},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3291, col: 3, offset: 101077},
						run: (*parser).callonNumericEvalExpr72,
						expr: &seqExpr{
							pos: position{line: 3291, col: 4, offset: 101078},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 3291, col: 4, offset: 101078},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 3291, col: 12, offset: 101086},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 3291, col: 12, offset: 101086},
												val:        "pow",
												ignoreCase: false,
												want:       "\"pow\"",
											},
											&litMatcher{
												pos:        position{line: 3291, col: 20, offset: 101094},
												val:        "atan2",
												ignoreCase: false,
												want:       "\"atan2\"",
											},
											&litMatcher{
												pos:        position{line: 3291, col: 30, offset: 101104},
												val:        "hypot",
												ignoreCase: false,
												want:       "\"hypot\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3291, col: 39, offset: 101113},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3291, col: 47, offset: 101121},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 3291, col: 53, offset: 101127},
										name: "NumericExprLevel3",
									},
								},
								&labeledExpr{
									pos:   position{line: 3291, col: 72, offset: 101146},
									label: "param",
									expr: &ruleRefExpr{
										pos:  position{line: 3291, col: 79, offset: 101153},
										name: "NumericParamExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3291, col: 97, offset: 101171},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3321, col: 3, offset: 102010},
						run: (*parser).callonNumericEvalExpr85,
						expr: &seqExpr{
							pos: position{line: 3321, col: 4, offset: 102011},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 3321, col: 4, offset: 102011},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 3321, col: 11, offset: 102018},
										val:        "log",
										ignoreCase: false,
										want:       "\"log\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3321, col: 17, offset: 102024},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3321, col: 25, offset: 102032},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 3321, col: 31, offset: 102038},
										name: "NumericExprLevel3",
									},
								},
								&labeledExpr{
									pos:   position{line: 3321, col: 50, offset: 102057},
									label: "param",
									expr: &zeroOrOneExpr{
										pos: position{line: 3321, col: 56, offset: 102063},
										expr: &ruleRefExpr{
											pos:  position{line: 3321, col: 57, offset: 102064},
											name: "NumericParamExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3321, col: 76, offset: 102083},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3350, col: 3, offset: 102856},
						run: (*parser).callonNumericEvalExpr96,
						expr: &seqExpr{
							pos: position{line: 3350, col: 3, offset: 102856},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 3350, col: 3, offset: 102856},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 3350, col: 11, offset: 102864},
										val:        "relative_time",
										ignoreCase: false,
										want:       "\"relative_time\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3350, col: 28, offset: 102881},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3350, col: 36, offset: 102889},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 3350, col: 42, offset: 102895},
										name: "NumericExprLevel3",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3350, col: 61, offset: 102914},
									name: "COMMA",
								},
								&ruleRefExpr{
									pos:  position{line: 3350, col: 67, offset: 102920},
									name: "QUOTE",
								},
								&labeledExpr{
									pos:   position{line: 3350, col: 73, offset: 102926},
									label: "specifier",
									expr: &ruleRefExpr{
										pos:  position{line: 3350, col: 84, offset: 102937},
										name: "RelativeTimeCommandTimestampFormat",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3350, col: 120, offset: 102973},
									name: "QUOTE",
								},
								&ruleRefExpr{
									pos:  position{line: 3350, col: 126, offset: 102979},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LenExpr",
			pos:  position{line: 3367, col: 1, offset: 103508},
			expr: &choiceExpr{
				pos: position{line: 3367, col: 12, offset: 103519},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3367, col: 12, offset: 103519},
						run: (*parser).callonLenExpr2,
						expr: &seqExpr{
							pos: position{line: 3367, col: 12, offset: 103519},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 3367, col: 12, offset: 103519},
									label: "str",
									expr: &ruleRefExpr{
										pos:  position{line: 3367, col: 16, offset: 103523},
										name: "QuotedString",
									},
								},
								&notExpr{
									pos: position{line: 3367, col: 29, offset: 103536},
									expr: &ruleRefExpr{
										pos:  position{line: 3367, col: 31, offset: 103538},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3383, col: 3, offset: 103899},
						run: (*parser).callonLenExpr8,
						expr: &seqExpr{
							pos: position{line: 3383, col: 3, offset: 103899},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 3383, col: 3, offset: 103899},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3383, col: 9, offset: 103905},
										name: "EvalFieldToRead",
									},
								},
								&notExpr{
									pos: position{line: 3383, col: 25, offset: 103921},
									expr: &choiceExpr{
										pos: position{line: 3383, col: 27, offset: 103923},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 3383, col: 27, offset: 103923},
												name: "OpPlus",
											},
											&ruleRefExpr{
												pos:  position{line: 3383, col: 36, offset: 103932},
												name: "OpMinus",
											},
											&ruleRefExpr{
												pos:  position{line: 3383, col: 46, offset: 103942},
												name: "OpMul",
											},
											&ruleRefExpr{
												pos:  position{line: 3383, col: 54, offset: 103950},
												name: "OpDiv",
											},
											&ruleRefExpr{
												pos:  position{line: 3383, col: 62, offset: 103958},
												name: "OpMod",
											},
											&ruleRefExpr{
												pos:  position{line: 3383, col: 70, offset: 103966},
												name: "EVAL_CONCAT",
											},
											&litMatcher{
												pos:        position{line: 3383, col: 84, offset: 103980},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOptionNull",
			pos:  position{line: 3400, col: 1, offset: 104331},
			expr: &actionExpr{
				pos: position{line: 3400, col: 19, offset: 104349},
				run: (*parser).callonHeadOptionNull1,
				expr: &seqExpr{
					pos: position{line: 3400, col: 19, offset: 104349},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3400, col: 19, offset: 104349},
							val:        "null",
							ignoreCase: false,
							want:       "\"null\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3400, col: 26, offset: 104356},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3400, col: 32, offset: 104362},
							label: "boolVal",
							expr: &ruleRefExpr{
								pos:  position{line: 3400, col: 40, offset: 104370},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOptionKeeplast",
			pos:  position{line: 3411, col: 1, offset: 104559},
			expr: &actionExpr{
				pos: position{line: 3411, col: 23, offset: 104581},
				run: (*parser).callonHeadOptionKeeplast1,
				expr: &seqExpr{
					pos: position{line: 3411, col: 23, offset: 104581},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3411, col: 23, offset: 104581},
							val:        "keeplast",
							ignoreCase: false,
							want:       "\"keeplast\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3411, col: 34, offset: 104592},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3411, col: 40, offset: 104598},
							label: "boolVal",
							expr: &ruleRefExpr{
								pos:  position{line: 3411, col: 48, offset: 104606},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOptionLimit",
			pos:  position{line: 3422, col: 1, offset: 104803},
			expr: &actionExpr{
				pos: position{line: 3422, col: 20, offset: 104822},
				run: (*parser).callonHeadOptionLimit1,
				expr: &seqExpr{
					pos: position{line: 3422, col: 20, offset: 104822},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3422, col: 20, offset: 104822},
							val:        "limit",
							ignoreCase: false,
							want:       "\"limit\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3422, col: 28, offset: 104830},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3422, col: 34, offset: 104836},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 3422, col: 43, offset: 104845},
								name: "IntegerAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOptionExpr",
			pos:  position{line: 3437, col: 1, offset: 105207},
			expr: &actionExpr{
				pos: position{line: 3437, col: 19, offset: 105225},
				run: (*parser).callonHeadOptionExpr1,
				expr: &labeledExpr{
					pos:   position{line: 3437, col: 19, offset: 105225},
					label: "boolExpr",
					expr: &ruleRefExpr{
						pos:  position{line: 3437, col: 28, offset: 105234},
						name: "BoolExpr",
					},
				},
			},
		},
		{
			name: "HeadOption",
			pos:  position{line: 3448, col: 1, offset: 105446},
			expr: &actionExpr{
				pos: position{line: 3448, col: 15, offset: 105460},
				run: (*parser).callonHeadOption1,
				expr: &labeledExpr{
					pos:   position{line: 3448, col: 15, offset: 105460},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 3448, col: 23, offset: 105468},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3448, col: 23, offset: 105468},
								name: "HeadOptionKeeplast",
							},
							&ruleRefExpr{
								pos:  position{line: 3448, col: 44, offset: 105489},
								name: "HeadOptionNull",
							},
							&ruleRefExpr{
								pos:  position{line: 3448, col: 61, offset: 105506},
								name: "HeadOptionLimit",
							},
							&ruleRefExpr{
								pos:  position{line: 3448, col: 79, offset: 105524},
								name: "HeadOptionExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOptionList",
			pos:  position{line: 3452, col: 1, offset: 105568},
			expr: &actionExpr{
				pos: position{line: 3452, col: 19, offset: 105586},
				run: (*parser).callonHeadOptionList1,
				expr: &seqExpr{
					pos: position{line: 3452, col: 19, offset: 105586},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3452, col: 19, offset: 105586},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 3452, col: 26, offset: 105593},
								name: "HeadOption",
							},
						},
						&labeledExpr{
							pos:   position{line: 3452, col: 37, offset: 105604},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3452, col: 43, offset: 105610},
								expr: &seqExpr{
									pos: position{line: 3452, col: 44, offset: 105611},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 3452, col: 44, offset: 105611},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 3452, col: 50, offset: 105617},
											name: "HeadOption",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HeadBlock",
			pos:  position{line: 3514, col: 1, offset: 107664},
			expr: &choiceExpr{
				pos: position{line: 3514, col: 14, offset: 107677},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3514, col: 14, offset: 107677},
						run: (*parser).callonHeadBlock2,
						expr: &seqExpr{
							pos: position{line: 3514, col: 14, offset: 107677},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 3514, col: 14, offset: 107677},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 3514, col: 19, offset: 107682},
									name: "CMD_HEAD",
								},
								&labeledExpr{
									pos:   position{line: 3514, col: 28, offset: 107691},
									label: "headExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3514, col: 37, offset: 107700},
										name: "HeadOptionList",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3524, col: 3, offset: 107971},
						run: (*parser).callonHeadBlock8,
						expr: &seqExpr{
							pos: position{line: 3524, col: 3, offset: 107971},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 3524, col: 3, offset: 107971},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 3524, col: 8, offset: 107976},
									name: "CMD_HEAD",
								},
								&labeledExpr{
									pos:   position{line: 3524, col: 17, offset: 107985},
									label: "intAsStr",
									expr: &ruleRefExpr{
										pos:  position{line: 3524, col: 26, offset: 107994},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3541, col: 3, offset: 108473},
						run: (*parser).callonHeadBlock14,
						expr: &seqExpr{
							pos: position{line: 3541, col: 3, offset: 108473},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 3541, col: 3, offset: 108473},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 3541, col: 8, offset: 108478},
									name: "CMD_HEAD_NO_SPACE",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TailBlock",
			pos:  position{line: 3555, col: 1, offset: 108909},
			expr: &choiceExpr{
				pos: position{line: 3555, col: 14, offset: 108922},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3555, col: 14, offset: 108922},
						run: (*parser).callonTailBlock2,
						expr: &seqExpr{
							pos: position{line: 3555, col: 14, offset: 108922},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 3555, col: 14, offset: 108922},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 3555, col: 19, offset: 108927},
									name: "CMD_TAIL",
								},
								&labeledExpr{
									pos:   position{line: 3555, col: 28, offset: 108936},
									label: "intAsStr",
									expr: &ruleRefExpr{
										pos:  position{line: 3555, col: 37, offset: 108945},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3575, col: 3, offset: 109494},
						run: (*parser).callonTailBlock8,
						expr: &seqExpr{
							pos: position{line: 3575, col: 3, offset: 109494},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 3575, col: 3, offset: 109494},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 3575, col: 8, offset: 109499},
									name: "CMD_TAIL_NO_SPACE",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggregationList",
			pos:  position{line: 3595, col: 1, offset: 110092},
			expr: &actionExpr{
				pos: position{line: 3595, col: 20, offset: 110111},
				run: (*parser).callonAggregationList1,
				expr: &seqExpr{
					pos: position{line: 3595, col: 20, offset: 110111},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3595, col: 20, offset: 110111},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 3595, col: 26, offset: 110117},
								name: "Aggregator",
							},
						},
						&labeledExpr{
							pos:   position{line: 3595, col: 37, offset: 110128},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3595, col: 42, offset: 110133},
								expr: &seqExpr{
									pos: position{line: 3595, col: 43, offset: 110134},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 3595, col: 44, offset: 110135},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 3595, col: 44, offset: 110135},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 3595, col: 52, offset: 110143},
													name: "SPACE",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 3595, col: 59, offset: 110150},
											name: "Aggregator",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Aggregator",
			pos:  position{line: 3612, col: 1, offset: 110653},
			expr: &actionExpr{
				pos: position{line: 3612, col: 15, offset: 110667},
				run: (*parser).callonAggregator1,
				expr: &seqExpr{
					pos: position{line: 3612, col: 15, offset: 110667},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3612, col: 15, offset: 110667},
							label: "aggFunc",
							expr: &ruleRefExpr{
								pos:  position{line: 3612, col: 23, offset: 110675},
								name: "AggFunction",
							},
						},
						&labeledExpr{
							pos:   position{line: 3612, col: 35, offset: 110687},
							label: "asField",
							expr: &zeroOrOneExpr{
								pos: position{line: 3612, col: 43, offset: 110695},
								expr: &ruleRefExpr{
									pos:  position{line: 3612, col: 43, offset: 110695},
									name: "AsField",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggFunction",
			pos:  position{line: 3628, col: 1, offset: 111536},
			expr: &actionExpr{
				pos: position{line: 3628, col: 16, offset: 111551},
				run: (*parser).callonAggFunction1,
				expr: &labeledExpr{
					pos:   position{line: 3628, col: 16, offset: 111551},
					label: "agg",
					expr: &choiceExpr{
						pos: position{line: 3628, col: 21, offset: 111556},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3628, col: 21, offset: 111556},
								name: "AggCount",
							},
							&ruleRefExpr{
								pos:  position{line: 3628, col: 32, offset: 111567},
								name: "AggDistinctCount",
							},
							&ruleRefExpr{
								pos:  position{line: 3628, col: 51, offset: 111586},
								name: "AggAvg",
							},
							&ruleRefExpr{
								pos:  position{line: 3628, col: 60, offset: 111595},
								name: "AggMin",
							},
							&ruleRefExpr{
								pos:  position{line: 3628, col: 69, offset: 111604},
								name: "AggMax",
							},
							&ruleRefExpr{
								pos:  position{line: 3628, col: 78, offset: 111613},
								name: "AggRange",
							},
							&ruleRefExpr{
								pos:  position{line: 3628, col: 89, offset: 111624},
								name: "AggSum",
							},
							&ruleRefExpr{
								pos:  position{line: 3628, col: 98, offset: 111633},
								name: "AggValues",
							},
							&ruleRefExpr{
								pos:  position{line: 3628, col: 110, offset: 111645},
								name: "AggEstdc",
							},
							&ruleRefExpr{
								pos:  position{line: 3628, col: 121, offset: 111656},
								name: "AggEstdcError",
							},
							&ruleRefExpr{
								pos:  position{line: 3628, col: 137, offset: 111672},
								name: "AggExactPerc",
							},
							&ruleRefExpr{
								pos:  position{line: 3628, col: 152, offset: 111687},
								name: "AggMedian",
							},
							&ruleRefExpr{
								pos:  position{line: 3628, col: 164, offset: 111699},
								name: "AggMode",
							},
							&ruleRefExpr{
								pos:  position{line: 3628, col: 174, offset: 111709},
								name: "AggPerc",
							},
							&ruleRefExpr{
								pos:  position{line: 3629, col: 1, offset: 111719},
								name: "AggStdev",
							},
							&ruleRefExpr{
								pos:  position{line: 3629, col: 12, offset: 111730},
								name: "AggStdevp",
							},
							&ruleRefExpr{
								pos:  position{line: 3629, col: 24, offset: 111742},
								name: "AggSumsq",
							},
							&ruleRefExpr{
								pos:  position{line: 3629, col: 35, offset: 111753},
								name: "AggUpperPerc",
							},
							&ruleRefExpr{
								pos:  position{line: 3629, col: 50, offset: 111768},
								name: "AggVar",
							},
							&ruleRefExpr{
								pos:  position{line: 3629, col: 59, offset: 111777},
								name: "AggVarp",
							},
							&ruleRefExpr{
								pos:  position{line: 3629, col: 69, offset: 111787},
								name: "AggFirst",
							},
							&ruleRefExpr{
								pos:  position{line: 3629, col: 80, offset: 111798},
								name: "AggLast",
							},
							&ruleRefExpr{
								pos:  position{line: 3629, col: 90, offset: 111808},
								name: "AggList",
							},
							&ruleRefExpr{
								pos:  position{line: 3629, col: 100, offset: 111818},
								name: "AggEarliest",
							},
							&ruleRefExpr{
								pos:  position{line: 3629, col: 114, offset: 111832},
								name: "AggEarliestTime",
							},
							&ruleRefExpr{
								pos:  position{line: 3629, col: 132, offset: 111850},
								name: "AggLatest",
							},
							&ruleRefExpr{
								pos:  position{line: 3629, col: 144, offset: 111862},
								name: "AggLatestTime",
							},
							&ruleRefExpr{
								pos:  position{line: 3629, col: 160, offset: 111878},
								name: "AggRate",
							},
						},
					},
				},
			},
		},
		{
			name: "AsField",
			pos:  position{line: 3633, col: 1, offset: 111912},
			expr: &actionExpr{
				pos: position{line: 3633, col: 12, offset: 111923},
				run: (*parser).callonAsField1,
				expr: &seqExpr{
					pos: position{line: 3633, col: 12, offset: 111923},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3633, col: 12, offset: 111923},
							name: "AS",
						},
						&labeledExpr{
							pos:   position{line: 3633, col: 15, offset: 111926},
							label: "field",
							expr: &choiceExpr{
								pos: position{line: 3633, col: 23, offset: 111934},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 3633, col: 23, offset: 111934},
										name: "FieldName",
									},
									&ruleRefExpr{
										pos:  position{line: 3633, col: 35, offset: 111946},
										name: "String",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggCount",
			pos:  position{line: 3647, col: 1, offset: 112275},
			expr: &choiceExpr{
				pos: position{line: 3647, col: 13, offset: 112287},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3647, col: 13, offset: 112287},
						run: (*parser).callonAggCount2,
						expr: &seqExpr{
							pos: position{line: 3647, col: 13, offset: 112287},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 3647, col: 14, offset: 112288},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 3647, col: 14, offset: 112288},
											val:        "count",
											ignoreCase: false,
											want:       "\"count\"",
										},
										&litMatcher{
											pos:        position{line: 3647, col: 24, offset: 112298},
											val:        "c",
											ignoreCase: false,
											want:       "\"c\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3647, col: 29, offset: 112303},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3647, col: 37, offset: 112311},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 3647, col: 44, offset: 112318},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3647, col: 54, offset: 112328},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3647, col: 64, offset: 112338},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3657, col: 3, offset: 112566},
						run: (*parser).callonAggCount12,
						expr: &seqExpr{
							pos: position{line: 3657, col: 3, offset: 112566},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 3657, col: 4, offset: 112567},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 3657, col: 4, offset: 112567},
											val:        "count",
											ignoreCase: false,
											want:       "\"count\"",
										},
										&litMatcher{
											pos:        position{line: 3657, col: 14, offset: 112577},
											val:        "c",
											ignoreCase: false,
											want:       "\"c\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3657, col: 19, offset: 112582},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3657, col: 27, offset: 112590},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3657, col: 33, offset: 112596},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3657, col: 43, offset: 112606},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3664, col: 5, offset: 112757},
						run: (*parser).callonAggCount21,
						expr: &choiceExpr{
							pos: position{line: 3664, col: 6, offset: 112758},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 3664, col: 6, offset: 112758},
									val:        "count",
									ignoreCase: false,
									want:       "\"count\"",
								},
								&litMatcher{
									pos:        position{line: 3664, col: 16, offset: 112768},
									val:        "c",
									ignoreCase: false,
									want:       "\"c\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggDistinctCount",
			pos:  position{line: 3673, col: 1, offset: 112904},
			expr: &choiceExpr{
				pos: position{line: 3673, col: 21, offset: 112924},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3673, col: 21, offset: 112924},
						run: (*parser).callonAggDistinctCount2,
						expr: &seqExpr{
							pos: position{line: 3673, col: 21, offset: 112924},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 3673, col: 22, offset: 112925},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 3673, col: 22, offset: 112925},
											val:        "distinct_count",
											ignoreCase: false,
											want:       "\"distinct_count\"",
										},
										&litMatcher{
											pos:        position{line: 3673, col: 41, offset: 112944},
											val:        "dc",
											ignoreCase: false,
											want:       "\"dc\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3673, col: 47, offset: 112950},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3673, col: 55, offset: 112958},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 3673, col: 62, offset: 112965},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3673, col: 72, offset: 112975},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3673, col: 82, offset: 112985},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3683, col: 3, offset: 113219},
						run: (*parser).callonAggDistinctCount12,
						expr: &seqExpr{
							pos: position{line: 3683, col: 3, offset: 113219},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 3683, col: 4, offset: 113220},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 3683, col: 4, offset: 113220},
											val:        "distinct_count",
											ignoreCase: false,
											want:       "\"distinct_count\"",
										},
										&litMatcher{
											pos:        position{line: 3683, col: 23, offset: 113239},
											val:        "dc",
											ignoreCase: false,
											want:       "\"dc\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3683, col: 29, offset: 113245},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3683, col: 37, offset: 113253},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3683, col: 43, offset: 113259},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3683, col: 53, offset: 113269},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAvg",
			pos:  position{line: 3692, col: 1, offset: 113425},
			expr: &choiceExpr{
				pos: position{line: 3692, col: 11, offset: 113435},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3692, col: 11, offset: 113435},
						run: (*parser).callonAggAvg2,
						expr: &seqExpr{
							pos: position{line: 3692, col: 11, offset: 113435},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3692, col: 11, offset: 113435},
									val:        "avg",
									ignoreCase: false,
									want:       "\"avg\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3692, col: 17, offset: 113441},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3692, col: 25, offset: 113449},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 3692, col: 32, offset: 113456},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3692, col: 42, offset: 113466},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3692, col: 52, offset: 113476},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3702, col: 3, offset: 113702},
						run: (*parser).callonAggAvg10,
						expr: &seqExpr{
							pos: position{line: 3702, col: 3, offset: 113702},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3702, col: 3, offset: 113702},
									val:        "avg",
									ignoreCase: false,
									want:       "\"avg\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3702, col: 9, offset: 113708},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3702, col: 17, offset: 113716},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3702, col: 23, offset: 113722},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3702, col: 33, offset: 113732},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMin",
			pos:  position{line: 3711, col: 1, offset: 113880},
			expr: &choiceExpr{
				pos: position{line: 3711, col: 11, offset: 113890},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3711, col: 11, offset: 113890},
						run: (*parser).callonAggMin2,
						expr: &seqExpr{
							pos: position{line: 3711, col: 11, offset: 113890},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3711, col: 11, offset: 113890},
									val:        "min",
									ignoreCase: false,
									want:       "\"min\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3711, col: 17, offset: 113896},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3711, col: 25, offset: 113904},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 3711, col: 32, offset: 113911},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3711, col: 42, offset: 113921},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3711, col: 52, offset: 113931},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3721, col: 3, offset: 114157},
						run: (*parser).callonAggMin10,
						expr: &seqExpr{
							pos: position{line: 3721, col: 3, offset: 114157},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3721, col: 3, offset: 114157},
									val:        "min",
									ignoreCase: false,
									want:       "\"min\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3721, col: 9, offset: 114163},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3721, col: 17, offset: 114171},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3721, col: 23, offset: 114177},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3721, col: 33, offset: 114187},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMax",
			pos:  position{line: 3730, col: 1, offset: 114335},
			expr: &choiceExpr{
				pos: position{line: 3730, col: 11, offset: 114345},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3730, col: 11, offset: 114345},
						run: (*parser).callonAggMax2,
						expr: &seqExpr{
							pos: position{line: 3730, col: 11, offset: 114345},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3730, col: 11, offset: 114345},
									val:        "max",
									ignoreCase: false,
									want:       "\"max\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3730, col: 17, offset: 114351},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3730, col: 25, offset: 114359},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 3730, col: 32, offset: 114366},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3730, col: 42, offset: 114376},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3730, col: 52, offset: 114386},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3740, col: 3, offset: 114612},
						run: (*parser).callonAggMax10,
						expr: &seqExpr{
							pos: position{line: 3740, col: 3, offset: 114612},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3740, col: 3, offset: 114612},
									val:        "max",
									ignoreCase: false,
									want:       "\"max\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3740, col: 9, offset: 114618},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3740, col: 17, offset: 114626},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3740, col: 23, offset: 114632},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3740, col: 33, offset: 114642},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggRange",
			pos:  position{line: 3749, col: 1, offset: 114790},
			expr: &choiceExpr{
				pos: position{line: 3749, col: 13, offset: 114802},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3749, col: 13, offset: 114802},
						run: (*parser).callonAggRange2,
						expr: &seqExpr{
							pos: position{line: 3749, col: 13, offset: 114802},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3749, col: 13, offset: 114802},
									val:        "range",
									ignoreCase: false,
									want:       "\"range\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3749, col: 21, offset: 114810},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3749, col: 29, offset: 114818},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 3749, col: 36, offset: 114825},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3749, col: 46, offset: 114835},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3749, col: 56, offset: 114845},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3759, col: 3, offset: 115073},
						run: (*parser).callonAggRange10,
						expr: &seqExpr{
							pos: position{line: 3759, col: 3, offset: 115073},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3759, col: 3, offset: 115073},
									val:        "range",
									ignoreCase: false,
									want:       "\"range\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3759, col: 11, offset: 115081},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3759, col: 19, offset: 115089},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3759, col: 25, offset: 115095},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3759, col: 35, offset: 115105},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggSum",
			pos:  position{line: 3768, col: 1, offset: 115255},
			expr: &choiceExpr{
				pos: position{line: 3768, col: 11, offset: 115265},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3768, col: 11, offset: 115265},
						run: (*parser).callonAggSum2,
						expr: &seqExpr{
							pos: position{line: 3768, col: 11, offset: 115265},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3768, col: 11, offset: 115265},
									val:        "sum",
									ignoreCase: false,
									want:       "\"sum\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3768, col: 17, offset: 115271},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3768, col: 25, offset: 115279},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 3768, col: 32, offset: 115286},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3768, col: 42, offset: 115296},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3768, col: 52, offset: 115306},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3778, col: 3, offset: 115532},
						run: (*parser).callonAggSum10,
						expr: &seqExpr{
							pos: position{line: 3778, col: 3, offset: 115532},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3778, col: 3, offset: 115532},
									val:        "sum",
									ignoreCase: false,
									want:       "\"sum\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3778, col: 9, offset: 115538},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3778, col: 17, offset: 115546},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3778, col: 23, offset: 115552},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3778, col: 33, offset: 115562},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggEstdc",
			pos:  position{line: 3788, col: 1, offset: 115750},
			expr: &choiceExpr{
				pos: position{line: 3788, col: 13, offset: 115762},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3788, col: 13, offset: 115762},
						run: (*parser).callonAggEstdc2,
						expr: &seqExpr{
							pos: position{line: 3788, col: 13, offset: 115762},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3788, col: 13, offset: 115762},
									val:        "estdc",
									ignoreCase: false,
									want:       "\"estdc\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3788, col: 21, offset: 115770},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3788, col: 29, offset: 115778},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3788, col: 36, offset: 115785},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3788, col: 44, offset: 115793},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3788, col: 63, offset: 115812},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3788, col: 82, offset: 115831},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3788, col: 90, offset: 115839},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3803, col: 3, offset: 116199},
						run: (*parser).callonAggEstdc12,
						expr: &seqExpr{
							pos: position{line: 3803, col: 3, offset: 116199},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3803, col: 3, offset: 116199},
									val:        "estdc",
									ignoreCase: false,
									want:       "\"estdc\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3803, col: 11, offset: 116207},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3803, col: 19, offset: 116215},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3803, col: 25, offset: 116221},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3803, col: 35, offset: 116231},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggEstdcError",
			pos:  position{line: 3813, col: 1, offset: 116421},
			expr: &choiceExpr{
				pos: position{line: 3813, col: 18, offset: 116438},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3813, col: 18, offset: 116438},
						run: (*parser).callonAggEstdcError2,
						expr: &seqExpr{
							pos: position{line: 3813, col: 18, offset: 116438},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3813, col: 18, offset: 116438},
									val:        "estdc_error",
									ignoreCase: false,
									want:       "\"estdc_error\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3813, col: 32, offset: 116452},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3813, col: 40, offset: 116460},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3813, col: 47, offset: 116467},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3813, col: 55, offset: 116475},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3813, col: 74, offset: 116494},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3813, col: 93, offset: 116513},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3813, col: 101, offset: 116521},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3828, col: 3, offset: 116886},
						run: (*parser).callonAggEstdcError12,
						expr: &seqExpr{
							pos: position{line: 3828, col: 3, offset: 116886},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3828, col: 3, offset: 116886},
									val:        "estdc_error",
									ignoreCase: false,
									want:       "\"estdc_error\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3828, col: 17, offset: 116900},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3828, col: 25, offset: 116908},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3828, col: 31, offset: 116914},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3828, col: 41, offset: 116924},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggExactPerc",
			pos:  position{line: 3838, col: 1, offset: 117119},
			expr: &choiceExpr{
				pos: position{line: 3838, col: 17, offset: 117135},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3838, col: 17, offset: 117135},
						run: (*parser).callonAggExactPerc2,
						expr: &seqExpr{
							pos: position{line: 3838, col: 17, offset: 117135},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3838, col: 17, offset: 117135},
									val:        "exactperc",
									ignoreCase: false,
									want:       "\"exactperc\"",
								},
								&labeledExpr{
									pos:   position{line: 3838, col: 29, offset: 117147},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 3838, col: 37, offset: 117155},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 3838, col: 37, offset: 117155},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 3838, col: 53, offset: 117171},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3838, col: 70, offset: 117188},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3838, col: 78, offset: 117196},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3838, col: 85, offset: 117203},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3838, col: 93, offset: 117211},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3838, col: 112, offset: 117230},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3838, col: 131, offset: 117249},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3838, col: 139, offset: 117257},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3854, col: 3, offset: 117653},
						run: (*parser).callonAggExactPerc16,
						expr: &seqExpr{
							pos: position{line: 3854, col: 3, offset: 117653},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3854, col: 3, offset: 117653},
									val:        "exactperc",
									ignoreCase: false,
									want:       "\"exactperc\"",
								},
								&labeledExpr{
									pos:   position{line: 3854, col: 15, offset: 117665},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 3854, col: 23, offset: 117673},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 3854, col: 23, offset: 117673},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 3854, col: 39, offset: 117689},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3854, col: 56, offset: 117706},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3854, col: 64, offset: 117714},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3854, col: 70, offset: 117720},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3854, col: 80, offset: 117730},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggPerc",
			pos:  position{line: 3865, col: 1, offset: 117956},
			expr: &choiceExpr{
				pos: position{line: 3865, col: 12, offset: 117967},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3865, col: 12, offset: 117967},
						run: (*parser).callonAggPerc2,
						expr: &seqExpr{
							pos: position{line: 3865, col: 12, offset: 117967},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3865, col: 12, offset: 117967},
									val:        "perc",
									ignoreCase: false,
									want:       "\"perc\"",
								},
								&labeledExpr{
									pos:   position{line: 3865, col: 19, offset: 117974},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 3865, col: 27, offset: 117982},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 3865, col: 27, offset: 117982},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 3865, col: 43, offset: 117998},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3865, col: 60, offset: 118015},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3865, col: 68, offset: 118023},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3865, col: 75, offset: 118030},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3865, col: 83, offset: 118038},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3865, col: 102, offset: 118057},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3865, col: 121, offset: 118076},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3865, col: 129, offset: 118084},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3881, col: 3, offset: 118475},
						run: (*parser).callonAggPerc16,
						expr: &seqExpr{
							pos: position{line: 3881, col: 3, offset: 118475},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3881, col: 3, offset: 118475},
									val:        "perc",
									ignoreCase: false,
									want:       "\"perc\"",
								},
								&labeledExpr{
									pos:   position{line: 3881, col: 10, offset: 118482},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 3881, col: 18, offset: 118490},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 3881, col: 18, offset: 118490},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 3881, col: 34, offset: 118506},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3881, col: 51, offset: 118523},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3881, col: 59, offset: 118531},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3881, col: 65, offset: 118537},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3881, col: 75, offset: 118547},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggUpperPerc",
			pos:  position{line: 3892, col: 1, offset: 118768},
			expr: &choiceExpr{
				pos: position{line: 3892, col: 17, offset: 118784},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3892, col: 17, offset: 118784},
						run: (*parser).callonAggUpperPerc2,
						expr: &seqExpr{
							pos: position{line: 3892, col: 17, offset: 118784},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3892, col: 17, offset: 118784},
									val:        "upperperc",
									ignoreCase: false,
									want:       "\"upperperc\"",
								},
								&labeledExpr{
									pos:   position{line: 3892, col: 29, offset: 118796},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 3892, col: 37, offset: 118804},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 3892, col: 37, offset: 118804},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 3892, col: 53, offset: 118820},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3892, col: 70, offset: 118837},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3892, col: 78, offset: 118845},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3892, col: 85, offset: 118852},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3892, col: 93, offset: 118860},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3892, col: 112, offset: 118879},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3892, col: 131, offset: 118898},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3892, col: 139, offset: 118906},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3908, col: 3, offset: 119302},
						run: (*parser).callonAggUpperPerc16,
						expr: &seqExpr{
							pos: position{line: 3908, col: 3, offset: 119302},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3908, col: 3, offset: 119302},
									val:        "upperperc",
									ignoreCase: false,
									want:       "\"upperperc\"",
								},
								&labeledExpr{
									pos:   position{line: 3908, col: 15, offset: 119314},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 3908, col: 23, offset: 119322},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 3908, col: 23, offset: 119322},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 3908, col: 39, offset: 119338},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3908, col: 56, offset: 119355},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3908, col: 64, offset: 119363},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3908, col: 70, offset: 119369},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3908, col: 80, offset: 119379},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMedian",
			pos:  position{line: 3919, col: 1, offset: 119605},
			expr: &choiceExpr{
				pos: position{line: 3919, col: 14, offset: 119618},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3919, col: 14, offset: 119618},
						run: (*parser).callonAggMedian2,
						expr: &seqExpr{
							pos: position{line: 3919, col: 14, offset: 119618},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3919, col: 14, offset: 119618},
									val:        "median",
									ignoreCase: false,
									want:       "\"median\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3919, col: 23, offset: 119627},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3919, col: 31, offset: 119635},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3919, col: 38, offset: 119642},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3919, col: 46, offset: 119650},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3919, col: 65, offset: 119669},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3919, col: 84, offset: 119688},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3919, col: 92, offset: 119696},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3934, col: 3, offset: 120057},
						run: (*parser).callonAggMedian12,
						expr: &seqExpr{
							pos: position{line: 3934, col: 3, offset: 120057},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3934, col: 3, offset: 120057},
									val:        "median",
									ignoreCase: false,
									want:       "\"median\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3934, col: 12, offset: 120066},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3934, col: 20, offset: 120074},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3934, col: 26, offset: 120080},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3934, col: 36, offset: 120090},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMode",
			pos:  position{line: 3944, col: 1, offset: 120281},
			expr: &choiceExpr{
				pos: position{line: 3944, col: 12, offset: 120292},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3944, col: 12, offset: 120292},
						run: (*parser).callonAggMode2,
						expr: &seqExpr{
							pos: position{line: 3944, col: 12, offset: 120292},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3944, col: 12, offset: 120292},
									val:        "mode",
									ignoreCase: false,
									want:       "\"mode\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3944, col: 19, offset: 120299},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3944, col: 27, offset: 120307},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3944, col: 34, offset: 120314},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3944, col: 42, offset: 120322},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3944, col: 61, offset: 120341},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3944, col: 80, offset: 120360},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3944, col: 88, offset: 120368},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3959, col: 3, offset: 120727},
						run: (*parser).callonAggMode12,
						expr: &seqExpr{
							pos: position{line: 3959, col: 3, offset: 120727},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3959, col: 3, offset: 120727},
									val:        "mode",
									ignoreCase: false,
									want:       "\"mode\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3959, col: 10, offset: 120734},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3959, col: 18, offset: 120742},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3959, col: 24, offset: 120748},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3959, col: 34, offset: 120758},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggStdev",
			pos:  position{line: 3969, col: 1, offset: 120947},
			expr: &choiceExpr{
				pos: position{line: 3969, col: 13, offset: 120959},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3969, col: 13, offset: 120959},
						run: (*parser).callonAggStdev2,
						expr: &seqExpr{
							pos: position{line: 3969, col: 13, offset: 120959},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3969, col: 13, offset: 120959},
									val:        "stdev",
									ignoreCase: false,
									want:       "\"stdev\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3969, col: 21, offset: 120967},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3969, col: 29, offset: 120975},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3969, col: 36, offset: 120982},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3969, col: 44, offset: 120990},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3969, col: 63, offset: 121009},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3969, col: 82, offset: 121028},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3969, col: 90, offset: 121036},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3984, col: 3, offset: 121396},
						run: (*parser).callonAggStdev12,
						expr: &seqExpr{
							pos: position{line: 3984, col: 3, offset: 121396},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3984, col: 3, offset: 121396},
									val:        "stdev",
									ignoreCase: false,
									want:       "\"stdev\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3984, col: 11, offset: 121404},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3984, col: 19, offset: 121412},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3984, col: 25, offset: 121418},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3984, col: 35, offset: 121428},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggStdevp",
			pos:  position{line: 3994, col: 1, offset: 121618},
			expr: &choiceExpr{
				pos: position{line: 3994, col: 14, offset: 121631},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3994, col: 14, offset: 121631},
						run: (*parser).callonAggStdevp2,
						expr: &seqExpr{
							pos: position{line: 3994, col: 14, offset: 121631},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3994, col: 14, offset: 121631},
									val:        "stdevp",
									ignoreCase: false,
									want:       "\"stdevp\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3994, col: 23, offset: 121640},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3994, col: 31, offset: 121648},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3994, col: 38, offset: 121655},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3994, col: 46, offset: 121663},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3994, col: 65, offset: 121682},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3994, col: 84, offset: 121701},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3994, col: 92, offset: 121709},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 4009, col: 3, offset: 122070},
						run: (*parser).callonAggStdevp12,
						expr: &seqExpr{
							pos: position{line: 4009, col: 3, offset: 122070},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4009, col: 3, offset: 122070},
									val:        "stdevp",
									ignoreCase: false,
									want:       "\"stdevp\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4009, col: 12, offset: 122079},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 4009, col: 20, offset: 122087},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 4009, col: 26, offset: 122093},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 4009, col: 36, offset: 122103},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggSumsq",
			pos:  position{line: 4019, col: 1, offset: 122294},
			expr: &choiceExpr{
				pos: position{line: 4019, col: 13, offset: 122306},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 4019, col: 13, offset: 122306},
						run: (*parser).callonAggSumsq2,
						expr: &seqExpr{
							pos: position{line: 4019, col: 13, offset: 122306},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4019, col: 13, offset: 122306},
									val:        "sumsq",
									ignoreCase: false,
									want:       "\"sumsq\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4019, col: 21, offset: 122314},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 4019, col: 29, offset: 122322},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4019, col: 36, offset: 122329},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 4019, col: 44, offset: 122337},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 4019, col: 63, offset: 122356},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 4019, col: 82, offset: 122375},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 4019, col: 90, offset: 122383},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 4034, col: 3, offset: 122743},
						run: (*parser).callonAggSumsq12,
						expr: &seqExpr{
							pos: position{line: 4034, col: 3, offset: 122743},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4034, col: 3, offset: 122743},
									val:        "sumsq",
									ignoreCase: false,
									want:       "\"sumsq\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4034, col: 11, offset: 122751},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 4034, col: 19, offset: 122759},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 4034, col: 25, offset: 122765},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 4034, col: 35, offset: 122775},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggVar",
			pos:  position{line: 4044, col: 1, offset: 122965},
			expr: &choiceExpr{
				pos: position{line: 4044, col: 11, offset: 122975},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 4044, col: 11, offset: 122975},
						run: (*parser).callonAggVar2,
						expr: &seqExpr{
							pos: position{line: 4044, col: 11, offset: 122975},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4044, col: 11, offset: 122975},
									val:        "var",
									ignoreCase: false,
									want:       "\"var\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4044, col: 17, offset: 122981},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 4044, col: 25, offset: 122989},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4044, col: 32, offset: 122996},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 4044, col: 40, offset: 123004},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 4044, col: 59, offset: 123023},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 4044, col: 78, offset: 123042},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 4044, col: 86, offset: 123050},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 4059, col: 3, offset: 123408},
						run: (*parser).callonAggVar12,
						expr: &seqExpr{
							pos: position{line: 4059, col: 3, offset: 123408},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4059, col: 3, offset: 123408},
									val:        "var",
									ignoreCase: false,
									want:       "\"var\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4059, col: 9, offset: 123414},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 4059, col: 17, offset: 123422},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 4059, col: 23, offset: 123428},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 4059, col: 33, offset: 123438},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggVarp",
			pos:  position{line: 4069, col: 1, offset: 123626},
			expr: &choiceExpr{
				pos: position{line: 4069, col: 12, offset: 123637},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 4069, col: 12, offset: 123637},
						run: (*parser).callonAggVarp2,
						expr: &seqExpr{
							pos: position{line: 4069, col: 12, offset: 123637},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4069, col: 12, offset: 123637},
									val:        "varp",
									ignoreCase: false,
									want:       "\"varp\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4069, col: 19, offset: 123644},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 4069, col: 27, offset: 123652},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4069, col: 34, offset: 123659},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 4069, col: 42, offset: 123667},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 4069, col: 61, offset: 123686},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 4069, col: 80, offset: 123705},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 4069, col: 88, offset: 123713},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 4084, col: 3, offset: 124072},
						run: (*parser).callonAggVarp12,
						expr: &seqExpr{
							pos: position{line: 4084, col: 3, offset: 124072},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4084, col: 3, offset: 124072},
									val:        "varp",
									ignoreCase: false,
									want:       "\"varp\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4084, col: 10, offset: 124079},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 4084, col: 18, offset: 124087},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 4084, col: 24, offset: 124093},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 4084, col: 34, offset: 124103},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggFirst",
			pos:  position{line: 4094, col: 1, offset: 124292},
			expr: &choiceExpr{
				pos: position{line: 4094, col: 13, offset: 124304},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 4094, col: 13, offset: 124304},
						run: (*parser).callonAggFirst2,
						expr: &seqExpr{
							pos: position{line: 4094, col: 13, offset: 124304},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4094, col: 13, offset: 124304},
									val:        "first",
									ignoreCase: false,
									want:       "\"first\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4094, col: 21, offset: 124312},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 4094, col: 29, offset: 124320},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4094, col: 36, offset: 124327},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 4094, col: 44, offset: 124335},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 4094, col: 63, offset: 124354},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 4094, col: 82, offset: 124373},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 4094, col: 90, offset: 124381},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 4109, col: 3, offset: 124741},
						run: (*parser).callonAggFirst12,
						expr: &seqExpr{
							pos: position{line: 4109, col: 3, offset: 124741},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4109, col: 3, offset: 124741},
									val:        "first",
									ignoreCase: false,
									want:       "\"first\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4109, col: 11, offset: 124749},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 4109, col: 19, offset: 124757},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 4109, col: 25, offset: 124763},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 4109, col: 35, offset: 124773},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggLast",
			pos:  position{line: 4119, col: 1, offset: 124963},
			expr: &choiceExpr{
				pos: position{line: 4119, col: 12, offset: 124974},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 4119, col: 12, offset: 124974},
						run: (*parser).callonAggLast2,
						expr: &seqExpr{
							pos: position{line: 4119, col: 12, offset: 124974},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4119, col: 12, offset: 124974},
									val:        "last",
									ignoreCase: false,
									want:       "\"last\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4119, col: 19, offset: 124981},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 4119, col: 27, offset: 124989},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4119, col: 34, offset: 124996},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 4119, col: 42, offset: 125004},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 4119, col: 61, offset: 125023},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 4119, col: 80, offset: 125042},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 4119, col: 88, offset: 125050},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 4134, col: 3, offset: 125409},
						run: (*parser).callonAggLast12,
						expr: &seqExpr{
							pos: position{line: 4134, col: 3, offset: 125409},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4134, col: 3, offset: 125409},
									val:        "last",
									ignoreCase: false,
									want:       "\"last\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4134, col: 10, offset: 125416},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 4134, col: 18, offset: 125424},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 4134, col: 24, offset: 125430},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 4134, col: 34, offset: 125440},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggList",
			pos:  position{line: 4144, col: 1, offset: 125629},
			expr: &choiceExpr{
				pos: position{line: 4144, col: 12, offset: 125640},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 4144, col: 12, offset: 125640},
						run: (*parser).callonAggList2,
						expr: &seqExpr{
							pos: position{line: 4144, col: 12, offset: 125640},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4144, col: 12, offset: 125640},
									val:        "list",
									ignoreCase: false,
									want:       "\"list\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4144, col: 19, offset: 125647},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 4144, col: 27, offset: 125655},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 4144, col: 34, offset: 125662},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 4144, col: 44, offset: 125672},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 4144, col: 54, offset: 125682},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 4154, col: 3, offset: 125909},
						run: (*parser).callonAggList10,
						expr: &seqExpr{
							pos: position{line: 4154, col: 3, offset: 125909},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4154, col: 3, offset: 125909},
									val:        "list",
									ignoreCase: false,
									want:       "\"list\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4154, col: 10, offset: 125916},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 4154, col: 18, offset: 125924},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 4154, col: 24, offset: 125930},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 4154, col: 34, offset: 125940},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggEarliest",
			pos:  position{line: 4164, col: 1, offset: 126129},
			expr: &choiceExpr{
				pos: position{line: 4164, col: 16, offset: 126144},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 4164, col: 16, offset: 126144},
						run: (*parser).callonAggEarliest2,
						expr: &seqExpr{
							pos: position{line: 4164, col: 16, offset: 126144},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4164, col: 16, offset: 126144},
									val:        "earliest",
									ignoreCase: false,
									want:       "\"earliest\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4164, col: 27, offset: 126155},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 4164, col: 35, offset: 126163},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4164, col: 42, offset: 126170},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 4164, col: 50, offset: 126178},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 4164, col: 69, offset: 126197},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 4164, col: 88, offset: 126216},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 4164, col: 96, offset: 126224},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 4179, col: 3, offset: 126587},
						run: (*parser).callonAggEarliest12,
						expr: &seqExpr{
							pos: position{line: 4179, col: 3, offset: 126587},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4179, col: 3, offset: 126587},
									val:        "earliest",
									ignoreCase: false,
									want:       "\"earliest\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4179, col: 14, offset: 126598},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 4179, col: 22, offset: 126606},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 4179, col: 28, offset: 126612},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 4179, col: 38, offset: 126622},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggEarliestTime",
			pos:  position{line: 4189, col: 1, offset: 126815},
			expr: &choiceExpr{
				pos: position{line: 4189, col: 20, offset: 126834},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 4189, col: 20, offset: 126834},
						run: (*parser).callonAggEarliestTime2,
						expr: &seqExpr{
							pos: position{line: 4189, col: 20, offset: 126834},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4189, col: 20, offset: 126834},
									val:        "earliest_time",
									ignoreCase: false,
									want:       "\"earliest_time\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4189, col: 36, offset: 126850},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 4189, col: 44, offset: 126858},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4189, col: 51, offset: 126865},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 4189, col: 59, offset: 126873},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 4189, col: 78, offset: 126892},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 4189, col: 97, offset: 126911},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 4189, col: 105, offset: 126919},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 4204, col: 3, offset: 127286},
						run: (*parser).callonAggEarliestTime12,
						expr: &seqExpr{
							pos: position{line: 4204, col: 3, offset: 127286},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4204, col: 3, offset: 127286},
									val:        "earliest_time",
									ignoreCase: false,
									want:       "\"earliest_time\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4204, col: 19, offset: 127302},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 4204, col: 27, offset: 127310},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 4204, col: 33, offset: 127316},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 4204, col: 43, offset: 127326},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggLatest",
			pos:  position{line: 4214, col: 1, offset: 127523},
			expr: &choiceExpr{
				pos: position{line: 4214, col: 14, offset: 127536},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 4214, col: 14, offset: 127536},
						run: (*parser).callonAggLatest2,
						expr: &seqExpr{
							pos: position{line: 4214, col: 14, offset: 127536},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4214, col: 14, offset: 127536},
									val:        "latest",
									ignoreCase: false,
									want:       "\"latest\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4214, col: 23, offset: 127545},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 4214, col: 31, offset: 127553},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4214, col: 38, offset: 127560},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 4214, col: 46, offset: 127568},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 4214, col: 65, offset: 127587},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 4214, col: 84, offset: 127606},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 4214, col: 92, offset: 127614},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 4229, col: 3, offset: 127975},
						run: (*parser).callonAggLatest12,
						expr: &seqExpr{
							pos: position{line: 4229, col: 3, offset: 127975},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4229, col: 3, offset: 127975},
									val:        "latest",
									ignoreCase: false,
									want:       "\"latest\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4229, col: 12, offset: 127984},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 4229, col: 20, offset: 127992},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 4229, col: 26, offset: 127998},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 4229, col: 36, offset: 128008},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggLatestTime",
			pos:  position{line: 4239, col: 1, offset: 128199},
			expr: &choiceExpr{
				pos: position{line: 4239, col: 18, offset: 128216},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 4239, col: 18, offset: 128216},
						run: (*parser).callonAggLatestTime2,
						expr: &seqExpr{
							pos: position{line: 4239, col: 18, offset: 128216},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4239, col: 18, offset: 128216},
									val:        "latest_time",
									ignoreCase: false,
									want:       "\"latest_time\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4239, col: 32, offset: 128230},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 4239, col: 40, offset: 128238},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4239, col: 47, offset: 128245},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 4239, col: 55, offset: 128253},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 4239, col: 74, offset: 128272},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 4239, col: 93, offset: 128291},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 4239, col: 101, offset: 128299},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 4254, col: 3, offset: 128664},
						run: (*parser).callonAggLatestTime12,
						expr: &seqExpr{
							pos: position{line: 4254, col: 3, offset: 128664},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4254, col: 3, offset: 128664},
									val:        "latest_time",
									ignoreCase: false,
									want:       "\"latest_time\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4254, col: 17, offset: 128678},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 4254, col: 25, offset: 128686},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 4254, col: 31, offset: 128692},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 4254, col: 41, offset: 128702},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggRate",
			pos:  position{line: 4264, col: 1, offset: 128897},
			expr: &choiceExpr{
				pos: position{line: 4264, col: 12, offset: 128908},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 4264, col: 12, offset: 128908},
						run: (*parser).callonAggRate2,
						expr: &seqExpr{
							pos: position{line: 4264, col: 12, offset: 128908},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4264, col: 12, offset: 128908},
									val:        "rate",
									ignoreCase: false,
									want:       "\"rate\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4264, col: 19, offset: 128915},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 4264, col: 27, offset: 128923},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4264, col: 34, offset: 128930},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 4264, col: 42, offset: 128938},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 4264, col: 61, offset: 128957},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 4264, col: 80, offset: 128976},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 4264, col: 88, offset: 128984},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 4279, col: 3, offset: 129348},
						run: (*parser).callonAggRate12,
						expr: &seqExpr{
							pos: position{line: 4279, col: 3, offset: 129348},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4279, col: 3, offset: 129348},
									val:        "rate",
									ignoreCase: false,
									want:       "\"rate\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4279, col: 10, offset: 129355},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 4279, col: 18, offset: 129363},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 4279, col: 24, offset: 129369},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 4279, col: 34, offset: 129379},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggValues",
			pos:  position{line: 4288, col: 1, offset: 129533},
			expr: &choiceExpr{
				pos: position{line: 4288, col: 14, offset: 129546},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 4288, col: 14, offset: 129546},
						run: (*parser).callonAggValues2,
						expr: &seqExpr{
							pos: position{line: 4288, col: 14, offset: 129546},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4288, col: 14, offset: 129546},
									val:        "values",
									ignoreCase: false,
									want:       "\"values\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4288, col: 23, offset: 129555},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 4288, col: 31, offset: 129563},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 4288, col: 38, offset: 129570},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 4288, col: 48, offset: 129580},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 4288, col: 58, offset: 129590},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 4298, col: 3, offset: 129819},
						run: (*parser).callonAggValues10,
						expr: &seqExpr{
							pos: position{line: 4298, col: 3, offset: 129819},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4298, col: 3, offset: 129819},
									val:        "values",
									ignoreCase: false,
									want:       "\"values\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4298, col: 12, offset: 129828},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 4298, col: 20, offset: 129836},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 4298, col: 26, offset: 129842},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 4298, col: 36, offset: 129852},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldWithNumberValue",
			pos:  position{line: 4307, col: 1, offset: 130003},
			expr: &actionExpr{
				pos: position{line: 4307, col: 25, offset: 130027},
				run: (*parser).callonFieldWithNumberValue1,
				expr: &labeledExpr{
					pos:   position{line: 4307, col: 25, offset: 130027},
					label: "keyValuePair",
					expr: &choiceExpr{
						pos: position{line: 4307, col: 39, offset: 130041},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4307, col: 39, offset: 130041},
								name: "NamedFieldWithNumberValue",
							},
							&ruleRefExpr{
								pos:  position{line: 4307, col: 67, offset: 130069},
								name: "UnnamedFieldWithNumberValue",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedFieldWithNumberValue",
			pos:  position{line: 4311, col: 1, offset: 130132},
			expr: &actionExpr{
				pos: position{line: 4311, col: 30, offset: 130161},
				run: (*parser).callonNamedFieldWithNumberValue1,
				expr: &seqExpr{
					pos: position{line: 4311, col: 30, offset: 130161},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4311, col: 30, offset: 130161},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 4311, col: 34, offset: 130165},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 4311, col: 44, offset: 130175},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 4311, col: 48, offset: 130179},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 4311, col: 48, offset: 130179},
										name: "EqualityOperator",
									},
									&ruleRefExpr{
										pos:  position{line: 4311, col: 67, offset: 130198},
										name: "InequalityOperator",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 4311, col: 87, offset: 130218},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 4311, col: 93, offset: 130224},
								name: "Number",
							},
						},
					},
				},
			},
		},
		{
			name: "UnnamedFieldWithNumberValue",
			pos:  position{line: 4324, col: 1, offset: 130458},
			expr: &actionExpr{
				pos: position{line: 4324, col: 32, offset: 130489},
				run: (*parser).callonUnnamedFieldWithNumberValue1,
				expr: &labeledExpr{
					pos:   position{line: 4324, col: 32, offset: 130489},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 4324, col: 38, offset: 130495},
						name: "Number",
					},
				},
			},
		},
		{
			name: "FieldWithBooleanValue",
			pos:  position{line: 4337, col: 1, offset: 130712},
			expr: &actionExpr{
				pos: position{line: 4337, col: 26, offset: 130737},
				run: (*parser).callonFieldWithBooleanValue1,
				expr: &seqExpr{
					pos: position{line: 4337, col: 26, offset: 130737},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4337, col: 26, offset: 130737},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 4337, col: 30, offset: 130741},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 4337, col: 40, offset: 130751},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 4337, col: 43, offset: 130754},
								name: "EqualityOperator",
							},
						},
						&labeledExpr{
							pos:   position{line: 4337, col: 60, offset: 130771},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 4337, col: 66, offset: 130777},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldWithStringValue",
			pos:  position{line: 4350, col: 1, offset: 131012},
			expr: &actionExpr{
				pos: position{line: 4350, col: 25, offset: 131036},
				run: (*parser).callonFieldWithStringValue1,
				expr: &labeledExpr{
					pos:   position{line: 4350, col: 25, offset: 131036},
					label: "keyValuePair",
					expr: &choiceExpr{
						pos: position{line: 4350, col: 39, offset: 131050},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4350, col: 39, offset: 131050},
								name: "NamedFieldWithStringValue",
							},
							&ruleRefExpr{
								pos:  position{line: 4350, col: 67, offset: 131078},
								name: "UnnamedFieldWithStringValue",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedFieldWithStringValue",
			pos:  position{line: 4354, col: 1, offset: 131141},
			expr: &actionExpr{
				pos: position{line: 4354, col: 30, offset: 131170},
				run: (*parser).callonNamedFieldWithStringValue1,
				expr: &seqExpr{
					pos: position{line: 4354, col: 30, offset: 131170},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4354, col: 30, offset: 131170},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 4354, col: 34, offset: 131174},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 4354, col: 44, offset: 131184},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 4354, col: 47, offset: 131187},
								name: "EqualityOperator",
							},
						},
						&labeledExpr{
							pos:   position{line: 4354, col: 64, offset: 131204},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 4354, col: 70, offset: 131210},
								name: "String",
							},
						},
					},
				},
			},
		},
		{
			name: "UnnamedFieldWithStringValue",
			pos:  position{line: 4366, col: 1, offset: 131443},
			expr: &actionExpr{
				pos: position{line: 4366, col: 32, offset: 131474},
				run: (*parser).callonUnnamedFieldWithStringValue1,
				expr: &labeledExpr{
					pos:   position{line: 4366, col: 32, offset: 131474},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 4366, col: 38, offset: 131480},
						name: "String",
					},
				},
			},
		},
		{
			name: "FieldNameList",
			pos:  position{line: 4380, col: 1, offset: 131811},
			expr: &actionExpr{
				pos: position{line: 4380, col: 18, offset: 131828},
				run: (*parser).callonFieldNameList1,
				expr: &seqExpr{
					pos: position{line: 4380, col: 18, offset: 131828},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4380, col: 18, offset: 131828},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 4380, col: 24, offset: 131834},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 4380, col: 34, offset: 131844},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 4380, col: 39, offset: 131849},
								expr: &seqExpr{
									pos: position{line: 4380, col: 40, offset: 131850},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 4380, col: 40, offset: 131850},
											name: "COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 4380, col: 46, offset: 131856},
											name: "FieldName",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeModifiers",
			pos:  position{line: 4397, col: 1, offset: 132351},
			expr: &choiceExpr{
				pos: position{line: 4397, col: 18, offset: 132368},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 4397, col: 18, offset: 132368},
						name: "EarliestAndLatest",
					},
					&ruleRefExpr{
						pos:  position{line: 4397, col: 38, offset: 132388},
						name: "EarliestOnly",
					},
				},
			},
		},
		{
			name: "EarliestAndLatest",
			pos:  position{line: 4399, col: 1, offset: 132402},
			expr: &actionExpr{
				pos: position{line: 4399, col: 22, offset: 132423},
				run: (*parser).callonEarliestAndLatest1,
				expr: &seqExpr{
					pos: position{line: 4399, col: 22, offset: 132423},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4399, col: 22, offset: 132423},
							name: "CMD_EARLIEST",
						},
						&ruleRefExpr{
							pos:  position{line: 4399, col: 35, offset: 132436},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4399, col: 41, offset: 132442},
							label: "earliestTime",
							expr: &choiceExpr{
								pos: position{line: 4399, col: 55, offset: 132456},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 4399, col: 55, offset: 132456},
										name: "AbsoluteTimestamp",
									},
									&ruleRefExpr{
										pos:  position{line: 4399, col: 75, offset: 132476},
										name: "RelativeTimestamp",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4399, col: 94, offset: 132495},
							name: "SPACE",
						},
						&ruleRefExpr{
							pos:  position{line: 4399, col: 100, offset: 132501},
							name: "CMD_LATEST",
						},
						&ruleRefExpr{
							pos:  position{line: 4399, col: 111, offset: 132512},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4399, col: 117, offset: 132518},
							label: "latestTime",
							expr: &choiceExpr{
								pos: position{line: 4399, col: 129, offset: 132530},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 4399, col: 129, offset: 132530},
										name: "AbsoluteTimestamp",
									},
									&ruleRefExpr{
										pos:  position{line: 4399, col: 149, offset: 132550},
										name: "RelativeTimestamp",
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 4399, col: 168, offset: 132569},
							expr: &anyMatcher{
								line: 4399, col: 169, offset: 132570,
							},
						},
					},
				},
			},
		},
		{
			name: "EarliestOnly",
			pos:  position{line: 4440, col: 1, offset: 133692},
			expr: &actionExpr{
				pos: position{line: 4440, col: 17, offset: 133708},
				run: (*parser).callonEarliestOnly1,
				expr: &seqExpr{
					pos: position{line: 4440, col: 17, offset: 133708},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4440, col: 17, offset: 133708},
							name: "CMD_EARLIEST",
						},
						&ruleRefExpr{
							pos:  position{line: 4440, col: 30, offset: 133721},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4440, col: 36, offset: 133727},
							label: "earliestTime",
							expr: &choiceExpr{
								pos: position{line: 4440, col: 50, offset: 133741},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 4440, col: 50, offset: 133741},
										name: "AbsoluteTimestamp",
									},
									&ruleRefExpr{
										pos:  position{line: 4440, col: 70, offset: 133761},
										name: "RelativeTimestamp",
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 4440, col: 89, offset: 133780},
							expr: &anyMatcher{
								line: 4440, col: 90, offset: 133781,
							},
						},
					},
				},
			},
		},
		{
			name: "RelIntegerAsString",
			pos:  position{line: 4468, col: 1, offset: 134472},
			expr: &actionExpr{
				pos: position{line: 4468, col: 23, offset: 134494},
				run: (*parser).callonRelIntegerAsString1,
				expr: &seqExpr{
					pos: position{line: 4468, col: 23, offset: 134494},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 4468, col: 23, offset: 134494},
							val:        "[-+]",
							chars:      []rune{'-', '+'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 4468, col: 27, offset: 134498},
							expr: &charClassMatcher{
								pos:        position{line: 4468, col: 27, offset: 134498},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "WeekSnap",
			pos:  position{line: 4472, col: 1, offset: 134541},
			expr: &actionExpr{
				pos: position{line: 4472, col: 13, offset: 134553},
				run: (*parser).callonWeekSnap1,
				expr: &seqExpr{
					pos: position{line: 4472, col: 14, offset: 134554},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4472, col: 14, offset: 134554},
							val:        "w",
							ignoreCase: false,
							want:       "\"w\"",
						},
						&charClassMatcher{
							pos:        position{line: 4472, col: 17, offset: 134557},
							val:        "[0-7]",
							ranges:     []rune{'0', '7'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "RelTimeUnit",
			pos:  position{line: 4476, col: 1, offset: 134600},
			expr: &actionExpr{
				pos: position{line: 4476, col: 16, offset: 134615},
				run: (*parser).callonRelTimeUnit1,
				expr: &labeledExpr{
					pos:   position{line: 4476, col: 16, offset: 134615},
					label: "timeUnit",
					expr: &ruleRefExpr{
						pos:  position{line: 4476, col: 26, offset: 134625},
						name: "AllTimeScale",
					},
				},
			},
		},
		{
			name: "Snap",
			pos:  position{line: 4483, col: 1, offset: 134849},
			expr: &actionExpr{
				pos: position{line: 4483, col: 9, offset: 134857},
				run: (*parser).callonSnap1,
				expr: &seqExpr{
					pos: position{line: 4483, col: 9, offset: 134857},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4483, col: 9, offset: 134857},
							val:        "@",
							ignoreCase: false,
							want:       "\"@\"",
						},
						&labeledExpr{
							pos:   position{line: 4483, col: 13, offset: 134861},
							label: "snap",
							expr: &choiceExpr{
								pos: position{line: 4483, col: 19, offset: 134867},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 4483, col: 19, offset: 134867},
										name: "WeekSnap",
									},
									&ruleRefExpr{
										pos:  position{line: 4483, col: 30, offset: 134878},
										name: "RelTimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Offset",
			pos:  position{line: 4487, col: 1, offset: 134926},
			expr: &actionExpr{
				pos: position{line: 4487, col: 11, offset: 134936},
				run: (*parser).callonOffset1,
				expr: &seqExpr{
					pos: position{line: 4487, col: 11, offset: 134936},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4487, col: 11, offset: 134936},
							label: "off",
							expr: &ruleRefExpr{
								pos:  position{line: 4487, col: 16, offset: 134941},
								name: "RelIntegerAsString",
							},
						},
						&labeledExpr{
							pos:   position{line: 4487, col: 36, offset: 134961},
							label: "tuOff",
							expr: &ruleRefExpr{
								pos:  position{line: 4487, col: 43, offset: 134968},
								name: "RelTimeUnit",
							},
						},
					},
				},
			},
		},
		{
			name: "ChainedRelativeTimestamp",
			pos:  position{line: 4515, col: 1, offset: 135706},
			expr: &actionExpr{
				pos: position{line: 4515, col: 29, offset: 135734},
				run: (*parser).callonChainedRelativeTimestamp1,
				expr: &seqExpr{
					pos: position{line: 4515, col: 29, offset: 135734},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4515, col: 29, offset: 135734},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 4515, col: 36, offset: 135741},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 4515, col: 36, offset: 135741},
										name: "Offset",
									},
									&ruleRefExpr{
										pos:  position{line: 4515, col: 45, offset: 135750},
										name: "Snap",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 4515, col: 51, offset: 135756},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 4515, col: 57, offset: 135762},
								expr: &choiceExpr{
									pos: position{line: 4515, col: 58, offset: 135763},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 4515, col: 58, offset: 135763},
											name: "Offset",
										},
										&ruleRefExpr{
											pos:  position{line: 4515, col: 67, offset: 135772},
											name: "Snap",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeTimestamp",
			pos:  position{line: 4562, col: 1, offset: 137204},
			expr: &actionExpr{
				pos: position{line: 4562, col: 22, offset: 137225},
				run: (*parser).callonRelativeTimestamp1,
				expr: &seqExpr{
					pos: position{line: 4562, col: 22, offset: 137225},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4562, col: 22, offset: 137225},
							label: "defaultTime",
							expr: &zeroOrOneExpr{
								pos: position{line: 4562, col: 34, offset: 137237},
								expr: &choiceExpr{
									pos: position{line: 4562, col: 35, offset: 137238},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 4562, col: 35, offset: 137238},
											val:        "now",
											ignoreCase: false,
											want:       "\"now\"",
										},
										&litMatcher{
											pos:        position{line: 4562, col: 43, offset: 137246},
											val:        "1",
											ignoreCase: false,
											want:       "\"1\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 4562, col: 49, offset: 137252},
							label: "chained",
							expr: &zeroOrOneExpr{
								pos: position{line: 4562, col: 57, offset: 137260},
								expr: &ruleRefExpr{
									pos:  position{line: 4562, col: 58, offset: 137261},
									name: "ChainedRelativeTimestamp",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeTimeCommandTimestampFormat",
			pos:  position{line: 4587, col: 1, offset: 137944},
			expr: &actionExpr{
				pos: position{line: 4587, col: 39, offset: 137982},
				run: (*parser).callonRelativeTimeCommandTimestampFormat1,
				expr: &seqExpr{
					pos: position{line: 4587, col: 39, offset: 137982},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4587, col: 39, offset: 137982},
							label: "offset",
							expr: &zeroOrOneExpr{
								pos: position{line: 4587, col: 46, offset: 137989},
								expr: &ruleRefExpr{
									pos:  position{line: 4587, col: 47, offset: 137990},
									name: "Offset",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 4587, col: 56, offset: 137999},
							label: "snapParam",
							expr: &zeroOrOneExpr{
								pos: position{line: 4587, col: 66, offset: 138009},
								expr: &ruleRefExpr{
									pos:  position{line: 4587, col: 67, offset: 138010},
									name: "Snap",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FullTimeStamp",
			pos:  position{line: 4614, col: 1, offset: 138638},
			expr: &actionExpr{
				pos: position{line: 4614, col: 18, offset: 138655},
				run: (*parser).callonFullTimeStamp1,
				expr: &seqExpr{
					pos: position{line: 4614, col: 18, offset: 138655},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 4614, col: 18, offset: 138655},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 4614, col: 23, offset: 138660},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 4614, col: 29, offset: 138666},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&charClassMatcher{
							pos:        position{line: 4614, col: 33, offset: 138670},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 4614, col: 38, offset: 138675},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 4614, col: 44, offset: 138681},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&charClassMatcher{
							pos:        position{line: 4614, col: 48, offset: 138685},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 4614, col: 53, offset: 138690},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 4614, col: 58, offset: 138695},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 4614, col: 63, offset: 138700},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 4614, col: 69, offset: 138706},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&charClassMatcher{
							pos:        position{line: 4614, col: 73, offset: 138710},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 4614, col: 78, offset: 138715},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 4614, col: 84, offset: 138721},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&charClassMatcher{
							pos:        position{line: 4614, col: 88, offset: 138725},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 4614, col: 93, offset: 138730},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 4614, col: 99, offset: 138736},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&charClassMatcher{
							pos:        position{line: 4614, col: 103, offset: 138740},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 4614, col: 108, offset: 138745},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "AbsoluteTimestamp",
			pos:  position{line: 4618, col: 1, offset: 138787},
			expr: &actionExpr{
				pos: position{line: 4618, col: 22, offset: 138808},
				run: (*parser).callonAbsoluteTimestamp1,
				expr: &labeledExpr{
					pos:   position{line: 4618, col: 22, offset: 138808},
					label: "timestamp",
					expr: &ruleRefExpr{
						pos:  position{line: 4618, col: 32, offset: 138818},
						name: "FullTimeStamp",
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 4628, col: 1, offset: 139226},
			expr: &actionExpr{
				pos: position{line: 4628, col: 14, offset: 139239},
				run: (*parser).callonFieldName1,
				expr: &seqExpr{
					pos: position{line: 4628, col: 14, offset: 139239},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 4628, col: 14, offset: 139239},
							val:        "[a-zA-Z0-9:*]",
							chars:      []rune{':', '*'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 4628, col: 27, offset: 139252},
							expr: &charClassMatcher{
								pos:        position{line: 4628, col: 27, offset: 139252},
								val:        "[a-zA-Z0-9:_.*]",
								chars:      []rune{':', '_', '.', '*'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "FieldNameStartWith_",
			pos:  position{line: 4632, col: 1, offset: 139305},
			expr: &actionExpr{
				pos: position{line: 4632, col: 24, offset: 139328},
				run: (*parser).callonFieldNameStartWith_1,
				expr: &seqExpr{
					pos: position{line: 4632, col: 24, offset: 139328},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 4632, col: 24, offset: 139328},
							val:        "[a-zA-Z0-9:_.*]",
							chars:      []rune{':', '_', '.', '*'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 4632, col: 39, offset: 139343},
							expr: &charClassMatcher{
								pos:        position{line: 4632, col: 39, offset: 139343},
								val:        "[a-zA-Z0-9:_.*]",
								chars:      []rune{':', '_', '.', '*'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "String",
			pos:  position{line: 4636, col: 1, offset: 139396},
			expr: &actionExpr{
				pos: position{line: 4636, col: 11, offset: 139406},
				run: (*parser).callonString1,
				expr: &labeledExpr{
					pos:   position{line: 4636, col: 11, offset: 139406},
					label: "str",
					expr: &choiceExpr{
						pos: position{line: 4636, col: 16, offset: 139411},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4636, col: 16, offset: 139411},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 4636, col: 31, offset: 139426},
								name: "UnquotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 4640, col: 1, offset: 139467},
			expr: &actionExpr{
				pos: position{line: 4640, col: 17, offset: 139483},
				run: (*parser).callonQuotedString1,
				expr: &seqExpr{
					pos: position{line: 4640, col: 17, offset: 139483},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4640, col: 17, offset: 139483},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 4640, col: 21, offset: 139487},
							expr: &charClassMatcher{
								pos:        position{line: 4640, col: 21, offset: 139487},
								val:        "[^\"]",
								chars:      []rune{'"'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 4640, col: 27, offset: 139493},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UnquotedString",
			pos:  position{line: 4645, col: 1, offset: 139604},
			expr: &actionExpr{
				pos: position{line: 4645, col: 19, offset: 139622},
				run: (*parser).callonUnquotedString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 4645, col: 19, offset: 139622},
					expr: &choiceExpr{
						pos: position{line: 4645, col: 20, offset: 139623},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 4645, col: 20, offset: 139623},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&seqExpr{
								pos: position{line: 4645, col: 27, offset: 139630},
								exprs: []any{
									&notExpr{
										pos: position{line: 4645, col: 27, offset: 139630},
										expr: &choiceExpr{
											pos: position{line: 4645, col: 29, offset: 139632},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 4645, col: 29, offset: 139632},
													name: "MAJOR_BREAK",
												},
												&litMatcher{
													pos:        position{line: 4645, col: 43, offset: 139646},
													val:        "|",
													ignoreCase: false,
													want:       "\"|\"",
												},
												&ruleRefExpr{
													pos:  position{line: 4645, col: 49, offset: 139652},
													name: "EOF",
												},
											},
										},
									},
									&anyMatcher{
										line: 4645, col: 54, offset: 139657,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AllowedChar",
			pos:  position{line: 4652, col: 1, offset: 139772},
			expr: &choiceExpr{
				pos: position{line: 4652, col: 16, offset: 139787},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 4652, col: 16, offset: 139787},
						val:        "[a-zA-Z0-9:_{}@.]",
						chars:      []rune{':', '_', '{', '}', '@', '.'},
						ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&seqExpr{
						pos: position{line: 4652, col: 37, offset: 139808},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 4652, col: 37, offset: 139808},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 4652, col: 41, offset: 139812},
								expr: &charClassMatcher{
									pos:        position{line: 4652, col: 41, offset: 139812},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&litMatcher{
								pos:        position{line: 4652, col: 48, offset: 139819},
								val:        "}",
								ignoreCase: false,
								want:       "\"}\"",
							},
						},
					},
				},
			},
		},
		{
			name: "UnquotedStringWithTemplateWildCard",
			pos:  position{line: 4654, col: 1, offset: 139825},
			expr: &actionExpr{
				pos: position{line: 4654, col: 39, offset: 139863},
				run: (*parser).callonUnquotedStringWithTemplateWildCard1,
				expr: &oneOrMoreExpr{
					pos: position{line: 4654, col: 39, offset: 139863},
					expr: &choiceExpr{
						pos: position{line: 4654, col: 40, offset: 139864},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4654, col: 40, offset: 139864},
								name: "AllowedChar",
							},
							&seqExpr{
								pos: position{line: 4654, col: 54, offset: 139878},
								exprs: []any{
									&notExpr{
										pos: position{line: 4654, col: 54, offset: 139878},
										expr: &choiceExpr{
											pos: position{line: 4654, col: 56, offset: 139880},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 4654, col: 56, offset: 139880},
													name: "MAJOR_BREAK",
												},
												&litMatcher{
													pos:        position{line: 4654, col: 70, offset: 139894},
													val:        "|",
													ignoreCase: false,
													want:       "\"|\"",
												},
												&ruleRefExpr{
													pos:  position{line: 4654, col: 76, offset: 139900},
													name: "EOF",
												},
											},
										},
									},
									&anyMatcher{
										line: 4654, col: 81, offset: 139905,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Boolean",
			pos:  position{line: 4658, col: 1, offset: 139945},
			expr: &actionExpr{
				pos: position{line: 4658, col: 12, offset: 139956},
				run: (*parser).callonBoolean1,
				expr: &choiceExpr{
					pos: position{line: 4658, col: 13, offset: 139957},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4658, col: 13, offset: 139957},
							val:        "true",
							ignoreCase: false,
							want:       "\"true\"",
						},
						&litMatcher{
							pos:        position{line: 4658, col: 22, offset: 139966},
							val:        "false",
							ignoreCase: false,
							want:       "\"false\"",
						},
					},
				},
			},
		},
		{
			name: "RenamePattern",
			pos:  position{line: 4664, col: 1, offset: 140120},
			expr: &actionExpr{
				pos: position{line: 4664, col: 18, offset: 140137},
				run: (*parser).callonRenamePattern1,
				expr: &oneOrMoreExpr{
					pos: position{line: 4664, col: 18, offset: 140137},
					expr: &charClassMatcher{
						pos:        position{line: 4664, col: 18, offset: 140137},
						val:        "[a-zA-Z0-9_*]",
						chars:      []rune{'_', '*'},
						ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 4668, col: 1, offset: 140188},
			expr: &actionExpr{
				pos: position{line: 4668, col: 11, offset: 140198},
				run: (*parser).callonNumber1,
				expr: &labeledExpr{
					pos:   position{line: 4668, col: 11, offset: 140198},
					label: "number",
					expr: &ruleRefExpr{
						pos:  position{line: 4668, col: 18, offset: 140205},
						name: "NumberAsString",
					},
				},
			},
		},
		{
			name: "NumberAsString",
			pos:  position{line: 4674, col: 1, offset: 140394},
			expr: &actionExpr{
				pos: position{line: 4674, col: 19, offset: 140412},
				run: (*parser).callonNumberAsString1,
				expr: &seqExpr{
					pos: position{line: 4674, col: 19, offset: 140412},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4674, col: 19, offset: 140412},
							label: "number",
							expr: &choiceExpr{
								pos: position{line: 4674, col: 27, offset: 140420},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 4674, col: 27, offset: 140420},
										name: "FloatAsString",
									},
									&ruleRefExpr{
										pos:  position{line: 4674, col: 43, offset: 140436},
										name: "IntegerAsString",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 4674, col: 60, offset: 140453},
							expr: &choiceExpr{
								pos: position{line: 4674, col: 62, offset: 140455},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 4674, col: 62, offset: 140455},
										name: "SPACE",
									},
									&litMatcher{
										pos:        position{line: 4674, col: 70, offset: 140463},
										val:        "|",
										ignoreCase: false,
										want:       "\"|\"",
									},
									&litMatcher{
										pos:        position{line: 4674, col: 76, offset: 140469},
										val:        ")",
										ignoreCase: false,
										want:       "\")\"",
									},
									&litMatcher{
										pos:        position{line: 4674, col: 82, offset: 140475},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&ruleRefExpr{
										pos:  position{line: 4674, col: 88, offset: 140481},
										name: "EOF",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FloatAsString",
			pos:  position{line: 4680, col: 1, offset: 140610},
			expr: &actionExpr{
				pos: position{line: 4680, col: 18, offset: 140627},
				run: (*parser).callonFloatAsString1,
				expr: &seqExpr{
					pos: position{line: 4680, col: 18, offset: 140627},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 4680, col: 18, offset: 140627},
							expr: &charClassMatcher{
								pos:        position{line: 4680, col: 18, offset: 140627},
								val:        "[-+]",
								chars:      []rune{'-', '+'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 4680, col: 24, offset: 140633},
							expr: &charClassMatcher{
								pos:        position{line: 4680, col: 24, offset: 140633},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 4680, col: 31, offset: 140640},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 4680, col: 35, offset: 140644},
							expr: &charClassMatcher{
								pos:        position{line: 4680, col: 35, offset: 140644},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "IntegerAsString",
			pos:  position{line: 4685, col: 1, offset: 140739},
			expr: &actionExpr{
				pos: position{line: 4685, col: 20, offset: 140758},
				run: (*parser).callonIntegerAsString1,
				expr: &seqExpr{
					pos: position{line: 4685, col: 20, offset: 140758},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 4685, col: 20, offset: 140758},
							expr: &charClassMatcher{
								pos:        position{line: 4685, col: 20, offset: 140758},
								val:        "[-+]",
								chars:      []rune{'-', '+'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 4685, col: 26, offset: 140764},
							expr: &charClassMatcher{
								pos:        position{line: 4685, col: 26, offset: 140764},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PositiveIntegerAsString",
			pos:  position{line: 4689, col: 1, offset: 140807},
			expr: &actionExpr{
				pos: position{line: 4689, col: 28, offset: 140834},
				run: (*parser).callonPositiveIntegerAsString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 4689, col: 28, offset: 140834},
					expr: &charClassMatcher{
						pos:        position{line: 4689, col: 28, offset: 140834},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PositiveInteger",
			pos:  position{line: 4693, col: 1, offset: 140877},
			expr: &actionExpr{
				pos: position{line: 4693, col: 20, offset: 140896},
				run: (*parser).callonPositiveInteger1,
				expr: &labeledExpr{
					pos:   position{line: 4693, col: 20, offset: 140896},
					label: "intStr",
					expr: &ruleRefExpr{
						pos:  position{line: 4693, col: 27, offset: 140903},
						name: "PositiveIntegerAsString",
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 4701, col: 1, offset: 141150},
			expr: &actionExpr{
				pos: position{line: 4701, col: 21, offset: 141170},
				run: (*parser).callonEqualityOperator1,
				expr: &seqExpr{
					pos: position{line: 4701, col: 21, offset: 141170},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4701, col: 21, offset: 141170},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4701, col: 36, offset: 141185},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 4701, col: 40, offset: 141189},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 4701, col: 40, offset: 141189},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
									&litMatcher{
										pos:        position{line: 4701, col: 46, offset: 141195},
										val:        "!=",
										ignoreCase: false,
										want:       "\"!=\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4701, col: 52, offset: 141201},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "InequalityOperator",
			pos:  position{line: 4709, col: 1, offset: 141382},
			expr: &actionExpr{
				pos: position{line: 4709, col: 23, offset: 141404},
				run: (*parser).callonInequalityOperator1,
				expr: &seqExpr{
					pos: position{line: 4709, col: 23, offset: 141404},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4709, col: 23, offset: 141404},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4709, col: 38, offset: 141419},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 4709, col: 42, offset: 141423},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 4709, col: 42, offset: 141423},
										val:        "<=",
										ignoreCase: false,
										want:       "\"<=\"",
									},
									&litMatcher{
										pos:        position{line: 4709, col: 49, offset: 141430},
										val:        "<",
										ignoreCase: false,
										want:       "\"<\"",
									},
									&litMatcher{
										pos:        position{line: 4709, col: 55, offset: 141436},
										val:        ">=",
										ignoreCase: false,
										want:       "\">=\"",
									},
									&litMatcher{
										pos:        position{line: 4709, col: 62, offset: 141443},
										val:        ">",
										ignoreCase: false,
										want:       "\">\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4709, col: 67, offset: 141448},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "EqualityOrInequality",
			pos:  position{line: 4717, col: 1, offset: 141631},
			expr: &choiceExpr{
				pos: position{line: 4717, col: 25, offset: 141655},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 4717, col: 25, offset: 141655},
						run: (*parser).callonEqualityOrInequality2,
						expr: &labeledExpr{
							pos:   position{line: 4717, col: 25, offset: 141655},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 4717, col: 28, offset: 141658},
								name: "EqualityOperator",
							},
						},
					},
					&actionExpr{
						pos: position{line: 4720, col: 3, offset: 141700},
						run: (*parser).callonEqualityOrInequality5,
						expr: &labeledExpr{
							pos:   position{line: 4720, col: 3, offset: 141700},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 4720, col: 6, offset: 141703},
								name: "InequalityOperator",
							},
						},
					},
				},
			},
		},
		{
			name: "OpPlus",
			pos:  position{line: 4724, col: 1, offset: 141746},
			expr: &actionExpr{
				pos: position{line: 4724, col: 11, offset: 141756},
				run: (*parser).callonOpPlus1,
				expr: &seqExpr{
					pos: position{line: 4724, col: 11, offset: 141756},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4724, col: 11, offset: 141756},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 4724, col: 26, offset: 141771},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4724, col: 30, offset: 141775},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpMinus",
			pos:  position{line: 4728, col: 1, offset: 141815},
			expr: &actionExpr{
				pos: position{line: 4728, col: 12, offset: 141826},
				run: (*parser).callonOpMinus1,
				expr: &seqExpr{
					pos: position{line: 4728, col: 12, offset: 141826},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4728, col: 12, offset: 141826},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 4728, col: 27, offset: 141841},
							val:        "-",
							ignoreCase: false,
							want:       "\"-\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4728, col: 31, offset: 141845},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpMul",
			pos:  position{line: 4732, col: 1, offset: 141885},
			expr: &actionExpr{
				pos: position{line: 4732, col: 10, offset: 141894},
				run: (*parser).callonOpMul1,
				expr: &seqExpr{
					pos: position{line: 4732, col: 10, offset: 141894},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4732, col: 10, offset: 141894},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 4732, col: 25, offset: 141909},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4732, col: 29, offset: 141913},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpDiv",
			pos:  position{line: 4736, col: 1, offset: 141953},
			expr: &actionExpr{
				pos: position{line: 4736, col: 10, offset: 141962},
				run: (*parser).callonOpDiv1,
				expr: &seqExpr{
					pos: position{line: 4736, col: 10, offset: 141962},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4736, col: 10, offset: 141962},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 4736, col: 25, offset: 141977},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4736, col: 29, offset: 141981},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpMod",
			pos:  position{line: 4740, col: 1, offset: 142021},
			expr: &actionExpr{
				pos: position{line: 4740, col: 10, offset: 142030},
				run: (*parser).callonOpMod1,
				expr: &seqExpr{
					pos: position{line: 4740, col: 10, offset: 142030},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4740, col: 10, offset: 142030},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 4740, col: 25, offset: 142045},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4740, col: 29, offset: 142049},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "Second",
			pos:  position{line: 4745, col: 1, offset: 142113},
			expr: &actionExpr{
				pos: position{line: 4745, col: 11, offset: 142123},
				run: (*parser).callonSecond1,
				expr: &choiceExpr{
					pos: position{line: 4745, col: 12, offset: 142124},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4745, col: 12, offset: 142124},
							val:        "seconds",
							ignoreCase: false,
							want:       "\"seconds\"",
						},
						&litMatcher{
							pos:        position{line: 4745, col: 24, offset: 142136},
							val:        "second",
							ignoreCase: false,
							want:       "\"second\"",
						},
						&litMatcher{
							pos:        position{line: 4745, col: 35, offset: 142147},
							val:        "secs",
							ignoreCase: false,
							want:       "\"secs\"",
						},
						&litMatcher{
							pos:        position{line: 4745, col: 44, offset: 142156},
							val:        "sec",
							ignoreCase: false,
							want:       "\"sec\"",
						},
						&litMatcher{
							pos:        position{line: 4745, col: 52, offset: 142164},
							val:        "s",
							ignoreCase: false,
							want:       "\"s\"",
						},
					},
				},
			},
		},
		{
			name: "Minute",
			pos:  position{line: 4749, col: 1, offset: 142205},
			expr: &actionExpr{
				pos: position{line: 4749, col: 11, offset: 142215},
				run: (*parser).callonMinute1,
				expr: &choiceExpr{
					pos: position{line: 4749, col: 12, offset: 142216},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4749, col: 12, offset: 142216},
							val:        "minutes",
							ignoreCase: false,
							want:       "\"minutes\"",
						},
						&litMatcher{
							pos:        position{line: 4749, col: 24, offset: 142228},
							val:        "minute",
							ignoreCase: false,
							want:       "\"minute\"",
						},
						&litMatcher{
							pos:        position{line: 4749, col: 35, offset: 142239},
							val:        "mins",
							ignoreCase: false,
							want:       "\"mins\"",
						},
						&litMatcher{
							pos:        position{line: 4749, col: 44, offset: 142248},
							val:        "min",
							ignoreCase: false,
							want:       "\"min\"",
						},
						&litMatcher{
							pos:        position{line: 4749, col: 52, offset: 142256},
							val:        "m",
							ignoreCase: false,
							want:       "\"m\"",
						},
					},
				},
			},
		},
		{
			name: "Hour",
			pos:  position{line: 4753, col: 1, offset: 142297},
			expr: &actionExpr{
				pos: position{line: 4753, col: 9, offset: 142305},
				run: (*parser).callonHour1,
				expr: &choiceExpr{
					pos: position{line: 4753, col: 10, offset: 142306},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4753, col: 10, offset: 142306},
							val:        "hours",
							ignoreCase: false,
							want:       "\"hours\"",
						},
						&litMatcher{
							pos:        position{line: 4753, col: 20, offset: 142316},
							val:        "hour",
							ignoreCase: false,
							want:       "\"hour\"",
						},
						&litMatcher{
							pos:        position{line: 4753, col: 29, offset: 142325},
							val:        "hrs",
							ignoreCase: false,
							want:       "\"hrs\"",
						},
						&litMatcher{
							pos:        position{line: 4753, col: 37, offset: 142333},
							val:        "hr",
							ignoreCase: false,
							want:       "\"hr\"",
						},
						&litMatcher{
							pos:        position{line: 4753, col: 44, offset: 142340},
							val:        "h",
							ignoreCase: false,
							want:       "\"h\"",
						},
					},
				},
			},
		},
		{
			name: "Day",
			pos:  position{line: 4757, col: 1, offset: 142379},
			expr: &actionExpr{
				pos: position{line: 4757, col: 8, offset: 142386},
				run: (*parser).callonDay1,
				expr: &choiceExpr{
					pos: position{line: 4757, col: 9, offset: 142387},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4757, col: 9, offset: 142387},
							val:        "days",
							ignoreCase: false,
							want:       "\"days\"",
						},
						&litMatcher{
							pos:        position{line: 4757, col: 18, offset: 142396},
							val:        "day",
							ignoreCase: false,
							want:       "\"day\"",
						},
						&litMatcher{
							pos:        position{line: 4757, col: 26, offset: 142404},
							val:        "d",
							ignoreCase: false,
							want:       "\"d\"",
						},
					},
				},
			},
		},
		{
			name: "Week",
			pos:  position{line: 4761, col: 1, offset: 142442},
			expr: &actionExpr{
				pos: position{line: 4761, col: 9, offset: 142450},
				run: (*parser).callonWeek1,
				expr: &choiceExpr{
					pos: position{line: 4761, col: 10, offset: 142451},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4761, col: 10, offset: 142451},
							val:        "weeks",
							ignoreCase: false,
							want:       "\"weeks\"",
						},
						&litMatcher{
							pos:        position{line: 4761, col: 20, offset: 142461},
							val:        "week",
							ignoreCase: false,
							want:       "\"week\"",
						},
						&litMatcher{
							pos:        position{line: 4761, col: 29, offset: 142470},
							val:        "w",
							ignoreCase: false,
							want:       "\"w\"",
						},
					},
				},
			},
		},
		{
			name: "Month",
			pos:  position{line: 4765, col: 1, offset: 142509},
			expr: &actionExpr{
				pos: position{line: 4765, col: 10, offset: 142518},
				run: (*parser).callonMonth1,
				expr: &choiceExpr{
					pos: position{line: 4765, col: 11, offset: 142519},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4765, col: 11, offset: 142519},
							val:        "months",
							ignoreCase: false,
							want:       "\"months\"",
						},
						&litMatcher{
							pos:        position{line: 4765, col: 22, offset: 142530},
							val:        "month",
							ignoreCase: false,
							want:       "\"month\"",
						},
						&litMatcher{
							pos:        position{line: 4765, col: 32, offset: 142540},
							val:        "mon",
							ignoreCase: false,
							want:       "\"mon\"",
						},
					},
				},
			},
		},
		{
			name: "Quarter",
			pos:  position{line: 4769, col: 1, offset: 142582},
			expr: &actionExpr{
				pos: position{line: 4769, col: 12, offset: 142593},
				run: (*parser).callonQuarter1,
				expr: &choiceExpr{
					pos: position{line: 4769, col: 13, offset: 142594},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4769, col: 13, offset: 142594},
							val:        "quarters",
							ignoreCase: false,
							want:       "\"quarters\"",
						},
						&litMatcher{
							pos:        position{line: 4769, col: 26, offset: 142607},
							val:        "quarter",
							ignoreCase: false,
							want:       "\"quarter\"",
						},
						&litMatcher{
							pos:        position{line: 4769, col: 38, offset: 142619},
							val:        "qtrs",
							ignoreCase: false,
							want:       "\"qtrs\"",
						},
						&litMatcher{
							pos:        position{line: 4769, col: 47, offset: 142628},
							val:        "qtr",
							ignoreCase: false,
							want:       "\"qtr\"",
						},
						&litMatcher{
							pos:        position{line: 4769, col: 55, offset: 142636},
							val:        "q",
							ignoreCase: false,
							want:       "\"q\"",
						},
					},
				},
			},
		},
		{
			name: "Year",
			pos:  position{line: 4773, col: 1, offset: 142678},
			expr: &actionExpr{
				pos: position{line: 4773, col: 9, offset: 142686},
				run: (*parser).callonYear1,
				expr: &choiceExpr{
					pos: position{line: 4773, col: 10, offset: 142687},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4773, col: 10, offset: 142687},
							val:        "years",
							ignoreCase: false,
							want:       "\"years\"",
						},
						&litMatcher{
							pos:        position{line: 4773, col: 20, offset: 142697},
							val:        "year",
							ignoreCase: false,
							want:       "\"year\"",
						},
						&litMatcher{
							pos:        position{line: 4773, col: 29, offset: 142706},
							val:        "yrs",
							ignoreCase: false,
							want:       "\"yrs\"",
						},
						&litMatcher{
							pos:        position{line: 4773, col: 37, offset: 142714},
							val:        "yr",
							ignoreCase: false,
							want:       "\"yr\"",
						},
						&litMatcher{
							pos:        position{line: 4773, col: 44, offset: 142721},
							val:        "y",
							ignoreCase: false,
							want:       "\"y\"",
						},
					},
				},
			},
		},
		{
			name: "Subseconds",
			pos:  position{line: 4778, col: 1, offset: 142852},
			expr: &actionExpr{
				pos: position{line: 4778, col: 15, offset: 142866},
				run: (*parser).callonSubseconds1,
				expr: &choiceExpr{
					pos: position{line: 4778, col: 16, offset: 142867},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4778, col: 16, offset: 142867},
							val:        "us",
							ignoreCase: false,
							want:       "\"us\"",
						},
						&litMatcher{
							pos:        position{line: 4778, col: 23, offset: 142874},
							val:        "ms",
							ignoreCase: false,
							want:       "\"ms\"",
						},
						&litMatcher{
							pos:        position{line: 4778, col: 30, offset: 142881},
							val:        "cs",
							ignoreCase: false,
							want:       "\"cs\"",
						},
						&litMatcher{
							pos:        position{line: 4778, col: 37, offset: 142888},
							val:        "ds",
							ignoreCase: false,
							want:       "\"ds\"",
						},
					},
				},
			},
		},
		{
			name: "TransactionBlock",
			pos:  position{line: 4787, col: 1, offset: 143111},
			expr: &actionExpr{
				pos: position{line: 4787, col: 21, offset: 143131},
				run: (*parser).callonTransactionBlock1,
				expr: &seqExpr{
					pos: position{line: 4787, col: 21, offset: 143131},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4787, col: 21, offset: 143131},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 4787, col: 26, offset: 143136},
							name: "CMD_TRANSACTION",
						},
						&labeledExpr{
							pos:   position{line: 4787, col: 42, offset: 143152},
							label: "txnOptions",
							expr: &ruleRefExpr{
								pos:  position{line: 4787, col: 53, offset: 143163},
								name: "TransactionOptions",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionOptions",
			pos:  position{line: 4796, col: 1, offset: 143469},
			expr: &actionExpr{
				pos: position{line: 4796, col: 23, offset: 143491},
				run: (*parser).callonTransactionOptions1,
				expr: &labeledExpr{
					pos:   position{line: 4796, col: 23, offset: 143491},
					label: "txnOptions",
					expr: &zeroOrOneExpr{
						pos: position{line: 4796, col: 34, offset: 143502},
						expr: &ruleRefExpr{
							pos:  position{line: 4796, col: 34, offset: 143502},
							name: "TransactionDefinitionOptionsList",
						},
					},
				},
			},
		},
		{
			name: "TransactionDefinitionOptionsList",
			pos:  position{line: 4811, col: 1, offset: 143893},
			expr: &actionExpr{
				pos: position{line: 4811, col: 37, offset: 143929},
				run: (*parser).callonTransactionDefinitionOptionsList1,
				expr: &seqExpr{
					pos: position{line: 4811, col: 37, offset: 143929},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4811, col: 37, offset: 143929},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 4811, col: 43, offset: 143935},
								name: "TransactionDefinitionOption",
							},
						},
						&labeledExpr{
							pos:   position{line: 4811, col: 71, offset: 143963},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 4811, col: 76, offset: 143968},
								expr: &seqExpr{
									pos: position{line: 4811, col: 77, offset: 143969},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 4811, col: 77, offset: 143969},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 4811, col: 83, offset: 143975},
											name: "TransactionDefinitionOption",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionDefinitionOption",
			pos:  position{line: 4846, col: 1, offset: 144964},
			expr: &actionExpr{
				pos: position{line: 4846, col: 32, offset: 144995},
				run: (*parser).callonTransactionDefinitionOption1,
				expr: &labeledExpr{
					pos:   position{line: 4846, col: 32, offset: 144995},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 4846, col: 40, offset: 145003},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4846, col: 40, offset: 145003},
								name: "TransactionSpaceSeparatedFieldList",
							},
							&ruleRefExpr{
								pos:  position{line: 4846, col: 77, offset: 145040},
								name: "StartsWithOption",
							},
							&ruleRefExpr{
								pos:  position{line: 4846, col: 96, offset: 145059},
								name: "EndsWithOption",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionSpaceSeparatedFieldList",
			pos:  position{line: 4850, col: 1, offset: 145103},
			expr: &actionExpr{
				pos: position{line: 4850, col: 39, offset: 145141},
				run: (*parser).callonTransactionSpaceSeparatedFieldList1,
				expr: &labeledExpr{
					pos:   position{line: 4850, col: 39, offset: 145141},
					label: "fields",
					expr: &ruleRefExpr{
						pos:  position{line: 4850, col: 46, offset: 145148},
						name: "SpaceSeparatedFieldNameList",
					},
				},
			},
		},
		{
			name: "StartsWithOption",
			pos:  position{line: 4861, col: 1, offset: 145364},
			expr: &actionExpr{
				pos: position{line: 4861, col: 21, offset: 145384},
				run: (*parser).callonStartsWithOption1,
				expr: &seqExpr{
					pos: position{line: 4861, col: 21, offset: 145384},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4861, col: 21, offset: 145384},
							val:        "startswith",
							ignoreCase: false,
							want:       "\"startswith\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4861, col: 34, offset: 145397},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4861, col: 40, offset: 145403},
							label: "strExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 4861, col: 48, offset: 145411},
								name: "TransactionFilterString",
							},
						},
					},
				},
			},
		},
		{
			name: "EndsWithOption",
			pos:  position{line: 4871, col: 1, offset: 145649},
			expr: &actionExpr{
				pos: position{line: 4871, col: 19, offset: 145667},
				run: (*parser).callonEndsWithOption1,
				expr: &seqExpr{
					pos: position{line: 4871, col: 19, offset: 145667},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4871, col: 19, offset: 145667},
							val:        "endswith",
							ignoreCase: false,
							want:       "\"endswith\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4871, col: 30, offset: 145678},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4871, col: 36, offset: 145684},
							label: "strExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 4871, col: 44, offset: 145692},
								name: "TransactionFilterString",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionFilterString",
			pos:  position{line: 4882, col: 1, offset: 145961},
			expr: &actionExpr{
				pos: position{line: 4882, col: 28, offset: 145988},
				run: (*parser).callonTransactionFilterString1,
				expr: &labeledExpr{
					pos:   position{line: 4882, col: 28, offset: 145988},
					label: "strExpr",
					expr: &choiceExpr{
						pos: position{line: 4882, col: 37, offset: 145997},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4882, col: 37, offset: 145997},
								name: "TransactionQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 4882, col: 63, offset: 146023},
								name: "TransactionEval",
							},
							&ruleRefExpr{
								pos:  position{line: 4882, col: 81, offset: 146041},
								name: "TransactionSearch",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionQuotedString",
			pos:  position{line: 4886, col: 1, offset: 146089},
			expr: &actionExpr{
				pos: position{line: 4886, col: 28, offset: 146116},
				run: (*parser).callonTransactionQuotedString1,
				expr: &labeledExpr{
					pos:   position{line: 4886, col: 28, offset: 146116},
					label: "str",
					expr: &choiceExpr{
						pos: position{line: 4886, col: 33, offset: 146121},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4886, col: 33, offset: 146121},
								name: "TransactionQuotedStringValue",
							},
							&ruleRefExpr{
								pos:  position{line: 4886, col: 64, offset: 146152},
								name: "TransactionQuotedStringSearchExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionQuotedStringSearchExpr",
			pos:  position{line: 4890, col: 1, offset: 146212},
			expr: &actionExpr{
				pos: position{line: 4890, col: 38, offset: 146249},
				run: (*parser).callonTransactionQuotedStringSearchExpr1,
				expr: &seqExpr{
					pos: position{line: 4890, col: 38, offset: 146249},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4890, col: 38, offset: 146249},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 4890, col: 42, offset: 146253},
							label: "searchClause",
							expr: &ruleRefExpr{
								pos:  position{line: 4890, col: 55, offset: 146266},
								name: "ClauseLevel4",
							},
						},
						&litMatcher{
							pos:        position{line: 4890, col: 68, offset: 146279},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedStringNoOp",
			pos:  position{line: 4898, col: 1, offset: 146418},
			expr: &actionExpr{
				pos: position{line: 4898, col: 21, offset: 146438},
				run: (*parser).callonQuotedStringNoOp1,
				expr: &seqExpr{
					pos: position{line: 4898, col: 21, offset: 146438},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4898, col: 21, offset: 146438},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 4898, col: 25, offset: 146442},
							expr: &charClassMatcher{
								pos:        position{line: 4898, col: 25, offset: 146442},
								val:        "[^\" !(OR / AND)]",
								chars:      []rune{'"', ' ', '!', '(', 'O', 'R', ' ', '/', ' ', 'A', 'N', 'D', ')'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 4898, col: 44, offset: 146461},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "TransactionQuotedStringValue",
			pos:  position{line: 4903, col: 1, offset: 146572},
			expr: &actionExpr{
				pos: position{line: 4903, col: 33, offset: 146604},
				run: (*parser).callonTransactionQuotedStringValue1,
				expr: &labeledExpr{
					pos:   position{line: 4903, col: 33, offset: 146604},
					label: "str",
					expr: &ruleRefExpr{
						pos:  position{line: 4903, col: 37, offset: 146608},
						name: "QuotedStringNoOp",
					},
				},
			},
		},
		{
			name: "TransactionSearch",
			pos:  position{line: 4911, col: 1, offset: 146763},
			expr: &actionExpr{
				pos: position{line: 4911, col: 22, offset: 146784},
				run: (*parser).callonTransactionSearch1,
				expr: &labeledExpr{
					pos:   position{line: 4911, col: 22, offset: 146784},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 4911, col: 27, offset: 146789},
						name: "ClauseLevel1",
					},
				},
			},
		},
		{
			name: "TransactionEval",
			pos:  position{line: 4921, col: 1, offset: 146961},
			expr: &actionExpr{
				pos: position{line: 4921, col: 20, offset: 146980},
				run: (*parser).callonTransactionEval1,
				expr: &seqExpr{
					pos: position{line: 4921, col: 20, offset: 146980},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4921, col: 20, offset: 146980},
							val:        "eval",
							ignoreCase: false,
							want:       "\"eval\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4921, col: 27, offset: 146987},
							name: "EMPTY_OR_SPACE",
						},
						&ruleRefExpr{
							pos:  position{line: 4921, col: 42, offset: 147002},
							name: "L_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 4921, col: 50, offset: 147010},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 4921, col: 60, offset: 147020},
								name: "BoolExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4921, col: 69, offset: 147029},
							name: "R_PAREN",
						},
					},
				},
			},
		},
		{
			name: "MultiValueBlock",
			pos:  position{line: 4931, col: 1, offset: 147332},
			expr: &actionExpr{
				pos: position{line: 4931, col: 20, offset: 147351},
				run: (*parser).callonMultiValueBlock1,
				expr: &seqExpr{
					pos: position{line: 4931, col: 20, offset: 147351},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4931, col: 20, offset: 147351},
							name: "PIPE",
						},
						&labeledExpr{
							pos:   position{line: 4931, col: 25, offset: 147356},
							label: "mvQueryAggNode",
							expr: &ruleRefExpr{
								pos:  position{line: 4931, col: 42, offset: 147373},
								name: "MakeMVBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "MakeMVBlock",
			pos:  position{line: 4935, col: 1, offset: 147422},
			expr: &actionExpr{
				pos: position{line: 4935, col: 16, offset: 147437},
				run: (*parser).callonMakeMVBlock1,
				expr: &seqExpr{
					pos: position{line: 4935, col: 16, offset: 147437},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4935, col: 16, offset: 147437},
							name: "CMD_MAKEMV",
						},
						&ruleRefExpr{
							pos:  position{line: 4935, col: 27, offset: 147448},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4935, col: 33, offset: 147454},
							label: "mvColOptionExpr",
							expr: &zeroOrOneExpr{
								pos: position{line: 4935, col: 50, offset: 147471},
								expr: &ruleRefExpr{
									pos:  position{line: 4935, col: 50, offset: 147471},
									name: "MVBlockOptionsList",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4935, col: 70, offset: 147491},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4935, col: 85, offset: 147506},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 4935, col: 91, offset: 147512},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "MVBlockOptionsList",
			pos:  position{line: 4963, col: 1, offset: 148252},
			expr: &actionExpr{
				pos: position{line: 4963, col: 23, offset: 148274},
				run: (*parser).callonMVBlockOptionsList1,
				expr: &seqExpr{
					pos: position{line: 4963, col: 23, offset: 148274},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4963, col: 23, offset: 148274},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 4963, col: 31, offset: 148282},
								name: "MVBlockOption",
							},
						},
						&labeledExpr{
							pos:   position{line: 4963, col: 46, offset: 148297},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 4963, col: 52, offset: 148303},
								expr: &seqExpr{
									pos: position{line: 4963, col: 53, offset: 148304},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 4963, col: 53, offset: 148304},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 4963, col: 59, offset: 148310},
											name: "MVBlockOption",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MVBlockOption",
			pos:  position{line: 4997, col: 1, offset: 149366},
			expr: &actionExpr{
				pos: position{line: 4997, col: 18, offset: 149383},
				run: (*parser).callonMVBlockOption1,
				expr: &labeledExpr{
					pos:   position{line: 4997, col: 18, offset: 149383},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 4997, col: 27, offset: 149392},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4997, col: 27, offset: 149392},
								name: "DelimOption",
							},
							&ruleRefExpr{
								pos:  position{line: 4997, col: 41, offset: 149406},
								name: "AllowEmptyOption",
							},
							&ruleRefExpr{
								pos:  position{line: 4997, col: 60, offset: 149425},
								name: "SetSvOption",
							},
						},
					},
				},
			},
		},
		{
			name: "DelimOption",
			pos:  position{line: 5001, col: 1, offset: 149466},
			expr: &actionExpr{
				pos: position{line: 5001, col: 16, offset: 149481},
				run: (*parser).callonDelimOption1,
				expr: &labeledExpr{
					pos:   position{line: 5001, col: 16, offset: 149481},
					label: "delimExpr",
					expr: &choiceExpr{
						pos: position{line: 5001, col: 28, offset: 149493},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 5001, col: 28, offset: 149493},
								name: "StringDelimiter",
							},
							&ruleRefExpr{
								pos:  position{line: 5001, col: 46, offset: 149511},
								name: "RegexDelimiter",
							},
						},
					},
				},
			},
		},
		{
			name: "StringDelimiter",
			pos:  position{line: 5005, col: 1, offset: 149558},
			expr: &actionExpr{
				pos: position{line: 5005, col: 20, offset: 149577},
				run: (*parser).callonStringDelimiter1,
				expr: &seqExpr{
					pos: position{line: 5005, col: 20, offset: 149577},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 5005, col: 20, offset: 149577},
							val:        "delim",
							ignoreCase: false,
							want:       "\"delim\"",
						},
						&ruleRefExpr{
							pos:  position{line: 5005, col: 28, offset: 149585},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 5005, col: 34, offset: 149591},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 5005, col: 38, offset: 149595},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexDelimiter",
			pos:  position{line: 5016, col: 1, offset: 149846},
			expr: &actionExpr{
				pos: position{line: 5016, col: 19, offset: 149864},
				run: (*parser).callonRegexDelimiter1,
				expr: &seqExpr{
					pos: position{line: 5016, col: 19, offset: 149864},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 5016, col: 19, offset: 149864},
							val:        "tokenizer",
							ignoreCase: false,
							want:       "\"tokenizer\"",
						},
						&ruleRefExpr{
							pos:  position{line: 5016, col: 31, offset: 149876},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 5016, col: 37, offset: 149882},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 5016, col: 41, offset: 149886},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "AllowEmptyOption",
			pos:  position{line: 5034, col: 1, offset: 150357},
			expr: &actionExpr{
				pos: position{line: 5034, col: 21, offset: 150377},
				run: (*parser).callonAllowEmptyOption1,
				expr: &seqExpr{
					pos: position{line: 5034, col: 21, offset: 150377},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 5034, col: 21, offset: 150377},
							val:        "allowempty",
							ignoreCase: false,
							want:       "\"allowempty\"",
						},
						&ruleRefExpr{
							pos:  position{line: 5034, col: 34, offset: 150390},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 5034, col: 40, offset: 150396},
							label: "boolVal",
							expr: &ruleRefExpr{
								pos:  position{line: 5034, col: 48, offset: 150404},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "SetSvOption",
			pos:  position{line: 5046, col: 1, offset: 150644},
			expr: &actionExpr{
				pos: position{line: 5046, col: 16, offset: 150659},
				run: (*parser).callonSetSvOption1,
				expr: &seqExpr{
					pos: position{line: 5046, col: 16, offset: 150659},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 5046, col: 16, offset: 150659},
							val:        "setsv",
							ignoreCase: false,
							want:       "\"setsv\"",
						},
						&ruleRefExpr{
							pos:  position{line: 5046, col: 24, offset: 150667},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 5046, col: 30, offset: 150673},
							label: "boolVal",
							expr: &ruleRefExpr{
								pos:  position{line: 5046, col: 38, offset: 150681},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "SPathBlock",
			pos:  position{line: 5058, col: 1, offset: 150946},
			expr: &actionExpr{
				pos: position{line: 5058, col: 15, offset: 150960},
				run: (*parser).callonSPathBlock1,
				expr: &seqExpr{
					pos: position{line: 5058, col: 15, offset: 150960},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 5058, col: 15, offset: 150960},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 5058, col: 20, offset: 150965},
							name: "CMD_SPATH",
						},
						&labeledExpr{
							pos:   position{line: 5058, col: 30, offset: 150975},
							label: "spathExpr",
							expr: &zeroOrOneExpr{
								pos: position{line: 5058, col: 40, offset: 150985},
								expr: &ruleRefExpr{
									pos:  position{line: 5058, col: 40, offset: 150985},
									name: "SPathArgumentsList",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SPathArgumentsList",
			pos:  position{line: 5065, col: 1, offset: 151111},
			expr: &actionExpr{
				pos: position{line: 5065, col: 23, offset: 151133},
				run: (*parser).callonSPathArgumentsList1,
				expr: &seqExpr{
					pos: position{line: 5065, col: 23, offset: 151133},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 5065, col: 23, offset: 151133},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 5065, col: 29, offset: 151139},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 5065, col: 35, offset: 151145},
								name: "SPathArgument",
							},
						},
						&labeledExpr{
							pos:   position{line: 5065, col: 49, offset: 151159},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 5065, col: 54, offset: 151164},
								expr: &seqExpr{
									pos: position{line: 5065, col: 55, offset: 151165},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 5065, col: 55, offset: 151165},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 5065, col: 61, offset: 151171},
											name: "SPathArgument",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SPathArgument",
			pos:  position{line: 5097, col: 1, offset: 152064},
			expr: &actionExpr{
				pos: position{line: 5097, col: 18, offset: 152081},
				run: (*parser).callonSPathArgument1,
				expr: &labeledExpr{
					pos:   position{line: 5097, col: 18, offset: 152081},
					label: "arg",
					expr: &choiceExpr{
						pos: position{line: 5097, col: 23, offset: 152086},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 5097, col: 23, offset: 152086},
								name: "InputField",
							},
							&ruleRefExpr{
								pos:  position{line: 5097, col: 36, offset: 152099},
								name: "OutputField",
							},
							&ruleRefExpr{
								pos:  position{line: 5097, col: 50, offset: 152113},
								name: "PathField",
							},
						},
					},
				},
			},
		},
		{
			name: "InputField",
			pos:  position{line: 5101, col: 1, offset: 152149},
			expr: &actionExpr{
				pos: position{line: 5101, col: 15, offset: 152163},
				run: (*parser).callonInputField1,
				expr: &seqExpr{
					pos: position{line: 5101, col: 15, offset: 152163},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 5101, col: 15, offset: 152163},
							val:        "input",
							ignoreCase: false,
							want:       "\"input\"",
						},
						&ruleRefExpr{
							pos:  position{line: 5101, col: 23, offset: 152171},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 5101, col: 29, offset: 152177},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 5101, col: 35, offset: 152183},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "OutputField",
			pos:  position{line: 5104, col: 1, offset: 152239},
			expr: &actionExpr{
				pos: position{line: 5104, col: 16, offset: 152254},
				run: (*parser).callonOutputField1,
				expr: &seqExpr{
					pos: position{line: 5104, col: 16, offset: 152254},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 5104, col: 16, offset: 152254},
							val:        "output",
							ignoreCase: false,
							want:       "\"output\"",
						},
						&ruleRefExpr{
							pos:  position{line: 5104, col: 25, offset: 152263},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 5104, col: 31, offset: 152269},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 5104, col: 37, offset: 152275},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "PathField",
			pos:  position{line: 5107, col: 1, offset: 152332},
			expr: &actionExpr{
				pos: position{line: 5107, col: 14, offset: 152345},
				run: (*parser).callonPathField1,
				expr: &choiceExpr{
					pos: position{line: 5107, col: 15, offset: 152346},
					alternatives: []any{
						&seqExpr{
							pos: position{line: 5107, col: 15, offset: 152346},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 5107, col: 15, offset: 152346},
									val:        "path",
									ignoreCase: false,
									want:       "\"path\"",
								},
								&ruleRefExpr{
									pos:  position{line: 5107, col: 22, offset: 152353},
									name: "EQUAL",
								},
								&ruleRefExpr{
									pos:  position{line: 5107, col: 28, offset: 152359},
									name: "SPathFieldString",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 5107, col: 47, offset: 152378},
							name: "SPathFieldString",
						},
					},
				},
			},
		},
		{
			name: "SPathFieldString",
			pos:  position{line: 5119, col: 1, offset: 152790},
			expr: &choiceExpr{
				pos: position{line: 5119, col: 21, offset: 152810},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 5119, col: 21, offset: 152810},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 5119, col: 36, offset: 152825},
						name: "UnquotedStringWithTemplateWildCard",
					},
				},
			},
		},
		{
			name: "FormatBlock",
			pos:  position{line: 5122, col: 1, offset: 152898},
			expr: &actionExpr{
				pos: position{line: 5122, col: 16, offset: 152913},
				run: (*parser).callonFormatBlock1,
				expr: &seqExpr{
					pos: position{line: 5122, col: 16, offset: 152913},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 5122, col: 16, offset: 152913},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 5122, col: 21, offset: 152918},
							name: "CMD_FORMAT",
						},
						&labeledExpr{
							pos:   position{line: 5122, col: 32, offset: 152929},
							label: "formatArgExpr",
							expr: &zeroOrOneExpr{
								pos: position{line: 5122, col: 46, offset: 152943},
								expr: &ruleRefExpr{
									pos:  position{line: 5122, col: 46, offset: 152943},
									name: "FormatArgumentsList",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FormatArgumentsList",
			pos:  position{line: 5144, col: 1, offset: 153552},
			expr: &actionExpr{
				pos: position{line: 5144, col: 24, offset: 153575},
				run: (*parser).callonFormatArgumentsList1,
				expr: &seqExpr{
					pos: position{line: 5144, col: 24, offset: 153575},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 5144, col: 24, offset: 153575},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 5144, col: 30, offset: 153581},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 5144, col: 37, offset: 153588},
								name: "FormatArgument",
							},
						},
						&labeledExpr{
							pos:   position{line: 5144, col: 52, offset: 153603},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 5144, col: 57, offset: 153608},
								expr: &seqExpr{
									pos: position{line: 5144, col: 58, offset: 153609},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 5144, col: 58, offset: 153609},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 5144, col: 64, offset: 153615},
											name: "FormatArgument",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FormatArgument",
			pos:  position{line: 5178, col: 1, offset: 154804},
			expr: &actionExpr{
				pos: position{line: 5178, col: 19, offset: 154822},
				run: (*parser).callonFormatArgument1,
				expr: &labeledExpr{
					pos:   position{line: 5178, col: 19, offset: 154822},
					label: "argExpr",
					expr: &choiceExpr{
						pos: position{line: 5178, col: 28, offset: 154831},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 5178, col: 28, offset: 154831},
								name: "FormatSeparator",
							},
							&ruleRefExpr{
								pos:  position{line: 5178, col: 46, offset: 154849},
								name: "FormatMaxResults",
							},
							&ruleRefExpr{
								pos:  position{line: 5178, col: 65, offset: 154868},
								name: "FormatEmptyStr",
							},
							&ruleRefExpr{
								pos:  position{line: 5178, col: 82, offset: 154885},
								name: "FormatRowColOptions",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatSeparator",
			pos:  position{line: 5182, col: 1, offset: 154935},
			expr: &actionExpr{
				pos: position{line: 5182, col: 20, offset: 154954},
				run: (*parser).callonFormatSeparator1,
				expr: &seqExpr{
					pos: position{line: 5182, col: 20, offset: 154954},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 5182, col: 20, offset: 154954},
							val:        "mvsep",
							ignoreCase: false,
							want:       "\"mvsep\"",
						},
						&ruleRefExpr{
							pos:  position{line: 5182, col: 28, offset: 154962},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 5182, col: 34, offset: 154968},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 5182, col: 38, offset: 154972},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatMaxResults",
			pos:  position{line: 5191, col: 1, offset: 155184},
			expr: &actionExpr{
				pos: position{line: 5191, col: 21, offset: 155204},
				run: (*parser).callonFormatMaxResults1,
				expr: &seqExpr{
					pos: position{line: 5191, col: 21, offset: 155204},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 5191, col: 21, offset: 155204},
							val:        "maxresults",
							ignoreCase: false,
							want:       "\"maxresults\"",
						},
						&ruleRefExpr{
							pos:  position{line: 5191, col: 34, offset: 155217},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 5191, col: 40, offset: 155223},
							label: "numStr",
							expr: &ruleRefExpr{
								pos:  position{line: 5191, col: 47, offset: 155230},
								name: "IntegerAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatEmptyStr",
			pos:  position{line: 5204, col: 1, offset: 155636},
			expr: &actionExpr{
				pos: position{line: 5204, col: 19, offset: 155654},
				run: (*parser).callonFormatEmptyStr1,
				expr: &seqExpr{
					pos: position{line: 5204, col: 19, offset: 155654},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 5204, col: 19, offset: 155654},
							val:        "emptystr",
							ignoreCase: false,
							want:       "\"emptystr\"",
						},
						&ruleRefExpr{
							pos:  position{line: 5204, col: 30, offset: 155665},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 5204, col: 36, offset: 155671},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 5204, col: 40, offset: 155675},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatRowColOptions",
			pos:  position{line: 5213, col: 1, offset: 155890},
			expr: &actionExpr{
				pos: position{line: 5213, col: 24, offset: 155913},
				run: (*parser).callonFormatRowColOptions1,
				expr: &seqExpr{
					pos: position{line: 5213, col: 24, offset: 155913},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 5213, col: 24, offset: 155913},
							label: "rowPrefix",
							expr: &ruleRefExpr{
								pos:  position{line: 5213, col: 34, offset: 155923},
								name: "QuotedString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 5213, col: 47, offset: 155936},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 5213, col: 53, offset: 155942},
							label: "colPrefix",
							expr: &ruleRefExpr{
								pos:  position{line: 5213, col: 63, offset: 155952},
								name: "QuotedString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 5213, col: 76, offset: 155965},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 5213, col: 82, offset: 155971},
							label: "colSeparator",
							expr: &ruleRefExpr{
								pos:  position{line: 5213, col: 95, offset: 155984},
								name: "QuotedString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 5213, col: 108, offset: 155997},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 5213, col: 114, offset: 156003},
							label: "colEnd",
							expr: &ruleRefExpr{
								pos:  position{line: 5213, col: 121, offset: 156010},
								name: "QuotedString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 5213, col: 134, offset: 156023},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 5213, col: 140, offset: 156029},
							label: "rowSeparator",
							expr: &ruleRefExpr{
								pos:  position{line: 5213, col: 153, offset: 156042},
								name: "QuotedString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 5213, col: 166, offset: 156055},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 5213, col: 172, offset: 156061},
							label: "rowEnd",
							expr: &ruleRefExpr{
								pos:  position{line: 5213, col: 179, offset: 156068},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "EventCountBlock",
			pos:  position{line: 5231, col: 1, offset: 156644},
			expr: &actionExpr{
				pos: position{line: 5231, col: 20, offset: 156663},
				run: (*parser).callonEventCountBlock1,
				expr: &seqExpr{
					pos: position{line: 5231, col: 20, offset: 156663},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 5231, col: 20, offset: 156663},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 5231, col: 25, offset: 156668},
							name: "CMD_EVENTCOUNT",
						},
						&labeledExpr{
							pos:   position{line: 5231, col: 40, offset: 156683},
							label: "eventCountExpr",
							expr: &zeroOrOneExpr{
								pos: position{line: 5231, col: 55, offset: 156698},
								expr: &ruleRefExpr{
									pos:  position{line: 5231, col: 55, offset: 156698},
									name: "EventCountArgumentsList",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EventCountArgumentsList",
			pos:  position{line: 5238, col: 1, offset: 156851},
			expr: &actionExpr{
				pos: position{line: 5238, col: 28, offset: 156878},
				run: (*parser).callonEventCountArgumentsList1,
				expr: &seqExpr{
					pos: position{line: 5238, col: 28, offset: 156878},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 5238, col: 28, offset: 156878},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 5238, col: 34, offset: 156884},
							label: "first",
							expr: &zeroOrOneExpr{
								pos: position{line: 5238, col: 40, offset: 156890},
								expr: &ruleRefExpr{
									pos:  position{line: 5238, col: 40, offset: 156890},
									name: "EventCountArgument",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 5238, col: 60, offset: 156910},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 5238, col: 65, offset: 156915},
								expr: &seqExpr{
									pos: position{line: 5238, col: 66, offset: 156916},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 5238, col: 66, offset: 156916},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 5238, col: 72, offset: 156922},
											name: "EventCountArgument",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EventCountArgument",
			pos:  position{line: 5294, col: 1, offset: 158799},
			expr: &actionExpr{
				pos: position{line: 5294, col: 23, offset: 158821},
				run: (*parser).callonEventCountArgument1,
				expr: &labeledExpr{
					pos:   position{line: 5294, col: 23, offset: 158821},
					label: "arg",
					expr: &choiceExpr{
						pos: position{line: 5294, col: 28, offset: 158826},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 5294, col: 28, offset: 158826},
								name: "IndexField",
							},
							&ruleRefExpr{
								pos:  position{line: 5294, col: 41, offset: 158839},
								name: "SummarizeField",
							},
							&ruleRefExpr{
								pos:  position{line: 5294, col: 58, offset: 158856},
								name: "ReportSizeField",
							},
							&ruleRefExpr{
								pos:  position{line: 5294, col: 76, offset: 158874},
								name: "ListVixField",
							},
						},
					},
				},
			},
		},
		{
			name: "IndexField",
			pos:  position{line: 5298, col: 1, offset: 158913},
			expr: &actionExpr{
				pos: position{line: 5298, col: 15, offset: 158927},
				run: (*parser).callonIndexField1,
				expr: &seqExpr{
					pos: position{line: 5298, col: 15, offset: 158927},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 5298, col: 15, offset: 158927},
							val:        "index",
							ignoreCase: false,
							want:       "\"index\"",
						},
						&ruleRefExpr{
							pos:  position{line: 5298, col: 23, offset: 158935},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 5298, col: 29, offset: 158941},
							label: "index",
							expr: &ruleRefExpr{
								pos:  position{line: 5298, col: 35, offset: 158947},
								name: "IndexName",
							},
						},
					},
				},
			},
		},
		{
			name: "SummarizeField",
			pos:  position{line: 5301, col: 1, offset: 159003},
			expr: &actionExpr{
				pos: position{line: 5301, col: 19, offset: 159021},
				run: (*parser).callonSummarizeField1,
				expr: &seqExpr{
					pos: position{line: 5301, col: 19, offset: 159021},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 5301, col: 19, offset: 159021},
							val:        "summarize",
							ignoreCase: false,
							want:       "\"summarize\"",
						},
						&ruleRefExpr{
							pos:  position{line: 5301, col: 31, offset: 159033},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 5301, col: 37, offset: 159039},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 5301, col: 43, offset: 159045},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "ReportSizeField",
			pos:  position{line: 5304, col: 1, offset: 159121},
			expr: &actionExpr{
				pos: position{line: 5304, col: 20, offset: 159140},
				run: (*parser).callonReportSizeField1,
				expr: &seqExpr{
					pos: position{line: 5304, col: 20, offset: 159140},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 5304, col: 20, offset: 159140},
							val:        "report_size",
							ignoreCase: false,
							want:       "\"report_size\"",
						},
						&ruleRefExpr{
							pos:  position{line: 5304, col: 34, offset: 159154},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 5304, col: 40, offset: 159160},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 5304, col: 46, offset: 159166},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "ListVixField",
			pos:  position{line: 5307, col: 1, offset: 159244},
			expr: &actionExpr{
				pos: position{line: 5307, col: 17, offset: 159260},
				run: (*parser).callonListVixField1,
				expr: &seqExpr{
					pos: position{line: 5307, col: 17, offset: 159260},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 5307, col: 17, offset: 159260},
							val:        "list_vix",
							ignoreCase: false,
							want:       "\"list_vix\"",
						},
						&ruleRefExpr{
							pos:  position{line: 5307, col: 28, offset: 159271},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 5307, col: 34, offset: 159277},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 5307, col: 40, offset: 159283},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "IndexName",
			pos:  position{line: 5311, col: 1, offset: 159359},
			expr: &actionExpr{
				pos: position{line: 5311, col: 14, offset: 159372},
				run: (*parser).callonIndexName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 5311, col: 14, offset: 159372},
					expr: &seqExpr{
						pos: position{line: 5311, col: 15, offset: 159373},
						exprs: []any{
							&notExpr{
								pos: position{line: 5311, col: 15, offset: 159373},
								expr: &ruleRefExpr{
									pos:  position{line: 5311, col: 16, offset: 159374},
									name: "SPACE",
								},
							},
							&anyMatcher{
								line: 5311, col: 22, offset: 159380,
							},
						},
					},
				},
			},
		},
		{
			name: "FillNullBlock",
			pos:  position{line: 5316, col: 1, offset: 159453},
			expr: &actionExpr{
				pos: position{line: 5316, col: 18, offset: 159470},
				run: (*parser).callonFillNullBlock1,
				expr: &seqExpr{
					pos: position{line: 5316, col: 18, offset: 159470},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 5316, col: 18, offset: 159470},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 5316, col: 23, offset: 159475},
							name: "CMD_FILLNULL",
						},
						&labeledExpr{
							pos:   position{line: 5316, col: 36, offset: 159488},
							label: "valueOption",
							expr: &zeroOrOneExpr{
								pos: position{line: 5316, col: 49, offset: 159501},
								expr: &ruleRefExpr{
									pos:  position{line: 5316, col: 49, offset: 159501},
									name: "FillNullValueOption",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 5316, col: 70, offset: 159522},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 5316, col: 77, offset: 159529},
								expr: &ruleRefExpr{
									pos:  position{line: 5316, col: 77, offset: 159529},
									name: "FillNullFieldList",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FillNullValueOption",
			pos:  position{line: 5345, col: 1, offset: 160256},
			expr: &actionExpr{
				pos: position{line: 5345, col: 24, offset: 160279},
				run: (*parser).callonFillNullValueOption1,
				expr: &seqExpr{
					pos: position{line: 5345, col: 24, offset: 160279},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 5345, col: 24, offset: 160279},
							name: "SPACE",
						},
						&litMatcher{
							pos:        position{line: 5345, col: 30, offset: 160285},
							val:        "value",
							ignoreCase: false,
							want:       "\"value\"",
						},
						&ruleRefExpr{
							pos:  position{line: 5345, col: 38, offset: 160293},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 5345, col: 44, offset: 160299},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 5345, col: 48, offset: 160303},
								name: "String",
							},
						},
					},
				},
			},
		},
		{
			name: "FillNullFieldList",
			pos:  position{line: 5349, col: 1, offset: 160349},
			expr: &actionExpr{
				pos: position{line: 5349, col: 22, offset: 160370},
				run: (*parser).callonFillNullFieldList1,
				expr: &seqExpr{
					pos: position{line: 5349, col: 22, offset: 160370},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 5349, col: 22, offset: 160370},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 5349, col: 28, offset: 160376},
							label: "fieldList",
							expr: &ruleRefExpr{
								pos:  position{line: 5349, col: 38, offset: 160386},
								name: "SpaceSeparatedFieldNameList",
							},
						},
					},
				},
			},
		},
		{
			name: "MvexpandBlock",
			pos:  position{line: 5353, col: 1, offset: 160445},
			expr: &actionExpr{
				pos: position{line: 5353, col: 18, offset: 160462},
				run: (*parser).callonMvexpandBlock1,
				expr: &seqExpr{
					pos: position{line: 5353, col: 18, offset: 160462},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 5353, col: 18, offset: 160462},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 5353, col: 23, offset: 160467},
							name: "CMD_MVEXPAND",
						},
						&labeledExpr{
							pos:   position{line: 5353, col: 36, offset: 160480},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 5353, col: 42, offset: 160486},
								name: "MvexpandField",
							},
						},
						&labeledExpr{
							pos:   position{line: 5353, col: 56, offset: 160500},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 5353, col: 62, offset: 160506},
								expr: &ruleRefExpr{
									pos:  position{line: 5353, col: 62, offset: 160506},
									name: "MvexpandLimit",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MvexpandField",
			pos:  position{line: 5383, col: 1, offset: 161240},
			expr: &actionExpr{
				pos: position{line: 5383, col: 18, offset: 161257},
				run: (*parser).callonMvexpandField1,
				expr: &seqExpr{
					pos: position{line: 5383, col: 18, offset: 161257},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 5383, col: 18, offset: 161257},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 5383, col: 24, offset: 161263},
							label: "fieldName",
							expr: &ruleRefExpr{
								pos:  position{line: 5383, col: 34, offset: 161273},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "MvexpandLimit",
			pos:  position{line: 5387, col: 1, offset: 161314},
			expr: &actionExpr{
				pos: position{line: 5387, col: 18, offset: 161331},
				run: (*parser).callonMvexpandLimit1,
				expr: &seqExpr{
					pos: position{line: 5387, col: 18, offset: 161331},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 5387, col: 18, offset: 161331},
							name: "SPACE",
						},
						&litMatcher{
							pos:        position{line: 5387, col: 24, offset: 161337},
							val:        "limit",
							ignoreCase: false,
							want:       "\"limit\"",
						},
						&ruleRefExpr{
							pos:  position{line: 5387, col: 32, offset: 161345},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 5387, col: 38, offset: 161351},
							label: "intValue",
							expr: &ruleRefExpr{
								pos:  position{line: 5387, col: 47, offset: 161360},
								name: "IntegerAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 5391, col: 1, offset: 161406},
			expr: &actionExpr{
				pos: position{line: 5391, col: 16, offset: 161421},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 5391, col: 16, offset: 161421},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 5391, col: 16, offset: 161421},
							name: "SPACE",
						},
						&ruleRefExpr{
							pos:  position{line: 5391, col: 22, offset: 161427},
							name: "CMD_WHERE",
						},
						&labeledExpr{
							pos:   position{line: 5391, col: 32, offset: 161437},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 5391, col: 42, offset: 161447},
								name: "BoolExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "InputLookupOptionAppend",
			pos:  position{line: 5395, col: 1, offset: 161507},
			expr: &actionExpr{
				pos: position{line: 5395, col: 28, offset: 161534},
				run: (*parser).callonInputLookupOptionAppend1,
				expr: &seqExpr{
					pos: position{line: 5395, col: 28, offset: 161534},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 5395, col: 28, offset: 161534},
							val:        "append",
							ignoreCase: false,
							want:       "\"append\"",
						},
						&ruleRefExpr{
							pos:  position{line: 5395, col: 37, offset: 161543},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 5395, col: 43, offset: 161549},
							label: "boolVal",
							expr: &ruleRefExpr{
								pos:  position{line: 5395, col: 51, offset: 161557},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "InputLookupOptionStrict",
			pos:  position{line: 5404, col: 1, offset: 161741},
			expr: &actionExpr{
				pos: position{line: 5404, col: 28, offset: 161768},
				run: (*parser).callonInputLookupOptionStrict1,
				expr: &seqExpr{
					pos: position{line: 5404, col: 28, offset: 161768},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 5404, col: 28, offset: 161768},
							val:        "strict",
							ignoreCase: false,
							want:       "\"strict\"",
						},
						&ruleRefExpr{
							pos:  position{line: 5404, col: 37, offset: 161777},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 5404, col: 43, offset: 161783},
							label: "boolVal",
							expr: &ruleRefExpr{
								pos:  position{line: 5404, col: 51, offset: 161791},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "InputLookupOptionStart",
			pos:  position{line: 5413, col: 1, offset: 161975},
			expr: &actionExpr{
				pos: position{line: 5413, col: 27, offset: 162001},
				run: (*parser).callonInputLookupOptionStart1,
				expr: &seqExpr{
					pos: position{line: 5413, col: 27, offset: 162001},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 5413, col: 27, offset: 162001},
							val:        "start",
							ignoreCase: false,
							want:       "\"start\"",
						},
						&ruleRefExpr{
							pos:  position{line: 5413, col: 35, offset: 162009},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 5413, col: 41, offset: 162015},
							label: "posInt",
							expr: &ruleRefExpr{
								pos:  position{line: 5413, col: 48, offset: 162022},
								name: "PositiveInteger",
							},
						},
					},
				},
			},
		},
		{
			name: "InputLookupOptionMax",
			pos:  position{line: 5422, col: 1, offset: 162213},
			expr: &actionExpr{
				pos: position{line: 5422, col: 25, offset: 162237},
				run: (*parser).callonInputLookupOptionMax1,
				expr: &seqExpr{
					pos: position{line: 5422, col: 25, offset: 162237},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 5422, col: 25, offset: 162237},
							val:        "max",
							ignoreCase: false,
							want:       "\"max\"",
						},
						&ruleRefExpr{
							pos:  position{line: 5422, col: 31, offset: 162243},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 5422, col: 37, offset: 162249},
							label: "posInt",
							expr: &ruleRefExpr{
								pos:  position{line: 5422, col: 44, offset: 162256},
								name: "PositiveInteger",
							},
						},
					},
				},
			},
		},
		{
			name: "InputLookupOption",
			pos:  position{line: 5431, col: 1, offset: 162443},
			expr: &actionExpr{
				pos: position{line: 5431, col: 22, offset: 162464},
				run: (*parser).callonInputLookupOption1,
				expr: &labeledExpr{
					pos:   position{line: 5431, col: 22, offset: 162464},
					label: "inputLookupOption",
					expr: &choiceExpr{
						pos: position{line: 5431, col: 41, offset: 162483},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 5431, col: 41, offset: 162483},
								name: "InputLookupOptionAppend",
							},
							&ruleRefExpr{
								pos:  position{line: 5431, col: 67, offset: 162509},
								name: "InputLookupOptionStrict",
							},
							&ruleRefExpr{
								pos:  position{line: 5431, col: 93, offset: 162535},
								name: "InputLookupOptionStart",
							},
							&ruleRefExpr{
								pos:  position{line: 5431, col: 118, offset: 162560},
								name: "InputLookupOptionMax",
							},
						},
					},
				},
			},
		},
		{
			name: "InputLookupOptionList",
			pos:  position{line: 5435, col: 1, offset: 162621},
			expr: &actionExpr{
				pos: position{line: 5435, col: 26, offset: 162646},
				run: (*parser).callonInputLookupOptionList1,
				expr: &seqExpr{
					pos: position{line: 5435, col: 26, offset: 162646},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 5435, col: 26, offset: 162646},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 5435, col: 34, offset: 162654},
								name: "InputLookupOption",
							},
						},
						&labeledExpr{
							pos:   position{line: 5435, col: 53, offset: 162673},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 5435, col: 58, offset: 162678},
								expr: &seqExpr{
									pos: position{line: 5435, col: 59, offset: 162679},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 5435, col: 59, offset: 162679},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 5435, col: 65, offset: 162685},
											name: "InputLookupOption",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InputLookupBlock",
			pos:  position{line: 5477, col: 1, offset: 164131},
			expr: &actionExpr{
				pos: position{line: 5477, col: 21, offset: 164151},
				run: (*parser).callonInputLookupBlock1,
				expr: &seqExpr{
					pos: position{line: 5477, col: 21, offset: 164151},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 5477, col: 21, offset: 164151},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 5477, col: 26, offset: 164156},
							name: "CMD_INPUTLOOKUP",
						},
						&labeledExpr{
							pos:   position{line: 5477, col: 42, offset: 164172},
							label: "inputLookupOption",
							expr: &zeroOrOneExpr{
								pos: position{line: 5477, col: 60, offset: 164190},
								expr: &seqExpr{
									pos: position{line: 5477, col: 61, offset: 164191},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 5477, col: 61, offset: 164191},
											name: "InputLookupOptionList",
										},
										&ruleRefExpr{
											pos:  position{line: 5477, col: 83, offset: 164213},
											name: "SPACE",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 5477, col: 91, offset: 164221},
							label: "filename",
							expr: &ruleRefExpr{
								pos:  position{line: 5477, col: 101, offset: 164231},
								name: "String",
							},
						},
						&labeledExpr{
							pos:   position{line: 5477, col: 109, offset: 164239},
							label: "whereClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 5477, col: 121, offset: 164251},
								expr: &ruleRefExpr{
									pos:  position{line: 5477, col: 122, offset: 164252},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InputLookupAggBlock",
			pos:  position{line: 5499, col: 1, offset: 164902},
			expr: &actionExpr{
				pos: position{line: 5499, col: 24, offset: 164925},
				run: (*parser).callonInputLookupAggBlock1,
				expr: &labeledExpr{
					pos:   position{line: 5499, col: 24, offset: 164925},
					label: "inputLookupBlock",
					expr: &ruleRefExpr{
						pos:  position{line: 5499, col: 41, offset: 164942},
						name: "InputLookupBlock",
					},
				},
			},
		},
		{
			name: "ALLCMD",
			pos:  position{line: 5511, col: 1, offset: 165334},
			expr: &choiceExpr{
				pos: position{line: 5511, col: 12, offset: 165345},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 5511, col: 12, offset: 165345},
						name: "CMD_REGEX",
					},
					&ruleRefExpr{
						pos:  position{line: 5511, col: 24, offset: 165357},
						name: "CMD_STATS",
					},
					&ruleRefExpr{
						pos:  position{line: 5511, col: 36, offset: 165369},
						name: "CMD_FIELDS",
					},
					&ruleRefExpr{
						pos:  position{line: 5511, col: 49, offset: 165382},
						name: "CMD_WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 5511, col: 61, offset: 165394},
						name: "CMD_HEAD_NO_SPACE",
					},
					&ruleRefExpr{
						pos:  position{line: 5511, col: 81, offset: 165414},
						name: "CMD_HEAD",
					},
					&ruleRefExpr{
						pos:  position{line: 5511, col: 92, offset: 165425},
						name: "CMD_TAIL_NO_SPACE",
					},
					&ruleRefExpr{
						pos:  position{line: 5511, col: 112, offset: 165445},
						name: "CMD_TAIL",
					},
					&ruleRefExpr{
						pos:  position{line: 5511, col: 123, offset: 165456},
						name: "CMD_EVAL",
					},
					&ruleRefExpr{
						pos:  position{line: 5511, col: 134, offset: 165467},
						name: "CMD_REX",
					},
					&ruleRefExpr{
						pos:  position{line: 5511, col: 144, offset: 165477},
						name: "CMD_TOP",
					},
					&ruleRefExpr{
						pos:  position{line: 5511, col: 154, offset: 165487},
						name: "CMD_RARE",
					},
					&ruleRefExpr{
						pos:  position{line: 5511, col: 165, offset: 165498},
						name: "CMD_RENAME",
					},
					&ruleRefExpr{
						pos:  position{line: 5511, col: 178, offset: 165511},
						name: "CMD_TIMECHART",
					},
					&ruleRefExpr{
						pos:  position{line: 5511, col: 194, offset: 165527},
						name: "CMD_TRANSACTION",
					},
					&ruleRefExpr{
						pos:  position{line: 5511, col: 212, offset: 165545},
						name: "CMD_DEDUP",
					},
					&ruleRefExpr{
						pos:  position{line: 5511, col: 224, offset: 165557},
						name: "CMD_SORT",
					},
					&ruleRefExpr{
						pos:  position{line: 5511, col: 235, offset: 165568},
						name: "CMD_MAKEMV",
					},
					&ruleRefExpr{
						pos:  position{line: 5511, col: 248, offset: 165581},
						name: "CMD_SPATH",
					},
					&ruleRefExpr{
						pos:  position{line: 5511, col: 260, offset: 165593},
						name: "CMD_FORMAT",
					},
					&ruleRefExpr{
						pos:  position{line: 5511, col: 273, offset: 165606},
						name: "CMD_EARLIEST",
					},
					&ruleRefExpr{
						pos:  position{line: 5511, col: 288, offset: 165621},
						name: "CMD_LATEST",
					},
					&ruleRefExpr{
						pos:  position{line: 5511, col: 301, offset: 165634},
						name: "CMD_EVENTCOUNT",
					},
					&ruleRefExpr{
						pos:  position{line: 5511, col: 318, offset: 165651},
						name: "CMD_BIN",
					},
					&ruleRefExpr{
						pos:  position{line: 5511, col: 328, offset: 165661},
						name: "CMD_STREAMSTATS",
					},
					&ruleRefExpr{
						pos:  position{line: 5511, col: 346, offset: 165679},
						name: "CMD_FILLNULL",
					},
					&ruleRefExpr{
						pos:  position{line: 5511, col: 361, offset: 165694},
						name: "CMD_MVEXPAND",
					},
					&ruleRefExpr{
						pos:  position{line: 5511, col: 376, offset: 165709},
						name: "CMD_GENTIMES",
					},
					&ruleRefExpr{
						pos:  position{line: 5511, col: 391, offset: 165724},
						name: "CMD_INPUTLOOKUP",
					},
				},
			},
		},
		{
			name: "CMD_SEARCH",
			pos:  position{line: 5512, col: 1, offset: 165741},
			expr: &seqExpr{
				pos: position{line: 5512, col: 15, offset: 165755},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5512, col: 15, offset: 165755},
						val:        "search",
						ignoreCase: false,
						want:       "\"search\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5512, col: 24, offset: 165764},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_REGEX",
			pos:  position{line: 5513, col: 1, offset: 165770},
			expr: &seqExpr{
				pos: position{line: 5513, col: 14, offset: 165783},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5513, col: 14, offset: 165783},
						val:        "regex",
						ignoreCase: false,
						want:       "\"regex\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5513, col: 22, offset: 165791},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_STATS",
			pos:  position{line: 5514, col: 1, offset: 165797},
			expr: &seqExpr{
				pos: position{line: 5514, col: 14, offset: 165810},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5514, col: 14, offset: 165810},
						val:        "stats",
						ignoreCase: false,
						want:       "\"stats\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5514, col: 22, offset: 165818},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_STREAMSTATS",
			pos:  position{line: 5515, col: 1, offset: 165824},
			expr: &seqExpr{
				pos: position{line: 5515, col: 20, offset: 165843},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5515, col: 20, offset: 165843},
						val:        "streamstats",
						ignoreCase: false,
						want:       "\"streamstats\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5515, col: 34, offset: 165857},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_FIELDS",
			pos:  position{line: 5516, col: 1, offset: 165863},
			expr: &seqExpr{
				pos: position{line: 5516, col: 15, offset: 165877},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5516, col: 15, offset: 165877},
						val:        "fields",
						ignoreCase: false,
						want:       "\"fields\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5516, col: 24, offset: 165886},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_WHERE",
			pos:  position{line: 5517, col: 1, offset: 165892},
			expr: &seqExpr{
				pos: position{line: 5517, col: 14, offset: 165905},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5517, col: 14, offset: 165905},
						val:        "where",
						ignoreCase: false,
						want:       "\"where\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5517, col: 22, offset: 165913},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_HEAD_NO_SPACE",
			pos:  position{line: 5518, col: 1, offset: 165919},
			expr: &litMatcher{
				pos:        position{line: 5518, col: 22, offset: 165940},
				val:        "head",
				ignoreCase: false,
				want:       "\"head\"",
			},
		},
		{
			name: "CMD_HEAD",
			pos:  position{line: 5519, col: 1, offset: 165947},
			expr: &seqExpr{
				pos: position{line: 5519, col: 13, offset: 165959},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 5519, col: 13, offset: 165959},
						name: "CMD_HEAD_NO_SPACE",
					},
					&ruleRefExpr{
						pos:  position{line: 5519, col: 31, offset: 165977},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_TAIL_NO_SPACE",
			pos:  position{line: 5520, col: 1, offset: 165983},
			expr: &litMatcher{
				pos:        position{line: 5520, col: 22, offset: 166004},
				val:        "tail",
				ignoreCase: false,
				want:       "\"tail\"",
			},
		},
		{
			name: "CMD_TAIL",
			pos:  position{line: 5521, col: 1, offset: 166011},
			expr: &seqExpr{
				pos: position{line: 5521, col: 13, offset: 166023},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 5521, col: 13, offset: 166023},
						name: "CMD_TAIL_NO_SPACE",
					},
					&ruleRefExpr{
						pos:  position{line: 5521, col: 31, offset: 166041},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_EVAL",
			pos:  position{line: 5522, col: 1, offset: 166047},
			expr: &seqExpr{
				pos: position{line: 5522, col: 13, offset: 166059},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5522, col: 13, offset: 166059},
						val:        "eval",
						ignoreCase: false,
						want:       "\"eval\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5522, col: 20, offset: 166066},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_REX",
			pos:  position{line: 5523, col: 1, offset: 166072},
			expr: &seqExpr{
				pos: position{line: 5523, col: 12, offset: 166083},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5523, col: 12, offset: 166083},
						val:        "rex",
						ignoreCase: false,
						want:       "\"rex\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5523, col: 18, offset: 166089},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_SORT",
			pos:  position{line: 5524, col: 1, offset: 166095},
			expr: &seqExpr{
				pos: position{line: 5524, col: 13, offset: 166107},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5524, col: 13, offset: 166107},
						val:        "sort",
						ignoreCase: false,
						want:       "\"sort\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5524, col: 20, offset: 166114},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_TOP",
			pos:  position{line: 5525, col: 1, offset: 166120},
			expr: &litMatcher{
				pos:        position{line: 5525, col: 12, offset: 166131},
				val:        "top",
				ignoreCase: false,
				want:       "\"top\"",
			},
		},
		{
			name: "CMD_RARE",
			pos:  position{line: 5526, col: 1, offset: 166137},
			expr: &litMatcher{
				pos:        position{line: 5526, col: 13, offset: 166149},
				val:        "rare",
				ignoreCase: false,
				want:       "\"rare\"",
			},
		},
		{
			name: "CMD_RENAME",
			pos:  position{line: 5527, col: 1, offset: 166156},
			expr: &seqExpr{
				pos: position{line: 5527, col: 15, offset: 166170},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5527, col: 15, offset: 166170},
						val:        "rename",
						ignoreCase: false,
						want:       "\"rename\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5527, col: 24, offset: 166179},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_TIMECHART",
			pos:  position{line: 5528, col: 1, offset: 166185},
			expr: &seqExpr{
				pos: position{line: 5528, col: 18, offset: 166202},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5528, col: 18, offset: 166202},
						val:        "timechart",
						ignoreCase: false,
						want:       "\"timechart\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5528, col: 30, offset: 166214},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_BIN",
			pos:  position{line: 5529, col: 1, offset: 166220},
			expr: &seqExpr{
				pos: position{line: 5529, col: 12, offset: 166231},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5529, col: 12, offset: 166231},
						val:        "bin",
						ignoreCase: false,
						want:       "\"bin\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5529, col: 18, offset: 166237},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_SPAN",
			pos:  position{line: 5530, col: 1, offset: 166243},
			expr: &litMatcher{
				pos:        position{line: 5530, col: 13, offset: 166255},
				val:        "span",
				ignoreCase: false,
				want:       "\"span\"",
			},
		},
		{
			name: "CMD_TRANSACTION",
			pos:  position{line: 5531, col: 1, offset: 166262},
			expr: &seqExpr{
				pos: position{line: 5531, col: 20, offset: 166281},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5531, col: 20, offset: 166281},
						val:        "transaction",
						ignoreCase: false,
						want:       "\"transaction\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5531, col: 34, offset: 166295},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_DEDUP",
			pos:  position{line: 5532, col: 1, offset: 166301},
			expr: &litMatcher{
				pos:        position{line: 5532, col: 14, offset: 166314},
				val:        "dedup",
				ignoreCase: false,
				want:       "\"dedup\"",
			},
		},
		{
			name: "CMD_DEDUP_SORTBY",
			pos:  position{line: 5533, col: 1, offset: 166322},
			expr: &seqExpr{
				pos: position{line: 5533, col: 21, offset: 166342},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 5533, col: 21, offset: 166342},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 5533, col: 27, offset: 166348},
						val:        "sortby",
						ignoreCase: false,
						want:       "\"sortby\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5533, col: 36, offset: 166357},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_MAKEMV",
			pos:  position{line: 5534, col: 1, offset: 166363},
			expr: &litMatcher{
				pos:        position{line: 5534, col: 15, offset: 166377},
				val:        "makemv",
				ignoreCase: false,
				want:       "\"makemv\"",
			},
		},
		{
			name: "CMD_SPATH",
			pos:  position{line: 5535, col: 1, offset: 166386},
			expr: &litMatcher{
				pos:        position{line: 5535, col: 14, offset: 166399},
				val:        "spath",
				ignoreCase: false,
				want:       "\"spath\"",
			},
		},
		{
			name: "CMD_FORMAT",
			pos:  position{line: 5536, col: 1, offset: 166407},
			expr: &litMatcher{
				pos:        position{line: 5536, col: 15, offset: 166421},
				val:        "format",
				ignoreCase: false,
				want:       "\"format\"",
			},
		},
		{
			name: "CMD_EARLIEST",
			pos:  position{line: 5537, col: 1, offset: 166430},
			expr: &litMatcher{
				pos:        position{line: 5537, col: 17, offset: 166446},
				val:        "earliest",
				ignoreCase: false,
				want:       "\"earliest\"",
			},
		},
		{
			name: "CMD_LATEST",
			pos:  position{line: 5538, col: 1, offset: 166457},
			expr: &litMatcher{
				pos:        position{line: 5538, col: 15, offset: 166471},
				val:        "latest",
				ignoreCase: false,
				want:       "\"latest\"",
			},
		},
		{
			name: "CMD_EVENTCOUNT",
			pos:  position{line: 5539, col: 1, offset: 166480},
			expr: &litMatcher{
				pos:        position{line: 5539, col: 19, offset: 166498},
				val:        "eventcount",
				ignoreCase: false,
				want:       "\"eventcount\"",
			},
		},
		{
			name: "CMD_FILLNULL",
			pos:  position{line: 5540, col: 1, offset: 166511},
			expr: &litMatcher{
				pos:        position{line: 5540, col: 17, offset: 166527},
				val:        "fillnull",
				ignoreCase: false,
				want:       "\"fillnull\"",
			},
		},
		{
			name: "CMD_GENTIMES",
			pos:  position{line: 5541, col: 1, offset: 166538},
			expr: &litMatcher{
				pos:        position{line: 5541, col: 17, offset: 166554},
				val:        "gentimes",
				ignoreCase: false,
				want:       "\"gentimes\"",
			},
		},
		{
			name: "CMD_INPUTLOOKUP",
			pos:  position{line: 5542, col: 1, offset: 166565},
			expr: &seqExpr{
				pos: position{line: 5542, col: 20, offset: 166584},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5542, col: 20, offset: 166584},
						val:        "inputlookup",
						ignoreCase: false,
						want:       "\"inputlookup\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5542, col: 34, offset: 166598},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "EVAL_CONCAT",
			pos:  position{line: 5543, col: 1, offset: 166604},
			expr: &seqExpr{
				pos: position{line: 5543, col: 16, offset: 166619},
				exprs: []any{
					&zeroOrOneExpr{
						pos: position{line: 5543, col: 16, offset: 166619},
						expr: &ruleRefExpr{
							pos:  position{line: 5543, col: 16, offset: 166619},
							name: "SPACE",
						},
					},
					&litMatcher{
						pos:        position{line: 5543, col: 23, offset: 166626},
						val:        ".",
						ignoreCase: false,
						want:       "\".\"",
					},
					&zeroOrOneExpr{
						pos: position{line: 5543, col: 27, offset: 166630},
						expr: &ruleRefExpr{
							pos:  position{line: 5543, col: 27, offset: 166630},
							name: "SPACE",
						},
					},
				},
			},
		},
		{
			name: "CMD_MVEXPAND",
			pos:  position{line: 5544, col: 1, offset: 166637},
			expr: &litMatcher{
				pos:        position{line: 5544, col: 17, offset: 166653},
				val:        "mvexpand",
				ignoreCase: false,
				want:       "\"mvexpand\"",
			},
		},
		{
			name: "MAJOR_BREAK",
			pos:  position{line: 5547, col: 1, offset: 166768},
			expr: &choiceExpr{
				pos: position{line: 5547, col: 16, offset: 166783},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 5547, col: 16, offset: 166783},
						val:        "[[\\]<>(){}|!;,'\"*\\n\\r \\t&?+]",
						chars:      []rune{'[', ']', '<', '>', '(', ')', '{', '}', '|', '!', ';', ',', '\'', '"', '*', '\n', '\r', ' ', '\t', '&', '?', '+'},
						ignoreCase: false,
						inverted:   false,
					},
					&litMatcher{
						pos:        position{line: 5547, col: 47, offset: 166814},
						val:        "%21",
						ignoreCase: false,
						want:       "\"%21\"",
					},
					&litMatcher{
						pos:        position{line: 5547, col: 55, offset: 166822},
						val:        "%26",
						ignoreCase: false,
						want:       "\"%26\"",
					},
					&litMatcher{
						pos:        position{line: 5548, col: 16, offset: 166845},
						val:        "%2526",
						ignoreCase: false,
						want:       "\"%2526\"",
					},
					&litMatcher{
						pos:        position{line: 5548, col: 26, offset: 166855},
						val:        "%3B",
						ignoreCase: false,
						want:       "\"%3B\"",
					},
					&litMatcher{
						pos:        position{line: 5548, col: 34, offset: 166863},
						val:        "%7C",
						ignoreCase: false,
						want:       "\"%7C\"",
					},
					&litMatcher{
						pos:        position{line: 5548, col: 42, offset: 166871},
						val:        "%20",
						ignoreCase: false,
						want:       "\"%20\"",
					},
					&litMatcher{
						pos:        position{line: 5548, col: 50, offset: 166879},
						val:        "%2B",
						ignoreCase: false,
						want:       "\"%2B\"",
					},
					&litMatcher{
						pos:        position{line: 5548, col: 58, offset: 166887},
						val:        "%3D",
						ignoreCase: false,
						want:       "\"%3D\"",
					},
					&litMatcher{
						pos:        position{line: 5548, col: 66, offset: 166895},
						val:        "--",
						ignoreCase: false,
						want:       "\"--\"",
					},
					&litMatcher{
						pos:        position{line: 5549, col: 16, offset: 166917},
						val:        "%2520",
						ignoreCase: false,
						want:       "\"%2520\"",
					},
					&litMatcher{
						pos:        position{line: 5549, col: 26, offset: 166927},
						val:        "%5D",
						ignoreCase: false,
						want:       "\"%5D\"",
					},
					&litMatcher{
						pos:        position{line: 5549, col: 34, offset: 166935},
						val:        "%5B",
						ignoreCase: false,
						want:       "\"%5B\"",
					},
					&litMatcher{
						pos:        position{line: 5549, col: 42, offset: 166943},
						val:        "%3A",
						ignoreCase: false,
						want:       "\"%3A\"",
					},
					&litMatcher{
						pos:        position{line: 5549, col: 50, offset: 166951},
						val:        "%0A",
						ignoreCase: false,
						want:       "\"%0A\"",
					},
					&litMatcher{
						pos:        position{line: 5549, col: 58, offset: 166959},
						val:        "%2C",
						ignoreCase: false,
						want:       "\"%2C\"",
					},
					&litMatcher{
						pos:        position{line: 5549, col: 66, offset: 166967},
						val:        "%28",
						ignoreCase: false,
						want:       "\"%28\"",
					},
					&litMatcher{
						pos:        position{line: 5549, col: 74, offset: 166975},
						val:        "%29",
						ignoreCase: false,
						want:       "\"%29\"",
					},
				},
			},
		},
		{
			name: "MINOR_BREAK",
			pos:  position{line: 5550, col: 1, offset: 166981},
			expr: &choiceExpr{
				pos: position{line: 5550, col: 16, offset: 166996},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 5550, col: 16, offset: 166996},
						val:        "[/:=@.$#%_]",
						chars:      []rune{'/', ':', '=', '@', '.', '$', '#', '%', '_'},
						ignoreCase: false,
						inverted:   false,
					},
					&litMatcher{
						pos:        position{line: 5550, col: 30, offset: 167010},
						val:        "-",
						ignoreCase: false,
						want:       "\"-\"",
					},
					&litMatcher{
						pos:        position{line: 5550, col: 36, offset: 167016},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "NOT",
			pos:  position{line: 5554, col: 1, offset: 167172},
			expr: &seqExpr{
				pos: position{line: 5554, col: 8, offset: 167179},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5554, col: 8, offset: 167179},
						val:        "NOT",
						ignoreCase: false,
						want:       "\"NOT\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5554, col: 14, offset: 167185},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "OR",
			pos:  position{line: 5555, col: 1, offset: 167191},
			expr: &seqExpr{
				pos: position{line: 5555, col: 7, offset: 167197},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 5555, col: 7, offset: 167197},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 5555, col: 13, offset: 167203},
						val:        "OR",
						ignoreCase: false,
						want:       "\"OR\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5555, col: 18, offset: 167208},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "AND",
			pos:  position{line: 5556, col: 1, offset: 167214},
			expr: &seqExpr{
				pos: position{line: 5556, col: 8, offset: 167221},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 5556, col: 8, offset: 167221},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 5556, col: 14, offset: 167227},
						val:        "AND",
						ignoreCase: false,
						want:       "\"AND\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5556, col: 20, offset: 167233},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "PIPE",
			pos:  position{line: 5557, col: 1, offset: 167239},
			expr: &seqExpr{
				pos: position{line: 5557, col: 9, offset: 167247},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 5557, col: 9, offset: 167247},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 5557, col: 24, offset: 167262},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5557, col: 28, offset: 167266},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 5558, col: 1, offset: 167281},
			expr: &seqExpr{
				pos: position{line: 5558, col: 7, offset: 167287},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 5558, col: 7, offset: 167287},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 5558, col: 13, offset: 167293},
						val:        "as",
						ignoreCase: true,
						want:       "\"AS\"i",
					},
					&ruleRefExpr{
						pos:  position{line: 5558, col: 19, offset: 167299},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 5559, col: 1, offset: 167325},
			expr: &seqExpr{
				pos: position{line: 5559, col: 7, offset: 167331},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 5559, col: 7, offset: 167331},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 5559, col: 13, offset: 167337},
						val:        "by",
						ignoreCase: true,
						want:       "\"BY\"i",
					},
					&ruleRefExpr{
						pos:  position{line: 5559, col: 19, offset: 167343},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "EQUAL",
			pos:  position{line: 5561, col: 1, offset: 167370},
			expr: &seqExpr{
				pos: position{line: 5561, col: 10, offset: 167379},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 5561, col: 10, offset: 167379},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 5561, col: 25, offset: 167394},
						val:        "=",
						ignoreCase: false,
						want:       "\"=\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5561, col: 29, offset: 167398},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "COMMA",
			pos:  position{line: 5562, col: 1, offset: 167413},
			expr: &seqExpr{
				pos: position{line: 5562, col: 10, offset: 167422},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 5562, col: 10, offset: 167422},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 5562, col: 25, offset: 167437},
						val:        ",",
						ignoreCase: false,
						want:       "\",\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5562, col: 29, offset: 167441},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "QUOTE",
			pos:  position{line: 5563, col: 1, offset: 167456},
			expr: &litMatcher{
				pos:        position{line: 5563, col: 10, offset: 167465},
				val:        "\"",
				ignoreCase: false,
				want:       "\"\\\"\"",
			},
		},
		{
			name: "L_PAREN",
			pos:  position{line: 5564, col: 1, offset: 167469},
			expr: &seqExpr{
				pos: position{line: 5564, col: 12, offset: 167480},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5564, col: 12, offset: 167480},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5564, col: 16, offset: 167484},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "R_PAREN",
			pos:  position{line: 5565, col: 1, offset: 167499},
			expr: &seqExpr{
				pos: position{line: 5565, col: 12, offset: 167510},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 5565, col: 12, offset: 167510},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 5565, col: 27, offset: 167525},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 5567, col: 1, offset: 167530},
			expr: &notExpr{
				pos: position{line: 5567, col: 8, offset: 167537},
				expr: &anyMatcher{
					line: 5567, col: 9, offset: 167538,
				},
			},
		},
		{
			name: "WHITESPACE",
			pos:  position{line: 5568, col: 1, offset: 167540},
			expr: &choiceExpr{
				pos: position{line: 5568, col: 15, offset: 167554},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 5568, col: 15, offset: 167554},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&litMatcher{
						pos:        position{line: 5568, col: 21, offset: 167560},
						val:        "\t",
						ignoreCase: false,
						want:       "\"\\t\"",
					},
					&litMatcher{
						pos:        position{line: 5568, col: 28, offset: 167567},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
					&litMatcher{
						pos:        position{line: 5568, col: 35, offset: 167574},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
				},
			},
		},
		{
			name: "SPACE",
			pos:  position{line: 5569, col: 1, offset: 167579},
			expr: &choiceExpr{
				pos: position{line: 5569, col: 10, offset: 167588},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 5569, col: 11, offset: 167589},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 5569, col: 11, offset: 167589},
								expr: &ruleRefExpr{
									pos:  position{line: 5569, col: 11, offset: 167589},
									name: "WHITESPACE",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 5569, col: 23, offset: 167601},
								name: "COMMENT",
							},
							&zeroOrOneExpr{
								pos: position{line: 5569, col: 31, offset: 167609},
								expr: &ruleRefExpr{
									pos:  position{line: 5569, col: 31, offset: 167609},
									name: "WHITESPACE",
								},
							},
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 5569, col: 46, offset: 167624},
						expr: &ruleRefExpr{
							pos:  position{line: 5569, col: 46, offset: 167624},
							name: "WHITESPACE",
						},
					},
				},
			},
		},
		{
			name: "COMMENT",
			pos:  position{line: 5570, col: 1, offset: 167636},
			expr: &seqExpr{
				pos: position{line: 5570, col: 12, offset: 167647},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5570, col: 12, offset: 167647},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 5570, col: 18, offset: 167653},
						expr: &seqExpr{
							pos: position{line: 5570, col: 19, offset: 167654},
							exprs: []any{
								&notExpr{
									pos: position{line: 5570, col: 19, offset: 167654},
									expr: &litMatcher{
										pos:        position{line: 5570, col: 21, offset: 167656},
										val:        "```",
										ignoreCase: false,
										want:       "\"```\"",
									},
								},
								&anyMatcher{
									line: 5570, col: 28, offset: 167663,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 5570, col: 32, offset: 167667},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
				},
			},
		},
		{
			name: "EMPTY_OR_SPACE",
			pos:  position{line: 5571, col: 1, offset: 167673},
			expr: &choiceExpr{
				pos: position{line: 5571, col: 20, offset: 167692},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 5571, col: 20, offset: 167692},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 5571, col: 28, offset: 167700},
						val:        "",
						ignoreCase: false,
						want:       "\"\"",
					},
				},
			},
		},
		{
			name: "SPACE_OR_COMMA",
			pos:  position{line: 5572, col: 1, offset: 167703},
			expr: &choiceExpr{
				pos: position{line: 5572, col: 19, offset: 167721},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 5572, col: 19, offset: 167721},
						name: "COMMA",
					},
					&ruleRefExpr{
						pos:  position{line: 5572, col: 27, offset: 167729},
						name: "SPACE",
					},
				},
			},
		},
	},
}

func (c *current) onStart2(initialSearch, filterBlocks, queryAggBlocks any) (any, error) {
	var q ast.QueryStruct
	q.SearchFilter = initialSearch.(*ast.Node)

	// Join the InitialSearchBlock with the FilterBlocks with AND nodes. For a
	// search like "A | B | C | D" we should generate the node structure below
	// so that when we run the search it evaluates A first.
	//
	//      AND
	//     /   \
	//    A     AND
	//         /   \
	//        B     AND
	//             /   \
	//            C     D

	filterBlocksSlice := filterBlocks.([]any)
	switch len(filterBlocksSlice) {
	case 0:
		q.SearchFilter = initialSearch.(*ast.Node)
	case 1:
		q.SearchFilter = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     initialSearch.(*ast.Node),
			Right:    filterBlocksSlice[0].(*ast.Node),
		}
	default: // len > 1
		// Iterate backwards so we build the node structure mentioned above.
		root := filterBlocksSlice[len(filterBlocksSlice)-1].(*ast.Node)
		for i := len(filterBlocksSlice) - 2; i > -1; i-- {
			newRoot := &ast.Node{
				NodeType: ast.NodeAnd,
				Left:     filterBlocksSlice[i].(*ast.Node),
				Right:    root,
			}

			root = newRoot
		}

		q.SearchFilter = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     initialSearch.(*ast.Node),
			Right:    root,
		}
	}

	q.SearchFilter.Simplify()

	if queryAggBlocks != nil {
		queryAggSlice := queryAggBlocks.([]any)

		if len(queryAggSlice) > 0 {
			// Chain together all QueryAggergators.
			q.PipeCommands = queryAggSlice[0].(*structs.QueryAggregators)

			// Go to the end of the first chain.
			curQueryAgg := q.PipeCommands

			chainAggregators(curQueryAgg, queryAggSlice[1:])
		}
	}

	return q, nil
}

func (p *parser) callonStart2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStart2(stack["initialSearch"], stack["filterBlocks"], stack["queryAggBlocks"])
}

func (c *current) onStart17(genTimesOption, queryAggBlocks any) (any, error) {
	var q ast.QueryStruct
	q.PipeCommands = &structs.QueryAggregators{
		PipeCommandType: structs.GenerateEventType,
		GenerateEvent: &structs.GenerateEvent{
			GenTimes: genTimesOption.(*structs.GenTimes),
		},
	}

	if queryAggBlocks != nil {
		queryAggSlice := queryAggBlocks.([]any)
		curQueryAgg := q.PipeCommands

		chainAggregators(curQueryAgg, queryAggSlice)
	}

	return q, nil
}

func (p *parser) callonStart17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStart17(stack["genTimesOption"], stack["queryAggBlocks"])
}

func (c *current) onStart32(inputLookup, queryAggBlocks any) (any, error) {
	var q ast.QueryStruct
	q.PipeCommands = inputLookup.(*structs.QueryAggregators)

	if queryAggBlocks != nil {
		queryAggSlice := queryAggBlocks.([]any)
		curQueryAgg := q.PipeCommands

		chainAggregators(curQueryAgg, queryAggSlice)
	}

	return q, nil
}

func (p *parser) callonStart32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStart32(stack["inputLookup"], stack["queryAggBlocks"])
}

func (c *current) onPartialTimestamp1() (any, error) {
	timestamp := string(c.text)
	completeTimestamp := fmt.Sprintf("%s:00:00:00", timestamp)

	return completeTimestamp, nil
}

func (p *parser) callonPartialTimestamp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPartialTimestamp1()
}

func (c *current) onIntegerAsTimeToUnixEpochMs1(intStr any) (any, error) {
	timeOffset, err := strconv.ParseInt(intStr.(string), 10, 64)
	if err != nil {
		return "", fmt.Errorf("Spl peg: Error while converting the integer: %v", err)
	}
	finalTime, err := utils.ApplyOffsetToTime(timeOffset, utils.TMDay, time.Now())
	if err != nil {
		return "", fmt.Errorf("Spl peg: Error while applying the offset: %v", err)
	}
	daySnap := fmt.Sprintf("%v", utils.TMDay)
	finalTime, err = utils.ApplySnap(daySnap, finalTime)
	if err != nil {
		return "", fmt.Errorf("Spl peg: Error while applying the snap: %v", err)
	}

	return finalTime.UnixMilli(), nil
}

func (p *parser) callonIntegerAsTimeToUnixEpochMs1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerAsTimeToUnixEpochMs1(stack["intStr"])
}

func (c *current) onDateTimeToUnixEpochMs1(timeStamp any) (any, error) {
	unixEpochInMs, err := utils.ConvertCustomDateTimeFormatToEpochMs(timeStamp.(string))
	if err != nil {
		return "", fmt.Errorf("Spl peg: Error while converting the timestamp: %v", err)
	}
	return unixEpochInMs, nil
}

func (p *parser) callonDateTimeToUnixEpochMs1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDateTimeToUnixEpochMs1(stack["timeStamp"])
}

func (c *current) onGenTimestamp1(epochInMilli any) (any, error) {
	return epochInMilli, nil
}

func (p *parser) callonGenTimestamp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenTimestamp1(stack["epochInMilli"])
}

func (c *current) onGenTimesOptionEnd1(timeStamp any) (any, error) {
	return &GenTimesOptionArgs{
		argOption: "end",
		genTimesOption: &structs.GenTimes{
			EndTime: uint64(timeStamp.(int64)),
		},
	}, nil
}

func (p *parser) callonGenTimesOptionEnd1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenTimesOptionEnd1(stack["timeStamp"])
}

func (c *current) onGenTimesOptionStart1(timeStamp any) (any, error) {
	return &GenTimesOptionArgs{
		argOption: "start",
		genTimesOption: &structs.GenTimes{
			StartTime: uint64(timeStamp.(int64)),
		},
	}, nil
}

func (p *parser) callonGenTimesOptionStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenTimesOptionStart1(stack["timeStamp"])
}

func (c *current) onGenTimesOptionIncrement1(intStr, unitStr any) (any, error) {
	spanNum, err := strconv.ParseInt(intStr.(string), 10, 64)
	if err != nil {
		return "", fmt.Errorf("Spl peg: Error while converting the integer: %v", err)
	}
	if spanNum == 0 {
		return "", fmt.Errorf("Spl peg: increment cannot be 0")
	}

	timeUnit := utils.TMSecond

	if unitStr != nil {
		unit, err := transferUint8ToString(unitStr)
		if err != nil {
			return nil, fmt.Errorf("Spl peg: Unit specified is not string, err: %v", err)
		}

		if unit == "s" {
			timeUnit = utils.TMSecond
		} else if unit == "m" {
			timeUnit = utils.TMMinute
		} else if unit == "h" {
			timeUnit = utils.TMHour
		} else if unit == "d" {
			timeUnit = utils.TMDay
		} else {
			return nil, fmt.Errorf("Spl peg: Invalid time unit: %v", unit)
		}
	}

	return &GenTimesOptionArgs{
		argOption: "increment",
		genTimesOption: &structs.GenTimes{
			Interval: &structs.SpanLength{
				Num:       int(spanNum),
				TimeScalr: timeUnit,
			},
		},
	}, nil
}

func (p *parser) callonGenTimesOptionIncrement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenTimesOptionIncrement1(stack["intStr"], stack["unitStr"])
}

func (c *current) onGenTimesOption1(genTimesOption any) (any, error) {
	return genTimesOption, nil
}

func (p *parser) callonGenTimesOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenTimesOption1(stack["genTimesOption"])
}

func (c *current) onGenTimesOptionList1(first, rest any) (any, error) {
	restSlice := rest.([]any)
	optionWasSpecified := make(map[string]struct{})

	numOptions := 1 + len(restSlice)

	genTimeOption, err := initializeGenTimesOption()
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Error while initializing the GenTimesOption: %v", err)
	}

	for i := 0; i < numOptions; i++ {
		var genTimeOptArg *GenTimesOptionArgs
		if i == 0 {
			genTimeOptArg = first.(*GenTimesOptionArgs)
		} else {
			separator := restSlice[i-1].([]any)
			genTimeOptArg = separator[1].(*GenTimesOptionArgs)
		}

		argOption := genTimeOptArg.argOption
		_, exist := optionWasSpecified[argOption]
		if exist {
			return nil, fmt.Errorf("Invalid Syntax, option: %v is already specified", argOption)
		}
		optionWasSpecified[argOption] = struct{}{}

		switch argOption {
		case "start":
			genTimeOption.StartTime = genTimeOptArg.genTimesOption.StartTime
		case "end":
			genTimeOption.EndTime = genTimeOptArg.genTimesOption.EndTime
		case "increment":
			genTimeOption.Interval = genTimeOptArg.genTimesOption.Interval
		default:
			return nil, fmt.Errorf("Not a Valid GenTimes Command Option: %v", argOption)
		}
	}

	_, exist := optionWasSpecified["start"]
	if !exist {
		return nil, fmt.Errorf("Invalid Syntax, start time is not specified")
	}

	return genTimeOption, nil
}

func (p *parser) callonGenTimesOptionList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenTimesOptionList1(stack["first"], stack["rest"])
}

func (c *current) onInitialSearchBlock1(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonInitialSearchBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialSearchBlock1(stack["clause"])
}

func (c *current) onSearchBlock1(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonSearchBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBlock1(stack["clause"])
}

func (c *current) onFilterBlock1(block any) (any, error) {
	return block, nil
}

func (p *parser) callonFilterBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterBlock1(stack["block"])
}

func (c *current) onQueryAggergatorBlock1(block any) (any, error) {
	queryAgg := block.(*structs.QueryAggregators)
	return queryAgg, nil
}

func (p *parser) callonQueryAggergatorBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQueryAggergatorBlock1(stack["block"])
}

func (c *current) onFieldSelectBlock1(op, fields any) (any, error) {
	columnsRequest := &structs.ColumnsRequest{}
	if op == nil || string(op.([]byte)) == "+" {
		columnsRequest.IncludeColumns = fields.([]string)
	} else {
		columnsRequest.ExcludeColumns = fields.([]string)
	}

	queryAggregator := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			OutputColumns: columnsRequest,
		},
	}

	return queryAggregator, nil
}

func (p *parser) callonFieldSelectBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldSelectBlock1(stack["op"], stack["fields"])
}

func (c *current) onCommonAggregatorBlock1(aggs, byFields any) (any, error) {
	aggNode := &structs.QueryAggregators{}

	// Extract the MeasureAggregators and check if any of the aggregation fields
	// need to be renamed.
	aggsSlice := aggs.([]*aggregator)
	measureAggs := make([]*structs.MeasureAggregator, len(aggsSlice))
	columnsRequest := &structs.ColumnsRequest{}
	columnsRequest.RenameAggregationColumns = make(map[string]string, 0)

	for i, agg := range aggsSlice {
		measureAggs[i] = agg.measureAgg

		if agg.renameOutputField {
			columnsRequest.RenameAggregationColumns[measureAggs[i].String()] = agg.outputFieldNewName
		}
	}

	// If any agg field was renamed, make a QueryAggregators for all the renames.
	if len(columnsRequest.RenameAggregationColumns) > 0 {
		renameNode := &structs.QueryAggregators{
			PipeCommandType: structs.OutputTransformType,
			OutputTransforms: &structs.OutputTransforms{
				OutputColumns: columnsRequest,
			},
		}

		aggNode.Next = renameNode
	}

	if byFields == nil {
		aggNode.PipeCommandType = structs.MeasureAggsType
		aggNode.MeasureOperations = measureAggs
	} else {
		aggNode.PipeCommandType = structs.GroupByType
		aggNode.GroupByRequest = &structs.GroupByRequest{
			MeasureOperations: measureAggs,
			GroupByColumns:    byFields.([]string),
		}
		aggNode.BucketLimit = query.MAX_GRP_BUCKS
	}

	return aggNode, nil
}

func (p *parser) callonCommonAggregatorBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommonAggregatorBlock1(stack["aggs"], stack["byFields"])
}

func (c *current) onAggregatorBlock1(aggs, options any) (any, error) {
	aggNode := aggs.(*structs.QueryAggregators)

	if options != nil {
		aggNode.StatsOptions = options.(*structs.StatsOptions)
	} else {
		aggNode.StatsOptions = initializeStatsOptions()
	}

	return aggNode, nil
}

func (p *parser) callonAggregatorBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregatorBlock1(stack["aggs"], stack["options"])
}

func (c *current) onStatsOptions1(option any) (any, error) {
	//Default value
	options := initializeStatsOptions()

	optionSlice := option.([]any)
	for _, opt := range optionSlice {
		optArr := opt.([]string)
		// Check for matching option types
		switch optArr[0] {
		case "dedup_splitvals":
			dedupSplitvalsBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatsBlock: Options: invalid param for dedup_splitvals option, param: %v, err: %v", optArr[1], err)
			}
			options.DedupSplitvals = dedupSplitvalsBool
		case "partitions":
			pVal, err := strconv.ParseUint(optArr[1], 10, 64)
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatsBlock: Options: invalid param for partitions option, param: %v, err: %v", optArr[1], err)
			}
			options.Partitions = pVal
		case "allnum":
			allnumBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatsBlock: Options: invalid param for allnum option, param: %v, err: %v", optArr[1], err)
			}
			options.Allnum = allnumBool
		case "delim":
			options.Delim = optArr[1]
		default:
			return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: invalid option: %v", optArr[0])
		}
	}

	return options, nil
}

func (p *parser) callonStatsOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatsOptions1(stack["option"])
}

func (c *current) onStatsOption1(optionCMD, str any) (any, error) {
	optionArr := []string{optionCMD.(string), str.(string)}
	return optionArr, nil
}

func (p *parser) callonStatsOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatsOption1(stack["optionCMD"], stack["str"])
}

func (c *current) onStatsOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: StatsOptionCMD: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonStatsOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatsOptionCMD1(stack["option"])
}

func (c *current) onGroupbyBlock1(fields any) (any, error) {
	// Wildcard fields are not allowed. See https://docs.splunk.com/Documentation/Splunk/9.1.0/SearchReference/Stats
	for _, field := range fields.([]string) {
		if strings.Contains(field, "*") {
			return nil, errors.New("BY clause cannot contain fields with wildcards")
		}
	}

	return fields, nil
}

func (p *parser) callonGroupbyBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupbyBlock1(stack["fields"])
}

func (c *current) onStreamStatsOptionResetOnChange1(boolVal any) (any, error) {
	ssOption := &structs.StreamStatsOptions{
		ResetOnChange: boolVal.(bool),
	}
	ssOptionArg := &StreamStatsOptionArgs{
		argOption:          "reset_on_change",
		streamStatsOptions: ssOption,
	}

	return ssOptionArg, nil
}

func (p *parser) callonStreamStatsOptionResetOnChange1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStreamStatsOptionResetOnChange1(stack["boolVal"])
}

func (c *current) onStreamStatsOptionCurrent1(boolVal any) (any, error) {
	ssOption := &structs.StreamStatsOptions{
		Current: boolVal.(bool),
	}
	ssOptionArg := &StreamStatsOptionArgs{
		argOption:          "current",
		streamStatsOptions: ssOption,
	}

	return ssOptionArg, nil
}

func (p *parser) callonStreamStatsOptionCurrent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStreamStatsOptionCurrent1(stack["boolVal"])
}

func (c *current) onStreamStatsOptionGlobal1(boolVal any) (any, error) {
	// TODO: Verify if needed, in splunk it does nothing as of now based on experiments.
	ssOption := &structs.StreamStatsOptions{
		Global: boolVal.(bool),
	}
	ssOptionArg := &StreamStatsOptionArgs{
		argOption:          "global",
		streamStatsOptions: ssOption,
	}

	return ssOptionArg, nil
}

func (p *parser) callonStreamStatsOptionGlobal1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStreamStatsOptionGlobal1(stack["boolVal"])
}

func (c *current) onStreamStatsOptionAllNum1(boolVal any) (any, error) {
	// TODO: Verify if needed, in splunk it does nothing as of now based on experiments.
	ssOption := &structs.StreamStatsOptions{
		AllNum: boolVal.(bool),
	}
	ssOptionArg := &StreamStatsOptionArgs{
		argOption:          "allnum",
		streamStatsOptions: ssOption,
	}

	return ssOptionArg, nil
}

func (p *parser) callonStreamStatsOptionAllNum1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStreamStatsOptionAllNum1(stack["boolVal"])
}

func (c *current) onStreamStatsOptionWindow1(windowSize any) (any, error) {
	window, err := strconv.ParseUint(windowSize.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Invalid window size: %v, must be a positive integer", windowSize.(string))
	}
	if window > 10000 {
		return nil, fmt.Errorf("Spl peg: Invalid window size: %v, must be less than or equal to 10000", window)
	}
	ssOption := &structs.StreamStatsOptions{
		Window: window,
	}
	ssOptionArg := &StreamStatsOptionArgs{
		argOption:          "window",
		streamStatsOptions: ssOption,
	}

	return ssOptionArg, nil
}

func (p *parser) callonStreamStatsOptionWindow1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStreamStatsOptionWindow1(stack["windowSize"])
}

func (c *current) onStreamStatsOptionResetBefore1(boolExpr any) (any, error) {
	ssOption := &structs.StreamStatsOptions{
		ResetBefore: boolExpr.(*structs.BoolExpr),
	}
	ssOptionArg := &StreamStatsOptionArgs{
		argOption:          "reset_before",
		streamStatsOptions: ssOption,
	}

	return ssOptionArg, nil
}

func (p *parser) callonStreamStatsOptionResetBefore1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStreamStatsOptionResetBefore1(stack["boolExpr"])
}

func (c *current) onStreamStatsOptionResetAfter1(boolExpr any) (any, error) {
	ssOption := &structs.StreamStatsOptions{
		ResetAfter: boolExpr.(*structs.BoolExpr),
	}
	ssOptionArg := &StreamStatsOptionArgs{
		argOption:          "reset_after",
		streamStatsOptions: ssOption,
	}

	return ssOptionArg, nil
}

func (p *parser) callonStreamStatsOptionResetAfter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStreamStatsOptionResetAfter1(stack["boolExpr"])
}

func (c *current) onStreamStatsOptionTimeWindow1(spanLength any) (any, error) {
	spanLen := spanLength.(*structs.BinSpanLength)
	if spanLen.TimeScale == utils.TMInvalid {
		return nil, fmt.Errorf("Invalid Syntax, time_window option cannot be used without time scale")
	}
	ssOption := &structs.StreamStatsOptions{
		TimeWindow: spanLen,
	}
	ssOptionArg := &StreamStatsOptionArgs{
		argOption:          "time_window",
		streamStatsOptions: ssOption,
	}

	return ssOptionArg, nil
}

func (p *parser) callonStreamStatsOptionTimeWindow1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStreamStatsOptionTimeWindow1(stack["spanLength"])
}

func (c *current) onStreamStatsOption1(ssOption any) (any, error) {
	return ssOption, nil
}

func (p *parser) callonStreamStatsOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStreamStatsOption1(stack["ssOption"])
}

func (c *current) onStreamStatsOptionList1(first, rest any) (any, error) {
	restSlice := rest.([]any)
	optionWasSpecified := make(map[string]bool)

	numOptions := 1 + len(restSlice)

	ssOption := initializeStreamStatsOptions()

	for i := 0; i < numOptions; i++ {
		var ssOptArg *StreamStatsOptionArgs
		if i == 0 {
			ssOptArg = first.(*StreamStatsOptionArgs)
		} else {
			separator := restSlice[i-1].([]any)
			ssOptArg = separator[1].(*StreamStatsOptionArgs)
		}

		argOption := ssOptArg.argOption
		val, exist := optionWasSpecified[argOption]
		if exist && val {
			return nil, fmt.Errorf("Invalid Syntax, option: %v is already specified", argOption)
		}
		optionWasSpecified[argOption] = true

		switch argOption {
		case "reset_on_change":
			ssOption.ResetOnChange = ssOptArg.streamStatsOptions.ResetOnChange
		case "current":
			ssOption.Current = ssOptArg.streamStatsOptions.Current
		case "global":
			ssOption.Global = ssOptArg.streamStatsOptions.Global
		case "allnum":
			ssOption.AllNum = ssOptArg.streamStatsOptions.AllNum
		case "window":
			ssOption.Window = ssOptArg.streamStatsOptions.Window
		case "time_window":
			ssOption.TimeWindow = ssOptArg.streamStatsOptions.TimeWindow
		case "reset_before":
			ssOption.ResetBefore = ssOptArg.streamStatsOptions.ResetBefore
		case "reset_after":
			ssOption.ResetAfter = ssOptArg.streamStatsOptions.ResetAfter
		default:
			return nil, fmt.Errorf("Not a Valid Streamstats Command Option: %v", argOption)
		}
	}

	timeWindowSpecified, exist := optionWasSpecified["time_window"]
	if exist && timeWindowSpecified {
		if !ssOption.Current {
			return nil, fmt.Errorf("Invalid Syntax, current cannot be set to false with time_window option")
		}
		if !ssOption.Global {
			return nil, fmt.Errorf("Invalid Syntax, global cannot be set to false with time_window option")
		}
	}

	return ssOption, nil
}

func (p *parser) callonStreamStatsOptionList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStreamStatsOptionList1(stack["first"], stack["rest"])
}

func (c *current) onStreamStatsBlock2(ssOptionList, aggs any) (any, error) {
	aggNode := aggs.(*structs.QueryAggregators)

	aggNode.StreamStatsOptions = ssOptionList.(*structs.StreamStatsOptions)

	return aggNode, nil
}

func (p *parser) callonStreamStatsBlock2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStreamStatsBlock2(stack["ssOptionList"], stack["aggs"])
}

func (c *current) onStreamStatsBlock11(aggs any) (any, error) {
	aggNode := aggs.(*structs.QueryAggregators)

	aggNode.StreamStatsOptions = initializeStreamStatsOptions()

	return aggNode, nil
}

func (p *parser) callonStreamStatsBlock11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStreamStatsBlock11(stack["aggs"])
}

func (c *current) onRegexBlock1(keyAndOp, str any) (any, error) {
	var key, op string
	if keyAndOp == nil {
		key = "*"
		op = "="
	} else {
		keyAndOpSlice := keyAndOp.([]any)
		key = keyAndOpSlice[0].(string)
		op = keyAndOpSlice[1].(string)
	}

	// Remove the quotation marks.
	regex := str.(string)
	regex = regex[1 : len(regex)-1]

	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:           op,
			Field:        key,
			Values:       regex,
			ValueIsRegex: true,
		},
	}

	return node, nil
}

func (p *parser) callonRegexBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexBlock1(stack["keyAndOp"], stack["str"])
}

func (c *current) onClauseLevel41(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*ast.Node)
	for _, v := range rest.([]any) {
		parts := v.([]any) // This will be [(AND / SPACE), ClauseLevel3].
		cur = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     cur,
			Right:    parts[1].(*ast.Node),
		}
	}

	return cur, nil
}

func (p *parser) callonClauseLevel41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel41(stack["first"], stack["rest"])
}

func (c *current) onClauseLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*ast.Node)
	for _, v := range rest.([]any) {
		parts := v.([]any) // This will be [OR, ClauseLevel2].
		cur = &ast.Node{
			NodeType: ast.NodeOr,
			Left:     cur,
			Right:    parts[1].(*ast.Node),
		}
	}

	return cur, nil
}

func (p *parser) callonClauseLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel31(stack["first"], stack["rest"])
}

func (c *current) onClauseLevel22(notList, first any) (any, error) {
	// There's an issue with how queries with AST Not nodes are run, so use
	// De Morgan's law to manipulate the expression.
	node := first.(*ast.Node)
	numNots := len(notList.([]any))

	if numNots%2 == 1 {
		deMorgansLaw(node)
	}

	return node, nil
}

func (p *parser) callonClauseLevel22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel22(stack["notList"], stack["first"])
}

func (c *current) onClauseLevel29(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonClauseLevel29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel29(stack["clause"])
}

func (c *current) onClauseLevel12(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonClauseLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel12(stack["clause"])
}

func (c *current) onClauseLevel18(term any) (any, error) {
	return term, nil
}

func (p *parser) callonClauseLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel18(stack["term"])
}

func (c *current) onSearchTerm1(term any) (any, error) {
	return term, nil
}

func (p *parser) callonSearchTerm1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchTerm1(stack["term"])
}

func (c *current) onTimechartBlock1(tcArgs, limitExpr any) (any, error) {
	aggNode := &structs.QueryAggregators{}

	columnsRequest := &structs.ColumnsRequest{}
	columnsRequest.RenameAggregationColumns = make(map[string]string, 0)
	measureAggs := make([]*structs.MeasureAggregator, 0)

	timechartExpr := &structs.TimechartExpr{}
	byField := ""

	if tcArgs == nil {
		return nil, fmt.Errorf("spl peg: timechart: either single-agg or eval-expression by split-by-clause is required")
	}

	timechartArgs := tcArgs.(*TimechartArgs)

	// TODO: Should add || timechartArgs.evalExpr == nil
	if timechartArgs.singleAggExpr == nil {
		return nil, fmt.Errorf("spl peg: timechart: either single-agg or eval-expression by split-by-clause is required")
	}

	var bOptions *structs.BinOptions

	if timechartArgs.tcOptions != nil {
		if timechartArgs.tcOptions.BinOptions != nil {
			bOptions = timechartArgs.tcOptions.BinOptions
		}
	}

	if timechartArgs.singleAggExpr != nil {
		singleAgg := &structs.SingleAgg{}
		aggTemp := timechartArgs.singleAggExpr

		for i, agg := range aggTemp.aggregators {
			measureAggs = append(measureAggs, agg.measureAgg)

			if agg.renameOutputField {
				measureAggs[i].StrEnc = agg.outputFieldNewName
			}
		}

		singleAgg.MeasureOperations = measureAggs
		timechartExpr.SingleAgg = singleAgg

		if aggTemp.SplitByClause != nil {
			byField = aggTemp.SplitByClause.Field
		}
	}

	// TODO: if timechartArgs.evalExpr != nil {}

	aggNode.PipeCommandType = structs.GroupByType
	aggNode.GroupByRequest = &structs.GroupByRequest{
		MeasureOperations: measureAggs,
		GroupByColumns:    []string{"timestamp"},
	}
	aggNode.BucketLimit = query.MAX_GRP_BUCKS

	if bOptions == nil {
		bOptions = &structs.BinOptions{
			SpanOptions: &structs.SpanOptions{
				DefaultSettings: true,
				SpanLength: &structs.SpanLength{
					Num:       1,
					TimeScalr: utils.TMMinute,
				},
			},
		}
	}

	var limitExprTmp *structs.LimitExpr
	if limitExpr != nil {
		limitExprTmp = limitExpr.(*structs.LimitExpr)
		if len(measureAggs) > 1 {
			limitExprTmp.LimitScoreMode = structs.LSMByFreq
		}
	}

	timeBucket := aggregations.InitTimeBucket(bOptions.SpanOptions.SpanLength.Num, bOptions.SpanOptions.SpanLength.TimeScalr, byField, limitExprTmp, len(measureAggs))
	aggNode.TimeHistogram = timeBucket

	return aggNode, nil
}

func (p *parser) callonTimechartBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimechartBlock1(stack["tcArgs"], stack["limitExpr"])
}

func (c *current) onTimechartArgumentsList1(first, rest any) (any, error) {
	restSlice := rest.([]any)
	timechartArgs := &TimechartArgs{}

	numArgs := 1 + len(restSlice)

	for i := 0; i < numArgs; i++ {

		var numArg interface{}

		if i == 0 {
			numArg = first
		} else {
			numArg = restSlice[i-1].([]any)[1]
		}

		switch numArg.(type) {
		case *singleAggTemp:
			timechartArgs.singleAggExpr = numArg.(*singleAggTemp)
		case *structs.TcOptions:
			timechartArgs.tcOptions = numArg.(*structs.TcOptions)
		default:
			return nil, fmt.Errorf("Spl peg: Timechart: invalid timechart argument: %v", numArg)
		}
	}

	return timechartArgs, nil
}

func (p *parser) callonTimechartArgumentsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimechartArgumentsList1(stack["first"], stack["rest"])
}

func (c *current) onTimechartArgument1(tcArg any) (any, error) {
	return tcArg, nil
}

func (p *parser) callonTimechartArgument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimechartArgument1(stack["tcArg"])
}

func (c *current) onSingleAggExpr1(aggs, splitByClause any) (any, error) {
	singleAggExpr := &singleAggTemp{
		aggregators: aggs.([]*aggregator),
	}

	if splitByClause != nil {
		singleAggExpr.SplitByClause = splitByClause.(*structs.SplitByClause)
	}

	return singleAggExpr, nil
}

func (p *parser) callonSingleAggExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleAggExpr1(stack["aggs"], stack["splitByClause"])
}

func (c *current) onSplitByClause1(field any) (any, error) {
	splitByClause := &structs.SplitByClause{
		Field: field.(string),
	}

	return splitByClause, nil
}

func (p *parser) callonSplitByClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSplitByClause1(stack["field"])
}

func (c *current) onTcOptions1(option any) (any, error) {
	//Default value
	tcOptions := &structs.TcOptions{
		UseNull:  true,
		UseOther: true,
		NullStr:  "null",
		OtherStr: "other",
	}
	switch option.(type) {
	case *structs.BinOptions:
		tcOptions.BinOptions = option.(*structs.BinOptions)
	case [][]string:
		optionSlice := option.([]any)
		for _, opt := range optionSlice {
			optArr := opt.([]string)
			switch optArr[0] {
			case "usenull":
				useNullBool, err := strconv.ParseBool(optArr[1])
				if err != nil {
					return nil, fmt.Errorf("Spl peg: Timechart: TcOptions: %v", err)
				}
				tcOptions.UseNull = useNullBool
			case "useother":
				useOtherBool, err := strconv.ParseBool(optArr[1])
				if err != nil {
					return nil, fmt.Errorf("Spl peg: Timechart: TcOptions: %v", err)
				}
				tcOptions.UseOther = useOtherBool
			case "nullstr":
				tcOptions.OtherStr = optArr[1]
			case "otherstr":
				tcOptions.OtherStr = optArr[1]
			default:
				return nil, fmt.Errorf("Spl peg: Timechart: TcOptions: invalid option: %v", optArr[0])
			}
		}
	default:
		return nil, fmt.Errorf("Spl peg: Timechart: Invalid tcOptions %v", option)
	}
	return tcOptions, nil
}

func (p *parser) callonTcOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTcOptions1(stack["option"])
}

func (c *current) onTcOption1(tcOptionCMD, val any) (any, error) {
	tcOptionArr := []string{tcOptionCMD.(string), val.(string)}
	return tcOptionArr, nil
}

func (p *parser) callonTcOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTcOption1(stack["tcOptionCMD"], stack["val"])
}

func (c *current) onTcOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Timechart: TcOptionCMD: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonTcOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTcOptionCMD1(stack["option"])
}

func (c *current) onAllTimeScale1(timeUnit any) (any, error) {
	return timeUnit, nil
}

func (p *parser) callonAllTimeScale1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAllTimeScale1(stack["timeUnit"])
}

func (c *current) onBinSpanLenOption1(number, timeScale any) (any, error) {
	if timeScale != nil {
		num, err := strconv.ParseInt(number.(string), 10, 64)
		if err != nil {
			return nil, fmt.Errorf("BinSpanLenOption: Invalid Number: %v is not an integer, err: %v", number.(string), err)
		}
		if num <= 0 {
			return nil, fmt.Errorf("BinSpanLenOption: Invalid span %v, span value must be greater than 0", num)
		}

		switch timeScale.(utils.TimeUnit) {
		case utils.TMDecisecond:
			if 10%num != 0 || num >= 10 {
				return nil, fmt.Errorf("BinSpanLenOption: Invalid span for decisecond %v, span value must be less than 1 second and 1 second must be evenly divisble by span", num)
			}
		case utils.TMCentisecond:
			if 100%num != 0 || num >= 100 {
				return nil, fmt.Errorf("BinSpanLenOption: Invalid span for centisecond %v, span value must be less than 1 second and 1 second must be evenly divisble by span", num)
			}
		case utils.TMMillisecond:
			if 1000%num != 0 || num >= 1000 {
				return nil, fmt.Errorf("BinSpanLenOption: Invalid span for millisecond %v, span value must be less than 1 second and 1 second must be evenly divisble by span", num)
			}
		case utils.TMMicrosecond:
			return nil, fmt.Errorf("BinSpanLenOption: Invalid span microsecond is not supported!")
		case utils.TMMonth:
			if num > 12 || 12%num != 0 {
				return nil, fmt.Errorf("BinSpanLenOption: Invalid span for month %v, span value must be less or equal to 1 year and 1 year must be evenly divisble by span", num)
			}
		case utils.TMQuarter:
			if num > 4 || 4%num != 0 {
				return nil, fmt.Errorf("BinSpanLenOption: Invalid span for quarter %v, span value must be less or equal to 1 year and 1 year must be evenly divisble by span", num)
			}
		}

		spanLength := &structs.BinSpanLength{
			Num:       float64(num),
			TimeScale: timeScale.(utils.TimeUnit),
		}

		return spanLength, nil
	}

	num, err := strconv.ParseFloat(number.(string), 64)
	if err != nil {
		return nil, fmt.Errorf("BinSpanLenOption: Invalid Number: %v is not a numerical value, err: %v", number.(string), err)
	}
	if num <= 0.0 {
		return nil, fmt.Errorf("BinSpanLenOption: Invalid span %v, span value must be greater than 0", num)
	}

	spanLength := &structs.BinSpanLength{
		Num:       num,
		TimeScale: utils.TMInvalid,
	}

	return spanLength, nil
}

func (p *parser) callonBinSpanLenOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinSpanLenOption1(stack["number"], stack["timeScale"])
}

func (c *current) onBinOptionMinSpan1(spanLength any) (any, error) {

	binOptionArgs := &BinOptionArgs{
		argOption: "minspan",
		binOptions: &structs.BinCmdOptions{
			MinSpan: spanLength.(*structs.BinSpanLength),
		},
	}
	return binOptionArgs, nil
}

func (p *parser) callonBinOptionMinSpan1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptionMinSpan1(stack["spanLength"])
}

func (c *current) onBinOptionMaxBins1(intAsStr any) (any, error) {
	numBins, err := strconv.ParseUint(intAsStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid limit (%v): %v", intAsStr.(string), err)
	}
	if numBins < 2 || numBins > 50000 {
		return nil, fmt.Errorf("Invalid number of bins %v: must be between 2 and 50000", numBins)
	}
	binOptionArgs := &BinOptionArgs{
		argOption: "bins",
		binOptions: &structs.BinCmdOptions{
			MaxBins: numBins,
		},
	}
	return binOptionArgs, nil
}

func (p *parser) callonBinOptionMaxBins1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptionMaxBins1(stack["intAsStr"])
}

func (c *current) onBinOptionAlignTime2(utcEpoch any) (any, error) {
	epoch, err := strconv.ParseUint(utcEpoch.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Invalid utc epoch value: %v for align time", utcEpoch.(string))
	}
	binOptionArgs := &BinOptionArgs{
		argOption: "aligntime",
		binOptions: &structs.BinCmdOptions{
			AlignTime: &epoch,
		},
	}

	return binOptionArgs, nil
}

func (p *parser) callonBinOptionAlignTime2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptionAlignTime2(stack["utcEpoch"])
}

func (c *current) onBinOptionAlignTime8(timestamp any) (any, error) {
	var epoch uint64 = 0
	var err error
	relTimeModifier := timestamp.(ast.TimeModifier)
	epochVal, err := CalculateRelativeTime(relTimeModifier, time.Now())
	epoch = uint64(epochVal)
	if err != nil {
		return nil, err
	}

	binOptionArgs := &BinOptionArgs{
		argOption: "aligntime",
		binOptions: &structs.BinCmdOptions{
			AlignTime: &epoch,
		},
	}

	return binOptionArgs, nil
}

func (p *parser) callonBinOptionAlignTime8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptionAlignTime8(stack["timestamp"])
}

func (c *current) onBinOptionStart1(number any) (any, error) {
	start, err := strconv.ParseFloat(number.(string), 64)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Cannot convert %v to float", number.(string))
	}
	binOptionArgs := &BinOptionArgs{
		argOption: "start",
		binOptions: &structs.BinCmdOptions{
			Start: &start,
		},
	}

	return binOptionArgs, nil
}

func (p *parser) callonBinOptionStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptionStart1(stack["number"])
}

func (c *current) onBinOptionEnd1(number any) (any, error) {
	end, err := strconv.ParseFloat(number.(string), 64)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Cannot convert %v to float", number.(string))
	}
	binOptionArgs := &BinOptionArgs{
		argOption: "end",
		binOptions: &structs.BinCmdOptions{
			End: &end,
		},
	}

	return binOptionArgs, nil
}

func (p *parser) callonBinOptionEnd1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptionEnd1(stack["number"])
}

func (c *current) onBinOptionSpan2(num1, num2 any) (any, error) {
	var coeff float64 = 1.0
	var base float64 = 10.0
	var err error

	if num2 != nil {
		base, err = strconv.ParseFloat(num2.(string), 64)
		if err != nil {
			return nil, fmt.Errorf("Spl peg: Invalid base in log span, %v cannot be converted to floar, err: %v", num2.(string), err)
		}
		if base <= 1.0 {
			return nil, fmt.Errorf("Spl peg: Invalid base in log span, base must be greater than 1")
		}
	}

	if num1 != nil {
		coeff, err = strconv.ParseFloat(num1.(string), 64)
		if err != nil {
			return nil, fmt.Errorf("Spl peg: Invalid coefficient in log span, %v cannot be converted to float, err: %v", num1.(string), err)
		}
		if coeff < 1.0 {
			return nil, fmt.Errorf("Spl peg: Invalid coefficient in log span, coefficient must be greater than or equal to 1")
		}
		if coeff >= base {
			return nil, fmt.Errorf("Spl peg: Invalid coefficient in log span, coefficient must be less than base")
		}
	}

	logSpan := &structs.LogSpan{
		Coefficient: coeff,
		Base:        base,
	}
	spanOptions := &structs.BinSpanOptions{
		LogSpan: logSpan,
	}
	binOptionArgs := &BinOptionArgs{
		argOption: "span",
		binOptions: &structs.BinCmdOptions{
			BinSpanOptions: spanOptions,
		},
	}
	return binOptionArgs, nil
}

func (p *parser) callonBinOptionSpan2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptionSpan2(stack["num1"], stack["num2"])
}

func (c *current) onBinOptionSpan17(spanLen any) (any, error) {

	spanOptions := &structs.BinSpanOptions{
		BinSpanLength: spanLen.(*structs.BinSpanLength),
	}

	binOptionArgs := &BinOptionArgs{
		argOption: "span",
		binOptions: &structs.BinCmdOptions{
			BinSpanOptions: spanOptions,
		},
	}
	return binOptionArgs, nil
}

func (p *parser) callonBinOptionSpan17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptionSpan17(stack["spanLen"])
}

func (c *current) onBinCmdOption1(option any) (any, error) {
	return option, nil
}

func (p *parser) callonBinCmdOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinCmdOption1(stack["option"])
}

func (c *current) onBinCmdOptionsList1(first, rest any) (any, error) {
	restSlice := rest.([]any)
	optionWasSpecified := make(map[string]bool)

	numOptions := 1 + len(restSlice)

	binCmdOption := &structs.BinCmdOptions{}

	for i := 0; i < numOptions; i++ {
		var binOptArg *BinOptionArgs
		if i == 0 {
			binOptArg = first.(*BinOptionArgs)
		} else {
			separator := restSlice[i-1].([]any)
			binOptArg = separator[1].(*BinOptionArgs)
		}

		argOption := binOptArg.argOption
		val, exist := optionWasSpecified[argOption]
		if exist && val {
			return nil, fmt.Errorf("Invalid Syntax, option: %v is already specified", argOption)
		}
		optionWasSpecified[argOption] = true

		switch argOption {
		case "minspan":
			binCmdOption.MinSpan = binOptArg.binOptions.MinSpan
		case "span":
			binCmdOption.BinSpanOptions = binOptArg.binOptions.BinSpanOptions
		case "bins":
			binCmdOption.MaxBins = binOptArg.binOptions.MaxBins
		case "start":
			binCmdOption.Start = binOptArg.binOptions.Start
		case "end":
			binCmdOption.End = binOptArg.binOptions.End
		case "aligntime":
			binCmdOption.AlignTime = binOptArg.binOptions.AlignTime
		default:
			return nil, fmt.Errorf("Not a Valid Bin Command Option: %v", argOption)
		}
	}

	return binCmdOption, nil
}

func (p *parser) callonBinCmdOptionsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinCmdOptionsList1(stack["first"], stack["rest"])
}

func (c *current) onBinBlock2(binCmdOption, field, newFieldName any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		NewColName: field.(string),
	}
	if newFieldName != nil {
		letColReq.NewColName = newFieldName.(string)
	}

	letColReq.BinRequest = binCmdOption.(*structs.BinCmdOptions)
	if letColReq.BinRequest.MaxBins == 0 {
		letColReq.BinRequest.MaxBins = 100
	}
	letColReq.BinRequest.Field = field.(string)

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return queryAgg, nil
}

func (p *parser) callonBinBlock2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinBlock2(stack["binCmdOption"], stack["field"], stack["newFieldName"])
}

func (c *current) onBinBlock14(field, newFieldName any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		NewColName: field.(string),
	}
	if newFieldName != nil {
		letColReq.NewColName = newFieldName.(string)
	}

	binCmdOption := &structs.BinCmdOptions{
		MaxBins: 100,
	}

	letColReq.BinRequest = binCmdOption
	letColReq.BinRequest.Field = field.(string)

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return queryAgg, nil
}

func (p *parser) callonBinBlock14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinBlock14(stack["field"], stack["newFieldName"])
}

func (c *current) onBinOptions1(spanOptions any) (any, error) {
	binOptions := &structs.BinOptions{
		SpanOptions: spanOptions.(*structs.SpanOptions),
	}
	return binOptions, nil
}

func (p *parser) callonBinOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptions1(stack["spanOptions"])
}

func (c *current) onSpanOptions1(spanLength any) (any, error) {
	spanOptions := &structs.SpanOptions{
		SpanLength: spanLength.(*structs.SpanLength),
	}
	return spanOptions, nil
}

func (p *parser) callonSpanOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpanOptions1(stack["spanLength"])
}

func (c *current) onSpanLength1(intAsStr, timeScale any) (any, error) {
	if timeScale.(utils.TimeUnit) == utils.TMYear {
		return nil, fmt.Errorf("SpanLength: Invalid time unit, year is not supported")
	}
	num, err := strconv.Atoi(intAsStr.(string))
	if err != nil {
		return nil, fmt.Errorf("SpanLength: Invalid num (%v): %v", intAsStr.(string), err)
	}

	spanLength := &structs.SpanLength{
		Num:       num,
		TimeScalr: timeScale.(utils.TimeUnit),
	}
	return spanLength, nil
}

func (p *parser) callonSpanLength1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpanLength1(stack["intAsStr"], stack["timeScale"])
}

func (c *current) onLimitExpr1(sortBy, intAsStr any) (any, error) {
	num, err := strconv.Atoi(intAsStr.(string))
	if err != nil {
		return nil, fmt.Errorf("SpanLength: Invalid num (%v): %v", intAsStr.(string), err)
	}

	limitExpr := &structs.LimitExpr{
		IsTop: true, // Default Value
		Num:   num,
	}

	if sortBy != nil {
		sortByStr, err := transferUint8ToString(sortBy)
		if err != nil {
			return nil, fmt.Errorf("Spl peg: Timechart: %v", err)
		}
		if sortByStr == "bottom" {
			limitExpr.IsTop = false
		}
	}

	return limitExpr, nil
}

func (p *parser) callonLimitExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitExpr1(stack["sortBy"], stack["intAsStr"])
}

func (c *current) onStatisticBlock1(statisticExpr any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		StatisticColRequest: statisticExpr.(*structs.StatisticExpr),
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	measureAgg := &structs.MeasureAggregator{
		MeasureCol:  "*",
		MeasureFunc: utils.Count,
	}

	measureOperations := make([]*structs.MeasureAggregator, 1)
	measureOperations[0] = measureAgg

	groupByColumns := append(statisticExpr.(*structs.StatisticExpr).FieldList, statisticExpr.(*structs.StatisticExpr).ByClause...)

	aggNode := &structs.QueryAggregators{}
	aggNode.Next = root
	aggNode.PipeCommandType = structs.GroupByType
	aggNode.GroupByRequest = &structs.GroupByRequest{
		MeasureOperations: measureOperations,
		GroupByColumns:    groupByColumns,
	}

	return aggNode, nil
}

func (p *parser) callonStatisticBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticBlock1(stack["statisticExpr"])
}

func (c *current) onStatisticExpr1(cmd, limit, fieldList, byClause, options any) (any, error) {

	statisticExpr := &structs.StatisticExpr{
		FieldList: fieldList.([]interface{})[1].([]string),
	}

	statisticCmd, err := transferUint8ToString(cmd)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: StatisticExpr: %v", err)
	}

	if statisticCmd == "top" {
		statisticExpr.StatisticFunctionMode = structs.SFMTop
	} else {
		statisticExpr.StatisticFunctionMode = structs.SFMRare
	}

	if limit != nil {
		statisticExpr.Limit = limit.(string)
	}

	if options != nil {
		statisticExpr.StatisticOptions = options.(*structs.StatisticOptions)
	} else {
		statisticExpr.StatisticOptions = &structs.StatisticOptions{
			ShowCount:    true,
			CountField:   "count",
			ShowPerc:     true,
			PercentField: "percent",
			UseOther:     false,
			OtherStr:     "Other",
		}
	}

	if byClause != nil {
		statisticExpr.ByClause = byClause.([]string)
	}

	return statisticExpr, nil
}

func (p *parser) callonStatisticExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticExpr1(stack["cmd"], stack["limit"], stack["fieldList"], stack["byClause"], stack["options"])
}

func (c *current) onStatisticLimit2(number any) (any, error) {
	return number.(string), nil
}

func (p *parser) callonStatisticLimit2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticLimit2(stack["number"])
}

func (c *current) onStatisticLimit7(limit any) (any, error) {
	return limit.(string), nil
}

func (p *parser) callonStatisticLimit7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticLimit7(stack["limit"])
}

func (c *current) onStatisticOptions1(option any) (any, error) {
	//Default value
	options := &structs.StatisticOptions{
		ShowCount:    true,
		CountField:   "count",
		ShowPerc:     true,
		PercentField: "percent",
		UseOther:     false,
		OtherStr:     "other",
	}

	optionSlice := option.([]any)
	for _, opt := range optionSlice {
		optArr := opt.([]string)
		// Check for matching option types
		switch optArr[0] {
		case "showcount":
			showCountBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.ShowCount = showCountBool
		case "countfield":
			options.CountField = optArr[1]
		case "showperc":
			showPercBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.ShowPerc = showPercBool
		case "percentfield":
			options.PercentField = optArr[1]
		case "useother":
			useOtherBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.UseOther = useOtherBool
		case "otherstr":
			options.OtherStr = optArr[1]
		default:
			return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: invalid option")
		}
	}

	return options, nil
}

func (p *parser) callonStatisticOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticOptions1(stack["option"])
}

func (c *current) onStatisticOption1(optionCMD, field any) (any, error) {
	optionArr := []string{optionCMD.(string), field.(string)}
	return optionArr, nil
}

func (p *parser) callonStatisticOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticOption1(stack["optionCMD"], stack["field"])
}

func (c *current) onStatisticOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: StatisticExpr: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonStatisticOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticOptionCMD1(stack["option"])
}

func (c *current) onByClause2(fieldList any) (any, error) {
	return fieldList.([]string), nil
}

func (p *parser) callonByClause2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByClause2(stack["fieldList"])
}

func (c *current) onByClause7(groupByBlock any) (any, error) {
	return groupByBlock.([]string), nil
}

func (p *parser) callonByClause7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByClause7(stack["groupByBlock"])
}

func (c *current) onDedupBlock1(dedupExpr any) (any, error) {

	letColReq := &structs.LetColumnsRequest{
		DedupColRequest: dedupExpr.(*structs.DedupExpr),
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonDedupBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupBlock1(stack["dedupExpr"])
}

func (c *current) onDedupExpr1(limitArr, options1, fieldList, options2, sortByClause any) (any, error) {
	dedupExpr := &structs.DedupExpr{
		FieldList:         fieldList.([]string),
		Limit:             1,
		DedupCombinations: make(map[string]map[int][]structs.SortValue, 0),
		DedupRecords:      make(map[string]map[string]interface{}, 0),
	}

	if limitArr != nil {
		limitStr := limitArr.([]interface{})[1].(string)
		limit, err := strconv.ParseUint(limitStr, 10, 64)
		if err != nil || limit == 0 {
			return nil, fmt.Errorf("Invalid limit (%v): %v", limitStr, err)
		}
		dedupExpr.Limit = limit
	}

	dedupExpr.DedupOptions = &structs.DedupOptions{
		Consecutive: false,
		KeepEmpty:   false,
		KeepEvents:  false,
	}

	if options1 != nil {
		dedupExpr.DedupOptions = options1.(*structs.DedupOptions)
	}
	if options2 != nil {
		options := options2.(*structs.DedupOptions)

		if options.Consecutive {
			dedupExpr.DedupOptions.Consecutive = options.Consecutive
		}
		if options.KeepEmpty {
			dedupExpr.DedupOptions.KeepEmpty = options.KeepEmpty
		}
		if options.KeepEvents {
			dedupExpr.DedupOptions.KeepEvents = options.KeepEvents
		}
	}

	if sortByClause != nil {
		dedupExpr.DedupSortEles = sortByClause.([]*structs.SortElement)

		// Make the DedupSortAscending from the DedupSortEles.
		dedupExpr.DedupSortAscending = make([]int, len(dedupExpr.DedupSortEles))
		for i, ele := range dedupExpr.DedupSortEles {
			if ele.SortByAsc {
				dedupExpr.DedupSortAscending[i] = 1
			} else {
				dedupExpr.DedupSortAscending[i] = -1
			}
		}
	}

	return dedupExpr, nil
}

func (p *parser) callonDedupExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupExpr1(stack["limitArr"], stack["options1"], stack["fieldList"], stack["options2"], stack["sortByClause"])
}

func (c *current) onDedupFieldName1(field any) (any, error) {
	return field, nil
}

func (p *parser) callonDedupFieldName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupFieldName1(stack["field"])
}

func (c *current) onSpaceSeparatedFieldNameList1(first, rest any) (any, error) {
	var fields []string
	fields = append(fields, first.(string))
	for _, r := range rest.([]any) {
		// Extracting the field name from the tuple (SPACE, FieldName)
		fields = append(fields, r.([]any)[1].(string))
	}

	return fields, nil
}

func (p *parser) callonSpaceSeparatedFieldNameList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpaceSeparatedFieldNameList1(stack["first"], stack["rest"])
}

func (c *current) onDedupFieldList1(first, rest any) (any, error) {
	// Convert `rest` to a slice. Each element of the slice will be a 2-element
	// slice where the first element is " " and the second is a FieldName.
	restSlice := rest.([]any)

	numFieldNames := 1 + len(restSlice)
	fields := make([]string, numFieldNames)
	fields[0] = first.(string)

	for i := 1; i < numFieldNames; i++ {
		separatorAndField := restSlice[i-1].([]any)
		fields[i] = separatorAndField[1].(string)
	}

	return fields, nil
}

func (p *parser) callonDedupFieldList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupFieldList1(stack["first"], stack["rest"])
}

func (c *current) onDedupOptions1(option any) (any, error) {
	//Default value
	options := &structs.DedupOptions{
		Consecutive: false,
		KeepEmpty:   false,
		KeepEvents:  false,
	}

	optionSlice := option.([]any)
	for _, opt := range optionSlice {
		optArr := opt.([]string)
		// Check for matching option types
		switch optArr[0] {
		case "consecutive":
			consecutiveBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: DedupBlock: Options: %v", err)
			}
			options.Consecutive = consecutiveBool
		case "keepempty":
			keepEmptyBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: DedupBlock: Options: %v", err)
			}
			options.KeepEmpty = keepEmptyBool
		case "keepevents":
			keepEventsBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: DedupBlock: Options: %v", err)
			}
			options.KeepEvents = keepEventsBool
		default:
			return nil, fmt.Errorf("Spl peg: DedupBlock: Options: invalid option")
		}
	}

	return options, nil
}

func (p *parser) callonDedupOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupOptions1(stack["option"])
}

func (c *current) onDedupOption1(optionCMD, field any) (any, error) {
	optionArr := []string{optionCMD.(string), field.(string)}
	return optionArr, nil
}

func (p *parser) callonDedupOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupOption1(stack["optionCMD"], stack["field"])
}

func (c *current) onDedupOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: DedupExpr: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonDedupOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupOptionCMD1(stack["option"])
}

func (c *current) onDedupSortByClause1(dedupSortEles any) (any, error) {
	return dedupSortEles, nil
}

func (p *parser) callonDedupSortByClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupSortByClause1(stack["dedupSortEles"])
}

func (c *current) onSortElements1(first, rest any) (any, error) {
	restSlice := rest.([]any)

	length := 1 + len(restSlice)
	sortEles := make([]*structs.SortElement, length)
	sortEles[0] = first.(*structs.SortElement)

	for i := 1; i < length; i++ {
		elements := restSlice[i-1].([]any)
		sortEles[i] = elements[1].(*structs.SortElement)
	}

	return sortEles, nil
}

func (p *parser) callonSortElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortElements1(stack["first"], stack["rest"])
}

func (c *current) onSingleSortElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSingleSortElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleSortElement1(stack["element"])
}

func (c *current) onSingleSortElementWithoutCast1(sortBySymbol, field any) (any, error) {
	sortByAsc := true

	symbol := sortBySymbol.([]byte)
	if len(symbol) > 0 && symbol[0] == '-' {
		sortByAsc = false
	}

	return &structs.SortElement{
		SortByAsc: sortByAsc,
		Op:        "",
		Field:     field.(string),
	}, nil
}

func (p *parser) callonSingleSortElementWithoutCast1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleSortElementWithoutCast1(stack["sortBySymbol"], stack["field"])
}

func (c *current) onSingleSortElementWithCast1(sortBySymbol, op, field any) (any, error) {
	sortByAsc := true

	symbol := sortBySymbol.([]byte)
	if len(symbol) > 0 && symbol[0] == '-' {
		sortByAsc = false
	}

	opStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: singleSortElementWithCast: %v", err)
	}

	return &structs.SortElement{
		SortByAsc: sortByAsc,
		Op:        opStr,
		Field:     field.(string),
	}, nil
}

func (p *parser) callonSingleSortElementWithCast1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleSortElementWithCast1(stack["sortBySymbol"], stack["op"], stack["field"])
}

func (c *current) onRenameBlock1(renameExpr any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		RenameColRequest: renameExpr.(*structs.RenameExpr),
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonRenameBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameBlock1(stack["renameExpr"])
}

func (c *current) onRenameExpr2(originalPattern, newPattern any) (any, error) {
	renameExpr := &structs.RenameExpr{
		RenameExprMode:  structs.REMPhrase,
		OriginalPattern: originalPattern.(string),
		NewPattern:      removeQuotes(newPattern),
	}

	return renameExpr, nil
}

func (p *parser) callonRenameExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameExpr2(stack["originalPattern"], stack["newPattern"])
}

func (c *current) onRenameExpr9(originalPattern, newPattern any) (any, error) {
	isRegex, err := isRegexRename(originalPattern.(string), newPattern.(string))
	if err != nil {
		return nil, fmt.Errorf("Spl peg: RenameExpr: %v", err)
	}

	var renameExprMode structs.RenameExprMode
	if isRegex {
		renameExprMode = structs.REMRegex
	} else {
		renameExprMode = structs.REMOverride
	}

	renameExpr := &structs.RenameExpr{
		RenameExprMode:  renameExprMode,
		OriginalPattern: originalPattern.(string),
		NewPattern:      newPattern.(string),
	}

	return renameExpr, nil
}

func (p *parser) callonRenameExpr9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameExpr9(stack["originalPattern"], stack["newPattern"])
}

func (c *current) onRexBlock1(field, str any) (any, error) {
	pattern := removeQuotes(str)
	rexColNames, err := getRexColNames(pattern)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: RexBlock: %v", err)
	}
	rexExpr := &structs.RexExpr{
		FieldName:   field.(string),
		Pattern:     transferPCREToRE2(pattern),
		RexColNames: rexColNames,
	}

	letColReq := &structs.LetColumnsRequest{
		RexColRequest: rexExpr,
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonRexBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRexBlock1(stack["field"], stack["str"])
}

func (c *current) onSortBlock1(limit, sortByEles any) (any, error) {

	sortExpr := &structs.SortExpr{
		SortEles:    sortByEles.([]*structs.SortElement),
		SortRecords: make(map[string]map[string]interface{}, 0),
		Limit:       10000,
	}

	if limit != nil {
		sortExpr.Limit = limit.(uint64)
	}

	ascendingArr := make([]int, len(sortExpr.SortEles))
	for i, ele := range sortExpr.SortEles {
		if ele.SortByAsc {
			ascendingArr[i] = 1
		} else {
			ascendingArr[i] = -1
		}
	}

	sortExpr.SortAscending = ascendingArr

	letColReq := &structs.LetColumnsRequest{
		SortColRequest: sortExpr,
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonSortBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortBlock1(stack["limit"], stack["sortByEles"])
}

func (c *current) onSortLimit1(intAsStr any) (any, error) {
	limit, err := strconv.ParseUint(intAsStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid limit (%v): %v", intAsStr.(string), err)
	}

	if limit == 0 {
		limit = math.MaxUint64
	}

	return limit, nil
}

func (p *parser) callonSortLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortLimit1(stack["intAsStr"])
}

func (c *current) onEvalBlock1(first, rest any) (any, error) {
	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: first.(*structs.LetColumnsRequest),
		},
	}

	leafQueryAgg := root
	restSlice := rest.([]any)
	for i := range restSlice {
		CommaSpaceAndEval := restSlice[i].([]any)
		nextQueryAgg := &structs.QueryAggregators{
			PipeCommandType: structs.OutputTransformType,
			OutputTransforms: &structs.OutputTransforms{
				LetColumns: CommaSpaceAndEval[1].(*structs.LetColumnsRequest),
			},
		}

		leafQueryAgg.Next = nextQueryAgg
		leafQueryAgg = leafQueryAgg.Next
	}

	return root, nil
}

func (p *parser) callonEvalBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalBlock1(stack["first"], stack["rest"])
}

func (c *current) onSingleEval1(field, expr any) (any, error) {
	fieldStr := field.(string)
	if strings.Contains(fieldStr, "*") {
		return nil, fmt.Errorf("New fields must not contain wildcards; invalid field: %v", field)
	}

	letColumnsRequest := expr.(*structs.LetColumnsRequest)
	letColumnsRequest.NewColName = fieldStr

	return letColumnsRequest, nil
}

func (p *parser) callonSingleEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleEval1(stack["field"], stack["expr"])
}

func (c *current) onEvalExpression1(value any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		ValueColRequest: value.(*structs.ValueExpr),
	}

	return letColReq, nil
}

func (p *parser) callonEvalExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalExpression1(stack["value"])
}

func (c *current) onConditionExpr2(condition, trueValue, falseValue any) (any, error) {

	node := &structs.ConditionExpr{
		Op:         "if",
		BoolExpr:   condition.(*structs.BoolExpr),
		TrueValue:  trueValue.(*structs.ValueExpr),
		FalseValue: falseValue.(*structs.ValueExpr),
	}

	return node, nil
}

func (p *parser) callonConditionExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr2(stack["condition"], stack["trueValue"], stack["falseValue"])
}

func (c *current) onConditionExpr15(opName, pair, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: ConditionExpr: %v", err)
	}
	pairs := make([]*structs.ConditionValuePair, 1)
	pairs[0] = pair.(*structs.ConditionValuePair)

	if rest != nil {
		restSlice := rest.([]any)
		for i := range restSlice {
			ele := restSlice[i].([]any)
			pairs = append(pairs, ele[1].(*structs.ConditionValuePair))
		}
	}

	node := &structs.ConditionExpr{
		Op:                  opNameStr,
		ConditionValuePairs: pairs,
	}

	return node, nil
}

func (p *parser) callonConditionExpr15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr15(stack["opName"], stack["pair"], stack["rest"])
}

func (c *current) onConditionExpr30(valueExpr, rest any) (any, error) {
	restSlice := rest.([]any)
	valueList := make([]*structs.ValueExpr, 1+len(restSlice))
	valueList[0] = valueExpr.(*structs.ValueExpr)

	for i := range restSlice {
		valueAtom := restSlice[i].([]any)
		valueList[i+1] = valueAtom[1].(*structs.ValueExpr)
	}

	node := &structs.ConditionExpr{
		Op:        "coalesce",
		ValueList: valueList,
	}

	return node, nil
}

func (p *parser) callonConditionExpr30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr30(stack["valueExpr"], stack["rest"])
}

func (c *current) onConditionExpr42(leftValue, rightValue any) (any, error) {
	valueList := make([]*structs.ValueExpr, 2)
	valueList[0] = leftValue.(*structs.ValueExpr)
	valueList[1] = rightValue.(*structs.ValueExpr)

	node := &structs.ConditionExpr{
		Op:        "nullif",
		ValueList: valueList,
	}

	return node, nil
}

func (p *parser) callonConditionExpr42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr42(stack["leftValue"], stack["rightValue"])
}

func (c *current) onConditionExpr52() (any, error) {
	node := &structs.ConditionExpr{
		Op: "null",
	}
	return node, nil
}

func (p *parser) callonConditionExpr52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr52()
}

func (c *current) onConditionValuePair1(condition, value any) (any, error) {
	conditionValuePair := &structs.ConditionValuePair{
		Condition: condition.(*structs.BoolExpr),
		Value:     value.(*structs.ValueExpr),
	}
	return conditionValuePair, nil
}

func (p *parser) callonConditionValuePair1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionValuePair1(stack["condition"], stack["value"])
}

func (c *current) onStringExprAsValueExpr1(stringExpr any) (any, error) {
	strExpr := stringExpr.(*structs.StringExpr)
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMStringExpr,
		StringExpr:    strExpr,
	}

	return valueExpr, nil
}

func (p *parser) callonStringExprAsValueExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExprAsValueExpr1(stack["stringExpr"])
}

func (c *current) onMultiValueExprAsValueExpr1(multiValueExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode:  structs.VEMMultiValueExpr,
		MultiValueExpr: multiValueExpr.(*structs.MultiValueExpr),
	}

	return valueExpr, nil
}

func (p *parser) callonMultiValueExprAsValueExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiValueExprAsValueExpr1(stack["multiValueExpr"])
}

func (c *current) onStringOrMultiValueExpr1(strOrMVExpr any) (any, error) {
	return strOrMVExpr.(*structs.ValueExpr), nil
}

func (p *parser) callonStringOrMultiValueExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringOrMultiValueExpr1(stack["strOrMVExpr"])
}

func (c *current) onMultiValueExpr2(opName, stringExpr, delim any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: MultiValueExpr: %v", err)
	}
	node := &structs.MultiValueExpr{
		Op:               opNameStr,
		StringExprParams: []*structs.StringExpr{stringExpr.(*structs.StringExpr), delim.(*structs.StringExpr)},
	}

	return node, nil
}

func (p *parser) callonMultiValueExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiValueExpr2(stack["opName"], stack["stringExpr"], stack["delim"])
}

func (c *current) onMultiValueExpr13(opName, multiValueExpr, startIndex, endIndex any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: MultiValueExpr: %v", err)
	}
	node := &structs.MultiValueExpr{
		Op:                   opNameStr,
		NumericExprParams:    []*structs.NumericExpr{startIndex.(*structs.NumericExpr)},
		MultiValueExprParams: []*structs.MultiValueExpr{multiValueExpr.(*structs.MultiValueExpr)},
	}
	if endIndex != nil {
		node.NumericExprParams = append(node.NumericExprParams, endIndex.(*structs.NumericExpr))
	}

	return node, nil
}

func (p *parser) callonMultiValueExpr13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiValueExpr13(stack["opName"], stack["multiValueExpr"], stack["startIndex"], stack["endIndex"])
}

func (c *current) onMultiValueExpr27(opName, multiValueExpr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: MultiValueExpr: %v", err)
	}
	node := &structs.MultiValueExpr{
		Op:                   opNameStr,
		MultiValueExprParams: []*structs.MultiValueExpr{multiValueExpr.(*structs.MultiValueExpr)},
	}

	return node, nil
}

func (p *parser) callonMultiValueExpr27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiValueExpr27(stack["opName"], stack["multiValueExpr"])
}

func (c *current) onMultiValueExpr37(opName, condition any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: MultiValueExpr: Failed to recognize operator: %v, err= %v", opName, err)
	}

	node := &structs.MultiValueExpr{
		Op:        opNameStr,
		Condition: condition.(*structs.BoolExpr),
	}

	return node, nil
}

func (p *parser) callonMultiValueExpr37() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiValueExpr37(stack["opName"], stack["condition"])
}

func (c *current) onMultiValueExpr45(opName, multiValueExpr, expr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: MultiValueExpr: %v", err)
	}
	node := &structs.MultiValueExpr{
		Op:                   opNameStr,
		MultiValueExprParams: []*structs.MultiValueExpr{multiValueExpr.(*structs.MultiValueExpr)},
		ValueExprParams:      []*structs.ValueExpr{expr.(*structs.ValueExpr)},
	}

	return node, nil
}

func (p *parser) callonMultiValueExpr45() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiValueExpr45(stack["opName"], stack["multiValueExpr"], stack["expr"])
}

func (c *current) onMultiValueExpr56(opName, startIndex, endIndex, stringExpr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: MultiValueExpr: %v", err)
	}
	node := &structs.MultiValueExpr{
		Op:                opNameStr,
		NumericExprParams: []*structs.NumericExpr{startIndex.(*structs.NumericExpr), endIndex.(*structs.NumericExpr)},
		StringExprParams:  []*structs.StringExpr{stringExpr.(*structs.StringExpr)},
	}

	return node, nil
}

func (p *parser) callonMultiValueExpr56() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiValueExpr56(stack["opName"], stack["startIndex"], stack["endIndex"], stack["stringExpr"])
}

func (c *current) onMultiValueExpr71(opName, mvLeft, mvRight, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: MultiValueExpr: %v", err)
	}
	node := &structs.MultiValueExpr{
		Op:                   opNameStr,
		MultiValueExprParams: []*structs.MultiValueExpr{mvLeft.(*structs.MultiValueExpr), mvRight.(*structs.MultiValueExpr)},
	}

	if rest != nil {
		restSlice := rest.([]any)
		node.StringExprParams = []*structs.StringExpr{restSlice[1].(*structs.StringExpr)}
	}

	return node, nil
}

func (p *parser) callonMultiValueExpr71() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiValueExpr71(stack["opName"], stack["mvLeft"], stack["mvRight"], stack["rest"])
}

func (c *current) onMultiValueExpr87(opName, multiValueExpr, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: MultiValueExpr: %v", err)
	}

	node := &structs.MultiValueExpr{
		Op:                   opNameStr,
		MultiValueExprParams: []*structs.MultiValueExpr{multiValueExpr.(*structs.MultiValueExpr)},
		InferTypes:           false, // default value
	}

	if rest != nil {
		restSlice := rest.([]any)
		inferTypes, err := transferUint8ToString(restSlice[1])
		if err != nil {
			return nil, fmt.Errorf("Spl peg: MultiValueExpr: %v", err)
		}
		if inferTypes == "true" {
			node.InferTypes = true
		}
	}

	return node, nil
}

func (p *parser) callonMultiValueExpr87() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiValueExpr87(stack["opName"], stack["multiValueExpr"], stack["rest"])
}

func (c *current) onMultiValueExpr103(opName, firstVal, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: MultiValueExpr: %v", err)
	}
	node := &structs.MultiValueExpr{
		Op:              opNameStr,
		ValueExprParams: []*structs.ValueExpr{firstVal.(*structs.ValueExpr)},
	}

	if rest != nil {
		restSlice := rest.([]any)
		for i := range restSlice {
			valueExprAtom := restSlice[i].([]any)
			node.ValueExprParams = append(node.ValueExprParams, valueExprAtom[1].(*structs.ValueExpr))
		}
	}

	return node, nil
}

func (p *parser) callonMultiValueExpr103() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiValueExpr103(stack["opName"], stack["firstVal"], stack["rest"])
}

func (c *current) onMultiValueExpr116(field any) (any, error) {
	expr := &structs.MultiValueExpr{
		MultiValueExprMode: structs.MVEMField,
		FieldName:          field.(string),
	}

	return expr, nil
}

func (p *parser) callonMultiValueExpr116() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiValueExpr116(stack["field"])
}

func (c *current) onTextExpr2(opName, stringExpr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:          opNameStr,
		Param:       stringExpr.(*structs.StringExpr),
		StrToRemove: "",
	}
	return node, nil
}

func (p *parser) callonTextExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr2(stack["opName"], stack["stringExpr"])
}

func (c *current) onTextExpr13(opName, firstVal, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	if rest == nil {
		return firstVal, nil
	}
	restSlice := rest.([]any)
	values := make([]*structs.StringExpr, 1+len(restSlice))
	values[0] = firstVal.(*structs.StringExpr)

	for i := range restSlice {
		stringAtom := restSlice[i].([]any)
		values[i+1] = stringAtom[1].(*structs.StringExpr)
	}
	node := &structs.TextExpr{
		Op:        opNameStr,
		ValueList: values,
	}
	return node, nil
}

func (p *parser) callonTextExpr13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr13(stack["opName"], stack["firstVal"], stack["rest"])
}

func (c *current) onTextExpr28(opName, multiValueExpr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:             opNameStr,
		MultiValueExpr: multiValueExpr.(*structs.MultiValueExpr),
	}
	return node, nil
}

func (p *parser) callonTextExpr28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr28(stack["opName"], stack["multiValueExpr"])
}

func (c *current) onTextExpr36(opName, multiValueExpr, delim any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:             opNameStr,
		MultiValueExpr: multiValueExpr.(*structs.MultiValueExpr),
		Delimiter:      delim.(*structs.StringExpr),
	}
	return node, nil
}

func (p *parser) callonTextExpr36() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr36(stack["opName"], stack["multiValueExpr"], stack["delim"])
}

func (c *current) onTextExpr47(opName, multiValueExpr, regexPattern any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("spl peg: TextExpr: %v", err)
	}
	regex, ok := regexPattern.(*structs.StringExpr)
	if !ok {
		return nil, fmt.Errorf("spl peg: regexPattern type assertion to StringExpr failed")
	}

	gobRegex := toputils.GobbableRegex{}
	err = gobRegex.SetRegex(regex.RawString)
	if err != nil {
		return nil, fmt.Errorf("spl peg: Regex compile: %v", err)
	}

	node := &structs.TextExpr{
		Op:             opNameStr,
		MultiValueExpr: multiValueExpr.(*structs.MultiValueExpr),
		Regex:          &gobRegex,
	}
	return node, nil
}

func (p *parser) callonTextExpr47() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr47(stack["opName"], stack["multiValueExpr"], stack["regexPattern"])
}

func (c *current) onTextExpr58(opName, stringExpr, startIndex, lengthParam any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	var lengthConverted *structs.NumericExpr
	if lengthParam != nil {
		lengthSlice, ok := lengthParam.([]interface{})
		if ok && len(lengthSlice) > 1 {
			length, ok := lengthSlice[1].(*structs.NumericExpr)
			if ok {
				lengthConverted = length
			} else {
				return nil, fmt.Errorf("Spl peg: TextExpr: Unable to assert length as *structs.NumericExpr")
			}
		}
	}
	node := &structs.TextExpr{
		Op:         opNameStr,
		Param:      stringExpr.(*structs.StringExpr),
		StartIndex: startIndex.(*structs.NumericExpr),
		LengthExpr: lengthConverted,
	}
	return node, nil
}

func (p *parser) callonTextExpr58() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr58(stack["opName"], stack["stringExpr"], stack["startIndex"], stack["lengthParam"])
}

func (c *current) onTextExpr74(value, format any) (any, error) {
	var formatExpr *structs.StringExpr
	if format != nil {
		formatSlice := format.([]interface{})
		formatExpr, _ = formatSlice[1].(*structs.StringExpr)
	}
	return &structs.TextExpr{
		IsTerminal: false,
		Op:         "tostring",
		Val:        value.(*structs.ValueExpr),
		Param:      formatExpr,
	}, nil
}

func (p *parser) callonTextExpr74() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr74(stack["value"], stack["format"])
}

func (c *current) onTextExpr86(opName, expr, strToRemoveExpr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}

	strToRemove := " \t"
	if strToRemoveExpr != nil {
		strToRemove = strToRemoveExpr.(string)
	}

	node := &structs.TextExpr{
		Op:          opNameStr,
		Param:       expr.(*structs.StringExpr),
		StrToRemove: removeQuotes(strToRemove),
	}

	return node, nil
}

func (p *parser) callonTextExpr86() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr86(stack["opName"], stack["expr"], stack["strToRemoveExpr"])
}

func (c *current) onTextExpr100(inputField, path any) (any, error) {
	pathExpr := path.(*SPathFieldExpr)
	return &structs.TextExpr{
		Op: "spath",
		SPathExpr: &structs.SPathExpr{
			InputColName:    inputField.(string),
			Path:            pathExpr.PathValue,
			IsPathFieldName: pathExpr.IsPathFieldName,
		},
	}, nil
}

func (p *parser) callonTextExpr100() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr100(stack["inputField"], stack["path"])
}

func (c *current) onTextExpr112(mask, ip any) (any, error) {
	return &structs.TextExpr{
		Op:    "ipmask",
		Val:   ip.(*structs.ValueExpr),
		Param: mask.(*structs.StringExpr),
	}, nil
}

func (p *parser) callonTextExpr112() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr112(stack["mask"], stack["ip"])
}

func (c *current) onTextExpr122(obj, key, value any) (any, error) {
	stringExpr := &structs.StringExpr{
		StringExprMode: structs.SEMRawStringList,
		StringList:     []string{key.(string), value.(string)},
	}
	return &structs.TextExpr{
		Op:    "object_to_array",
		Val:   obj.(*structs.ValueExpr),
		Param: stringExpr,
	}, nil
}

func (p *parser) callonTextExpr122() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr122(stack["obj"], stack["key"], stack["value"])
}

func (c *current) onTextExpr135(format, rest any) (any, error) {
	textExpr := &structs.TextExpr{
		Op:    "printf",
		Param: format.(*structs.StringExpr),
	}
	if rest != nil {
		restSlice := rest.([]any)
		valueList := make([]*structs.StringExpr, len(restSlice))

		for i := range restSlice {
			valueAtom := restSlice[i].([]any)
			valueList[i] = valueAtom[1].(*structs.StringExpr)
		}
		textExpr.ValueList = valueList
	}

	return textExpr, nil
}

func (p *parser) callonTextExpr135() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr135(stack["format"], stack["rest"])
}

func (c *current) onTextExpr147(containInternalFields any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMRawString,
		RawString:      "true", // default value
	}

	if containInternalFields != nil {
		restSlice := containInternalFields.([]any)
		containInternalFieldsStr, err := transferUint8ToString(restSlice[0])
		if err != nil {
			return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
		}
		if containInternalFieldsStr == "false" {
			expr.RawString = "false"
		}
	}

	return &structs.TextExpr{
		Op:    "tojson",
		Param: expr,
	}, nil
}

func (p *parser) callonTextExpr147() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr147(stack["containInternalFields"])
}

func (c *current) onTextExpr159(field, threshold, match, delims any) (any, error) {
	textExpr := &structs.TextExpr{
		Op: "cluster",
	}

	cluster := &structs.Cluster{
		Field:     field.(string),
		Threshold: 0.8,
		Match:     "termlist",
	}

	if threshold != nil {
		slice := threshold.([]interface{})
		thresholdStr := slice[2].(string)
		val, err := strconv.ParseFloat(thresholdStr, 64)
		if err != nil {
			return nil, fmt.Errorf("Spl peg: TextExpr: invalid threshold: %v", thresholdStr)
		}
		cluster.Threshold = val
	}

	if match != nil {
		slice := match.([]interface{})
		matchStr, err := transferUint8ToString(slice[2])
		if err != nil {
			return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
		}
		cluster.Match = matchStr
	}

	if delims != nil {
		slice := delims.([]interface{})
		delimsStr := slice[2].(string)
		cluster.Delims = delimsStr
	}

	textExpr.Cluster = cluster

	return textExpr, nil
}

func (p *parser) callonTextExpr159() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr159(stack["field"], stack["threshold"], stack["match"], stack["delims"])
}

func (c *current) onTextExpr187(filter any) (any, error) {
	textExpr := &structs.TextExpr{
		Op: "getfields",
	}

	if filter != nil {
		textExpr.Param = filter.(*structs.StringExpr)
	}

	return textExpr, nil
}

func (p *parser) callonTextExpr187() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr187(stack["filter"])
}

func (c *current) onTextExpr195(valueExpr any) (any, error) {
	return &structs.TextExpr{
		Op:  "typeof",
		Val: valueExpr.(*structs.ValueExpr),
	}, nil
}

func (p *parser) callonTextExpr195() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr195(stack["valueExpr"])
}

func (c *current) onTextExpr202(val, regex, replacement any) (any, error) {
	return &structs.TextExpr{
		Op:        "replace",
		Val:       val.(*structs.ValueExpr),
		ValueList: []*structs.StringExpr{regex.(*structs.StringExpr), replacement.(*structs.StringExpr)},
	}, nil
}

func (p *parser) callonTextExpr202() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr202(stack["val"], stack["regex"], stack["replacement"])
}

func (c *current) onTextExpr215(val, format any) (any, error) {
	return &structs.TextExpr{
		Op:    "strftime",
		Val:   val.(*structs.ValueExpr),
		Param: format.(*structs.StringExpr),
	}, nil
}

func (p *parser) callonTextExpr215() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr215(stack["val"], stack["format"])
}

func (c *current) onTextExpr225(val, format any) (any, error) {
	return &structs.TextExpr{
		Op:    "strptime",
		Val:   val.(*structs.ValueExpr),
		Param: format.(*structs.StringExpr),
	}, nil
}

func (p *parser) callonTextExpr225() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr225(stack["val"], stack["format"])
}

func (c *current) onQuotedPathString1(str any) (any, error) {
	return &SPathFieldExpr{
		PathValue:       removeQuotes(str),
		IsPathFieldName: false,
	}, nil
}

func (p *parser) callonQuotedPathString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedPathString1(stack["str"])
}

func (c *current) onUnquotedPathValue1(str any) (any, error) {
	return &SPathFieldExpr{
		PathValue:       removeQuotes(str),
		IsPathFieldName: true,
	}, nil
}

func (p *parser) callonUnquotedPathValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedPathValue1(stack["str"])
}

func (c *current) onStrToRemoveExpr1(strToRemove any) (any, error) {
	return strToRemove, nil
}

func (p *parser) callonStrToRemoveExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStrToRemoveExpr1(stack["strToRemove"])
}

func (c *current) onEvalFieldToRead2() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEvalFieldToRead2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalFieldToRead2()
}

func (c *current) onEvalFieldToRead8(field any) (any, error) {
	return field, nil
}

func (p *parser) callonEvalFieldToRead8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalFieldToRead8(stack["field"])
}

func (c *current) onWhereBlock1(condition any) (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			FilterRows: condition.(*structs.BoolExpr),
		},
	}

	return queryAgg, nil
}

func (p *parser) callonWhereBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereBlock1(stack["condition"])
}

func (c *current) onBoolExpr1(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonBoolExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExpr1(stack["expr"])
}

func (c *current) onBoolExprLevel41(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.BoolExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.BoolExpr{
			IsTerminal: false,
			BoolOp:     structs.BoolOpOr,
			LeftBool:   cur,
			RightBool:  opAndClause[1].(*structs.BoolExpr),
		}
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel41(stack["first"], stack["rest"])
}

func (c *current) onBoolExprLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.BoolExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.BoolExpr{
			IsTerminal: false,
			BoolOp:     structs.BoolOpAnd,
			LeftBool:   cur,
			RightBool:  opAndClause[1].(*structs.BoolExpr),
		}
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel31(stack["first"], stack["rest"])
}

func (c *current) onBoolExprLevel22(first any) (any, error) {
	cur := &structs.BoolExpr{
		IsTerminal: false,
		BoolOp:     structs.BoolOpNot,
		LeftBool:   first.(*structs.BoolExpr),
		RightBool:  nil,
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel22(stack["first"])
}

func (c *current) onBoolExprLevel29(first any) (any, error) {
	return first, nil
}

func (p *parser) callonBoolExprLevel29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel29(stack["first"])
}

func (c *current) onBoolExprLevel12(first any) (any, error) {
	return first, nil
}

func (p *parser) callonBoolExprLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel12(stack["first"])
}

func (c *current) onBoolExprLevel18(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonBoolExprLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel18(stack["expr"])
}

func (c *current) onEvalComparisonExpr2(op, value any) (any, error) {
	opNameStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: BoolExpr: %v", err)
	}
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  value.(*structs.ValueExpr),
		RightValue: nil,
		ValueOp:    opNameStr,
	}

	if opNameStr == "searchmatch" {
		valExpr := value.(*structs.ValueExpr)
		if valExpr.StringExpr == nil {
			return nil, fmt.Errorf("Spl peg: Searchmatch should only have string values as argument")
		}

		fieldsList, err := SearchMatchGetFields(valExpr.StringExpr.RawString)
		if err != nil {
			return nil, err
		}

		valExpr.StringExpr.StringExprMode = structs.SEMFieldList
		valExpr.StringExpr.FieldList = fieldsList
		expr.LeftValue = valExpr
	}

	return expr, nil
}

func (p *parser) callonEvalComparisonExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalComparisonExpr2(stack["op"], stack["value"])
}

func (c *current) onEvalComparisonExpr17(opName, leftValue, rightValue any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: BoolExpr: %v", err)
	}
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  leftValue.(*structs.ValueExpr),
		RightValue: rightValue.(*structs.ValueExpr),
		ValueOp:    opNameStr,
	}
	return expr, nil
}

func (p *parser) callonEvalComparisonExpr17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalComparisonExpr17(stack["opName"], stack["leftValue"], stack["rightValue"])
}

func (c *current) onEvalComparisonExpr32(left, valueToJudge, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ValueExpr, 1+len(restSlice))
	slice[0] = valueToJudge.(*structs.ValueExpr)

	for i := range restSlice {
		valueAtom := restSlice[i].([]any)
		slice[i+1] = valueAtom[1].(*structs.ValueExpr)
	}

	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  left.(*structs.ValueExpr),
		ValueList:  slice,
		ValueOp:    "in",
	}
	return expr, nil
}

func (p *parser) callonEvalComparisonExpr32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalComparisonExpr32(stack["left"], stack["valueToJudge"], stack["rest"])
}

func (c *current) onEvalComparisonExpr47(valueToJudge, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ValueExpr, len(restSlice))

	for i := range restSlice {
		valueAtom := restSlice[i].([]any)
		slice[i] = valueAtom[1].(*structs.ValueExpr)
	}

	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  valueToJudge.(*structs.ValueExpr),
		ValueList:  slice,
		ValueOp:    "in",
	}
	return expr, nil
}

func (p *parser) callonEvalComparisonExpr47() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalComparisonExpr47(stack["valueToJudge"], stack["rest"])
}

func (c *current) onBoolComparisonExpr1(left, op, right any) (any, error) {
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  left.(*structs.ValueExpr),
		RightValue: right.(*structs.ValueExpr),
		ValueOp:    op.(string),
	}

	return expr, nil
}

func (p *parser) callonBoolComparisonExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolComparisonExpr1(stack["left"], stack["op"], stack["right"])
}

func (c *current) onValueExpr2(condition any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMConditionExpr,
		ConditionExpr: condition.(*structs.ConditionExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr2(stack["condition"])
}

func (c *current) onValueExpr5(condition any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMConditionExpr,
		ConditionExpr: condition.(*structs.ConditionExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr5(stack["condition"])
}

func (c *current) onValueExpr11(numeric any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMNumericExpr,
		NumericExpr:   numeric.(*structs.NumericExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr11(stack["numeric"])
}

func (c *current) onValueExpr14(str any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMStringExpr,
		StringExpr:    str.(*structs.StringExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr14(stack["str"])
}

func (c *current) onValueExpr17(str any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMStringExpr,
		StringExpr:    str.(*structs.StringExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr17(stack["str"])
}

func (c *current) onValueExpr23(boolean any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolean.(*structs.BoolExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr23(stack["boolean"])
}

func (c *current) onValueExpr29(multiValueExpr any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode:  structs.VEMMultiValueExpr,
		MultiValueExpr: multiValueExpr.(*structs.MultiValueExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr29(stack["multiValueExpr"])
}

func (c *current) onStringExpr2(text any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMTextExpr,
		TextExpr:       text.(*structs.TextExpr),
	}

	return expr, nil
}

func (p *parser) callonStringExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr2(stack["text"])
}

func (c *current) onStringExpr8(str any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMRawString,
		RawString:      removeQuotes(str),
	}

	return expr, nil
}

func (p *parser) callonStringExpr8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr8(stack["str"])
}

func (c *current) onStringExpr14(field any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMField,
		FieldName:      field.(string),
	}

	return expr, nil
}

func (p *parser) callonStringExpr14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr14(stack["field"])
}

func (c *current) onStringExpr27(concat any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMConcatExpr,
		ConcatExpr:     concat.(*structs.ConcatExpr),
	}

	return expr, nil
}

func (p *parser) callonStringExpr27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr27(stack["concat"])
}

func (c *current) onConcatExpr1(first, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ConcatAtom, 1+len(restSlice))
	slice[0] = first.(*structs.ConcatAtom)

	for i := range restSlice {
		concatAndAtom := restSlice[i].([]any)
		slice[i+1] = concatAndAtom[1].(*structs.ConcatAtom)
	}

	expr := &structs.ConcatExpr{
		Atoms: slice,
	}

	return expr, nil
}

func (p *parser) callonConcatExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatExpr1(stack["first"], stack["rest"])
}

func (c *current) onConcatAtom2(text any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField:  false,
		Value:    "",
		TextExpr: text.(*structs.TextExpr),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom2(stack["text"])
}

func (c *current) onConcatAtom5(str any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: false,
		Value:   removeQuotes(str),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom5(stack["str"])
}

func (c *current) onConcatAtom8(number any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: false,
		Value:   number.(string),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom8(stack["number"])
}

func (c *current) onConcatAtom11(field any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: true,
		Value:   field.(string),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom11(stack["field"])
}

func (c *current) onNumericExpr1(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExpr1(stack["expr"])
}

func (c *current) onNumericExprLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.NumericExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.NumericExpr{
			IsTerminal:      false,
			Op:              opAndClause[0].(string),
			Left:            cur,
			Right:           opAndClause[1].(*structs.NumericExpr),
			NumericExprMode: structs.NEMNumericExpr,
		}
	}

	return cur, nil
}

func (p *parser) callonNumericExprLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel31(stack["first"], stack["rest"])
}

func (c *current) onNumericExprLevel21(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.NumericExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.NumericExpr{
			IsTerminal:      false,
			Op:              opAndClause[0].(string),
			Left:            cur,
			Right:           opAndClause[1].(*structs.NumericExpr),
			NumericExprMode: structs.NEMNumericExpr,
		}
	}

	return cur, nil
}

func (p *parser) callonNumericExprLevel21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel21(stack["first"], stack["rest"])
}

func (c *current) onNumericParamExpr1(expr any) (any, error) {
	rightNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	return rightNumericExpr, nil
}

func (p *parser) callonNumericParamExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericParamExpr1(stack["expr"])
}

func (c *current) onNumericExprLevel12(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericExprLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel12(stack["expr"])
}

func (c *current) onNumericExprLevel18(numericEvalExpr any) (any, error) {
	return numericEvalExpr, nil
}

func (p *parser) callonNumericExprLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel18(stack["numericEvalExpr"])
}

func (c *current) onNumericExprLevel111(field any) (any, error) {
	expr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    true,
		Value:           field.(string),
		NumericExprMode: structs.NEMNumberField,
	}

	return expr, nil
}

func (p *parser) callonNumericExprLevel111() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel111(stack["field"])
}

func (c *current) onNumericExprLevel114(number any) (any, error) {
	expr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    false,
		Value:           number.(string),
		NumericExprMode: structs.NEMNumber,
	}

	return expr, nil
}

func (p *parser) callonNumericExprLevel114() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel114(stack["number"])
}

func (c *current) onNumericEvalExpr2(opName, expr any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)
	node, err := createNumericExpr(opNameStr, leftNumericExpr, nil, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr2(stack["opName"], stack["expr"])
}

func (c *current) onNumericEvalExpr31(roundExpr, expr, roundPrecision any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	var rightNumericExpr *structs.NumericExpr
	if roundPrecision != nil {
		rightNumericExpr, ok = roundPrecision.(*structs.NumericExpr)
		if !ok {
			return nil, fmt.Errorf("Failed to assert roundPrecision as *structs.NumericExpr")
		}
	}

	node, err := createNumericExpr("round", leftNumericExpr, rightNumericExpr, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr31(stack["roundExpr"], stack["expr"], stack["roundPrecision"])
}

func (c *current) onNumericEvalExpr42(opName any) (any, error) {
	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)
	return &structs.NumericExpr{
		IsTerminal: true,
		Op:         opNameStr,
	}, nil
}

func (p *parser) callonNumericEvalExpr42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr42(stack["opName"])
}

func (c *current) onNumericEvalExpr52(stringExpr, baseExpr any) (any, error) {
	stringExprConverted, ok := stringExpr.(*structs.StringExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert stringExpr as *structs.StringExpr")
	}

	var baseExprConverted *structs.NumericExpr
	if baseExpr != nil {
		baseSlice, ok := baseExpr.([]interface{})
		if ok && len(baseSlice) > 1 {
			if base, ok := baseSlice[1].(*structs.NumericExpr); ok {
				baseExprConverted = base
			} else {
				return nil, fmt.Errorf("Failed to assert base as *structs.NumericExpr")
			}
		}
	}

	node := &structs.NumericExpr{
		IsTerminal:      false,
		Op:              "tonumber",
		Left:            nil,
		Right:           baseExprConverted,
		Val:             stringExprConverted,
		NumericExprMode: structs.NEMNumericExpr,
	}
	return node, nil
}

func (p *parser) callonNumericEvalExpr52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr52(stack["stringExpr"], stack["baseExpr"])
}

func (c *current) onNumericEvalExpr64(lenExpr, expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericEvalExpr64() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr64(stack["lenExpr"], stack["expr"])
}

func (c *current) onNumericEvalExpr72(opName, expr, param any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)

	var rightNumericExpr *structs.NumericExpr
	if param == nil {
		return nil, fmt.Errorf("Function: %v 's param can not be nil", opNameStr)
	}
	rightNumericExpr, ok = param.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert param as *structs.NumericExpr")
	}

	node, err := createNumericExpr(opNameStr, leftNumericExpr, rightNumericExpr, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr72() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr72(stack["opName"], stack["expr"], stack["param"])
}

func (c *current) onNumericEvalExpr85(opName, expr, param any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)

	var rightNumericExpr *structs.NumericExpr
	if param != nil {
		rightNumericExpr, ok = param.(*structs.NumericExpr)
		if !ok {
			return nil, fmt.Errorf("Failed to assert param as *structs.NumericExpr")
		}
	}

	node, err := createNumericExpr(opNameStr, leftNumericExpr, rightNumericExpr, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr85() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr85(stack["opName"], stack["expr"], stack["param"])
}

func (c *current) onNumericEvalExpr96(opName, expr, specifier any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: NumericExpr: %v", err)
	}
	node, err := createNumericExpr(opNameStr, expr.(*structs.NumericExpr), nil, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}
	relTimeSpecifier, ok := specifier.(utils.RelativeTimeExpr)
	if !ok {
		return nil, fmt.Errorf("specifier is not of type RelativeTimeExpr")
	}
	node.RelativeTime = relTimeSpecifier
	return node, nil
}

func (p *parser) callonNumericEvalExpr96() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr96(stack["opName"], stack["expr"], stack["specifier"])
}

func (c *current) onLenExpr2(str any) (any, error) {

	leftNumericExpr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    false,
		Value:           str.(string),
		NumericExprMode: structs.NEMLenString,
	}

	node, err := createNumericExpr("len", leftNumericExpr, nil, structs.NEMLenString)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonLenExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLenExpr2(stack["str"])
}

func (c *current) onLenExpr8(field any) (any, error) {

	leftNumericExpr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    true,
		Value:           field.(string),
		NumericExprMode: structs.NEMLenField,
	}

	node, err := createNumericExpr("len", leftNumericExpr, nil, structs.NEMLenField)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonLenExpr8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLenExpr8(stack["field"])
}

func (c *current) onHeadOptionNull1(boolVal any) (any, error) {
	optionArg := &HeadOptionArgs{
		argOption: "null",
		headExpr: &structs.HeadExpr{
			Null: boolVal.(bool),
		},
	}

	return optionArg, nil
}

func (p *parser) callonHeadOptionNull1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOptionNull1(stack["boolVal"])
}

func (c *current) onHeadOptionKeeplast1(boolVal any) (any, error) {
	optionArg := &HeadOptionArgs{
		argOption: "keeplast",
		headExpr: &structs.HeadExpr{
			Keeplast: boolVal.(bool),
		},
	}

	return optionArg, nil
}

func (p *parser) callonHeadOptionKeeplast1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOptionKeeplast1(stack["boolVal"])
}

func (c *current) onHeadOptionLimit1(intAsStr any) (any, error) {
	limit, err := strconv.ParseUint(intAsStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid limit (%v): %v", intAsStr.(string), err)
	}
	optionArg := &HeadOptionArgs{
		argOption: "limit",
		headExpr: &structs.HeadExpr{
			MaxRows: limit,
		},
	}

	return optionArg, nil
}

func (p *parser) callonHeadOptionLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOptionLimit1(stack["intAsStr"])
}

func (c *current) onHeadOptionExpr1(boolExpr any) (any, error) {
	optionArg := &HeadOptionArgs{
		argOption: "boolexpr",
		headExpr: &structs.HeadExpr{
			BoolExpr: boolExpr.(*structs.BoolExpr),
		},
	}

	return optionArg, nil
}

func (p *parser) callonHeadOptionExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOptionExpr1(stack["boolExpr"])
}

func (c *current) onHeadOption1(option any) (any, error) {
	return option, nil
}

func (p *parser) callonHeadOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOption1(stack["option"])
}

func (c *current) onHeadOptionList1(first, rest any) (any, error) {
	restSlice := rest.([]any)
	optionWasSpecified := make(map[string]bool)
	optionWasSpecified["null"] = false
	optionWasSpecified["keeplast"] = false
	optionWasSpecified["boolexpr"] = false
	optionWasSpecified["limit"] = false

	numOptions := 1 + len(restSlice)

	headExpr := &structs.HeadExpr{}

	for i := 0; i < numOptions; i++ {
		var headOptArg *HeadOptionArgs
		if i == 0 {
			headOptArg = first.(*HeadOptionArgs)
		} else {
			separator := restSlice[i-1].([]any)
			headOptArg = separator[1].(*HeadOptionArgs)
		}

		argOption := headOptArg.argOption
		val, exist := optionWasSpecified[argOption]
		if !exist {
			return nil, fmt.Errorf("Not a Valid HeadOption: %v", argOption)
		}
		if val {
			return nil, fmt.Errorf("Invalid Syntax, option: %v is already specified", argOption)
		}
		optionWasSpecified[argOption] = true

		switch argOption {
		case "null":
			headExpr.Null = headOptArg.headExpr.Null
		case "keeplast":
			headExpr.Keeplast = headOptArg.headExpr.Keeplast
		case "limit":
			headExpr.MaxRows = headOptArg.headExpr.MaxRows
		case "boolexpr":
			headExpr.BoolExpr = headOptArg.headExpr.BoolExpr
		default:
			return nil, fmt.Errorf("Not a Valid HeadOption: %v", argOption)
		}
	}

	isBoolExpr, _ := optionWasSpecified["boolexpr"]
	if !isBoolExpr {
		isNull, _ := optionWasSpecified["null"]
		if isNull {
			return nil, fmt.Errorf("Invalid Syntax, null option can only be present with condition boolean expression")
		}
		isKeeplast, _ := optionWasSpecified["keeplast"]
		if isKeeplast {
			return nil, fmt.Errorf("Invalid Syntax, keeplast option can only be present with condition boolean expression")
		}
	}

	return headExpr, nil
}

func (p *parser) callonHeadOptionList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOptionList1(stack["first"], stack["rest"])
}

func (c *current) onHeadBlock2(headExpr any) (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			HeadRequest: headExpr.(*structs.HeadExpr),
		},
	}

	return queryAgg, nil
}

func (p *parser) callonHeadBlock2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadBlock2(stack["headExpr"])
}

func (c *current) onHeadBlock8(intAsStr any) (any, error) {
	limit, err := strconv.ParseUint(intAsStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid limit (%v): %v", intAsStr.(string), err)
	}

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			HeadRequest: &structs.HeadExpr{
				MaxRows: limit,
			},
		},
	}

	return queryAgg, nil
}

func (p *parser) callonHeadBlock8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadBlock8(stack["intAsStr"])
}

func (c *current) onHeadBlock14() (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			HeadRequest: &structs.HeadExpr{
				MaxRows: uint64(10), // From https://docs.splunk.com/Documentation/Splunk/9.1.0/SearchReference/Head
			},
		},
	}

	return queryAgg, nil
}

func (p *parser) callonHeadBlock14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadBlock14()
}

func (c *current) onTailBlock2(intAsStr any) (any, error) {
	limit, err := strconv.ParseUint(intAsStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid limit (%v): %v", intAsStr.(string), err)
	}

	tExpr := &structs.TailExpr{
		TailRecords: make(map[string]map[string]interface{}, 0),
		TailRows:    limit,
	}

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			TailRequest: tExpr,
		},
	}

	return queryAgg, nil
}

func (p *parser) callonTailBlock2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailBlock2(stack["intAsStr"])
}

func (c *current) onTailBlock8() (any, error) {

	tExpr := &structs.TailExpr{
		TailRecords: make(map[string]map[string]interface{}, 0),
		TailRows:    uint64(10), // From https://docs.splunk.com/Documentation/SplunkCloud/9.1.2308/SearchReference/Tail
	}

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			TailRequest: tExpr,
		},
	}

	return queryAgg, nil
}

func (p *parser) callonTailBlock8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailBlock8()
}

func (c *current) onAggregationList1(first, rest any) (any, error) {
	// Convert `rest` to a slice. Each element of the slice will be a 2-element
	// slice where the first element is ", " and the second is an Aggregator.
	restSlice := rest.([]any)

	numAggs := 1 + len(restSlice)
	aggsSlice := make([]*aggregator, numAggs)
	aggsSlice[0] = first.(*aggregator)

	for i := 1; i < numAggs; i++ {
		separatorAndAgg := restSlice[i-1].([]any)
		aggsSlice[i] = separatorAndAgg[1].(*aggregator)
	}

	return aggsSlice, nil
}

func (p *parser) callonAggregationList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregationList1(stack["first"], stack["rest"])
}

func (c *current) onAggregator1(aggFunc, asField any) (any, error) {
	agg := &aggregator{}
	agg.measureAgg = aggFunc.(*structs.MeasureAggregator)

	if asField != nil {
		agg.renameOutputField = true
		agg.outputFieldNewName = asField.(string)
	}

	return agg, nil
}

func (p *parser) callonAggregator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregator1(stack["aggFunc"], stack["asField"])
}

func (c *current) onAggFunction1(agg any) (any, error) {
	return agg, nil
}

func (p *parser) callonAggFunction1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggFunction1(stack["agg"])
}

func (c *current) onAsField1(field any) (any, error) {
	fieldStr := field.(string)

	if strings.Contains(fieldStr, "*") {
		return nil, errors.New("The field specified in `AS` cannot contain wildcards")
	}

	if fieldStr[0] == '"' && fieldStr[len(fieldStr)-1] == '"' {
		fieldStr = fieldStr[1 : len(fieldStr)-1]
	}

	return fieldStr, nil
}

func (p *parser) callonAsField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsField1(stack["field"])
}

func (c *current) onAggCount2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Count,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggCount2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggCount2(stack["valueExpr"])
}

func (c *current) onAggCount12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Count,
	}

	return agg, nil
}

func (p *parser) callonAggCount12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggCount12(stack["field"])
}

func (c *current) onAggCount21() (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  "*",
		MeasureFunc: utils.Count,
	}

	return agg, nil
}

func (p *parser) callonAggCount21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggCount21()
}

func (c *current) onAggDistinctCount2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Cardinality,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggDistinctCount2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggDistinctCount2(stack["valueExpr"])
}

func (c *current) onAggDistinctCount12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Cardinality,
	}

	return agg, nil
}

func (p *parser) callonAggDistinctCount12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggDistinctCount12(stack["field"])
}

func (c *current) onAggAvg2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Avg,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggAvg2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAvg2(stack["valueExpr"])
}

func (c *current) onAggAvg10(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Avg,
	}

	return agg, nil
}

func (p *parser) callonAggAvg10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAvg10(stack["field"])
}

func (c *current) onAggMin2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Min,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggMin2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMin2(stack["valueExpr"])
}

func (c *current) onAggMin10(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Min,
	}

	return agg, nil
}

func (p *parser) callonAggMin10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMin10(stack["field"])
}

func (c *current) onAggMax2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Max,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggMax2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMax2(stack["valueExpr"])
}

func (c *current) onAggMax10(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Max,
	}

	return agg, nil
}

func (p *parser) callonAggMax10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMax10(stack["field"])
}

func (c *current) onAggRange2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Range,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggRange2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRange2(stack["valueExpr"])
}

func (c *current) onAggRange10(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Range,
	}

	return agg, nil
}

func (p *parser) callonAggRange10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRange10(stack["field"])
}

func (c *current) onAggSum2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Sum,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggSum2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSum2(stack["valueExpr"])
}

func (c *current) onAggSum10(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Sum,
	}

	return agg, nil
}

func (p *parser) callonAggSum10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSum10(stack["field"])
}

func (c *current) onAggEstdc2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Estdc,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggEstdc2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEstdc2(stack["boolComparisonExpr"])
}

func (c *current) onAggEstdc12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Estdc,
	}

	return agg, nil
}

func (p *parser) callonAggEstdc12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEstdc12(stack["field"])
}

func (c *current) onAggEstdcError2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.EstdcError,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggEstdcError2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEstdcError2(stack["boolComparisonExpr"])
}

func (c *current) onAggEstdcError12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.EstdcError,
	}

	return agg, nil
}

func (p *parser) callonAggEstdcError12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEstdcError12(stack["field"])
}

func (c *current) onAggExactPerc2(numStr, boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.ExactPerc,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
		Param:           numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggExactPerc2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggExactPerc2(stack["numStr"], stack["boolComparisonExpr"])
}

func (c *current) onAggExactPerc16(numStr, field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.ExactPerc,
		Param:       numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggExactPerc16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggExactPerc16(stack["numStr"], stack["field"])
}

func (c *current) onAggPerc2(numStr, boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Perc,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
		Param:           numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggPerc2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggPerc2(stack["numStr"], stack["boolComparisonExpr"])
}

func (c *current) onAggPerc16(numStr, field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Perc,
		Param:       numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggPerc16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggPerc16(stack["numStr"], stack["field"])
}

func (c *current) onAggUpperPerc2(numStr, boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.UpperPerc,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
		Param:           numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggUpperPerc2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggUpperPerc2(stack["numStr"], stack["boolComparisonExpr"])
}

func (c *current) onAggUpperPerc16(numStr, field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.UpperPerc,
		Param:       numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggUpperPerc16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggUpperPerc16(stack["numStr"], stack["field"])
}

func (c *current) onAggMedian2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Median,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggMedian2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMedian2(stack["boolComparisonExpr"])
}

func (c *current) onAggMedian12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Median,
	}

	return agg, nil
}

func (p *parser) callonAggMedian12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMedian12(stack["field"])
}

func (c *current) onAggMode2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Mode,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggMode2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMode2(stack["boolComparisonExpr"])
}

func (c *current) onAggMode12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Mode,
	}

	return agg, nil
}

func (p *parser) callonAggMode12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMode12(stack["field"])
}

func (c *current) onAggStdev2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Stdev,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggStdev2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggStdev2(stack["boolComparisonExpr"])
}

func (c *current) onAggStdev12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Stdev,
	}

	return agg, nil
}

func (p *parser) callonAggStdev12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggStdev12(stack["field"])
}

func (c *current) onAggStdevp2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Stdevp,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggStdevp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggStdevp2(stack["boolComparisonExpr"])
}

func (c *current) onAggStdevp12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Stdevp,
	}

	return agg, nil
}

func (p *parser) callonAggStdevp12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggStdevp12(stack["field"])
}

func (c *current) onAggSumsq2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Sumsq,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggSumsq2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSumsq2(stack["boolComparisonExpr"])
}

func (c *current) onAggSumsq12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Sumsq,
	}

	return agg, nil
}

func (p *parser) callonAggSumsq12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSumsq12(stack["field"])
}

func (c *current) onAggVar2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Var,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggVar2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggVar2(stack["boolComparisonExpr"])
}

func (c *current) onAggVar12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Var,
	}

	return agg, nil
}

func (p *parser) callonAggVar12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggVar12(stack["field"])
}

func (c *current) onAggVarp2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Varp,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggVarp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggVarp2(stack["boolComparisonExpr"])
}

func (c *current) onAggVarp12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Varp,
	}

	return agg, nil
}

func (p *parser) callonAggVarp12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggVarp12(stack["field"])
}

func (c *current) onAggFirst2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.First,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggFirst2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggFirst2(stack["boolComparisonExpr"])
}

func (c *current) onAggFirst12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.First,
	}

	return agg, nil
}

func (p *parser) callonAggFirst12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggFirst12(stack["field"])
}

func (c *current) onAggLast2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Last,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggLast2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLast2(stack["boolComparisonExpr"])
}

func (c *current) onAggLast12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Last,
	}

	return agg, nil
}

func (p *parser) callonAggLast12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLast12(stack["field"])
}

func (c *current) onAggList2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.List,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggList2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggList2(stack["valueExpr"])
}

func (c *current) onAggList10(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.List,
	}

	return agg, nil
}

func (p *parser) callonAggList10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggList10(stack["field"])
}

func (c *current) onAggEarliest2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Earliest,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggEarliest2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEarliest2(stack["boolComparisonExpr"])
}

func (c *current) onAggEarliest12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Earliest,
	}

	return agg, nil
}

func (p *parser) callonAggEarliest12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEarliest12(stack["field"])
}

func (c *current) onAggEarliestTime2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.EarliestTime,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggEarliestTime2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEarliestTime2(stack["boolComparisonExpr"])
}

func (c *current) onAggEarliestTime12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.EarliestTime,
	}

	return agg, nil
}

func (p *parser) callonAggEarliestTime12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEarliestTime12(stack["field"])
}

func (c *current) onAggLatest2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Latest,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggLatest2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLatest2(stack["boolComparisonExpr"])
}

func (c *current) onAggLatest12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Latest,
	}

	return agg, nil
}

func (p *parser) callonAggLatest12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLatest12(stack["field"])
}

func (c *current) onAggLatestTime2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.LatestTime,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggLatestTime2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLatestTime2(stack["boolComparisonExpr"])
}

func (c *current) onAggLatestTime12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.LatestTime,
	}

	return agg, nil
}

func (p *parser) callonAggLatestTime12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLatestTime12(stack["field"])
}

func (c *current) onAggRate2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.StatsRate,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggRate2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRate2(stack["boolComparisonExpr"])
}

func (c *current) onAggRate12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.StatsRate,
	}

	return agg, nil
}

func (p *parser) callonAggRate12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRate12(stack["field"])
}

func (c *current) onAggValues2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Values,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggValues2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggValues2(stack["valueExpr"])
}

func (c *current) onAggValues10(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Values,
	}

	return agg, nil
}

func (p *parser) callonAggValues10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggValues10(stack["field"])
}

func (c *current) onFieldWithNumberValue1(keyValuePair any) (any, error) {
	return keyValuePair, nil
}

func (p *parser) callonFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithNumberValue1(stack["keyValuePair"])
}

func (c *current) onNamedFieldWithNumberValue1(key, op, value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     op.(string),
			Field:  key.(string),
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonNamedFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedFieldWithNumberValue1(stack["key"], stack["op"], stack["value"])
}

func (c *current) onUnnamedFieldWithNumberValue1(value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     "=",
			Field:  "*",
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonUnnamedFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnnamedFieldWithNumberValue1(stack["value"])
}

func (c *current) onFieldWithBooleanValue1(key, op, value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     op.(string),
			Field:  key.(string),
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonFieldWithBooleanValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithBooleanValue1(stack["key"], stack["op"], stack["value"])
}

func (c *current) onFieldWithStringValue1(keyValuePair any) (any, error) {
	return keyValuePair, nil
}

func (p *parser) callonFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithStringValue1(stack["keyValuePair"])
}

func (c *current) onNamedFieldWithStringValue1(key, op, value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     op.(string),
			Field:  key.(string),
			Values: value,
		},
	}
	return node, nil
}

func (p *parser) callonNamedFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedFieldWithStringValue1(stack["key"], stack["op"], stack["value"])
}

func (c *current) onUnnamedFieldWithStringValue1(value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     "=",
			Field:  "*",
			Values: value,
		},
	}
	return node, nil
}

func (p *parser) callonUnnamedFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnnamedFieldWithStringValue1(stack["value"])
}

func (c *current) onFieldNameList1(first, rest any) (any, error) {
	// Convert `rest` to a slice. Each element of the slice will be a 2-element
	// slice where the first element is ", " and the second is a FieldName.
	restSlice := rest.([]any)

	numFieldNames := 1 + len(restSlice)
	fields := make([]string, numFieldNames)
	fields[0] = first.(string)

	for i := 1; i < numFieldNames; i++ {
		separatorAndField := restSlice[i-1].([]any)
		fields[i] = separatorAndField[1].(string)
	}

	return fields, nil
}

func (p *parser) callonFieldNameList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldNameList1(stack["first"], stack["rest"])
}

func (c *current) onEarliestAndLatest1(earliestTime, latestTime any) (any, error) {
	var startEpoch int64 = 0
	var endEpoch int64 = 0
	var err error

	earliestTimeModifier := earliestTime.(ast.TimeModifier)
	latestTimeModifier := latestTime.(ast.TimeModifier)

	currTime := time.Now()
	startEpoch, err = CalculateRelativeTime(earliestTimeModifier, currTime)
	if err != nil {
		return nil, err
	}

	// Apply chained modifiers to the start epoch
	startEpoch, err = applyTimeModifiers(startEpoch, earliestTimeModifier.ChainedOffsets, earliestTimeModifier.ChainedSnaps)
	if err != nil {
		return nil, err
	}

	endEpoch, err = CalculateRelativeTime(latestTimeModifier, currTime)
	if err != nil {
		return nil, err
	}
	endEpoch, err = applyTimeModifiers(endEpoch, latestTimeModifier.ChainedOffsets, latestTimeModifier.ChainedSnaps)
	if err != nil {
		return nil, err
	}

	// Create AST node
	node := &ast.Node{
		NodeType: ast.TimeModifierNode,
		TimeModifiers: &ast.TimeModifiers{
			StartEpoch: uint64(startEpoch),
			EndEpoch:   uint64(endEpoch),
		},
	}

	return node, nil
}

func (p *parser) callonEarliestAndLatest1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEarliestAndLatest1(stack["earliestTime"], stack["latestTime"])
}

func (c *current) onEarliestOnly1(earliestTime any) (any, error) {
	var startEpoch int64 = 0
	var err error

	earliestTimeModifier := earliestTime.(ast.TimeModifier)

	startEpoch, err = CalculateRelativeTime(earliestTimeModifier, time.Now())
	if err != nil {
		return nil, err
	}

	startEpoch, err = applyTimeModifiers(startEpoch, earliestTimeModifier.ChainedOffsets, earliestTimeModifier.ChainedSnaps)
	if err != nil {
		return nil, err
	}

	// Create AST node
	node := &ast.Node{
		NodeType: ast.TimeModifierNode,
		TimeModifiers: &ast.TimeModifiers{
			StartEpoch: uint64(startEpoch),
			EndEpoch:   uint64(time.Now().UnixMilli()),
		},
	}

	return node, nil
}

func (p *parser) callonEarliestOnly1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEarliestOnly1(stack["earliestTime"])
}

func (c *current) onRelIntegerAsString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonRelIntegerAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelIntegerAsString1()
}

func (c *current) onWeekSnap1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonWeekSnap1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeekSnap1()
}

func (c *current) onRelTimeUnit1(timeUnit any) (any, error) {
	if utils.IsSubseconds(timeUnit.(utils.TimeUnit)) {
		return nil, fmt.Errorf("Relative Time Format does not support subseconds")
	}
	return strconv.Itoa(int(timeUnit.(utils.TimeUnit))), nil
}

func (p *parser) callonRelTimeUnit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelTimeUnit1(stack["timeUnit"])
}

func (c *current) onSnap1(snap any) (any, error) {
	return snap.(string), nil
}

func (p *parser) callonSnap1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSnap1(stack["snap"])
}

func (c *current) onOffset1(off, tuOff any) (any, error) {
	var offsetNum int64 = 0
	var err error
	offStr := off.(string)
	if offStr == "+" {
		offsetNum = 1
	} else if offStr == "-" {
		offsetNum = -1
	} else {
		offsetNum, err = strconv.ParseInt(offStr, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("Invalid Relative Time Format time unit value: (%v): , err: %v", offStr, err)
		}
	}

	timeUnit, err := strconv.Atoi(tuOff.(string))
	if err != nil {
		return nil, fmt.Errorf("Invalid Time Unit value: (%v), err: %v", tuOff.(string), err)
	}

	relTimeOffset := ast.RelativeTimeOffset{
		Offset:   offsetNum,
		TimeUnit: utils.TimeUnit(timeUnit),
	}

	return relTimeOffset, nil
}

func (p *parser) callonOffset1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOffset1(stack["off"], stack["tuOff"])
}

func (c *current) onChainedRelativeTimestamp1(first, rest any) (any, error) {
	var offsets []ast.RelativeTimeOffset
	var snaps []string

	// Append zero values to ensure corresponding offsets and snaps
	// This ensures that each snap and offset correspond to the same index
	appendDefaultValues := func() {
		if len(offsets) > len(snaps) {
			snaps = append(snaps, "")
		} else if len(snaps) > len(offsets) {
			offsets = append(offsets, ast.RelativeTimeOffset{})
		}
	}

	// Process the first element
	if first != nil {
		switch v := first.(type) {
		case ast.RelativeTimeOffset:
			offsets = append(offsets, v)
			snaps = append(snaps, "") // Append default value for Snap
		case string:
			snaps = append(snaps, v)
			offsets = append(offsets, ast.RelativeTimeOffset{}) // Append default value for Offset
		}
	}

	// Process the rest of the elements
	restSlice := rest.([]any)
	for _, item := range restSlice {
		switch v := item.(type) {
		case ast.RelativeTimeOffset:
			offsets = append(offsets, v)
			appendDefaultValues() // Ensure corresponding Snap
		case string:
			snaps = append(snaps, v)
			appendDefaultValues() // Ensure corresponding Offset
		}
	}

	timeModifier := ast.TimeModifier{
		ChainedOffsets: offsets,
		ChainedSnaps:   snaps,
	}

	return timeModifier, nil
}

func (p *parser) callonChainedRelativeTimestamp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainedRelativeTimestamp1(stack["first"], stack["rest"])
}

func (c *current) onRelativeTimestamp1(defaultTime, chained any) (any, error) {

	if defaultTime != nil {
		if chained != nil {
			return nil, fmt.Errorf("Invalid Relative timestamp, cannot combine default with chained offsets/snaps")
		}
		defTime, err := transferUint8ToString(defaultTime)
		if err != nil {
			return nil, fmt.Errorf("Spl peg: Relative timestamp for default time, err: %v", err)
		}

		timeModifier := ast.TimeModifier{
			AbsoluteTime: defTime,
		}

		return timeModifier, nil
	}

	if chained == nil {
		return nil, fmt.Errorf("Invalid Relative Time Format: Need chained offsets or snaps")
	}

	return chained, nil
}

func (p *parser) callonRelativeTimestamp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeTimestamp1(stack["defaultTime"], stack["chained"])
}

func (c *current) onRelativeTimeCommandTimestampFormat1(offset, snapParam any) (any, error) {

	if offset == nil && snapParam == nil {
		return nil, fmt.Errorf("Invalid Relative Time Format: Need either offset or snap param")
	}

	relTimeOffset := utils.RelativeTimeExpr{}
	snap := ""
	if snapParam != nil {
		snap = snapParam.(string)
	}

	if offset != nil {
		relTimeOffset.Offset = offset.(ast.RelativeTimeOffset).Offset
		relTimeOffset.TimeUnit = offset.(ast.RelativeTimeOffset).TimeUnit
	}

	timeModifier := utils.RelativeTimeExpr{
		Offset:   relTimeOffset.Offset,
		Snap:     snap,
		TimeUnit: relTimeOffset.TimeUnit,
	}

	return timeModifier, nil
}

func (p *parser) callonRelativeTimeCommandTimestampFormat1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeTimeCommandTimestampFormat1(stack["offset"], stack["snapParam"])
}

func (c *current) onFullTimeStamp1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFullTimeStamp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFullTimeStamp1()
}

func (c *current) onAbsoluteTimestamp1(timestamp any) (any, error) {
	relTimeModifier := ast.TimeModifier{
		AbsoluteTime: timestamp.(string),
	}
	return relTimeModifier, nil
}

func (p *parser) callonAbsoluteTimestamp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAbsoluteTimestamp1(stack["timestamp"])
}

func (c *current) onFieldName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFieldName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldName1()
}

func (c *current) onFieldNameStartWith_1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFieldNameStartWith_1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldNameStartWith_1()
}

func (c *current) onString1(str any) (any, error) {
	return str, nil
}

func (p *parser) callonString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onString1(stack["str"])
}

func (c *current) onQuotedString1() (any, error) {
	// The returned string has quotes as the first and last character.
	return string(c.text), nil
}

func (p *parser) callonQuotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString1()
}

func (c *current) onUnquotedString1() (any, error) {
	// Return the string wrapped in quotes.
	str := "\"" + string(c.text) + "\""
	return str, nil
}

func (p *parser) callonUnquotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedString1()
}

func (c *current) onUnquotedStringWithTemplateWildCard1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUnquotedStringWithTemplateWildCard1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedStringWithTemplateWildCard1()
}

func (c *current) onBoolean1() (any, error) {
	boolValue, _ := strconv.ParseBool(string(c.text))
	return boolValue, nil
}

func (p *parser) callonBoolean1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolean1()
}

func (c *current) onRenamePattern1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonRenamePattern1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenamePattern1()
}

func (c *current) onNumber1(number any) (any, error) {
	return json.Number(number.(string)), nil
}

func (p *parser) callonNumber1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1(stack["number"])
}

func (c *current) onNumberAsString1(number any) (any, error) {
	return number, nil
}

func (p *parser) callonNumberAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumberAsString1(stack["number"])
}

func (c *current) onFloatAsString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatAsString1()
}

func (c *current) onIntegerAsString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIntegerAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerAsString1()
}

func (c *current) onPositiveIntegerAsString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonPositiveIntegerAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositiveIntegerAsString1()
}

func (c *current) onPositiveInteger1(intStr any) (any, error) {
	num, err := strconv.ParseUint(intStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Invalid Positive Integer value: (%v): , err: %v", intStr.(string), err)
	}
	return num, nil
}

func (p *parser) callonPositiveInteger1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositiveInteger1(stack["intStr"])
}

func (c *current) onEqualityOperator1(op any) (any, error) {
	opStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: EqualityOperator: %v", err)
	}
	return opStr, nil
}

func (p *parser) callonEqualityOperator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator1(stack["op"])
}

func (c *current) onInequalityOperator1(op any) (any, error) {
	opStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: InequalityOperator: %v", err)
	}
	return opStr, nil
}

func (p *parser) callonInequalityOperator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInequalityOperator1(stack["op"])
}

func (c *current) onEqualityOrInequality2(op any) (any, error) {
	return op, nil
}

func (p *parser) callonEqualityOrInequality2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOrInequality2(stack["op"])
}

func (c *current) onEqualityOrInequality5(op any) (any, error) {
	return op, nil
}

func (p *parser) callonEqualityOrInequality5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOrInequality5(stack["op"])
}

func (c *current) onOpPlus1() (any, error) {
	return "+", nil
}

func (p *parser) callonOpPlus1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpPlus1()
}

func (c *current) onOpMinus1() (any, error) {
	return "-", nil
}

func (p *parser) callonOpMinus1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpMinus1()
}

func (c *current) onOpMul1() (any, error) {
	return "*", nil
}

func (p *parser) callonOpMul1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpMul1()
}

func (c *current) onOpDiv1() (any, error) {
	return "/", nil
}

func (p *parser) callonOpDiv1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpDiv1()
}

func (c *current) onOpMod1() (any, error) {
	return "%", nil
}

func (p *parser) callonOpMod1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpMod1()
}

func (c *current) onSecond1() (any, error) {
	return utils.TMSecond, nil
}

func (p *parser) callonSecond1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSecond1()
}

func (c *current) onMinute1() (any, error) {
	return utils.TMMinute, nil
}

func (p *parser) callonMinute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinute1()
}

func (c *current) onHour1() (any, error) {
	return utils.TMHour, nil
}

func (p *parser) callonHour1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHour1()
}

func (c *current) onDay1() (any, error) {
	return utils.TMDay, nil
}

func (p *parser) callonDay1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDay1()
}

func (c *current) onWeek1() (any, error) {
	return utils.TMWeek, nil
}

func (p *parser) callonWeek1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeek1()
}

func (c *current) onMonth1() (any, error) {
	return utils.TMMonth, nil
}

func (p *parser) callonMonth1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMonth1()
}

func (c *current) onQuarter1() (any, error) {
	return utils.TMQuarter, nil
}

func (p *parser) callonQuarter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuarter1()
}

func (c *current) onYear1() (any, error) {
	return utils.TMYear, nil
}

func (p *parser) callonYear1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYear1()
}

func (c *current) onSubseconds1() (any, error) {
	timeUnit, err := utils.ConvertSubseconds(string(c.text))
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Subseconds: %v", err)
	}
	return timeUnit, nil
}

func (p *parser) callonSubseconds1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubseconds1()
}

func (c *current) onTransactionBlock1(txnOptions any) (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType:      structs.TransactionType,
		TransactionArguments: txnOptions.(*structs.TransactionArguments),
	}
	return queryAgg, nil
}

func (p *parser) callonTransactionBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionBlock1(stack["txnOptions"])
}

func (c *current) onTransactionOptions1(txnOptions any) (any, error) {

	transactionRequest := &structs.TransactionArguments{}

	if txnOptions != nil {
		txnArgs := txnOptions.(*TxnArgs).arguments
		transactionRequest.Fields = txnArgs.Fields
		transactionRequest.StartsWith = txnArgs.StartsWith
		transactionRequest.EndsWith = txnArgs.EndsWith
	}

	return transactionRequest, nil
}

func (p *parser) callonTransactionOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionOptions1(stack["txnOptions"])
}

func (c *current) onTransactionDefinitionOptionsList1(first, rest any) (any, error) {

	restSlice := rest.([]any)
	txnArgs := &TxnArgs{
		argOption: "txn-definition",
		arguments: &structs.TransactionArguments{},
	}

	numArgs := 1 + len(restSlice)

	for i := 0; i < numArgs; i++ {
		var txnArg *TxnArgs
		if i == 0 {
			txnArg = first.(*TxnArgs)
		} else {
			separatorAndArg := restSlice[i-1].([]any)
			txnArg = separatorAndArg[1].(*TxnArgs)
		}
		argOption := txnArg.argOption

		switch argOption {
		case "fields":
			txnArgs.arguments.Fields = txnArg.arguments.Fields
		case "startswith":
			txnArgs.arguments.StartsWith = txnArg.arguments.StartsWith
		case "endswith":
			txnArgs.arguments.EndsWith = txnArg.arguments.EndsWith
		default:
			return nil, fmt.Errorf("Not a Valid Transaction Argument option")
		}
	}

	return txnArgs, nil
}

func (p *parser) callonTransactionDefinitionOptionsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionDefinitionOptionsList1(stack["first"], stack["rest"])
}

func (c *current) onTransactionDefinitionOption1(option any) (any, error) {
	return option, nil
}

func (p *parser) callonTransactionDefinitionOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionDefinitionOption1(stack["option"])
}

func (c *current) onTransactionSpaceSeparatedFieldList1(fields any) (any, error) {
	txnArg := &TxnArgs{
		argOption: "fields",
		arguments: &structs.TransactionArguments{
			Fields: fields.([]string),
		},
	}

	return txnArg, nil
}

func (p *parser) callonTransactionSpaceSeparatedFieldList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionSpaceSeparatedFieldList1(stack["fields"])
}

func (c *current) onStartsWithOption1(strExpr any) (any, error) {
	txnArg := &TxnArgs{
		argOption: "startswith",
		arguments: &structs.TransactionArguments{
			StartsWith: strExpr.(*structs.FilterStringExpr),
		},
	}
	return txnArg, nil
}

func (p *parser) callonStartsWithOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStartsWithOption1(stack["strExpr"])
}

func (c *current) onEndsWithOption1(strExpr any) (any, error) {
	txnArg := &TxnArgs{
		argOption: "endswith",
		arguments: &structs.TransactionArguments{
			EndsWith: strExpr.(*structs.FilterStringExpr),
		},
	}
	return txnArg, nil
}

func (p *parser) callonEndsWithOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEndsWithOption1(stack["strExpr"])
}

func (c *current) onTransactionFilterString1(strExpr any) (any, error) {
	return strExpr, nil
}

func (p *parser) callonTransactionFilterString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionFilterString1(stack["strExpr"])
}

func (c *current) onTransactionQuotedString1(str any) (any, error) {
	return str, nil
}

func (p *parser) callonTransactionQuotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionQuotedString1(stack["str"])
}

func (c *current) onTransactionQuotedStringSearchExpr1(searchClause any) (any, error) {
	filterStrExpr := &structs.FilterStringExpr{
		SearchNode: searchClause.(*ast.Node),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionQuotedStringSearchExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionQuotedStringSearchExpr1(stack["searchClause"])
}

func (c *current) onQuotedStringNoOp1() (any, error) {
	// The returned string has quotes as the first and last character.
	return string(c.text), nil
}

func (p *parser) callonQuotedStringNoOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedStringNoOp1()
}

func (c *current) onTransactionQuotedStringValue1(str any) (any, error) {
	filterStrExpr := &structs.FilterStringExpr{
		StringValue: removeQuotes(str.(string)),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionQuotedStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionQuotedStringValue1(stack["str"])
}

func (c *current) onTransactionSearch1(expr any) (any, error) {

	filterStrExpr := &structs.FilterStringExpr{
		SearchNode: expr.(*ast.Node),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionSearch1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionSearch1(stack["expr"])
}

func (c *current) onTransactionEval1(condition any) (any, error) {
	filterStrExpr := &structs.FilterStringExpr{
		EvalBoolExpr: condition.(*structs.BoolExpr),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionEval1(stack["condition"])
}

func (c *current) onMultiValueBlock1(mvQueryAggNode any) (any, error) {
	return mvQueryAggNode, nil
}

func (p *parser) callonMultiValueBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiValueBlock1(stack["mvQueryAggNode"])
}

func (c *current) onMakeMVBlock1(mvColOptionExpr, field any) (any, error) {
	var mvColExpr *structs.MultiValueColLetRequest

	if mvColOptionExpr != nil {
		mvColExpr = mvColOptionExpr.(*structs.MultiValueColLetRequest)
	} else {
		mvColExpr = &structs.MultiValueColLetRequest{}
	}

	mvColExpr.Command = "makemv"
	mvColExpr.ColName = field.(string)

	if mvColExpr.DelimiterString == "" {
		mvColExpr.DelimiterString = " " // default single space
	}

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: &structs.LetColumnsRequest{
				MultiValueColRequest: mvColExpr,
			},
		},
	}

	return queryAgg, nil
}

func (p *parser) callonMakeMVBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMakeMVBlock1(stack["mvColOptionExpr"], stack["field"])
}

func (c *current) onMVBlockOptionsList1(first, rest any) (any, error) {
	restSlice := rest.([]any)

	numOptions := 1 + len(restSlice)

	mvColExpr := &structs.MultiValueColLetRequest{}

	for i := 0; i < numOptions; i++ {
		var currMvColExpr *MultiValueColOptionArgs
		if i == 0 {
			currMvColExpr = first.(*MultiValueColOptionArgs)
		} else {
			separator := restSlice[i-1].([]any)
			currMvColExpr = separator[1].(*MultiValueColOptionArgs)
		}

		argOption := currMvColExpr.argOption

		switch argOption {
		case "delimiter":
			mvColExpr.DelimiterString = currMvColExpr.mvColExpr.DelimiterString
			mvColExpr.IsRegex = currMvColExpr.mvColExpr.IsRegex
		case "allowempty":
			mvColExpr.AllowEmpty = currMvColExpr.mvColExpr.AllowEmpty
		case "setsv":
			mvColExpr.Setsv = currMvColExpr.mvColExpr.Setsv
		default:
			return nil, fmt.Errorf("Not a Valid MVBlockOption: %v", argOption)
		}
	}

	return mvColExpr, nil
}

func (p *parser) callonMVBlockOptionsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMVBlockOptionsList1(stack["first"], stack["rest"])
}

func (c *current) onMVBlockOption1(option any) (any, error) {
	return option, nil
}

func (p *parser) callonMVBlockOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMVBlockOption1(stack["option"])
}

func (c *current) onDelimOption1(delimExpr any) (any, error) {
	return delimExpr, nil
}

func (p *parser) callonDelimOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimOption1(stack["delimExpr"])
}

func (c *current) onStringDelimiter1(str any) (any, error) {
	mvColOptionArgs := &MultiValueColOptionArgs{
		argOption: "delimiter",
		mvColExpr: &structs.MultiValueColLetRequest{
			DelimiterString: removeQuotes(str),
		},
	}

	return mvColOptionArgs, nil
}

func (p *parser) callonStringDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringDelimiter1(stack["str"])
}

func (c *current) onRegexDelimiter1(str any) (any, error) {
	pattern := removeQuotes(str)
	_, err := regexp.Compile(pattern)
	if err != nil {
		return nil, fmt.Errorf("Error parsing tokenizer regular expression: %v. Error: %v", pattern, err)
	}

	mvColOptionArgs := &MultiValueColOptionArgs{
		argOption: "delimiter",
		mvColExpr: &structs.MultiValueColLetRequest{
			DelimiterString: pattern,
			IsRegex:         true,
		},
	}

	return mvColOptionArgs, nil
}

func (p *parser) callonRegexDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexDelimiter1(stack["str"])
}

func (c *current) onAllowEmptyOption1(boolVal any) (any, error) {

	mvColOptionArgs := &MultiValueColOptionArgs{
		argOption: "allowempty",
		mvColExpr: &structs.MultiValueColLetRequest{
			AllowEmpty: boolVal.(bool),
		},
	}

	return mvColOptionArgs, nil
}

func (p *parser) callonAllowEmptyOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAllowEmptyOption1(stack["boolVal"])
}

func (c *current) onSetSvOption1(boolVal any) (any, error) {
	mvColOptionArgs := &MultiValueColOptionArgs{
		argOption: "setsv",
		mvColExpr: &structs.MultiValueColLetRequest{
			Setsv: boolVal.(bool),
		},
	}

	return mvColOptionArgs, nil
}

func (p *parser) callonSetSvOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSetSvOption1(stack["boolVal"])
}

func (c *current) onSPathBlock1(spathExpr any) (any, error) {
	if spathExpr == nil {
		return createSPathExpr("", "", "")
	}
	return spathExpr, nil
}

func (p *parser) callonSPathBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSPathBlock1(stack["spathExpr"])
}

func (c *current) onSPathArgumentsList1(first, rest any) (any, error) {

	restSlice := rest.([]any)

	inputField, pathField, outputField := "", "", ""

	numArgs := 1 + len(restSlice)

	for i := 0; i < numArgs; i++ {
		var arg string
		if i == 0 {
			arg = first.(string)
		} else {
			separator := restSlice[i-1].([]any)
			arg = separator[1].(string)
		}

		switch {
		case strings.HasPrefix(arg, "input="):
			inputField = strings.TrimPrefix(arg, "input=")
		case strings.HasPrefix(arg, "output="):
			outputField = strings.TrimPrefix(arg, "output=")
		case strings.HasPrefix(arg, "path="):
			pathField = strings.TrimPrefix(arg, "path=")
		default:
			return nil, fmt.Errorf("SPathArguments: Invalid Spath Argument: %v", arg)
		}
	}

	return createSPathExpr(inputField, pathField, outputField)
}

func (p *parser) callonSPathArgumentsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSPathArgumentsList1(stack["first"], stack["rest"])
}

func (c *current) onSPathArgument1(arg any) (any, error) {
	return arg, nil
}

func (p *parser) callonSPathArgument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSPathArgument1(stack["arg"])
}

func (c *current) onInputField1(field any) (any, error) {
	return "input=" + field.(string), nil
}

func (p *parser) callonInputField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInputField1(stack["field"])
}

func (c *current) onOutputField1(field any) (any, error) {
	return "output=" + field.(string), nil
}

func (p *parser) callonOutputField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOutputField1(stack["field"])
}

func (c *current) onPathField1() (any, error) {
	pathField := string(c.text)
	if strings.HasPrefix(pathField, "path") {
		pathField = strings.TrimSpace(strings.TrimPrefix(pathField, "path="))
		pathField = strings.TrimSpace(strings.TrimPrefix(pathField, "path ="))
		if pathField != "" && pathField[0] == '"' {
			pathField = removeQuotes(pathField)
		}
	}
	return "path=" + pathField, nil
}

func (p *parser) callonPathField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPathField1()
}

func (c *current) onFormatBlock1(formatArgExpr any) (any, error) {
	var formatResultExpr *structs.FormatResultsRequest

	if formatArgExpr != nil {
		formatResultExpr = formatArgExpr.(*structs.FormatResultsRequest)
	} else {
		formatResultExpr = getDefaultFormatResultsExpr()
	}

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: &structs.LetColumnsRequest{
				NewColName:    "search",
				FormatResults: formatResultExpr,
			},
		},
	}

	return queryAgg, nil
}

func (p *parser) callonFormatBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatBlock1(stack["formatArgExpr"])
}

func (c *current) onFormatArgumentsList1(first, rest any) (any, error) {
	restSlice := rest.([]any)

	numOptions := 1 + len(restSlice)

	formatResultExpr := getDefaultFormatResultsExpr()

	for i := 0; i < numOptions; i++ {
		var currFormatExpr *FormatResultsRequestArguments

		if i == 0 {
			currFormatExpr = first.(*FormatResultsRequestArguments)
		} else {
			separator := restSlice[i-1].([]any)
			currFormatExpr = separator[1].(*FormatResultsRequestArguments)
		}

		switch currFormatExpr.argOption {
		case "mvsep":
			formatResultExpr.MVSeparator = currFormatExpr.formatResultExpr.MVSeparator
		case "maxresults":
			formatResultExpr.MaxResults = currFormatExpr.formatResultExpr.MaxResults
		case "emptystr":
			formatResultExpr.EmptyString = currFormatExpr.formatResultExpr.EmptyString
		case "rowColOptions":
			formatResultExpr.RowColOptions = currFormatExpr.formatResultExpr.RowColOptions
		default:
			return nil, fmt.Errorf("not a valid Format Result Argument: %v", currFormatExpr.argOption)
		}
	}

	return formatResultExpr, nil
}

func (p *parser) callonFormatArgumentsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArgumentsList1(stack["first"], stack["rest"])
}

func (c *current) onFormatArgument1(argExpr any) (any, error) {
	return argExpr, nil
}

func (p *parser) callonFormatArgument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArgument1(stack["argExpr"])
}

func (c *current) onFormatSeparator1(str any) (any, error) {
	return &FormatResultsRequestArguments{
		argOption: "mvsep",
		formatResultExpr: &structs.FormatResultsRequest{
			MVSeparator: removeQuotes(str),
		},
	}, nil
}

func (p *parser) callonFormatSeparator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatSeparator1(stack["str"])
}

func (c *current) onFormatMaxResults1(numStr any) (any, error) {
	num, err := strconv.ParseUint(numStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid Max results value is set for format: (%v): Error=%v", numStr.(string), err)
	}
	return &FormatResultsRequestArguments{
		argOption: "maxresults",
		formatResultExpr: &structs.FormatResultsRequest{
			MaxResults: num,
		},
	}, nil
}

func (p *parser) callonFormatMaxResults1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatMaxResults1(stack["numStr"])
}

func (c *current) onFormatEmptyStr1(str any) (any, error) {
	return &FormatResultsRequestArguments{
		argOption: "emptystr",
		formatResultExpr: &structs.FormatResultsRequest{
			EmptyString: removeQuotes(str),
		},
	}, nil
}

func (p *parser) callonFormatEmptyStr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatEmptyStr1(stack["str"])
}

func (c *current) onFormatRowColOptions1(rowPrefix, colPrefix, colSeparator, colEnd, rowSeparator, rowEnd any) (any, error) {
	rowColOptions := &structs.RowColOptions{
		RowPrefix:       removeQuotes(rowPrefix),
		ColumnPrefix:    removeQuotes(colPrefix),
		ColumnSeparator: removeQuotes(colSeparator),
		ColumnEnd:       removeQuotes(colEnd),
		RowSeparator:    removeQuotes(rowSeparator),
		RowEnd:          removeQuotes(rowEnd),
	}

	return &FormatResultsRequestArguments{
		argOption: "rowColOptions",
		formatResultExpr: &structs.FormatResultsRequest{
			RowColOptions: rowColOptions,
		},
	}, nil
}

func (p *parser) callonFormatRowColOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatRowColOptions1(stack["rowPrefix"], stack["colPrefix"], stack["colSeparator"], stack["colEnd"], stack["rowSeparator"], stack["rowEnd"])
}

func (c *current) onEventCountBlock1(eventCountExpr any) (any, error) {
	if eventCountExpr == nil {
		return createEventCountExpr([]string{"*"}, true, false, true)
	}
	return eventCountExpr, nil
}

func (p *parser) callonEventCountBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEventCountBlock1(stack["eventCountExpr"])
}

func (c *current) onEventCountArgumentsList1(first, rest any) (any, error) {

	restSlice := rest.([]any)

	indices := []string{}
	list_vix, report_size, summarize := true, false, true

	numArgs := 0
	if first != nil {
		numArgs++
	}
	numArgs += len(restSlice)

	for i := 0; i < numArgs; i++ {
		var arg string
		if i == 0 && first != nil {
			arg = first.(string)
		} else {
			separator := restSlice[i-1].([]any)
			arg = separator[1].(string)
		}

		switch {
		case strings.HasPrefix(arg, "index="):
			indices = append(indices, strings.TrimPrefix(arg, "index="))
		case strings.HasPrefix(arg, "list_vix="):
			var err error
			list_vix, err = strconv.ParseBool(strings.TrimPrefix(arg, "list_vix="))
			if err != nil {
				return nil, fmt.Errorf("EventCountArguments: Invalid value for list_vix: %v", err)
			}
		case strings.HasPrefix(arg, "report_size="):
			var err error
			report_size, err = strconv.ParseBool(strings.TrimPrefix(arg, "report_size="))
			if err != nil {
				return nil, fmt.Errorf("EventCountArguments: Invalid value for report_size: %v", err)
			}
		case strings.HasPrefix(arg, "summarize="):
			var err error
			summarize, err = strconv.ParseBool(strings.TrimPrefix(arg, "summarize="))
			if err != nil {
				return nil, fmt.Errorf("EventCountArguments: Invalid value for summarize: %v", err)
			}
		default:
			return nil, fmt.Errorf("EventCountArguments: Invalid EventCount Argument: %v", arg)
		}
	}

	// If no indices were provided, use the default value "*"
	if len(indices) == 0 {
		indices = append(indices, "*")
	}

	return createEventCountExpr(indices, list_vix, report_size, summarize)
}

func (p *parser) callonEventCountArgumentsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEventCountArgumentsList1(stack["first"], stack["rest"])
}

func (c *current) onEventCountArgument1(arg any) (any, error) {
	return arg, nil
}

func (p *parser) callonEventCountArgument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEventCountArgument1(stack["arg"])
}

func (c *current) onIndexField1(index any) (any, error) {
	return "index=" + index.(string), nil
}

func (p *parser) callonIndexField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexField1(stack["index"])
}

func (c *current) onSummarizeField1(field any) (any, error) {
	return "summarize=" + strconv.FormatBool(field.(bool)), nil
}

func (p *parser) callonSummarizeField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSummarizeField1(stack["field"])
}

func (c *current) onReportSizeField1(field any) (any, error) {
	return "report_size=" + strconv.FormatBool(field.(bool)), nil
}

func (p *parser) callonReportSizeField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReportSizeField1(stack["field"])
}

func (c *current) onListVixField1(field any) (any, error) {
	return "list_vix=" + strconv.FormatBool(field.(bool)), nil
}

func (p *parser) callonListVixField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListVixField1(stack["field"])
}

func (c *current) onIndexName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexName1()
}

func (c *current) onFillNullBlock1(valueOption, fields any) (any, error) {
	valueStr := "0"
	fieldList := make([]string, 0)

	if valueOption != nil {
		valueStr = valueOption.(string)
	}

	if fields != nil {
		fieldList = fields.([]string)
	}

	fillNullExpr := &structs.FillNullExpr{
		Value:     valueStr,
		FieldList: fieldList,
	}
	fillNullExpr.Records = make(map[string]map[string]interface{}, 0)
	fillNullExpr.FinalCols = make(map[string]bool, 0)

	return &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: &structs.LetColumnsRequest{
				FillNullRequest: fillNullExpr,
			},
		},
	}, nil
}

func (p *parser) callonFillNullBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFillNullBlock1(stack["valueOption"], stack["fields"])
}

func (c *current) onFillNullValueOption1(str any) (any, error) {
	return removeQuotes(str), nil
}

func (p *parser) callonFillNullValueOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFillNullValueOption1(stack["str"])
}

func (c *current) onFillNullFieldList1(fieldList any) (any, error) {
	return fieldList, nil
}

func (p *parser) callonFillNullFieldList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFillNullFieldList1(stack["fieldList"])
}

func (c *current) onMvexpandBlock1(field, limit any) (any, error) {
	limitVal := int64(0) // default value indicating no limit
	var err error
	if limit != nil {
		limitVal, err = strconv.ParseInt(limit.(string), 10, 64)
		if err != nil {
			return nil, fmt.Errorf("Error parsing limit value: %v", err)
		}
	}

	mvexpandExpr := &structs.MultiValueColLetRequest{
		Command: "mvexpand",
		ColName: field.(string),
	}

	if limitVal != 0 {
		mvexpandExpr.Limit = limitVal
	}

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: &structs.LetColumnsRequest{
				MultiValueColRequest: mvexpandExpr,
			},
		},
	}
	return queryAgg, nil
}

func (p *parser) callonMvexpandBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMvexpandBlock1(stack["field"], stack["limit"])
}

func (c *current) onMvexpandField1(fieldName any) (any, error) {
	return fieldName, nil
}

func (p *parser) callonMvexpandField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMvexpandField1(stack["fieldName"])
}

func (c *current) onMvexpandLimit1(intValue any) (any, error) {
	return intValue, nil
}

func (p *parser) callonMvexpandLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMvexpandLimit1(stack["intValue"])
}

func (c *current) onWhereClause1(condition any) (any, error) {
	return condition.(*structs.BoolExpr), nil
}

func (p *parser) callonWhereClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["condition"])
}

func (c *current) onInputLookupOptionAppend1(boolVal any) (any, error) {
	return &InputLookupOptionArgs{
		argOption: "append",
		inputLookupOption: &structs.InputLookup{
			Append: boolVal.(bool),
		},
	}, nil
}

func (p *parser) callonInputLookupOptionAppend1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInputLookupOptionAppend1(stack["boolVal"])
}

func (c *current) onInputLookupOptionStrict1(boolVal any) (any, error) {
	return &InputLookupOptionArgs{
		argOption: "strict",
		inputLookupOption: &structs.InputLookup{
			Strict: boolVal.(bool),
		},
	}, nil
}

func (p *parser) callonInputLookupOptionStrict1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInputLookupOptionStrict1(stack["boolVal"])
}

func (c *current) onInputLookupOptionStart1(posInt any) (any, error) {
	return &InputLookupOptionArgs{
		argOption: "start",
		inputLookupOption: &structs.InputLookup{
			Start: posInt.(uint64),
		},
	}, nil
}

func (p *parser) callonInputLookupOptionStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInputLookupOptionStart1(stack["posInt"])
}

func (c *current) onInputLookupOptionMax1(posInt any) (any, error) {
	return &InputLookupOptionArgs{
		argOption: "max",
		inputLookupOption: &structs.InputLookup{
			Max: posInt.(uint64),
		},
	}, nil
}

func (p *parser) callonInputLookupOptionMax1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInputLookupOptionMax1(stack["posInt"])
}

func (c *current) onInputLookupOption1(inputLookupOption any) (any, error) {
	return inputLookupOption, nil
}

func (p *parser) callonInputLookupOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInputLookupOption1(stack["inputLookupOption"])
}

func (c *current) onInputLookupOptionList1(first, rest any) (any, error) {
	restSlice := rest.([]any)
	optionWasSpecified := make(map[string]struct{})
	numOptions := 1 + len(restSlice)

	inputLookupOption := &structs.InputLookup{}

	for i := 0; i < numOptions; i++ {
		var inputLookupOptionArg *InputLookupOptionArgs
		if i == 0 {
			inputLookupOptionArg = first.(*InputLookupOptionArgs)
		} else {
			separator := restSlice[i-1].([]any)
			inputLookupOptionArg = separator[1].(*InputLookupOptionArgs)
		}

		argOption := inputLookupOptionArg.argOption
		_, exist := optionWasSpecified[argOption]
		if exist {
			return nil, fmt.Errorf("Invalid Syntax, option: %v is already specified", argOption)
		}
		optionWasSpecified[argOption] = struct{}{}

		switch argOption {
		case "append":
			inputLookupOption.Append = inputLookupOptionArg.inputLookupOption.Append
		case "strict":
			inputLookupOption.Strict = inputLookupOptionArg.inputLookupOption.Strict
		case "start":
			inputLookupOption.Start = inputLookupOptionArg.inputLookupOption.Start
		case "max":
			inputLookupOption.Max = inputLookupOptionArg.inputLookupOption.Max
		default:
			return nil, fmt.Errorf("Not a Valid InputLookup Option: %v", argOption)
		}
	}

	return inputLookupOption, nil
}

func (p *parser) callonInputLookupOptionList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInputLookupOptionList1(stack["first"], stack["rest"])
}

func (c *current) onInputLookupBlock1(inputLookupOption, filename, whereClause any) (any, error) {
	inputLookup := &structs.InputLookup{}
	if inputLookupOption != nil {
		inputLookupOption := inputLookupOption.([]any)
		inputLookup = inputLookupOption[0].(*structs.InputLookup)
	}
	if whereClause != nil {
		inputLookup.WhereExpr = whereClause.(*structs.BoolExpr)
	}
	inputLookup.Filename = removeQuotes(filename.(string))
	if inputLookup.Max == 0 {
		inputLookup.Max = 1000000000
	}

	return &structs.QueryAggregators{
		PipeCommandType: structs.GenerateEventType,
		GenerateEvent: &structs.GenerateEvent{
			InputLookup: inputLookup,
		},
	}, nil
}

func (p *parser) callonInputLookupBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInputLookupBlock1(stack["inputLookupOption"], stack["filename"], stack["whereClause"])
}

func (c *current) onInputLookupAggBlock1(inputLookupBlock any) (any, error) {
	inputLookup := inputLookupBlock.(*structs.QueryAggregators)
	if !inputLookup.GenerateEvent.InputLookup.Append {
		return nil, fmt.Errorf("An Inputlookup command which is not the first command must have append as true")
	}
	inputLookup.GenerateEvent.InputLookup.HasPrevResults = true

	return inputLookup, nil
}

func (p *parser) callonInputLookupAggBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInputLookupAggBlock1(stack["inputLookupBlock"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize {
		val, ok = p.parseRuleMemoize(rule)
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
