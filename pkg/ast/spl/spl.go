// Code generated by pigeon; DO NOT EDIT.

// Copyright (c) 2021-2024 SigScalr, Inc.
//
// This file is part of SigLens Observability Solution
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

package spl

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/siglens/siglens/pkg/ast"
	"github.com/siglens/siglens/pkg/segment/aggregations"
	"github.com/siglens/siglens/pkg/segment/query"
	"github.com/siglens/siglens/pkg/segment/structs"
	"github.com/siglens/siglens/pkg/segment/utils"
	log "github.com/sirupsen/logrus"
)

func getParseError(err error) error {
	switch ev := err.(type) {
	case errList:
		if pe, ok := ev[0].(*parserError); ok {
			return &ast.ParseError{
				Inner:    pe.Inner,
				Line:     pe.pos.line,
				Column:   pe.pos.col,
				Offset:   pe.pos.offset,
				Prefix:   pe.prefix,
				Expected: pe.expected,
			}
		}
	}
	return err
}

// Remove the first and last character of the string
func removeQuotes(s any) string {
	str := s.(string)
	if len(str) < 3 {
		return ""
	}

	return str[1 : len(str)-1]
}

// Check if it rename fields with similar names using a wildcard
func isRegexRename(originalPattern, newPattern string) (bool, error) {
	oldWildcards := strings.Count(originalPattern, "*")
	newWildcards := strings.Count(newPattern, "*")

	if oldWildcards == 0 && newWildcards == 0 {
		return false, nil
	} else if oldWildcards > 0 && oldWildcards == newWildcards {
		return true, nil
	} else {
		return false, errors.New("Patterns do not match")
	}
}

func deMorgansLaw(node *ast.Node) {
	switch node.NodeType {
	case ast.NodeTerminal:
		switch node.Comparison.Op {
		case "=":
			node.Comparison.Op = "!="
		case "!=":
			node.Comparison.Op = "="
		case ">":
			node.Comparison.Op = "<="
		case "<":
			node.Comparison.Op = ">="
		case ">=":
			node.Comparison.Op = "<"
		case "<=":
			node.Comparison.Op = ">"
		default:
			log.Errorf("deMorgansLaw: unexpected node comparison op: %v", node.Comparison.Op)
		}
	case ast.NodeAnd:
		node.NodeType = ast.NodeOr
		deMorgansLaw(node.Left)
		deMorgansLaw(node.Right)
	case ast.NodeOr:
		node.NodeType = ast.NodeAnd
		deMorgansLaw(node.Left)
		deMorgansLaw(node.Right)
	default:
		log.Errorf("deMorgansLaw: unexpected NodeType: %v", node.NodeType)
	}
}

// Generate NumericExpr struct for eval functions
func createNumericExpr(op string, leftNumericExpr *structs.NumericExpr, rightNumericExpr *structs.NumericExpr, numericExprMode structs.NumericExprMode) (*structs.NumericExpr, error) {
	if leftNumericExpr == nil {
		return nil, fmt.Errorf("expr cannot be nil")
	}

	return &structs.NumericExpr{
		IsTerminal:      false,
		Op:              op,
		Left:            leftNumericExpr,
		Right:           rightNumericExpr,
		NumericExprMode: numericExprMode,
	}, nil
}

func transferUint8ToString(opName interface{}) (string, error) {
	strData, ok := opName.([]byte)
	if !ok {
		return "", fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)
	return opNameStr, nil
}

func transferPCREToRE2(pattern string) string {
	pattern = strings.Replace(pattern, "(?<", "(?P<", -1)
	return pattern
}

func getRexColNames(pattern string) ([]string, error) {
	re, err := regexp.Compile(`\?<(?P<GroupName>[a-zA-Z0-9_]+)>`)
	if err != nil {
		return nil, fmt.Errorf("getRexColNames: There are some errors in the pattern: %v", err)
	}
	matches := re.FindAllStringSubmatch(pattern, -1)

	var rexColNames []string
	for _, match := range matches {
		rexColNames = append(rexColNames, match[1])
	}

	return rexColNames, nil
}

func initializeStatsOptions() *structs.StatsOptions {
	return &structs.StatsOptions{
		Delim:          " ",
		Partitions:     1,
		DedupSplitvals: false,
		Allnum:         false,
	}
}

func createSPathExpr(inputField, pathField, outputField string) (*structs.QueryAggregators, error) {

	if inputField == "" {
		inputField = "_raw"
	}

	spathExpr := &structs.SPathExpr{
		InputColName:  inputField,
		Path:          pathField,
		OutputColName: outputField,
	}
	return &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: &structs.LetColumnsRequest{
				ValueColRequest: &structs.ValueExpr{
					ValueExprMode: structs.VEMStringExpr,
					StringExpr: &structs.StringExpr{
						StringExprMode: structs.SEMTextExpr,
						TextExpr: &structs.TextExpr{
							IsTerminal: true,
							Op:         "spath",
							SPathExpr:  spathExpr,
						},
					},
				},
				NewColName: outputField,
			},
		},
	}, nil
}

func getDefaultFormatResultsExpr() *structs.FormatResultsRequest {
	return &structs.FormatResultsRequest{
		MVSeparator: "OR",
		MaxResults:  0,
		EmptyString: "NOT()",
		RowColOptions: &structs.RowColOptions{
			RowPrefix:       "(",
			ColumnPrefix:    "(",
			ColumnSeparator: "AND",
			ColumnEnd:       ")",
			RowSeparator:    "OR",
			RowEnd:          ")",
		},
	}
}

type aggregator struct {
	measureAgg         *structs.MeasureAggregator
	renameOutputField  bool
	outputFieldNewName string
}

type singleAggTemp struct {
	aggregators   []*aggregator
	SplitByClause *structs.SplitByClause
}

type TxnArgs struct {
	argOption string
	arguments *structs.TransactionArguments
}

type TimechartArgs struct {
	singleAggExpr *singleAggTemp
	// TODO: Add eval clause expr.
	tcOptions *structs.TcOptions
}

type MultiValueColOptionArgs struct {
	argOption string
	mvColExpr *structs.MultiValueColLetRequest
}

type SPathFieldExpr struct {
	PathValue       string
	IsPathFieldName bool
}

type FormatResultsRequestArguments struct {
	argOption        string
	formatResultExpr *structs.FormatResultsRequest
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Start",
			pos:  position{line: 247, col: 1, offset: 6973},
			expr: &actionExpr{
				pos: position{line: 247, col: 10, offset: 6982},
				run: (*parser).callonStart1,
				expr: &seqExpr{
					pos: position{line: 247, col: 10, offset: 6982},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 247, col: 10, offset: 6982},
							expr: &ruleRefExpr{
								pos:  position{line: 247, col: 10, offset: 6982},
								name: "SPACE",
							},
						},
						&labeledExpr{
							pos:   position{line: 247, col: 17, offset: 6989},
							label: "initialSearch",
							expr: &ruleRefExpr{
								pos:  position{line: 247, col: 32, offset: 7004},
								name: "InitialSearchBlock",
							},
						},
						&labeledExpr{
							pos:   position{line: 247, col: 52, offset: 7024},
							label: "filterBlocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 247, col: 65, offset: 7037},
								expr: &ruleRefExpr{
									pos:  position{line: 247, col: 66, offset: 7038},
									name: "FilterBlock",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 247, col: 80, offset: 7052},
							label: "queryAggBlocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 247, col: 95, offset: 7067},
								expr: &ruleRefExpr{
									pos:  position{line: 247, col: 96, offset: 7068},
									name: "QueryAggergatorBlock",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 247, col: 119, offset: 7091},
							expr: &ruleRefExpr{
								pos:  position{line: 247, col: 119, offset: 7091},
								name: "SPACE",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 247, col: 126, offset: 7098},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "InitialSearchBlock",
			pos:  position{line: 318, col: 1, offset: 9299},
			expr: &actionExpr{
				pos: position{line: 318, col: 23, offset: 9321},
				run: (*parser).callonInitialSearchBlock1,
				expr: &seqExpr{
					pos: position{line: 318, col: 23, offset: 9321},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 318, col: 23, offset: 9321},
							expr: &ruleRefExpr{
								pos:  position{line: 318, col: 23, offset: 9321},
								name: "CMD_SEARCH",
							},
						},
						&labeledExpr{
							pos:   position{line: 318, col: 35, offset: 9333},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 318, col: 42, offset: 9340},
								name: "ClauseLevel4",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBlock",
			pos:  position{line: 322, col: 1, offset: 9381},
			expr: &actionExpr{
				pos: position{line: 322, col: 16, offset: 9396},
				run: (*parser).callonSearchBlock1,
				expr: &seqExpr{
					pos: position{line: 322, col: 16, offset: 9396},
					exprs: []any{
						&notExpr{
							pos: position{line: 322, col: 16, offset: 9396},
							expr: &ruleRefExpr{
								pos:  position{line: 322, col: 18, offset: 9398},
								name: "ALLCMD",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 322, col: 26, offset: 9406},
							expr: &ruleRefExpr{
								pos:  position{line: 322, col: 26, offset: 9406},
								name: "CMD_SEARCH",
							},
						},
						&labeledExpr{
							pos:   position{line: 322, col: 38, offset: 9418},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 322, col: 45, offset: 9425},
								name: "ClauseLevel4",
							},
						},
					},
				},
			},
		},
		{
			name: "FilterBlock",
			pos:  position{line: 326, col: 1, offset: 9466},
			expr: &actionExpr{
				pos: position{line: 326, col: 16, offset: 9481},
				run: (*parser).callonFilterBlock1,
				expr: &seqExpr{
					pos: position{line: 326, col: 16, offset: 9481},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 326, col: 16, offset: 9481},
							name: "PIPE",
						},
						&labeledExpr{
							pos:   position{line: 326, col: 21, offset: 9486},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 326, col: 28, offset: 9493},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 326, col: 28, offset: 9493},
										name: "SearchBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 326, col: 42, offset: 9507},
										name: "RegexBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QueryAggergatorBlock",
			pos:  position{line: 331, col: 1, offset: 9583},
			expr: &actionExpr{
				pos: position{line: 331, col: 25, offset: 9607},
				run: (*parser).callonQueryAggergatorBlock1,
				expr: &labeledExpr{
					pos:   position{line: 331, col: 25, offset: 9607},
					label: "block",
					expr: &choiceExpr{
						pos: position{line: 331, col: 32, offset: 9614},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 331, col: 32, offset: 9614},
								name: "FieldSelectBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 331, col: 51, offset: 9633},
								name: "AggregatorBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 331, col: 69, offset: 9651},
								name: "EvalBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 331, col: 81, offset: 9663},
								name: "WhereBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 331, col: 94, offset: 9676},
								name: "HeadBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 331, col: 106, offset: 9688},
								name: "RexBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 331, col: 117, offset: 9699},
								name: "StatisticBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 331, col: 134, offset: 9716},
								name: "RenameBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 331, col: 148, offset: 9730},
								name: "TimechartBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 331, col: 165, offset: 9747},
								name: "TransactionBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 331, col: 184, offset: 9766},
								name: "DedupBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 331, col: 197, offset: 9779},
								name: "SortBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 331, col: 209, offset: 9791},
								name: "MultiValueBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 331, col: 227, offset: 9809},
								name: "SPathBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 331, col: 240, offset: 9822},
								name: "FormatBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldSelectBlock",
			pos:  position{line: 336, col: 1, offset: 9915},
			expr: &actionExpr{
				pos: position{line: 336, col: 21, offset: 9935},
				run: (*parser).callonFieldSelectBlock1,
				expr: &seqExpr{
					pos: position{line: 336, col: 21, offset: 9935},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 336, col: 21, offset: 9935},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 336, col: 26, offset: 9940},
							name: "CMD_FIELDS",
						},
						&labeledExpr{
							pos:   position{line: 336, col: 37, offset: 9951},
							label: "op",
							expr: &zeroOrOneExpr{
								pos: position{line: 336, col: 40, offset: 9954},
								expr: &choiceExpr{
									pos: position{line: 336, col: 41, offset: 9955},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 336, col: 41, offset: 9955},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
										&litMatcher{
											pos:        position{line: 336, col: 47, offset: 9961},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 336, col: 53, offset: 9967},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 336, col: 68, offset: 9982},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 336, col: 75, offset: 9989},
								name: "FieldNameList",
							},
						},
					},
				},
			},
		},
		{
			name: "AggregatorBlock",
			pos:  position{line: 354, col: 1, offset: 10493},
			expr: &actionExpr{
				pos: position{line: 354, col: 20, offset: 10512},
				run: (*parser).callonAggregatorBlock1,
				expr: &seqExpr{
					pos: position{line: 354, col: 20, offset: 10512},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 354, col: 20, offset: 10512},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 354, col: 25, offset: 10517},
							name: "CMD_STATS",
						},
						&labeledExpr{
							pos:   position{line: 354, col: 35, offset: 10527},
							label: "aggs",
							expr: &ruleRefExpr{
								pos:  position{line: 354, col: 40, offset: 10532},
								name: "AggregationList",
							},
						},
						&labeledExpr{
							pos:   position{line: 354, col: 56, offset: 10548},
							label: "byFields",
							expr: &zeroOrOneExpr{
								pos: position{line: 354, col: 65, offset: 10557},
								expr: &ruleRefExpr{
									pos:  position{line: 354, col: 66, offset: 10558},
									name: "GroupbyBlock",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 354, col: 81, offset: 10573},
							label: "options",
							expr: &zeroOrOneExpr{
								pos: position{line: 354, col: 89, offset: 10581},
								expr: &ruleRefExpr{
									pos:  position{line: 354, col: 90, offset: 10582},
									name: "StatsOptions",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatsOptions",
			pos:  position{line: 407, col: 1, offset: 12316},
			expr: &actionExpr{
				pos: position{line: 407, col: 17, offset: 12332},
				run: (*parser).callonStatsOptions1,
				expr: &labeledExpr{
					pos:   position{line: 407, col: 17, offset: 12332},
					label: "option",
					expr: &zeroOrMoreExpr{
						pos: position{line: 407, col: 24, offset: 12339},
						expr: &ruleRefExpr{
							pos:  position{line: 407, col: 25, offset: 12340},
							name: "StatsOption",
						},
					},
				},
			},
		},
		{
			name: "StatsOption",
			pos:  position{line: 445, col: 1, offset: 13781},
			expr: &actionExpr{
				pos: position{line: 445, col: 16, offset: 13796},
				run: (*parser).callonStatsOption1,
				expr: &seqExpr{
					pos: position{line: 445, col: 16, offset: 13796},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 445, col: 16, offset: 13796},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 445, col: 22, offset: 13802},
							label: "optionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 445, col: 32, offset: 13812},
								name: "StatsOptionCMD",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 445, col: 47, offset: 13827},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 445, col: 53, offset: 13833},
							label: "str",
							expr: &choiceExpr{
								pos: position{line: 445, col: 58, offset: 13838},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 445, col: 58, offset: 13838},
										name: "IntegerAsString",
									},
									&ruleRefExpr{
										pos:  position{line: 445, col: 76, offset: 13856},
										name: "EvalFieldToRead",
									},
									&ruleRefExpr{
										pos:  position{line: 445, col: 94, offset: 13874},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatsOptionCMD",
			pos:  position{line: 450, col: 1, offset: 13979},
			expr: &actionExpr{
				pos: position{line: 450, col: 19, offset: 13997},
				run: (*parser).callonStatsOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 450, col: 19, offset: 13997},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 450, col: 27, offset: 14005},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 450, col: 27, offset: 14005},
								val:        "allnum",
								ignoreCase: false,
								want:       "\"allnum\"",
							},
							&litMatcher{
								pos:        position{line: 450, col: 38, offset: 14016},
								val:        "dedup_splitvals",
								ignoreCase: false,
								want:       "\"dedup_splitvals\"",
							},
							&litMatcher{
								pos:        position{line: 450, col: 58, offset: 14036},
								val:        "delim",
								ignoreCase: false,
								want:       "\"delim\"",
							},
							&litMatcher{
								pos:        position{line: 450, col: 68, offset: 14046},
								val:        "partitions",
								ignoreCase: false,
								want:       "\"partitions\"",
							},
						},
					},
				},
			},
		},
		{
			name: "GroupbyBlock",
			pos:  position{line: 458, col: 1, offset: 14236},
			expr: &actionExpr{
				pos: position{line: 458, col: 17, offset: 14252},
				run: (*parser).callonGroupbyBlock1,
				expr: &seqExpr{
					pos: position{line: 458, col: 17, offset: 14252},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 458, col: 17, offset: 14252},
							name: "BY",
						},
						&labeledExpr{
							pos:   position{line: 458, col: 20, offset: 14255},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 458, col: 27, offset: 14262},
								name: "FieldNameList",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexBlock",
			pos:  position{line: 469, col: 1, offset: 14611},
			expr: &actionExpr{
				pos: position{line: 469, col: 15, offset: 14625},
				run: (*parser).callonRegexBlock1,
				expr: &seqExpr{
					pos: position{line: 469, col: 15, offset: 14625},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 469, col: 15, offset: 14625},
							name: "CMD_REGEX",
						},
						&labeledExpr{
							pos:   position{line: 469, col: 25, offset: 14635},
							label: "keyAndOp",
							expr: &zeroOrOneExpr{
								pos: position{line: 469, col: 34, offset: 14644},
								expr: &seqExpr{
									pos: position{line: 469, col: 35, offset: 14645},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 469, col: 35, offset: 14645},
											name: "FieldName",
										},
										&ruleRefExpr{
											pos:  position{line: 469, col: 45, offset: 14655},
											name: "EqualityOperator",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 469, col: 64, offset: 14674},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 469, col: 68, offset: 14678},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel4",
			pos:  position{line: 497, col: 1, offset: 15257},
			expr: &actionExpr{
				pos: position{line: 497, col: 17, offset: 15273},
				run: (*parser).callonClauseLevel41,
				expr: &seqExpr{
					pos: position{line: 497, col: 17, offset: 15273},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 497, col: 17, offset: 15273},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 497, col: 23, offset: 15279},
								name: "ClauseLevel3",
							},
						},
						&labeledExpr{
							pos:   position{line: 497, col: 36, offset: 15292},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 497, col: 41, offset: 15297},
								expr: &seqExpr{
									pos: position{line: 497, col: 42, offset: 15298},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 497, col: 43, offset: 15299},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 497, col: 43, offset: 15299},
													name: "AND",
												},
												&ruleRefExpr{
													pos:  position{line: 497, col: 49, offset: 15305},
													name: "SPACE",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 497, col: 56, offset: 15312},
											name: "ClauseLevel3",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel3",
			pos:  position{line: 515, col: 1, offset: 15689},
			expr: &actionExpr{
				pos: position{line: 515, col: 17, offset: 15705},
				run: (*parser).callonClauseLevel31,
				expr: &seqExpr{
					pos: position{line: 515, col: 17, offset: 15705},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 515, col: 17, offset: 15705},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 515, col: 23, offset: 15711},
								name: "ClauseLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 515, col: 36, offset: 15724},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 515, col: 41, offset: 15729},
								expr: &seqExpr{
									pos: position{line: 515, col: 42, offset: 15730},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 515, col: 42, offset: 15730},
											name: "OR",
										},
										&ruleRefExpr{
											pos:  position{line: 515, col: 45, offset: 15733},
											name: "ClauseLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel2",
			pos:  position{line: 533, col: 1, offset: 16098},
			expr: &choiceExpr{
				pos: position{line: 533, col: 17, offset: 16114},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 533, col: 17, offset: 16114},
						run: (*parser).callonClauseLevel22,
						expr: &seqExpr{
							pos: position{line: 533, col: 17, offset: 16114},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 533, col: 17, offset: 16114},
									label: "notList",
									expr: &oneOrMoreExpr{
										pos: position{line: 533, col: 25, offset: 16122},
										expr: &ruleRefExpr{
											pos:  position{line: 533, col: 25, offset: 16122},
											name: "NOT",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 533, col: 30, offset: 16127},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 533, col: 36, offset: 16133},
										name: "ClauseLevel1",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 544, col: 5, offset: 16429},
						run: (*parser).callonClauseLevel29,
						expr: &labeledExpr{
							pos:   position{line: 544, col: 5, offset: 16429},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 544, col: 12, offset: 16436},
								name: "ClauseLevel1",
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel1",
			pos:  position{line: 548, col: 1, offset: 16477},
			expr: &choiceExpr{
				pos: position{line: 548, col: 17, offset: 16493},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 548, col: 17, offset: 16493},
						run: (*parser).callonClauseLevel12,
						expr: &seqExpr{
							pos: position{line: 548, col: 17, offset: 16493},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 548, col: 17, offset: 16493},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 548, col: 25, offset: 16501},
									label: "clause",
									expr: &ruleRefExpr{
										pos:  position{line: 548, col: 32, offset: 16508},
										name: "ClauseLevel4",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 548, col: 45, offset: 16521},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 550, col: 5, offset: 16558},
						run: (*parser).callonClauseLevel18,
						expr: &labeledExpr{
							pos:   position{line: 550, col: 5, offset: 16558},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 550, col: 10, offset: 16563},
								name: "SearchTerm",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchTerm",
			pos:  position{line: 556, col: 1, offset: 16721},
			expr: &actionExpr{
				pos: position{line: 556, col: 15, offset: 16735},
				run: (*parser).callonSearchTerm1,
				expr: &labeledExpr{
					pos:   position{line: 556, col: 15, offset: 16735},
					label: "term",
					expr: &choiceExpr{
						pos: position{line: 556, col: 21, offset: 16741},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 556, col: 21, offset: 16741},
								name: "FieldWithNumberValue",
							},
							&ruleRefExpr{
								pos:  position{line: 556, col: 44, offset: 16764},
								name: "FieldWithBooleanValue",
							},
							&ruleRefExpr{
								pos:  position{line: 556, col: 68, offset: 16788},
								name: "FieldWithStringValue",
							},
						},
					},
				},
			},
		},
		{
			name: "TimechartBlock",
			pos:  position{line: 561, col: 1, offset: 16929},
			expr: &actionExpr{
				pos: position{line: 561, col: 19, offset: 16947},
				run: (*parser).callonTimechartBlock1,
				expr: &seqExpr{
					pos: position{line: 561, col: 19, offset: 16947},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 561, col: 19, offset: 16947},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 561, col: 24, offset: 16952},
							name: "CMD_TIMECHART",
						},
						&labeledExpr{
							pos:   position{line: 561, col: 38, offset: 16966},
							label: "tcArgs",
							expr: &ruleRefExpr{
								pos:  position{line: 561, col: 45, offset: 16973},
								name: "TimechartArgumentsList",
							},
						},
						&labeledExpr{
							pos:   position{line: 561, col: 68, offset: 16996},
							label: "limitExpr",
							expr: &zeroOrOneExpr{
								pos: position{line: 561, col: 78, offset: 17006},
								expr: &ruleRefExpr{
									pos:  position{line: 561, col: 79, offset: 17007},
									name: "LimitExpr",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimechartArgumentsList",
			pos:  position{line: 649, col: 1, offset: 19750},
			expr: &actionExpr{
				pos: position{line: 649, col: 27, offset: 19776},
				run: (*parser).callonTimechartArgumentsList1,
				expr: &seqExpr{
					pos: position{line: 649, col: 27, offset: 19776},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 649, col: 27, offset: 19776},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 649, col: 33, offset: 19782},
								name: "TimechartArgument",
							},
						},
						&labeledExpr{
							pos:   position{line: 649, col: 51, offset: 19800},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 649, col: 56, offset: 19805},
								expr: &seqExpr{
									pos: position{line: 649, col: 57, offset: 19806},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 649, col: 57, offset: 19806},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 649, col: 63, offset: 19812},
											name: "TimechartArgument",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimechartArgument",
			pos:  position{line: 678, col: 1, offset: 20546},
			expr: &actionExpr{
				pos: position{line: 678, col: 22, offset: 20567},
				run: (*parser).callonTimechartArgument1,
				expr: &labeledExpr{
					pos:   position{line: 678, col: 22, offset: 20567},
					label: "tcArg",
					expr: &choiceExpr{
						pos: position{line: 678, col: 29, offset: 20574},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 678, col: 29, offset: 20574},
								name: "SingleAggExpr",
							},
							&ruleRefExpr{
								pos:  position{line: 678, col: 45, offset: 20590},
								name: "TcOptions",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleAggExpr",
			pos:  position{line: 682, col: 1, offset: 20628},
			expr: &actionExpr{
				pos: position{line: 682, col: 18, offset: 20645},
				run: (*parser).callonSingleAggExpr1,
				expr: &seqExpr{
					pos: position{line: 682, col: 18, offset: 20645},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 682, col: 18, offset: 20645},
							label: "aggs",
							expr: &ruleRefExpr{
								pos:  position{line: 682, col: 23, offset: 20650},
								name: "AggregationList",
							},
						},
						&labeledExpr{
							pos:   position{line: 682, col: 39, offset: 20666},
							label: "splitByClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 682, col: 53, offset: 20680},
								expr: &ruleRefExpr{
									pos:  position{line: 682, col: 53, offset: 20680},
									name: "SplitByClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SplitByClause",
			pos:  position{line: 696, col: 1, offset: 21019},
			expr: &actionExpr{
				pos: position{line: 696, col: 18, offset: 21036},
				run: (*parser).callonSplitByClause1,
				expr: &seqExpr{
					pos: position{line: 696, col: 18, offset: 21036},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 696, col: 18, offset: 21036},
							name: "BY",
						},
						&labeledExpr{
							pos:   position{line: 696, col: 21, offset: 21039},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 696, col: 27, offset: 21045},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "TcOptions",
			pos:  position{line: 704, col: 1, offset: 21174},
			expr: &actionExpr{
				pos: position{line: 704, col: 14, offset: 21187},
				run: (*parser).callonTcOptions1,
				expr: &labeledExpr{
					pos:   position{line: 704, col: 14, offset: 21187},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 704, col: 22, offset: 21195},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 704, col: 22, offset: 21195},
								name: "BinOptions",
							},
							&oneOrMoreExpr{
								pos: position{line: 704, col: 35, offset: 21208},
								expr: &ruleRefExpr{
									pos:  position{line: 704, col: 36, offset: 21209},
									name: "TcOption",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TcOption",
			pos:  position{line: 746, col: 1, offset: 22729},
			expr: &actionExpr{
				pos: position{line: 746, col: 13, offset: 22741},
				run: (*parser).callonTcOption1,
				expr: &seqExpr{
					pos: position{line: 746, col: 13, offset: 22741},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 746, col: 13, offset: 22741},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 746, col: 19, offset: 22747},
							label: "tcOptionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 746, col: 31, offset: 22759},
								name: "TcOptionCMD",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 746, col: 43, offset: 22771},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 746, col: 49, offset: 22777},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 746, col: 53, offset: 22781},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "TcOptionCMD",
			pos:  position{line: 751, col: 1, offset: 22894},
			expr: &actionExpr{
				pos: position{line: 751, col: 16, offset: 22909},
				run: (*parser).callonTcOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 751, col: 16, offset: 22909},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 751, col: 24, offset: 22917},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 751, col: 24, offset: 22917},
								val:        "usenull",
								ignoreCase: false,
								want:       "\"usenull\"",
							},
							&litMatcher{
								pos:        position{line: 751, col: 36, offset: 22929},
								val:        "useother",
								ignoreCase: false,
								want:       "\"useother\"",
							},
							&litMatcher{
								pos:        position{line: 751, col: 49, offset: 22942},
								val:        "nullstr",
								ignoreCase: false,
								want:       "\"nullstr\"",
							},
							&litMatcher{
								pos:        position{line: 751, col: 61, offset: 22954},
								val:        "otherstr",
								ignoreCase: false,
								want:       "\"otherstr\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BinOptions",
			pos:  position{line: 760, col: 1, offset: 23303},
			expr: &actionExpr{
				pos: position{line: 760, col: 15, offset: 23317},
				run: (*parser).callonBinOptions1,
				expr: &labeledExpr{
					pos:   position{line: 760, col: 15, offset: 23317},
					label: "spanOptions",
					expr: &ruleRefExpr{
						pos:  position{line: 760, col: 27, offset: 23329},
						name: "SpanOptions",
					},
				},
			},
		},
		{
			name: "SpanOptions",
			pos:  position{line: 768, col: 1, offset: 23554},
			expr: &actionExpr{
				pos: position{line: 768, col: 16, offset: 23569},
				run: (*parser).callonSpanOptions1,
				expr: &seqExpr{
					pos: position{line: 768, col: 16, offset: 23569},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 768, col: 16, offset: 23569},
							name: "CMD_SPAN",
						},
						&ruleRefExpr{
							pos:  position{line: 768, col: 25, offset: 23578},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 768, col: 31, offset: 23584},
							label: "spanLength",
							expr: &ruleRefExpr{
								pos:  position{line: 768, col: 42, offset: 23595},
								name: "SpanLength",
							},
						},
					},
				},
			},
		},
		{
			name: "SpanLength",
			pos:  position{line: 775, col: 1, offset: 23741},
			expr: &actionExpr{
				pos: position{line: 775, col: 15, offset: 23755},
				run: (*parser).callonSpanLength1,
				expr: &seqExpr{
					pos: position{line: 775, col: 15, offset: 23755},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 775, col: 15, offset: 23755},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 775, col: 24, offset: 23764},
								name: "IntegerAsString",
							},
						},
						&labeledExpr{
							pos:   position{line: 775, col: 40, offset: 23780},
							label: "timeScale",
							expr: &ruleRefExpr{
								pos:  position{line: 775, col: 50, offset: 23790},
								name: "TimeScale",
							},
						},
					},
				},
			},
		},
		{
			name: "TimeScale",
			pos:  position{line: 788, col: 1, offset: 24108},
			expr: &actionExpr{
				pos: position{line: 788, col: 14, offset: 24121},
				run: (*parser).callonTimeScale1,
				expr: &labeledExpr{
					pos:   position{line: 788, col: 14, offset: 24121},
					label: "timeUnit",
					expr: &choiceExpr{
						pos: position{line: 788, col: 24, offset: 24131},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 788, col: 24, offset: 24131},
								name: "Second",
							},
							&ruleRefExpr{
								pos:  position{line: 788, col: 33, offset: 24140},
								name: "Minute",
							},
							&ruleRefExpr{
								pos:  position{line: 788, col: 42, offset: 24149},
								name: "Hour",
							},
							&ruleRefExpr{
								pos:  position{line: 788, col: 49, offset: 24156},
								name: "Day",
							},
							&ruleRefExpr{
								pos:  position{line: 788, col: 54, offset: 24161},
								name: "Week",
							},
							&ruleRefExpr{
								pos:  position{line: 788, col: 61, offset: 24168},
								name: "Month",
							},
							&ruleRefExpr{
								pos:  position{line: 788, col: 69, offset: 24176},
								name: "Quarter",
							},
							&ruleRefExpr{
								pos:  position{line: 788, col: 78, offset: 24185},
								name: "Subseconds",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitExpr",
			pos:  position{line: 793, col: 1, offset: 24307},
			expr: &actionExpr{
				pos: position{line: 793, col: 14, offset: 24320},
				run: (*parser).callonLimitExpr1,
				expr: &seqExpr{
					pos: position{line: 793, col: 14, offset: 24320},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 793, col: 14, offset: 24320},
							name: "SPACE",
						},
						&litMatcher{
							pos:        position{line: 793, col: 20, offset: 24326},
							val:        "limit",
							ignoreCase: false,
							want:       "\"limit\"",
						},
						&ruleRefExpr{
							pos:  position{line: 793, col: 28, offset: 24334},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 793, col: 34, offset: 24340},
							label: "sortBy",
							expr: &zeroOrOneExpr{
								pos: position{line: 793, col: 41, offset: 24347},
								expr: &choiceExpr{
									pos: position{line: 793, col: 42, offset: 24348},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 793, col: 42, offset: 24348},
											val:        "top",
											ignoreCase: false,
											want:       "\"top\"",
										},
										&litMatcher{
											pos:        position{line: 793, col: 50, offset: 24356},
											val:        "bottom",
											ignoreCase: false,
											want:       "\"bottom\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 793, col: 61, offset: 24367},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 793, col: 76, offset: 24382},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 793, col: 86, offset: 24392},
								name: "IntegerAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticBlock",
			pos:  position{line: 817, col: 1, offset: 24973},
			expr: &actionExpr{
				pos: position{line: 817, col: 19, offset: 24991},
				run: (*parser).callonStatisticBlock1,
				expr: &seqExpr{
					pos: position{line: 817, col: 19, offset: 24991},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 817, col: 19, offset: 24991},
							name: "PIPE",
						},
						&labeledExpr{
							pos:   position{line: 817, col: 24, offset: 24996},
							label: "statisticExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 817, col: 38, offset: 25010},
								name: "StatisticExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticExpr",
			pos:  position{line: 850, col: 1, offset: 25988},
			expr: &actionExpr{
				pos: position{line: 850, col: 18, offset: 26005},
				run: (*parser).callonStatisticExpr1,
				expr: &seqExpr{
					pos: position{line: 850, col: 18, offset: 26005},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 850, col: 18, offset: 26005},
							label: "cmd",
							expr: &choiceExpr{
								pos: position{line: 850, col: 23, offset: 26010},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 850, col: 23, offset: 26010},
										name: "CMD_TOP",
									},
									&ruleRefExpr{
										pos:  position{line: 850, col: 33, offset: 26020},
										name: "CMD_RARE",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 850, col: 43, offset: 26030},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 850, col: 49, offset: 26036},
								expr: &ruleRefExpr{
									pos:  position{line: 850, col: 50, offset: 26037},
									name: "StatisticLimit",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 850, col: 67, offset: 26054},
							label: "fieldList",
							expr: &seqExpr{
								pos: position{line: 850, col: 78, offset: 26065},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 850, col: 78, offset: 26065},
										name: "SPACE",
									},
									&ruleRefExpr{
										pos:  position{line: 850, col: 84, offset: 26071},
										name: "FieldNameList",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 850, col: 99, offset: 26086},
							label: "byClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 850, col: 108, offset: 26095},
								expr: &ruleRefExpr{
									pos:  position{line: 850, col: 109, offset: 26096},
									name: "ByClause",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 850, col: 120, offset: 26107},
							label: "options",
							expr: &zeroOrOneExpr{
								pos: position{line: 850, col: 128, offset: 26115},
								expr: &ruleRefExpr{
									pos:  position{line: 850, col: 129, offset: 26116},
									name: "StatisticOptions",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticLimit",
			pos:  position{line: 892, col: 1, offset: 27201},
			expr: &choiceExpr{
				pos: position{line: 892, col: 19, offset: 27219},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 892, col: 19, offset: 27219},
						run: (*parser).callonStatisticLimit2,
						expr: &seqExpr{
							pos: position{line: 892, col: 19, offset: 27219},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 892, col: 19, offset: 27219},
									name: "SPACE",
								},
								&labeledExpr{
									pos:   position{line: 892, col: 25, offset: 27225},
									label: "number",
									expr: &ruleRefExpr{
										pos:  position{line: 892, col: 32, offset: 27232},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 895, col: 3, offset: 27286},
						run: (*parser).callonStatisticLimit7,
						expr: &seqExpr{
							pos: position{line: 895, col: 3, offset: 27286},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 895, col: 3, offset: 27286},
									name: "SPACE",
								},
								&litMatcher{
									pos:        position{line: 895, col: 9, offset: 27292},
									val:        "limit",
									ignoreCase: false,
									want:       "\"limit\"",
								},
								&ruleRefExpr{
									pos:  position{line: 895, col: 17, offset: 27300},
									name: "EQUAL",
								},
								&labeledExpr{
									pos:   position{line: 895, col: 23, offset: 27306},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 895, col: 30, offset: 27313},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticOptions",
			pos:  position{line: 900, col: 1, offset: 27411},
			expr: &actionExpr{
				pos: position{line: 900, col: 21, offset: 27431},
				run: (*parser).callonStatisticOptions1,
				expr: &labeledExpr{
					pos:   position{line: 900, col: 21, offset: 27431},
					label: "option",
					expr: &zeroOrMoreExpr{
						pos: position{line: 900, col: 28, offset: 27438},
						expr: &ruleRefExpr{
							pos:  position{line: 900, col: 29, offset: 27439},
							name: "StatisticOption",
						},
					},
				},
			},
		},
		{
			name: "StatisticOption",
			pos:  position{line: 949, col: 1, offset: 29001},
			expr: &actionExpr{
				pos: position{line: 949, col: 20, offset: 29020},
				run: (*parser).callonStatisticOption1,
				expr: &seqExpr{
					pos: position{line: 949, col: 20, offset: 29020},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 949, col: 20, offset: 29020},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 949, col: 26, offset: 29026},
							label: "optionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 949, col: 36, offset: 29036},
								name: "StatisticOptionCMD",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 949, col: 55, offset: 29055},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 949, col: 61, offset: 29061},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 949, col: 67, offset: 29067},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticOptionCMD",
			pos:  position{line: 954, col: 1, offset: 29176},
			expr: &actionExpr{
				pos: position{line: 954, col: 23, offset: 29198},
				run: (*parser).callonStatisticOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 954, col: 23, offset: 29198},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 954, col: 31, offset: 29206},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 954, col: 31, offset: 29206},
								val:        "countfield",
								ignoreCase: false,
								want:       "\"countfield\"",
							},
							&litMatcher{
								pos:        position{line: 954, col: 46, offset: 29221},
								val:        "showcount",
								ignoreCase: false,
								want:       "\"showcount\"",
							},
							&litMatcher{
								pos:        position{line: 954, col: 60, offset: 29235},
								val:        "otherstr",
								ignoreCase: false,
								want:       "\"otherstr\"",
							},
							&litMatcher{
								pos:        position{line: 954, col: 73, offset: 29248},
								val:        "useother",
								ignoreCase: false,
								want:       "\"useother\"",
							},
							&litMatcher{
								pos:        position{line: 954, col: 85, offset: 29260},
								val:        "percentfield",
								ignoreCase: false,
								want:       "\"percentfield\"",
							},
							&litMatcher{
								pos:        position{line: 954, col: 102, offset: 29277},
								val:        "showperc",
								ignoreCase: false,
								want:       "\"showperc\"",
							},
						},
					},
				},
			},
		},
		{
			name: "ByClause",
			pos:  position{line: 962, col: 1, offset: 29464},
			expr: &choiceExpr{
				pos: position{line: 962, col: 13, offset: 29476},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 962, col: 13, offset: 29476},
						run: (*parser).callonByClause2,
						expr: &seqExpr{
							pos: position{line: 962, col: 13, offset: 29476},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 962, col: 13, offset: 29476},
									name: "BY",
								},
								&labeledExpr{
									pos:   position{line: 962, col: 16, offset: 29479},
									label: "fieldList",
									expr: &ruleRefExpr{
										pos:  position{line: 962, col: 26, offset: 29489},
										name: "FieldNameList",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 965, col: 3, offset: 29546},
						run: (*parser).callonByClause7,
						expr: &labeledExpr{
							pos:   position{line: 965, col: 3, offset: 29546},
							label: "groupByBlock",
							expr: &ruleRefExpr{
								pos:  position{line: 965, col: 16, offset: 29559},
								name: "GroupbyBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupBlock",
			pos:  position{line: 969, col: 1, offset: 29617},
			expr: &actionExpr{
				pos: position{line: 969, col: 15, offset: 29631},
				run: (*parser).callonDedupBlock1,
				expr: &seqExpr{
					pos: position{line: 969, col: 15, offset: 29631},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 969, col: 15, offset: 29631},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 969, col: 20, offset: 29636},
							name: "CMD_DEDUP",
						},
						&labeledExpr{
							pos:   position{line: 969, col: 30, offset: 29646},
							label: "dedupExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 969, col: 40, offset: 29656},
								name: "DedupExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupExpr",
			pos:  position{line: 989, col: 1, offset: 30224},
			expr: &actionExpr{
				pos: position{line: 989, col: 14, offset: 30237},
				run: (*parser).callonDedupExpr1,
				expr: &seqExpr{
					pos: position{line: 989, col: 14, offset: 30237},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 989, col: 14, offset: 30237},
							label: "limitArr",
							expr: &zeroOrOneExpr{
								pos: position{line: 989, col: 23, offset: 30246},
								expr: &seqExpr{
									pos: position{line: 989, col: 24, offset: 30247},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 989, col: 24, offset: 30247},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 989, col: 30, offset: 30253},
											name: "IntegerAsString",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 989, col: 48, offset: 30271},
							label: "options1",
							expr: &zeroOrOneExpr{
								pos: position{line: 989, col: 57, offset: 30280},
								expr: &ruleRefExpr{
									pos:  position{line: 989, col: 58, offset: 30281},
									name: "DedupOptions",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 989, col: 73, offset: 30296},
							label: "fieldList",
							expr: &zeroOrOneExpr{
								pos: position{line: 989, col: 83, offset: 30306},
								expr: &ruleRefExpr{
									pos:  position{line: 989, col: 84, offset: 30307},
									name: "DedupFieldList",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 989, col: 101, offset: 30324},
							label: "options2",
							expr: &zeroOrOneExpr{
								pos: position{line: 989, col: 110, offset: 30333},
								expr: &ruleRefExpr{
									pos:  position{line: 989, col: 111, offset: 30334},
									name: "DedupOptions",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 989, col: 126, offset: 30349},
							label: "sortByClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 989, col: 139, offset: 30362},
								expr: &ruleRefExpr{
									pos:  position{line: 989, col: 140, offset: 30363},
									name: "DedupSortByClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DedupFieldName",
			pos:  position{line: 1046, col: 1, offset: 32101},
			expr: &actionExpr{
				pos: position{line: 1046, col: 19, offset: 32119},
				run: (*parser).callonDedupFieldName1,
				expr: &seqExpr{
					pos: position{line: 1046, col: 19, offset: 32119},
					exprs: []any{
						&notExpr{
							pos: position{line: 1046, col: 19, offset: 32119},
							expr: &litMatcher{
								pos:        position{line: 1046, col: 21, offset: 32121},
								val:        "sortby",
								ignoreCase: false,
								want:       "\"sortby\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1046, col: 31, offset: 32131},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1046, col: 37, offset: 32137},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupFieldList",
			pos:  position{line: 1050, col: 1, offset: 32174},
			expr: &actionExpr{
				pos: position{line: 1050, col: 19, offset: 32192},
				run: (*parser).callonDedupFieldList1,
				expr: &seqExpr{
					pos: position{line: 1050, col: 19, offset: 32192},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1050, col: 19, offset: 32192},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 1050, col: 25, offset: 32198},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1050, col: 31, offset: 32204},
								name: "DedupFieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 1050, col: 46, offset: 32219},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1050, col: 51, offset: 32224},
								expr: &seqExpr{
									pos: position{line: 1050, col: 52, offset: 32225},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1050, col: 52, offset: 32225},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 1050, col: 58, offset: 32231},
											name: "DedupFieldName",
										},
										&notExpr{
											pos: position{line: 1050, col: 73, offset: 32246},
											expr: &ruleRefExpr{
												pos:  position{line: 1050, col: 74, offset: 32247},
												name: "EQUAL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DedupOptions",
			pos:  position{line: 1068, col: 1, offset: 32775},
			expr: &actionExpr{
				pos: position{line: 1068, col: 17, offset: 32791},
				run: (*parser).callonDedupOptions1,
				expr: &labeledExpr{
					pos:   position{line: 1068, col: 17, offset: 32791},
					label: "option",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1068, col: 24, offset: 32798},
						expr: &ruleRefExpr{
							pos:  position{line: 1068, col: 25, offset: 32799},
							name: "DedupOption",
						},
					},
				},
			},
		},
		{
			name: "DedupOption",
			pos:  position{line: 1108, col: 1, offset: 34065},
			expr: &actionExpr{
				pos: position{line: 1108, col: 16, offset: 34080},
				run: (*parser).callonDedupOption1,
				expr: &seqExpr{
					pos: position{line: 1108, col: 16, offset: 34080},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1108, col: 16, offset: 34080},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 1108, col: 22, offset: 34086},
							label: "optionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 1108, col: 32, offset: 34096},
								name: "DedupOptionCMD",
							},
						},
						&litMatcher{
							pos:        position{line: 1108, col: 47, offset: 34111},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 1108, col: 51, offset: 34115},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1108, col: 57, offset: 34121},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupOptionCMD",
			pos:  position{line: 1113, col: 1, offset: 34230},
			expr: &actionExpr{
				pos: position{line: 1113, col: 19, offset: 34248},
				run: (*parser).callonDedupOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 1113, col: 19, offset: 34248},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 1113, col: 27, offset: 34256},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 1113, col: 27, offset: 34256},
								val:        "consecutive",
								ignoreCase: false,
								want:       "\"consecutive\"",
							},
							&litMatcher{
								pos:        position{line: 1113, col: 43, offset: 34272},
								val:        "keepempty",
								ignoreCase: false,
								want:       "\"keepempty\"",
							},
							&litMatcher{
								pos:        position{line: 1113, col: 57, offset: 34286},
								val:        "keepevents",
								ignoreCase: false,
								want:       "\"keepevents\"",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupSortByClause",
			pos:  position{line: 1121, col: 1, offset: 34471},
			expr: &actionExpr{
				pos: position{line: 1121, col: 22, offset: 34492},
				run: (*parser).callonDedupSortByClause1,
				expr: &seqExpr{
					pos: position{line: 1121, col: 22, offset: 34492},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1121, col: 22, offset: 34492},
							name: "CMD_DEDUP_SORTBY",
						},
						&labeledExpr{
							pos:   position{line: 1121, col: 39, offset: 34509},
							label: "dedupSortEles",
							expr: &ruleRefExpr{
								pos:  position{line: 1121, col: 53, offset: 34523},
								name: "SortElements",
							},
						},
					},
				},
			},
		},
		{
			name: "SortElements",
			pos:  position{line: 1126, col: 1, offset: 34631},
			expr: &actionExpr{
				pos: position{line: 1126, col: 17, offset: 34647},
				run: (*parser).callonSortElements1,
				expr: &seqExpr{
					pos: position{line: 1126, col: 17, offset: 34647},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1126, col: 17, offset: 34647},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1126, col: 23, offset: 34653},
								name: "SingleSortElement",
							},
						},
						&labeledExpr{
							pos:   position{line: 1126, col: 41, offset: 34671},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1126, col: 46, offset: 34676},
								expr: &seqExpr{
									pos: position{line: 1126, col: 47, offset: 34677},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1126, col: 47, offset: 34677},
											name: "SPACE_OR_COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 1126, col: 62, offset: 34692},
											name: "SingleSortElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleSortElement",
			pos:  position{line: 1141, col: 1, offset: 35050},
			expr: &actionExpr{
				pos: position{line: 1141, col: 22, offset: 35071},
				run: (*parser).callonSingleSortElement1,
				expr: &labeledExpr{
					pos:   position{line: 1141, col: 22, offset: 35071},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1141, col: 31, offset: 35080},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1141, col: 31, offset: 35080},
								name: "SingleSortElementWithCast",
							},
							&ruleRefExpr{
								pos:  position{line: 1141, col: 59, offset: 35108},
								name: "SingleSortElementWithoutCast",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleSortElementWithoutCast",
			pos:  position{line: 1145, col: 1, offset: 35167},
			expr: &actionExpr{
				pos: position{line: 1145, col: 33, offset: 35199},
				run: (*parser).callonSingleSortElementWithoutCast1,
				expr: &seqExpr{
					pos: position{line: 1145, col: 33, offset: 35199},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1145, col: 33, offset: 35199},
							label: "sortBySymbol",
							expr: &choiceExpr{
								pos: position{line: 1145, col: 47, offset: 35213},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 1145, col: 47, offset: 35213},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&litMatcher{
										pos:        position{line: 1145, col: 53, offset: 35219},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
									&litMatcher{
										pos:        position{line: 1145, col: 59, offset: 35225},
										val:        "",
										ignoreCase: false,
										want:       "\"\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1145, col: 63, offset: 35229},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1145, col: 69, offset: 35235},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleSortElementWithCast",
			pos:  position{line: 1160, col: 1, offset: 35510},
			expr: &actionExpr{
				pos: position{line: 1160, col: 30, offset: 35539},
				run: (*parser).callonSingleSortElementWithCast1,
				expr: &seqExpr{
					pos: position{line: 1160, col: 30, offset: 35539},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1160, col: 30, offset: 35539},
							label: "sortBySymbol",
							expr: &choiceExpr{
								pos: position{line: 1160, col: 44, offset: 35553},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 1160, col: 44, offset: 35553},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&litMatcher{
										pos:        position{line: 1160, col: 50, offset: 35559},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
									&litMatcher{
										pos:        position{line: 1160, col: 56, offset: 35565},
										val:        "",
										ignoreCase: false,
										want:       "\"\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1160, col: 60, offset: 35569},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 1160, col: 64, offset: 35573},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 1160, col: 64, offset: 35573},
										val:        "auto",
										ignoreCase: false,
										want:       "\"auto\"",
									},
									&litMatcher{
										pos:        position{line: 1160, col: 73, offset: 35582},
										val:        "str",
										ignoreCase: false,
										want:       "\"str\"",
									},
									&litMatcher{
										pos:        position{line: 1160, col: 81, offset: 35590},
										val:        "ip",
										ignoreCase: false,
										want:       "\"ip\"",
									},
									&litMatcher{
										pos:        position{line: 1160, col: 88, offset: 35597},
										val:        "num",
										ignoreCase: false,
										want:       "\"num\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1160, col: 95, offset: 35604},
							name: "L_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 1160, col: 103, offset: 35612},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1160, col: 109, offset: 35618},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1160, col: 119, offset: 35628},
							name: "R_PAREN",
						},
					},
				},
			},
		},
		{
			name: "RenameBlock",
			pos:  position{line: 1180, col: 1, offset: 36053},
			expr: &actionExpr{
				pos: position{line: 1180, col: 16, offset: 36068},
				run: (*parser).callonRenameBlock1,
				expr: &seqExpr{
					pos: position{line: 1180, col: 16, offset: 36068},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1180, col: 16, offset: 36068},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1180, col: 21, offset: 36073},
							name: "CMD_RENAME",
						},
						&labeledExpr{
							pos:   position{line: 1180, col: 32, offset: 36084},
							label: "renameExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 1180, col: 43, offset: 36095},
								name: "RenameExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameExpr",
			pos:  position{line: 1196, col: 1, offset: 36470},
			expr: &choiceExpr{
				pos: position{line: 1196, col: 15, offset: 36484},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1196, col: 15, offset: 36484},
						run: (*parser).callonRenameExpr2,
						expr: &seqExpr{
							pos: position{line: 1196, col: 15, offset: 36484},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1196, col: 15, offset: 36484},
									label: "originalPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1196, col: 31, offset: 36500},
										name: "RenamePattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1196, col: 45, offset: 36514},
									name: "AS",
								},
								&labeledExpr{
									pos:   position{line: 1196, col: 48, offset: 36517},
									label: "newPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1196, col: 59, offset: 36528},
										name: "QuotedString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1207, col: 3, offset: 36847},
						run: (*parser).callonRenameExpr9,
						expr: &seqExpr{
							pos: position{line: 1207, col: 3, offset: 36847},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1207, col: 3, offset: 36847},
									label: "originalPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1207, col: 19, offset: 36863},
										name: "RenamePattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1207, col: 33, offset: 36877},
									name: "AS",
								},
								&labeledExpr{
									pos:   position{line: 1207, col: 36, offset: 36880},
									label: "newPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1207, col: 47, offset: 36891},
										name: "RenamePattern",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RexBlock",
			pos:  position{line: 1229, col: 1, offset: 37457},
			expr: &actionExpr{
				pos: position{line: 1229, col: 13, offset: 37469},
				run: (*parser).callonRexBlock1,
				expr: &seqExpr{
					pos: position{line: 1229, col: 13, offset: 37469},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1229, col: 13, offset: 37469},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1229, col: 18, offset: 37474},
							name: "CMD_REX",
						},
						&litMatcher{
							pos:        position{line: 1229, col: 26, offset: 37482},
							val:        "field",
							ignoreCase: false,
							want:       "\"field\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1229, col: 34, offset: 37490},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1229, col: 40, offset: 37496},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1229, col: 46, offset: 37502},
								name: "EvalFieldToRead",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1229, col: 62, offset: 37518},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 1229, col: 68, offset: 37524},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 1229, col: 72, offset: 37528},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "SortBlock",
			pos:  position{line: 1257, col: 1, offset: 38231},
			expr: &actionExpr{
				pos: position{line: 1257, col: 14, offset: 38244},
				run: (*parser).callonSortBlock1,
				expr: &seqExpr{
					pos: position{line: 1257, col: 14, offset: 38244},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1257, col: 14, offset: 38244},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1257, col: 19, offset: 38249},
							name: "CMD_SORT",
						},
						&labeledExpr{
							pos:   position{line: 1257, col: 28, offset: 38258},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 1257, col: 34, offset: 38264},
								expr: &ruleRefExpr{
									pos:  position{line: 1257, col: 35, offset: 38265},
									name: "SortLimit",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1257, col: 47, offset: 38277},
							label: "sortByEles",
							expr: &ruleRefExpr{
								pos:  position{line: 1257, col: 58, offset: 38288},
								name: "SortElements",
							},
						},
					},
				},
			},
		},
		{
			name: "SortLimit",
			pos:  position{line: 1294, col: 1, offset: 39139},
			expr: &actionExpr{
				pos: position{line: 1294, col: 14, offset: 39152},
				run: (*parser).callonSortLimit1,
				expr: &seqExpr{
					pos: position{line: 1294, col: 14, offset: 39152},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 1294, col: 14, offset: 39152},
							expr: &seqExpr{
								pos: position{line: 1294, col: 15, offset: 39153},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1294, col: 15, offset: 39153},
										val:        "limit",
										ignoreCase: false,
										want:       "\"limit\"",
									},
									&ruleRefExpr{
										pos:  position{line: 1294, col: 23, offset: 39161},
										name: "EQUAL",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1294, col: 31, offset: 39169},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 1294, col: 40, offset: 39178},
								name: "IntegerAsString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1294, col: 56, offset: 39194},
							name: "SPACE",
						},
					},
				},
			},
		},
		{
			name: "EvalBlock",
			pos:  position{line: 1308, col: 1, offset: 39493},
			expr: &actionExpr{
				pos: position{line: 1308, col: 14, offset: 39506},
				run: (*parser).callonEvalBlock1,
				expr: &seqExpr{
					pos: position{line: 1308, col: 14, offset: 39506},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1308, col: 14, offset: 39506},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1308, col: 19, offset: 39511},
							name: "CMD_EVAL",
						},
						&labeledExpr{
							pos:   position{line: 1308, col: 28, offset: 39520},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1308, col: 34, offset: 39526},
								name: "SingleEval",
							},
						},
						&labeledExpr{
							pos:   position{line: 1308, col: 45, offset: 39537},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1308, col: 50, offset: 39542},
								expr: &seqExpr{
									pos: position{line: 1308, col: 51, offset: 39543},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1308, col: 51, offset: 39543},
											name: "COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 1308, col: 57, offset: 39549},
											name: "SingleEval",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleEval",
			pos:  position{line: 1335, col: 1, offset: 40350},
			expr: &actionExpr{
				pos: position{line: 1335, col: 15, offset: 40364},
				run: (*parser).callonSingleEval1,
				expr: &seqExpr{
					pos: position{line: 1335, col: 15, offset: 40364},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1335, col: 15, offset: 40364},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1335, col: 21, offset: 40370},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1335, col: 31, offset: 40380},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1335, col: 37, offset: 40386},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 1335, col: 42, offset: 40391},
								name: "EvalExpression",
							},
						},
					},
				},
			},
		},
		{
			name: "EvalExpression",
			pos:  position{line: 1348, col: 1, offset: 40792},
			expr: &actionExpr{
				pos: position{line: 1348, col: 19, offset: 40810},
				run: (*parser).callonEvalExpression1,
				expr: &labeledExpr{
					pos:   position{line: 1348, col: 19, offset: 40810},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 1348, col: 25, offset: 40816},
						name: "ValueExpr",
					},
				},
			},
		},
		{
			name: "ConditionExpr",
			pos:  position{line: 1357, col: 1, offset: 41040},
			expr: &choiceExpr{
				pos: position{line: 1357, col: 18, offset: 41057},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1357, col: 18, offset: 41057},
						run: (*parser).callonConditionExpr2,
						expr: &seqExpr{
							pos: position{line: 1357, col: 18, offset: 41057},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1357, col: 18, offset: 41057},
									val:        "if",
									ignoreCase: false,
									want:       "\"if\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1357, col: 23, offset: 41062},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1357, col: 31, offset: 41070},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 1357, col: 41, offset: 41080},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1357, col: 50, offset: 41089},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1357, col: 56, offset: 41095},
									label: "trueValue",
									expr: &ruleRefExpr{
										pos:  position{line: 1357, col: 66, offset: 41105},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1357, col: 76, offset: 41115},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1357, col: 82, offset: 41121},
									label: "falseValue",
									expr: &ruleRefExpr{
										pos:  position{line: 1357, col: 93, offset: 41132},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1357, col: 103, offset: 41142},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1368, col: 3, offset: 41393},
						run: (*parser).callonConditionExpr15,
						expr: &seqExpr{
							pos: position{line: 1368, col: 3, offset: 41393},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1368, col: 3, offset: 41393},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1368, col: 11, offset: 41401},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1368, col: 11, offset: 41401},
												val:        "case",
												ignoreCase: false,
												want:       "\"case\"",
											},
											&litMatcher{
												pos:        position{line: 1368, col: 20, offset: 41410},
												val:        "validate",
												ignoreCase: false,
												want:       "\"validate\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1368, col: 32, offset: 41422},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1368, col: 40, offset: 41430},
									label: "pair",
									expr: &ruleRefExpr{
										pos:  position{line: 1368, col: 45, offset: 41435},
										name: "ConditionValuePair",
									},
								},
								&labeledExpr{
									pos:   position{line: 1368, col: 64, offset: 41454},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1368, col: 69, offset: 41459},
										expr: &seqExpr{
											pos: position{line: 1368, col: 70, offset: 41460},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1368, col: 70, offset: 41460},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1368, col: 76, offset: 41466},
													name: "ConditionValuePair",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1368, col: 97, offset: 41487},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1391, col: 3, offset: 42091},
						run: (*parser).callonConditionExpr30,
						expr: &seqExpr{
							pos: position{line: 1391, col: 3, offset: 42091},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1391, col: 3, offset: 42091},
									val:        "coalesce",
									ignoreCase: false,
									want:       "\"coalesce\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1391, col: 14, offset: 42102},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1391, col: 22, offset: 42110},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1391, col: 32, offset: 42120},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1391, col: 42, offset: 42130},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1391, col: 47, offset: 42135},
										expr: &seqExpr{
											pos: position{line: 1391, col: 48, offset: 42136},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1391, col: 48, offset: 42136},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1391, col: 54, offset: 42142},
													name: "ValueExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1391, col: 66, offset: 42154},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1408, col: 3, offset: 42573},
						run: (*parser).callonConditionExpr42,
						expr: &seqExpr{
							pos: position{line: 1408, col: 3, offset: 42573},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1408, col: 3, offset: 42573},
									val:        "nullif",
									ignoreCase: false,
									want:       "\"nullif\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1408, col: 12, offset: 42582},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1408, col: 20, offset: 42590},
									label: "leftValue",
									expr: &ruleRefExpr{
										pos:  position{line: 1408, col: 30, offset: 42600},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1408, col: 40, offset: 42610},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1408, col: 46, offset: 42616},
									label: "rightValue",
									expr: &ruleRefExpr{
										pos:  position{line: 1408, col: 57, offset: 42627},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1408, col: 67, offset: 42637},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConditionValuePair",
			pos:  position{line: 1421, col: 1, offset: 42916},
			expr: &actionExpr{
				pos: position{line: 1421, col: 23, offset: 42938},
				run: (*parser).callonConditionValuePair1,
				expr: &seqExpr{
					pos: position{line: 1421, col: 23, offset: 42938},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1421, col: 23, offset: 42938},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 1421, col: 33, offset: 42948},
								name: "BoolExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1421, col: 42, offset: 42957},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 1421, col: 48, offset: 42963},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1421, col: 54, offset: 42969},
								name: "ValueExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "TextExpr",
			pos:  position{line: 1431, col: 1, offset: 43420},
			expr: &choiceExpr{
				pos: position{line: 1431, col: 13, offset: 43432},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1431, col: 13, offset: 43432},
						run: (*parser).callonTextExpr2,
						expr: &seqExpr{
							pos: position{line: 1431, col: 14, offset: 43433},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1431, col: 14, offset: 43433},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1431, col: 22, offset: 43441},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1431, col: 22, offset: 43441},
												val:        "lower",
												ignoreCase: false,
												want:       "\"lower\"",
											},
											&litMatcher{
												pos:        position{line: 1431, col: 32, offset: 43451},
												val:        "upper",
												ignoreCase: false,
												want:       "\"upper\"",
											},
											&litMatcher{
												pos:        position{line: 1431, col: 42, offset: 43461},
												val:        "urldecode",
												ignoreCase: false,
												want:       "\"urldecode\"",
											},
											&litMatcher{
												pos:        position{line: 1431, col: 56, offset: 43475},
												val:        "mvcount",
												ignoreCase: false,
												want:       "\"mvcount\"",
											},
											&litMatcher{
												pos:        position{line: 1431, col: 68, offset: 43487},
												val:        "mvdedup",
												ignoreCase: false,
												want:       "\"mvdedup\"",
											},
											&litMatcher{
												pos:        position{line: 1431, col: 80, offset: 43499},
												val:        "mvsort",
												ignoreCase: false,
												want:       "\"mvsort\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1431, col: 90, offset: 43509},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1431, col: 98, offset: 43517},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1431, col: 109, offset: 43528},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1431, col: 120, offset: 43539},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1443, col: 3, offset: 43853},
						run: (*parser).callonTextExpr16,
						expr: &seqExpr{
							pos: position{line: 1443, col: 4, offset: 43854},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1443, col: 4, offset: 43854},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1443, col: 12, offset: 43862},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1443, col: 12, offset: 43862},
												val:        "max",
												ignoreCase: false,
												want:       "\"max\"",
											},
											&litMatcher{
												pos:        position{line: 1443, col: 20, offset: 43870},
												val:        "min",
												ignoreCase: false,
												want:       "\"min\"",
											},
											&litMatcher{
												pos:        position{line: 1443, col: 28, offset: 43878},
												val:        "mvappend",
												ignoreCase: false,
												want:       "\"mvappend\"",
											},
											&litMatcher{
												pos:        position{line: 1443, col: 41, offset: 43891},
												val:        "mvfind",
												ignoreCase: false,
												want:       "\"mvfind\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1443, col: 51, offset: 43901},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1443, col: 59, offset: 43909},
									label: "firstVal",
									expr: &ruleRefExpr{
										pos:  position{line: 1443, col: 68, offset: 43918},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1443, col: 79, offset: 43929},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1443, col: 84, offset: 43934},
										expr: &seqExpr{
											pos: position{line: 1443, col: 85, offset: 43935},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1443, col: 85, offset: 43935},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1443, col: 91, offset: 43941},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1443, col: 104, offset: 43954},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1465, col: 3, offset: 44554},
						run: (*parser).callonTextExpr33,
						expr: &seqExpr{
							pos: position{line: 1465, col: 4, offset: 44555},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1465, col: 4, offset: 44555},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1465, col: 12, offset: 44563},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1465, col: 12, offset: 44563},
												val:        "split",
												ignoreCase: false,
												want:       "\"split\"",
											},
											&litMatcher{
												pos:        position{line: 1465, col: 22, offset: 44573},
												val:        "mvjoin",
												ignoreCase: false,
												want:       "\"mvjoin\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1465, col: 32, offset: 44583},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1465, col: 40, offset: 44591},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1465, col: 51, offset: 44602},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1465, col: 62, offset: 44613},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1465, col: 68, offset: 44619},
									label: "delim",
									expr: &ruleRefExpr{
										pos:  position{line: 1465, col: 74, offset: 44625},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1465, col: 85, offset: 44636},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1477, col: 3, offset: 44969},
						run: (*parser).callonTextExpr46,
						expr: &seqExpr{
							pos: position{line: 1477, col: 4, offset: 44970},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1477, col: 4, offset: 44970},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1477, col: 12, offset: 44978},
										val:        "substr",
										ignoreCase: false,
										want:       "\"substr\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1477, col: 22, offset: 44988},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1477, col: 30, offset: 44996},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1477, col: 41, offset: 45007},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1477, col: 52, offset: 45018},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1477, col: 58, offset: 45024},
									label: "startIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 1477, col: 69, offset: 45035},
										name: "NumericExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1477, col: 81, offset: 45047},
									label: "lengthParam",
									expr: &zeroOrOneExpr{
										pos: position{line: 1477, col: 93, offset: 45059},
										expr: &seqExpr{
											pos: position{line: 1477, col: 94, offset: 45060},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1477, col: 94, offset: 45060},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1477, col: 100, offset: 45066},
													name: "NumericExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1477, col: 114, offset: 45080},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1502, col: 3, offset: 45910},
						run: (*parser).callonTextExpr62,
						expr: &seqExpr{
							pos: position{line: 1502, col: 3, offset: 45910},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1502, col: 3, offset: 45910},
									val:        "tostring",
									ignoreCase: false,
									want:       "\"tostring\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1502, col: 14, offset: 45921},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1502, col: 22, offset: 45929},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 1502, col: 28, offset: 45935},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1502, col: 38, offset: 45945},
									label: "format",
									expr: &zeroOrOneExpr{
										pos: position{line: 1502, col: 45, offset: 45952},
										expr: &seqExpr{
											pos: position{line: 1502, col: 46, offset: 45953},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1502, col: 46, offset: 45953},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1502, col: 52, offset: 45959},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1502, col: 65, offset: 45972},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1515, col: 3, offset: 46340},
						run: (*parser).callonTextExpr74,
						expr: &seqExpr{
							pos: position{line: 1515, col: 4, offset: 46341},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1515, col: 4, offset: 46341},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1515, col: 12, offset: 46349},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1515, col: 12, offset: 46349},
												val:        "ltrim",
												ignoreCase: false,
												want:       "\"ltrim\"",
											},
											&litMatcher{
												pos:        position{line: 1515, col: 22, offset: 46359},
												val:        "rtrim",
												ignoreCase: false,
												want:       "\"rtrim\"",
											},
											&litMatcher{
												pos:        position{line: 1515, col: 32, offset: 46369},
												val:        "trim",
												ignoreCase: false,
												want:       "\"trim\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1515, col: 40, offset: 46377},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1515, col: 48, offset: 46385},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1515, col: 54, offset: 46391},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1515, col: 66, offset: 46403},
									label: "strToRemoveExpr",
									expr: &zeroOrOneExpr{
										pos: position{line: 1515, col: 82, offset: 46419},
										expr: &ruleRefExpr{
											pos:  position{line: 1515, col: 83, offset: 46420},
											name: "StrToRemoveExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1515, col: 101, offset: 46438},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1534, col: 3, offset: 46878},
						run: (*parser).callonTextExpr88,
						expr: &seqExpr{
							pos: position{line: 1534, col: 3, offset: 46878},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1534, col: 3, offset: 46878},
									val:        "spath",
									ignoreCase: false,
									want:       "\"spath\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1534, col: 11, offset: 46886},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1534, col: 19, offset: 46894},
									label: "inputField",
									expr: &ruleRefExpr{
										pos:  position{line: 1534, col: 30, offset: 46905},
										name: "FieldNameStartWith_",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1534, col: 50, offset: 46925},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1534, col: 56, offset: 46931},
									label: "path",
									expr: &choiceExpr{
										pos: position{line: 1534, col: 62, offset: 46937},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 1534, col: 62, offset: 46937},
												name: "QuotedPathString",
											},
											&ruleRefExpr{
												pos:  position{line: 1534, col: 81, offset: 46956},
												name: "UnquotedPathValue",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1534, col: 100, offset: 46975},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1545, col: 3, offset: 47280},
						run: (*parser).callonTextExpr100,
						expr: &seqExpr{
							pos: position{line: 1545, col: 3, offset: 47280},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1545, col: 3, offset: 47280},
									val:        "ipmask",
									ignoreCase: false,
									want:       "\"ipmask\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1545, col: 12, offset: 47289},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1545, col: 20, offset: 47297},
									label: "mask",
									expr: &ruleRefExpr{
										pos:  position{line: 1545, col: 25, offset: 47302},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1545, col: 36, offset: 47313},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1545, col: 42, offset: 47319},
									label: "ip",
									expr: &ruleRefExpr{
										pos:  position{line: 1545, col: 45, offset: 47322},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1545, col: 55, offset: 47332},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1552, col: 3, offset: 47490},
						run: (*parser).callonTextExpr110,
						expr: &seqExpr{
							pos: position{line: 1552, col: 3, offset: 47490},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1552, col: 3, offset: 47490},
									val:        "object_to_array",
									ignoreCase: false,
									want:       "\"object_to_array\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1552, col: 21, offset: 47508},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1552, col: 29, offset: 47516},
									label: "obj",
									expr: &ruleRefExpr{
										pos:  position{line: 1552, col: 33, offset: 47520},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1552, col: 43, offset: 47530},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1552, col: 49, offset: 47536},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 1552, col: 53, offset: 47540},
										name: "QuotedString",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1552, col: 66, offset: 47553},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1552, col: 72, offset: 47559},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 1552, col: 78, offset: 47565},
										name: "QuotedString",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1552, col: 91, offset: 47578},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1563, col: 3, offset: 47886},
						run: (*parser).callonTextExpr123,
						expr: &seqExpr{
							pos: position{line: 1563, col: 3, offset: 47886},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1563, col: 3, offset: 47886},
									val:        "printf",
									ignoreCase: false,
									want:       "\"printf\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1563, col: 12, offset: 47895},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1563, col: 20, offset: 47903},
									label: "format",
									expr: &ruleRefExpr{
										pos:  position{line: 1563, col: 27, offset: 47910},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1563, col: 38, offset: 47921},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1563, col: 43, offset: 47926},
										expr: &seqExpr{
											pos: position{line: 1563, col: 44, offset: 47927},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1563, col: 44, offset: 47927},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1563, col: 50, offset: 47933},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1563, col: 63, offset: 47946},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1581, col: 3, offset: 48413},
						run: (*parser).callonTextExpr135,
						expr: &seqExpr{
							pos: position{line: 1581, col: 3, offset: 48413},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1581, col: 3, offset: 48413},
									val:        "tojson",
									ignoreCase: false,
									want:       "\"tojson\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1581, col: 12, offset: 48422},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1581, col: 20, offset: 48430},
									label: "containInternalFields",
									expr: &zeroOrOneExpr{
										pos: position{line: 1581, col: 42, offset: 48452},
										expr: &seqExpr{
											pos: position{line: 1581, col: 43, offset: 48453},
											exprs: []any{
												&choiceExpr{
													pos: position{line: 1581, col: 44, offset: 48454},
													alternatives: []any{
														&litMatcher{
															pos:        position{line: 1581, col: 44, offset: 48454},
															val:        "true",
															ignoreCase: false,
															want:       "\"true\"",
														},
														&litMatcher{
															pos:        position{line: 1581, col: 53, offset: 48463},
															val:        "false",
															ignoreCase: false,
															want:       "\"false\"",
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1581, col: 62, offset: 48472},
													val:        "()",
													ignoreCase: false,
													want:       "\"()\"",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1581, col: 69, offset: 48479},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1603, col: 3, offset: 49076},
						run: (*parser).callonTextExpr147,
						expr: &seqExpr{
							pos: position{line: 1603, col: 4, offset: 49077},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1603, col: 4, offset: 49077},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1603, col: 12, offset: 49085},
										val:        "mvfilter",
										ignoreCase: false,
										want:       "\"mvfilter\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1603, col: 24, offset: 49097},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1603, col: 32, offset: 49105},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 1603, col: 42, offset: 49115},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1603, col: 51, offset: 49124},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1616, col: 3, offset: 49459},
						run: (*parser).callonTextExpr155,
						expr: &seqExpr{
							pos: position{line: 1616, col: 4, offset: 49460},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1616, col: 4, offset: 49460},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1616, col: 12, offset: 49468},
										val:        "mvindex",
										ignoreCase: false,
										want:       "\"mvindex\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1616, col: 23, offset: 49479},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1616, col: 31, offset: 49487},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1616, col: 42, offset: 49498},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1616, col: 53, offset: 49509},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1616, col: 59, offset: 49515},
									label: "startIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 1616, col: 70, offset: 49526},
										name: "NumericExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1616, col: 82, offset: 49538},
									label: "endIndex",
									expr: &zeroOrOneExpr{
										pos: position{line: 1616, col: 91, offset: 49547},
										expr: &ruleRefExpr{
											pos:  position{line: 1616, col: 92, offset: 49548},
											name: "NumericParamExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1616, col: 111, offset: 49567},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1632, col: 3, offset: 49995},
						run: (*parser).callonTextExpr169,
						expr: &seqExpr{
							pos: position{line: 1632, col: 4, offset: 49996},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1632, col: 4, offset: 49996},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1632, col: 12, offset: 50004},
										val:        "mvmap",
										ignoreCase: false,
										want:       "\"mvmap\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1632, col: 21, offset: 50013},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1632, col: 29, offset: 50021},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1632, col: 40, offset: 50032},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1632, col: 51, offset: 50043},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1632, col: 57, offset: 50049},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1632, col: 62, offset: 50054},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1632, col: 72, offset: 50064},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1645, col: 3, offset: 50390},
						run: (*parser).callonTextExpr180,
						expr: &seqExpr{
							pos: position{line: 1645, col: 4, offset: 50391},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1645, col: 4, offset: 50391},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1645, col: 12, offset: 50399},
										val:        "mvrange",
										ignoreCase: false,
										want:       "\"mvrange\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1645, col: 23, offset: 50410},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1645, col: 31, offset: 50418},
									label: "startIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 1645, col: 42, offset: 50429},
										name: "NumericExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1645, col: 54, offset: 50441},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1645, col: 60, offset: 50447},
									label: "endIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 1645, col: 69, offset: 50456},
										name: "NumericExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1645, col: 81, offset: 50468},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1645, col: 87, offset: 50474},
									label: "stringExpr",
									expr: &zeroOrOneExpr{
										pos: position{line: 1645, col: 98, offset: 50485},
										expr: &ruleRefExpr{
											pos:  position{line: 1645, col: 99, offset: 50486},
											name: "StringExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1645, col: 112, offset: 50499},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1661, col: 3, offset: 50929},
						run: (*parser).callonTextExpr195,
						expr: &seqExpr{
							pos: position{line: 1661, col: 4, offset: 50930},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1661, col: 4, offset: 50930},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1661, col: 12, offset: 50938},
										val:        "mvzip",
										ignoreCase: false,
										want:       "\"mvzip\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1661, col: 21, offset: 50947},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1661, col: 29, offset: 50955},
									label: "mvLeft",
									expr: &ruleRefExpr{
										pos:  position{line: 1661, col: 36, offset: 50962},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1661, col: 47, offset: 50973},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1661, col: 53, offset: 50979},
									label: "mvRight",
									expr: &ruleRefExpr{
										pos:  position{line: 1661, col: 61, offset: 50987},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1661, col: 72, offset: 50998},
									label: "rest",
									expr: &zeroOrOneExpr{
										pos: position{line: 1661, col: 77, offset: 51003},
										expr: &seqExpr{
											pos: position{line: 1661, col: 78, offset: 51004},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1661, col: 78, offset: 51004},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1661, col: 84, offset: 51010},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1661, col: 97, offset: 51023},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1682, col: 3, offset: 51547},
						run: (*parser).callonTextExpr211,
						expr: &seqExpr{
							pos: position{line: 1682, col: 4, offset: 51548},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1682, col: 4, offset: 51548},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1682, col: 12, offset: 51556},
										val:        "mv_to_json_array",
										ignoreCase: false,
										want:       "\"mv_to_json_array\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1682, col: 32, offset: 51576},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1682, col: 40, offset: 51584},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1682, col: 51, offset: 51595},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1682, col: 62, offset: 51606},
									label: "rest",
									expr: &zeroOrOneExpr{
										pos: position{line: 1682, col: 67, offset: 51611},
										expr: &seqExpr{
											pos: position{line: 1682, col: 68, offset: 51612},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1682, col: 68, offset: 51612},
													name: "COMMA",
												},
												&choiceExpr{
													pos: position{line: 1682, col: 75, offset: 51619},
													alternatives: []any{
														&litMatcher{
															pos:        position{line: 1682, col: 75, offset: 51619},
															val:        "true",
															ignoreCase: false,
															want:       "\"true\"",
														},
														&litMatcher{
															pos:        position{line: 1682, col: 84, offset: 51628},
															val:        "false",
															ignoreCase: false,
															want:       "\"false\"",
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1682, col: 93, offset: 51637},
													val:        "()",
													ignoreCase: false,
													want:       "\"()\"",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1682, col: 100, offset: 51644},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1707, col: 3, offset: 52279},
						run: (*parser).callonTextExpr227,
						expr: &seqExpr{
							pos: position{line: 1707, col: 3, offset: 52279},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1707, col: 3, offset: 52279},
									val:        "cluster",
									ignoreCase: false,
									want:       "\"cluster\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1707, col: 13, offset: 52289},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1707, col: 21, offset: 52297},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1707, col: 27, offset: 52303},
										name: "EvalFieldToRead",
									},
								},
								&labeledExpr{
									pos:   position{line: 1707, col: 43, offset: 52319},
									label: "threshold",
									expr: &zeroOrOneExpr{
										pos: position{line: 1707, col: 53, offset: 52329},
										expr: &seqExpr{
											pos: position{line: 1707, col: 54, offset: 52330},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1707, col: 54, offset: 52330},
													name: "COMMA",
												},
												&litMatcher{
													pos:        position{line: 1707, col: 60, offset: 52336},
													val:        "threshold:",
													ignoreCase: false,
													want:       "\"threshold:\"",
												},
												&ruleRefExpr{
													pos:  position{line: 1707, col: 73, offset: 52349},
													name: "FloatAsString",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1707, col: 89, offset: 52365},
									label: "match",
									expr: &zeroOrOneExpr{
										pos: position{line: 1707, col: 95, offset: 52371},
										expr: &seqExpr{
											pos: position{line: 1707, col: 96, offset: 52372},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1707, col: 96, offset: 52372},
													name: "COMMA",
												},
												&litMatcher{
													pos:        position{line: 1707, col: 102, offset: 52378},
													val:        "match:",
													ignoreCase: false,
													want:       "\"match:\"",
												},
												&choiceExpr{
													pos: position{line: 1707, col: 112, offset: 52388},
													alternatives: []any{
														&litMatcher{
															pos:        position{line: 1707, col: 112, offset: 52388},
															val:        "termlist",
															ignoreCase: false,
															want:       "\"termlist\"",
														},
														&litMatcher{
															pos:        position{line: 1707, col: 125, offset: 52401},
															val:        "termset",
															ignoreCase: false,
															want:       "\"termset\"",
														},
														&litMatcher{
															pos:        position{line: 1707, col: 137, offset: 52413},
															val:        "ngramset",
															ignoreCase: false,
															want:       "\"ngramset\"",
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1707, col: 151, offset: 52427},
									label: "delims",
									expr: &zeroOrOneExpr{
										pos: position{line: 1707, col: 158, offset: 52434},
										expr: &seqExpr{
											pos: position{line: 1707, col: 159, offset: 52435},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1707, col: 159, offset: 52435},
													name: "COMMA",
												},
												&litMatcher{
													pos:        position{line: 1707, col: 165, offset: 52441},
													val:        "delims:",
													ignoreCase: false,
													want:       "\"delims:\"",
												},
												&ruleRefExpr{
													pos:  position{line: 1707, col: 175, offset: 52451},
													name: "QuotedString",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1707, col: 190, offset: 52466},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1747, col: 3, offset: 53461},
						run: (*parser).callonTextExpr255,
						expr: &seqExpr{
							pos: position{line: 1747, col: 3, offset: 53461},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1747, col: 3, offset: 53461},
									val:        "getfields",
									ignoreCase: false,
									want:       "\"getfields\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1747, col: 15, offset: 53473},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1747, col: 23, offset: 53481},
									label: "filter",
									expr: &zeroOrOneExpr{
										pos: position{line: 1747, col: 30, offset: 53488},
										expr: &ruleRefExpr{
											pos:  position{line: 1747, col: 31, offset: 53489},
											name: "StringExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1747, col: 44, offset: 53502},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1758, col: 3, offset: 53693},
						run: (*parser).callonTextExpr263,
						expr: &seqExpr{
							pos: position{line: 1758, col: 3, offset: 53693},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1758, col: 3, offset: 53693},
									val:        "typeof",
									ignoreCase: false,
									want:       "\"typeof\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1758, col: 12, offset: 53702},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1758, col: 20, offset: 53710},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1758, col: 30, offset: 53720},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1758, col: 40, offset: 53730},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1764, col: 3, offset: 53853},
						run: (*parser).callonTextExpr270,
						expr: &seqExpr{
							pos: position{line: 1764, col: 3, offset: 53853},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1764, col: 3, offset: 53853},
									val:        "replace",
									ignoreCase: false,
									want:       "\"replace\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1764, col: 13, offset: 53863},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1764, col: 21, offset: 53871},
									label: "val",
									expr: &ruleRefExpr{
										pos:  position{line: 1764, col: 25, offset: 53875},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1764, col: 35, offset: 53885},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1764, col: 41, offset: 53891},
									label: "regex",
									expr: &ruleRefExpr{
										pos:  position{line: 1764, col: 47, offset: 53897},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1764, col: 58, offset: 53908},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1764, col: 64, offset: 53914},
									label: "replacement",
									expr: &ruleRefExpr{
										pos:  position{line: 1764, col: 76, offset: 53926},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1764, col: 87, offset: 53937},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1771, col: 3, offset: 54161},
						run: (*parser).callonTextExpr283,
						expr: &seqExpr{
							pos: position{line: 1771, col: 3, offset: 54161},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1771, col: 3, offset: 54161},
									val:        "strptime",
									ignoreCase: false,
									want:       "\"strptime\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1771, col: 14, offset: 54172},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1771, col: 22, offset: 54180},
									label: "val",
									expr: &ruleRefExpr{
										pos:  position{line: 1771, col: 26, offset: 54184},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1771, col: 36, offset: 54194},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1771, col: 42, offset: 54200},
									label: "format",
									expr: &ruleRefExpr{
										pos:  position{line: 1771, col: 49, offset: 54207},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1771, col: 60, offset: 54218},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedPathString",
			pos:  position{line: 1779, col: 1, offset: 54380},
			expr: &actionExpr{
				pos: position{line: 1779, col: 21, offset: 54400},
				run: (*parser).callonQuotedPathString1,
				expr: &labeledExpr{
					pos:   position{line: 1779, col: 21, offset: 54400},
					label: "str",
					expr: &ruleRefExpr{
						pos:  position{line: 1779, col: 25, offset: 54404},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "UnquotedPathValue",
			pos:  position{line: 1786, col: 1, offset: 54531},
			expr: &actionExpr{
				pos: position{line: 1786, col: 22, offset: 54552},
				run: (*parser).callonUnquotedPathValue1,
				expr: &labeledExpr{
					pos:   position{line: 1786, col: 22, offset: 54552},
					label: "str",
					expr: &ruleRefExpr{
						pos:  position{line: 1786, col: 26, offset: 54556},
						name: "UnquotedString",
					},
				},
			},
		},
		{
			name: "StrToRemoveExpr",
			pos:  position{line: 1793, col: 1, offset: 54684},
			expr: &actionExpr{
				pos: position{line: 1793, col: 20, offset: 54703},
				run: (*parser).callonStrToRemoveExpr1,
				expr: &seqExpr{
					pos: position{line: 1793, col: 20, offset: 54703},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1793, col: 20, offset: 54703},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 1793, col: 26, offset: 54709},
							label: "strToRemove",
							expr: &ruleRefExpr{
								pos:  position{line: 1793, col: 38, offset: 54721},
								name: "String",
							},
						},
					},
				},
			},
		},
		{
			name: "EvalFieldToRead",
			pos:  position{line: 1799, col: 1, offset: 54906},
			expr: &choiceExpr{
				pos: position{line: 1799, col: 20, offset: 54925},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1799, col: 20, offset: 54925},
						run: (*parser).callonEvalFieldToRead2,
						expr: &seqExpr{
							pos: position{line: 1799, col: 20, offset: 54925},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 1799, col: 20, offset: 54925},
									expr: &charClassMatcher{
										pos:        position{line: 1799, col: 20, offset: 54925},
										val:        "[a-zA-Z_]",
										chars:      []rune{'_'},
										ranges:     []rune{'a', 'z', 'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&notExpr{
									pos: position{line: 1799, col: 31, offset: 54936},
									expr: &litMatcher{
										pos:        position{line: 1799, col: 33, offset: 54938},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1802, col: 3, offset: 54980},
						run: (*parser).callonEvalFieldToRead8,
						expr: &seqExpr{
							pos: position{line: 1802, col: 3, offset: 54980},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1802, col: 3, offset: 54980},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&labeledExpr{
									pos:   position{line: 1802, col: 7, offset: 54984},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1802, col: 13, offset: 54990},
										name: "FieldName",
									},
								},
								&litMatcher{
									pos:        position{line: 1802, col: 23, offset: 55000},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "WhereBlock",
			pos:  position{line: 1807, col: 1, offset: 55068},
			expr: &actionExpr{
				pos: position{line: 1807, col: 15, offset: 55082},
				run: (*parser).callonWhereBlock1,
				expr: &seqExpr{
					pos: position{line: 1807, col: 15, offset: 55082},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1807, col: 15, offset: 55082},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1807, col: 20, offset: 55087},
							name: "CMD_WHERE",
						},
						&labeledExpr{
							pos:   position{line: 1807, col: 30, offset: 55097},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 1807, col: 40, offset: 55107},
								name: "BoolExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExpr",
			pos:  position{line: 1819, col: 1, offset: 55400},
			expr: &actionExpr{
				pos: position{line: 1819, col: 13, offset: 55412},
				run: (*parser).callonBoolExpr1,
				expr: &labeledExpr{
					pos:   position{line: 1819, col: 13, offset: 55412},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 1819, col: 18, offset: 55417},
						name: "BoolExprLevel4",
					},
				},
			},
		},
		{
			name: "BoolExprLevel4",
			pos:  position{line: 1824, col: 1, offset: 55487},
			expr: &actionExpr{
				pos: position{line: 1824, col: 19, offset: 55505},
				run: (*parser).callonBoolExprLevel41,
				expr: &seqExpr{
					pos: position{line: 1824, col: 19, offset: 55505},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1824, col: 19, offset: 55505},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1824, col: 25, offset: 55511},
								name: "BoolExprLevel3",
							},
						},
						&labeledExpr{
							pos:   position{line: 1824, col: 40, offset: 55526},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1824, col: 45, offset: 55531},
								expr: &seqExpr{
									pos: position{line: 1824, col: 46, offset: 55532},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1824, col: 46, offset: 55532},
											name: "OR",
										},
										&ruleRefExpr{
											pos:  position{line: 1824, col: 49, offset: 55535},
											name: "BoolExprLevel3",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel3",
			pos:  position{line: 1844, col: 1, offset: 55973},
			expr: &actionExpr{
				pos: position{line: 1844, col: 19, offset: 55991},
				run: (*parser).callonBoolExprLevel31,
				expr: &seqExpr{
					pos: position{line: 1844, col: 19, offset: 55991},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1844, col: 19, offset: 55991},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1844, col: 25, offset: 55997},
								name: "BoolExprLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 1844, col: 40, offset: 56012},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1844, col: 45, offset: 56017},
								expr: &seqExpr{
									pos: position{line: 1844, col: 46, offset: 56018},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1844, col: 46, offset: 56018},
											name: "AND",
										},
										&ruleRefExpr{
											pos:  position{line: 1844, col: 50, offset: 56022},
											name: "BoolExprLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel2",
			pos:  position{line: 1864, col: 1, offset: 56461},
			expr: &choiceExpr{
				pos: position{line: 1864, col: 19, offset: 56479},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1864, col: 19, offset: 56479},
						run: (*parser).callonBoolExprLevel22,
						expr: &seqExpr{
							pos: position{line: 1864, col: 19, offset: 56479},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1864, col: 19, offset: 56479},
									name: "NOT",
								},
								&ruleRefExpr{
									pos:  position{line: 1864, col: 23, offset: 56483},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1864, col: 31, offset: 56491},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 1864, col: 37, offset: 56497},
										name: "BoolExprLevel1",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1864, col: 52, offset: 56512},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1874, col: 3, offset: 56715},
						run: (*parser).callonBoolExprLevel29,
						expr: &labeledExpr{
							pos:   position{line: 1874, col: 3, offset: 56715},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1874, col: 9, offset: 56721},
								name: "BoolExprLevel1",
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel1",
			pos:  position{line: 1879, col: 1, offset: 56792},
			expr: &choiceExpr{
				pos: position{line: 1879, col: 19, offset: 56810},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1879, col: 19, offset: 56810},
						run: (*parser).callonBoolExprLevel12,
						expr: &seqExpr{
							pos: position{line: 1879, col: 19, offset: 56810},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1879, col: 19, offset: 56810},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1879, col: 27, offset: 56818},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 1879, col: 33, offset: 56824},
										name: "BoolExprLevel4",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1879, col: 48, offset: 56839},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1882, col: 3, offset: 56875},
						run: (*parser).callonBoolExprLevel18,
						expr: &labeledExpr{
							pos:   position{line: 1882, col: 3, offset: 56875},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 1882, col: 10, offset: 56882},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1882, col: 10, offset: 56882},
										name: "EvalComparisonExpr",
									},
									&ruleRefExpr{
										pos:  position{line: 1882, col: 31, offset: 56903},
										name: "BoolComparisonExpr",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EvalComparisonExpr",
			pos:  position{line: 1887, col: 1, offset: 57023},
			expr: &choiceExpr{
				pos: position{line: 1887, col: 23, offset: 57045},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1887, col: 23, offset: 57045},
						run: (*parser).callonEvalComparisonExpr2,
						expr: &seqExpr{
							pos: position{line: 1887, col: 24, offset: 57046},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1887, col: 24, offset: 57046},
									label: "op",
									expr: &choiceExpr{
										pos: position{line: 1887, col: 28, offset: 57050},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1887, col: 28, offset: 57050},
												val:        "isbool",
												ignoreCase: false,
												want:       "\"isbool\"",
											},
											&litMatcher{
												pos:        position{line: 1887, col: 39, offset: 57061},
												val:        "isint",
												ignoreCase: false,
												want:       "\"isint\"",
											},
											&litMatcher{
												pos:        position{line: 1887, col: 49, offset: 57071},
												val:        "isstr",
												ignoreCase: false,
												want:       "\"isstr\"",
											},
											&litMatcher{
												pos:        position{line: 1887, col: 59, offset: 57081},
												val:        "isnull",
												ignoreCase: false,
												want:       "\"isnull\"",
											},
											&litMatcher{
												pos:        position{line: 1887, col: 70, offset: 57092},
												val:        "isnotnull",
												ignoreCase: false,
												want:       "\"isnotnull\"",
											},
											&litMatcher{
												pos:        position{line: 1887, col: 84, offset: 57106},
												val:        "isnum",
												ignoreCase: false,
												want:       "\"isnum\"",
											},
											&litMatcher{
												pos:        position{line: 1887, col: 94, offset: 57116},
												val:        "searchmatch",
												ignoreCase: false,
												want:       "\"searchmatch\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1887, col: 109, offset: 57131},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1887, col: 117, offset: 57139},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 1887, col: 123, offset: 57145},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1887, col: 133, offset: 57155},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1900, col: 3, offset: 57491},
						run: (*parser).callonEvalComparisonExpr17,
						expr: &seqExpr{
							pos: position{line: 1900, col: 3, offset: 57491},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1900, col: 3, offset: 57491},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1900, col: 11, offset: 57499},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1900, col: 11, offset: 57499},
												val:        "like",
												ignoreCase: false,
												want:       "\"like\"",
											},
											&litMatcher{
												pos:        position{line: 1900, col: 20, offset: 57508},
												val:        "Like",
												ignoreCase: false,
												want:       "\"Like\"",
											},
											&litMatcher{
												pos:        position{line: 1900, col: 29, offset: 57517},
												val:        "match",
												ignoreCase: false,
												want:       "\"match\"",
											},
											&litMatcher{
												pos:        position{line: 1900, col: 39, offset: 57527},
												val:        "cidrmatch",
												ignoreCase: false,
												want:       "\"cidrmatch\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1900, col: 52, offset: 57540},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1900, col: 60, offset: 57548},
									label: "leftValue",
									expr: &ruleRefExpr{
										pos:  position{line: 1900, col: 70, offset: 57558},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1900, col: 80, offset: 57568},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1900, col: 86, offset: 57574},
									label: "rightValue",
									expr: &ruleRefExpr{
										pos:  position{line: 1900, col: 97, offset: 57585},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1900, col: 107, offset: 57595},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1913, col: 3, offset: 57965},
						run: (*parser).callonEvalComparisonExpr32,
						expr: &seqExpr{
							pos: position{line: 1913, col: 3, offset: 57965},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1913, col: 3, offset: 57965},
									label: "left",
									expr: &ruleRefExpr{
										pos:  position{line: 1913, col: 8, offset: 57970},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1913, col: 18, offset: 57980},
									name: "SPACE",
								},
								&litMatcher{
									pos:        position{line: 1913, col: 24, offset: 57986},
									val:        "in",
									ignoreCase: false,
									want:       "\"in\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1913, col: 29, offset: 57991},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1913, col: 37, offset: 57999},
									label: "valueToJudge",
									expr: &ruleRefExpr{
										pos:  position{line: 1913, col: 50, offset: 58012},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1913, col: 60, offset: 58022},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1913, col: 65, offset: 58027},
										expr: &seqExpr{
											pos: position{line: 1913, col: 66, offset: 58028},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1913, col: 66, offset: 58028},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1913, col: 72, offset: 58034},
													name: "ValueExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1913, col: 84, offset: 58046},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1932, col: 3, offset: 58597},
						run: (*parser).callonEvalComparisonExpr47,
						expr: &seqExpr{
							pos: position{line: 1932, col: 3, offset: 58597},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1932, col: 3, offset: 58597},
									val:        "in",
									ignoreCase: false,
									want:       "\"in\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1932, col: 8, offset: 58602},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1932, col: 16, offset: 58610},
									label: "valueToJudge",
									expr: &ruleRefExpr{
										pos:  position{line: 1932, col: 29, offset: 58623},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1932, col: 39, offset: 58633},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1932, col: 44, offset: 58638},
										expr: &seqExpr{
											pos: position{line: 1932, col: 45, offset: 58639},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1932, col: 45, offset: 58639},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1932, col: 51, offset: 58645},
													name: "ValueExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1932, col: 63, offset: 58657},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoolComparisonExpr",
			pos:  position{line: 1950, col: 1, offset: 59078},
			expr: &actionExpr{
				pos: position{line: 1950, col: 23, offset: 59100},
				run: (*parser).callonBoolComparisonExpr1,
				expr: &seqExpr{
					pos: position{line: 1950, col: 23, offset: 59100},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1950, col: 23, offset: 59100},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 1950, col: 28, offset: 59105},
								name: "ValueExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 1950, col: 38, offset: 59115},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 1950, col: 41, offset: 59118},
								name: "EqualityOrInequality",
							},
						},
						&labeledExpr{
							pos:   position{line: 1950, col: 62, offset: 59139},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 1950, col: 68, offset: 59145},
								name: "ValueExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "ValueExpr",
			pos:  position{line: 1968, col: 1, offset: 59739},
			expr: &choiceExpr{
				pos: position{line: 1968, col: 14, offset: 59752},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1968, col: 14, offset: 59752},
						run: (*parser).callonValueExpr2,
						expr: &labeledExpr{
							pos:   position{line: 1968, col: 14, offset: 59752},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 1968, col: 24, offset: 59762},
								name: "ConditionExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1977, col: 3, offset: 59952},
						run: (*parser).callonValueExpr5,
						expr: &seqExpr{
							pos: position{line: 1977, col: 3, offset: 59952},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1977, col: 3, offset: 59952},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1977, col: 12, offset: 59961},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 1977, col: 22, offset: 59971},
										name: "ConditionExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1977, col: 37, offset: 59986},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1986, col: 3, offset: 60170},
						run: (*parser).callonValueExpr11,
						expr: &labeledExpr{
							pos:   position{line: 1986, col: 3, offset: 60170},
							label: "numeric",
							expr: &ruleRefExpr{
								pos:  position{line: 1986, col: 11, offset: 60178},
								name: "NumericExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1995, col: 3, offset: 60358},
						run: (*parser).callonValueExpr14,
						expr: &labeledExpr{
							pos:   position{line: 1995, col: 3, offset: 60358},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 1995, col: 7, offset: 60362},
								name: "StringExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2004, col: 3, offset: 60534},
						run: (*parser).callonValueExpr17,
						expr: &seqExpr{
							pos: position{line: 2004, col: 3, offset: 60534},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2004, col: 3, offset: 60534},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2004, col: 12, offset: 60543},
									label: "str",
									expr: &ruleRefExpr{
										pos:  position{line: 2004, col: 16, offset: 60547},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2004, col: 28, offset: 60559},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2013, col: 3, offset: 60728},
						run: (*parser).callonValueExpr23,
						expr: &seqExpr{
							pos: position{line: 2013, col: 3, offset: 60728},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2013, col: 3, offset: 60728},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2013, col: 11, offset: 60736},
									label: "boolean",
									expr: &ruleRefExpr{
										pos:  position{line: 2013, col: 19, offset: 60744},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2013, col: 28, offset: 60753},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StringExpr",
			pos:  position{line: 2023, col: 1, offset: 60924},
			expr: &choiceExpr{
				pos: position{line: 2023, col: 15, offset: 60938},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2023, col: 15, offset: 60938},
						run: (*parser).callonStringExpr2,
						expr: &seqExpr{
							pos: position{line: 2023, col: 15, offset: 60938},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2023, col: 15, offset: 60938},
									label: "text",
									expr: &ruleRefExpr{
										pos:  position{line: 2023, col: 20, offset: 60943},
										name: "TextExpr",
									},
								},
								&notExpr{
									pos: position{line: 2023, col: 29, offset: 60952},
									expr: &ruleRefExpr{
										pos:  position{line: 2023, col: 31, offset: 60954},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2031, col: 3, offset: 61124},
						run: (*parser).callonStringExpr8,
						expr: &seqExpr{
							pos: position{line: 2031, col: 3, offset: 61124},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2031, col: 3, offset: 61124},
									label: "str",
									expr: &ruleRefExpr{
										pos:  position{line: 2031, col: 7, offset: 61128},
										name: "QuotedString",
									},
								},
								&notExpr{
									pos: position{line: 2031, col: 20, offset: 61141},
									expr: &ruleRefExpr{
										pos:  position{line: 2031, col: 22, offset: 61143},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2039, col: 3, offset: 61308},
						run: (*parser).callonStringExpr14,
						expr: &seqExpr{
							pos: position{line: 2039, col: 3, offset: 61308},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2039, col: 3, offset: 61308},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2039, col: 9, offset: 61314},
										name: "EvalFieldToRead",
									},
								},
								&notExpr{
									pos: position{line: 2039, col: 25, offset: 61330},
									expr: &choiceExpr{
										pos: position{line: 2039, col: 27, offset: 61332},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2039, col: 27, offset: 61332},
												name: "OpPlus",
											},
											&ruleRefExpr{
												pos:  position{line: 2039, col: 36, offset: 61341},
												name: "OpMinus",
											},
											&ruleRefExpr{
												pos:  position{line: 2039, col: 46, offset: 61351},
												name: "OpMul",
											},
											&ruleRefExpr{
												pos:  position{line: 2039, col: 54, offset: 61359},
												name: "OpDiv",
											},
											&ruleRefExpr{
												pos:  position{line: 2039, col: 62, offset: 61367},
												name: "EVAL_CONCAT",
											},
											&litMatcher{
												pos:        position{line: 2039, col: 76, offset: 61381},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2047, col: 3, offset: 61531},
						run: (*parser).callonStringExpr26,
						expr: &labeledExpr{
							pos:   position{line: 2047, col: 3, offset: 61531},
							label: "concat",
							expr: &ruleRefExpr{
								pos:  position{line: 2047, col: 10, offset: 61538},
								name: "ConcatExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "ConcatExpr",
			pos:  position{line: 2057, col: 1, offset: 61744},
			expr: &actionExpr{
				pos: position{line: 2057, col: 15, offset: 61758},
				run: (*parser).callonConcatExpr1,
				expr: &seqExpr{
					pos: position{line: 2057, col: 15, offset: 61758},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2057, col: 15, offset: 61758},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2057, col: 21, offset: 61764},
								name: "ConcatAtom",
							},
						},
						&labeledExpr{
							pos:   position{line: 2057, col: 32, offset: 61775},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2057, col: 37, offset: 61780},
								expr: &seqExpr{
									pos: position{line: 2057, col: 38, offset: 61781},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 2057, col: 38, offset: 61781},
											name: "EVAL_CONCAT",
										},
										&ruleRefExpr{
											pos:  position{line: 2057, col: 50, offset: 61793},
											name: "ConcatAtom",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2057, col: 63, offset: 61806},
							expr: &choiceExpr{
								pos: position{line: 2057, col: 65, offset: 61808},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 2057, col: 65, offset: 61808},
										name: "OpPlus",
									},
									&ruleRefExpr{
										pos:  position{line: 2057, col: 74, offset: 61817},
										name: "OpMinus",
									},
									&ruleRefExpr{
										pos:  position{line: 2057, col: 84, offset: 61827},
										name: "OpMul",
									},
									&ruleRefExpr{
										pos:  position{line: 2057, col: 92, offset: 61835},
										name: "OpDiv",
									},
									&litMatcher{
										pos:        position{line: 2057, col: 100, offset: 61843},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcatAtom",
			pos:  position{line: 2075, col: 1, offset: 62249},
			expr: &choiceExpr{
				pos: position{line: 2075, col: 15, offset: 62263},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2075, col: 15, offset: 62263},
						run: (*parser).callonConcatAtom2,
						expr: &labeledExpr{
							pos:   position{line: 2075, col: 15, offset: 62263},
							label: "text",
							expr: &ruleRefExpr{
								pos:  position{line: 2075, col: 20, offset: 62268},
								name: "TextExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2084, col: 3, offset: 62432},
						run: (*parser).callonConcatAtom5,
						expr: &labeledExpr{
							pos:   position{line: 2084, col: 3, offset: 62432},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 2084, col: 7, offset: 62436},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2092, col: 3, offset: 62575},
						run: (*parser).callonConcatAtom8,
						expr: &labeledExpr{
							pos:   position{line: 2092, col: 3, offset: 62575},
							label: "number",
							expr: &ruleRefExpr{
								pos:  position{line: 2092, col: 10, offset: 62582},
								name: "NumberAsString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2100, col: 3, offset: 62721},
						run: (*parser).callonConcatAtom11,
						expr: &labeledExpr{
							pos:   position{line: 2100, col: 3, offset: 62721},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 2100, col: 9, offset: 62727},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExpr",
			pos:  position{line: 2110, col: 1, offset: 62896},
			expr: &actionExpr{
				pos: position{line: 2110, col: 16, offset: 62911},
				run: (*parser).callonNumericExpr1,
				expr: &seqExpr{
					pos: position{line: 2110, col: 16, offset: 62911},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2110, col: 16, offset: 62911},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 2110, col: 21, offset: 62916},
								name: "NumericExprLevel3",
							},
						},
						&notExpr{
							pos: position{line: 2110, col: 39, offset: 62934},
							expr: &choiceExpr{
								pos: position{line: 2110, col: 41, offset: 62936},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 2110, col: 41, offset: 62936},
										name: "EVAL_CONCAT",
									},
									&litMatcher{
										pos:        position{line: 2110, col: 55, offset: 62950},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel3",
			pos:  position{line: 2115, col: 1, offset: 63015},
			expr: &actionExpr{
				pos: position{line: 2115, col: 22, offset: 63036},
				run: (*parser).callonNumericExprLevel31,
				expr: &seqExpr{
					pos: position{line: 2115, col: 22, offset: 63036},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2115, col: 22, offset: 63036},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2115, col: 28, offset: 63042},
								name: "NumericExprLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 2115, col: 46, offset: 63060},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2115, col: 51, offset: 63065},
								expr: &seqExpr{
									pos: position{line: 2115, col: 52, offset: 63066},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 2115, col: 53, offset: 63067},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 2115, col: 53, offset: 63067},
													name: "OpPlus",
												},
												&ruleRefExpr{
													pos:  position{line: 2115, col: 62, offset: 63076},
													name: "OpMinus",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2115, col: 71, offset: 63085},
											name: "NumericExprLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel2",
			pos:  position{line: 2136, col: 1, offset: 63586},
			expr: &actionExpr{
				pos: position{line: 2136, col: 22, offset: 63607},
				run: (*parser).callonNumericExprLevel21,
				expr: &seqExpr{
					pos: position{line: 2136, col: 22, offset: 63607},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2136, col: 22, offset: 63607},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2136, col: 28, offset: 63613},
								name: "NumericExprLevel1",
							},
						},
						&labeledExpr{
							pos:   position{line: 2136, col: 46, offset: 63631},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2136, col: 51, offset: 63636},
								expr: &seqExpr{
									pos: position{line: 2136, col: 52, offset: 63637},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 2136, col: 53, offset: 63638},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 2136, col: 53, offset: 63638},
													name: "OpMul",
												},
												&ruleRefExpr{
													pos:  position{line: 2136, col: 61, offset: 63646},
													name: "OpDiv",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2136, col: 68, offset: 63653},
											name: "NumericExprLevel1",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NumericParamExpr",
			pos:  position{line: 2156, col: 1, offset: 64122},
			expr: &actionExpr{
				pos: position{line: 2156, col: 21, offset: 64142},
				run: (*parser).callonNumericParamExpr1,
				expr: &seqExpr{
					pos: position{line: 2156, col: 21, offset: 64142},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2156, col: 21, offset: 64142},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 2156, col: 27, offset: 64148},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 2156, col: 32, offset: 64153},
								name: "NumericExprLevel3",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel1",
			pos:  position{line: 2166, col: 1, offset: 64397},
			expr: &choiceExpr{
				pos: position{line: 2166, col: 22, offset: 64418},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2166, col: 22, offset: 64418},
						run: (*parser).callonNumericExprLevel12,
						expr: &seqExpr{
							pos: position{line: 2166, col: 22, offset: 64418},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2166, col: 22, offset: 64418},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2166, col: 30, offset: 64426},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2166, col: 35, offset: 64431},
										name: "NumericExprLevel3",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2166, col: 53, offset: 64449},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2169, col: 3, offset: 64484},
						run: (*parser).callonNumericExprLevel18,
						expr: &labeledExpr{
							pos:   position{line: 2169, col: 3, offset: 64484},
							label: "numericEvalExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 2169, col: 20, offset: 64501},
								name: "NumericEvalExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2172, col: 3, offset: 64555},
						run: (*parser).callonNumericExprLevel111,
						expr: &labeledExpr{
							pos:   position{line: 2172, col: 3, offset: 64555},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 2172, col: 9, offset: 64561},
								name: "EvalFieldToRead",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2182, col: 3, offset: 64780},
						run: (*parser).callonNumericExprLevel114,
						expr: &labeledExpr{
							pos:   position{line: 2182, col: 3, offset: 64780},
							label: "number",
							expr: &ruleRefExpr{
								pos:  position{line: 2182, col: 10, offset: 64787},
								name: "NumberAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericEvalExpr",
			pos:  position{line: 2195, col: 1, offset: 65165},
			expr: &choiceExpr{
				pos: position{line: 2195, col: 20, offset: 65184},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2195, col: 20, offset: 65184},
						run: (*parser).callonNumericEvalExpr2,
						expr: &seqExpr{
							pos: position{line: 2195, col: 21, offset: 65185},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2195, col: 21, offset: 65185},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2195, col: 29, offset: 65193},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2195, col: 29, offset: 65193},
												val:        "abs",
												ignoreCase: false,
												want:       "\"abs\"",
											},
											&litMatcher{
												pos:        position{line: 2195, col: 37, offset: 65201},
												val:        "ceil",
												ignoreCase: false,
												want:       "\"ceil\"",
											},
											&litMatcher{
												pos:        position{line: 2195, col: 46, offset: 65210},
												val:        "ceiling",
												ignoreCase: false,
												want:       "\"ceiling\"",
											},
											&litMatcher{
												pos:        position{line: 2195, col: 58, offset: 65222},
												val:        "sqrt",
												ignoreCase: false,
												want:       "\"sqrt\"",
											},
											&litMatcher{
												pos:        position{line: 2195, col: 67, offset: 65231},
												val:        "exact",
												ignoreCase: false,
												want:       "\"exact\"",
											},
											&litMatcher{
												pos:        position{line: 2195, col: 77, offset: 65241},
												val:        "exp",
												ignoreCase: false,
												want:       "\"exp\"",
											},
											&litMatcher{
												pos:        position{line: 2195, col: 85, offset: 65249},
												val:        "floor",
												ignoreCase: false,
												want:       "\"floor\"",
											},
											&litMatcher{
												pos:        position{line: 2195, col: 95, offset: 65259},
												val:        "ln",
												ignoreCase: false,
												want:       "\"ln\"",
											},
											&litMatcher{
												pos:        position{line: 2195, col: 102, offset: 65266},
												val:        "sigfig",
												ignoreCase: false,
												want:       "\"sigfig\"",
											},
											&litMatcher{
												pos:        position{line: 2195, col: 113, offset: 65277},
												val:        "acosh",
												ignoreCase: false,
												want:       "\"acosh\"",
											},
											&litMatcher{
												pos:        position{line: 2195, col: 123, offset: 65287},
												val:        "acos",
												ignoreCase: false,
												want:       "\"acos\"",
											},
											&litMatcher{
												pos:        position{line: 2195, col: 132, offset: 65296},
												val:        "asinh",
												ignoreCase: false,
												want:       "\"asinh\"",
											},
											&litMatcher{
												pos:        position{line: 2195, col: 142, offset: 65306},
												val:        "asin",
												ignoreCase: false,
												want:       "\"asin\"",
											},
											&litMatcher{
												pos:        position{line: 2195, col: 151, offset: 65315},
												val:        "atanh",
												ignoreCase: false,
												want:       "\"atanh\"",
											},
											&litMatcher{
												pos:        position{line: 2195, col: 161, offset: 65325},
												val:        "atan",
												ignoreCase: false,
												want:       "\"atan\"",
											},
											&litMatcher{
												pos:        position{line: 2195, col: 170, offset: 65334},
												val:        "cosh",
												ignoreCase: false,
												want:       "\"cosh\"",
											},
											&litMatcher{
												pos:        position{line: 2195, col: 179, offset: 65343},
												val:        "cos",
												ignoreCase: false,
												want:       "\"cos\"",
											},
											&litMatcher{
												pos:        position{line: 2195, col: 187, offset: 65351},
												val:        "sinh",
												ignoreCase: false,
												want:       "\"sinh\"",
											},
											&litMatcher{
												pos:        position{line: 2195, col: 196, offset: 65360},
												val:        "sin",
												ignoreCase: false,
												want:       "\"sin\"",
											},
											&litMatcher{
												pos:        position{line: 2195, col: 204, offset: 65368},
												val:        "tanh",
												ignoreCase: false,
												want:       "\"tanh\"",
											},
											&litMatcher{
												pos:        position{line: 2195, col: 213, offset: 65377},
												val:        "tan",
												ignoreCase: false,
												want:       "\"tan\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2195, col: 220, offset: 65384},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2195, col: 228, offset: 65392},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2195, col: 234, offset: 65398},
										name: "NumericExprLevel3",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2195, col: 253, offset: 65417},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2215, col: 3, offset: 65929},
						run: (*parser).callonNumericEvalExpr31,
						expr: &seqExpr{
							pos: position{line: 2215, col: 3, offset: 65929},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2215, col: 3, offset: 65929},
									label: "roundExpr",
									expr: &litMatcher{
										pos:        position{line: 2215, col: 13, offset: 65939},
										val:        "round",
										ignoreCase: false,
										want:       "\"round\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2215, col: 21, offset: 65947},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2215, col: 29, offset: 65955},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2215, col: 35, offset: 65961},
										name: "NumericExprLevel3",
									},
								},
								&labeledExpr{
									pos:   position{line: 2215, col: 54, offset: 65980},
									label: "roundPrecision",
									expr: &zeroOrOneExpr{
										pos: position{line: 2215, col: 69, offset: 65995},
										expr: &ruleRefExpr{
											pos:  position{line: 2215, col: 70, offset: 65996},
											name: "NumericParamExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2215, col: 89, offset: 66015},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2236, col: 3, offset: 66633},
						run: (*parser).callonNumericEvalExpr42,
						expr: &seqExpr{
							pos: position{line: 2236, col: 4, offset: 66634},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2236, col: 4, offset: 66634},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2236, col: 12, offset: 66642},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2236, col: 12, offset: 66642},
												val:        "now",
												ignoreCase: false,
												want:       "\"now\"",
											},
											&litMatcher{
												pos:        position{line: 2236, col: 20, offset: 66650},
												val:        "pi",
												ignoreCase: false,
												want:       "\"pi\"",
											},
											&litMatcher{
												pos:        position{line: 2236, col: 27, offset: 66657},
												val:        "random",
												ignoreCase: false,
												want:       "\"random\"",
											},
											&litMatcher{
												pos:        position{line: 2236, col: 38, offset: 66668},
												val:        "time",
												ignoreCase: false,
												want:       "\"time\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2236, col: 46, offset: 66676},
									name: "L_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2236, col: 54, offset: 66684},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2249, col: 3, offset: 66970},
						run: (*parser).callonNumericEvalExpr52,
						expr: &seqExpr{
							pos: position{line: 2249, col: 3, offset: 66970},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2249, col: 3, offset: 66970},
									val:        "tonumber",
									ignoreCase: false,
									want:       "\"tonumber\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2249, col: 14, offset: 66981},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2249, col: 22, offset: 66989},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2249, col: 33, offset: 67000},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2249, col: 44, offset: 67011},
									label: "baseExpr",
									expr: &zeroOrOneExpr{
										pos: position{line: 2249, col: 53, offset: 67020},
										expr: &seqExpr{
											pos: position{line: 2249, col: 54, offset: 67021},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2249, col: 54, offset: 67021},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2249, col: 60, offset: 67027},
													name: "NumericExprLevel3",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2249, col: 80, offset: 67047},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2277, col: 3, offset: 67889},
						run: (*parser).callonNumericEvalExpr64,
						expr: &seqExpr{
							pos: position{line: 2277, col: 3, offset: 67889},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2277, col: 3, offset: 67889},
									label: "lenExpr",
									expr: &litMatcher{
										pos:        position{line: 2277, col: 12, offset: 67898},
										val:        "len",
										ignoreCase: false,
										want:       "\"len\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2277, col: 18, offset: 67904},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2277, col: 26, offset: 67912},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2277, col: 31, offset: 67917},
										name: "LenExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2277, col: 39, offset: 67925},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2280, col: 3, offset: 67960},
						run: (*parser).callonNumericEvalExpr72,
						expr: &seqExpr{
							pos: position{line: 2280, col: 4, offset: 67961},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2280, col: 4, offset: 67961},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2280, col: 12, offset: 67969},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2280, col: 12, offset: 67969},
												val:        "pow",
												ignoreCase: false,
												want:       "\"pow\"",
											},
											&litMatcher{
												pos:        position{line: 2280, col: 20, offset: 67977},
												val:        "atan2",
												ignoreCase: false,
												want:       "\"atan2\"",
											},
											&litMatcher{
												pos:        position{line: 2280, col: 30, offset: 67987},
												val:        "hypot",
												ignoreCase: false,
												want:       "\"hypot\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2280, col: 39, offset: 67996},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2280, col: 47, offset: 68004},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2280, col: 53, offset: 68010},
										name: "NumericExprLevel3",
									},
								},
								&labeledExpr{
									pos:   position{line: 2280, col: 72, offset: 68029},
									label: "param",
									expr: &ruleRefExpr{
										pos:  position{line: 2280, col: 79, offset: 68036},
										name: "NumericParamExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2280, col: 97, offset: 68054},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2310, col: 3, offset: 68893},
						run: (*parser).callonNumericEvalExpr85,
						expr: &seqExpr{
							pos: position{line: 2310, col: 4, offset: 68894},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2310, col: 4, offset: 68894},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2310, col: 11, offset: 68901},
										val:        "log",
										ignoreCase: false,
										want:       "\"log\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2310, col: 17, offset: 68907},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2310, col: 25, offset: 68915},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2310, col: 31, offset: 68921},
										name: "NumericExprLevel3",
									},
								},
								&labeledExpr{
									pos:   position{line: 2310, col: 50, offset: 68940},
									label: "param",
									expr: &zeroOrOneExpr{
										pos: position{line: 2310, col: 56, offset: 68946},
										expr: &ruleRefExpr{
											pos:  position{line: 2310, col: 57, offset: 68947},
											name: "NumericParamExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2310, col: 76, offset: 68966},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2339, col: 3, offset: 69739},
						run: (*parser).callonNumericEvalExpr96,
						expr: &seqExpr{
							pos: position{line: 2339, col: 3, offset: 69739},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2339, col: 3, offset: 69739},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2339, col: 11, offset: 69747},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2339, col: 11, offset: 69747},
												val:        "relative_time",
												ignoreCase: false,
												want:       "\"relative_time\"",
											},
											&litMatcher{
												pos:        position{line: 2339, col: 29, offset: 69765},
												val:        "strftime",
												ignoreCase: false,
												want:       "\"strftime\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2339, col: 41, offset: 69777},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2339, col: 49, offset: 69785},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2339, col: 55, offset: 69791},
										name: "NumericExprLevel3",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2339, col: 74, offset: 69810},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2339, col: 80, offset: 69816},
									label: "specifier",
									expr: &ruleRefExpr{
										pos:  position{line: 2339, col: 90, offset: 69826},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2339, col: 101, offset: 69837},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LenExpr",
			pos:  position{line: 2352, col: 1, offset: 70214},
			expr: &choiceExpr{
				pos: position{line: 2352, col: 12, offset: 70225},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2352, col: 12, offset: 70225},
						run: (*parser).callonLenExpr2,
						expr: &seqExpr{
							pos: position{line: 2352, col: 12, offset: 70225},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2352, col: 12, offset: 70225},
									label: "str",
									expr: &ruleRefExpr{
										pos:  position{line: 2352, col: 16, offset: 70229},
										name: "QuotedString",
									},
								},
								&notExpr{
									pos: position{line: 2352, col: 29, offset: 70242},
									expr: &ruleRefExpr{
										pos:  position{line: 2352, col: 31, offset: 70244},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2368, col: 3, offset: 70605},
						run: (*parser).callonLenExpr8,
						expr: &seqExpr{
							pos: position{line: 2368, col: 3, offset: 70605},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2368, col: 3, offset: 70605},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2368, col: 9, offset: 70611},
										name: "EvalFieldToRead",
									},
								},
								&notExpr{
									pos: position{line: 2368, col: 25, offset: 70627},
									expr: &choiceExpr{
										pos: position{line: 2368, col: 27, offset: 70629},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2368, col: 27, offset: 70629},
												name: "OpPlus",
											},
											&ruleRefExpr{
												pos:  position{line: 2368, col: 36, offset: 70638},
												name: "OpMinus",
											},
											&ruleRefExpr{
												pos:  position{line: 2368, col: 46, offset: 70648},
												name: "OpMul",
											},
											&ruleRefExpr{
												pos:  position{line: 2368, col: 54, offset: 70656},
												name: "OpDiv",
											},
											&ruleRefExpr{
												pos:  position{line: 2368, col: 62, offset: 70664},
												name: "EVAL_CONCAT",
											},
											&litMatcher{
												pos:        position{line: 2368, col: 76, offset: 70678},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HeadBlock",
			pos:  position{line: 2386, col: 1, offset: 71066},
			expr: &choiceExpr{
				pos: position{line: 2386, col: 14, offset: 71079},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2386, col: 14, offset: 71079},
						run: (*parser).callonHeadBlock2,
						expr: &seqExpr{
							pos: position{line: 2386, col: 14, offset: 71079},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2386, col: 14, offset: 71079},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 2386, col: 19, offset: 71084},
									name: "CMD_HEAD",
								},
								&zeroOrOneExpr{
									pos: position{line: 2386, col: 28, offset: 71093},
									expr: &seqExpr{
										pos: position{line: 2386, col: 29, offset: 71094},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 2386, col: 29, offset: 71094},
												val:        "limit",
												ignoreCase: false,
												want:       "\"limit\"",
											},
											&ruleRefExpr{
												pos:  position{line: 2386, col: 37, offset: 71102},
												name: "EQUAL",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2386, col: 45, offset: 71110},
									label: "intAsStr",
									expr: &ruleRefExpr{
										pos:  position{line: 2386, col: 54, offset: 71119},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2401, col: 3, offset: 71535},
						run: (*parser).callonHeadBlock12,
						expr: &seqExpr{
							pos: position{line: 2401, col: 3, offset: 71535},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2401, col: 3, offset: 71535},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 2401, col: 8, offset: 71540},
									name: "CMD_HEAD_NO_SPACE",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggregationList",
			pos:  position{line: 2414, col: 1, offset: 71990},
			expr: &actionExpr{
				pos: position{line: 2414, col: 20, offset: 72009},
				run: (*parser).callonAggregationList1,
				expr: &seqExpr{
					pos: position{line: 2414, col: 20, offset: 72009},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2414, col: 20, offset: 72009},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2414, col: 26, offset: 72015},
								name: "Aggregator",
							},
						},
						&labeledExpr{
							pos:   position{line: 2414, col: 37, offset: 72026},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2414, col: 42, offset: 72031},
								expr: &seqExpr{
									pos: position{line: 2414, col: 43, offset: 72032},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 2414, col: 44, offset: 72033},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 2414, col: 44, offset: 72033},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2414, col: 52, offset: 72041},
													name: "SPACE",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2414, col: 59, offset: 72048},
											name: "Aggregator",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Aggregator",
			pos:  position{line: 2431, col: 1, offset: 72551},
			expr: &actionExpr{
				pos: position{line: 2431, col: 15, offset: 72565},
				run: (*parser).callonAggregator1,
				expr: &seqExpr{
					pos: position{line: 2431, col: 15, offset: 72565},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2431, col: 15, offset: 72565},
							label: "aggFunc",
							expr: &ruleRefExpr{
								pos:  position{line: 2431, col: 23, offset: 72573},
								name: "AggFunction",
							},
						},
						&labeledExpr{
							pos:   position{line: 2431, col: 35, offset: 72585},
							label: "asField",
							expr: &zeroOrOneExpr{
								pos: position{line: 2431, col: 43, offset: 72593},
								expr: &ruleRefExpr{
									pos:  position{line: 2431, col: 43, offset: 72593},
									name: "AsField",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggFunction",
			pos:  position{line: 2447, col: 1, offset: 73434},
			expr: &actionExpr{
				pos: position{line: 2447, col: 16, offset: 73449},
				run: (*parser).callonAggFunction1,
				expr: &labeledExpr{
					pos:   position{line: 2447, col: 16, offset: 73449},
					label: "agg",
					expr: &choiceExpr{
						pos: position{line: 2447, col: 21, offset: 73454},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 2447, col: 21, offset: 73454},
								name: "AggCount",
							},
							&ruleRefExpr{
								pos:  position{line: 2447, col: 32, offset: 73465},
								name: "AggDistinctCount",
							},
							&ruleRefExpr{
								pos:  position{line: 2447, col: 51, offset: 73484},
								name: "AggAvg",
							},
							&ruleRefExpr{
								pos:  position{line: 2447, col: 60, offset: 73493},
								name: "AggMin",
							},
							&ruleRefExpr{
								pos:  position{line: 2447, col: 69, offset: 73502},
								name: "AggMax",
							},
							&ruleRefExpr{
								pos:  position{line: 2447, col: 78, offset: 73511},
								name: "AggRange",
							},
							&ruleRefExpr{
								pos:  position{line: 2447, col: 89, offset: 73522},
								name: "AggSum",
							},
							&ruleRefExpr{
								pos:  position{line: 2447, col: 98, offset: 73531},
								name: "AggValues",
							},
							&ruleRefExpr{
								pos:  position{line: 2447, col: 110, offset: 73543},
								name: "AggEstdc",
							},
							&ruleRefExpr{
								pos:  position{line: 2447, col: 121, offset: 73554},
								name: "AggEstdcError",
							},
							&ruleRefExpr{
								pos:  position{line: 2447, col: 137, offset: 73570},
								name: "AggExactPerc",
							},
							&ruleRefExpr{
								pos:  position{line: 2447, col: 152, offset: 73585},
								name: "AggMedian",
							},
							&ruleRefExpr{
								pos:  position{line: 2447, col: 164, offset: 73597},
								name: "AggMode",
							},
							&ruleRefExpr{
								pos:  position{line: 2447, col: 174, offset: 73607},
								name: "AggPerc",
							},
							&ruleRefExpr{
								pos:  position{line: 2448, col: 1, offset: 73617},
								name: "AggStdev",
							},
							&ruleRefExpr{
								pos:  position{line: 2448, col: 12, offset: 73628},
								name: "AggStdevp",
							},
							&ruleRefExpr{
								pos:  position{line: 2448, col: 24, offset: 73640},
								name: "AggSumsq",
							},
							&ruleRefExpr{
								pos:  position{line: 2448, col: 35, offset: 73651},
								name: "AggUpperPerc",
							},
							&ruleRefExpr{
								pos:  position{line: 2448, col: 50, offset: 73666},
								name: "AggVar",
							},
							&ruleRefExpr{
								pos:  position{line: 2448, col: 59, offset: 73675},
								name: "AggVarp",
							},
							&ruleRefExpr{
								pos:  position{line: 2448, col: 69, offset: 73685},
								name: "AggFirst",
							},
							&ruleRefExpr{
								pos:  position{line: 2448, col: 80, offset: 73696},
								name: "AggLast",
							},
							&ruleRefExpr{
								pos:  position{line: 2448, col: 90, offset: 73706},
								name: "AggList",
							},
							&ruleRefExpr{
								pos:  position{line: 2448, col: 100, offset: 73716},
								name: "AggEarliest",
							},
							&ruleRefExpr{
								pos:  position{line: 2448, col: 114, offset: 73730},
								name: "AggEarliestTime",
							},
							&ruleRefExpr{
								pos:  position{line: 2448, col: 132, offset: 73748},
								name: "AggLatest",
							},
							&ruleRefExpr{
								pos:  position{line: 2448, col: 144, offset: 73760},
								name: "AggLatestTime",
							},
							&ruleRefExpr{
								pos:  position{line: 2448, col: 160, offset: 73776},
								name: "AggRate",
							},
						},
					},
				},
			},
		},
		{
			name: "AsField",
			pos:  position{line: 2452, col: 1, offset: 73810},
			expr: &actionExpr{
				pos: position{line: 2452, col: 12, offset: 73821},
				run: (*parser).callonAsField1,
				expr: &seqExpr{
					pos: position{line: 2452, col: 12, offset: 73821},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2452, col: 12, offset: 73821},
							name: "AS",
						},
						&labeledExpr{
							pos:   position{line: 2452, col: 15, offset: 73824},
							label: "field",
							expr: &choiceExpr{
								pos: position{line: 2452, col: 23, offset: 73832},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 2452, col: 23, offset: 73832},
										name: "FieldName",
									},
									&ruleRefExpr{
										pos:  position{line: 2452, col: 35, offset: 73844},
										name: "String",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggCount",
			pos:  position{line: 2466, col: 1, offset: 74173},
			expr: &choiceExpr{
				pos: position{line: 2466, col: 13, offset: 74185},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2466, col: 13, offset: 74185},
						run: (*parser).callonAggCount2,
						expr: &seqExpr{
							pos: position{line: 2466, col: 13, offset: 74185},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 2466, col: 14, offset: 74186},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 2466, col: 14, offset: 74186},
											val:        "count",
											ignoreCase: false,
											want:       "\"count\"",
										},
										&litMatcher{
											pos:        position{line: 2466, col: 24, offset: 74196},
											val:        "c",
											ignoreCase: false,
											want:       "\"c\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2466, col: 29, offset: 74201},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2466, col: 37, offset: 74209},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 2466, col: 44, offset: 74216},
									label: "boolExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2466, col: 53, offset: 74225},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2466, col: 62, offset: 74234},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2481, col: 3, offset: 74584},
						run: (*parser).callonAggCount12,
						expr: &seqExpr{
							pos: position{line: 2481, col: 3, offset: 74584},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 2481, col: 4, offset: 74585},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 2481, col: 4, offset: 74585},
											val:        "count",
											ignoreCase: false,
											want:       "\"count\"",
										},
										&litMatcher{
											pos:        position{line: 2481, col: 14, offset: 74595},
											val:        "c",
											ignoreCase: false,
											want:       "\"c\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2481, col: 19, offset: 74600},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2481, col: 27, offset: 74608},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2481, col: 33, offset: 74614},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2481, col: 43, offset: 74624},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2488, col: 5, offset: 74775},
						run: (*parser).callonAggCount21,
						expr: &choiceExpr{
							pos: position{line: 2488, col: 6, offset: 74776},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 2488, col: 6, offset: 74776},
									val:        "count",
									ignoreCase: false,
									want:       "\"count\"",
								},
								&litMatcher{
									pos:        position{line: 2488, col: 16, offset: 74786},
									val:        "c",
									ignoreCase: false,
									want:       "\"c\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggDistinctCount",
			pos:  position{line: 2497, col: 1, offset: 74922},
			expr: &choiceExpr{
				pos: position{line: 2497, col: 21, offset: 74942},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2497, col: 21, offset: 74942},
						run: (*parser).callonAggDistinctCount2,
						expr: &seqExpr{
							pos: position{line: 2497, col: 21, offset: 74942},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 2497, col: 22, offset: 74943},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 2497, col: 22, offset: 74943},
											val:        "distinct_count",
											ignoreCase: false,
											want:       "\"distinct_count\"",
										},
										&litMatcher{
											pos:        position{line: 2497, col: 41, offset: 74962},
											val:        "dc",
											ignoreCase: false,
											want:       "\"dc\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2497, col: 47, offset: 74968},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2497, col: 55, offset: 74976},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 2497, col: 62, offset: 74983},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2497, col: 72, offset: 74993},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2497, col: 82, offset: 75003},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2507, col: 3, offset: 75237},
						run: (*parser).callonAggDistinctCount12,
						expr: &seqExpr{
							pos: position{line: 2507, col: 3, offset: 75237},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 2507, col: 4, offset: 75238},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 2507, col: 4, offset: 75238},
											val:        "distinct_count",
											ignoreCase: false,
											want:       "\"distinct_count\"",
										},
										&litMatcher{
											pos:        position{line: 2507, col: 23, offset: 75257},
											val:        "dc",
											ignoreCase: false,
											want:       "\"dc\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2507, col: 29, offset: 75263},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2507, col: 37, offset: 75271},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2507, col: 43, offset: 75277},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2507, col: 53, offset: 75287},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAvg",
			pos:  position{line: 2516, col: 1, offset: 75443},
			expr: &choiceExpr{
				pos: position{line: 2516, col: 11, offset: 75453},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2516, col: 11, offset: 75453},
						run: (*parser).callonAggAvg2,
						expr: &seqExpr{
							pos: position{line: 2516, col: 11, offset: 75453},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2516, col: 11, offset: 75453},
									val:        "avg",
									ignoreCase: false,
									want:       "\"avg\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2516, col: 17, offset: 75459},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2516, col: 25, offset: 75467},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2516, col: 32, offset: 75474},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2516, col: 40, offset: 75482},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2516, col: 59, offset: 75501},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2516, col: 78, offset: 75520},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2516, col: 86, offset: 75528},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2531, col: 3, offset: 75886},
						run: (*parser).callonAggAvg12,
						expr: &seqExpr{
							pos: position{line: 2531, col: 3, offset: 75886},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2531, col: 3, offset: 75886},
									val:        "avg",
									ignoreCase: false,
									want:       "\"avg\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2531, col: 9, offset: 75892},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2531, col: 17, offset: 75900},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2531, col: 23, offset: 75906},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2531, col: 33, offset: 75916},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMin",
			pos:  position{line: 2540, col: 1, offset: 76064},
			expr: &choiceExpr{
				pos: position{line: 2540, col: 11, offset: 76074},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2540, col: 11, offset: 76074},
						run: (*parser).callonAggMin2,
						expr: &seqExpr{
							pos: position{line: 2540, col: 11, offset: 76074},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2540, col: 11, offset: 76074},
									val:        "min",
									ignoreCase: false,
									want:       "\"min\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2540, col: 17, offset: 76080},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2540, col: 25, offset: 76088},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2540, col: 32, offset: 76095},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2540, col: 40, offset: 76103},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2540, col: 59, offset: 76122},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2540, col: 78, offset: 76141},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2540, col: 86, offset: 76149},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2555, col: 3, offset: 76507},
						run: (*parser).callonAggMin12,
						expr: &seqExpr{
							pos: position{line: 2555, col: 3, offset: 76507},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2555, col: 3, offset: 76507},
									val:        "min",
									ignoreCase: false,
									want:       "\"min\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2555, col: 9, offset: 76513},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2555, col: 17, offset: 76521},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2555, col: 23, offset: 76527},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2555, col: 33, offset: 76537},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMax",
			pos:  position{line: 2564, col: 1, offset: 76685},
			expr: &choiceExpr{
				pos: position{line: 2564, col: 11, offset: 76695},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2564, col: 11, offset: 76695},
						run: (*parser).callonAggMax2,
						expr: &seqExpr{
							pos: position{line: 2564, col: 11, offset: 76695},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2564, col: 11, offset: 76695},
									val:        "max",
									ignoreCase: false,
									want:       "\"max\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2564, col: 17, offset: 76701},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2564, col: 25, offset: 76709},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2564, col: 32, offset: 76716},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2564, col: 41, offset: 76725},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2564, col: 60, offset: 76744},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2564, col: 79, offset: 76763},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2564, col: 87, offset: 76771},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2579, col: 3, offset: 77129},
						run: (*parser).callonAggMax12,
						expr: &seqExpr{
							pos: position{line: 2579, col: 3, offset: 77129},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2579, col: 3, offset: 77129},
									val:        "max",
									ignoreCase: false,
									want:       "\"max\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2579, col: 9, offset: 77135},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2579, col: 17, offset: 77143},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2579, col: 23, offset: 77149},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2579, col: 33, offset: 77159},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggRange",
			pos:  position{line: 2588, col: 1, offset: 77307},
			expr: &choiceExpr{
				pos: position{line: 2588, col: 13, offset: 77319},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2588, col: 13, offset: 77319},
						run: (*parser).callonAggRange2,
						expr: &seqExpr{
							pos: position{line: 2588, col: 13, offset: 77319},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2588, col: 13, offset: 77319},
									val:        "range",
									ignoreCase: false,
									want:       "\"range\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2588, col: 21, offset: 77327},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2588, col: 29, offset: 77335},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2588, col: 36, offset: 77342},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2588, col: 44, offset: 77350},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2588, col: 63, offset: 77369},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2588, col: 82, offset: 77388},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2588, col: 90, offset: 77396},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2603, col: 3, offset: 77756},
						run: (*parser).callonAggRange12,
						expr: &seqExpr{
							pos: position{line: 2603, col: 3, offset: 77756},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2603, col: 3, offset: 77756},
									val:        "range",
									ignoreCase: false,
									want:       "\"range\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2603, col: 11, offset: 77764},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2603, col: 19, offset: 77772},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2603, col: 25, offset: 77778},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2603, col: 35, offset: 77788},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggSum",
			pos:  position{line: 2612, col: 1, offset: 77938},
			expr: &choiceExpr{
				pos: position{line: 2612, col: 11, offset: 77948},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2612, col: 11, offset: 77948},
						run: (*parser).callonAggSum2,
						expr: &seqExpr{
							pos: position{line: 2612, col: 11, offset: 77948},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2612, col: 11, offset: 77948},
									val:        "sum",
									ignoreCase: false,
									want:       "\"sum\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2612, col: 17, offset: 77954},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2612, col: 25, offset: 77962},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2612, col: 32, offset: 77969},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2612, col: 40, offset: 77977},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2612, col: 59, offset: 77996},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2612, col: 78, offset: 78015},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2612, col: 86, offset: 78023},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2627, col: 3, offset: 78381},
						run: (*parser).callonAggSum12,
						expr: &seqExpr{
							pos: position{line: 2627, col: 3, offset: 78381},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2627, col: 3, offset: 78381},
									val:        "sum",
									ignoreCase: false,
									want:       "\"sum\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2627, col: 9, offset: 78387},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2627, col: 17, offset: 78395},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2627, col: 23, offset: 78401},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2627, col: 33, offset: 78411},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggEstdc",
			pos:  position{line: 2637, col: 1, offset: 78599},
			expr: &choiceExpr{
				pos: position{line: 2637, col: 13, offset: 78611},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2637, col: 13, offset: 78611},
						run: (*parser).callonAggEstdc2,
						expr: &seqExpr{
							pos: position{line: 2637, col: 13, offset: 78611},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2637, col: 13, offset: 78611},
									val:        "estdc",
									ignoreCase: false,
									want:       "\"estdc\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2637, col: 21, offset: 78619},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2637, col: 29, offset: 78627},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2637, col: 36, offset: 78634},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2637, col: 44, offset: 78642},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2637, col: 63, offset: 78661},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2637, col: 82, offset: 78680},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2637, col: 90, offset: 78688},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2652, col: 3, offset: 79048},
						run: (*parser).callonAggEstdc12,
						expr: &seqExpr{
							pos: position{line: 2652, col: 3, offset: 79048},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2652, col: 3, offset: 79048},
									val:        "estdc",
									ignoreCase: false,
									want:       "\"estdc\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2652, col: 11, offset: 79056},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2652, col: 19, offset: 79064},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2652, col: 25, offset: 79070},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2652, col: 35, offset: 79080},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggEstdcError",
			pos:  position{line: 2662, col: 1, offset: 79270},
			expr: &choiceExpr{
				pos: position{line: 2662, col: 18, offset: 79287},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2662, col: 18, offset: 79287},
						run: (*parser).callonAggEstdcError2,
						expr: &seqExpr{
							pos: position{line: 2662, col: 18, offset: 79287},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2662, col: 18, offset: 79287},
									val:        "estdc_error",
									ignoreCase: false,
									want:       "\"estdc_error\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2662, col: 32, offset: 79301},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2662, col: 40, offset: 79309},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2662, col: 47, offset: 79316},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2662, col: 55, offset: 79324},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2662, col: 74, offset: 79343},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2662, col: 93, offset: 79362},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2662, col: 101, offset: 79370},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2677, col: 3, offset: 79735},
						run: (*parser).callonAggEstdcError12,
						expr: &seqExpr{
							pos: position{line: 2677, col: 3, offset: 79735},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2677, col: 3, offset: 79735},
									val:        "estdc_error",
									ignoreCase: false,
									want:       "\"estdc_error\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2677, col: 17, offset: 79749},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2677, col: 25, offset: 79757},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2677, col: 31, offset: 79763},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2677, col: 41, offset: 79773},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggExactPerc",
			pos:  position{line: 2687, col: 1, offset: 79968},
			expr: &choiceExpr{
				pos: position{line: 2687, col: 17, offset: 79984},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2687, col: 17, offset: 79984},
						run: (*parser).callonAggExactPerc2,
						expr: &seqExpr{
							pos: position{line: 2687, col: 17, offset: 79984},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2687, col: 17, offset: 79984},
									val:        "exactperc",
									ignoreCase: false,
									want:       "\"exactperc\"",
								},
								&labeledExpr{
									pos:   position{line: 2687, col: 29, offset: 79996},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 2687, col: 37, offset: 80004},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2687, col: 37, offset: 80004},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 2687, col: 53, offset: 80020},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2687, col: 70, offset: 80037},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2687, col: 78, offset: 80045},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2687, col: 85, offset: 80052},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2687, col: 93, offset: 80060},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2687, col: 112, offset: 80079},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2687, col: 131, offset: 80098},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2687, col: 139, offset: 80106},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2703, col: 3, offset: 80502},
						run: (*parser).callonAggExactPerc16,
						expr: &seqExpr{
							pos: position{line: 2703, col: 3, offset: 80502},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2703, col: 3, offset: 80502},
									val:        "exactperc",
									ignoreCase: false,
									want:       "\"exactperc\"",
								},
								&labeledExpr{
									pos:   position{line: 2703, col: 15, offset: 80514},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 2703, col: 23, offset: 80522},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2703, col: 23, offset: 80522},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 2703, col: 39, offset: 80538},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2703, col: 56, offset: 80555},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2703, col: 64, offset: 80563},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2703, col: 70, offset: 80569},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2703, col: 80, offset: 80579},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggPerc",
			pos:  position{line: 2714, col: 1, offset: 80805},
			expr: &choiceExpr{
				pos: position{line: 2714, col: 12, offset: 80816},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2714, col: 12, offset: 80816},
						run: (*parser).callonAggPerc2,
						expr: &seqExpr{
							pos: position{line: 2714, col: 12, offset: 80816},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2714, col: 12, offset: 80816},
									val:        "perc",
									ignoreCase: false,
									want:       "\"perc\"",
								},
								&labeledExpr{
									pos:   position{line: 2714, col: 19, offset: 80823},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 2714, col: 27, offset: 80831},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2714, col: 27, offset: 80831},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 2714, col: 43, offset: 80847},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2714, col: 60, offset: 80864},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2714, col: 68, offset: 80872},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2714, col: 75, offset: 80879},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2714, col: 83, offset: 80887},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2714, col: 102, offset: 80906},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2714, col: 121, offset: 80925},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2714, col: 129, offset: 80933},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2730, col: 3, offset: 81324},
						run: (*parser).callonAggPerc16,
						expr: &seqExpr{
							pos: position{line: 2730, col: 3, offset: 81324},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2730, col: 3, offset: 81324},
									val:        "perc",
									ignoreCase: false,
									want:       "\"perc\"",
								},
								&labeledExpr{
									pos:   position{line: 2730, col: 10, offset: 81331},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 2730, col: 18, offset: 81339},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2730, col: 18, offset: 81339},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 2730, col: 34, offset: 81355},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2730, col: 51, offset: 81372},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2730, col: 59, offset: 81380},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2730, col: 65, offset: 81386},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2730, col: 75, offset: 81396},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggUpperPerc",
			pos:  position{line: 2741, col: 1, offset: 81617},
			expr: &choiceExpr{
				pos: position{line: 2741, col: 17, offset: 81633},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2741, col: 17, offset: 81633},
						run: (*parser).callonAggUpperPerc2,
						expr: &seqExpr{
							pos: position{line: 2741, col: 17, offset: 81633},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2741, col: 17, offset: 81633},
									val:        "upperperc",
									ignoreCase: false,
									want:       "\"upperperc\"",
								},
								&labeledExpr{
									pos:   position{line: 2741, col: 29, offset: 81645},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 2741, col: 37, offset: 81653},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2741, col: 37, offset: 81653},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 2741, col: 53, offset: 81669},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2741, col: 70, offset: 81686},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2741, col: 78, offset: 81694},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2741, col: 85, offset: 81701},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2741, col: 93, offset: 81709},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2741, col: 112, offset: 81728},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2741, col: 131, offset: 81747},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2741, col: 139, offset: 81755},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2757, col: 3, offset: 82151},
						run: (*parser).callonAggUpperPerc16,
						expr: &seqExpr{
							pos: position{line: 2757, col: 3, offset: 82151},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2757, col: 3, offset: 82151},
									val:        "upperperc",
									ignoreCase: false,
									want:       "\"upperperc\"",
								},
								&labeledExpr{
									pos:   position{line: 2757, col: 15, offset: 82163},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 2757, col: 23, offset: 82171},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2757, col: 23, offset: 82171},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 2757, col: 39, offset: 82187},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2757, col: 56, offset: 82204},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2757, col: 64, offset: 82212},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2757, col: 70, offset: 82218},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2757, col: 80, offset: 82228},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMedian",
			pos:  position{line: 2768, col: 1, offset: 82454},
			expr: &choiceExpr{
				pos: position{line: 2768, col: 14, offset: 82467},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2768, col: 14, offset: 82467},
						run: (*parser).callonAggMedian2,
						expr: &seqExpr{
							pos: position{line: 2768, col: 14, offset: 82467},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2768, col: 14, offset: 82467},
									val:        "median",
									ignoreCase: false,
									want:       "\"median\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2768, col: 23, offset: 82476},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2768, col: 31, offset: 82484},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2768, col: 38, offset: 82491},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2768, col: 46, offset: 82499},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2768, col: 65, offset: 82518},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2768, col: 84, offset: 82537},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2768, col: 92, offset: 82545},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2783, col: 3, offset: 82906},
						run: (*parser).callonAggMedian12,
						expr: &seqExpr{
							pos: position{line: 2783, col: 3, offset: 82906},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2783, col: 3, offset: 82906},
									val:        "median",
									ignoreCase: false,
									want:       "\"median\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2783, col: 12, offset: 82915},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2783, col: 20, offset: 82923},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2783, col: 26, offset: 82929},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2783, col: 36, offset: 82939},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMode",
			pos:  position{line: 2793, col: 1, offset: 83130},
			expr: &choiceExpr{
				pos: position{line: 2793, col: 12, offset: 83141},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2793, col: 12, offset: 83141},
						run: (*parser).callonAggMode2,
						expr: &seqExpr{
							pos: position{line: 2793, col: 12, offset: 83141},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2793, col: 12, offset: 83141},
									val:        "mode",
									ignoreCase: false,
									want:       "\"mode\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2793, col: 19, offset: 83148},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2793, col: 27, offset: 83156},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2793, col: 34, offset: 83163},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2793, col: 42, offset: 83171},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2793, col: 61, offset: 83190},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2793, col: 80, offset: 83209},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2793, col: 88, offset: 83217},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2808, col: 3, offset: 83576},
						run: (*parser).callonAggMode12,
						expr: &seqExpr{
							pos: position{line: 2808, col: 3, offset: 83576},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2808, col: 3, offset: 83576},
									val:        "mode",
									ignoreCase: false,
									want:       "\"mode\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2808, col: 10, offset: 83583},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2808, col: 18, offset: 83591},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2808, col: 24, offset: 83597},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2808, col: 34, offset: 83607},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggStdev",
			pos:  position{line: 2818, col: 1, offset: 83796},
			expr: &choiceExpr{
				pos: position{line: 2818, col: 13, offset: 83808},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2818, col: 13, offset: 83808},
						run: (*parser).callonAggStdev2,
						expr: &seqExpr{
							pos: position{line: 2818, col: 13, offset: 83808},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2818, col: 13, offset: 83808},
									val:        "stdev",
									ignoreCase: false,
									want:       "\"stdev\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2818, col: 21, offset: 83816},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2818, col: 29, offset: 83824},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2818, col: 36, offset: 83831},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2818, col: 44, offset: 83839},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2818, col: 63, offset: 83858},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2818, col: 82, offset: 83877},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2818, col: 90, offset: 83885},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2833, col: 3, offset: 84245},
						run: (*parser).callonAggStdev12,
						expr: &seqExpr{
							pos: position{line: 2833, col: 3, offset: 84245},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2833, col: 3, offset: 84245},
									val:        "stdev",
									ignoreCase: false,
									want:       "\"stdev\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2833, col: 11, offset: 84253},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2833, col: 19, offset: 84261},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2833, col: 25, offset: 84267},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2833, col: 35, offset: 84277},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggStdevp",
			pos:  position{line: 2843, col: 1, offset: 84467},
			expr: &choiceExpr{
				pos: position{line: 2843, col: 14, offset: 84480},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2843, col: 14, offset: 84480},
						run: (*parser).callonAggStdevp2,
						expr: &seqExpr{
							pos: position{line: 2843, col: 14, offset: 84480},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2843, col: 14, offset: 84480},
									val:        "stdevp",
									ignoreCase: false,
									want:       "\"stdevp\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2843, col: 23, offset: 84489},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2843, col: 31, offset: 84497},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2843, col: 38, offset: 84504},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2843, col: 46, offset: 84512},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2843, col: 65, offset: 84531},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2843, col: 84, offset: 84550},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2843, col: 92, offset: 84558},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2858, col: 3, offset: 84919},
						run: (*parser).callonAggStdevp12,
						expr: &seqExpr{
							pos: position{line: 2858, col: 3, offset: 84919},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2858, col: 3, offset: 84919},
									val:        "stdevp",
									ignoreCase: false,
									want:       "\"stdevp\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2858, col: 12, offset: 84928},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2858, col: 20, offset: 84936},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2858, col: 26, offset: 84942},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2858, col: 36, offset: 84952},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggSumsq",
			pos:  position{line: 2868, col: 1, offset: 85143},
			expr: &choiceExpr{
				pos: position{line: 2868, col: 13, offset: 85155},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2868, col: 13, offset: 85155},
						run: (*parser).callonAggSumsq2,
						expr: &seqExpr{
							pos: position{line: 2868, col: 13, offset: 85155},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2868, col: 13, offset: 85155},
									val:        "sumsq",
									ignoreCase: false,
									want:       "\"sumsq\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2868, col: 21, offset: 85163},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2868, col: 29, offset: 85171},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2868, col: 36, offset: 85178},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2868, col: 44, offset: 85186},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2868, col: 63, offset: 85205},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2868, col: 82, offset: 85224},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2868, col: 90, offset: 85232},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2883, col: 3, offset: 85592},
						run: (*parser).callonAggSumsq12,
						expr: &seqExpr{
							pos: position{line: 2883, col: 3, offset: 85592},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2883, col: 3, offset: 85592},
									val:        "sumsq",
									ignoreCase: false,
									want:       "\"sumsq\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2883, col: 11, offset: 85600},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2883, col: 19, offset: 85608},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2883, col: 25, offset: 85614},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2883, col: 35, offset: 85624},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggVar",
			pos:  position{line: 2893, col: 1, offset: 85814},
			expr: &choiceExpr{
				pos: position{line: 2893, col: 11, offset: 85824},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2893, col: 11, offset: 85824},
						run: (*parser).callonAggVar2,
						expr: &seqExpr{
							pos: position{line: 2893, col: 11, offset: 85824},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2893, col: 11, offset: 85824},
									val:        "var",
									ignoreCase: false,
									want:       "\"var\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2893, col: 17, offset: 85830},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2893, col: 25, offset: 85838},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2893, col: 32, offset: 85845},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2893, col: 40, offset: 85853},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2893, col: 59, offset: 85872},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2893, col: 78, offset: 85891},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2893, col: 86, offset: 85899},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2908, col: 3, offset: 86257},
						run: (*parser).callonAggVar12,
						expr: &seqExpr{
							pos: position{line: 2908, col: 3, offset: 86257},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2908, col: 3, offset: 86257},
									val:        "var",
									ignoreCase: false,
									want:       "\"var\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2908, col: 9, offset: 86263},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2908, col: 17, offset: 86271},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2908, col: 23, offset: 86277},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2908, col: 33, offset: 86287},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggVarp",
			pos:  position{line: 2918, col: 1, offset: 86475},
			expr: &choiceExpr{
				pos: position{line: 2918, col: 12, offset: 86486},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2918, col: 12, offset: 86486},
						run: (*parser).callonAggVarp2,
						expr: &seqExpr{
							pos: position{line: 2918, col: 12, offset: 86486},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2918, col: 12, offset: 86486},
									val:        "varp",
									ignoreCase: false,
									want:       "\"varp\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2918, col: 19, offset: 86493},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2918, col: 27, offset: 86501},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2918, col: 34, offset: 86508},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2918, col: 42, offset: 86516},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2918, col: 61, offset: 86535},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2918, col: 80, offset: 86554},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2918, col: 88, offset: 86562},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2933, col: 3, offset: 86921},
						run: (*parser).callonAggVarp12,
						expr: &seqExpr{
							pos: position{line: 2933, col: 3, offset: 86921},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2933, col: 3, offset: 86921},
									val:        "varp",
									ignoreCase: false,
									want:       "\"varp\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2933, col: 10, offset: 86928},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2933, col: 18, offset: 86936},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2933, col: 24, offset: 86942},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2933, col: 34, offset: 86952},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggFirst",
			pos:  position{line: 2943, col: 1, offset: 87141},
			expr: &choiceExpr{
				pos: position{line: 2943, col: 13, offset: 87153},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2943, col: 13, offset: 87153},
						run: (*parser).callonAggFirst2,
						expr: &seqExpr{
							pos: position{line: 2943, col: 13, offset: 87153},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2943, col: 13, offset: 87153},
									val:        "first",
									ignoreCase: false,
									want:       "\"first\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2943, col: 21, offset: 87161},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2943, col: 29, offset: 87169},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2943, col: 36, offset: 87176},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2943, col: 44, offset: 87184},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2943, col: 63, offset: 87203},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2943, col: 82, offset: 87222},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2943, col: 90, offset: 87230},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2958, col: 3, offset: 87590},
						run: (*parser).callonAggFirst12,
						expr: &seqExpr{
							pos: position{line: 2958, col: 3, offset: 87590},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2958, col: 3, offset: 87590},
									val:        "first",
									ignoreCase: false,
									want:       "\"first\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2958, col: 11, offset: 87598},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2958, col: 19, offset: 87606},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2958, col: 25, offset: 87612},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2958, col: 35, offset: 87622},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggLast",
			pos:  position{line: 2968, col: 1, offset: 87812},
			expr: &choiceExpr{
				pos: position{line: 2968, col: 12, offset: 87823},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2968, col: 12, offset: 87823},
						run: (*parser).callonAggLast2,
						expr: &seqExpr{
							pos: position{line: 2968, col: 12, offset: 87823},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2968, col: 12, offset: 87823},
									val:        "last",
									ignoreCase: false,
									want:       "\"last\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2968, col: 19, offset: 87830},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2968, col: 27, offset: 87838},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2968, col: 34, offset: 87845},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2968, col: 42, offset: 87853},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2968, col: 61, offset: 87872},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2968, col: 80, offset: 87891},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2968, col: 88, offset: 87899},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2983, col: 3, offset: 88258},
						run: (*parser).callonAggLast12,
						expr: &seqExpr{
							pos: position{line: 2983, col: 3, offset: 88258},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2983, col: 3, offset: 88258},
									val:        "last",
									ignoreCase: false,
									want:       "\"last\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2983, col: 10, offset: 88265},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2983, col: 18, offset: 88273},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2983, col: 24, offset: 88279},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2983, col: 34, offset: 88289},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggList",
			pos:  position{line: 2993, col: 1, offset: 88478},
			expr: &choiceExpr{
				pos: position{line: 2993, col: 12, offset: 88489},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2993, col: 12, offset: 88489},
						run: (*parser).callonAggList2,
						expr: &seqExpr{
							pos: position{line: 2993, col: 12, offset: 88489},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2993, col: 12, offset: 88489},
									val:        "list",
									ignoreCase: false,
									want:       "\"list\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2993, col: 19, offset: 88496},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2993, col: 27, offset: 88504},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 2993, col: 34, offset: 88511},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2993, col: 44, offset: 88521},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2993, col: 54, offset: 88531},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3003, col: 3, offset: 88758},
						run: (*parser).callonAggList10,
						expr: &seqExpr{
							pos: position{line: 3003, col: 3, offset: 88758},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3003, col: 3, offset: 88758},
									val:        "list",
									ignoreCase: false,
									want:       "\"list\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3003, col: 10, offset: 88765},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3003, col: 18, offset: 88773},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3003, col: 24, offset: 88779},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3003, col: 34, offset: 88789},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggEarliest",
			pos:  position{line: 3013, col: 1, offset: 88978},
			expr: &choiceExpr{
				pos: position{line: 3013, col: 16, offset: 88993},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3013, col: 16, offset: 88993},
						run: (*parser).callonAggEarliest2,
						expr: &seqExpr{
							pos: position{line: 3013, col: 16, offset: 88993},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3013, col: 16, offset: 88993},
									val:        "earliest",
									ignoreCase: false,
									want:       "\"earliest\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3013, col: 27, offset: 89004},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3013, col: 35, offset: 89012},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3013, col: 42, offset: 89019},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3013, col: 50, offset: 89027},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3013, col: 69, offset: 89046},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3013, col: 88, offset: 89065},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3013, col: 96, offset: 89073},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3028, col: 3, offset: 89436},
						run: (*parser).callonAggEarliest12,
						expr: &seqExpr{
							pos: position{line: 3028, col: 3, offset: 89436},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3028, col: 3, offset: 89436},
									val:        "earliest",
									ignoreCase: false,
									want:       "\"earliest\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3028, col: 14, offset: 89447},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3028, col: 22, offset: 89455},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3028, col: 28, offset: 89461},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3028, col: 38, offset: 89471},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggEarliestTime",
			pos:  position{line: 3038, col: 1, offset: 89664},
			expr: &choiceExpr{
				pos: position{line: 3038, col: 20, offset: 89683},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3038, col: 20, offset: 89683},
						run: (*parser).callonAggEarliestTime2,
						expr: &seqExpr{
							pos: position{line: 3038, col: 20, offset: 89683},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3038, col: 20, offset: 89683},
									val:        "earliest_time",
									ignoreCase: false,
									want:       "\"earliest_time\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3038, col: 36, offset: 89699},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3038, col: 44, offset: 89707},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3038, col: 51, offset: 89714},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3038, col: 59, offset: 89722},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3038, col: 78, offset: 89741},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3038, col: 97, offset: 89760},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3038, col: 105, offset: 89768},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3053, col: 3, offset: 90135},
						run: (*parser).callonAggEarliestTime12,
						expr: &seqExpr{
							pos: position{line: 3053, col: 3, offset: 90135},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3053, col: 3, offset: 90135},
									val:        "earliest_time",
									ignoreCase: false,
									want:       "\"earliest_time\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3053, col: 19, offset: 90151},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3053, col: 27, offset: 90159},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3053, col: 33, offset: 90165},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3053, col: 43, offset: 90175},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggLatest",
			pos:  position{line: 3063, col: 1, offset: 90372},
			expr: &choiceExpr{
				pos: position{line: 3063, col: 14, offset: 90385},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3063, col: 14, offset: 90385},
						run: (*parser).callonAggLatest2,
						expr: &seqExpr{
							pos: position{line: 3063, col: 14, offset: 90385},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3063, col: 14, offset: 90385},
									val:        "latest",
									ignoreCase: false,
									want:       "\"latest\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3063, col: 23, offset: 90394},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3063, col: 31, offset: 90402},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3063, col: 38, offset: 90409},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3063, col: 46, offset: 90417},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3063, col: 65, offset: 90436},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3063, col: 84, offset: 90455},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3063, col: 92, offset: 90463},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3078, col: 3, offset: 90824},
						run: (*parser).callonAggLatest12,
						expr: &seqExpr{
							pos: position{line: 3078, col: 3, offset: 90824},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3078, col: 3, offset: 90824},
									val:        "latest",
									ignoreCase: false,
									want:       "\"latest\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3078, col: 12, offset: 90833},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3078, col: 20, offset: 90841},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3078, col: 26, offset: 90847},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3078, col: 36, offset: 90857},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggLatestTime",
			pos:  position{line: 3088, col: 1, offset: 91048},
			expr: &choiceExpr{
				pos: position{line: 3088, col: 18, offset: 91065},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3088, col: 18, offset: 91065},
						run: (*parser).callonAggLatestTime2,
						expr: &seqExpr{
							pos: position{line: 3088, col: 18, offset: 91065},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3088, col: 18, offset: 91065},
									val:        "latest_time",
									ignoreCase: false,
									want:       "\"latest_time\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3088, col: 32, offset: 91079},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3088, col: 40, offset: 91087},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3088, col: 47, offset: 91094},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3088, col: 55, offset: 91102},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3088, col: 74, offset: 91121},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3088, col: 93, offset: 91140},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3088, col: 101, offset: 91148},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3103, col: 3, offset: 91513},
						run: (*parser).callonAggLatestTime12,
						expr: &seqExpr{
							pos: position{line: 3103, col: 3, offset: 91513},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3103, col: 3, offset: 91513},
									val:        "latest_time",
									ignoreCase: false,
									want:       "\"latest_time\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3103, col: 17, offset: 91527},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3103, col: 25, offset: 91535},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3103, col: 31, offset: 91541},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3103, col: 41, offset: 91551},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggRate",
			pos:  position{line: 3113, col: 1, offset: 91746},
			expr: &choiceExpr{
				pos: position{line: 3113, col: 12, offset: 91757},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3113, col: 12, offset: 91757},
						run: (*parser).callonAggRate2,
						expr: &seqExpr{
							pos: position{line: 3113, col: 12, offset: 91757},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3113, col: 12, offset: 91757},
									val:        "rate",
									ignoreCase: false,
									want:       "\"rate\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3113, col: 19, offset: 91764},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3113, col: 27, offset: 91772},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3113, col: 34, offset: 91779},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3113, col: 42, offset: 91787},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3113, col: 61, offset: 91806},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3113, col: 80, offset: 91825},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3113, col: 88, offset: 91833},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3128, col: 3, offset: 92197},
						run: (*parser).callonAggRate12,
						expr: &seqExpr{
							pos: position{line: 3128, col: 3, offset: 92197},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3128, col: 3, offset: 92197},
									val:        "rate",
									ignoreCase: false,
									want:       "\"rate\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3128, col: 10, offset: 92204},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3128, col: 18, offset: 92212},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3128, col: 24, offset: 92218},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3128, col: 34, offset: 92228},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggValues",
			pos:  position{line: 3137, col: 1, offset: 92382},
			expr: &choiceExpr{
				pos: position{line: 3137, col: 14, offset: 92395},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3137, col: 14, offset: 92395},
						run: (*parser).callonAggValues2,
						expr: &seqExpr{
							pos: position{line: 3137, col: 14, offset: 92395},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3137, col: 14, offset: 92395},
									val:        "values",
									ignoreCase: false,
									want:       "\"values\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3137, col: 23, offset: 92404},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3137, col: 31, offset: 92412},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 3137, col: 38, offset: 92419},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3137, col: 48, offset: 92429},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3137, col: 58, offset: 92439},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3147, col: 3, offset: 92668},
						run: (*parser).callonAggValues10,
						expr: &seqExpr{
							pos: position{line: 3147, col: 3, offset: 92668},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3147, col: 3, offset: 92668},
									val:        "values",
									ignoreCase: false,
									want:       "\"values\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3147, col: 12, offset: 92677},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3147, col: 20, offset: 92685},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3147, col: 26, offset: 92691},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3147, col: 36, offset: 92701},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldWithNumberValue",
			pos:  position{line: 3156, col: 1, offset: 92852},
			expr: &actionExpr{
				pos: position{line: 3156, col: 25, offset: 92876},
				run: (*parser).callonFieldWithNumberValue1,
				expr: &labeledExpr{
					pos:   position{line: 3156, col: 25, offset: 92876},
					label: "keyValuePair",
					expr: &choiceExpr{
						pos: position{line: 3156, col: 39, offset: 92890},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3156, col: 39, offset: 92890},
								name: "NamedFieldWithNumberValue",
							},
							&ruleRefExpr{
								pos:  position{line: 3156, col: 67, offset: 92918},
								name: "UnnamedFieldWithNumberValue",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedFieldWithNumberValue",
			pos:  position{line: 3160, col: 1, offset: 92981},
			expr: &actionExpr{
				pos: position{line: 3160, col: 30, offset: 93010},
				run: (*parser).callonNamedFieldWithNumberValue1,
				expr: &seqExpr{
					pos: position{line: 3160, col: 30, offset: 93010},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3160, col: 30, offset: 93010},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 3160, col: 34, offset: 93014},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 3160, col: 44, offset: 93024},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 3160, col: 48, offset: 93028},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 3160, col: 48, offset: 93028},
										name: "EqualityOperator",
									},
									&ruleRefExpr{
										pos:  position{line: 3160, col: 67, offset: 93047},
										name: "InequalityOperator",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3160, col: 87, offset: 93067},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 3160, col: 93, offset: 93073},
								name: "Number",
							},
						},
					},
				},
			},
		},
		{
			name: "UnnamedFieldWithNumberValue",
			pos:  position{line: 3173, col: 1, offset: 93307},
			expr: &actionExpr{
				pos: position{line: 3173, col: 32, offset: 93338},
				run: (*parser).callonUnnamedFieldWithNumberValue1,
				expr: &labeledExpr{
					pos:   position{line: 3173, col: 32, offset: 93338},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 3173, col: 38, offset: 93344},
						name: "Number",
					},
				},
			},
		},
		{
			name: "FieldWithBooleanValue",
			pos:  position{line: 3186, col: 1, offset: 93561},
			expr: &actionExpr{
				pos: position{line: 3186, col: 26, offset: 93586},
				run: (*parser).callonFieldWithBooleanValue1,
				expr: &seqExpr{
					pos: position{line: 3186, col: 26, offset: 93586},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3186, col: 26, offset: 93586},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 3186, col: 30, offset: 93590},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 3186, col: 40, offset: 93600},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 3186, col: 43, offset: 93603},
								name: "EqualityOperator",
							},
						},
						&labeledExpr{
							pos:   position{line: 3186, col: 60, offset: 93620},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 3186, col: 66, offset: 93626},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldWithStringValue",
			pos:  position{line: 3199, col: 1, offset: 93861},
			expr: &actionExpr{
				pos: position{line: 3199, col: 25, offset: 93885},
				run: (*parser).callonFieldWithStringValue1,
				expr: &labeledExpr{
					pos:   position{line: 3199, col: 25, offset: 93885},
					label: "keyValuePair",
					expr: &choiceExpr{
						pos: position{line: 3199, col: 39, offset: 93899},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3199, col: 39, offset: 93899},
								name: "NamedFieldWithStringValue",
							},
							&ruleRefExpr{
								pos:  position{line: 3199, col: 67, offset: 93927},
								name: "UnnamedFieldWithStringValue",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedFieldWithStringValue",
			pos:  position{line: 3203, col: 1, offset: 93990},
			expr: &actionExpr{
				pos: position{line: 3203, col: 30, offset: 94019},
				run: (*parser).callonNamedFieldWithStringValue1,
				expr: &seqExpr{
					pos: position{line: 3203, col: 30, offset: 94019},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3203, col: 30, offset: 94019},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 3203, col: 34, offset: 94023},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 3203, col: 44, offset: 94033},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 3203, col: 47, offset: 94036},
								name: "EqualityOperator",
							},
						},
						&labeledExpr{
							pos:   position{line: 3203, col: 64, offset: 94053},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 3203, col: 70, offset: 94059},
								name: "String",
							},
						},
					},
				},
			},
		},
		{
			name: "UnnamedFieldWithStringValue",
			pos:  position{line: 3215, col: 1, offset: 94292},
			expr: &actionExpr{
				pos: position{line: 3215, col: 32, offset: 94323},
				run: (*parser).callonUnnamedFieldWithStringValue1,
				expr: &labeledExpr{
					pos:   position{line: 3215, col: 32, offset: 94323},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 3215, col: 38, offset: 94329},
						name: "String",
					},
				},
			},
		},
		{
			name: "FieldNameList",
			pos:  position{line: 3229, col: 1, offset: 94660},
			expr: &actionExpr{
				pos: position{line: 3229, col: 18, offset: 94677},
				run: (*parser).callonFieldNameList1,
				expr: &seqExpr{
					pos: position{line: 3229, col: 18, offset: 94677},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3229, col: 18, offset: 94677},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 3229, col: 24, offset: 94683},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 3229, col: 34, offset: 94693},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3229, col: 39, offset: 94698},
								expr: &seqExpr{
									pos: position{line: 3229, col: 40, offset: 94699},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 3229, col: 40, offset: 94699},
											name: "COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 3229, col: 46, offset: 94705},
											name: "FieldName",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 3249, col: 1, offset: 95468},
			expr: &actionExpr{
				pos: position{line: 3249, col: 14, offset: 95481},
				run: (*parser).callonFieldName1,
				expr: &seqExpr{
					pos: position{line: 3249, col: 14, offset: 95481},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 3249, col: 14, offset: 95481},
							val:        "[a-zA-Z0-9:*]",
							chars:      []rune{':', '*'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 3249, col: 27, offset: 95494},
							expr: &charClassMatcher{
								pos:        position{line: 3249, col: 27, offset: 95494},
								val:        "[a-zA-Z0-9:_.*]",
								chars:      []rune{':', '_', '.', '*'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "FieldNameStartWith_",
			pos:  position{line: 3253, col: 1, offset: 95547},
			expr: &actionExpr{
				pos: position{line: 3253, col: 24, offset: 95570},
				run: (*parser).callonFieldNameStartWith_1,
				expr: &seqExpr{
					pos: position{line: 3253, col: 24, offset: 95570},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 3253, col: 24, offset: 95570},
							val:        "[a-zA-Z0-9:_.*]",
							chars:      []rune{':', '_', '.', '*'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 3253, col: 39, offset: 95585},
							expr: &charClassMatcher{
								pos:        position{line: 3253, col: 39, offset: 95585},
								val:        "[a-zA-Z0-9:_.*]",
								chars:      []rune{':', '_', '.', '*'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "String",
			pos:  position{line: 3257, col: 1, offset: 95638},
			expr: &actionExpr{
				pos: position{line: 3257, col: 11, offset: 95648},
				run: (*parser).callonString1,
				expr: &labeledExpr{
					pos:   position{line: 3257, col: 11, offset: 95648},
					label: "str",
					expr: &choiceExpr{
						pos: position{line: 3257, col: 16, offset: 95653},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3257, col: 16, offset: 95653},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 3257, col: 31, offset: 95668},
								name: "UnquotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 3261, col: 1, offset: 95709},
			expr: &actionExpr{
				pos: position{line: 3261, col: 17, offset: 95725},
				run: (*parser).callonQuotedString1,
				expr: &seqExpr{
					pos: position{line: 3261, col: 17, offset: 95725},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3261, col: 17, offset: 95725},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 3261, col: 21, offset: 95729},
							expr: &charClassMatcher{
								pos:        position{line: 3261, col: 21, offset: 95729},
								val:        "[^\"]",
								chars:      []rune{'"'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 3261, col: 27, offset: 95735},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UnquotedString",
			pos:  position{line: 3266, col: 1, offset: 95846},
			expr: &actionExpr{
				pos: position{line: 3266, col: 19, offset: 95864},
				run: (*parser).callonUnquotedString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 3266, col: 19, offset: 95864},
					expr: &choiceExpr{
						pos: position{line: 3266, col: 20, offset: 95865},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 3266, col: 20, offset: 95865},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&seqExpr{
								pos: position{line: 3266, col: 27, offset: 95872},
								exprs: []any{
									&notExpr{
										pos: position{line: 3266, col: 27, offset: 95872},
										expr: &choiceExpr{
											pos: position{line: 3266, col: 29, offset: 95874},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 3266, col: 29, offset: 95874},
													name: "MAJOR_BREAK",
												},
												&litMatcher{
													pos:        position{line: 3266, col: 43, offset: 95888},
													val:        "|",
													ignoreCase: false,
													want:       "\"|\"",
												},
												&ruleRefExpr{
													pos:  position{line: 3266, col: 49, offset: 95894},
													name: "EOF",
												},
											},
										},
									},
									&anyMatcher{
										line: 3266, col: 54, offset: 95899,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AllowedChar",
			pos:  position{line: 3273, col: 1, offset: 96014},
			expr: &choiceExpr{
				pos: position{line: 3273, col: 16, offset: 96029},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 3273, col: 16, offset: 96029},
						val:        "[a-zA-Z0-9:_{}@.]",
						chars:      []rune{':', '_', '{', '}', '@', '.'},
						ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&seqExpr{
						pos: position{line: 3273, col: 37, offset: 96050},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 3273, col: 37, offset: 96050},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 3273, col: 41, offset: 96054},
								expr: &charClassMatcher{
									pos:        position{line: 3273, col: 41, offset: 96054},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&litMatcher{
								pos:        position{line: 3273, col: 48, offset: 96061},
								val:        "}",
								ignoreCase: false,
								want:       "\"}\"",
							},
						},
					},
				},
			},
		},
		{
			name: "UnquotedStringWithTemplateWildCard",
			pos:  position{line: 3275, col: 1, offset: 96067},
			expr: &actionExpr{
				pos: position{line: 3275, col: 39, offset: 96105},
				run: (*parser).callonUnquotedStringWithTemplateWildCard1,
				expr: &oneOrMoreExpr{
					pos: position{line: 3275, col: 39, offset: 96105},
					expr: &choiceExpr{
						pos: position{line: 3275, col: 40, offset: 96106},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3275, col: 40, offset: 96106},
								name: "AllowedChar",
							},
							&seqExpr{
								pos: position{line: 3275, col: 54, offset: 96120},
								exprs: []any{
									&notExpr{
										pos: position{line: 3275, col: 54, offset: 96120},
										expr: &choiceExpr{
											pos: position{line: 3275, col: 56, offset: 96122},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 3275, col: 56, offset: 96122},
													name: "MAJOR_BREAK",
												},
												&litMatcher{
													pos:        position{line: 3275, col: 70, offset: 96136},
													val:        "|",
													ignoreCase: false,
													want:       "\"|\"",
												},
												&ruleRefExpr{
													pos:  position{line: 3275, col: 76, offset: 96142},
													name: "EOF",
												},
											},
										},
									},
									&anyMatcher{
										line: 3275, col: 81, offset: 96147,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Boolean",
			pos:  position{line: 3279, col: 1, offset: 96187},
			expr: &actionExpr{
				pos: position{line: 3279, col: 12, offset: 96198},
				run: (*parser).callonBoolean1,
				expr: &choiceExpr{
					pos: position{line: 3279, col: 13, offset: 96199},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3279, col: 13, offset: 96199},
							val:        "true",
							ignoreCase: false,
							want:       "\"true\"",
						},
						&litMatcher{
							pos:        position{line: 3279, col: 22, offset: 96208},
							val:        "false",
							ignoreCase: false,
							want:       "\"false\"",
						},
					},
				},
			},
		},
		{
			name: "RenamePattern",
			pos:  position{line: 3285, col: 1, offset: 96362},
			expr: &actionExpr{
				pos: position{line: 3285, col: 18, offset: 96379},
				run: (*parser).callonRenamePattern1,
				expr: &oneOrMoreExpr{
					pos: position{line: 3285, col: 18, offset: 96379},
					expr: &charClassMatcher{
						pos:        position{line: 3285, col: 18, offset: 96379},
						val:        "[a-zA-Z0-9_*]",
						chars:      []rune{'_', '*'},
						ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 3289, col: 1, offset: 96430},
			expr: &actionExpr{
				pos: position{line: 3289, col: 11, offset: 96440},
				run: (*parser).callonNumber1,
				expr: &labeledExpr{
					pos:   position{line: 3289, col: 11, offset: 96440},
					label: "number",
					expr: &ruleRefExpr{
						pos:  position{line: 3289, col: 18, offset: 96447},
						name: "NumberAsString",
					},
				},
			},
		},
		{
			name: "NumberAsString",
			pos:  position{line: 3295, col: 1, offset: 96636},
			expr: &actionExpr{
				pos: position{line: 3295, col: 19, offset: 96654},
				run: (*parser).callonNumberAsString1,
				expr: &seqExpr{
					pos: position{line: 3295, col: 19, offset: 96654},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3295, col: 19, offset: 96654},
							label: "number",
							expr: &choiceExpr{
								pos: position{line: 3295, col: 27, offset: 96662},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 3295, col: 27, offset: 96662},
										name: "FloatAsString",
									},
									&ruleRefExpr{
										pos:  position{line: 3295, col: 43, offset: 96678},
										name: "IntegerAsString",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 3295, col: 60, offset: 96695},
							expr: &choiceExpr{
								pos: position{line: 3295, col: 62, offset: 96697},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 3295, col: 62, offset: 96697},
										name: "SPACE",
									},
									&litMatcher{
										pos:        position{line: 3295, col: 70, offset: 96705},
										val:        "|",
										ignoreCase: false,
										want:       "\"|\"",
									},
									&litMatcher{
										pos:        position{line: 3295, col: 76, offset: 96711},
										val:        ")",
										ignoreCase: false,
										want:       "\")\"",
									},
									&litMatcher{
										pos:        position{line: 3295, col: 82, offset: 96717},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&ruleRefExpr{
										pos:  position{line: 3295, col: 88, offset: 96723},
										name: "EOF",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FloatAsString",
			pos:  position{line: 3301, col: 1, offset: 96852},
			expr: &actionExpr{
				pos: position{line: 3301, col: 18, offset: 96869},
				run: (*parser).callonFloatAsString1,
				expr: &seqExpr{
					pos: position{line: 3301, col: 18, offset: 96869},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 3301, col: 18, offset: 96869},
							expr: &charClassMatcher{
								pos:        position{line: 3301, col: 18, offset: 96869},
								val:        "[-+]",
								chars:      []rune{'-', '+'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 3301, col: 24, offset: 96875},
							expr: &charClassMatcher{
								pos:        position{line: 3301, col: 24, offset: 96875},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 3301, col: 31, offset: 96882},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 3301, col: 35, offset: 96886},
							expr: &charClassMatcher{
								pos:        position{line: 3301, col: 35, offset: 96886},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "IntegerAsString",
			pos:  position{line: 3306, col: 1, offset: 96981},
			expr: &actionExpr{
				pos: position{line: 3306, col: 20, offset: 97000},
				run: (*parser).callonIntegerAsString1,
				expr: &seqExpr{
					pos: position{line: 3306, col: 20, offset: 97000},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 3306, col: 20, offset: 97000},
							expr: &charClassMatcher{
								pos:        position{line: 3306, col: 20, offset: 97000},
								val:        "[-+]",
								chars:      []rune{'-', '+'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 3306, col: 26, offset: 97006},
							expr: &charClassMatcher{
								pos:        position{line: 3306, col: 26, offset: 97006},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 3310, col: 1, offset: 97049},
			expr: &actionExpr{
				pos: position{line: 3310, col: 21, offset: 97069},
				run: (*parser).callonEqualityOperator1,
				expr: &seqExpr{
					pos: position{line: 3310, col: 21, offset: 97069},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3310, col: 21, offset: 97069},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 3310, col: 36, offset: 97084},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 3310, col: 40, offset: 97088},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 3310, col: 40, offset: 97088},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
									&litMatcher{
										pos:        position{line: 3310, col: 46, offset: 97094},
										val:        "!=",
										ignoreCase: false,
										want:       "\"!=\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 3310, col: 52, offset: 97100},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "InequalityOperator",
			pos:  position{line: 3318, col: 1, offset: 97281},
			expr: &actionExpr{
				pos: position{line: 3318, col: 23, offset: 97303},
				run: (*parser).callonInequalityOperator1,
				expr: &seqExpr{
					pos: position{line: 3318, col: 23, offset: 97303},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3318, col: 23, offset: 97303},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 3318, col: 38, offset: 97318},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 3318, col: 42, offset: 97322},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 3318, col: 42, offset: 97322},
										val:        "<=",
										ignoreCase: false,
										want:       "\"<=\"",
									},
									&litMatcher{
										pos:        position{line: 3318, col: 49, offset: 97329},
										val:        "<",
										ignoreCase: false,
										want:       "\"<\"",
									},
									&litMatcher{
										pos:        position{line: 3318, col: 55, offset: 97335},
										val:        ">=",
										ignoreCase: false,
										want:       "\">=\"",
									},
									&litMatcher{
										pos:        position{line: 3318, col: 62, offset: 97342},
										val:        ">",
										ignoreCase: false,
										want:       "\">\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 3318, col: 67, offset: 97347},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "EqualityOrInequality",
			pos:  position{line: 3326, col: 1, offset: 97530},
			expr: &choiceExpr{
				pos: position{line: 3326, col: 25, offset: 97554},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3326, col: 25, offset: 97554},
						run: (*parser).callonEqualityOrInequality2,
						expr: &labeledExpr{
							pos:   position{line: 3326, col: 25, offset: 97554},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 3326, col: 28, offset: 97557},
								name: "EqualityOperator",
							},
						},
					},
					&actionExpr{
						pos: position{line: 3329, col: 3, offset: 97599},
						run: (*parser).callonEqualityOrInequality5,
						expr: &labeledExpr{
							pos:   position{line: 3329, col: 3, offset: 97599},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 3329, col: 6, offset: 97602},
								name: "InequalityOperator",
							},
						},
					},
				},
			},
		},
		{
			name: "OpPlus",
			pos:  position{line: 3333, col: 1, offset: 97645},
			expr: &actionExpr{
				pos: position{line: 3333, col: 11, offset: 97655},
				run: (*parser).callonOpPlus1,
				expr: &seqExpr{
					pos: position{line: 3333, col: 11, offset: 97655},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3333, col: 11, offset: 97655},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 3333, col: 26, offset: 97670},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3333, col: 30, offset: 97674},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpMinus",
			pos:  position{line: 3337, col: 1, offset: 97714},
			expr: &actionExpr{
				pos: position{line: 3337, col: 12, offset: 97725},
				run: (*parser).callonOpMinus1,
				expr: &seqExpr{
					pos: position{line: 3337, col: 12, offset: 97725},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3337, col: 12, offset: 97725},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 3337, col: 27, offset: 97740},
							val:        "-",
							ignoreCase: false,
							want:       "\"-\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3337, col: 31, offset: 97744},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpMul",
			pos:  position{line: 3341, col: 1, offset: 97784},
			expr: &actionExpr{
				pos: position{line: 3341, col: 10, offset: 97793},
				run: (*parser).callonOpMul1,
				expr: &seqExpr{
					pos: position{line: 3341, col: 10, offset: 97793},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3341, col: 10, offset: 97793},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 3341, col: 25, offset: 97808},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3341, col: 29, offset: 97812},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpDiv",
			pos:  position{line: 3345, col: 1, offset: 97852},
			expr: &actionExpr{
				pos: position{line: 3345, col: 10, offset: 97861},
				run: (*parser).callonOpDiv1,
				expr: &seqExpr{
					pos: position{line: 3345, col: 10, offset: 97861},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3345, col: 10, offset: 97861},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 3345, col: 25, offset: 97876},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3345, col: 29, offset: 97880},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "Second",
			pos:  position{line: 3350, col: 1, offset: 97944},
			expr: &actionExpr{
				pos: position{line: 3350, col: 11, offset: 97954},
				run: (*parser).callonSecond1,
				expr: &choiceExpr{
					pos: position{line: 3350, col: 12, offset: 97955},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3350, col: 12, offset: 97955},
							val:        "seconds",
							ignoreCase: false,
							want:       "\"seconds\"",
						},
						&litMatcher{
							pos:        position{line: 3350, col: 24, offset: 97967},
							val:        "second",
							ignoreCase: false,
							want:       "\"second\"",
						},
						&litMatcher{
							pos:        position{line: 3350, col: 35, offset: 97978},
							val:        "secs",
							ignoreCase: false,
							want:       "\"secs\"",
						},
						&litMatcher{
							pos:        position{line: 3350, col: 44, offset: 97987},
							val:        "sec",
							ignoreCase: false,
							want:       "\"sec\"",
						},
						&litMatcher{
							pos:        position{line: 3350, col: 52, offset: 97995},
							val:        "s",
							ignoreCase: false,
							want:       "\"s\"",
						},
					},
				},
			},
		},
		{
			name: "Minute",
			pos:  position{line: 3354, col: 1, offset: 98036},
			expr: &actionExpr{
				pos: position{line: 3354, col: 11, offset: 98046},
				run: (*parser).callonMinute1,
				expr: &choiceExpr{
					pos: position{line: 3354, col: 12, offset: 98047},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3354, col: 12, offset: 98047},
							val:        "minutes",
							ignoreCase: false,
							want:       "\"minutes\"",
						},
						&litMatcher{
							pos:        position{line: 3354, col: 24, offset: 98059},
							val:        "minute",
							ignoreCase: false,
							want:       "\"minute\"",
						},
						&litMatcher{
							pos:        position{line: 3354, col: 35, offset: 98070},
							val:        "mins",
							ignoreCase: false,
							want:       "\"mins\"",
						},
						&litMatcher{
							pos:        position{line: 3354, col: 44, offset: 98079},
							val:        "min",
							ignoreCase: false,
							want:       "\"min\"",
						},
						&litMatcher{
							pos:        position{line: 3354, col: 52, offset: 98087},
							val:        "m",
							ignoreCase: false,
							want:       "\"m\"",
						},
					},
				},
			},
		},
		{
			name: "Hour",
			pos:  position{line: 3358, col: 1, offset: 98128},
			expr: &actionExpr{
				pos: position{line: 3358, col: 9, offset: 98136},
				run: (*parser).callonHour1,
				expr: &choiceExpr{
					pos: position{line: 3358, col: 10, offset: 98137},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3358, col: 10, offset: 98137},
							val:        "hours",
							ignoreCase: false,
							want:       "\"hours\"",
						},
						&litMatcher{
							pos:        position{line: 3358, col: 20, offset: 98147},
							val:        "hour",
							ignoreCase: false,
							want:       "\"hour\"",
						},
						&litMatcher{
							pos:        position{line: 3358, col: 29, offset: 98156},
							val:        "hrs",
							ignoreCase: false,
							want:       "\"hrs\"",
						},
						&litMatcher{
							pos:        position{line: 3358, col: 37, offset: 98164},
							val:        "hr",
							ignoreCase: false,
							want:       "\"hr\"",
						},
						&litMatcher{
							pos:        position{line: 3358, col: 44, offset: 98171},
							val:        "h",
							ignoreCase: false,
							want:       "\"h\"",
						},
					},
				},
			},
		},
		{
			name: "Day",
			pos:  position{line: 3362, col: 1, offset: 98210},
			expr: &actionExpr{
				pos: position{line: 3362, col: 8, offset: 98217},
				run: (*parser).callonDay1,
				expr: &choiceExpr{
					pos: position{line: 3362, col: 9, offset: 98218},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3362, col: 9, offset: 98218},
							val:        "days",
							ignoreCase: false,
							want:       "\"days\"",
						},
						&litMatcher{
							pos:        position{line: 3362, col: 18, offset: 98227},
							val:        "day",
							ignoreCase: false,
							want:       "\"day\"",
						},
						&litMatcher{
							pos:        position{line: 3362, col: 26, offset: 98235},
							val:        "d",
							ignoreCase: false,
							want:       "\"d\"",
						},
					},
				},
			},
		},
		{
			name: "Week",
			pos:  position{line: 3366, col: 1, offset: 98273},
			expr: &actionExpr{
				pos: position{line: 3366, col: 9, offset: 98281},
				run: (*parser).callonWeek1,
				expr: &choiceExpr{
					pos: position{line: 3366, col: 10, offset: 98282},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3366, col: 10, offset: 98282},
							val:        "weeks",
							ignoreCase: false,
							want:       "\"weeks\"",
						},
						&litMatcher{
							pos:        position{line: 3366, col: 20, offset: 98292},
							val:        "week",
							ignoreCase: false,
							want:       "\"week\"",
						},
						&litMatcher{
							pos:        position{line: 3366, col: 29, offset: 98301},
							val:        "w",
							ignoreCase: false,
							want:       "\"w\"",
						},
					},
				},
			},
		},
		{
			name: "Month",
			pos:  position{line: 3370, col: 1, offset: 98340},
			expr: &actionExpr{
				pos: position{line: 3370, col: 10, offset: 98349},
				run: (*parser).callonMonth1,
				expr: &choiceExpr{
					pos: position{line: 3370, col: 11, offset: 98350},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3370, col: 11, offset: 98350},
							val:        "months",
							ignoreCase: false,
							want:       "\"months\"",
						},
						&litMatcher{
							pos:        position{line: 3370, col: 22, offset: 98361},
							val:        "month",
							ignoreCase: false,
							want:       "\"month\"",
						},
						&litMatcher{
							pos:        position{line: 3370, col: 32, offset: 98371},
							val:        "mon",
							ignoreCase: false,
							want:       "\"mon\"",
						},
					},
				},
			},
		},
		{
			name: "Quarter",
			pos:  position{line: 3374, col: 1, offset: 98413},
			expr: &actionExpr{
				pos: position{line: 3374, col: 12, offset: 98424},
				run: (*parser).callonQuarter1,
				expr: &choiceExpr{
					pos: position{line: 3374, col: 13, offset: 98425},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3374, col: 13, offset: 98425},
							val:        "quarters",
							ignoreCase: false,
							want:       "\"quarters\"",
						},
						&litMatcher{
							pos:        position{line: 3374, col: 26, offset: 98438},
							val:        "quarter",
							ignoreCase: false,
							want:       "\"quarter\"",
						},
						&litMatcher{
							pos:        position{line: 3374, col: 38, offset: 98450},
							val:        "qtrs",
							ignoreCase: false,
							want:       "\"qtrs\"",
						},
						&litMatcher{
							pos:        position{line: 3374, col: 47, offset: 98459},
							val:        "qtr",
							ignoreCase: false,
							want:       "\"qtr\"",
						},
						&litMatcher{
							pos:        position{line: 3374, col: 55, offset: 98467},
							val:        "q",
							ignoreCase: false,
							want:       "\"q\"",
						},
					},
				},
			},
		},
		{
			name: "Subseconds",
			pos:  position{line: 3379, col: 1, offset: 98601},
			expr: &actionExpr{
				pos: position{line: 3379, col: 15, offset: 98615},
				run: (*parser).callonSubseconds1,
				expr: &choiceExpr{
					pos: position{line: 3379, col: 16, offset: 98616},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3379, col: 16, offset: 98616},
							val:        "us",
							ignoreCase: false,
							want:       "\"us\"",
						},
						&litMatcher{
							pos:        position{line: 3379, col: 23, offset: 98623},
							val:        "ms",
							ignoreCase: false,
							want:       "\"ms\"",
						},
						&litMatcher{
							pos:        position{line: 3379, col: 30, offset: 98630},
							val:        "cs",
							ignoreCase: false,
							want:       "\"cs\"",
						},
						&litMatcher{
							pos:        position{line: 3379, col: 37, offset: 98637},
							val:        "ds",
							ignoreCase: false,
							want:       "\"ds\"",
						},
					},
				},
			},
		},
		{
			name: "TransactionBlock",
			pos:  position{line: 3388, col: 1, offset: 98860},
			expr: &actionExpr{
				pos: position{line: 3388, col: 21, offset: 98880},
				run: (*parser).callonTransactionBlock1,
				expr: &seqExpr{
					pos: position{line: 3388, col: 21, offset: 98880},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3388, col: 21, offset: 98880},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 3388, col: 26, offset: 98885},
							name: "CMD_TRANSACTION",
						},
						&labeledExpr{
							pos:   position{line: 3388, col: 42, offset: 98901},
							label: "txnOptions",
							expr: &ruleRefExpr{
								pos:  position{line: 3388, col: 53, offset: 98912},
								name: "TransactionOptions",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionOptions",
			pos:  position{line: 3397, col: 1, offset: 99218},
			expr: &actionExpr{
				pos: position{line: 3397, col: 23, offset: 99240},
				run: (*parser).callonTransactionOptions1,
				expr: &labeledExpr{
					pos:   position{line: 3397, col: 23, offset: 99240},
					label: "txnOptions",
					expr: &zeroOrOneExpr{
						pos: position{line: 3397, col: 34, offset: 99251},
						expr: &ruleRefExpr{
							pos:  position{line: 3397, col: 34, offset: 99251},
							name: "TransactionDefinitionOptionsList",
						},
					},
				},
			},
		},
		{
			name: "TransactionDefinitionOptionsList",
			pos:  position{line: 3412, col: 1, offset: 99642},
			expr: &actionExpr{
				pos: position{line: 3412, col: 37, offset: 99678},
				run: (*parser).callonTransactionDefinitionOptionsList1,
				expr: &seqExpr{
					pos: position{line: 3412, col: 37, offset: 99678},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3412, col: 37, offset: 99678},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 3412, col: 43, offset: 99684},
								name: "TransactionDefinitionOption",
							},
						},
						&labeledExpr{
							pos:   position{line: 3412, col: 71, offset: 99712},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3412, col: 76, offset: 99717},
								expr: &seqExpr{
									pos: position{line: 3412, col: 77, offset: 99718},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 3412, col: 77, offset: 99718},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 3412, col: 83, offset: 99724},
											name: "TransactionDefinitionOption",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionDefinitionOption",
			pos:  position{line: 3447, col: 1, offset: 100713},
			expr: &actionExpr{
				pos: position{line: 3447, col: 32, offset: 100744},
				run: (*parser).callonTransactionDefinitionOption1,
				expr: &labeledExpr{
					pos:   position{line: 3447, col: 32, offset: 100744},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 3447, col: 40, offset: 100752},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3447, col: 40, offset: 100752},
								name: "SpaceSeparatedFieldNameList",
							},
							&ruleRefExpr{
								pos:  position{line: 3447, col: 70, offset: 100782},
								name: "StartsWithOption",
							},
							&ruleRefExpr{
								pos:  position{line: 3447, col: 89, offset: 100801},
								name: "EndsWithOption",
							},
						},
					},
				},
			},
		},
		{
			name: "SpaceSeparatedFieldNameList",
			pos:  position{line: 3453, col: 1, offset: 100947},
			expr: &actionExpr{
				pos: position{line: 3453, col: 32, offset: 100978},
				run: (*parser).callonSpaceSeparatedFieldNameList1,
				expr: &seqExpr{
					pos: position{line: 3453, col: 32, offset: 100978},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3453, col: 32, offset: 100978},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 3453, col: 38, offset: 100984},
								name: "FieldName",
							},
						},
						&notExpr{
							pos: position{line: 3453, col: 48, offset: 100994},
							expr: &ruleRefExpr{
								pos:  position{line: 3453, col: 50, offset: 100996},
								name: "EQUAL",
							},
						},
						&labeledExpr{
							pos:   position{line: 3453, col: 57, offset: 101003},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3453, col: 62, offset: 101008},
								expr: &seqExpr{
									pos: position{line: 3453, col: 63, offset: 101009},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 3453, col: 63, offset: 101009},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 3453, col: 69, offset: 101015},
											name: "FieldName",
										},
										&notExpr{
											pos: position{line: 3453, col: 79, offset: 101025},
											expr: &ruleRefExpr{
												pos:  position{line: 3453, col: 81, offset: 101027},
												name: "EQUAL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StartsWithOption",
			pos:  position{line: 3471, col: 1, offset: 101451},
			expr: &actionExpr{
				pos: position{line: 3471, col: 21, offset: 101471},
				run: (*parser).callonStartsWithOption1,
				expr: &seqExpr{
					pos: position{line: 3471, col: 21, offset: 101471},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3471, col: 21, offset: 101471},
							val:        "startswith",
							ignoreCase: false,
							want:       "\"startswith\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3471, col: 34, offset: 101484},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3471, col: 40, offset: 101490},
							label: "strExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 3471, col: 48, offset: 101498},
								name: "TransactionFilterString",
							},
						},
					},
				},
			},
		},
		{
			name: "EndsWithOption",
			pos:  position{line: 3481, col: 1, offset: 101736},
			expr: &actionExpr{
				pos: position{line: 3481, col: 19, offset: 101754},
				run: (*parser).callonEndsWithOption1,
				expr: &seqExpr{
					pos: position{line: 3481, col: 19, offset: 101754},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3481, col: 19, offset: 101754},
							val:        "endswith",
							ignoreCase: false,
							want:       "\"endswith\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3481, col: 30, offset: 101765},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3481, col: 36, offset: 101771},
							label: "strExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 3481, col: 44, offset: 101779},
								name: "TransactionFilterString",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionFilterString",
			pos:  position{line: 3492, col: 1, offset: 102048},
			expr: &actionExpr{
				pos: position{line: 3492, col: 28, offset: 102075},
				run: (*parser).callonTransactionFilterString1,
				expr: &labeledExpr{
					pos:   position{line: 3492, col: 28, offset: 102075},
					label: "strExpr",
					expr: &choiceExpr{
						pos: position{line: 3492, col: 37, offset: 102084},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3492, col: 37, offset: 102084},
								name: "TransactionQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 3492, col: 63, offset: 102110},
								name: "TransactionEval",
							},
							&ruleRefExpr{
								pos:  position{line: 3492, col: 81, offset: 102128},
								name: "TransactionSearch",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionQuotedString",
			pos:  position{line: 3496, col: 1, offset: 102176},
			expr: &actionExpr{
				pos: position{line: 3496, col: 28, offset: 102203},
				run: (*parser).callonTransactionQuotedString1,
				expr: &labeledExpr{
					pos:   position{line: 3496, col: 28, offset: 102203},
					label: "str",
					expr: &choiceExpr{
						pos: position{line: 3496, col: 33, offset: 102208},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3496, col: 33, offset: 102208},
								name: "TransactionQuotedStringValue",
							},
							&ruleRefExpr{
								pos:  position{line: 3496, col: 64, offset: 102239},
								name: "TransactionQuotedStringSearchExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionQuotedStringSearchExpr",
			pos:  position{line: 3500, col: 1, offset: 102299},
			expr: &actionExpr{
				pos: position{line: 3500, col: 38, offset: 102336},
				run: (*parser).callonTransactionQuotedStringSearchExpr1,
				expr: &seqExpr{
					pos: position{line: 3500, col: 38, offset: 102336},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3500, col: 38, offset: 102336},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 3500, col: 42, offset: 102340},
							label: "searchClause",
							expr: &ruleRefExpr{
								pos:  position{line: 3500, col: 55, offset: 102353},
								name: "ClauseLevel4",
							},
						},
						&litMatcher{
							pos:        position{line: 3500, col: 68, offset: 102366},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedStringNoOp",
			pos:  position{line: 3508, col: 1, offset: 102505},
			expr: &actionExpr{
				pos: position{line: 3508, col: 21, offset: 102525},
				run: (*parser).callonQuotedStringNoOp1,
				expr: &seqExpr{
					pos: position{line: 3508, col: 21, offset: 102525},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3508, col: 21, offset: 102525},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 3508, col: 25, offset: 102529},
							expr: &charClassMatcher{
								pos:        position{line: 3508, col: 25, offset: 102529},
								val:        "[^\" !(OR / AND)]",
								chars:      []rune{'"', ' ', '!', '(', 'O', 'R', ' ', '/', ' ', 'A', 'N', 'D', ')'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 3508, col: 44, offset: 102548},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "TransactionQuotedStringValue",
			pos:  position{line: 3513, col: 1, offset: 102659},
			expr: &actionExpr{
				pos: position{line: 3513, col: 33, offset: 102691},
				run: (*parser).callonTransactionQuotedStringValue1,
				expr: &labeledExpr{
					pos:   position{line: 3513, col: 33, offset: 102691},
					label: "str",
					expr: &ruleRefExpr{
						pos:  position{line: 3513, col: 37, offset: 102695},
						name: "QuotedStringNoOp",
					},
				},
			},
		},
		{
			name: "TransactionSearch",
			pos:  position{line: 3521, col: 1, offset: 102850},
			expr: &actionExpr{
				pos: position{line: 3521, col: 22, offset: 102871},
				run: (*parser).callonTransactionSearch1,
				expr: &labeledExpr{
					pos:   position{line: 3521, col: 22, offset: 102871},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 3521, col: 27, offset: 102876},
						name: "ClauseLevel1",
					},
				},
			},
		},
		{
			name: "TransactionEval",
			pos:  position{line: 3531, col: 1, offset: 103048},
			expr: &actionExpr{
				pos: position{line: 3531, col: 20, offset: 103067},
				run: (*parser).callonTransactionEval1,
				expr: &seqExpr{
					pos: position{line: 3531, col: 20, offset: 103067},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3531, col: 20, offset: 103067},
							val:        "eval",
							ignoreCase: false,
							want:       "\"eval\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3531, col: 27, offset: 103074},
							name: "EMPTY_OR_SPACE",
						},
						&ruleRefExpr{
							pos:  position{line: 3531, col: 42, offset: 103089},
							name: "L_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 3531, col: 50, offset: 103097},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 3531, col: 60, offset: 103107},
								name: "BoolExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 3531, col: 69, offset: 103116},
							name: "R_PAREN",
						},
					},
				},
			},
		},
		{
			name: "MultiValueBlock",
			pos:  position{line: 3541, col: 1, offset: 103419},
			expr: &actionExpr{
				pos: position{line: 3541, col: 20, offset: 103438},
				run: (*parser).callonMultiValueBlock1,
				expr: &seqExpr{
					pos: position{line: 3541, col: 20, offset: 103438},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3541, col: 20, offset: 103438},
							name: "PIPE",
						},
						&labeledExpr{
							pos:   position{line: 3541, col: 25, offset: 103443},
							label: "mvQueryAggNode",
							expr: &ruleRefExpr{
								pos:  position{line: 3541, col: 42, offset: 103460},
								name: "MakeMVBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "MakeMVBlock",
			pos:  position{line: 3545, col: 1, offset: 103509},
			expr: &actionExpr{
				pos: position{line: 3545, col: 16, offset: 103524},
				run: (*parser).callonMakeMVBlock1,
				expr: &seqExpr{
					pos: position{line: 3545, col: 16, offset: 103524},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3545, col: 16, offset: 103524},
							name: "CMD_MAKEMV",
						},
						&ruleRefExpr{
							pos:  position{line: 3545, col: 27, offset: 103535},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 3545, col: 33, offset: 103541},
							label: "mvColOptionExpr",
							expr: &zeroOrOneExpr{
								pos: position{line: 3545, col: 50, offset: 103558},
								expr: &ruleRefExpr{
									pos:  position{line: 3545, col: 50, offset: 103558},
									name: "MVBlockOptionsList",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 3545, col: 70, offset: 103578},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 3545, col: 85, offset: 103593},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 3545, col: 91, offset: 103599},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "MVBlockOptionsList",
			pos:  position{line: 3573, col: 1, offset: 104339},
			expr: &actionExpr{
				pos: position{line: 3573, col: 23, offset: 104361},
				run: (*parser).callonMVBlockOptionsList1,
				expr: &seqExpr{
					pos: position{line: 3573, col: 23, offset: 104361},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3573, col: 23, offset: 104361},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 3573, col: 31, offset: 104369},
								name: "MVBlockOption",
							},
						},
						&labeledExpr{
							pos:   position{line: 3573, col: 46, offset: 104384},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3573, col: 52, offset: 104390},
								expr: &seqExpr{
									pos: position{line: 3573, col: 53, offset: 104391},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 3573, col: 53, offset: 104391},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 3573, col: 59, offset: 104397},
											name: "MVBlockOption",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MVBlockOption",
			pos:  position{line: 3607, col: 1, offset: 105453},
			expr: &actionExpr{
				pos: position{line: 3607, col: 18, offset: 105470},
				run: (*parser).callonMVBlockOption1,
				expr: &labeledExpr{
					pos:   position{line: 3607, col: 18, offset: 105470},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 3607, col: 27, offset: 105479},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3607, col: 27, offset: 105479},
								name: "DelimOption",
							},
							&ruleRefExpr{
								pos:  position{line: 3607, col: 41, offset: 105493},
								name: "AllowEmptyOption",
							},
							&ruleRefExpr{
								pos:  position{line: 3607, col: 60, offset: 105512},
								name: "SetSvOption",
							},
						},
					},
				},
			},
		},
		{
			name: "DelimOption",
			pos:  position{line: 3611, col: 1, offset: 105553},
			expr: &actionExpr{
				pos: position{line: 3611, col: 16, offset: 105568},
				run: (*parser).callonDelimOption1,
				expr: &labeledExpr{
					pos:   position{line: 3611, col: 16, offset: 105568},
					label: "delimExpr",
					expr: &choiceExpr{
						pos: position{line: 3611, col: 28, offset: 105580},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3611, col: 28, offset: 105580},
								name: "StringDelimiter",
							},
							&ruleRefExpr{
								pos:  position{line: 3611, col: 46, offset: 105598},
								name: "RegexDelimiter",
							},
						},
					},
				},
			},
		},
		{
			name: "StringDelimiter",
			pos:  position{line: 3615, col: 1, offset: 105645},
			expr: &actionExpr{
				pos: position{line: 3615, col: 20, offset: 105664},
				run: (*parser).callonStringDelimiter1,
				expr: &seqExpr{
					pos: position{line: 3615, col: 20, offset: 105664},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3615, col: 20, offset: 105664},
							val:        "delim",
							ignoreCase: false,
							want:       "\"delim\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3615, col: 28, offset: 105672},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3615, col: 34, offset: 105678},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 3615, col: 38, offset: 105682},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexDelimiter",
			pos:  position{line: 3626, col: 1, offset: 105933},
			expr: &actionExpr{
				pos: position{line: 3626, col: 19, offset: 105951},
				run: (*parser).callonRegexDelimiter1,
				expr: &seqExpr{
					pos: position{line: 3626, col: 19, offset: 105951},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3626, col: 19, offset: 105951},
							val:        "tokenizer",
							ignoreCase: false,
							want:       "\"tokenizer\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3626, col: 31, offset: 105963},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3626, col: 37, offset: 105969},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 3626, col: 41, offset: 105973},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "AllowEmptyOption",
			pos:  position{line: 3644, col: 1, offset: 106444},
			expr: &actionExpr{
				pos: position{line: 3644, col: 21, offset: 106464},
				run: (*parser).callonAllowEmptyOption1,
				expr: &seqExpr{
					pos: position{line: 3644, col: 21, offset: 106464},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3644, col: 21, offset: 106464},
							val:        "allowempty",
							ignoreCase: false,
							want:       "\"allowempty\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3644, col: 34, offset: 106477},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3644, col: 40, offset: 106483},
							label: "boolVal",
							expr: &ruleRefExpr{
								pos:  position{line: 3644, col: 48, offset: 106491},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "SetSvOption",
			pos:  position{line: 3656, col: 1, offset: 106731},
			expr: &actionExpr{
				pos: position{line: 3656, col: 16, offset: 106746},
				run: (*parser).callonSetSvOption1,
				expr: &seqExpr{
					pos: position{line: 3656, col: 16, offset: 106746},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3656, col: 16, offset: 106746},
							val:        "setsv",
							ignoreCase: false,
							want:       "\"setsv\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3656, col: 24, offset: 106754},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3656, col: 30, offset: 106760},
							label: "boolVal",
							expr: &ruleRefExpr{
								pos:  position{line: 3656, col: 38, offset: 106768},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "SPathBlock",
			pos:  position{line: 3668, col: 1, offset: 107033},
			expr: &actionExpr{
				pos: position{line: 3668, col: 15, offset: 107047},
				run: (*parser).callonSPathBlock1,
				expr: &seqExpr{
					pos: position{line: 3668, col: 15, offset: 107047},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3668, col: 15, offset: 107047},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 3668, col: 20, offset: 107052},
							name: "CMD_SPATH",
						},
						&labeledExpr{
							pos:   position{line: 3668, col: 30, offset: 107062},
							label: "spathExpr",
							expr: &zeroOrOneExpr{
								pos: position{line: 3668, col: 40, offset: 107072},
								expr: &ruleRefExpr{
									pos:  position{line: 3668, col: 40, offset: 107072},
									name: "SPathArgumentsList",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SPathArgumentsList",
			pos:  position{line: 3675, col: 1, offset: 107198},
			expr: &actionExpr{
				pos: position{line: 3675, col: 23, offset: 107220},
				run: (*parser).callonSPathArgumentsList1,
				expr: &seqExpr{
					pos: position{line: 3675, col: 23, offset: 107220},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3675, col: 23, offset: 107220},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 3675, col: 29, offset: 107226},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 3675, col: 35, offset: 107232},
								name: "SPathArgument",
							},
						},
						&labeledExpr{
							pos:   position{line: 3675, col: 49, offset: 107246},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3675, col: 54, offset: 107251},
								expr: &seqExpr{
									pos: position{line: 3675, col: 55, offset: 107252},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 3675, col: 55, offset: 107252},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 3675, col: 61, offset: 107258},
											name: "SPathArgument",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SPathArgument",
			pos:  position{line: 3707, col: 1, offset: 108151},
			expr: &actionExpr{
				pos: position{line: 3707, col: 18, offset: 108168},
				run: (*parser).callonSPathArgument1,
				expr: &labeledExpr{
					pos:   position{line: 3707, col: 18, offset: 108168},
					label: "arg",
					expr: &choiceExpr{
						pos: position{line: 3707, col: 23, offset: 108173},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3707, col: 23, offset: 108173},
								name: "InputField",
							},
							&ruleRefExpr{
								pos:  position{line: 3707, col: 36, offset: 108186},
								name: "OutputField",
							},
							&ruleRefExpr{
								pos:  position{line: 3707, col: 50, offset: 108200},
								name: "PathField",
							},
						},
					},
				},
			},
		},
		{
			name: "InputField",
			pos:  position{line: 3711, col: 1, offset: 108236},
			expr: &actionExpr{
				pos: position{line: 3711, col: 15, offset: 108250},
				run: (*parser).callonInputField1,
				expr: &seqExpr{
					pos: position{line: 3711, col: 15, offset: 108250},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3711, col: 15, offset: 108250},
							val:        "input",
							ignoreCase: false,
							want:       "\"input\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3711, col: 23, offset: 108258},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3711, col: 29, offset: 108264},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 3711, col: 35, offset: 108270},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "OutputField",
			pos:  position{line: 3714, col: 1, offset: 108326},
			expr: &actionExpr{
				pos: position{line: 3714, col: 16, offset: 108341},
				run: (*parser).callonOutputField1,
				expr: &seqExpr{
					pos: position{line: 3714, col: 16, offset: 108341},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3714, col: 16, offset: 108341},
							val:        "output",
							ignoreCase: false,
							want:       "\"output\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3714, col: 25, offset: 108350},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3714, col: 31, offset: 108356},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 3714, col: 37, offset: 108362},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "PathField",
			pos:  position{line: 3717, col: 1, offset: 108419},
			expr: &actionExpr{
				pos: position{line: 3717, col: 14, offset: 108432},
				run: (*parser).callonPathField1,
				expr: &choiceExpr{
					pos: position{line: 3717, col: 15, offset: 108433},
					alternatives: []any{
						&seqExpr{
							pos: position{line: 3717, col: 15, offset: 108433},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3717, col: 15, offset: 108433},
									val:        "path",
									ignoreCase: false,
									want:       "\"path\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3717, col: 22, offset: 108440},
									name: "EQUAL",
								},
								&ruleRefExpr{
									pos:  position{line: 3717, col: 28, offset: 108446},
									name: "SPathFieldString",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 3717, col: 47, offset: 108465},
							name: "SPathFieldString",
						},
					},
				},
			},
		},
		{
			name: "SPathFieldString",
			pos:  position{line: 3729, col: 1, offset: 108877},
			expr: &choiceExpr{
				pos: position{line: 3729, col: 21, offset: 108897},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 3729, col: 21, offset: 108897},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 3729, col: 36, offset: 108912},
						name: "UnquotedStringWithTemplateWildCard",
					},
				},
			},
		},
		{
			name: "FormatBlock",
			pos:  position{line: 3732, col: 1, offset: 108985},
			expr: &actionExpr{
				pos: position{line: 3732, col: 16, offset: 109000},
				run: (*parser).callonFormatBlock1,
				expr: &seqExpr{
					pos: position{line: 3732, col: 16, offset: 109000},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3732, col: 16, offset: 109000},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 3732, col: 21, offset: 109005},
							name: "CMD_FORMAT",
						},
						&labeledExpr{
							pos:   position{line: 3732, col: 32, offset: 109016},
							label: "formatArgExpr",
							expr: &zeroOrOneExpr{
								pos: position{line: 3732, col: 46, offset: 109030},
								expr: &ruleRefExpr{
									pos:  position{line: 3732, col: 46, offset: 109030},
									name: "FormatArgumentsList",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FormatArgumentsList",
			pos:  position{line: 3754, col: 1, offset: 109639},
			expr: &actionExpr{
				pos: position{line: 3754, col: 24, offset: 109662},
				run: (*parser).callonFormatArgumentsList1,
				expr: &seqExpr{
					pos: position{line: 3754, col: 24, offset: 109662},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3754, col: 24, offset: 109662},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 3754, col: 30, offset: 109668},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 3754, col: 37, offset: 109675},
								name: "FormatArgument",
							},
						},
						&labeledExpr{
							pos:   position{line: 3754, col: 52, offset: 109690},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3754, col: 57, offset: 109695},
								expr: &seqExpr{
									pos: position{line: 3754, col: 58, offset: 109696},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 3754, col: 58, offset: 109696},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 3754, col: 64, offset: 109702},
											name: "FormatArgument",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FormatArgument",
			pos:  position{line: 3788, col: 1, offset: 110891},
			expr: &actionExpr{
				pos: position{line: 3788, col: 19, offset: 110909},
				run: (*parser).callonFormatArgument1,
				expr: &labeledExpr{
					pos:   position{line: 3788, col: 19, offset: 110909},
					label: "argExpr",
					expr: &choiceExpr{
						pos: position{line: 3788, col: 28, offset: 110918},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3788, col: 28, offset: 110918},
								name: "FormatSeparator",
							},
							&ruleRefExpr{
								pos:  position{line: 3788, col: 46, offset: 110936},
								name: "FormatMaxResults",
							},
							&ruleRefExpr{
								pos:  position{line: 3788, col: 65, offset: 110955},
								name: "FormatEmptyStr",
							},
							&ruleRefExpr{
								pos:  position{line: 3788, col: 82, offset: 110972},
								name: "FormatRowColOptions",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatSeparator",
			pos:  position{line: 3792, col: 1, offset: 111022},
			expr: &actionExpr{
				pos: position{line: 3792, col: 20, offset: 111041},
				run: (*parser).callonFormatSeparator1,
				expr: &seqExpr{
					pos: position{line: 3792, col: 20, offset: 111041},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3792, col: 20, offset: 111041},
							val:        "mvsep",
							ignoreCase: false,
							want:       "\"mvsep\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3792, col: 28, offset: 111049},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3792, col: 34, offset: 111055},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 3792, col: 38, offset: 111059},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatMaxResults",
			pos:  position{line: 3801, col: 1, offset: 111271},
			expr: &actionExpr{
				pos: position{line: 3801, col: 21, offset: 111291},
				run: (*parser).callonFormatMaxResults1,
				expr: &seqExpr{
					pos: position{line: 3801, col: 21, offset: 111291},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3801, col: 21, offset: 111291},
							val:        "maxresults",
							ignoreCase: false,
							want:       "\"maxresults\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3801, col: 34, offset: 111304},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3801, col: 40, offset: 111310},
							label: "numStr",
							expr: &ruleRefExpr{
								pos:  position{line: 3801, col: 47, offset: 111317},
								name: "IntegerAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatEmptyStr",
			pos:  position{line: 3814, col: 1, offset: 111723},
			expr: &actionExpr{
				pos: position{line: 3814, col: 19, offset: 111741},
				run: (*parser).callonFormatEmptyStr1,
				expr: &seqExpr{
					pos: position{line: 3814, col: 19, offset: 111741},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3814, col: 19, offset: 111741},
							val:        "emptystr",
							ignoreCase: false,
							want:       "\"emptystr\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3814, col: 30, offset: 111752},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3814, col: 36, offset: 111758},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 3814, col: 40, offset: 111762},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatRowColOptions",
			pos:  position{line: 3823, col: 1, offset: 111977},
			expr: &actionExpr{
				pos: position{line: 3823, col: 24, offset: 112000},
				run: (*parser).callonFormatRowColOptions1,
				expr: &seqExpr{
					pos: position{line: 3823, col: 24, offset: 112000},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3823, col: 24, offset: 112000},
							label: "rowPrefix",
							expr: &ruleRefExpr{
								pos:  position{line: 3823, col: 34, offset: 112010},
								name: "QuotedString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 3823, col: 47, offset: 112023},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 3823, col: 53, offset: 112029},
							label: "colPrefix",
							expr: &ruleRefExpr{
								pos:  position{line: 3823, col: 63, offset: 112039},
								name: "QuotedString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 3823, col: 76, offset: 112052},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 3823, col: 82, offset: 112058},
							label: "colSeparator",
							expr: &ruleRefExpr{
								pos:  position{line: 3823, col: 95, offset: 112071},
								name: "QuotedString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 3823, col: 108, offset: 112084},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 3823, col: 114, offset: 112090},
							label: "colEnd",
							expr: &ruleRefExpr{
								pos:  position{line: 3823, col: 121, offset: 112097},
								name: "QuotedString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 3823, col: 134, offset: 112110},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 3823, col: 140, offset: 112116},
							label: "rowSeparator",
							expr: &ruleRefExpr{
								pos:  position{line: 3823, col: 153, offset: 112129},
								name: "QuotedString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 3823, col: 166, offset: 112142},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 3823, col: 172, offset: 112148},
							label: "rowEnd",
							expr: &ruleRefExpr{
								pos:  position{line: 3823, col: 179, offset: 112155},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "ALLCMD",
			pos:  position{line: 3843, col: 1, offset: 112761},
			expr: &choiceExpr{
				pos: position{line: 3843, col: 12, offset: 112772},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 3843, col: 12, offset: 112772},
						name: "CMD_REGEX",
					},
					&ruleRefExpr{
						pos:  position{line: 3843, col: 24, offset: 112784},
						name: "CMD_STATS",
					},
					&ruleRefExpr{
						pos:  position{line: 3843, col: 36, offset: 112796},
						name: "CMD_FIELDS",
					},
					&ruleRefExpr{
						pos:  position{line: 3843, col: 49, offset: 112809},
						name: "CMD_WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 3843, col: 61, offset: 112821},
						name: "CMD_HEAD_NO_SPACE",
					},
					&ruleRefExpr{
						pos:  position{line: 3843, col: 81, offset: 112841},
						name: "CMD_HEAD",
					},
					&ruleRefExpr{
						pos:  position{line: 3843, col: 92, offset: 112852},
						name: "CMD_EVAL",
					},
					&ruleRefExpr{
						pos:  position{line: 3843, col: 103, offset: 112863},
						name: "CMD_REX",
					},
					&ruleRefExpr{
						pos:  position{line: 3843, col: 113, offset: 112873},
						name: "CMD_TOP",
					},
					&ruleRefExpr{
						pos:  position{line: 3843, col: 123, offset: 112883},
						name: "CMD_RARE",
					},
					&ruleRefExpr{
						pos:  position{line: 3843, col: 134, offset: 112894},
						name: "CMD_RENAME",
					},
					&ruleRefExpr{
						pos:  position{line: 3843, col: 147, offset: 112907},
						name: "CMD_TIMECHART",
					},
					&ruleRefExpr{
						pos:  position{line: 3843, col: 163, offset: 112923},
						name: "CMD_TRANSACTION",
					},
					&ruleRefExpr{
						pos:  position{line: 3843, col: 181, offset: 112941},
						name: "CMD_DEDUP",
					},
					&ruleRefExpr{
						pos:  position{line: 3843, col: 193, offset: 112953},
						name: "CMD_SORT",
					},
					&ruleRefExpr{
						pos:  position{line: 3843, col: 204, offset: 112964},
						name: "CMD_MAKEMV",
					},
					&ruleRefExpr{
						pos:  position{line: 3843, col: 217, offset: 112977},
						name: "CMD_SPATH",
					},
					&ruleRefExpr{
						pos:  position{line: 3843, col: 229, offset: 112989},
						name: "CMD_FORMAT",
					},
				},
			},
		},
		{
			name: "CMD_SEARCH",
			pos:  position{line: 3844, col: 1, offset: 113001},
			expr: &seqExpr{
				pos: position{line: 3844, col: 15, offset: 113015},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3844, col: 15, offset: 113015},
						val:        "search",
						ignoreCase: false,
						want:       "\"search\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3844, col: 24, offset: 113024},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_REGEX",
			pos:  position{line: 3845, col: 1, offset: 113030},
			expr: &seqExpr{
				pos: position{line: 3845, col: 14, offset: 113043},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3845, col: 14, offset: 113043},
						val:        "regex",
						ignoreCase: false,
						want:       "\"regex\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3845, col: 22, offset: 113051},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_STATS",
			pos:  position{line: 3846, col: 1, offset: 113057},
			expr: &seqExpr{
				pos: position{line: 3846, col: 14, offset: 113070},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3846, col: 14, offset: 113070},
						val:        "stats",
						ignoreCase: false,
						want:       "\"stats\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3846, col: 22, offset: 113078},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_FIELDS",
			pos:  position{line: 3847, col: 1, offset: 113084},
			expr: &seqExpr{
				pos: position{line: 3847, col: 15, offset: 113098},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3847, col: 15, offset: 113098},
						val:        "fields",
						ignoreCase: false,
						want:       "\"fields\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3847, col: 24, offset: 113107},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_WHERE",
			pos:  position{line: 3848, col: 1, offset: 113113},
			expr: &seqExpr{
				pos: position{line: 3848, col: 14, offset: 113126},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3848, col: 14, offset: 113126},
						val:        "where",
						ignoreCase: false,
						want:       "\"where\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3848, col: 22, offset: 113134},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_HEAD_NO_SPACE",
			pos:  position{line: 3849, col: 1, offset: 113140},
			expr: &litMatcher{
				pos:        position{line: 3849, col: 22, offset: 113161},
				val:        "head",
				ignoreCase: false,
				want:       "\"head\"",
			},
		},
		{
			name: "CMD_HEAD",
			pos:  position{line: 3850, col: 1, offset: 113168},
			expr: &seqExpr{
				pos: position{line: 3850, col: 13, offset: 113180},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3850, col: 13, offset: 113180},
						name: "CMD_HEAD_NO_SPACE",
					},
					&ruleRefExpr{
						pos:  position{line: 3850, col: 31, offset: 113198},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_EVAL",
			pos:  position{line: 3851, col: 1, offset: 113204},
			expr: &seqExpr{
				pos: position{line: 3851, col: 13, offset: 113216},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3851, col: 13, offset: 113216},
						val:        "eval",
						ignoreCase: false,
						want:       "\"eval\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3851, col: 20, offset: 113223},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_REX",
			pos:  position{line: 3852, col: 1, offset: 113229},
			expr: &seqExpr{
				pos: position{line: 3852, col: 12, offset: 113240},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3852, col: 12, offset: 113240},
						val:        "rex",
						ignoreCase: false,
						want:       "\"rex\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3852, col: 18, offset: 113246},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_SORT",
			pos:  position{line: 3853, col: 1, offset: 113252},
			expr: &seqExpr{
				pos: position{line: 3853, col: 13, offset: 113264},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3853, col: 13, offset: 113264},
						val:        "sort",
						ignoreCase: false,
						want:       "\"sort\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3853, col: 20, offset: 113271},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_TOP",
			pos:  position{line: 3854, col: 1, offset: 113277},
			expr: &litMatcher{
				pos:        position{line: 3854, col: 12, offset: 113288},
				val:        "top",
				ignoreCase: false,
				want:       "\"top\"",
			},
		},
		{
			name: "CMD_RARE",
			pos:  position{line: 3855, col: 1, offset: 113294},
			expr: &litMatcher{
				pos:        position{line: 3855, col: 13, offset: 113306},
				val:        "rare",
				ignoreCase: false,
				want:       "\"rare\"",
			},
		},
		{
			name: "CMD_RENAME",
			pos:  position{line: 3856, col: 1, offset: 113313},
			expr: &seqExpr{
				pos: position{line: 3856, col: 15, offset: 113327},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3856, col: 15, offset: 113327},
						val:        "rename",
						ignoreCase: false,
						want:       "\"rename\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3856, col: 24, offset: 113336},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_TIMECHART",
			pos:  position{line: 3857, col: 1, offset: 113342},
			expr: &seqExpr{
				pos: position{line: 3857, col: 18, offset: 113359},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3857, col: 18, offset: 113359},
						val:        "timechart",
						ignoreCase: false,
						want:       "\"timechart\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3857, col: 30, offset: 113371},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_SPAN",
			pos:  position{line: 3858, col: 1, offset: 113377},
			expr: &litMatcher{
				pos:        position{line: 3858, col: 13, offset: 113389},
				val:        "span",
				ignoreCase: false,
				want:       "\"span\"",
			},
		},
		{
			name: "CMD_TRANSACTION",
			pos:  position{line: 3859, col: 1, offset: 113396},
			expr: &seqExpr{
				pos: position{line: 3859, col: 20, offset: 113415},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3859, col: 20, offset: 113415},
						val:        "transaction",
						ignoreCase: false,
						want:       "\"transaction\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3859, col: 34, offset: 113429},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_DEDUP",
			pos:  position{line: 3860, col: 1, offset: 113435},
			expr: &litMatcher{
				pos:        position{line: 3860, col: 14, offset: 113448},
				val:        "dedup",
				ignoreCase: false,
				want:       "\"dedup\"",
			},
		},
		{
			name: "CMD_DEDUP_SORTBY",
			pos:  position{line: 3861, col: 1, offset: 113456},
			expr: &seqExpr{
				pos: position{line: 3861, col: 21, offset: 113476},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3861, col: 21, offset: 113476},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 3861, col: 27, offset: 113482},
						val:        "sortby",
						ignoreCase: false,
						want:       "\"sortby\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3861, col: 36, offset: 113491},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_MAKEMV",
			pos:  position{line: 3862, col: 1, offset: 113497},
			expr: &litMatcher{
				pos:        position{line: 3862, col: 15, offset: 113511},
				val:        "makemv",
				ignoreCase: false,
				want:       "\"makemv\"",
			},
		},
		{
			name: "CMD_SPATH",
			pos:  position{line: 3863, col: 1, offset: 113520},
			expr: &litMatcher{
				pos:        position{line: 3863, col: 14, offset: 113533},
				val:        "spath",
				ignoreCase: false,
				want:       "\"spath\"",
			},
		},
		{
			name: "CMD_FORMAT",
			pos:  position{line: 3864, col: 1, offset: 113541},
			expr: &litMatcher{
				pos:        position{line: 3864, col: 15, offset: 113555},
				val:        "format",
				ignoreCase: false,
				want:       "\"format\"",
			},
		},
		{
			name: "EVAL_CONCAT",
			pos:  position{line: 3865, col: 1, offset: 113564},
			expr: &seqExpr{
				pos: position{line: 3865, col: 16, offset: 113579},
				exprs: []any{
					&zeroOrOneExpr{
						pos: position{line: 3865, col: 16, offset: 113579},
						expr: &ruleRefExpr{
							pos:  position{line: 3865, col: 16, offset: 113579},
							name: "SPACE",
						},
					},
					&litMatcher{
						pos:        position{line: 3865, col: 23, offset: 113586},
						val:        ".",
						ignoreCase: false,
						want:       "\".\"",
					},
					&zeroOrOneExpr{
						pos: position{line: 3865, col: 27, offset: 113590},
						expr: &ruleRefExpr{
							pos:  position{line: 3865, col: 27, offset: 113590},
							name: "SPACE",
						},
					},
				},
			},
		},
		{
			name: "MAJOR_BREAK",
			pos:  position{line: 3868, col: 1, offset: 113701},
			expr: &choiceExpr{
				pos: position{line: 3868, col: 16, offset: 113716},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 3868, col: 16, offset: 113716},
						val:        "[[\\]<>(){}|!;,'\"*\\n\\r \\t&?+]",
						chars:      []rune{'[', ']', '<', '>', '(', ')', '{', '}', '|', '!', ';', ',', '\'', '"', '*', '\n', '\r', ' ', '\t', '&', '?', '+'},
						ignoreCase: false,
						inverted:   false,
					},
					&litMatcher{
						pos:        position{line: 3868, col: 47, offset: 113747},
						val:        "%21",
						ignoreCase: false,
						want:       "\"%21\"",
					},
					&litMatcher{
						pos:        position{line: 3868, col: 55, offset: 113755},
						val:        "%26",
						ignoreCase: false,
						want:       "\"%26\"",
					},
					&litMatcher{
						pos:        position{line: 3869, col: 16, offset: 113778},
						val:        "%2526",
						ignoreCase: false,
						want:       "\"%2526\"",
					},
					&litMatcher{
						pos:        position{line: 3869, col: 26, offset: 113788},
						val:        "%3B",
						ignoreCase: false,
						want:       "\"%3B\"",
					},
					&litMatcher{
						pos:        position{line: 3869, col: 34, offset: 113796},
						val:        "%7C",
						ignoreCase: false,
						want:       "\"%7C\"",
					},
					&litMatcher{
						pos:        position{line: 3869, col: 42, offset: 113804},
						val:        "%20",
						ignoreCase: false,
						want:       "\"%20\"",
					},
					&litMatcher{
						pos:        position{line: 3869, col: 50, offset: 113812},
						val:        "%2B",
						ignoreCase: false,
						want:       "\"%2B\"",
					},
					&litMatcher{
						pos:        position{line: 3869, col: 58, offset: 113820},
						val:        "%3D",
						ignoreCase: false,
						want:       "\"%3D\"",
					},
					&litMatcher{
						pos:        position{line: 3869, col: 66, offset: 113828},
						val:        "--",
						ignoreCase: false,
						want:       "\"--\"",
					},
					&litMatcher{
						pos:        position{line: 3870, col: 16, offset: 113850},
						val:        "%2520",
						ignoreCase: false,
						want:       "\"%2520\"",
					},
					&litMatcher{
						pos:        position{line: 3870, col: 26, offset: 113860},
						val:        "%5D",
						ignoreCase: false,
						want:       "\"%5D\"",
					},
					&litMatcher{
						pos:        position{line: 3870, col: 34, offset: 113868},
						val:        "%5B",
						ignoreCase: false,
						want:       "\"%5B\"",
					},
					&litMatcher{
						pos:        position{line: 3870, col: 42, offset: 113876},
						val:        "%3A",
						ignoreCase: false,
						want:       "\"%3A\"",
					},
					&litMatcher{
						pos:        position{line: 3870, col: 50, offset: 113884},
						val:        "%0A",
						ignoreCase: false,
						want:       "\"%0A\"",
					},
					&litMatcher{
						pos:        position{line: 3870, col: 58, offset: 113892},
						val:        "%2C",
						ignoreCase: false,
						want:       "\"%2C\"",
					},
					&litMatcher{
						pos:        position{line: 3870, col: 66, offset: 113900},
						val:        "%28",
						ignoreCase: false,
						want:       "\"%28\"",
					},
					&litMatcher{
						pos:        position{line: 3870, col: 74, offset: 113908},
						val:        "%29",
						ignoreCase: false,
						want:       "\"%29\"",
					},
				},
			},
		},
		{
			name: "MINOR_BREAK",
			pos:  position{line: 3871, col: 1, offset: 113914},
			expr: &choiceExpr{
				pos: position{line: 3871, col: 16, offset: 113929},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 3871, col: 16, offset: 113929},
						val:        "[/:=@.$#%_]",
						chars:      []rune{'/', ':', '=', '@', '.', '$', '#', '%', '_'},
						ignoreCase: false,
						inverted:   false,
					},
					&litMatcher{
						pos:        position{line: 3871, col: 30, offset: 113943},
						val:        "-",
						ignoreCase: false,
						want:       "\"-\"",
					},
					&litMatcher{
						pos:        position{line: 3871, col: 36, offset: 113949},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "NOT",
			pos:  position{line: 3875, col: 1, offset: 114105},
			expr: &seqExpr{
				pos: position{line: 3875, col: 8, offset: 114112},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3875, col: 8, offset: 114112},
						val:        "NOT",
						ignoreCase: false,
						want:       "\"NOT\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3875, col: 14, offset: 114118},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "OR",
			pos:  position{line: 3876, col: 1, offset: 114124},
			expr: &seqExpr{
				pos: position{line: 3876, col: 7, offset: 114130},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3876, col: 7, offset: 114130},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 3876, col: 13, offset: 114136},
						val:        "OR",
						ignoreCase: false,
						want:       "\"OR\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3876, col: 18, offset: 114141},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "AND",
			pos:  position{line: 3877, col: 1, offset: 114147},
			expr: &seqExpr{
				pos: position{line: 3877, col: 8, offset: 114154},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3877, col: 8, offset: 114154},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 3877, col: 14, offset: 114160},
						val:        "AND",
						ignoreCase: false,
						want:       "\"AND\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3877, col: 20, offset: 114166},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "PIPE",
			pos:  position{line: 3878, col: 1, offset: 114172},
			expr: &seqExpr{
				pos: position{line: 3878, col: 9, offset: 114180},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3878, col: 9, offset: 114180},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 3878, col: 24, offset: 114195},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3878, col: 28, offset: 114199},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 3879, col: 1, offset: 114214},
			expr: &seqExpr{
				pos: position{line: 3879, col: 7, offset: 114220},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3879, col: 7, offset: 114220},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 3879, col: 13, offset: 114226},
						val:        "as",
						ignoreCase: true,
						want:       "\"AS\"i",
					},
					&ruleRefExpr{
						pos:  position{line: 3879, col: 19, offset: 114232},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 3880, col: 1, offset: 114258},
			expr: &seqExpr{
				pos: position{line: 3880, col: 7, offset: 114264},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3880, col: 7, offset: 114264},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 3880, col: 13, offset: 114270},
						val:        "by",
						ignoreCase: true,
						want:       "\"BY\"i",
					},
					&ruleRefExpr{
						pos:  position{line: 3880, col: 19, offset: 114276},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "EQUAL",
			pos:  position{line: 3882, col: 1, offset: 114303},
			expr: &seqExpr{
				pos: position{line: 3882, col: 10, offset: 114312},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3882, col: 10, offset: 114312},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 3882, col: 25, offset: 114327},
						val:        "=",
						ignoreCase: false,
						want:       "\"=\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3882, col: 29, offset: 114331},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "COMMA",
			pos:  position{line: 3883, col: 1, offset: 114346},
			expr: &seqExpr{
				pos: position{line: 3883, col: 10, offset: 114355},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3883, col: 10, offset: 114355},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 3883, col: 25, offset: 114370},
						val:        ",",
						ignoreCase: false,
						want:       "\",\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3883, col: 29, offset: 114374},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "L_PAREN",
			pos:  position{line: 3884, col: 1, offset: 114389},
			expr: &seqExpr{
				pos: position{line: 3884, col: 12, offset: 114400},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3884, col: 12, offset: 114400},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3884, col: 16, offset: 114404},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "R_PAREN",
			pos:  position{line: 3885, col: 1, offset: 114419},
			expr: &seqExpr{
				pos: position{line: 3885, col: 12, offset: 114430},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3885, col: 12, offset: 114430},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 3885, col: 27, offset: 114445},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 3887, col: 1, offset: 114450},
			expr: &notExpr{
				pos: position{line: 3887, col: 8, offset: 114457},
				expr: &anyMatcher{
					line: 3887, col: 9, offset: 114458,
				},
			},
		},
		{
			name: "WHITESPACE",
			pos:  position{line: 3888, col: 1, offset: 114460},
			expr: &choiceExpr{
				pos: position{line: 3888, col: 15, offset: 114474},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 3888, col: 15, offset: 114474},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&litMatcher{
						pos:        position{line: 3888, col: 21, offset: 114480},
						val:        "\t",
						ignoreCase: false,
						want:       "\"\\t\"",
					},
					&litMatcher{
						pos:        position{line: 3888, col: 28, offset: 114487},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
					&litMatcher{
						pos:        position{line: 3888, col: 35, offset: 114494},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
				},
			},
		},
		{
			name: "SPACE",
			pos:  position{line: 3889, col: 1, offset: 114499},
			expr: &choiceExpr{
				pos: position{line: 3889, col: 10, offset: 114508},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 3889, col: 11, offset: 114509},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 3889, col: 11, offset: 114509},
								expr: &ruleRefExpr{
									pos:  position{line: 3889, col: 11, offset: 114509},
									name: "WHITESPACE",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 3889, col: 23, offset: 114521},
								name: "COMMENT",
							},
							&zeroOrOneExpr{
								pos: position{line: 3889, col: 31, offset: 114529},
								expr: &ruleRefExpr{
									pos:  position{line: 3889, col: 31, offset: 114529},
									name: "WHITESPACE",
								},
							},
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 3889, col: 46, offset: 114544},
						expr: &ruleRefExpr{
							pos:  position{line: 3889, col: 46, offset: 114544},
							name: "WHITESPACE",
						},
					},
				},
			},
		},
		{
			name: "COMMENT",
			pos:  position{line: 3890, col: 1, offset: 114556},
			expr: &seqExpr{
				pos: position{line: 3890, col: 12, offset: 114567},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3890, col: 12, offset: 114567},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 3890, col: 18, offset: 114573},
						expr: &seqExpr{
							pos: position{line: 3890, col: 19, offset: 114574},
							exprs: []any{
								&notExpr{
									pos: position{line: 3890, col: 19, offset: 114574},
									expr: &litMatcher{
										pos:        position{line: 3890, col: 21, offset: 114576},
										val:        "```",
										ignoreCase: false,
										want:       "\"```\"",
									},
								},
								&anyMatcher{
									line: 3890, col: 28, offset: 114583,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 3890, col: 32, offset: 114587},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
				},
			},
		},
		{
			name: "EMPTY_OR_SPACE",
			pos:  position{line: 3891, col: 1, offset: 114593},
			expr: &choiceExpr{
				pos: position{line: 3891, col: 20, offset: 114612},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 3891, col: 20, offset: 114612},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 3891, col: 28, offset: 114620},
						val:        "",
						ignoreCase: false,
						want:       "\"\"",
					},
				},
			},
		},
		{
			name: "SPACE_OR_COMMA",
			pos:  position{line: 3892, col: 1, offset: 114623},
			expr: &choiceExpr{
				pos: position{line: 3892, col: 19, offset: 114641},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 3892, col: 19, offset: 114641},
						name: "COMMA",
					},
					&ruleRefExpr{
						pos:  position{line: 3892, col: 27, offset: 114649},
						name: "SPACE",
					},
				},
			},
		},
	},
}

func (c *current) onStart1(initialSearch, filterBlocks, queryAggBlocks any) (any, error) {
	var q ast.QueryStruct
	q.SearchFilter = initialSearch.(*ast.Node)

	// Join the InitialSearchBlock with the FilterBlocks with AND nodes. For a
	// search like "A | B | C | D" we should generate the node structure below
	// so that when we run the search it evaluates A first.
	//
	//      AND
	//     /   \
	//    A     AND
	//         /   \
	//        B     AND
	//             /   \
	//            C     D

	filterBlocksSlice := filterBlocks.([]any)
	switch len(filterBlocksSlice) {
	case 0:
		q.SearchFilter = initialSearch.(*ast.Node)
	case 1:
		q.SearchFilter = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     initialSearch.(*ast.Node),
			Right:    filterBlocksSlice[0].(*ast.Node),
		}
	default: // len > 1
		// Iterate backwards so we build the node structure mentioned above.
		root := filterBlocksSlice[len(filterBlocksSlice)-1].(*ast.Node)
		for i := len(filterBlocksSlice) - 2; i > -1; i-- {
			newRoot := &ast.Node{
				NodeType: ast.NodeAnd,
				Left:     filterBlocksSlice[i].(*ast.Node),
				Right:    root,
			}

			root = newRoot
		}

		q.SearchFilter = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     initialSearch.(*ast.Node),
			Right:    root,
		}
	}

	if queryAggBlocks != nil {
		queryAggSlice := queryAggBlocks.([]any)

		if len(queryAggSlice) > 0 {
			// Chain together all QueryAggergators.
			q.PipeCommands = queryAggSlice[0].(*structs.QueryAggregators)

			// Go to the end of the first chain.
			curQueryAgg := q.PipeCommands
			for ; curQueryAgg.Next != nil; curQueryAgg = curQueryAgg.Next {
			}

			// Link the remaining chains.
			for i := range queryAggSlice[1:] {
				queryAgg := queryAggSlice[i+1].(*structs.QueryAggregators)
				curQueryAgg.Next = queryAgg

				// Go to the end of this chain.
				for ; curQueryAgg.Next != nil; curQueryAgg = curQueryAgg.Next {
				}
			}
		}
	}

	return q, nil
}

func (p *parser) callonStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStart1(stack["initialSearch"], stack["filterBlocks"], stack["queryAggBlocks"])
}

func (c *current) onInitialSearchBlock1(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonInitialSearchBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialSearchBlock1(stack["clause"])
}

func (c *current) onSearchBlock1(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonSearchBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBlock1(stack["clause"])
}

func (c *current) onFilterBlock1(block any) (any, error) {
	return block, nil
}

func (p *parser) callonFilterBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterBlock1(stack["block"])
}

func (c *current) onQueryAggergatorBlock1(block any) (any, error) {
	queryAgg := block.(*structs.QueryAggregators)
	return queryAgg, nil
}

func (p *parser) callonQueryAggergatorBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQueryAggergatorBlock1(stack["block"])
}

func (c *current) onFieldSelectBlock1(op, fields any) (any, error) {
	columnsRequest := &structs.ColumnsRequest{}
	if op == nil || string(op.([]byte)) == "+" {
		columnsRequest.IncludeColumns = fields.([]string)
	} else {
		columnsRequest.ExcludeColumns = fields.([]string)
	}

	queryAggregator := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			OutputColumns: columnsRequest,
		},
	}

	return queryAggregator, nil
}

func (p *parser) callonFieldSelectBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldSelectBlock1(stack["op"], stack["fields"])
}

func (c *current) onAggregatorBlock1(aggs, byFields, options any) (any, error) {
	aggNode := &structs.QueryAggregators{}

	// Extract the MeasureAggregators and check if any of the aggregation fields
	// need to be renamed.
	aggsSlice := aggs.([]*aggregator)
	measureAggs := make([]*structs.MeasureAggregator, len(aggsSlice))
	columnsRequest := &structs.ColumnsRequest{}
	columnsRequest.RenameAggregationColumns = make(map[string]string, 0)

	for i, agg := range aggsSlice {
		measureAggs[i] = agg.measureAgg

		if agg.renameOutputField {
			columnsRequest.RenameAggregationColumns[measureAggs[i].String()] = agg.outputFieldNewName
		}
	}

	// If any agg field was renamed, make a QueryAggregators for all the renames.
	if len(columnsRequest.RenameAggregationColumns) > 0 {
		renameNode := &structs.QueryAggregators{
			PipeCommandType: structs.OutputTransformType,
			OutputTransforms: &structs.OutputTransforms{
				OutputColumns: columnsRequest,
			},
		}

		aggNode.Next = renameNode
	}

	if byFields == nil {
		aggNode.PipeCommandType = structs.MeasureAggsType
		aggNode.MeasureOperations = measureAggs
	} else {
		aggNode.PipeCommandType = structs.GroupByType
		aggNode.GroupByRequest = &structs.GroupByRequest{
			MeasureOperations: measureAggs,
			GroupByColumns:    byFields.([]string),
		}
		aggNode.BucketLimit = query.MAX_GRP_BUCKS
	}

	if options != nil {
		aggNode.StatsOptions = options.(*structs.StatsOptions)
	} else {
		aggNode.StatsOptions = initializeStatsOptions()
	}

	return aggNode, nil
}

func (p *parser) callonAggregatorBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregatorBlock1(stack["aggs"], stack["byFields"], stack["options"])
}

func (c *current) onStatsOptions1(option any) (any, error) {
	//Default value
	options := initializeStatsOptions()

	optionSlice := option.([]any)
	for _, opt := range optionSlice {
		optArr := opt.([]string)
		// Check for matching option types
		switch optArr[0] {
		case "dedup_splitvals":
			dedupSplitvalsBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatsBlock: Options: invalid param for dedup_splitvals option, param: %v, err: %v", optArr[1], err)
			}
			options.DedupSplitvals = dedupSplitvalsBool
		case "partitions":
			pVal, err := strconv.ParseUint(optArr[1], 10, 64)
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatsBlock: Options: invalid param for partitions option, param: %v, err: %v", optArr[1], err)
			}
			options.Partitions = pVal
		case "allnum":
			allnumBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatsBlock: Options: invalid param for allnum option, param: %v, err: %v", optArr[1], err)
			}
			options.Allnum = allnumBool
		case "delim":
			options.Delim = optArr[1]
		default:
			return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: invalid option: %v", optArr[0])
		}
	}

	return options, nil
}

func (p *parser) callonStatsOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatsOptions1(stack["option"])
}

func (c *current) onStatsOption1(optionCMD, str any) (any, error) {
	optionArr := []string{optionCMD.(string), str.(string)}
	return optionArr, nil
}

func (p *parser) callonStatsOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatsOption1(stack["optionCMD"], stack["str"])
}

func (c *current) onStatsOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: StatsOptionCMD: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonStatsOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatsOptionCMD1(stack["option"])
}

func (c *current) onGroupbyBlock1(fields any) (any, error) {
	// Wildcard fields are not allowed. See https://docs.splunk.com/Documentation/Splunk/9.1.0/SearchReference/Stats
	for _, field := range fields.([]string) {
		if strings.Contains(field, "*") {
			return nil, errors.New("BY clause cannot contain fields with wildcards")
		}
	}

	return fields, nil
}

func (p *parser) callonGroupbyBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupbyBlock1(stack["fields"])
}

func (c *current) onRegexBlock1(keyAndOp, str any) (any, error) {
	var key, op string
	if keyAndOp == nil {
		key = "*"
		op = "="
	} else {
		keyAndOpSlice := keyAndOp.([]any)
		key = keyAndOpSlice[0].(string)
		op = keyAndOpSlice[1].(string)
	}

	// Remove the quotation marks.
	regex := str.(string)
	regex = regex[1 : len(regex)-1]

	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:           op,
			Field:        key,
			Values:       regex,
			ValueIsRegex: true,
		},
	}

	return node, nil
}

func (p *parser) callonRegexBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexBlock1(stack["keyAndOp"], stack["str"])
}

func (c *current) onClauseLevel41(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*ast.Node)
	for _, v := range rest.([]any) {
		parts := v.([]any) // This will be [(AND / SPACE), ClauseLevel3].
		cur = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     cur,
			Right:    parts[1].(*ast.Node),
		}
	}

	return cur, nil
}

func (p *parser) callonClauseLevel41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel41(stack["first"], stack["rest"])
}

func (c *current) onClauseLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*ast.Node)
	for _, v := range rest.([]any) {
		parts := v.([]any) // This will be [OR, ClauseLevel2].
		cur = &ast.Node{
			NodeType: ast.NodeOr,
			Left:     cur,
			Right:    parts[1].(*ast.Node),
		}
	}

	return cur, nil
}

func (p *parser) callonClauseLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel31(stack["first"], stack["rest"])
}

func (c *current) onClauseLevel22(notList, first any) (any, error) {
	// There's an issue with how queries with AST Not nodes are run, so use
	// De Morgan's law to manipulate the expression.
	node := first.(*ast.Node)
	numNots := len(notList.([]any))

	if numNots%2 == 1 {
		deMorgansLaw(node)
	}

	return node, nil
}

func (p *parser) callonClauseLevel22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel22(stack["notList"], stack["first"])
}

func (c *current) onClauseLevel29(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonClauseLevel29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel29(stack["clause"])
}

func (c *current) onClauseLevel12(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonClauseLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel12(stack["clause"])
}

func (c *current) onClauseLevel18(term any) (any, error) {
	return term, nil
}

func (p *parser) callonClauseLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel18(stack["term"])
}

func (c *current) onSearchTerm1(term any) (any, error) {
	return term, nil
}

func (p *parser) callonSearchTerm1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchTerm1(stack["term"])
}

func (c *current) onTimechartBlock1(tcArgs, limitExpr any) (any, error) {
	aggNode := &structs.QueryAggregators{}

	columnsRequest := &structs.ColumnsRequest{}
	columnsRequest.RenameAggregationColumns = make(map[string]string, 0)
	measureAggs := make([]*structs.MeasureAggregator, 0)

	timechartExpr := &structs.TimechartExpr{}
	byField := ""

	if tcArgs == nil {
		return nil, fmt.Errorf("spl peg: timechart: either single-agg or eval-expression by split-by-clause is required")
	}

	timechartArgs := tcArgs.(*TimechartArgs)

	// TODO: Should add || timechartArgs.evalExpr == nil
	if timechartArgs.singleAggExpr == nil {
		return nil, fmt.Errorf("spl peg: timechart: either single-agg or eval-expression by split-by-clause is required")
	}

	var bOptions *structs.BinOptions

	if timechartArgs.tcOptions != nil {
		if timechartArgs.tcOptions.BinOptions != nil {
			bOptions = timechartArgs.tcOptions.BinOptions
		}
	}

	if timechartArgs.singleAggExpr != nil {
		singleAgg := &structs.SingleAgg{}
		aggTemp := timechartArgs.singleAggExpr

		for i, agg := range aggTemp.aggregators {
			measureAggs = append(measureAggs, agg.measureAgg)

			if agg.renameOutputField {
				measureAggs[i].StrEnc = agg.outputFieldNewName
			}
		}

		singleAgg.MeasureOperations = measureAggs
		timechartExpr.SingleAgg = singleAgg

		if aggTemp.SplitByClause != nil {
			byField = aggTemp.SplitByClause.Field
		}
	}

	// TODO: if timechartArgs.evalExpr != nil {}

	aggNode.PipeCommandType = structs.GroupByType
	aggNode.GroupByRequest = &structs.GroupByRequest{
		MeasureOperations: measureAggs,
		GroupByColumns:    []string{"timestamp"},
	}
	aggNode.BucketLimit = query.MAX_GRP_BUCKS

	if bOptions == nil {
		bOptions = &structs.BinOptions{
			SpanOptions: &structs.SpanOptions{
				DefaultSettings: true,
				SpanLength: &structs.SpanLength{
					Num:       1,
					TimeScalr: utils.TMMinute,
				},
			},
		}
	}

	var limitExprTmp *structs.LimitExpr
	if limitExpr != nil {
		limitExprTmp = limitExpr.(*structs.LimitExpr)
		if len(measureAggs) > 1 {
			limitExprTmp.LimitScoreMode = structs.LSMByFreq
		}
	}

	timeBucket := aggregations.InitTimeBucket(bOptions.SpanOptions.SpanLength.Num, bOptions.SpanOptions.SpanLength.TimeScalr, byField, limitExprTmp, len(measureAggs))
	aggNode.TimeHistogram = timeBucket

	return aggNode, nil
}

func (p *parser) callonTimechartBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimechartBlock1(stack["tcArgs"], stack["limitExpr"])
}

func (c *current) onTimechartArgumentsList1(first, rest any) (any, error) {
	restSlice := rest.([]any)
	timechartArgs := &TimechartArgs{}

	numArgs := 1 + len(restSlice)

	for i := 0; i < numArgs; i++ {

		var numArg interface{}

		if i == 0 {
			numArg = first
		} else {
			numArg = restSlice[i-1].([]any)[1]
		}

		switch numArg.(type) {
		case *singleAggTemp:
			timechartArgs.singleAggExpr = numArg.(*singleAggTemp)
		case *structs.TcOptions:
			timechartArgs.tcOptions = numArg.(*structs.TcOptions)
		default:
			return nil, fmt.Errorf("Spl peg: Timechart: invalid timechart argument: %v", numArg)
		}
	}

	return timechartArgs, nil
}

func (p *parser) callonTimechartArgumentsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimechartArgumentsList1(stack["first"], stack["rest"])
}

func (c *current) onTimechartArgument1(tcArg any) (any, error) {
	return tcArg, nil
}

func (p *parser) callonTimechartArgument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimechartArgument1(stack["tcArg"])
}

func (c *current) onSingleAggExpr1(aggs, splitByClause any) (any, error) {
	singleAggExpr := &singleAggTemp{
		aggregators: aggs.([]*aggregator),
	}

	if splitByClause != nil {
		singleAggExpr.SplitByClause = splitByClause.(*structs.SplitByClause)
	}

	return singleAggExpr, nil
}

func (p *parser) callonSingleAggExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleAggExpr1(stack["aggs"], stack["splitByClause"])
}

func (c *current) onSplitByClause1(field any) (any, error) {
	splitByClause := &structs.SplitByClause{
		Field: field.(string),
	}

	return splitByClause, nil
}

func (p *parser) callonSplitByClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSplitByClause1(stack["field"])
}

func (c *current) onTcOptions1(option any) (any, error) {
	//Default value
	tcOptions := &structs.TcOptions{
		UseNull:  true,
		UseOther: true,
		NullStr:  "null",
		OtherStr: "other",
	}
	switch option.(type) {
	case *structs.BinOptions:
		tcOptions.BinOptions = option.(*structs.BinOptions)
	case [][]string:
		optionSlice := option.([]any)
		for _, opt := range optionSlice {
			optArr := opt.([]string)
			switch optArr[0] {
			case "usenull":
				useNullBool, err := strconv.ParseBool(optArr[1])
				if err != nil {
					return nil, fmt.Errorf("Spl peg: Timechart: TcOptions: %v", err)
				}
				tcOptions.UseNull = useNullBool
			case "useother":
				useOtherBool, err := strconv.ParseBool(optArr[1])
				if err != nil {
					return nil, fmt.Errorf("Spl peg: Timechart: TcOptions: %v", err)
				}
				tcOptions.UseOther = useOtherBool
			case "nullstr":
				tcOptions.OtherStr = optArr[1]
			case "otherstr":
				tcOptions.OtherStr = optArr[1]
			default:
				return nil, fmt.Errorf("Spl peg: Timechart: TcOptions: invalid option: %v", optArr[0])
			}
		}
	default:
		return nil, fmt.Errorf("Spl peg: Timechart: Invalid tcOptions %v", option)
	}
	return tcOptions, nil
}

func (p *parser) callonTcOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTcOptions1(stack["option"])
}

func (c *current) onTcOption1(tcOptionCMD, val any) (any, error) {
	tcOptionArr := []string{tcOptionCMD.(string), val.(string)}
	return tcOptionArr, nil
}

func (p *parser) callonTcOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTcOption1(stack["tcOptionCMD"], stack["val"])
}

func (c *current) onTcOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Timechart: TcOptionCMD: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonTcOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTcOptionCMD1(stack["option"])
}

func (c *current) onBinOptions1(spanOptions any) (any, error) {
	binOptions := &structs.BinOptions{
		SpanOptions: spanOptions.(*structs.SpanOptions),
	}
	return binOptions, nil
}

func (p *parser) callonBinOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptions1(stack["spanOptions"])
}

func (c *current) onSpanOptions1(spanLength any) (any, error) {
	spanOptions := &structs.SpanOptions{
		SpanLength: spanLength.(*structs.SpanLength),
	}
	return spanOptions, nil
}

func (p *parser) callonSpanOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpanOptions1(stack["spanLength"])
}

func (c *current) onSpanLength1(intAsStr, timeScale any) (any, error) {
	num, err := strconv.Atoi(intAsStr.(string))
	if err != nil {
		return nil, fmt.Errorf("SpanLength: Invalid num (%v): %v", intAsStr.(string), err)
	}

	spanLength := &structs.SpanLength{
		Num:       num,
		TimeScalr: timeScale.(utils.TimeUnit),
	}
	return spanLength, nil
}

func (p *parser) callonSpanLength1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpanLength1(stack["intAsStr"], stack["timeScale"])
}

func (c *current) onTimeScale1(timeUnit any) (any, error) {
	return timeUnit, nil
}

func (p *parser) callonTimeScale1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimeScale1(stack["timeUnit"])
}

func (c *current) onLimitExpr1(sortBy, intAsStr any) (any, error) {
	num, err := strconv.Atoi(intAsStr.(string))
	if err != nil {
		return nil, fmt.Errorf("SpanLength: Invalid num (%v): %v", intAsStr.(string), err)
	}

	limitExpr := &structs.LimitExpr{
		IsTop: true, // Default Value
		Num:   num,
	}

	if sortBy != nil {
		sortByStr, err := transferUint8ToString(sortBy)
		if err != nil {
			return nil, fmt.Errorf("Spl peg: Timechart: %v", err)
		}
		if sortByStr == "bottom" {
			limitExpr.IsTop = false
		}
	}

	return limitExpr, nil
}

func (p *parser) callonLimitExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitExpr1(stack["sortBy"], stack["intAsStr"])
}

func (c *current) onStatisticBlock1(statisticExpr any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		StatisticColRequest: statisticExpr.(*structs.StatisticExpr),
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	measureAgg := &structs.MeasureAggregator{
		MeasureCol:  "*",
		MeasureFunc: utils.Count,
	}

	measureOperations := make([]*structs.MeasureAggregator, 1)
	measureOperations[0] = measureAgg

	groupByColumns := append(statisticExpr.(*structs.StatisticExpr).FieldList, statisticExpr.(*structs.StatisticExpr).ByClause...)

	aggNode := &structs.QueryAggregators{}
	aggNode.Next = root
	aggNode.PipeCommandType = structs.GroupByType
	aggNode.GroupByRequest = &structs.GroupByRequest{
		MeasureOperations: measureOperations,
		GroupByColumns:    groupByColumns,
	}

	return aggNode, nil
}

func (p *parser) callonStatisticBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticBlock1(stack["statisticExpr"])
}

func (c *current) onStatisticExpr1(cmd, limit, fieldList, byClause, options any) (any, error) {

	statisticExpr := &structs.StatisticExpr{
		FieldList: fieldList.([]interface{})[1].([]string),
	}

	statisticCmd, err := transferUint8ToString(cmd)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: StatisticExpr: %v", err)
	}

	if statisticCmd == "top" {
		statisticExpr.StatisticFunctionMode = structs.SFMTop
	} else {
		statisticExpr.StatisticFunctionMode = structs.SFMRare
	}

	if limit != nil {
		statisticExpr.Limit = limit.(string)
	}

	if options != nil {
		statisticExpr.StatisticOptions = options.(*structs.StatisticOptions)
	} else {
		statisticExpr.StatisticOptions = &structs.StatisticOptions{
			ShowCount:    true,
			CountField:   "count",
			ShowPerc:     true,
			PercentField: "percent",
			UseOther:     false,
			OtherStr:     "Other",
		}
	}

	if byClause != nil {
		statisticExpr.ByClause = byClause.([]string)
	}

	return statisticExpr, nil
}

func (p *parser) callonStatisticExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticExpr1(stack["cmd"], stack["limit"], stack["fieldList"], stack["byClause"], stack["options"])
}

func (c *current) onStatisticLimit2(number any) (any, error) {
	return number.(string), nil
}

func (p *parser) callonStatisticLimit2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticLimit2(stack["number"])
}

func (c *current) onStatisticLimit7(limit any) (any, error) {
	return limit.(string), nil
}

func (p *parser) callonStatisticLimit7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticLimit7(stack["limit"])
}

func (c *current) onStatisticOptions1(option any) (any, error) {
	//Default value
	options := &structs.StatisticOptions{
		ShowCount:    true,
		CountField:   "count",
		ShowPerc:     true,
		PercentField: "percent",
		UseOther:     false,
		OtherStr:     "other",
	}

	optionSlice := option.([]any)
	for _, opt := range optionSlice {
		optArr := opt.([]string)
		// Check for matching option types
		switch optArr[0] {
		case "showcount":
			showCountBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.ShowCount = showCountBool
		case "countfield":
			options.CountField = optArr[1]
		case "showperc":
			showPercBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.ShowPerc = showPercBool
		case "percentfield":
			options.PercentField = optArr[1]
		case "useother":
			useOtherBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.UseOther = useOtherBool
		case "otherstr":
			options.OtherStr = optArr[1]
		default:
			return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: invalid option")
		}
	}

	return options, nil
}

func (p *parser) callonStatisticOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticOptions1(stack["option"])
}

func (c *current) onStatisticOption1(optionCMD, field any) (any, error) {
	optionArr := []string{optionCMD.(string), field.(string)}
	return optionArr, nil
}

func (p *parser) callonStatisticOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticOption1(stack["optionCMD"], stack["field"])
}

func (c *current) onStatisticOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: StatisticExpr: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonStatisticOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticOptionCMD1(stack["option"])
}

func (c *current) onByClause2(fieldList any) (any, error) {
	return fieldList.([]string), nil
}

func (p *parser) callonByClause2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByClause2(stack["fieldList"])
}

func (c *current) onByClause7(groupByBlock any) (any, error) {
	return groupByBlock.([]string), nil
}

func (p *parser) callonByClause7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByClause7(stack["groupByBlock"])
}

func (c *current) onDedupBlock1(dedupExpr any) (any, error) {

	letColReq := &structs.LetColumnsRequest{
		DedupColRequest: dedupExpr.(*structs.DedupExpr),
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonDedupBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupBlock1(stack["dedupExpr"])
}

func (c *current) onDedupExpr1(limitArr, options1, fieldList, options2, sortByClause any) (any, error) {
	dedupExpr := &structs.DedupExpr{
		FieldList:         fieldList.([]string),
		Limit:             1,
		DedupCombinations: make(map[string]map[int][]structs.SortValue, 0),
		DedupRecords:      make(map[string]map[string]interface{}, 0),
	}

	if limitArr != nil {
		limitStr := limitArr.([]interface{})[1].(string)
		limit, err := strconv.ParseUint(limitStr, 10, 64)
		if err != nil || limit == 0 {
			return nil, fmt.Errorf("Invalid limit (%v): %v", limitStr, err)
		}
		dedupExpr.Limit = limit
	}

	dedupExpr.DedupOptions = &structs.DedupOptions{
		Consecutive: false,
		KeepEmpty:   false,
		KeepEvents:  false,
	}

	if options1 != nil {
		dedupExpr.DedupOptions = options1.(*structs.DedupOptions)
	}
	if options2 != nil {
		options := options2.(*structs.DedupOptions)

		if options.Consecutive {
			dedupExpr.DedupOptions.Consecutive = options.Consecutive
		}
		if options.KeepEmpty {
			dedupExpr.DedupOptions.KeepEmpty = options.KeepEmpty
		}
		if options.KeepEvents {
			dedupExpr.DedupOptions.KeepEvents = options.KeepEvents
		}
	}

	if sortByClause != nil {
		dedupExpr.DedupSortEles = sortByClause.([]*structs.SortElement)

		// Make the DedupSortAscending from the DedupSortEles.
		dedupExpr.DedupSortAscending = make([]int, len(dedupExpr.DedupSortEles))
		for i, ele := range dedupExpr.DedupSortEles {
			if ele.SortByAsc {
				dedupExpr.DedupSortAscending[i] = 1
			} else {
				dedupExpr.DedupSortAscending[i] = -1
			}
		}
	}

	return dedupExpr, nil
}

func (p *parser) callonDedupExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupExpr1(stack["limitArr"], stack["options1"], stack["fieldList"], stack["options2"], stack["sortByClause"])
}

func (c *current) onDedupFieldName1(field any) (any, error) {
	return field, nil
}

func (p *parser) callonDedupFieldName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupFieldName1(stack["field"])
}

func (c *current) onDedupFieldList1(first, rest any) (any, error) {
	// Convert `rest` to a slice. Each element of the slice will be a 2-element
	// slice where the first element is " " and the second is a FieldName.
	restSlice := rest.([]any)

	numFieldNames := 1 + len(restSlice)
	fields := make([]string, numFieldNames)
	fields[0] = first.(string)

	for i := 1; i < numFieldNames; i++ {
		separatorAndField := restSlice[i-1].([]any)
		fields[i] = separatorAndField[1].(string)
	}

	return fields, nil
}

func (p *parser) callonDedupFieldList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupFieldList1(stack["first"], stack["rest"])
}

func (c *current) onDedupOptions1(option any) (any, error) {
	//Default value
	options := &structs.DedupOptions{
		Consecutive: false,
		KeepEmpty:   false,
		KeepEvents:  false,
	}

	optionSlice := option.([]any)
	for _, opt := range optionSlice {
		optArr := opt.([]string)
		// Check for matching option types
		switch optArr[0] {
		case "consecutive":
			consecutiveBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: DedupBlock: Options: %v", err)
			}
			options.Consecutive = consecutiveBool
		case "keepempty":
			keepEmptyBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: DedupBlock: Options: %v", err)
			}
			options.KeepEmpty = keepEmptyBool
		case "keepevents":
			keepEventsBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: DedupBlock: Options: %v", err)
			}
			options.KeepEvents = keepEventsBool
		default:
			return nil, fmt.Errorf("Spl peg: DedupBlock: Options: invalid option")
		}
	}

	return options, nil
}

func (p *parser) callonDedupOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupOptions1(stack["option"])
}

func (c *current) onDedupOption1(optionCMD, field any) (any, error) {
	optionArr := []string{optionCMD.(string), field.(string)}
	return optionArr, nil
}

func (p *parser) callonDedupOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupOption1(stack["optionCMD"], stack["field"])
}

func (c *current) onDedupOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: DedupExpr: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonDedupOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupOptionCMD1(stack["option"])
}

func (c *current) onDedupSortByClause1(dedupSortEles any) (any, error) {
	return dedupSortEles, nil
}

func (p *parser) callonDedupSortByClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupSortByClause1(stack["dedupSortEles"])
}

func (c *current) onSortElements1(first, rest any) (any, error) {
	restSlice := rest.([]any)

	length := 1 + len(restSlice)
	sortEles := make([]*structs.SortElement, length)
	sortEles[0] = first.(*structs.SortElement)

	for i := 1; i < length; i++ {
		elements := restSlice[i-1].([]any)
		sortEles[i] = elements[1].(*structs.SortElement)
	}

	return sortEles, nil
}

func (p *parser) callonSortElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortElements1(stack["first"], stack["rest"])
}

func (c *current) onSingleSortElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSingleSortElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleSortElement1(stack["element"])
}

func (c *current) onSingleSortElementWithoutCast1(sortBySymbol, field any) (any, error) {
	sortByAsc := true

	symbol := sortBySymbol.([]byte)
	if len(symbol) > 0 && symbol[0] == '-' {
		sortByAsc = false
	}

	return &structs.SortElement{
		SortByAsc: sortByAsc,
		Op:        "",
		Field:     field.(string),
	}, nil
}

func (p *parser) callonSingleSortElementWithoutCast1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleSortElementWithoutCast1(stack["sortBySymbol"], stack["field"])
}

func (c *current) onSingleSortElementWithCast1(sortBySymbol, op, field any) (any, error) {
	sortByAsc := true

	symbol := sortBySymbol.([]byte)
	if len(symbol) > 0 && symbol[0] == '-' {
		sortByAsc = false
	}

	opStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: singleSortElementWithCast: %v", err)
	}

	return &structs.SortElement{
		SortByAsc: sortByAsc,
		Op:        opStr,
		Field:     field.(string),
	}, nil
}

func (p *parser) callonSingleSortElementWithCast1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleSortElementWithCast1(stack["sortBySymbol"], stack["op"], stack["field"])
}

func (c *current) onRenameBlock1(renameExpr any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		RenameColRequest: renameExpr.(*structs.RenameExpr),
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonRenameBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameBlock1(stack["renameExpr"])
}

func (c *current) onRenameExpr2(originalPattern, newPattern any) (any, error) {
	renameExpr := &structs.RenameExpr{
		RenameExprMode:  structs.REMPhrase,
		OriginalPattern: originalPattern.(string),
		NewPattern:      removeQuotes(newPattern),
	}

	return renameExpr, nil
}

func (p *parser) callonRenameExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameExpr2(stack["originalPattern"], stack["newPattern"])
}

func (c *current) onRenameExpr9(originalPattern, newPattern any) (any, error) {
	isRegex, err := isRegexRename(originalPattern.(string), newPattern.(string))
	if err != nil {
		return nil, fmt.Errorf("Spl peg: RenameExpr: %v", err)
	}

	var renameExprMode structs.RenameExprMode
	if isRegex {
		renameExprMode = structs.REMRegex
	} else {
		renameExprMode = structs.REMOverride
	}

	renameExpr := &structs.RenameExpr{
		RenameExprMode:  renameExprMode,
		OriginalPattern: originalPattern.(string),
		NewPattern:      newPattern.(string),
	}

	return renameExpr, nil
}

func (p *parser) callonRenameExpr9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameExpr9(stack["originalPattern"], stack["newPattern"])
}

func (c *current) onRexBlock1(field, str any) (any, error) {
	pattern := removeQuotes(str)
	rexColNames, err := getRexColNames(pattern)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: RexBlock: %v", err)
	}
	rexExpr := &structs.RexExpr{
		FieldName:   field.(string),
		Pattern:     transferPCREToRE2(pattern),
		RexColNames: rexColNames,
	}

	letColReq := &structs.LetColumnsRequest{
		RexColRequest: rexExpr,
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonRexBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRexBlock1(stack["field"], stack["str"])
}

func (c *current) onSortBlock1(limit, sortByEles any) (any, error) {

	sortExpr := &structs.SortExpr{
		SortEles:    sortByEles.([]*structs.SortElement),
		SortRecords: make(map[string]map[string]interface{}, 0),
		Limit:       10000,
	}

	if limit != nil {
		sortExpr.Limit = limit.(uint64)
	}

	ascendingArr := make([]int, len(sortExpr.SortEles))
	for i, ele := range sortExpr.SortEles {
		if ele.SortByAsc {
			ascendingArr[i] = 1
		} else {
			ascendingArr[i] = -1
		}
	}

	sortExpr.SortAscending = ascendingArr

	letColReq := &structs.LetColumnsRequest{
		SortColRequest: sortExpr,
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonSortBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortBlock1(stack["limit"], stack["sortByEles"])
}

func (c *current) onSortLimit1(intAsStr any) (any, error) {
	limit, err := strconv.ParseUint(intAsStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid limit (%v): %v", intAsStr.(string), err)
	}

	if limit == 0 {
		limit = math.MaxUint64
	}

	return limit, nil
}

func (p *parser) callonSortLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortLimit1(stack["intAsStr"])
}

func (c *current) onEvalBlock1(first, rest any) (any, error) {
	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: first.(*structs.LetColumnsRequest),
		},
	}

	leafQueryAgg := root
	restSlice := rest.([]any)
	for i := range restSlice {
		CommaSpaceAndEval := restSlice[i].([]any)
		nextQueryAgg := &structs.QueryAggregators{
			PipeCommandType: structs.OutputTransformType,
			OutputTransforms: &structs.OutputTransforms{
				LetColumns: CommaSpaceAndEval[1].(*structs.LetColumnsRequest),
			},
		}

		leafQueryAgg.Next = nextQueryAgg
		leafQueryAgg = leafQueryAgg.Next
	}

	return root, nil
}

func (p *parser) callonEvalBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalBlock1(stack["first"], stack["rest"])
}

func (c *current) onSingleEval1(field, expr any) (any, error) {
	fieldStr := field.(string)
	if strings.Contains(fieldStr, "*") {
		return nil, fmt.Errorf("New fields must not contain wildcards; invalid field: %v", field)
	}

	letColumnsRequest := expr.(*structs.LetColumnsRequest)
	letColumnsRequest.NewColName = fieldStr

	return letColumnsRequest, nil
}

func (p *parser) callonSingleEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleEval1(stack["field"], stack["expr"])
}

func (c *current) onEvalExpression1(value any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		ValueColRequest: value.(*structs.ValueExpr),
	}

	return letColReq, nil
}

func (p *parser) callonEvalExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalExpression1(stack["value"])
}

func (c *current) onConditionExpr2(condition, trueValue, falseValue any) (any, error) {

	node := &structs.ConditionExpr{
		Op:         "if",
		BoolExpr:   condition.(*structs.BoolExpr),
		TrueValue:  trueValue.(*structs.ValueExpr),
		FalseValue: falseValue.(*structs.ValueExpr),
	}

	return node, nil
}

func (p *parser) callonConditionExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr2(stack["condition"], stack["trueValue"], stack["falseValue"])
}

func (c *current) onConditionExpr15(opName, pair, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: ConditionExpr: %v", err)
	}
	pairs := make([]*structs.ConditionValuePair, 1)
	pairs[0] = pair.(*structs.ConditionValuePair)

	if rest != nil {
		restSlice := rest.([]any)
		for i := range restSlice {
			ele := restSlice[i].([]any)
			pairs = append(pairs, ele[1].(*structs.ConditionValuePair))
		}
	}

	node := &structs.ConditionExpr{
		Op:                  opNameStr,
		ConditionValuePairs: pairs,
	}

	return node, nil
}

func (p *parser) callonConditionExpr15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr15(stack["opName"], stack["pair"], stack["rest"])
}

func (c *current) onConditionExpr30(valueExpr, rest any) (any, error) {
	restSlice := rest.([]any)
	valueList := make([]*structs.ValueExpr, 1+len(restSlice))
	valueList[0] = valueExpr.(*structs.ValueExpr)

	for i := range restSlice {
		valueAtom := restSlice[i].([]any)
		valueList[i+1] = valueAtom[1].(*structs.ValueExpr)
	}

	node := &structs.ConditionExpr{
		Op:        "coalesce",
		ValueList: valueList,
	}

	return node, nil
}

func (p *parser) callonConditionExpr30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr30(stack["valueExpr"], stack["rest"])
}

func (c *current) onConditionExpr42(leftValue, rightValue any) (any, error) {
	valueList := make([]*structs.ValueExpr, 2)
	valueList[0] = leftValue.(*structs.ValueExpr)
	valueList[1] = rightValue.(*structs.ValueExpr)

	node := &structs.ConditionExpr{
		Op:        "nullif",
		ValueList: valueList,
	}

	return node, nil
}

func (p *parser) callonConditionExpr42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr42(stack["leftValue"], stack["rightValue"])
}

func (c *current) onConditionValuePair1(condition, value any) (any, error) {
	conditionValuePair := &structs.ConditionValuePair{
		Condition: condition.(*structs.BoolExpr),
		Value:     value.(*structs.ValueExpr),
	}
	return conditionValuePair, nil
}

func (p *parser) callonConditionValuePair1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionValuePair1(stack["condition"], stack["value"])
}

func (c *current) onTextExpr2(opName, stringExpr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:          opNameStr,
		Param:       stringExpr.(*structs.StringExpr),
		StrToRemove: "",
	}
	return node, nil
}

func (p *parser) callonTextExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr2(stack["opName"], stack["stringExpr"])
}

func (c *current) onTextExpr16(opName, firstVal, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	if rest == nil {
		return firstVal, nil
	}
	restSlice := rest.([]any)
	values := make([]*structs.StringExpr, 1+len(restSlice))
	values[0] = firstVal.(*structs.StringExpr)

	for i := range restSlice {
		stringAtom := restSlice[i].([]any)
		values[i+1] = stringAtom[1].(*structs.StringExpr)
	}
	node := &structs.TextExpr{
		Op:        opNameStr,
		ValueList: values,
	}
	return node, nil
}

func (p *parser) callonTextExpr16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr16(stack["opName"], stack["firstVal"], stack["rest"])
}

func (c *current) onTextExpr33(opName, stringExpr, delim any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:        opNameStr,
		Param:     stringExpr.(*structs.StringExpr),
		Delimiter: delim.(*structs.StringExpr),
	}
	return node, nil
}

func (p *parser) callonTextExpr33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr33(stack["opName"], stack["stringExpr"], stack["delim"])
}

func (c *current) onTextExpr46(opName, stringExpr, startIndex, lengthParam any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	var lengthConverted *structs.NumericExpr
	if lengthParam != nil {
		lengthSlice, ok := lengthParam.([]interface{})
		if ok && len(lengthSlice) > 1 {
			length, ok := lengthSlice[1].(*structs.NumericExpr)
			if ok {
				lengthConverted = length
			} else {
				return nil, fmt.Errorf("Spl peg: TextExpr: Unable to assert length as *structs.NumericExpr")
			}
		}
	}
	node := &structs.TextExpr{
		Op:         opNameStr,
		Param:      stringExpr.(*structs.StringExpr),
		StartIndex: startIndex.(*structs.NumericExpr),
		LengthExpr: lengthConverted,
	}
	return node, nil
}

func (p *parser) callonTextExpr46() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr46(stack["opName"], stack["stringExpr"], stack["startIndex"], stack["lengthParam"])
}

func (c *current) onTextExpr62(value, format any) (any, error) {
	var formatExpr *structs.StringExpr
	if format != nil {
		formatSlice := format.([]interface{})
		formatExpr, _ = formatSlice[1].(*structs.StringExpr)
	}
	return &structs.TextExpr{
		IsTerminal: false,
		Op:         "tostring",
		Val:        value.(*structs.ValueExpr),
		Param:      formatExpr,
	}, nil
}

func (p *parser) callonTextExpr62() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr62(stack["value"], stack["format"])
}

func (c *current) onTextExpr74(opName, expr, strToRemoveExpr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}

	strToRemove := " \t"
	if strToRemoveExpr != nil {
		strToRemove = strToRemoveExpr.(string)
	}

	node := &structs.TextExpr{
		Op:          opNameStr,
		Param:       expr.(*structs.StringExpr),
		StrToRemove: removeQuotes(strToRemove),
	}

	return node, nil
}

func (p *parser) callonTextExpr74() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr74(stack["opName"], stack["expr"], stack["strToRemoveExpr"])
}

func (c *current) onTextExpr88(inputField, path any) (any, error) {
	pathExpr := path.(*SPathFieldExpr)
	return &structs.TextExpr{
		Op: "spath",
		SPathExpr: &structs.SPathExpr{
			InputColName:    inputField.(string),
			Path:            pathExpr.PathValue,
			IsPathFieldName: pathExpr.IsPathFieldName,
		},
	}, nil
}

func (p *parser) callonTextExpr88() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr88(stack["inputField"], stack["path"])
}

func (c *current) onTextExpr100(mask, ip any) (any, error) {
	return &structs.TextExpr{
		Op:    "ipmask",
		Val:   ip.(*structs.ValueExpr),
		Param: mask.(*structs.StringExpr),
	}, nil
}

func (p *parser) callonTextExpr100() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr100(stack["mask"], stack["ip"])
}

func (c *current) onTextExpr110(obj, key, value any) (any, error) {
	stringExpr := &structs.StringExpr{
		StringExprMode: structs.SEMRawStringList,
		StringList:     []string{key.(string), value.(string)},
	}
	return &structs.TextExpr{
		Op:    "object_to_array",
		Val:   obj.(*structs.ValueExpr),
		Param: stringExpr,
	}, nil
}

func (p *parser) callonTextExpr110() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr110(stack["obj"], stack["key"], stack["value"])
}

func (c *current) onTextExpr123(format, rest any) (any, error) {
	textExpr := &structs.TextExpr{
		Op:    "printf",
		Param: format.(*structs.StringExpr),
	}
	if rest != nil {
		restSlice := rest.([]any)
		valueList := make([]*structs.StringExpr, len(restSlice))

		for i := range restSlice {
			valueAtom := restSlice[i].([]any)
			valueList[i] = valueAtom[1].(*structs.StringExpr)
		}
		textExpr.ValueList = valueList
	}

	return textExpr, nil
}

func (p *parser) callonTextExpr123() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr123(stack["format"], stack["rest"])
}

func (c *current) onTextExpr135(containInternalFields any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMRawString,
		RawString:      "true", // default value
	}

	if containInternalFields != nil {
		restSlice := containInternalFields.([]any)
		containInternalFieldsStr, err := transferUint8ToString(restSlice[0])
		if err != nil {
			return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
		}
		if containInternalFieldsStr == "false" {
			expr.RawString = "false"
		}
	}

	return &structs.TextExpr{
		Op:    "tojson",
		Param: expr,
	}, nil
}

func (p *parser) callonTextExpr135() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr135(stack["containInternalFields"])
}

func (c *current) onTextExpr147(opName, condition any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: Failed to recognize operator: %v, err= %v", opName, err)
	}

	node := &structs.TextExpr{
		Op:        opNameStr,
		Condition: condition.(*structs.BoolExpr),
	}

	return node, nil
}

func (p *parser) callonTextExpr147() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr147(stack["opName"], stack["condition"])
}

func (c *current) onTextExpr155(opName, stringExpr, startIndex, endIndex any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:         opNameStr,
		Param:      stringExpr.(*structs.StringExpr),
		StartIndex: startIndex.(*structs.NumericExpr),
	}
	if endIndex != nil {
		node.EndIndex = endIndex.(*structs.NumericExpr)
	}

	return node, nil
}

func (p *parser) callonTextExpr155() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr155(stack["opName"], stack["stringExpr"], stack["startIndex"], stack["endIndex"])
}

func (c *current) onTextExpr169(opName, stringExpr, expr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:    opNameStr,
		Val:   expr.(*structs.ValueExpr),
		Param: stringExpr.(*structs.StringExpr),
	}

	return node, nil
}

func (p *parser) callonTextExpr169() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr169(stack["opName"], stack["stringExpr"], stack["expr"])
}

func (c *current) onTextExpr180(opName, startIndex, endIndex, stringExpr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:         opNameStr,
		StartIndex: startIndex.(*structs.NumericExpr),
		EndIndex:   endIndex.(*structs.NumericExpr),
	}
	if stringExpr != nil {
		node.Param = stringExpr.(*structs.StringExpr)
	}

	return node, nil
}

func (p *parser) callonTextExpr180() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr180(stack["opName"], stack["startIndex"], stack["endIndex"], stack["stringExpr"])
}

func (c *current) onTextExpr195(opName, mvLeft, mvRight, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	values := make([]*structs.StringExpr, 2)
	values[0] = mvLeft.(*structs.StringExpr)
	values[1] = mvRight.(*structs.StringExpr)

	node := &structs.TextExpr{
		Op:        opNameStr,
		ValueList: values,
	}

	if rest != nil {
		restSlice := rest.([]any)
		node.Delimiter = restSlice[1].(*structs.StringExpr)
	}

	return node, nil
}

func (p *parser) callonTextExpr195() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr195(stack["opName"], stack["mvLeft"], stack["mvRight"], stack["rest"])
}

func (c *current) onTextExpr211(opName, stringExpr, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}

	node := &structs.TextExpr{
		Op:         opNameStr,
		Param:      stringExpr.(*structs.StringExpr),
		InferTypes: false, // default value
	}

	if rest != nil {
		restSlice := rest.([]any)
		inferTypes, err := transferUint8ToString(restSlice[1])
		if err != nil {
			return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
		}
		if inferTypes == "true" {
			node.InferTypes = true
		}
	}

	return node, nil
}

func (p *parser) callonTextExpr211() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr211(stack["opName"], stack["stringExpr"], stack["rest"])
}

func (c *current) onTextExpr227(field, threshold, match, delims any) (any, error) {
	textExpr := &structs.TextExpr{
		Op: "cluster",
	}

	cluster := &structs.Cluster{
		Field:     field.(string),
		Threshold: 0.8,
		Match:     "termlist",
	}

	if threshold != nil {
		slice := threshold.([]interface{})
		thresholdStr := slice[2].(string)
		val, err := strconv.ParseFloat(thresholdStr, 64)
		if err != nil {
			return nil, fmt.Errorf("Spl peg: TextExpr: invalid threshold: %v", thresholdStr)
		}
		cluster.Threshold = val
	}

	if match != nil {
		slice := match.([]interface{})
		matchStr, err := transferUint8ToString(slice[2])
		if err != nil {
			return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
		}
		cluster.Match = matchStr
	}

	if delims != nil {
		slice := delims.([]interface{})
		delimsStr := slice[2].(string)
		cluster.Delims = delimsStr
	}

	textExpr.Cluster = cluster

	return textExpr, nil
}

func (p *parser) callonTextExpr227() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr227(stack["field"], stack["threshold"], stack["match"], stack["delims"])
}

func (c *current) onTextExpr255(filter any) (any, error) {
	textExpr := &structs.TextExpr{
		Op: "getfields",
	}

	if filter != nil {
		textExpr.Param = filter.(*structs.StringExpr)
	}

	return textExpr, nil
}

func (p *parser) callonTextExpr255() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr255(stack["filter"])
}

func (c *current) onTextExpr263(valueExpr any) (any, error) {
	return &structs.TextExpr{
		Op:  "typeof",
		Val: valueExpr.(*structs.ValueExpr),
	}, nil
}

func (p *parser) callonTextExpr263() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr263(stack["valueExpr"])
}

func (c *current) onTextExpr270(val, regex, replacement any) (any, error) {
	return &structs.TextExpr{
		Op:        "replace",
		Val:       val.(*structs.ValueExpr),
		ValueList: []*structs.StringExpr{regex.(*structs.StringExpr), replacement.(*structs.StringExpr)},
	}, nil
}

func (p *parser) callonTextExpr270() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr270(stack["val"], stack["regex"], stack["replacement"])
}

func (c *current) onTextExpr283(val, format any) (any, error) {
	return &structs.TextExpr{
		Op:    "strptime",
		Val:   val.(*structs.ValueExpr),
		Param: format.(*structs.StringExpr),
	}, nil
}

func (p *parser) callonTextExpr283() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr283(stack["val"], stack["format"])
}

func (c *current) onQuotedPathString1(str any) (any, error) {
	return &SPathFieldExpr{
		PathValue:       removeQuotes(str),
		IsPathFieldName: false,
	}, nil
}

func (p *parser) callonQuotedPathString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedPathString1(stack["str"])
}

func (c *current) onUnquotedPathValue1(str any) (any, error) {
	return &SPathFieldExpr{
		PathValue:       removeQuotes(str),
		IsPathFieldName: true,
	}, nil
}

func (p *parser) callonUnquotedPathValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedPathValue1(stack["str"])
}

func (c *current) onStrToRemoveExpr1(strToRemove any) (any, error) {
	return strToRemove, nil
}

func (p *parser) callonStrToRemoveExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStrToRemoveExpr1(stack["strToRemove"])
}

func (c *current) onEvalFieldToRead2() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEvalFieldToRead2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalFieldToRead2()
}

func (c *current) onEvalFieldToRead8(field any) (any, error) {
	return field, nil
}

func (p *parser) callonEvalFieldToRead8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalFieldToRead8(stack["field"])
}

func (c *current) onWhereBlock1(condition any) (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			FilterRows: condition.(*structs.BoolExpr),
		},
	}

	return queryAgg, nil
}

func (p *parser) callonWhereBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereBlock1(stack["condition"])
}

func (c *current) onBoolExpr1(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonBoolExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExpr1(stack["expr"])
}

func (c *current) onBoolExprLevel41(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.BoolExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.BoolExpr{
			IsTerminal: false,
			BoolOp:     structs.BoolOpOr,
			LeftBool:   cur,
			RightBool:  opAndClause[1].(*structs.BoolExpr),
		}
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel41(stack["first"], stack["rest"])
}

func (c *current) onBoolExprLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.BoolExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.BoolExpr{
			IsTerminal: false,
			BoolOp:     structs.BoolOpAnd,
			LeftBool:   cur,
			RightBool:  opAndClause[1].(*structs.BoolExpr),
		}
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel31(stack["first"], stack["rest"])
}

func (c *current) onBoolExprLevel22(first any) (any, error) {
	cur := &structs.BoolExpr{
		IsTerminal: false,
		BoolOp:     structs.BoolOpNot,
		LeftBool:   first.(*structs.BoolExpr),
		RightBool:  nil,
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel22(stack["first"])
}

func (c *current) onBoolExprLevel29(first any) (any, error) {
	return first, nil
}

func (p *parser) callonBoolExprLevel29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel29(stack["first"])
}

func (c *current) onBoolExprLevel12(first any) (any, error) {
	return first, nil
}

func (p *parser) callonBoolExprLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel12(stack["first"])
}

func (c *current) onBoolExprLevel18(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonBoolExprLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel18(stack["expr"])
}

func (c *current) onEvalComparisonExpr2(op, value any) (any, error) {
	opNameStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: BoolExpr: %v", err)
	}
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  value.(*structs.ValueExpr),
		RightValue: nil,
		ValueOp:    opNameStr,
	}
	return expr, nil
}

func (p *parser) callonEvalComparisonExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalComparisonExpr2(stack["op"], stack["value"])
}

func (c *current) onEvalComparisonExpr17(opName, leftValue, rightValue any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: BoolExpr: %v", err)
	}
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  leftValue.(*structs.ValueExpr),
		RightValue: rightValue.(*structs.ValueExpr),
		ValueOp:    opNameStr,
	}
	return expr, nil
}

func (p *parser) callonEvalComparisonExpr17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalComparisonExpr17(stack["opName"], stack["leftValue"], stack["rightValue"])
}

func (c *current) onEvalComparisonExpr32(left, valueToJudge, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ValueExpr, 1+len(restSlice))
	slice[0] = valueToJudge.(*structs.ValueExpr)

	for i := range restSlice {
		valueAtom := restSlice[i].([]any)
		slice[i+1] = valueAtom[1].(*structs.ValueExpr)
	}

	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  left.(*structs.ValueExpr),
		ValueList:  slice,
		ValueOp:    "in",
	}
	return expr, nil
}

func (p *parser) callonEvalComparisonExpr32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalComparisonExpr32(stack["left"], stack["valueToJudge"], stack["rest"])
}

func (c *current) onEvalComparisonExpr47(valueToJudge, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ValueExpr, len(restSlice))

	for i := range restSlice {
		valueAtom := restSlice[i].([]any)
		slice[i] = valueAtom[1].(*structs.ValueExpr)
	}

	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  valueToJudge.(*structs.ValueExpr),
		ValueList:  slice,
		ValueOp:    "in",
	}
	return expr, nil
}

func (p *parser) callonEvalComparisonExpr47() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalComparisonExpr47(stack["valueToJudge"], stack["rest"])
}

func (c *current) onBoolComparisonExpr1(left, op, right any) (any, error) {
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  left.(*structs.ValueExpr),
		RightValue: right.(*structs.ValueExpr),
		ValueOp:    op.(string),
	}

	return expr, nil
}

func (p *parser) callonBoolComparisonExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolComparisonExpr1(stack["left"], stack["op"], stack["right"])
}

func (c *current) onValueExpr2(condition any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMConditionExpr,
		ConditionExpr: condition.(*structs.ConditionExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr2(stack["condition"])
}

func (c *current) onValueExpr5(condition any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMConditionExpr,
		ConditionExpr: condition.(*structs.ConditionExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr5(stack["condition"])
}

func (c *current) onValueExpr11(numeric any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMNumericExpr,
		NumericExpr:   numeric.(*structs.NumericExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr11(stack["numeric"])
}

func (c *current) onValueExpr14(str any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMStringExpr,
		StringExpr:    str.(*structs.StringExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr14(stack["str"])
}

func (c *current) onValueExpr17(str any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMStringExpr,
		StringExpr:    str.(*structs.StringExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr17(stack["str"])
}

func (c *current) onValueExpr23(boolean any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolean.(*structs.BoolExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr23(stack["boolean"])
}

func (c *current) onStringExpr2(text any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMTextExpr,
		TextExpr:       text.(*structs.TextExpr),
	}

	return expr, nil
}

func (p *parser) callonStringExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr2(stack["text"])
}

func (c *current) onStringExpr8(str any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMRawString,
		RawString:      removeQuotes(str),
	}

	return expr, nil
}

func (p *parser) callonStringExpr8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr8(stack["str"])
}

func (c *current) onStringExpr14(field any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMField,
		FieldName:      field.(string),
	}

	return expr, nil
}

func (p *parser) callonStringExpr14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr14(stack["field"])
}

func (c *current) onStringExpr26(concat any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMConcatExpr,
		ConcatExpr:     concat.(*structs.ConcatExpr),
	}

	return expr, nil
}

func (p *parser) callonStringExpr26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr26(stack["concat"])
}

func (c *current) onConcatExpr1(first, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ConcatAtom, 1+len(restSlice))
	slice[0] = first.(*structs.ConcatAtom)

	for i := range restSlice {
		concatAndAtom := restSlice[i].([]any)
		slice[i+1] = concatAndAtom[1].(*structs.ConcatAtom)
	}

	expr := &structs.ConcatExpr{
		Atoms: slice,
	}

	return expr, nil
}

func (p *parser) callonConcatExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatExpr1(stack["first"], stack["rest"])
}

func (c *current) onConcatAtom2(text any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField:  false,
		Value:    "",
		TextExpr: text.(*structs.TextExpr),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom2(stack["text"])
}

func (c *current) onConcatAtom5(str any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: false,
		Value:   removeQuotes(str),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom5(stack["str"])
}

func (c *current) onConcatAtom8(number any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: false,
		Value:   number.(string),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom8(stack["number"])
}

func (c *current) onConcatAtom11(field any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: true,
		Value:   field.(string),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom11(stack["field"])
}

func (c *current) onNumericExpr1(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExpr1(stack["expr"])
}

func (c *current) onNumericExprLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.NumericExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.NumericExpr{
			IsTerminal:      false,
			Op:              opAndClause[0].(string),
			Left:            cur,
			Right:           opAndClause[1].(*structs.NumericExpr),
			NumericExprMode: structs.NEMNumericExpr,
		}
	}

	return cur, nil
}

func (p *parser) callonNumericExprLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel31(stack["first"], stack["rest"])
}

func (c *current) onNumericExprLevel21(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.NumericExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.NumericExpr{
			IsTerminal:      false,
			Op:              opAndClause[0].(string),
			Left:            cur,
			Right:           opAndClause[1].(*structs.NumericExpr),
			NumericExprMode: structs.NEMNumericExpr,
		}
	}

	return cur, nil
}

func (p *parser) callonNumericExprLevel21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel21(stack["first"], stack["rest"])
}

func (c *current) onNumericParamExpr1(expr any) (any, error) {
	rightNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	return rightNumericExpr, nil
}

func (p *parser) callonNumericParamExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericParamExpr1(stack["expr"])
}

func (c *current) onNumericExprLevel12(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericExprLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel12(stack["expr"])
}

func (c *current) onNumericExprLevel18(numericEvalExpr any) (any, error) {
	return numericEvalExpr, nil
}

func (p *parser) callonNumericExprLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel18(stack["numericEvalExpr"])
}

func (c *current) onNumericExprLevel111(field any) (any, error) {
	expr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    true,
		Value:           field.(string),
		NumericExprMode: structs.NEMNumberField,
	}

	return expr, nil
}

func (p *parser) callonNumericExprLevel111() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel111(stack["field"])
}

func (c *current) onNumericExprLevel114(number any) (any, error) {
	expr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    false,
		Value:           number.(string),
		NumericExprMode: structs.NEMNumber,
	}

	return expr, nil
}

func (p *parser) callonNumericExprLevel114() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel114(stack["number"])
}

func (c *current) onNumericEvalExpr2(opName, expr any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)
	node, err := createNumericExpr(opNameStr, leftNumericExpr, nil, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr2(stack["opName"], stack["expr"])
}

func (c *current) onNumericEvalExpr31(roundExpr, expr, roundPrecision any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	var rightNumericExpr *structs.NumericExpr
	if roundPrecision != nil {
		rightNumericExpr, ok = roundPrecision.(*structs.NumericExpr)
		if !ok {
			return nil, fmt.Errorf("Failed to assert roundPrecision as *structs.NumericExpr")
		}
	}

	node, err := createNumericExpr("round", leftNumericExpr, rightNumericExpr, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr31(stack["roundExpr"], stack["expr"], stack["roundPrecision"])
}

func (c *current) onNumericEvalExpr42(opName any) (any, error) {
	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)
	return &structs.NumericExpr{
		IsTerminal: true,
		Op:         opNameStr,
	}, nil
}

func (p *parser) callonNumericEvalExpr42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr42(stack["opName"])
}

func (c *current) onNumericEvalExpr52(stringExpr, baseExpr any) (any, error) {
	stringExprConverted, ok := stringExpr.(*structs.StringExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert stringExpr as *structs.StringExpr")
	}

	var baseExprConverted *structs.NumericExpr
	if baseExpr != nil {
		baseSlice, ok := baseExpr.([]interface{})
		if ok && len(baseSlice) > 1 {
			if base, ok := baseSlice[1].(*structs.NumericExpr); ok {
				baseExprConverted = base
			} else {
				return nil, fmt.Errorf("Failed to assert base as *structs.NumericExpr")
			}
		}
	}

	node := &structs.NumericExpr{
		IsTerminal:      false,
		Op:              "tonumber",
		Left:            nil,
		Right:           baseExprConverted,
		Val:             stringExprConverted,
		NumericExprMode: structs.NEMNumericExpr,
	}
	return node, nil
}

func (p *parser) callonNumericEvalExpr52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr52(stack["stringExpr"], stack["baseExpr"])
}

func (c *current) onNumericEvalExpr64(lenExpr, expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericEvalExpr64() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr64(stack["lenExpr"], stack["expr"])
}

func (c *current) onNumericEvalExpr72(opName, expr, param any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)

	var rightNumericExpr *structs.NumericExpr
	if param == nil {
		return nil, fmt.Errorf("Function: %v 's param can not be nil", opNameStr)
	}
	rightNumericExpr, ok = param.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert param as *structs.NumericExpr")
	}

	node, err := createNumericExpr(opNameStr, leftNumericExpr, rightNumericExpr, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr72() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr72(stack["opName"], stack["expr"], stack["param"])
}

func (c *current) onNumericEvalExpr85(opName, expr, param any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)

	var rightNumericExpr *structs.NumericExpr
	if param != nil {
		rightNumericExpr, ok = param.(*structs.NumericExpr)
		if !ok {
			return nil, fmt.Errorf("Failed to assert param as *structs.NumericExpr")
		}
	}

	node, err := createNumericExpr(opNameStr, leftNumericExpr, rightNumericExpr, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr85() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr85(stack["opName"], stack["expr"], stack["param"])
}

func (c *current) onNumericEvalExpr96(opName, expr, specifier any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: NumericExpr: %v", err)
	}
	node, err := createNumericExpr(opNameStr, expr.(*structs.NumericExpr), nil, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}
	node.Val = specifier.(*structs.StringExpr)
	return node, nil
}

func (p *parser) callonNumericEvalExpr96() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr96(stack["opName"], stack["expr"], stack["specifier"])
}

func (c *current) onLenExpr2(str any) (any, error) {

	leftNumericExpr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    false,
		Value:           str.(string),
		NumericExprMode: structs.NEMLenString,
	}

	node, err := createNumericExpr("len", leftNumericExpr, nil, structs.NEMLenString)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonLenExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLenExpr2(stack["str"])
}

func (c *current) onLenExpr8(field any) (any, error) {

	leftNumericExpr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    true,
		Value:           field.(string),
		NumericExprMode: structs.NEMLenField,
	}

	node, err := createNumericExpr("len", leftNumericExpr, nil, structs.NEMLenField)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonLenExpr8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLenExpr8(stack["field"])
}

func (c *current) onHeadBlock2(intAsStr any) (any, error) {
	limit, err := strconv.ParseUint(intAsStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid limit (%v): %v", intAsStr.(string), err)
	}

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			MaxRows: limit,
		},
	}

	return queryAgg, nil
}

func (p *parser) callonHeadBlock2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadBlock2(stack["intAsStr"])
}

func (c *current) onHeadBlock12() (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			MaxRows: uint64(10), // From https://docs.splunk.com/Documentation/Splunk/9.1.0/SearchReference/Head
		},
	}

	return queryAgg, nil
}

func (p *parser) callonHeadBlock12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadBlock12()
}

func (c *current) onAggregationList1(first, rest any) (any, error) {
	// Convert `rest` to a slice. Each element of the slice will be a 2-element
	// slice where the first element is ", " and the second is an Aggregator.
	restSlice := rest.([]any)

	numAggs := 1 + len(restSlice)
	aggsSlice := make([]*aggregator, numAggs)
	aggsSlice[0] = first.(*aggregator)

	for i := 1; i < numAggs; i++ {
		separatorAndAgg := restSlice[i-1].([]any)
		aggsSlice[i] = separatorAndAgg[1].(*aggregator)
	}

	return aggsSlice, nil
}

func (p *parser) callonAggregationList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregationList1(stack["first"], stack["rest"])
}

func (c *current) onAggregator1(aggFunc, asField any) (any, error) {
	agg := &aggregator{}
	agg.measureAgg = aggFunc.(*structs.MeasureAggregator)

	if asField != nil {
		agg.renameOutputField = true
		agg.outputFieldNewName = asField.(string)
	}

	return agg, nil
}

func (p *parser) callonAggregator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregator1(stack["aggFunc"], stack["asField"])
}

func (c *current) onAggFunction1(agg any) (any, error) {
	return agg, nil
}

func (p *parser) callonAggFunction1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggFunction1(stack["agg"])
}

func (c *current) onAsField1(field any) (any, error) {
	fieldStr := field.(string)

	if strings.Contains(fieldStr, "*") {
		return nil, errors.New("The field specified in `AS` cannot contain wildcards")
	}

	if fieldStr[0] == '"' && fieldStr[len(fieldStr)-1] == '"' {
		fieldStr = fieldStr[1 : len(fieldStr)-1]
	}

	return fieldStr, nil
}

func (p *parser) callonAsField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsField1(stack["field"])
}

func (c *current) onAggCount2(boolExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Count,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggCount2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggCount2(stack["boolExpr"])
}

func (c *current) onAggCount12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Count,
	}

	return agg, nil
}

func (p *parser) callonAggCount12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggCount12(stack["field"])
}

func (c *current) onAggCount21() (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  "*",
		MeasureFunc: utils.Count,
	}

	return agg, nil
}

func (p *parser) callonAggCount21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggCount21()
}

func (c *current) onAggDistinctCount2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Cardinality,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggDistinctCount2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggDistinctCount2(stack["valueExpr"])
}

func (c *current) onAggDistinctCount12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Cardinality,
	}

	return agg, nil
}

func (p *parser) callonAggDistinctCount12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggDistinctCount12(stack["field"])
}

func (c *current) onAggAvg2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Avg,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggAvg2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAvg2(stack["boolComparisonExpr"])
}

func (c *current) onAggAvg12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Avg,
	}

	return agg, nil
}

func (p *parser) callonAggAvg12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAvg12(stack["field"])
}

func (c *current) onAggMin2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Min,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggMin2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMin2(stack["boolComparisonExpr"])
}

func (c *current) onAggMin12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Min,
	}

	return agg, nil
}

func (p *parser) callonAggMin12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMin12(stack["field"])
}

func (c *current) onAggMax2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Max,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggMax2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMax2(stack["boolComparisonExpr"])
}

func (c *current) onAggMax12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Max,
	}

	return agg, nil
}

func (p *parser) callonAggMax12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMax12(stack["field"])
}

func (c *current) onAggRange2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Range,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggRange2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRange2(stack["boolComparisonExpr"])
}

func (c *current) onAggRange12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Range,
	}

	return agg, nil
}

func (p *parser) callonAggRange12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRange12(stack["field"])
}

func (c *current) onAggSum2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Sum,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggSum2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSum2(stack["boolComparisonExpr"])
}

func (c *current) onAggSum12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Sum,
	}

	return agg, nil
}

func (p *parser) callonAggSum12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSum12(stack["field"])
}

func (c *current) onAggEstdc2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Estdc,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggEstdc2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEstdc2(stack["boolComparisonExpr"])
}

func (c *current) onAggEstdc12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Estdc,
	}

	return agg, nil
}

func (p *parser) callonAggEstdc12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEstdc12(stack["field"])
}

func (c *current) onAggEstdcError2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.EstdcError,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggEstdcError2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEstdcError2(stack["boolComparisonExpr"])
}

func (c *current) onAggEstdcError12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.EstdcError,
	}

	return agg, nil
}

func (p *parser) callonAggEstdcError12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEstdcError12(stack["field"])
}

func (c *current) onAggExactPerc2(numStr, boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.ExactPerc,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
		Param:           numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggExactPerc2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggExactPerc2(stack["numStr"], stack["boolComparisonExpr"])
}

func (c *current) onAggExactPerc16(numStr, field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.ExactPerc,
		Param:       numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggExactPerc16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggExactPerc16(stack["numStr"], stack["field"])
}

func (c *current) onAggPerc2(numStr, boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Perc,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
		Param:           numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggPerc2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggPerc2(stack["numStr"], stack["boolComparisonExpr"])
}

func (c *current) onAggPerc16(numStr, field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Perc,
		Param:       numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggPerc16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggPerc16(stack["numStr"], stack["field"])
}

func (c *current) onAggUpperPerc2(numStr, boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.UpperPerc,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
		Param:           numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggUpperPerc2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggUpperPerc2(stack["numStr"], stack["boolComparisonExpr"])
}

func (c *current) onAggUpperPerc16(numStr, field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.UpperPerc,
		Param:       numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggUpperPerc16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggUpperPerc16(stack["numStr"], stack["field"])
}

func (c *current) onAggMedian2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Median,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggMedian2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMedian2(stack["boolComparisonExpr"])
}

func (c *current) onAggMedian12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Median,
	}

	return agg, nil
}

func (p *parser) callonAggMedian12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMedian12(stack["field"])
}

func (c *current) onAggMode2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Mode,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggMode2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMode2(stack["boolComparisonExpr"])
}

func (c *current) onAggMode12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Mode,
	}

	return agg, nil
}

func (p *parser) callonAggMode12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMode12(stack["field"])
}

func (c *current) onAggStdev2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Stdev,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggStdev2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggStdev2(stack["boolComparisonExpr"])
}

func (c *current) onAggStdev12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Stdev,
	}

	return agg, nil
}

func (p *parser) callonAggStdev12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggStdev12(stack["field"])
}

func (c *current) onAggStdevp2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Stdevp,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggStdevp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggStdevp2(stack["boolComparisonExpr"])
}

func (c *current) onAggStdevp12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Stdevp,
	}

	return agg, nil
}

func (p *parser) callonAggStdevp12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggStdevp12(stack["field"])
}

func (c *current) onAggSumsq2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Sumsq,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggSumsq2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSumsq2(stack["boolComparisonExpr"])
}

func (c *current) onAggSumsq12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Sumsq,
	}

	return agg, nil
}

func (p *parser) callonAggSumsq12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSumsq12(stack["field"])
}

func (c *current) onAggVar2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Var,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggVar2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggVar2(stack["boolComparisonExpr"])
}

func (c *current) onAggVar12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Var,
	}

	return agg, nil
}

func (p *parser) callonAggVar12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggVar12(stack["field"])
}

func (c *current) onAggVarp2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Varp,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggVarp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggVarp2(stack["boolComparisonExpr"])
}

func (c *current) onAggVarp12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Varp,
	}

	return agg, nil
}

func (p *parser) callonAggVarp12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggVarp12(stack["field"])
}

func (c *current) onAggFirst2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.First,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggFirst2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggFirst2(stack["boolComparisonExpr"])
}

func (c *current) onAggFirst12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.First,
	}

	return agg, nil
}

func (p *parser) callonAggFirst12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggFirst12(stack["field"])
}

func (c *current) onAggLast2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Last,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggLast2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLast2(stack["boolComparisonExpr"])
}

func (c *current) onAggLast12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Last,
	}

	return agg, nil
}

func (p *parser) callonAggLast12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLast12(stack["field"])
}

func (c *current) onAggList2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.List,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggList2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggList2(stack["valueExpr"])
}

func (c *current) onAggList10(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.List,
	}

	return agg, nil
}

func (p *parser) callonAggList10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggList10(stack["field"])
}

func (c *current) onAggEarliest2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Earliest,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggEarliest2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEarliest2(stack["boolComparisonExpr"])
}

func (c *current) onAggEarliest12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Earliest,
	}

	return agg, nil
}

func (p *parser) callonAggEarliest12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEarliest12(stack["field"])
}

func (c *current) onAggEarliestTime2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.EarliestTime,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggEarliestTime2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEarliestTime2(stack["boolComparisonExpr"])
}

func (c *current) onAggEarliestTime12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.EarliestTime,
	}

	return agg, nil
}

func (p *parser) callonAggEarliestTime12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEarliestTime12(stack["field"])
}

func (c *current) onAggLatest2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Latest,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggLatest2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLatest2(stack["boolComparisonExpr"])
}

func (c *current) onAggLatest12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Latest,
	}

	return agg, nil
}

func (p *parser) callonAggLatest12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLatest12(stack["field"])
}

func (c *current) onAggLatestTime2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.LatestTime,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggLatestTime2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLatestTime2(stack["boolComparisonExpr"])
}

func (c *current) onAggLatestTime12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.LatestTime,
	}

	return agg, nil
}

func (p *parser) callonAggLatestTime12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLatestTime12(stack["field"])
}

func (c *current) onAggRate2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.StatsRate,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggRate2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRate2(stack["boolComparisonExpr"])
}

func (c *current) onAggRate12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.StatsRate,
	}

	return agg, nil
}

func (p *parser) callonAggRate12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRate12(stack["field"])
}

func (c *current) onAggValues2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Values,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggValues2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggValues2(stack["valueExpr"])
}

func (c *current) onAggValues10(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Values,
	}

	return agg, nil
}

func (p *parser) callonAggValues10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggValues10(stack["field"])
}

func (c *current) onFieldWithNumberValue1(keyValuePair any) (any, error) {
	return keyValuePair, nil
}

func (p *parser) callonFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithNumberValue1(stack["keyValuePair"])
}

func (c *current) onNamedFieldWithNumberValue1(key, op, value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     op.(string),
			Field:  key.(string),
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonNamedFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedFieldWithNumberValue1(stack["key"], stack["op"], stack["value"])
}

func (c *current) onUnnamedFieldWithNumberValue1(value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     "=",
			Field:  "*",
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonUnnamedFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnnamedFieldWithNumberValue1(stack["value"])
}

func (c *current) onFieldWithBooleanValue1(key, op, value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     op.(string),
			Field:  key.(string),
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonFieldWithBooleanValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithBooleanValue1(stack["key"], stack["op"], stack["value"])
}

func (c *current) onFieldWithStringValue1(keyValuePair any) (any, error) {
	return keyValuePair, nil
}

func (p *parser) callonFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithStringValue1(stack["keyValuePair"])
}

func (c *current) onNamedFieldWithStringValue1(key, op, value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     op.(string),
			Field:  key.(string),
			Values: value,
		},
	}
	return node, nil
}

func (p *parser) callonNamedFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedFieldWithStringValue1(stack["key"], stack["op"], stack["value"])
}

func (c *current) onUnnamedFieldWithStringValue1(value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     "=",
			Field:  "*",
			Values: value,
		},
	}
	return node, nil
}

func (p *parser) callonUnnamedFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnnamedFieldWithStringValue1(stack["value"])
}

func (c *current) onFieldNameList1(first, rest any) (any, error) {
	// Convert `rest` to a slice. Each element of the slice will be a 2-element
	// slice where the first element is ", " and the second is a FieldName.
	restSlice := rest.([]any)

	numFieldNames := 1 + len(restSlice)
	fields := make([]string, numFieldNames)
	fields[0] = first.(string)

	for i := 1; i < numFieldNames; i++ {
		separatorAndField := restSlice[i-1].([]any)
		fields[i] = separatorAndField[1].(string)
	}

	return fields, nil
}

func (p *parser) callonFieldNameList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldNameList1(stack["first"], stack["rest"])
}

func (c *current) onFieldName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFieldName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldName1()
}

func (c *current) onFieldNameStartWith_1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFieldNameStartWith_1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldNameStartWith_1()
}

func (c *current) onString1(str any) (any, error) {
	return str, nil
}

func (p *parser) callonString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onString1(stack["str"])
}

func (c *current) onQuotedString1() (any, error) {
	// The returned string has quotes as the first and last character.
	return string(c.text), nil
}

func (p *parser) callonQuotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString1()
}

func (c *current) onUnquotedString1() (any, error) {
	// Return the string wrapped in quotes.
	str := "\"" + string(c.text) + "\""
	return str, nil
}

func (p *parser) callonUnquotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedString1()
}

func (c *current) onUnquotedStringWithTemplateWildCard1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUnquotedStringWithTemplateWildCard1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedStringWithTemplateWildCard1()
}

func (c *current) onBoolean1() (any, error) {
	boolValue, _ := strconv.ParseBool(string(c.text))
	return boolValue, nil
}

func (p *parser) callonBoolean1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolean1()
}

func (c *current) onRenamePattern1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonRenamePattern1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenamePattern1()
}

func (c *current) onNumber1(number any) (any, error) {
	return json.Number(number.(string)), nil
}

func (p *parser) callonNumber1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1(stack["number"])
}

func (c *current) onNumberAsString1(number any) (any, error) {
	return number, nil
}

func (p *parser) callonNumberAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumberAsString1(stack["number"])
}

func (c *current) onFloatAsString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatAsString1()
}

func (c *current) onIntegerAsString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIntegerAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerAsString1()
}

func (c *current) onEqualityOperator1(op any) (any, error) {
	opStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: EqualityOperator: %v", err)
	}
	return opStr, nil
}

func (p *parser) callonEqualityOperator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator1(stack["op"])
}

func (c *current) onInequalityOperator1(op any) (any, error) {
	opStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: InequalityOperator: %v", err)
	}
	return opStr, nil
}

func (p *parser) callonInequalityOperator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInequalityOperator1(stack["op"])
}

func (c *current) onEqualityOrInequality2(op any) (any, error) {
	return op, nil
}

func (p *parser) callonEqualityOrInequality2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOrInequality2(stack["op"])
}

func (c *current) onEqualityOrInequality5(op any) (any, error) {
	return op, nil
}

func (p *parser) callonEqualityOrInequality5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOrInequality5(stack["op"])
}

func (c *current) onOpPlus1() (any, error) {
	return "+", nil
}

func (p *parser) callonOpPlus1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpPlus1()
}

func (c *current) onOpMinus1() (any, error) {
	return "-", nil
}

func (p *parser) callonOpMinus1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpMinus1()
}

func (c *current) onOpMul1() (any, error) {
	return "*", nil
}

func (p *parser) callonOpMul1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpMul1()
}

func (c *current) onOpDiv1() (any, error) {
	return "/", nil
}

func (p *parser) callonOpDiv1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpDiv1()
}

func (c *current) onSecond1() (any, error) {
	return utils.TMSecond, nil
}

func (p *parser) callonSecond1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSecond1()
}

func (c *current) onMinute1() (any, error) {
	return utils.TMMinute, nil
}

func (p *parser) callonMinute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinute1()
}

func (c *current) onHour1() (any, error) {
	return utils.TMHour, nil
}

func (p *parser) callonHour1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHour1()
}

func (c *current) onDay1() (any, error) {
	return utils.TMDay, nil
}

func (p *parser) callonDay1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDay1()
}

func (c *current) onWeek1() (any, error) {
	return utils.TMWeek, nil
}

func (p *parser) callonWeek1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeek1()
}

func (c *current) onMonth1() (any, error) {
	return utils.TMMonth, nil
}

func (p *parser) callonMonth1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMonth1()
}

func (c *current) onQuarter1() (any, error) {
	return utils.TMQuarter, nil
}

func (p *parser) callonQuarter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuarter1()
}

func (c *current) onSubseconds1() (any, error) {
	timeUnit, err := utils.ConvertSubseconds(string(c.text))
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Subseconds: %v", err)
	}
	return timeUnit, nil
}

func (p *parser) callonSubseconds1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubseconds1()
}

func (c *current) onTransactionBlock1(txnOptions any) (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType:      structs.TransactionType,
		TransactionArguments: txnOptions.(*structs.TransactionArguments),
	}
	return queryAgg, nil
}

func (p *parser) callonTransactionBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionBlock1(stack["txnOptions"])
}

func (c *current) onTransactionOptions1(txnOptions any) (any, error) {

	transactionRequest := &structs.TransactionArguments{}

	if txnOptions != nil {
		txnArgs := txnOptions.(*TxnArgs).arguments
		transactionRequest.Fields = txnArgs.Fields
		transactionRequest.StartsWith = txnArgs.StartsWith
		transactionRequest.EndsWith = txnArgs.EndsWith
	}

	return transactionRequest, nil
}

func (p *parser) callonTransactionOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionOptions1(stack["txnOptions"])
}

func (c *current) onTransactionDefinitionOptionsList1(first, rest any) (any, error) {

	restSlice := rest.([]any)
	txnArgs := &TxnArgs{
		argOption: "txn-definition",
		arguments: &structs.TransactionArguments{},
	}

	numArgs := 1 + len(restSlice)

	for i := 0; i < numArgs; i++ {
		var txnArg *TxnArgs
		if i == 0 {
			txnArg = first.(*TxnArgs)
		} else {
			separatorAndArg := restSlice[i-1].([]any)
			txnArg = separatorAndArg[1].(*TxnArgs)
		}
		argOption := txnArg.argOption

		switch argOption {
		case "fields":
			txnArgs.arguments.Fields = txnArg.arguments.Fields
		case "startswith":
			txnArgs.arguments.StartsWith = txnArg.arguments.StartsWith
		case "endswith":
			txnArgs.arguments.EndsWith = txnArg.arguments.EndsWith
		default:
			return nil, fmt.Errorf("Not a Valid Transaction Argument option")
		}
	}

	return txnArgs, nil
}

func (p *parser) callonTransactionDefinitionOptionsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionDefinitionOptionsList1(stack["first"], stack["rest"])
}

func (c *current) onTransactionDefinitionOption1(option any) (any, error) {
	return option, nil
}

func (p *parser) callonTransactionDefinitionOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionDefinitionOption1(stack["option"])
}

func (c *current) onSpaceSeparatedFieldNameList1(first, rest any) (any, error) {
	var fields []string
	fields = append(fields, first.(string))
	for _, r := range rest.([]any) {
		// Extracting the field name from the tuple (SPACE, FieldName)
		fields = append(fields, r.([]any)[1].(string))
	}

	txnArg := &TxnArgs{
		argOption: "fields",
		arguments: &structs.TransactionArguments{
			Fields: fields,
		},
	}

	return txnArg, nil
}

func (p *parser) callonSpaceSeparatedFieldNameList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpaceSeparatedFieldNameList1(stack["first"], stack["rest"])
}

func (c *current) onStartsWithOption1(strExpr any) (any, error) {
	txnArg := &TxnArgs{
		argOption: "startswith",
		arguments: &structs.TransactionArguments{
			StartsWith: strExpr.(*structs.FilterStringExpr),
		},
	}
	return txnArg, nil
}

func (p *parser) callonStartsWithOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStartsWithOption1(stack["strExpr"])
}

func (c *current) onEndsWithOption1(strExpr any) (any, error) {
	txnArg := &TxnArgs{
		argOption: "endswith",
		arguments: &structs.TransactionArguments{
			EndsWith: strExpr.(*structs.FilterStringExpr),
		},
	}
	return txnArg, nil
}

func (p *parser) callonEndsWithOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEndsWithOption1(stack["strExpr"])
}

func (c *current) onTransactionFilterString1(strExpr any) (any, error) {
	return strExpr, nil
}

func (p *parser) callonTransactionFilterString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionFilterString1(stack["strExpr"])
}

func (c *current) onTransactionQuotedString1(str any) (any, error) {
	return str, nil
}

func (p *parser) callonTransactionQuotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionQuotedString1(stack["str"])
}

func (c *current) onTransactionQuotedStringSearchExpr1(searchClause any) (any, error) {
	filterStrExpr := &structs.FilterStringExpr{
		SearchNode: searchClause.(*ast.Node),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionQuotedStringSearchExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionQuotedStringSearchExpr1(stack["searchClause"])
}

func (c *current) onQuotedStringNoOp1() (any, error) {
	// The returned string has quotes as the first and last character.
	return string(c.text), nil
}

func (p *parser) callonQuotedStringNoOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedStringNoOp1()
}

func (c *current) onTransactionQuotedStringValue1(str any) (any, error) {
	filterStrExpr := &structs.FilterStringExpr{
		StringValue: removeQuotes(str.(string)),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionQuotedStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionQuotedStringValue1(stack["str"])
}

func (c *current) onTransactionSearch1(expr any) (any, error) {

	filterStrExpr := &structs.FilterStringExpr{
		SearchNode: expr.(*ast.Node),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionSearch1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionSearch1(stack["expr"])
}

func (c *current) onTransactionEval1(condition any) (any, error) {
	filterStrExpr := &structs.FilterStringExpr{
		EvalBoolExpr: condition.(*structs.BoolExpr),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionEval1(stack["condition"])
}

func (c *current) onMultiValueBlock1(mvQueryAggNode any) (any, error) {
	return mvQueryAggNode, nil
}

func (p *parser) callonMultiValueBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiValueBlock1(stack["mvQueryAggNode"])
}

func (c *current) onMakeMVBlock1(mvColOptionExpr, field any) (any, error) {
	var mvColExpr *structs.MultiValueColLetRequest

	if mvColOptionExpr != nil {
		mvColExpr = mvColOptionExpr.(*structs.MultiValueColLetRequest)
	} else {
		mvColExpr = &structs.MultiValueColLetRequest{}
	}

	mvColExpr.Command = "makemv"
	mvColExpr.ColName = field.(string)

	if mvColExpr.DelimiterString == "" {
		mvColExpr.DelimiterString = " " // default single space
	}

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: &structs.LetColumnsRequest{
				MultiValueColRequest: mvColExpr,
			},
		},
	}

	return queryAgg, nil
}

func (p *parser) callonMakeMVBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMakeMVBlock1(stack["mvColOptionExpr"], stack["field"])
}

func (c *current) onMVBlockOptionsList1(first, rest any) (any, error) {
	restSlice := rest.([]any)

	numOptions := 1 + len(restSlice)

	mvColExpr := &structs.MultiValueColLetRequest{}

	for i := 0; i < numOptions; i++ {
		var currMvColExpr *MultiValueColOptionArgs
		if i == 0 {
			currMvColExpr = first.(*MultiValueColOptionArgs)
		} else {
			separator := restSlice[i-1].([]any)
			currMvColExpr = separator[1].(*MultiValueColOptionArgs)
		}

		argOption := currMvColExpr.argOption

		switch argOption {
		case "delimiter":
			mvColExpr.DelimiterString = currMvColExpr.mvColExpr.DelimiterString
			mvColExpr.IsRegex = currMvColExpr.mvColExpr.IsRegex
		case "allowempty":
			mvColExpr.AllowEmpty = currMvColExpr.mvColExpr.AllowEmpty
		case "setsv":
			mvColExpr.Setsv = currMvColExpr.mvColExpr.Setsv
		default:
			return nil, fmt.Errorf("Not a Valid MVBlockOption: %v", argOption)
		}
	}

	return mvColExpr, nil
}

func (p *parser) callonMVBlockOptionsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMVBlockOptionsList1(stack["first"], stack["rest"])
}

func (c *current) onMVBlockOption1(option any) (any, error) {
	return option, nil
}

func (p *parser) callonMVBlockOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMVBlockOption1(stack["option"])
}

func (c *current) onDelimOption1(delimExpr any) (any, error) {
	return delimExpr, nil
}

func (p *parser) callonDelimOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimOption1(stack["delimExpr"])
}

func (c *current) onStringDelimiter1(str any) (any, error) {
	mvColOptionArgs := &MultiValueColOptionArgs{
		argOption: "delimiter",
		mvColExpr: &structs.MultiValueColLetRequest{
			DelimiterString: removeQuotes(str),
		},
	}

	return mvColOptionArgs, nil
}

func (p *parser) callonStringDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringDelimiter1(stack["str"])
}

func (c *current) onRegexDelimiter1(str any) (any, error) {
	pattern := removeQuotes(str)
	_, err := regexp.Compile(pattern)
	if err != nil {
		return nil, fmt.Errorf("Error parsing tokenizer regular expression: %v. Error: %v", pattern, err)
	}

	mvColOptionArgs := &MultiValueColOptionArgs{
		argOption: "delimiter",
		mvColExpr: &structs.MultiValueColLetRequest{
			DelimiterString: pattern,
			IsRegex:         true,
		},
	}

	return mvColOptionArgs, nil
}

func (p *parser) callonRegexDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexDelimiter1(stack["str"])
}

func (c *current) onAllowEmptyOption1(boolVal any) (any, error) {

	mvColOptionArgs := &MultiValueColOptionArgs{
		argOption: "allowempty",
		mvColExpr: &structs.MultiValueColLetRequest{
			AllowEmpty: boolVal.(bool),
		},
	}

	return mvColOptionArgs, nil
}

func (p *parser) callonAllowEmptyOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAllowEmptyOption1(stack["boolVal"])
}

func (c *current) onSetSvOption1(boolVal any) (any, error) {
	mvColOptionArgs := &MultiValueColOptionArgs{
		argOption: "setsv",
		mvColExpr: &structs.MultiValueColLetRequest{
			Setsv: boolVal.(bool),
		},
	}

	return mvColOptionArgs, nil
}

func (p *parser) callonSetSvOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSetSvOption1(stack["boolVal"])
}

func (c *current) onSPathBlock1(spathExpr any) (any, error) {
	if spathExpr == nil {
		return createSPathExpr("", "", "")
	}
	return spathExpr, nil
}

func (p *parser) callonSPathBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSPathBlock1(stack["spathExpr"])
}

func (c *current) onSPathArgumentsList1(first, rest any) (any, error) {

	restSlice := rest.([]any)

	inputField, pathField, outputField := "", "", ""

	numArgs := 1 + len(restSlice)

	for i := 0; i < numArgs; i++ {
		var arg string
		if i == 0 {
			arg = first.(string)
		} else {
			separator := restSlice[i-1].([]any)
			arg = separator[1].(string)
		}

		switch {
		case strings.HasPrefix(arg, "input="):
			inputField = strings.TrimPrefix(arg, "input=")
		case strings.HasPrefix(arg, "output="):
			outputField = strings.TrimPrefix(arg, "output=")
		case strings.HasPrefix(arg, "path="):
			pathField = strings.TrimPrefix(arg, "path=")
		default:
			return nil, fmt.Errorf("SPathArguments: Invalid Spath Argument: %v", arg)
		}
	}

	return createSPathExpr(inputField, pathField, outputField)
}

func (p *parser) callonSPathArgumentsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSPathArgumentsList1(stack["first"], stack["rest"])
}

func (c *current) onSPathArgument1(arg any) (any, error) {
	return arg, nil
}

func (p *parser) callonSPathArgument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSPathArgument1(stack["arg"])
}

func (c *current) onInputField1(field any) (any, error) {
	return "input=" + field.(string), nil
}

func (p *parser) callonInputField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInputField1(stack["field"])
}

func (c *current) onOutputField1(field any) (any, error) {
	return "output=" + field.(string), nil
}

func (p *parser) callonOutputField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOutputField1(stack["field"])
}

func (c *current) onPathField1() (any, error) {
	pathField := string(c.text)
	if strings.HasPrefix(pathField, "path") {
		pathField = strings.TrimSpace(strings.TrimPrefix(pathField, "path="))
		pathField = strings.TrimSpace(strings.TrimPrefix(pathField, "path ="))
		if pathField != "" && pathField[0] == '"' {
			pathField = removeQuotes(pathField)
		}
	}
	return "path=" + pathField, nil
}

func (p *parser) callonPathField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPathField1()
}

func (c *current) onFormatBlock1(formatArgExpr any) (any, error) {
	var formatResultExpr *structs.FormatResultsRequest

	if formatArgExpr != nil {
		formatResultExpr = formatArgExpr.(*structs.FormatResultsRequest)
	} else {
		formatResultExpr = getDefaultFormatResultsExpr()
	}

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: &structs.LetColumnsRequest{
				NewColName:    "search",
				FormatResults: formatResultExpr,
			},
		},
	}

	return queryAgg, nil
}

func (p *parser) callonFormatBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatBlock1(stack["formatArgExpr"])
}

func (c *current) onFormatArgumentsList1(first, rest any) (any, error) {
	restSlice := rest.([]any)

	numOptions := 1 + len(restSlice)

	formatResultExpr := getDefaultFormatResultsExpr()

	for i := 0; i < numOptions; i++ {
		var currFormatExpr *FormatResultsRequestArguments

		if i == 0 {
			currFormatExpr = first.(*FormatResultsRequestArguments)
		} else {
			separator := restSlice[i-1].([]any)
			currFormatExpr = separator[1].(*FormatResultsRequestArguments)
		}

		switch currFormatExpr.argOption {
		case "mvsep":
			formatResultExpr.MVSeparator = currFormatExpr.formatResultExpr.MVSeparator
		case "maxresults":
			formatResultExpr.MaxResults = currFormatExpr.formatResultExpr.MaxResults
		case "emptystr":
			formatResultExpr.EmptyString = currFormatExpr.formatResultExpr.EmptyString
		case "rowColOptions":
			formatResultExpr.RowColOptions = currFormatExpr.formatResultExpr.RowColOptions
		default:
			return nil, fmt.Errorf("not a valid Format Result Argument: %v", currFormatExpr.argOption)
		}
	}

	return formatResultExpr, nil
}

func (p *parser) callonFormatArgumentsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArgumentsList1(stack["first"], stack["rest"])
}

func (c *current) onFormatArgument1(argExpr any) (any, error) {
	return argExpr, nil
}

func (p *parser) callonFormatArgument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArgument1(stack["argExpr"])
}

func (c *current) onFormatSeparator1(str any) (any, error) {
	return &FormatResultsRequestArguments{
		argOption: "mvsep",
		formatResultExpr: &structs.FormatResultsRequest{
			MVSeparator: removeQuotes(str),
		},
	}, nil
}

func (p *parser) callonFormatSeparator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatSeparator1(stack["str"])
}

func (c *current) onFormatMaxResults1(numStr any) (any, error) {
	num, err := strconv.ParseUint(numStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid Max results value is set for format: (%v): Error=%v", numStr.(string), err)
	}
	return &FormatResultsRequestArguments{
		argOption: "maxresults",
		formatResultExpr: &structs.FormatResultsRequest{
			MaxResults: num,
		},
	}, nil
}

func (p *parser) callonFormatMaxResults1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatMaxResults1(stack["numStr"])
}

func (c *current) onFormatEmptyStr1(str any) (any, error) {
	return &FormatResultsRequestArguments{
		argOption: "emptystr",
		formatResultExpr: &structs.FormatResultsRequest{
			EmptyString: removeQuotes(str),
		},
	}, nil
}

func (p *parser) callonFormatEmptyStr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatEmptyStr1(stack["str"])
}

func (c *current) onFormatRowColOptions1(rowPrefix, colPrefix, colSeparator, colEnd, rowSeparator, rowEnd any) (any, error) {
	rowColOptions := &structs.RowColOptions{
		RowPrefix:       removeQuotes(rowPrefix),
		ColumnPrefix:    removeQuotes(colPrefix),
		ColumnSeparator: removeQuotes(colSeparator),
		ColumnEnd:       removeQuotes(colEnd),
		RowSeparator:    removeQuotes(rowSeparator),
		RowEnd:          removeQuotes(rowEnd),
	}

	return &FormatResultsRequestArguments{
		argOption: "rowColOptions",
		formatResultExpr: &structs.FormatResultsRequest{
			RowColOptions: rowColOptions,
		},
	}, nil
}

func (p *parser) callonFormatRowColOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatRowColOptions1(stack["rowPrefix"], stack["colPrefix"], stack["colSeparator"], stack["colEnd"], stack["rowSeparator"], stack["rowEnd"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize {
		val, ok = p.parseRuleMemoize(rule)
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
