// Code generated by pigeon; DO NOT EDIT.

// Copyright (c) 2021-2024 SigScalr, Inc.
//
// This file is part of SigLens Observability Solution
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

package spl

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"
	"unicode"
	"unicode/utf8"

	"github.com/siglens/siglens/pkg/ast"
	"github.com/siglens/siglens/pkg/segment/aggregations"
	"github.com/siglens/siglens/pkg/segment/query"
	"github.com/siglens/siglens/pkg/segment/structs"
	"github.com/siglens/siglens/pkg/segment/utils"
	log "github.com/sirupsen/logrus"
)

// ConvertCustomDateTimeFormatToEpochMs converts a date string in the format "MM/DD/YYYY:HH:MM:SS"
// to Unix time in milliseconds (epoch ms).
func ConvertCustomDateTimeFormatToEpochMs(dateStr string) (int64, error) {
	loc, _ := time.LoadLocation("Local")
	t, err := time.ParseInLocation("01/02/2006:15:04:05", dateStr, loc)
	if err != nil {
		return 0, err
	}
	return t.UnixMilli(), nil
}

// This function would snap backwards based on unit present.
// For e.x. Consider the time (Wednesday) 06/05/2024:13:37:05.123 (mm/dd/yyyy:hh:mm:ss)
// Snapping on Second would be 06/05/2024:13:37:05.000
// Snapping on Minute would be 06/05/2024:13:37:00.000
// Snapping on Hour would be 06/05/2024:13:00:00.000
// Snapping on Day would be 06/05/2024:00:00:00.000
// Snapping on Month would be 06/05/2024:00:00:00.000
// Snapping on Quarter (would snap to recent most quarter out of Jan 1, Apr 1, Jul 1, Oct 1) would be 04/01/2024:00:00:00.000
// Snapping on Year would be 01/01/2024:00:00:00.000
// Snapping on weekdays (w0 to w7) would snap backward to that weekday.
// Snapping on w0 would be (Sunday) 06/02/2024:00:00:00.000
// Snapping on w1 would be (Monday) 06/03/2024:00:00:00.000 and so on.
// Snap on w0 and w7 is same.
// snap parameter would be a string of the form w0 or it would be utils.TimeUnit constant integers converted to string type (see Rule: RelTimeUnit)
func applySnap(snap string, t time.Time) (time.Time, error) {
	sec := t.Second()
	min := t.Minute()
	hour := t.Hour()
	day := t.Day()
	week := t.Weekday()
	mon := t.Month()
	year := t.Year()

	if snap[0] != 'w' {
		tunit, err := strconv.Atoi(snap)
		if err != nil {
			return t, fmt.Errorf("Error while converting the snap: %v to integer, err: %v", snap, err)
		}

		switch utils.TimeUnit(tunit) {
		case utils.TMSecond:
			return time.Date(year, mon, day, hour, min, sec, 0, time.Local), nil
		case utils.TMMinute:
			return time.Date(year, mon, day, hour, min, 0, 0, time.Local), nil
		case utils.TMHour:
			return time.Date(year, mon, day, hour, 0, 0, 0, time.Local), nil
		case utils.TMDay:
			return time.Date(year, mon, day, 0, 0, 0, 0, time.Local), nil
		case utils.TMWeek:
			diff := week - time.Sunday
			return time.Date(year, mon, day-int(diff), 0, 0, 0, 0, time.Local), nil
		case utils.TMMonth:
			return time.Date(year, mon, 1, 0, 0, 0, 0, time.Local), nil
		case utils.TMQuarter:
			if mon >= time.October {
				mon = time.October
			} else if mon >= time.July {
				mon = time.July
			} else if mon >= time.April {
				mon = time.April
			} else {
				mon = time.January
			}
			return time.Date(year, mon, 1, 0, 0, 0, 0, time.Local), nil
		case utils.TMYear:
			return time.Date(year, 1, 1, 0, 0, 0, 0, time.Local), nil
		default:
			return t, fmt.Errorf("Unsupported time unit for relative timestamp: %v", tunit)
		}
	} else {
		if len(snap) != 2 {
			return t, fmt.Errorf("Error for special week snap, should follow the regex w[0-7] got: %v", snap)
		}
		weeknum := int(snap[1] - '0')
		if weeknum == 7 {
			weeknum = 0
		}
		diff := int(week) - weeknum
		if diff < 0 {
			diff += 7
		}
		return time.Date(year, mon, day, 0, 0, 0, 0, time.Local).AddDate(0, 0, -diff), nil
	}
}

func applyOffset(num int64, unit utils.TimeUnit, t time.Time) (time.Time, error) {

	durNum := time.Duration(num)

	switch unit {
	case utils.TMSecond:
		return t.Add(durNum * time.Second), nil
	case utils.TMMinute:
		return t.Add(durNum * time.Minute), nil
	case utils.TMHour:
		return t.Add(durNum * time.Hour), nil
	case utils.TMDay:
		return t.AddDate(0, 0, int(num)), nil
	case utils.TMWeek:
		return t.AddDate(0, 0, 7*int(num)), nil
	case utils.TMMonth:
		return t.AddDate(0, int(num), 0), nil
	case utils.TMQuarter:
		return t.AddDate(0, 4*int(num), 0), nil
	case utils.TMYear:
		return t.AddDate(int(num), 0, 0), nil
	default:
		return t, fmt.Errorf("Unsupported time unit for relative timestamp: %v", unit)
	}
}

func CalculateRelativeTime(timeModifier ast.TimeModifier, currTime time.Time) (int64, error) {
	var epoch int64 = 0
	var err error
	if timeModifier.AbsoluteTime == "now" {
		epoch = currTime.UnixMilli()
	} else if timeModifier.AbsoluteTime == "1" {
		return 1, nil
	} else if timeModifier.AbsoluteTime != "" {
		epoch, err = ConvertCustomDateTimeFormatToEpochMs(timeModifier.AbsoluteTime)
		if err != nil {
			return 0, err
		}
	} else {
		offsetNum := timeModifier.RelativeTime.RelativeTimeOffset.Offset
		offsetTimeUnit := timeModifier.RelativeTime.RelativeTimeOffset.TimeUnit
		snap := timeModifier.RelativeTime.Snap
		finalTime := currTime
		if offsetNum != 0 {
			finalTime, err = applyOffset(offsetNum, offsetTimeUnit, finalTime)
			if err != nil {
				return 0, err
			}
		}
		if snap != "" {
			finalTime, err = applySnap(snap, finalTime)
			if err != nil {
				return 0, err
			}
		}
		epoch = finalTime.UnixMilli()
	}

	return epoch, nil
}

func getParseError(err error) error {
	switch ev := err.(type) {
	case errList:
		if pe, ok := ev[0].(*parserError); ok {
			return &ast.ParseError{
				Inner:    pe.Inner,
				Line:     pe.pos.line,
				Column:   pe.pos.col,
				Offset:   pe.pos.offset,
				Prefix:   pe.prefix,
				Expected: pe.expected,
			}
		}
	}
	return err
}

// Remove the first and last character of the string
func removeQuotes(s any) string {
	str := s.(string)
	if len(str) < 3 {
		return ""
	}

	return str[1 : len(str)-1]
}

// Check if it rename fields with similar names using a wildcard
func isRegexRename(originalPattern, newPattern string) (bool, error) {
	oldWildcards := strings.Count(originalPattern, "*")
	newWildcards := strings.Count(newPattern, "*")

	if oldWildcards == 0 && newWildcards == 0 {
		return false, nil
	} else if oldWildcards > 0 && oldWildcards == newWildcards {
		return true, nil
	} else {
		return false, errors.New("Patterns do not match")
	}
}

func deMorgansLaw(node *ast.Node) {
	switch node.NodeType {
	case ast.NodeTerminal:
		switch node.Comparison.Op {
		case "=":
			node.Comparison.Op = "!="
		case "!=":
			node.Comparison.Op = "="
		case ">":
			node.Comparison.Op = "<="
		case "<":
			node.Comparison.Op = ">="
		case ">=":
			node.Comparison.Op = "<"
		case "<=":
			node.Comparison.Op = ">"
		default:
			log.Errorf("deMorgansLaw: unexpected node comparison op: %v", node.Comparison.Op)
		}
	case ast.NodeAnd:
		node.NodeType = ast.NodeOr
		deMorgansLaw(node.Left)
		deMorgansLaw(node.Right)
	case ast.NodeOr:
		node.NodeType = ast.NodeAnd
		deMorgansLaw(node.Left)
		deMorgansLaw(node.Right)
	default:
		log.Errorf("deMorgansLaw: unexpected NodeType: %v", node.NodeType)
	}
}

// Generate NumericExpr struct for eval functions
func createNumericExpr(op string, leftNumericExpr *structs.NumericExpr, rightNumericExpr *structs.NumericExpr, numericExprMode structs.NumericExprMode) (*structs.NumericExpr, error) {
	if leftNumericExpr == nil {
		return nil, fmt.Errorf("expr cannot be nil")
	}

	return &structs.NumericExpr{
		IsTerminal:      false,
		Op:              op,
		Left:            leftNumericExpr,
		Right:           rightNumericExpr,
		NumericExprMode: numericExprMode,
	}, nil
}

func transferUint8ToString(opName interface{}) (string, error) {
	strData, ok := opName.([]byte)
	if !ok {
		return "", fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)
	return opNameStr, nil
}

func transferPCREToRE2(pattern string) string {
	pattern = strings.Replace(pattern, "(?<", "(?P<", -1)
	return pattern
}

func getRexColNames(pattern string) ([]string, error) {
	re, err := regexp.Compile(`\?<(?P<GroupName>[a-zA-Z0-9_]+)>`)
	if err != nil {
		return nil, fmt.Errorf("getRexColNames: There are some errors in the pattern: %v", err)
	}
	matches := re.FindAllStringSubmatch(pattern, -1)

	var rexColNames []string
	for _, match := range matches {
		rexColNames = append(rexColNames, match[1])
	}

	return rexColNames, nil
}

func initializeStatsOptions() *structs.StatsOptions {
	return &structs.StatsOptions{
		Delim:          " ",
		Partitions:     1,
		DedupSplitvals: false,
		Allnum:         false,
	}
}

func createSPathExpr(inputField, pathField, outputField string) (*structs.QueryAggregators, error) {

	if inputField == "" {
		inputField = "_raw"
	}

	spathExpr := &structs.SPathExpr{
		InputColName:  inputField,
		Path:          pathField,
		OutputColName: outputField,
	}
	return &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: &structs.LetColumnsRequest{
				ValueColRequest: &structs.ValueExpr{
					ValueExprMode: structs.VEMStringExpr,
					StringExpr: &structs.StringExpr{
						StringExprMode: structs.SEMTextExpr,
						TextExpr: &structs.TextExpr{
							IsTerminal: true,
							Op:         "spath",
							SPathExpr:  spathExpr,
						},
					},
				},
				NewColName: outputField,
			},
		},
	}, nil
}
func createEventCountExpr(indices []string, list_vix, report_size, summarize bool) (*structs.QueryAggregators, error) {
	eventCountExpr := &structs.EventCountExpr{
		Indices:    indices,
		ListVix:    list_vix,
		ReportSize: report_size,
		Summarize:  summarize,
	}
	return &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: &structs.LetColumnsRequest{
				EventCountRequest: eventCountExpr,
			},
		},
	}, nil
}
func getDefaultFormatResultsExpr() *structs.FormatResultsRequest {
	return &structs.FormatResultsRequest{
		MVSeparator: "OR",
		MaxResults:  0,
		EmptyString: "NOT()",
		RowColOptions: &structs.RowColOptions{
			RowPrefix:       "(",
			ColumnPrefix:    "(",
			ColumnSeparator: "AND",
			ColumnEnd:       ")",
			RowSeparator:    "OR",
			RowEnd:          ")",
		},
	}
}

type aggregator struct {
	measureAgg         *structs.MeasureAggregator
	renameOutputField  bool
	outputFieldNewName string
}

type singleAggTemp struct {
	aggregators   []*aggregator
	SplitByClause *structs.SplitByClause
}

type TxnArgs struct {
	argOption string
	arguments *structs.TransactionArguments
}

type TimechartArgs struct {
	singleAggExpr *singleAggTemp
	// TODO: Add eval clause expr.
	tcOptions *structs.TcOptions
}

type MultiValueColOptionArgs struct {
	argOption string
	mvColExpr *structs.MultiValueColLetRequest
}

type HeadOptionArgs struct {
	argOption string
	headExpr  *structs.HeadExpr
}

type SPathFieldExpr struct {
	PathValue       string
	IsPathFieldName bool
}

type FormatResultsRequestArguments struct {
	argOption        string
	formatResultExpr *structs.FormatResultsRequest
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Start",
			pos:  position{line: 414, col: 1, offset: 13384},
			expr: &actionExpr{
				pos: position{line: 414, col: 10, offset: 13393},
				run: (*parser).callonStart1,
				expr: &seqExpr{
					pos: position{line: 414, col: 10, offset: 13393},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 414, col: 10, offset: 13393},
							expr: &ruleRefExpr{
								pos:  position{line: 414, col: 10, offset: 13393},
								name: "SPACE",
							},
						},
						&labeledExpr{
							pos:   position{line: 414, col: 17, offset: 13400},
							label: "initialSearch",
							expr: &ruleRefExpr{
								pos:  position{line: 414, col: 32, offset: 13415},
								name: "InitialSearchBlock",
							},
						},
						&labeledExpr{
							pos:   position{line: 414, col: 52, offset: 13435},
							label: "filterBlocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 414, col: 65, offset: 13448},
								expr: &ruleRefExpr{
									pos:  position{line: 414, col: 66, offset: 13449},
									name: "FilterBlock",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 414, col: 80, offset: 13463},
							label: "queryAggBlocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 414, col: 95, offset: 13478},
								expr: &ruleRefExpr{
									pos:  position{line: 414, col: 96, offset: 13479},
									name: "QueryAggergatorBlock",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 414, col: 119, offset: 13502},
							expr: &ruleRefExpr{
								pos:  position{line: 414, col: 119, offset: 13502},
								name: "SPACE",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 414, col: 126, offset: 13509},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "InitialSearchBlock",
			pos:  position{line: 485, col: 1, offset: 15710},
			expr: &actionExpr{
				pos: position{line: 485, col: 23, offset: 15732},
				run: (*parser).callonInitialSearchBlock1,
				expr: &seqExpr{
					pos: position{line: 485, col: 23, offset: 15732},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 485, col: 23, offset: 15732},
							expr: &ruleRefExpr{
								pos:  position{line: 485, col: 23, offset: 15732},
								name: "CMD_SEARCH",
							},
						},
						&labeledExpr{
							pos:   position{line: 485, col: 35, offset: 15744},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 485, col: 42, offset: 15751},
								name: "ClauseLevel4",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBlock",
			pos:  position{line: 489, col: 1, offset: 15792},
			expr: &actionExpr{
				pos: position{line: 489, col: 16, offset: 15807},
				run: (*parser).callonSearchBlock1,
				expr: &seqExpr{
					pos: position{line: 489, col: 16, offset: 15807},
					exprs: []any{
						&notExpr{
							pos: position{line: 489, col: 16, offset: 15807},
							expr: &ruleRefExpr{
								pos:  position{line: 489, col: 18, offset: 15809},
								name: "ALLCMD",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 489, col: 26, offset: 15817},
							expr: &ruleRefExpr{
								pos:  position{line: 489, col: 26, offset: 15817},
								name: "CMD_SEARCH",
							},
						},
						&labeledExpr{
							pos:   position{line: 489, col: 38, offset: 15829},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 489, col: 45, offset: 15836},
								name: "ClauseLevel4",
							},
						},
					},
				},
			},
		},
		{
			name: "FilterBlock",
			pos:  position{line: 493, col: 1, offset: 15877},
			expr: &actionExpr{
				pos: position{line: 493, col: 16, offset: 15892},
				run: (*parser).callonFilterBlock1,
				expr: &seqExpr{
					pos: position{line: 493, col: 16, offset: 15892},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 493, col: 16, offset: 15892},
							name: "PIPE",
						},
						&labeledExpr{
							pos:   position{line: 493, col: 21, offset: 15897},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 493, col: 28, offset: 15904},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 493, col: 28, offset: 15904},
										name: "SearchBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 493, col: 42, offset: 15918},
										name: "RegexBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 493, col: 55, offset: 15931},
										name: "TimeModifiers",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QueryAggergatorBlock",
			pos:  position{line: 498, col: 1, offset: 16010},
			expr: &actionExpr{
				pos: position{line: 498, col: 25, offset: 16034},
				run: (*parser).callonQueryAggergatorBlock1,
				expr: &labeledExpr{
					pos:   position{line: 498, col: 25, offset: 16034},
					label: "block",
					expr: &choiceExpr{
						pos: position{line: 498, col: 32, offset: 16041},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 498, col: 32, offset: 16041},
								name: "FieldSelectBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 498, col: 51, offset: 16060},
								name: "AggregatorBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 498, col: 69, offset: 16078},
								name: "EvalBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 498, col: 81, offset: 16090},
								name: "WhereBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 498, col: 94, offset: 16103},
								name: "HeadBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 498, col: 106, offset: 16115},
								name: "RexBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 498, col: 117, offset: 16126},
								name: "StatisticBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 498, col: 134, offset: 16143},
								name: "RenameBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 498, col: 148, offset: 16157},
								name: "TimechartBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 498, col: 165, offset: 16174},
								name: "TransactionBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 498, col: 184, offset: 16193},
								name: "DedupBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 498, col: 197, offset: 16206},
								name: "SortBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 498, col: 209, offset: 16218},
								name: "MultiValueBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 498, col: 227, offset: 16236},
								name: "SPathBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 498, col: 240, offset: 16249},
								name: "FormatBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 498, col: 254, offset: 16263},
								name: "EventCountBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldSelectBlock",
			pos:  position{line: 503, col: 1, offset: 16360},
			expr: &actionExpr{
				pos: position{line: 503, col: 21, offset: 16380},
				run: (*parser).callonFieldSelectBlock1,
				expr: &seqExpr{
					pos: position{line: 503, col: 21, offset: 16380},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 503, col: 21, offset: 16380},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 503, col: 26, offset: 16385},
							name: "CMD_FIELDS",
						},
						&labeledExpr{
							pos:   position{line: 503, col: 37, offset: 16396},
							label: "op",
							expr: &zeroOrOneExpr{
								pos: position{line: 503, col: 40, offset: 16399},
								expr: &choiceExpr{
									pos: position{line: 503, col: 41, offset: 16400},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 503, col: 41, offset: 16400},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
										&litMatcher{
											pos:        position{line: 503, col: 47, offset: 16406},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 503, col: 53, offset: 16412},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 503, col: 68, offset: 16427},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 503, col: 75, offset: 16434},
								name: "FieldNameList",
							},
						},
					},
				},
			},
		},
		{
			name: "AggregatorBlock",
			pos:  position{line: 521, col: 1, offset: 16938},
			expr: &actionExpr{
				pos: position{line: 521, col: 20, offset: 16957},
				run: (*parser).callonAggregatorBlock1,
				expr: &seqExpr{
					pos: position{line: 521, col: 20, offset: 16957},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 521, col: 20, offset: 16957},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 521, col: 25, offset: 16962},
							name: "CMD_STATS",
						},
						&labeledExpr{
							pos:   position{line: 521, col: 35, offset: 16972},
							label: "aggs",
							expr: &ruleRefExpr{
								pos:  position{line: 521, col: 40, offset: 16977},
								name: "AggregationList",
							},
						},
						&labeledExpr{
							pos:   position{line: 521, col: 56, offset: 16993},
							label: "byFields",
							expr: &zeroOrOneExpr{
								pos: position{line: 521, col: 65, offset: 17002},
								expr: &ruleRefExpr{
									pos:  position{line: 521, col: 66, offset: 17003},
									name: "GroupbyBlock",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 521, col: 81, offset: 17018},
							label: "options",
							expr: &zeroOrOneExpr{
								pos: position{line: 521, col: 89, offset: 17026},
								expr: &ruleRefExpr{
									pos:  position{line: 521, col: 90, offset: 17027},
									name: "StatsOptions",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatsOptions",
			pos:  position{line: 574, col: 1, offset: 18761},
			expr: &actionExpr{
				pos: position{line: 574, col: 17, offset: 18777},
				run: (*parser).callonStatsOptions1,
				expr: &labeledExpr{
					pos:   position{line: 574, col: 17, offset: 18777},
					label: "option",
					expr: &zeroOrMoreExpr{
						pos: position{line: 574, col: 24, offset: 18784},
						expr: &ruleRefExpr{
							pos:  position{line: 574, col: 25, offset: 18785},
							name: "StatsOption",
						},
					},
				},
			},
		},
		{
			name: "StatsOption",
			pos:  position{line: 612, col: 1, offset: 20226},
			expr: &actionExpr{
				pos: position{line: 612, col: 16, offset: 20241},
				run: (*parser).callonStatsOption1,
				expr: &seqExpr{
					pos: position{line: 612, col: 16, offset: 20241},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 612, col: 16, offset: 20241},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 612, col: 22, offset: 20247},
							label: "optionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 612, col: 32, offset: 20257},
								name: "StatsOptionCMD",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 612, col: 47, offset: 20272},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 612, col: 53, offset: 20278},
							label: "str",
							expr: &choiceExpr{
								pos: position{line: 612, col: 58, offset: 20283},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 612, col: 58, offset: 20283},
										name: "IntegerAsString",
									},
									&ruleRefExpr{
										pos:  position{line: 612, col: 76, offset: 20301},
										name: "EvalFieldToRead",
									},
									&ruleRefExpr{
										pos:  position{line: 612, col: 94, offset: 20319},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatsOptionCMD",
			pos:  position{line: 617, col: 1, offset: 20424},
			expr: &actionExpr{
				pos: position{line: 617, col: 19, offset: 20442},
				run: (*parser).callonStatsOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 617, col: 19, offset: 20442},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 617, col: 27, offset: 20450},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 617, col: 27, offset: 20450},
								val:        "allnum",
								ignoreCase: false,
								want:       "\"allnum\"",
							},
							&litMatcher{
								pos:        position{line: 617, col: 38, offset: 20461},
								val:        "dedup_splitvals",
								ignoreCase: false,
								want:       "\"dedup_splitvals\"",
							},
							&litMatcher{
								pos:        position{line: 617, col: 58, offset: 20481},
								val:        "delim",
								ignoreCase: false,
								want:       "\"delim\"",
							},
							&litMatcher{
								pos:        position{line: 617, col: 68, offset: 20491},
								val:        "partitions",
								ignoreCase: false,
								want:       "\"partitions\"",
							},
						},
					},
				},
			},
		},
		{
			name: "GroupbyBlock",
			pos:  position{line: 625, col: 1, offset: 20681},
			expr: &actionExpr{
				pos: position{line: 625, col: 17, offset: 20697},
				run: (*parser).callonGroupbyBlock1,
				expr: &seqExpr{
					pos: position{line: 625, col: 17, offset: 20697},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 625, col: 17, offset: 20697},
							name: "BY",
						},
						&labeledExpr{
							pos:   position{line: 625, col: 20, offset: 20700},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 625, col: 27, offset: 20707},
								name: "FieldNameList",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexBlock",
			pos:  position{line: 636, col: 1, offset: 21056},
			expr: &actionExpr{
				pos: position{line: 636, col: 15, offset: 21070},
				run: (*parser).callonRegexBlock1,
				expr: &seqExpr{
					pos: position{line: 636, col: 15, offset: 21070},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 636, col: 15, offset: 21070},
							name: "CMD_REGEX",
						},
						&labeledExpr{
							pos:   position{line: 636, col: 25, offset: 21080},
							label: "keyAndOp",
							expr: &zeroOrOneExpr{
								pos: position{line: 636, col: 34, offset: 21089},
								expr: &seqExpr{
									pos: position{line: 636, col: 35, offset: 21090},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 636, col: 35, offset: 21090},
											name: "FieldName",
										},
										&ruleRefExpr{
											pos:  position{line: 636, col: 45, offset: 21100},
											name: "EqualityOperator",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 636, col: 64, offset: 21119},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 636, col: 68, offset: 21123},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel4",
			pos:  position{line: 664, col: 1, offset: 21702},
			expr: &actionExpr{
				pos: position{line: 664, col: 17, offset: 21718},
				run: (*parser).callonClauseLevel41,
				expr: &seqExpr{
					pos: position{line: 664, col: 17, offset: 21718},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 664, col: 17, offset: 21718},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 664, col: 23, offset: 21724},
								name: "ClauseLevel3",
							},
						},
						&labeledExpr{
							pos:   position{line: 664, col: 36, offset: 21737},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 664, col: 41, offset: 21742},
								expr: &seqExpr{
									pos: position{line: 664, col: 42, offset: 21743},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 664, col: 43, offset: 21744},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 664, col: 43, offset: 21744},
													name: "AND",
												},
												&ruleRefExpr{
													pos:  position{line: 664, col: 49, offset: 21750},
													name: "SPACE",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 664, col: 56, offset: 21757},
											name: "ClauseLevel3",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel3",
			pos:  position{line: 682, col: 1, offset: 22134},
			expr: &actionExpr{
				pos: position{line: 682, col: 17, offset: 22150},
				run: (*parser).callonClauseLevel31,
				expr: &seqExpr{
					pos: position{line: 682, col: 17, offset: 22150},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 682, col: 17, offset: 22150},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 682, col: 23, offset: 22156},
								name: "ClauseLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 682, col: 36, offset: 22169},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 682, col: 41, offset: 22174},
								expr: &seqExpr{
									pos: position{line: 682, col: 42, offset: 22175},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 682, col: 42, offset: 22175},
											name: "OR",
										},
										&ruleRefExpr{
											pos:  position{line: 682, col: 45, offset: 22178},
											name: "ClauseLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel2",
			pos:  position{line: 700, col: 1, offset: 22543},
			expr: &choiceExpr{
				pos: position{line: 700, col: 17, offset: 22559},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 700, col: 17, offset: 22559},
						run: (*parser).callonClauseLevel22,
						expr: &seqExpr{
							pos: position{line: 700, col: 17, offset: 22559},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 700, col: 17, offset: 22559},
									label: "notList",
									expr: &oneOrMoreExpr{
										pos: position{line: 700, col: 25, offset: 22567},
										expr: &ruleRefExpr{
											pos:  position{line: 700, col: 25, offset: 22567},
											name: "NOT",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 700, col: 30, offset: 22572},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 700, col: 36, offset: 22578},
										name: "ClauseLevel1",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 711, col: 5, offset: 22874},
						run: (*parser).callonClauseLevel29,
						expr: &labeledExpr{
							pos:   position{line: 711, col: 5, offset: 22874},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 711, col: 12, offset: 22881},
								name: "ClauseLevel1",
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel1",
			pos:  position{line: 715, col: 1, offset: 22922},
			expr: &choiceExpr{
				pos: position{line: 715, col: 17, offset: 22938},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 715, col: 17, offset: 22938},
						run: (*parser).callonClauseLevel12,
						expr: &seqExpr{
							pos: position{line: 715, col: 17, offset: 22938},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 715, col: 17, offset: 22938},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 715, col: 25, offset: 22946},
									label: "clause",
									expr: &ruleRefExpr{
										pos:  position{line: 715, col: 32, offset: 22953},
										name: "ClauseLevel4",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 715, col: 45, offset: 22966},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 717, col: 5, offset: 23003},
						run: (*parser).callonClauseLevel18,
						expr: &labeledExpr{
							pos:   position{line: 717, col: 5, offset: 23003},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 717, col: 10, offset: 23008},
								name: "SearchTerm",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchTerm",
			pos:  position{line: 723, col: 1, offset: 23166},
			expr: &actionExpr{
				pos: position{line: 723, col: 15, offset: 23180},
				run: (*parser).callonSearchTerm1,
				expr: &labeledExpr{
					pos:   position{line: 723, col: 15, offset: 23180},
					label: "term",
					expr: &choiceExpr{
						pos: position{line: 723, col: 21, offset: 23186},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 723, col: 21, offset: 23186},
								name: "FieldWithNumberValue",
							},
							&ruleRefExpr{
								pos:  position{line: 723, col: 44, offset: 23209},
								name: "FieldWithBooleanValue",
							},
							&ruleRefExpr{
								pos:  position{line: 723, col: 68, offset: 23233},
								name: "FieldWithStringValue",
							},
						},
					},
				},
			},
		},
		{
			name: "TimechartBlock",
			pos:  position{line: 728, col: 1, offset: 23374},
			expr: &actionExpr{
				pos: position{line: 728, col: 19, offset: 23392},
				run: (*parser).callonTimechartBlock1,
				expr: &seqExpr{
					pos: position{line: 728, col: 19, offset: 23392},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 728, col: 19, offset: 23392},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 728, col: 24, offset: 23397},
							name: "CMD_TIMECHART",
						},
						&labeledExpr{
							pos:   position{line: 728, col: 38, offset: 23411},
							label: "tcArgs",
							expr: &ruleRefExpr{
								pos:  position{line: 728, col: 45, offset: 23418},
								name: "TimechartArgumentsList",
							},
						},
						&labeledExpr{
							pos:   position{line: 728, col: 68, offset: 23441},
							label: "limitExpr",
							expr: &zeroOrOneExpr{
								pos: position{line: 728, col: 78, offset: 23451},
								expr: &ruleRefExpr{
									pos:  position{line: 728, col: 79, offset: 23452},
									name: "LimitExpr",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimechartArgumentsList",
			pos:  position{line: 816, col: 1, offset: 26195},
			expr: &actionExpr{
				pos: position{line: 816, col: 27, offset: 26221},
				run: (*parser).callonTimechartArgumentsList1,
				expr: &seqExpr{
					pos: position{line: 816, col: 27, offset: 26221},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 816, col: 27, offset: 26221},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 816, col: 33, offset: 26227},
								name: "TimechartArgument",
							},
						},
						&labeledExpr{
							pos:   position{line: 816, col: 51, offset: 26245},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 816, col: 56, offset: 26250},
								expr: &seqExpr{
									pos: position{line: 816, col: 57, offset: 26251},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 816, col: 57, offset: 26251},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 816, col: 63, offset: 26257},
											name: "TimechartArgument",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimechartArgument",
			pos:  position{line: 845, col: 1, offset: 26991},
			expr: &actionExpr{
				pos: position{line: 845, col: 22, offset: 27012},
				run: (*parser).callonTimechartArgument1,
				expr: &labeledExpr{
					pos:   position{line: 845, col: 22, offset: 27012},
					label: "tcArg",
					expr: &choiceExpr{
						pos: position{line: 845, col: 29, offset: 27019},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 845, col: 29, offset: 27019},
								name: "SingleAggExpr",
							},
							&ruleRefExpr{
								pos:  position{line: 845, col: 45, offset: 27035},
								name: "TcOptions",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleAggExpr",
			pos:  position{line: 849, col: 1, offset: 27073},
			expr: &actionExpr{
				pos: position{line: 849, col: 18, offset: 27090},
				run: (*parser).callonSingleAggExpr1,
				expr: &seqExpr{
					pos: position{line: 849, col: 18, offset: 27090},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 849, col: 18, offset: 27090},
							label: "aggs",
							expr: &ruleRefExpr{
								pos:  position{line: 849, col: 23, offset: 27095},
								name: "AggregationList",
							},
						},
						&labeledExpr{
							pos:   position{line: 849, col: 39, offset: 27111},
							label: "splitByClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 849, col: 53, offset: 27125},
								expr: &ruleRefExpr{
									pos:  position{line: 849, col: 53, offset: 27125},
									name: "SplitByClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SplitByClause",
			pos:  position{line: 863, col: 1, offset: 27464},
			expr: &actionExpr{
				pos: position{line: 863, col: 18, offset: 27481},
				run: (*parser).callonSplitByClause1,
				expr: &seqExpr{
					pos: position{line: 863, col: 18, offset: 27481},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 863, col: 18, offset: 27481},
							name: "BY",
						},
						&labeledExpr{
							pos:   position{line: 863, col: 21, offset: 27484},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 863, col: 27, offset: 27490},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "TcOptions",
			pos:  position{line: 871, col: 1, offset: 27619},
			expr: &actionExpr{
				pos: position{line: 871, col: 14, offset: 27632},
				run: (*parser).callonTcOptions1,
				expr: &labeledExpr{
					pos:   position{line: 871, col: 14, offset: 27632},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 871, col: 22, offset: 27640},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 871, col: 22, offset: 27640},
								name: "BinOptions",
							},
							&oneOrMoreExpr{
								pos: position{line: 871, col: 35, offset: 27653},
								expr: &ruleRefExpr{
									pos:  position{line: 871, col: 36, offset: 27654},
									name: "TcOption",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TcOption",
			pos:  position{line: 913, col: 1, offset: 29174},
			expr: &actionExpr{
				pos: position{line: 913, col: 13, offset: 29186},
				run: (*parser).callonTcOption1,
				expr: &seqExpr{
					pos: position{line: 913, col: 13, offset: 29186},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 913, col: 13, offset: 29186},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 913, col: 19, offset: 29192},
							label: "tcOptionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 913, col: 31, offset: 29204},
								name: "TcOptionCMD",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 913, col: 43, offset: 29216},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 913, col: 49, offset: 29222},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 913, col: 53, offset: 29226},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "TcOptionCMD",
			pos:  position{line: 918, col: 1, offset: 29339},
			expr: &actionExpr{
				pos: position{line: 918, col: 16, offset: 29354},
				run: (*parser).callonTcOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 918, col: 16, offset: 29354},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 918, col: 24, offset: 29362},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 918, col: 24, offset: 29362},
								val:        "usenull",
								ignoreCase: false,
								want:       "\"usenull\"",
							},
							&litMatcher{
								pos:        position{line: 918, col: 36, offset: 29374},
								val:        "useother",
								ignoreCase: false,
								want:       "\"useother\"",
							},
							&litMatcher{
								pos:        position{line: 918, col: 49, offset: 29387},
								val:        "nullstr",
								ignoreCase: false,
								want:       "\"nullstr\"",
							},
							&litMatcher{
								pos:        position{line: 918, col: 61, offset: 29399},
								val:        "otherstr",
								ignoreCase: false,
								want:       "\"otherstr\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BinOptions",
			pos:  position{line: 927, col: 1, offset: 29748},
			expr: &actionExpr{
				pos: position{line: 927, col: 15, offset: 29762},
				run: (*parser).callonBinOptions1,
				expr: &labeledExpr{
					pos:   position{line: 927, col: 15, offset: 29762},
					label: "spanOptions",
					expr: &ruleRefExpr{
						pos:  position{line: 927, col: 27, offset: 29774},
						name: "SpanOptions",
					},
				},
			},
		},
		{
			name: "SpanOptions",
			pos:  position{line: 935, col: 1, offset: 29999},
			expr: &actionExpr{
				pos: position{line: 935, col: 16, offset: 30014},
				run: (*parser).callonSpanOptions1,
				expr: &seqExpr{
					pos: position{line: 935, col: 16, offset: 30014},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 935, col: 16, offset: 30014},
							name: "CMD_SPAN",
						},
						&ruleRefExpr{
							pos:  position{line: 935, col: 25, offset: 30023},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 935, col: 31, offset: 30029},
							label: "spanLength",
							expr: &ruleRefExpr{
								pos:  position{line: 935, col: 42, offset: 30040},
								name: "SpanLength",
							},
						},
					},
				},
			},
		},
		{
			name: "SpanLength",
			pos:  position{line: 942, col: 1, offset: 30186},
			expr: &actionExpr{
				pos: position{line: 942, col: 15, offset: 30200},
				run: (*parser).callonSpanLength1,
				expr: &seqExpr{
					pos: position{line: 942, col: 15, offset: 30200},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 942, col: 15, offset: 30200},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 942, col: 24, offset: 30209},
								name: "IntegerAsString",
							},
						},
						&labeledExpr{
							pos:   position{line: 942, col: 40, offset: 30225},
							label: "timeScale",
							expr: &ruleRefExpr{
								pos:  position{line: 942, col: 50, offset: 30235},
								name: "TimeScale",
							},
						},
					},
				},
			},
		},
		{
			name: "TimeScale",
			pos:  position{line: 955, col: 1, offset: 30553},
			expr: &actionExpr{
				pos: position{line: 955, col: 14, offset: 30566},
				run: (*parser).callonTimeScale1,
				expr: &labeledExpr{
					pos:   position{line: 955, col: 14, offset: 30566},
					label: "timeUnit",
					expr: &choiceExpr{
						pos: position{line: 955, col: 24, offset: 30576},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 955, col: 24, offset: 30576},
								name: "Second",
							},
							&ruleRefExpr{
								pos:  position{line: 955, col: 33, offset: 30585},
								name: "Minute",
							},
							&ruleRefExpr{
								pos:  position{line: 955, col: 42, offset: 30594},
								name: "Hour",
							},
							&ruleRefExpr{
								pos:  position{line: 955, col: 49, offset: 30601},
								name: "Day",
							},
							&ruleRefExpr{
								pos:  position{line: 955, col: 54, offset: 30606},
								name: "Week",
							},
							&ruleRefExpr{
								pos:  position{line: 955, col: 61, offset: 30613},
								name: "Month",
							},
							&ruleRefExpr{
								pos:  position{line: 955, col: 69, offset: 30621},
								name: "Quarter",
							},
							&ruleRefExpr{
								pos:  position{line: 955, col: 78, offset: 30630},
								name: "Subseconds",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitExpr",
			pos:  position{line: 960, col: 1, offset: 30752},
			expr: &actionExpr{
				pos: position{line: 960, col: 14, offset: 30765},
				run: (*parser).callonLimitExpr1,
				expr: &seqExpr{
					pos: position{line: 960, col: 14, offset: 30765},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 960, col: 14, offset: 30765},
							name: "SPACE",
						},
						&litMatcher{
							pos:        position{line: 960, col: 20, offset: 30771},
							val:        "limit",
							ignoreCase: false,
							want:       "\"limit\"",
						},
						&ruleRefExpr{
							pos:  position{line: 960, col: 28, offset: 30779},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 960, col: 34, offset: 30785},
							label: "sortBy",
							expr: &zeroOrOneExpr{
								pos: position{line: 960, col: 41, offset: 30792},
								expr: &choiceExpr{
									pos: position{line: 960, col: 42, offset: 30793},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 960, col: 42, offset: 30793},
											val:        "top",
											ignoreCase: false,
											want:       "\"top\"",
										},
										&litMatcher{
											pos:        position{line: 960, col: 50, offset: 30801},
											val:        "bottom",
											ignoreCase: false,
											want:       "\"bottom\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 960, col: 61, offset: 30812},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 960, col: 76, offset: 30827},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 960, col: 86, offset: 30837},
								name: "IntegerAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticBlock",
			pos:  position{line: 984, col: 1, offset: 31418},
			expr: &actionExpr{
				pos: position{line: 984, col: 19, offset: 31436},
				run: (*parser).callonStatisticBlock1,
				expr: &seqExpr{
					pos: position{line: 984, col: 19, offset: 31436},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 984, col: 19, offset: 31436},
							name: "PIPE",
						},
						&labeledExpr{
							pos:   position{line: 984, col: 24, offset: 31441},
							label: "statisticExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 984, col: 38, offset: 31455},
								name: "StatisticExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticExpr",
			pos:  position{line: 1017, col: 1, offset: 32433},
			expr: &actionExpr{
				pos: position{line: 1017, col: 18, offset: 32450},
				run: (*parser).callonStatisticExpr1,
				expr: &seqExpr{
					pos: position{line: 1017, col: 18, offset: 32450},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1017, col: 18, offset: 32450},
							label: "cmd",
							expr: &choiceExpr{
								pos: position{line: 1017, col: 23, offset: 32455},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1017, col: 23, offset: 32455},
										name: "CMD_TOP",
									},
									&ruleRefExpr{
										pos:  position{line: 1017, col: 33, offset: 32465},
										name: "CMD_RARE",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1017, col: 43, offset: 32475},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 1017, col: 49, offset: 32481},
								expr: &ruleRefExpr{
									pos:  position{line: 1017, col: 50, offset: 32482},
									name: "StatisticLimit",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1017, col: 67, offset: 32499},
							label: "fieldList",
							expr: &seqExpr{
								pos: position{line: 1017, col: 78, offset: 32510},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 1017, col: 78, offset: 32510},
										name: "SPACE",
									},
									&ruleRefExpr{
										pos:  position{line: 1017, col: 84, offset: 32516},
										name: "FieldNameList",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1017, col: 99, offset: 32531},
							label: "byClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 1017, col: 108, offset: 32540},
								expr: &ruleRefExpr{
									pos:  position{line: 1017, col: 109, offset: 32541},
									name: "ByClause",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1017, col: 120, offset: 32552},
							label: "options",
							expr: &zeroOrOneExpr{
								pos: position{line: 1017, col: 128, offset: 32560},
								expr: &ruleRefExpr{
									pos:  position{line: 1017, col: 129, offset: 32561},
									name: "StatisticOptions",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticLimit",
			pos:  position{line: 1059, col: 1, offset: 33646},
			expr: &choiceExpr{
				pos: position{line: 1059, col: 19, offset: 33664},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1059, col: 19, offset: 33664},
						run: (*parser).callonStatisticLimit2,
						expr: &seqExpr{
							pos: position{line: 1059, col: 19, offset: 33664},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1059, col: 19, offset: 33664},
									name: "SPACE",
								},
								&labeledExpr{
									pos:   position{line: 1059, col: 25, offset: 33670},
									label: "number",
									expr: &ruleRefExpr{
										pos:  position{line: 1059, col: 32, offset: 33677},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1062, col: 3, offset: 33731},
						run: (*parser).callonStatisticLimit7,
						expr: &seqExpr{
							pos: position{line: 1062, col: 3, offset: 33731},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1062, col: 3, offset: 33731},
									name: "SPACE",
								},
								&litMatcher{
									pos:        position{line: 1062, col: 9, offset: 33737},
									val:        "limit",
									ignoreCase: false,
									want:       "\"limit\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1062, col: 17, offset: 33745},
									name: "EQUAL",
								},
								&labeledExpr{
									pos:   position{line: 1062, col: 23, offset: 33751},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 1062, col: 30, offset: 33758},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticOptions",
			pos:  position{line: 1067, col: 1, offset: 33856},
			expr: &actionExpr{
				pos: position{line: 1067, col: 21, offset: 33876},
				run: (*parser).callonStatisticOptions1,
				expr: &labeledExpr{
					pos:   position{line: 1067, col: 21, offset: 33876},
					label: "option",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1067, col: 28, offset: 33883},
						expr: &ruleRefExpr{
							pos:  position{line: 1067, col: 29, offset: 33884},
							name: "StatisticOption",
						},
					},
				},
			},
		},
		{
			name: "StatisticOption",
			pos:  position{line: 1116, col: 1, offset: 35446},
			expr: &actionExpr{
				pos: position{line: 1116, col: 20, offset: 35465},
				run: (*parser).callonStatisticOption1,
				expr: &seqExpr{
					pos: position{line: 1116, col: 20, offset: 35465},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1116, col: 20, offset: 35465},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 1116, col: 26, offset: 35471},
							label: "optionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 1116, col: 36, offset: 35481},
								name: "StatisticOptionCMD",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1116, col: 55, offset: 35500},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1116, col: 61, offset: 35506},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1116, col: 67, offset: 35512},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticOptionCMD",
			pos:  position{line: 1121, col: 1, offset: 35621},
			expr: &actionExpr{
				pos: position{line: 1121, col: 23, offset: 35643},
				run: (*parser).callonStatisticOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 1121, col: 23, offset: 35643},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 1121, col: 31, offset: 35651},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 1121, col: 31, offset: 35651},
								val:        "countfield",
								ignoreCase: false,
								want:       "\"countfield\"",
							},
							&litMatcher{
								pos:        position{line: 1121, col: 46, offset: 35666},
								val:        "showcount",
								ignoreCase: false,
								want:       "\"showcount\"",
							},
							&litMatcher{
								pos:        position{line: 1121, col: 60, offset: 35680},
								val:        "otherstr",
								ignoreCase: false,
								want:       "\"otherstr\"",
							},
							&litMatcher{
								pos:        position{line: 1121, col: 73, offset: 35693},
								val:        "useother",
								ignoreCase: false,
								want:       "\"useother\"",
							},
							&litMatcher{
								pos:        position{line: 1121, col: 85, offset: 35705},
								val:        "percentfield",
								ignoreCase: false,
								want:       "\"percentfield\"",
							},
							&litMatcher{
								pos:        position{line: 1121, col: 102, offset: 35722},
								val:        "showperc",
								ignoreCase: false,
								want:       "\"showperc\"",
							},
						},
					},
				},
			},
		},
		{
			name: "ByClause",
			pos:  position{line: 1129, col: 1, offset: 35909},
			expr: &choiceExpr{
				pos: position{line: 1129, col: 13, offset: 35921},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1129, col: 13, offset: 35921},
						run: (*parser).callonByClause2,
						expr: &seqExpr{
							pos: position{line: 1129, col: 13, offset: 35921},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1129, col: 13, offset: 35921},
									name: "BY",
								},
								&labeledExpr{
									pos:   position{line: 1129, col: 16, offset: 35924},
									label: "fieldList",
									expr: &ruleRefExpr{
										pos:  position{line: 1129, col: 26, offset: 35934},
										name: "FieldNameList",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1132, col: 3, offset: 35991},
						run: (*parser).callonByClause7,
						expr: &labeledExpr{
							pos:   position{line: 1132, col: 3, offset: 35991},
							label: "groupByBlock",
							expr: &ruleRefExpr{
								pos:  position{line: 1132, col: 16, offset: 36004},
								name: "GroupbyBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupBlock",
			pos:  position{line: 1136, col: 1, offset: 36062},
			expr: &actionExpr{
				pos: position{line: 1136, col: 15, offset: 36076},
				run: (*parser).callonDedupBlock1,
				expr: &seqExpr{
					pos: position{line: 1136, col: 15, offset: 36076},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1136, col: 15, offset: 36076},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1136, col: 20, offset: 36081},
							name: "CMD_DEDUP",
						},
						&labeledExpr{
							pos:   position{line: 1136, col: 30, offset: 36091},
							label: "dedupExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 1136, col: 40, offset: 36101},
								name: "DedupExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupExpr",
			pos:  position{line: 1156, col: 1, offset: 36669},
			expr: &actionExpr{
				pos: position{line: 1156, col: 14, offset: 36682},
				run: (*parser).callonDedupExpr1,
				expr: &seqExpr{
					pos: position{line: 1156, col: 14, offset: 36682},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1156, col: 14, offset: 36682},
							label: "limitArr",
							expr: &zeroOrOneExpr{
								pos: position{line: 1156, col: 23, offset: 36691},
								expr: &seqExpr{
									pos: position{line: 1156, col: 24, offset: 36692},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1156, col: 24, offset: 36692},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 1156, col: 30, offset: 36698},
											name: "IntegerAsString",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1156, col: 48, offset: 36716},
							label: "options1",
							expr: &zeroOrOneExpr{
								pos: position{line: 1156, col: 57, offset: 36725},
								expr: &ruleRefExpr{
									pos:  position{line: 1156, col: 58, offset: 36726},
									name: "DedupOptions",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1156, col: 73, offset: 36741},
							label: "fieldList",
							expr: &zeroOrOneExpr{
								pos: position{line: 1156, col: 83, offset: 36751},
								expr: &ruleRefExpr{
									pos:  position{line: 1156, col: 84, offset: 36752},
									name: "DedupFieldList",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1156, col: 101, offset: 36769},
							label: "options2",
							expr: &zeroOrOneExpr{
								pos: position{line: 1156, col: 110, offset: 36778},
								expr: &ruleRefExpr{
									pos:  position{line: 1156, col: 111, offset: 36779},
									name: "DedupOptions",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1156, col: 126, offset: 36794},
							label: "sortByClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 1156, col: 139, offset: 36807},
								expr: &ruleRefExpr{
									pos:  position{line: 1156, col: 140, offset: 36808},
									name: "DedupSortByClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DedupFieldName",
			pos:  position{line: 1213, col: 1, offset: 38546},
			expr: &actionExpr{
				pos: position{line: 1213, col: 19, offset: 38564},
				run: (*parser).callonDedupFieldName1,
				expr: &seqExpr{
					pos: position{line: 1213, col: 19, offset: 38564},
					exprs: []any{
						&notExpr{
							pos: position{line: 1213, col: 19, offset: 38564},
							expr: &litMatcher{
								pos:        position{line: 1213, col: 21, offset: 38566},
								val:        "sortby",
								ignoreCase: false,
								want:       "\"sortby\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1213, col: 31, offset: 38576},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1213, col: 37, offset: 38582},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupFieldList",
			pos:  position{line: 1217, col: 1, offset: 38619},
			expr: &actionExpr{
				pos: position{line: 1217, col: 19, offset: 38637},
				run: (*parser).callonDedupFieldList1,
				expr: &seqExpr{
					pos: position{line: 1217, col: 19, offset: 38637},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1217, col: 19, offset: 38637},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 1217, col: 25, offset: 38643},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1217, col: 31, offset: 38649},
								name: "DedupFieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 1217, col: 46, offset: 38664},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1217, col: 51, offset: 38669},
								expr: &seqExpr{
									pos: position{line: 1217, col: 52, offset: 38670},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1217, col: 52, offset: 38670},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 1217, col: 58, offset: 38676},
											name: "DedupFieldName",
										},
										&notExpr{
											pos: position{line: 1217, col: 73, offset: 38691},
											expr: &ruleRefExpr{
												pos:  position{line: 1217, col: 74, offset: 38692},
												name: "EQUAL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DedupOptions",
			pos:  position{line: 1235, col: 1, offset: 39220},
			expr: &actionExpr{
				pos: position{line: 1235, col: 17, offset: 39236},
				run: (*parser).callonDedupOptions1,
				expr: &labeledExpr{
					pos:   position{line: 1235, col: 17, offset: 39236},
					label: "option",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1235, col: 24, offset: 39243},
						expr: &ruleRefExpr{
							pos:  position{line: 1235, col: 25, offset: 39244},
							name: "DedupOption",
						},
					},
				},
			},
		},
		{
			name: "DedupOption",
			pos:  position{line: 1275, col: 1, offset: 40510},
			expr: &actionExpr{
				pos: position{line: 1275, col: 16, offset: 40525},
				run: (*parser).callonDedupOption1,
				expr: &seqExpr{
					pos: position{line: 1275, col: 16, offset: 40525},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1275, col: 16, offset: 40525},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 1275, col: 22, offset: 40531},
							label: "optionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 1275, col: 32, offset: 40541},
								name: "DedupOptionCMD",
							},
						},
						&litMatcher{
							pos:        position{line: 1275, col: 47, offset: 40556},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 1275, col: 51, offset: 40560},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1275, col: 57, offset: 40566},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupOptionCMD",
			pos:  position{line: 1280, col: 1, offset: 40675},
			expr: &actionExpr{
				pos: position{line: 1280, col: 19, offset: 40693},
				run: (*parser).callonDedupOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 1280, col: 19, offset: 40693},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 1280, col: 27, offset: 40701},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 1280, col: 27, offset: 40701},
								val:        "consecutive",
								ignoreCase: false,
								want:       "\"consecutive\"",
							},
							&litMatcher{
								pos:        position{line: 1280, col: 43, offset: 40717},
								val:        "keepempty",
								ignoreCase: false,
								want:       "\"keepempty\"",
							},
							&litMatcher{
								pos:        position{line: 1280, col: 57, offset: 40731},
								val:        "keepevents",
								ignoreCase: false,
								want:       "\"keepevents\"",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupSortByClause",
			pos:  position{line: 1288, col: 1, offset: 40916},
			expr: &actionExpr{
				pos: position{line: 1288, col: 22, offset: 40937},
				run: (*parser).callonDedupSortByClause1,
				expr: &seqExpr{
					pos: position{line: 1288, col: 22, offset: 40937},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1288, col: 22, offset: 40937},
							name: "CMD_DEDUP_SORTBY",
						},
						&labeledExpr{
							pos:   position{line: 1288, col: 39, offset: 40954},
							label: "dedupSortEles",
							expr: &ruleRefExpr{
								pos:  position{line: 1288, col: 53, offset: 40968},
								name: "SortElements",
							},
						},
					},
				},
			},
		},
		{
			name: "SortElements",
			pos:  position{line: 1293, col: 1, offset: 41076},
			expr: &actionExpr{
				pos: position{line: 1293, col: 17, offset: 41092},
				run: (*parser).callonSortElements1,
				expr: &seqExpr{
					pos: position{line: 1293, col: 17, offset: 41092},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1293, col: 17, offset: 41092},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1293, col: 23, offset: 41098},
								name: "SingleSortElement",
							},
						},
						&labeledExpr{
							pos:   position{line: 1293, col: 41, offset: 41116},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1293, col: 46, offset: 41121},
								expr: &seqExpr{
									pos: position{line: 1293, col: 47, offset: 41122},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1293, col: 47, offset: 41122},
											name: "SPACE_OR_COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 1293, col: 62, offset: 41137},
											name: "SingleSortElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleSortElement",
			pos:  position{line: 1308, col: 1, offset: 41495},
			expr: &actionExpr{
				pos: position{line: 1308, col: 22, offset: 41516},
				run: (*parser).callonSingleSortElement1,
				expr: &labeledExpr{
					pos:   position{line: 1308, col: 22, offset: 41516},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1308, col: 31, offset: 41525},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1308, col: 31, offset: 41525},
								name: "SingleSortElementWithCast",
							},
							&ruleRefExpr{
								pos:  position{line: 1308, col: 59, offset: 41553},
								name: "SingleSortElementWithoutCast",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleSortElementWithoutCast",
			pos:  position{line: 1312, col: 1, offset: 41612},
			expr: &actionExpr{
				pos: position{line: 1312, col: 33, offset: 41644},
				run: (*parser).callonSingleSortElementWithoutCast1,
				expr: &seqExpr{
					pos: position{line: 1312, col: 33, offset: 41644},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1312, col: 33, offset: 41644},
							label: "sortBySymbol",
							expr: &choiceExpr{
								pos: position{line: 1312, col: 47, offset: 41658},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 1312, col: 47, offset: 41658},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&litMatcher{
										pos:        position{line: 1312, col: 53, offset: 41664},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
									&litMatcher{
										pos:        position{line: 1312, col: 59, offset: 41670},
										val:        "",
										ignoreCase: false,
										want:       "\"\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1312, col: 63, offset: 41674},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1312, col: 69, offset: 41680},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleSortElementWithCast",
			pos:  position{line: 1327, col: 1, offset: 41955},
			expr: &actionExpr{
				pos: position{line: 1327, col: 30, offset: 41984},
				run: (*parser).callonSingleSortElementWithCast1,
				expr: &seqExpr{
					pos: position{line: 1327, col: 30, offset: 41984},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1327, col: 30, offset: 41984},
							label: "sortBySymbol",
							expr: &choiceExpr{
								pos: position{line: 1327, col: 44, offset: 41998},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 1327, col: 44, offset: 41998},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&litMatcher{
										pos:        position{line: 1327, col: 50, offset: 42004},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
									&litMatcher{
										pos:        position{line: 1327, col: 56, offset: 42010},
										val:        "",
										ignoreCase: false,
										want:       "\"\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1327, col: 60, offset: 42014},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 1327, col: 64, offset: 42018},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 1327, col: 64, offset: 42018},
										val:        "auto",
										ignoreCase: false,
										want:       "\"auto\"",
									},
									&litMatcher{
										pos:        position{line: 1327, col: 73, offset: 42027},
										val:        "str",
										ignoreCase: false,
										want:       "\"str\"",
									},
									&litMatcher{
										pos:        position{line: 1327, col: 81, offset: 42035},
										val:        "ip",
										ignoreCase: false,
										want:       "\"ip\"",
									},
									&litMatcher{
										pos:        position{line: 1327, col: 88, offset: 42042},
										val:        "num",
										ignoreCase: false,
										want:       "\"num\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1327, col: 95, offset: 42049},
							name: "L_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 1327, col: 103, offset: 42057},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1327, col: 109, offset: 42063},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1327, col: 119, offset: 42073},
							name: "R_PAREN",
						},
					},
				},
			},
		},
		{
			name: "RenameBlock",
			pos:  position{line: 1347, col: 1, offset: 42498},
			expr: &actionExpr{
				pos: position{line: 1347, col: 16, offset: 42513},
				run: (*parser).callonRenameBlock1,
				expr: &seqExpr{
					pos: position{line: 1347, col: 16, offset: 42513},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1347, col: 16, offset: 42513},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1347, col: 21, offset: 42518},
							name: "CMD_RENAME",
						},
						&labeledExpr{
							pos:   position{line: 1347, col: 32, offset: 42529},
							label: "renameExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 1347, col: 43, offset: 42540},
								name: "RenameExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameExpr",
			pos:  position{line: 1363, col: 1, offset: 42915},
			expr: &choiceExpr{
				pos: position{line: 1363, col: 15, offset: 42929},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1363, col: 15, offset: 42929},
						run: (*parser).callonRenameExpr2,
						expr: &seqExpr{
							pos: position{line: 1363, col: 15, offset: 42929},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1363, col: 15, offset: 42929},
									label: "originalPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1363, col: 31, offset: 42945},
										name: "RenamePattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1363, col: 45, offset: 42959},
									name: "AS",
								},
								&labeledExpr{
									pos:   position{line: 1363, col: 48, offset: 42962},
									label: "newPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1363, col: 59, offset: 42973},
										name: "QuotedString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1374, col: 3, offset: 43292},
						run: (*parser).callonRenameExpr9,
						expr: &seqExpr{
							pos: position{line: 1374, col: 3, offset: 43292},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1374, col: 3, offset: 43292},
									label: "originalPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1374, col: 19, offset: 43308},
										name: "RenamePattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1374, col: 33, offset: 43322},
									name: "AS",
								},
								&labeledExpr{
									pos:   position{line: 1374, col: 36, offset: 43325},
									label: "newPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1374, col: 47, offset: 43336},
										name: "RenamePattern",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RexBlock",
			pos:  position{line: 1396, col: 1, offset: 43902},
			expr: &actionExpr{
				pos: position{line: 1396, col: 13, offset: 43914},
				run: (*parser).callonRexBlock1,
				expr: &seqExpr{
					pos: position{line: 1396, col: 13, offset: 43914},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1396, col: 13, offset: 43914},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1396, col: 18, offset: 43919},
							name: "CMD_REX",
						},
						&litMatcher{
							pos:        position{line: 1396, col: 26, offset: 43927},
							val:        "field",
							ignoreCase: false,
							want:       "\"field\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1396, col: 34, offset: 43935},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1396, col: 40, offset: 43941},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1396, col: 46, offset: 43947},
								name: "EvalFieldToRead",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1396, col: 62, offset: 43963},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 1396, col: 68, offset: 43969},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 1396, col: 72, offset: 43973},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "SortBlock",
			pos:  position{line: 1424, col: 1, offset: 44676},
			expr: &actionExpr{
				pos: position{line: 1424, col: 14, offset: 44689},
				run: (*parser).callonSortBlock1,
				expr: &seqExpr{
					pos: position{line: 1424, col: 14, offset: 44689},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1424, col: 14, offset: 44689},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1424, col: 19, offset: 44694},
							name: "CMD_SORT",
						},
						&labeledExpr{
							pos:   position{line: 1424, col: 28, offset: 44703},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 1424, col: 34, offset: 44709},
								expr: &ruleRefExpr{
									pos:  position{line: 1424, col: 35, offset: 44710},
									name: "SortLimit",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1424, col: 47, offset: 44722},
							label: "sortByEles",
							expr: &ruleRefExpr{
								pos:  position{line: 1424, col: 58, offset: 44733},
								name: "SortElements",
							},
						},
					},
				},
			},
		},
		{
			name: "SortLimit",
			pos:  position{line: 1461, col: 1, offset: 45584},
			expr: &actionExpr{
				pos: position{line: 1461, col: 14, offset: 45597},
				run: (*parser).callonSortLimit1,
				expr: &seqExpr{
					pos: position{line: 1461, col: 14, offset: 45597},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 1461, col: 14, offset: 45597},
							expr: &seqExpr{
								pos: position{line: 1461, col: 15, offset: 45598},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1461, col: 15, offset: 45598},
										val:        "limit",
										ignoreCase: false,
										want:       "\"limit\"",
									},
									&ruleRefExpr{
										pos:  position{line: 1461, col: 23, offset: 45606},
										name: "EQUAL",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1461, col: 31, offset: 45614},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 1461, col: 40, offset: 45623},
								name: "IntegerAsString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1461, col: 56, offset: 45639},
							name: "SPACE",
						},
					},
				},
			},
		},
		{
			name: "EvalBlock",
			pos:  position{line: 1475, col: 1, offset: 45938},
			expr: &actionExpr{
				pos: position{line: 1475, col: 14, offset: 45951},
				run: (*parser).callonEvalBlock1,
				expr: &seqExpr{
					pos: position{line: 1475, col: 14, offset: 45951},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1475, col: 14, offset: 45951},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1475, col: 19, offset: 45956},
							name: "CMD_EVAL",
						},
						&labeledExpr{
							pos:   position{line: 1475, col: 28, offset: 45965},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1475, col: 34, offset: 45971},
								name: "SingleEval",
							},
						},
						&labeledExpr{
							pos:   position{line: 1475, col: 45, offset: 45982},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1475, col: 50, offset: 45987},
								expr: &seqExpr{
									pos: position{line: 1475, col: 51, offset: 45988},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1475, col: 51, offset: 45988},
											name: "COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 1475, col: 57, offset: 45994},
											name: "SingleEval",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleEval",
			pos:  position{line: 1502, col: 1, offset: 46795},
			expr: &actionExpr{
				pos: position{line: 1502, col: 15, offset: 46809},
				run: (*parser).callonSingleEval1,
				expr: &seqExpr{
					pos: position{line: 1502, col: 15, offset: 46809},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1502, col: 15, offset: 46809},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1502, col: 21, offset: 46815},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1502, col: 31, offset: 46825},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1502, col: 37, offset: 46831},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 1502, col: 42, offset: 46836},
								name: "EvalExpression",
							},
						},
					},
				},
			},
		},
		{
			name: "EvalExpression",
			pos:  position{line: 1515, col: 1, offset: 47237},
			expr: &actionExpr{
				pos: position{line: 1515, col: 19, offset: 47255},
				run: (*parser).callonEvalExpression1,
				expr: &labeledExpr{
					pos:   position{line: 1515, col: 19, offset: 47255},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 1515, col: 25, offset: 47261},
						name: "ValueExpr",
					},
				},
			},
		},
		{
			name: "ConditionExpr",
			pos:  position{line: 1524, col: 1, offset: 47485},
			expr: &choiceExpr{
				pos: position{line: 1524, col: 18, offset: 47502},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1524, col: 18, offset: 47502},
						run: (*parser).callonConditionExpr2,
						expr: &seqExpr{
							pos: position{line: 1524, col: 18, offset: 47502},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1524, col: 18, offset: 47502},
									val:        "if",
									ignoreCase: false,
									want:       "\"if\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1524, col: 23, offset: 47507},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1524, col: 31, offset: 47515},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 1524, col: 41, offset: 47525},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1524, col: 50, offset: 47534},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1524, col: 56, offset: 47540},
									label: "trueValue",
									expr: &ruleRefExpr{
										pos:  position{line: 1524, col: 66, offset: 47550},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1524, col: 76, offset: 47560},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1524, col: 82, offset: 47566},
									label: "falseValue",
									expr: &ruleRefExpr{
										pos:  position{line: 1524, col: 93, offset: 47577},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1524, col: 103, offset: 47587},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1535, col: 3, offset: 47838},
						run: (*parser).callonConditionExpr15,
						expr: &seqExpr{
							pos: position{line: 1535, col: 3, offset: 47838},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1535, col: 3, offset: 47838},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1535, col: 11, offset: 47846},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1535, col: 11, offset: 47846},
												val:        "case",
												ignoreCase: false,
												want:       "\"case\"",
											},
											&litMatcher{
												pos:        position{line: 1535, col: 20, offset: 47855},
												val:        "validate",
												ignoreCase: false,
												want:       "\"validate\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1535, col: 32, offset: 47867},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1535, col: 40, offset: 47875},
									label: "pair",
									expr: &ruleRefExpr{
										pos:  position{line: 1535, col: 45, offset: 47880},
										name: "ConditionValuePair",
									},
								},
								&labeledExpr{
									pos:   position{line: 1535, col: 64, offset: 47899},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1535, col: 69, offset: 47904},
										expr: &seqExpr{
											pos: position{line: 1535, col: 70, offset: 47905},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1535, col: 70, offset: 47905},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1535, col: 76, offset: 47911},
													name: "ConditionValuePair",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1535, col: 97, offset: 47932},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1558, col: 3, offset: 48536},
						run: (*parser).callonConditionExpr30,
						expr: &seqExpr{
							pos: position{line: 1558, col: 3, offset: 48536},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1558, col: 3, offset: 48536},
									val:        "coalesce",
									ignoreCase: false,
									want:       "\"coalesce\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1558, col: 14, offset: 48547},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1558, col: 22, offset: 48555},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1558, col: 32, offset: 48565},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1558, col: 42, offset: 48575},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1558, col: 47, offset: 48580},
										expr: &seqExpr{
											pos: position{line: 1558, col: 48, offset: 48581},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1558, col: 48, offset: 48581},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1558, col: 54, offset: 48587},
													name: "ValueExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1558, col: 66, offset: 48599},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1575, col: 3, offset: 49018},
						run: (*parser).callonConditionExpr42,
						expr: &seqExpr{
							pos: position{line: 1575, col: 3, offset: 49018},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1575, col: 3, offset: 49018},
									val:        "nullif",
									ignoreCase: false,
									want:       "\"nullif\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1575, col: 12, offset: 49027},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1575, col: 20, offset: 49035},
									label: "leftValue",
									expr: &ruleRefExpr{
										pos:  position{line: 1575, col: 30, offset: 49045},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1575, col: 40, offset: 49055},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1575, col: 46, offset: 49061},
									label: "rightValue",
									expr: &ruleRefExpr{
										pos:  position{line: 1575, col: 57, offset: 49072},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1575, col: 67, offset: 49082},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConditionValuePair",
			pos:  position{line: 1588, col: 1, offset: 49361},
			expr: &actionExpr{
				pos: position{line: 1588, col: 23, offset: 49383},
				run: (*parser).callonConditionValuePair1,
				expr: &seqExpr{
					pos: position{line: 1588, col: 23, offset: 49383},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1588, col: 23, offset: 49383},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 1588, col: 33, offset: 49393},
								name: "BoolExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1588, col: 42, offset: 49402},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 1588, col: 48, offset: 49408},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1588, col: 54, offset: 49414},
								name: "ValueExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "TextExpr",
			pos:  position{line: 1598, col: 1, offset: 49855},
			expr: &choiceExpr{
				pos: position{line: 1598, col: 13, offset: 49867},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1598, col: 13, offset: 49867},
						run: (*parser).callonTextExpr2,
						expr: &seqExpr{
							pos: position{line: 1598, col: 14, offset: 49868},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1598, col: 14, offset: 49868},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1598, col: 22, offset: 49876},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1598, col: 22, offset: 49876},
												val:        "lower",
												ignoreCase: false,
												want:       "\"lower\"",
											},
											&litMatcher{
												pos:        position{line: 1598, col: 32, offset: 49886},
												val:        "upper",
												ignoreCase: false,
												want:       "\"upper\"",
											},
											&litMatcher{
												pos:        position{line: 1598, col: 42, offset: 49896},
												val:        "urldecode",
												ignoreCase: false,
												want:       "\"urldecode\"",
											},
											&litMatcher{
												pos:        position{line: 1598, col: 56, offset: 49910},
												val:        "mvcount",
												ignoreCase: false,
												want:       "\"mvcount\"",
											},
											&litMatcher{
												pos:        position{line: 1598, col: 68, offset: 49922},
												val:        "mvdedup",
												ignoreCase: false,
												want:       "\"mvdedup\"",
											},
											&litMatcher{
												pos:        position{line: 1598, col: 80, offset: 49934},
												val:        "mvsort",
												ignoreCase: false,
												want:       "\"mvsort\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1598, col: 90, offset: 49944},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1598, col: 98, offset: 49952},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1598, col: 109, offset: 49963},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1598, col: 120, offset: 49974},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1610, col: 3, offset: 50288},
						run: (*parser).callonTextExpr16,
						expr: &seqExpr{
							pos: position{line: 1610, col: 4, offset: 50289},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1610, col: 4, offset: 50289},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1610, col: 12, offset: 50297},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1610, col: 12, offset: 50297},
												val:        "max",
												ignoreCase: false,
												want:       "\"max\"",
											},
											&litMatcher{
												pos:        position{line: 1610, col: 20, offset: 50305},
												val:        "min",
												ignoreCase: false,
												want:       "\"min\"",
											},
											&litMatcher{
												pos:        position{line: 1610, col: 28, offset: 50313},
												val:        "mvappend",
												ignoreCase: false,
												want:       "\"mvappend\"",
											},
											&litMatcher{
												pos:        position{line: 1610, col: 41, offset: 50326},
												val:        "mvfind",
												ignoreCase: false,
												want:       "\"mvfind\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1610, col: 51, offset: 50336},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1610, col: 59, offset: 50344},
									label: "firstVal",
									expr: &ruleRefExpr{
										pos:  position{line: 1610, col: 68, offset: 50353},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1610, col: 79, offset: 50364},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1610, col: 84, offset: 50369},
										expr: &seqExpr{
											pos: position{line: 1610, col: 85, offset: 50370},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1610, col: 85, offset: 50370},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1610, col: 91, offset: 50376},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1610, col: 104, offset: 50389},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1632, col: 3, offset: 50989},
						run: (*parser).callonTextExpr33,
						expr: &seqExpr{
							pos: position{line: 1632, col: 4, offset: 50990},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1632, col: 4, offset: 50990},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1632, col: 12, offset: 50998},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1632, col: 12, offset: 50998},
												val:        "split",
												ignoreCase: false,
												want:       "\"split\"",
											},
											&litMatcher{
												pos:        position{line: 1632, col: 22, offset: 51008},
												val:        "mvjoin",
												ignoreCase: false,
												want:       "\"mvjoin\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1632, col: 32, offset: 51018},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1632, col: 40, offset: 51026},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1632, col: 51, offset: 51037},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1632, col: 62, offset: 51048},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1632, col: 68, offset: 51054},
									label: "delim",
									expr: &ruleRefExpr{
										pos:  position{line: 1632, col: 74, offset: 51060},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1632, col: 85, offset: 51071},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1644, col: 3, offset: 51404},
						run: (*parser).callonTextExpr46,
						expr: &seqExpr{
							pos: position{line: 1644, col: 4, offset: 51405},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1644, col: 4, offset: 51405},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1644, col: 12, offset: 51413},
										val:        "substr",
										ignoreCase: false,
										want:       "\"substr\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1644, col: 22, offset: 51423},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1644, col: 30, offset: 51431},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1644, col: 41, offset: 51442},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1644, col: 52, offset: 51453},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1644, col: 58, offset: 51459},
									label: "startIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 1644, col: 69, offset: 51470},
										name: "NumericExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1644, col: 81, offset: 51482},
									label: "lengthParam",
									expr: &zeroOrOneExpr{
										pos: position{line: 1644, col: 93, offset: 51494},
										expr: &seqExpr{
											pos: position{line: 1644, col: 94, offset: 51495},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1644, col: 94, offset: 51495},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1644, col: 100, offset: 51501},
													name: "NumericExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1644, col: 114, offset: 51515},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1669, col: 3, offset: 52345},
						run: (*parser).callonTextExpr62,
						expr: &seqExpr{
							pos: position{line: 1669, col: 3, offset: 52345},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1669, col: 3, offset: 52345},
									val:        "tostring",
									ignoreCase: false,
									want:       "\"tostring\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1669, col: 14, offset: 52356},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1669, col: 22, offset: 52364},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 1669, col: 28, offset: 52370},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1669, col: 38, offset: 52380},
									label: "format",
									expr: &zeroOrOneExpr{
										pos: position{line: 1669, col: 45, offset: 52387},
										expr: &seqExpr{
											pos: position{line: 1669, col: 46, offset: 52388},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1669, col: 46, offset: 52388},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1669, col: 52, offset: 52394},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1669, col: 65, offset: 52407},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1682, col: 3, offset: 52775},
						run: (*parser).callonTextExpr74,
						expr: &seqExpr{
							pos: position{line: 1682, col: 4, offset: 52776},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1682, col: 4, offset: 52776},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1682, col: 12, offset: 52784},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1682, col: 12, offset: 52784},
												val:        "ltrim",
												ignoreCase: false,
												want:       "\"ltrim\"",
											},
											&litMatcher{
												pos:        position{line: 1682, col: 22, offset: 52794},
												val:        "rtrim",
												ignoreCase: false,
												want:       "\"rtrim\"",
											},
											&litMatcher{
												pos:        position{line: 1682, col: 32, offset: 52804},
												val:        "trim",
												ignoreCase: false,
												want:       "\"trim\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1682, col: 40, offset: 52812},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1682, col: 48, offset: 52820},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1682, col: 54, offset: 52826},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1682, col: 66, offset: 52838},
									label: "strToRemoveExpr",
									expr: &zeroOrOneExpr{
										pos: position{line: 1682, col: 82, offset: 52854},
										expr: &ruleRefExpr{
											pos:  position{line: 1682, col: 83, offset: 52855},
											name: "StrToRemoveExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1682, col: 101, offset: 52873},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1701, col: 3, offset: 53313},
						run: (*parser).callonTextExpr88,
						expr: &seqExpr{
							pos: position{line: 1701, col: 3, offset: 53313},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1701, col: 3, offset: 53313},
									val:        "spath",
									ignoreCase: false,
									want:       "\"spath\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1701, col: 11, offset: 53321},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1701, col: 19, offset: 53329},
									label: "inputField",
									expr: &ruleRefExpr{
										pos:  position{line: 1701, col: 30, offset: 53340},
										name: "FieldNameStartWith_",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1701, col: 50, offset: 53360},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1701, col: 56, offset: 53366},
									label: "path",
									expr: &choiceExpr{
										pos: position{line: 1701, col: 62, offset: 53372},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 1701, col: 62, offset: 53372},
												name: "QuotedPathString",
											},
											&ruleRefExpr{
												pos:  position{line: 1701, col: 81, offset: 53391},
												name: "UnquotedPathValue",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1701, col: 100, offset: 53410},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1712, col: 3, offset: 53715},
						run: (*parser).callonTextExpr100,
						expr: &seqExpr{
							pos: position{line: 1712, col: 3, offset: 53715},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1712, col: 3, offset: 53715},
									val:        "ipmask",
									ignoreCase: false,
									want:       "\"ipmask\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1712, col: 12, offset: 53724},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1712, col: 20, offset: 53732},
									label: "mask",
									expr: &ruleRefExpr{
										pos:  position{line: 1712, col: 25, offset: 53737},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1712, col: 36, offset: 53748},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1712, col: 42, offset: 53754},
									label: "ip",
									expr: &ruleRefExpr{
										pos:  position{line: 1712, col: 45, offset: 53757},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1712, col: 55, offset: 53767},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1719, col: 3, offset: 53925},
						run: (*parser).callonTextExpr110,
						expr: &seqExpr{
							pos: position{line: 1719, col: 3, offset: 53925},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1719, col: 3, offset: 53925},
									val:        "object_to_array",
									ignoreCase: false,
									want:       "\"object_to_array\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1719, col: 21, offset: 53943},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1719, col: 29, offset: 53951},
									label: "obj",
									expr: &ruleRefExpr{
										pos:  position{line: 1719, col: 33, offset: 53955},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1719, col: 43, offset: 53965},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1719, col: 49, offset: 53971},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 1719, col: 53, offset: 53975},
										name: "QuotedString",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1719, col: 66, offset: 53988},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1719, col: 72, offset: 53994},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 1719, col: 78, offset: 54000},
										name: "QuotedString",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1719, col: 91, offset: 54013},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1730, col: 3, offset: 54321},
						run: (*parser).callonTextExpr123,
						expr: &seqExpr{
							pos: position{line: 1730, col: 3, offset: 54321},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1730, col: 3, offset: 54321},
									val:        "printf",
									ignoreCase: false,
									want:       "\"printf\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1730, col: 12, offset: 54330},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1730, col: 20, offset: 54338},
									label: "format",
									expr: &ruleRefExpr{
										pos:  position{line: 1730, col: 27, offset: 54345},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1730, col: 38, offset: 54356},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1730, col: 43, offset: 54361},
										expr: &seqExpr{
											pos: position{line: 1730, col: 44, offset: 54362},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1730, col: 44, offset: 54362},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1730, col: 50, offset: 54368},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1730, col: 63, offset: 54381},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1748, col: 3, offset: 54848},
						run: (*parser).callonTextExpr135,
						expr: &seqExpr{
							pos: position{line: 1748, col: 3, offset: 54848},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1748, col: 3, offset: 54848},
									val:        "tojson",
									ignoreCase: false,
									want:       "\"tojson\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1748, col: 12, offset: 54857},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1748, col: 20, offset: 54865},
									label: "containInternalFields",
									expr: &zeroOrOneExpr{
										pos: position{line: 1748, col: 42, offset: 54887},
										expr: &seqExpr{
											pos: position{line: 1748, col: 43, offset: 54888},
											exprs: []any{
												&choiceExpr{
													pos: position{line: 1748, col: 44, offset: 54889},
													alternatives: []any{
														&litMatcher{
															pos:        position{line: 1748, col: 44, offset: 54889},
															val:        "true",
															ignoreCase: false,
															want:       "\"true\"",
														},
														&litMatcher{
															pos:        position{line: 1748, col: 53, offset: 54898},
															val:        "false",
															ignoreCase: false,
															want:       "\"false\"",
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1748, col: 62, offset: 54907},
													val:        "()",
													ignoreCase: false,
													want:       "\"()\"",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1748, col: 69, offset: 54914},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1770, col: 3, offset: 55511},
						run: (*parser).callonTextExpr147,
						expr: &seqExpr{
							pos: position{line: 1770, col: 4, offset: 55512},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1770, col: 4, offset: 55512},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1770, col: 12, offset: 55520},
										val:        "mvfilter",
										ignoreCase: false,
										want:       "\"mvfilter\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1770, col: 24, offset: 55532},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1770, col: 32, offset: 55540},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 1770, col: 42, offset: 55550},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1770, col: 51, offset: 55559},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1783, col: 3, offset: 55894},
						run: (*parser).callonTextExpr155,
						expr: &seqExpr{
							pos: position{line: 1783, col: 4, offset: 55895},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1783, col: 4, offset: 55895},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1783, col: 12, offset: 55903},
										val:        "mvindex",
										ignoreCase: false,
										want:       "\"mvindex\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1783, col: 23, offset: 55914},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1783, col: 31, offset: 55922},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1783, col: 42, offset: 55933},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1783, col: 53, offset: 55944},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1783, col: 59, offset: 55950},
									label: "startIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 1783, col: 70, offset: 55961},
										name: "NumericExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1783, col: 82, offset: 55973},
									label: "endIndex",
									expr: &zeroOrOneExpr{
										pos: position{line: 1783, col: 91, offset: 55982},
										expr: &ruleRefExpr{
											pos:  position{line: 1783, col: 92, offset: 55983},
											name: "NumericParamExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1783, col: 111, offset: 56002},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1799, col: 3, offset: 56430},
						run: (*parser).callonTextExpr169,
						expr: &seqExpr{
							pos: position{line: 1799, col: 4, offset: 56431},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1799, col: 4, offset: 56431},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1799, col: 12, offset: 56439},
										val:        "mvmap",
										ignoreCase: false,
										want:       "\"mvmap\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1799, col: 21, offset: 56448},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1799, col: 29, offset: 56456},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1799, col: 40, offset: 56467},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1799, col: 51, offset: 56478},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1799, col: 57, offset: 56484},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1799, col: 62, offset: 56489},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1799, col: 72, offset: 56499},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1812, col: 3, offset: 56825},
						run: (*parser).callonTextExpr180,
						expr: &seqExpr{
							pos: position{line: 1812, col: 4, offset: 56826},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1812, col: 4, offset: 56826},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1812, col: 12, offset: 56834},
										val:        "mvrange",
										ignoreCase: false,
										want:       "\"mvrange\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1812, col: 23, offset: 56845},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1812, col: 31, offset: 56853},
									label: "startIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 1812, col: 42, offset: 56864},
										name: "NumericExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1812, col: 54, offset: 56876},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1812, col: 60, offset: 56882},
									label: "endIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 1812, col: 69, offset: 56891},
										name: "NumericExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1812, col: 81, offset: 56903},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1812, col: 87, offset: 56909},
									label: "stringExpr",
									expr: &zeroOrOneExpr{
										pos: position{line: 1812, col: 98, offset: 56920},
										expr: &ruleRefExpr{
											pos:  position{line: 1812, col: 99, offset: 56921},
											name: "StringExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1812, col: 112, offset: 56934},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1828, col: 3, offset: 57364},
						run: (*parser).callonTextExpr195,
						expr: &seqExpr{
							pos: position{line: 1828, col: 4, offset: 57365},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1828, col: 4, offset: 57365},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1828, col: 12, offset: 57373},
										val:        "mvzip",
										ignoreCase: false,
										want:       "\"mvzip\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1828, col: 21, offset: 57382},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1828, col: 29, offset: 57390},
									label: "mvLeft",
									expr: &ruleRefExpr{
										pos:  position{line: 1828, col: 36, offset: 57397},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1828, col: 47, offset: 57408},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1828, col: 53, offset: 57414},
									label: "mvRight",
									expr: &ruleRefExpr{
										pos:  position{line: 1828, col: 61, offset: 57422},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1828, col: 72, offset: 57433},
									label: "rest",
									expr: &zeroOrOneExpr{
										pos: position{line: 1828, col: 77, offset: 57438},
										expr: &seqExpr{
											pos: position{line: 1828, col: 78, offset: 57439},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1828, col: 78, offset: 57439},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1828, col: 84, offset: 57445},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1828, col: 97, offset: 57458},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1849, col: 3, offset: 57982},
						run: (*parser).callonTextExpr211,
						expr: &seqExpr{
							pos: position{line: 1849, col: 4, offset: 57983},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1849, col: 4, offset: 57983},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1849, col: 12, offset: 57991},
										val:        "mv_to_json_array",
										ignoreCase: false,
										want:       "\"mv_to_json_array\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1849, col: 32, offset: 58011},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1849, col: 40, offset: 58019},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1849, col: 51, offset: 58030},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1849, col: 62, offset: 58041},
									label: "rest",
									expr: &zeroOrOneExpr{
										pos: position{line: 1849, col: 67, offset: 58046},
										expr: &seqExpr{
											pos: position{line: 1849, col: 68, offset: 58047},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1849, col: 68, offset: 58047},
													name: "COMMA",
												},
												&choiceExpr{
													pos: position{line: 1849, col: 75, offset: 58054},
													alternatives: []any{
														&litMatcher{
															pos:        position{line: 1849, col: 75, offset: 58054},
															val:        "true",
															ignoreCase: false,
															want:       "\"true\"",
														},
														&litMatcher{
															pos:        position{line: 1849, col: 84, offset: 58063},
															val:        "false",
															ignoreCase: false,
															want:       "\"false\"",
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1849, col: 93, offset: 58072},
													val:        "()",
													ignoreCase: false,
													want:       "\"()\"",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1849, col: 100, offset: 58079},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1874, col: 3, offset: 58714},
						run: (*parser).callonTextExpr227,
						expr: &seqExpr{
							pos: position{line: 1874, col: 3, offset: 58714},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1874, col: 3, offset: 58714},
									val:        "cluster",
									ignoreCase: false,
									want:       "\"cluster\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1874, col: 13, offset: 58724},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1874, col: 21, offset: 58732},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1874, col: 27, offset: 58738},
										name: "EvalFieldToRead",
									},
								},
								&labeledExpr{
									pos:   position{line: 1874, col: 43, offset: 58754},
									label: "threshold",
									expr: &zeroOrOneExpr{
										pos: position{line: 1874, col: 53, offset: 58764},
										expr: &seqExpr{
											pos: position{line: 1874, col: 54, offset: 58765},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1874, col: 54, offset: 58765},
													name: "COMMA",
												},
												&litMatcher{
													pos:        position{line: 1874, col: 60, offset: 58771},
													val:        "threshold:",
													ignoreCase: false,
													want:       "\"threshold:\"",
												},
												&ruleRefExpr{
													pos:  position{line: 1874, col: 73, offset: 58784},
													name: "FloatAsString",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1874, col: 89, offset: 58800},
									label: "match",
									expr: &zeroOrOneExpr{
										pos: position{line: 1874, col: 95, offset: 58806},
										expr: &seqExpr{
											pos: position{line: 1874, col: 96, offset: 58807},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1874, col: 96, offset: 58807},
													name: "COMMA",
												},
												&litMatcher{
													pos:        position{line: 1874, col: 102, offset: 58813},
													val:        "match:",
													ignoreCase: false,
													want:       "\"match:\"",
												},
												&choiceExpr{
													pos: position{line: 1874, col: 112, offset: 58823},
													alternatives: []any{
														&litMatcher{
															pos:        position{line: 1874, col: 112, offset: 58823},
															val:        "termlist",
															ignoreCase: false,
															want:       "\"termlist\"",
														},
														&litMatcher{
															pos:        position{line: 1874, col: 125, offset: 58836},
															val:        "termset",
															ignoreCase: false,
															want:       "\"termset\"",
														},
														&litMatcher{
															pos:        position{line: 1874, col: 137, offset: 58848},
															val:        "ngramset",
															ignoreCase: false,
															want:       "\"ngramset\"",
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1874, col: 151, offset: 58862},
									label: "delims",
									expr: &zeroOrOneExpr{
										pos: position{line: 1874, col: 158, offset: 58869},
										expr: &seqExpr{
											pos: position{line: 1874, col: 159, offset: 58870},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1874, col: 159, offset: 58870},
													name: "COMMA",
												},
												&litMatcher{
													pos:        position{line: 1874, col: 165, offset: 58876},
													val:        "delims:",
													ignoreCase: false,
													want:       "\"delims:\"",
												},
												&ruleRefExpr{
													pos:  position{line: 1874, col: 175, offset: 58886},
													name: "QuotedString",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1874, col: 190, offset: 58901},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1914, col: 3, offset: 59896},
						run: (*parser).callonTextExpr255,
						expr: &seqExpr{
							pos: position{line: 1914, col: 3, offset: 59896},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1914, col: 3, offset: 59896},
									val:        "getfields",
									ignoreCase: false,
									want:       "\"getfields\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1914, col: 15, offset: 59908},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1914, col: 23, offset: 59916},
									label: "filter",
									expr: &zeroOrOneExpr{
										pos: position{line: 1914, col: 30, offset: 59923},
										expr: &ruleRefExpr{
											pos:  position{line: 1914, col: 31, offset: 59924},
											name: "StringExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1914, col: 44, offset: 59937},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1925, col: 3, offset: 60128},
						run: (*parser).callonTextExpr263,
						expr: &seqExpr{
							pos: position{line: 1925, col: 3, offset: 60128},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1925, col: 3, offset: 60128},
									val:        "typeof",
									ignoreCase: false,
									want:       "\"typeof\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1925, col: 12, offset: 60137},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1925, col: 20, offset: 60145},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1925, col: 30, offset: 60155},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1925, col: 40, offset: 60165},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1931, col: 3, offset: 60288},
						run: (*parser).callonTextExpr270,
						expr: &seqExpr{
							pos: position{line: 1931, col: 3, offset: 60288},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1931, col: 3, offset: 60288},
									val:        "replace",
									ignoreCase: false,
									want:       "\"replace\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1931, col: 13, offset: 60298},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1931, col: 21, offset: 60306},
									label: "val",
									expr: &ruleRefExpr{
										pos:  position{line: 1931, col: 25, offset: 60310},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1931, col: 35, offset: 60320},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1931, col: 41, offset: 60326},
									label: "regex",
									expr: &ruleRefExpr{
										pos:  position{line: 1931, col: 47, offset: 60332},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1931, col: 58, offset: 60343},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1931, col: 64, offset: 60349},
									label: "replacement",
									expr: &ruleRefExpr{
										pos:  position{line: 1931, col: 76, offset: 60361},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1931, col: 87, offset: 60372},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1938, col: 3, offset: 60596},
						run: (*parser).callonTextExpr283,
						expr: &seqExpr{
							pos: position{line: 1938, col: 3, offset: 60596},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1938, col: 3, offset: 60596},
									val:        "strftime",
									ignoreCase: false,
									want:       "\"strftime\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1938, col: 14, offset: 60607},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1938, col: 22, offset: 60615},
									label: "val",
									expr: &ruleRefExpr{
										pos:  position{line: 1938, col: 26, offset: 60619},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1938, col: 36, offset: 60629},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1938, col: 42, offset: 60635},
									label: "format",
									expr: &ruleRefExpr{
										pos:  position{line: 1938, col: 49, offset: 60642},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1938, col: 60, offset: 60653},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1946, col: 3, offset: 60817},
						run: (*parser).callonTextExpr293,
						expr: &seqExpr{
							pos: position{line: 1946, col: 3, offset: 60817},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1946, col: 3, offset: 60817},
									val:        "strptime",
									ignoreCase: false,
									want:       "\"strptime\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1946, col: 14, offset: 60828},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1946, col: 22, offset: 60836},
									label: "val",
									expr: &ruleRefExpr{
										pos:  position{line: 1946, col: 26, offset: 60840},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1946, col: 36, offset: 60850},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1946, col: 42, offset: 60856},
									label: "format",
									expr: &ruleRefExpr{
										pos:  position{line: 1946, col: 49, offset: 60863},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1946, col: 60, offset: 60874},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedPathString",
			pos:  position{line: 1954, col: 1, offset: 61036},
			expr: &actionExpr{
				pos: position{line: 1954, col: 21, offset: 61056},
				run: (*parser).callonQuotedPathString1,
				expr: &labeledExpr{
					pos:   position{line: 1954, col: 21, offset: 61056},
					label: "str",
					expr: &ruleRefExpr{
						pos:  position{line: 1954, col: 25, offset: 61060},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "UnquotedPathValue",
			pos:  position{line: 1961, col: 1, offset: 61187},
			expr: &actionExpr{
				pos: position{line: 1961, col: 22, offset: 61208},
				run: (*parser).callonUnquotedPathValue1,
				expr: &labeledExpr{
					pos:   position{line: 1961, col: 22, offset: 61208},
					label: "str",
					expr: &ruleRefExpr{
						pos:  position{line: 1961, col: 26, offset: 61212},
						name: "UnquotedString",
					},
				},
			},
		},
		{
			name: "StrToRemoveExpr",
			pos:  position{line: 1968, col: 1, offset: 61340},
			expr: &actionExpr{
				pos: position{line: 1968, col: 20, offset: 61359},
				run: (*parser).callonStrToRemoveExpr1,
				expr: &seqExpr{
					pos: position{line: 1968, col: 20, offset: 61359},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1968, col: 20, offset: 61359},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 1968, col: 26, offset: 61365},
							label: "strToRemove",
							expr: &ruleRefExpr{
								pos:  position{line: 1968, col: 38, offset: 61377},
								name: "String",
							},
						},
					},
				},
			},
		},
		{
			name: "EvalFieldToRead",
			pos:  position{line: 1974, col: 1, offset: 61562},
			expr: &choiceExpr{
				pos: position{line: 1974, col: 20, offset: 61581},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1974, col: 20, offset: 61581},
						run: (*parser).callonEvalFieldToRead2,
						expr: &seqExpr{
							pos: position{line: 1974, col: 20, offset: 61581},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 1974, col: 20, offset: 61581},
									expr: &charClassMatcher{
										pos:        position{line: 1974, col: 20, offset: 61581},
										val:        "[a-zA-Z_]",
										chars:      []rune{'_'},
										ranges:     []rune{'a', 'z', 'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&notExpr{
									pos: position{line: 1974, col: 31, offset: 61592},
									expr: &litMatcher{
										pos:        position{line: 1974, col: 33, offset: 61594},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1977, col: 3, offset: 61636},
						run: (*parser).callonEvalFieldToRead8,
						expr: &seqExpr{
							pos: position{line: 1977, col: 3, offset: 61636},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1977, col: 3, offset: 61636},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&labeledExpr{
									pos:   position{line: 1977, col: 7, offset: 61640},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1977, col: 13, offset: 61646},
										name: "FieldName",
									},
								},
								&litMatcher{
									pos:        position{line: 1977, col: 23, offset: 61656},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "WhereBlock",
			pos:  position{line: 1982, col: 1, offset: 61724},
			expr: &actionExpr{
				pos: position{line: 1982, col: 15, offset: 61738},
				run: (*parser).callonWhereBlock1,
				expr: &seqExpr{
					pos: position{line: 1982, col: 15, offset: 61738},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1982, col: 15, offset: 61738},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1982, col: 20, offset: 61743},
							name: "CMD_WHERE",
						},
						&labeledExpr{
							pos:   position{line: 1982, col: 30, offset: 61753},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 1982, col: 40, offset: 61763},
								name: "BoolExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExpr",
			pos:  position{line: 1994, col: 1, offset: 62056},
			expr: &actionExpr{
				pos: position{line: 1994, col: 13, offset: 62068},
				run: (*parser).callonBoolExpr1,
				expr: &labeledExpr{
					pos:   position{line: 1994, col: 13, offset: 62068},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 1994, col: 18, offset: 62073},
						name: "BoolExprLevel4",
					},
				},
			},
		},
		{
			name: "BoolExprLevel4",
			pos:  position{line: 1999, col: 1, offset: 62143},
			expr: &actionExpr{
				pos: position{line: 1999, col: 19, offset: 62161},
				run: (*parser).callonBoolExprLevel41,
				expr: &seqExpr{
					pos: position{line: 1999, col: 19, offset: 62161},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1999, col: 19, offset: 62161},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1999, col: 25, offset: 62167},
								name: "BoolExprLevel3",
							},
						},
						&labeledExpr{
							pos:   position{line: 1999, col: 40, offset: 62182},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1999, col: 45, offset: 62187},
								expr: &seqExpr{
									pos: position{line: 1999, col: 46, offset: 62188},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1999, col: 46, offset: 62188},
											name: "OR",
										},
										&ruleRefExpr{
											pos:  position{line: 1999, col: 49, offset: 62191},
											name: "BoolExprLevel3",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel3",
			pos:  position{line: 2019, col: 1, offset: 62629},
			expr: &actionExpr{
				pos: position{line: 2019, col: 19, offset: 62647},
				run: (*parser).callonBoolExprLevel31,
				expr: &seqExpr{
					pos: position{line: 2019, col: 19, offset: 62647},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2019, col: 19, offset: 62647},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2019, col: 25, offset: 62653},
								name: "BoolExprLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 2019, col: 40, offset: 62668},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2019, col: 45, offset: 62673},
								expr: &seqExpr{
									pos: position{line: 2019, col: 46, offset: 62674},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 2019, col: 46, offset: 62674},
											name: "AND",
										},
										&ruleRefExpr{
											pos:  position{line: 2019, col: 50, offset: 62678},
											name: "BoolExprLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel2",
			pos:  position{line: 2039, col: 1, offset: 63117},
			expr: &choiceExpr{
				pos: position{line: 2039, col: 19, offset: 63135},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2039, col: 19, offset: 63135},
						run: (*parser).callonBoolExprLevel22,
						expr: &seqExpr{
							pos: position{line: 2039, col: 19, offset: 63135},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2039, col: 19, offset: 63135},
									name: "NOT",
								},
								&ruleRefExpr{
									pos:  position{line: 2039, col: 23, offset: 63139},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2039, col: 31, offset: 63147},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 2039, col: 37, offset: 63153},
										name: "BoolExprLevel1",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2039, col: 52, offset: 63168},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2049, col: 3, offset: 63371},
						run: (*parser).callonBoolExprLevel29,
						expr: &labeledExpr{
							pos:   position{line: 2049, col: 3, offset: 63371},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2049, col: 9, offset: 63377},
								name: "BoolExprLevel1",
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel1",
			pos:  position{line: 2054, col: 1, offset: 63448},
			expr: &choiceExpr{
				pos: position{line: 2054, col: 19, offset: 63466},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2054, col: 19, offset: 63466},
						run: (*parser).callonBoolExprLevel12,
						expr: &seqExpr{
							pos: position{line: 2054, col: 19, offset: 63466},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2054, col: 19, offset: 63466},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2054, col: 27, offset: 63474},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 2054, col: 33, offset: 63480},
										name: "BoolExprLevel4",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2054, col: 48, offset: 63495},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2057, col: 3, offset: 63531},
						run: (*parser).callonBoolExprLevel18,
						expr: &labeledExpr{
							pos:   position{line: 2057, col: 3, offset: 63531},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 2057, col: 10, offset: 63538},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 2057, col: 10, offset: 63538},
										name: "EvalComparisonExpr",
									},
									&ruleRefExpr{
										pos:  position{line: 2057, col: 31, offset: 63559},
										name: "BoolComparisonExpr",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EvalComparisonExpr",
			pos:  position{line: 2062, col: 1, offset: 63679},
			expr: &choiceExpr{
				pos: position{line: 2062, col: 23, offset: 63701},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2062, col: 23, offset: 63701},
						run: (*parser).callonEvalComparisonExpr2,
						expr: &seqExpr{
							pos: position{line: 2062, col: 24, offset: 63702},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2062, col: 24, offset: 63702},
									label: "op",
									expr: &choiceExpr{
										pos: position{line: 2062, col: 28, offset: 63706},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2062, col: 28, offset: 63706},
												val:        "isbool",
												ignoreCase: false,
												want:       "\"isbool\"",
											},
											&litMatcher{
												pos:        position{line: 2062, col: 39, offset: 63717},
												val:        "isint",
												ignoreCase: false,
												want:       "\"isint\"",
											},
											&litMatcher{
												pos:        position{line: 2062, col: 49, offset: 63727},
												val:        "isstr",
												ignoreCase: false,
												want:       "\"isstr\"",
											},
											&litMatcher{
												pos:        position{line: 2062, col: 59, offset: 63737},
												val:        "isnull",
												ignoreCase: false,
												want:       "\"isnull\"",
											},
											&litMatcher{
												pos:        position{line: 2062, col: 70, offset: 63748},
												val:        "isnotnull",
												ignoreCase: false,
												want:       "\"isnotnull\"",
											},
											&litMatcher{
												pos:        position{line: 2062, col: 84, offset: 63762},
												val:        "isnum",
												ignoreCase: false,
												want:       "\"isnum\"",
											},
											&litMatcher{
												pos:        position{line: 2062, col: 94, offset: 63772},
												val:        "searchmatch",
												ignoreCase: false,
												want:       "\"searchmatch\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2062, col: 109, offset: 63787},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2062, col: 117, offset: 63795},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 2062, col: 123, offset: 63801},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2062, col: 133, offset: 63811},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2075, col: 3, offset: 64147},
						run: (*parser).callonEvalComparisonExpr17,
						expr: &seqExpr{
							pos: position{line: 2075, col: 3, offset: 64147},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2075, col: 3, offset: 64147},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2075, col: 11, offset: 64155},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2075, col: 11, offset: 64155},
												val:        "like",
												ignoreCase: false,
												want:       "\"like\"",
											},
											&litMatcher{
												pos:        position{line: 2075, col: 20, offset: 64164},
												val:        "Like",
												ignoreCase: false,
												want:       "\"Like\"",
											},
											&litMatcher{
												pos:        position{line: 2075, col: 29, offset: 64173},
												val:        "match",
												ignoreCase: false,
												want:       "\"match\"",
											},
											&litMatcher{
												pos:        position{line: 2075, col: 39, offset: 64183},
												val:        "cidrmatch",
												ignoreCase: false,
												want:       "\"cidrmatch\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2075, col: 52, offset: 64196},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2075, col: 60, offset: 64204},
									label: "leftValue",
									expr: &ruleRefExpr{
										pos:  position{line: 2075, col: 70, offset: 64214},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2075, col: 80, offset: 64224},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2075, col: 86, offset: 64230},
									label: "rightValue",
									expr: &ruleRefExpr{
										pos:  position{line: 2075, col: 97, offset: 64241},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2075, col: 107, offset: 64251},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2088, col: 3, offset: 64621},
						run: (*parser).callonEvalComparisonExpr32,
						expr: &seqExpr{
							pos: position{line: 2088, col: 3, offset: 64621},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2088, col: 3, offset: 64621},
									label: "left",
									expr: &ruleRefExpr{
										pos:  position{line: 2088, col: 8, offset: 64626},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2088, col: 18, offset: 64636},
									name: "SPACE",
								},
								&litMatcher{
									pos:        position{line: 2088, col: 24, offset: 64642},
									val:        "in",
									ignoreCase: false,
									want:       "\"in\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2088, col: 29, offset: 64647},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2088, col: 37, offset: 64655},
									label: "valueToJudge",
									expr: &ruleRefExpr{
										pos:  position{line: 2088, col: 50, offset: 64668},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2088, col: 60, offset: 64678},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2088, col: 65, offset: 64683},
										expr: &seqExpr{
											pos: position{line: 2088, col: 66, offset: 64684},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2088, col: 66, offset: 64684},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2088, col: 72, offset: 64690},
													name: "ValueExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2088, col: 84, offset: 64702},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2107, col: 3, offset: 65253},
						run: (*parser).callonEvalComparisonExpr47,
						expr: &seqExpr{
							pos: position{line: 2107, col: 3, offset: 65253},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2107, col: 3, offset: 65253},
									val:        "in",
									ignoreCase: false,
									want:       "\"in\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2107, col: 8, offset: 65258},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2107, col: 16, offset: 65266},
									label: "valueToJudge",
									expr: &ruleRefExpr{
										pos:  position{line: 2107, col: 29, offset: 65279},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2107, col: 39, offset: 65289},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2107, col: 44, offset: 65294},
										expr: &seqExpr{
											pos: position{line: 2107, col: 45, offset: 65295},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2107, col: 45, offset: 65295},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2107, col: 51, offset: 65301},
													name: "ValueExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2107, col: 63, offset: 65313},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoolComparisonExpr",
			pos:  position{line: 2125, col: 1, offset: 65734},
			expr: &actionExpr{
				pos: position{line: 2125, col: 23, offset: 65756},
				run: (*parser).callonBoolComparisonExpr1,
				expr: &seqExpr{
					pos: position{line: 2125, col: 23, offset: 65756},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2125, col: 23, offset: 65756},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 2125, col: 28, offset: 65761},
								name: "ValueExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 2125, col: 38, offset: 65771},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 2125, col: 41, offset: 65774},
								name: "EqualityOrInequality",
							},
						},
						&labeledExpr{
							pos:   position{line: 2125, col: 62, offset: 65795},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 2125, col: 68, offset: 65801},
								name: "ValueExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "ValueExpr",
			pos:  position{line: 2143, col: 1, offset: 66395},
			expr: &choiceExpr{
				pos: position{line: 2143, col: 14, offset: 66408},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2143, col: 14, offset: 66408},
						run: (*parser).callonValueExpr2,
						expr: &labeledExpr{
							pos:   position{line: 2143, col: 14, offset: 66408},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 2143, col: 24, offset: 66418},
								name: "ConditionExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2152, col: 3, offset: 66608},
						run: (*parser).callonValueExpr5,
						expr: &seqExpr{
							pos: position{line: 2152, col: 3, offset: 66608},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2152, col: 3, offset: 66608},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2152, col: 12, offset: 66617},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 2152, col: 22, offset: 66627},
										name: "ConditionExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2152, col: 37, offset: 66642},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2161, col: 3, offset: 66826},
						run: (*parser).callonValueExpr11,
						expr: &labeledExpr{
							pos:   position{line: 2161, col: 3, offset: 66826},
							label: "numeric",
							expr: &ruleRefExpr{
								pos:  position{line: 2161, col: 11, offset: 66834},
								name: "NumericExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2170, col: 3, offset: 67014},
						run: (*parser).callonValueExpr14,
						expr: &labeledExpr{
							pos:   position{line: 2170, col: 3, offset: 67014},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 2170, col: 7, offset: 67018},
								name: "StringExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2179, col: 3, offset: 67190},
						run: (*parser).callonValueExpr17,
						expr: &seqExpr{
							pos: position{line: 2179, col: 3, offset: 67190},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2179, col: 3, offset: 67190},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2179, col: 12, offset: 67199},
									label: "str",
									expr: &ruleRefExpr{
										pos:  position{line: 2179, col: 16, offset: 67203},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2179, col: 28, offset: 67215},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2188, col: 3, offset: 67384},
						run: (*parser).callonValueExpr23,
						expr: &seqExpr{
							pos: position{line: 2188, col: 3, offset: 67384},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2188, col: 3, offset: 67384},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2188, col: 11, offset: 67392},
									label: "boolean",
									expr: &ruleRefExpr{
										pos:  position{line: 2188, col: 19, offset: 67400},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2188, col: 28, offset: 67409},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StringExpr",
			pos:  position{line: 2198, col: 1, offset: 67580},
			expr: &choiceExpr{
				pos: position{line: 2198, col: 15, offset: 67594},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2198, col: 15, offset: 67594},
						run: (*parser).callonStringExpr2,
						expr: &seqExpr{
							pos: position{line: 2198, col: 15, offset: 67594},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2198, col: 15, offset: 67594},
									label: "text",
									expr: &ruleRefExpr{
										pos:  position{line: 2198, col: 20, offset: 67599},
										name: "TextExpr",
									},
								},
								&notExpr{
									pos: position{line: 2198, col: 29, offset: 67608},
									expr: &ruleRefExpr{
										pos:  position{line: 2198, col: 31, offset: 67610},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2206, col: 3, offset: 67780},
						run: (*parser).callonStringExpr8,
						expr: &seqExpr{
							pos: position{line: 2206, col: 3, offset: 67780},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2206, col: 3, offset: 67780},
									label: "str",
									expr: &ruleRefExpr{
										pos:  position{line: 2206, col: 7, offset: 67784},
										name: "QuotedString",
									},
								},
								&notExpr{
									pos: position{line: 2206, col: 20, offset: 67797},
									expr: &ruleRefExpr{
										pos:  position{line: 2206, col: 22, offset: 67799},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2214, col: 3, offset: 67964},
						run: (*parser).callonStringExpr14,
						expr: &seqExpr{
							pos: position{line: 2214, col: 3, offset: 67964},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2214, col: 3, offset: 67964},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2214, col: 9, offset: 67970},
										name: "EvalFieldToRead",
									},
								},
								&notExpr{
									pos: position{line: 2214, col: 25, offset: 67986},
									expr: &choiceExpr{
										pos: position{line: 2214, col: 27, offset: 67988},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2214, col: 27, offset: 67988},
												name: "OpPlus",
											},
											&ruleRefExpr{
												pos:  position{line: 2214, col: 36, offset: 67997},
												name: "OpMinus",
											},
											&ruleRefExpr{
												pos:  position{line: 2214, col: 46, offset: 68007},
												name: "OpMul",
											},
											&ruleRefExpr{
												pos:  position{line: 2214, col: 54, offset: 68015},
												name: "OpDiv",
											},
											&ruleRefExpr{
												pos:  position{line: 2214, col: 62, offset: 68023},
												name: "EVAL_CONCAT",
											},
											&litMatcher{
												pos:        position{line: 2214, col: 76, offset: 68037},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2222, col: 3, offset: 68187},
						run: (*parser).callonStringExpr26,
						expr: &labeledExpr{
							pos:   position{line: 2222, col: 3, offset: 68187},
							label: "concat",
							expr: &ruleRefExpr{
								pos:  position{line: 2222, col: 10, offset: 68194},
								name: "ConcatExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "ConcatExpr",
			pos:  position{line: 2232, col: 1, offset: 68400},
			expr: &actionExpr{
				pos: position{line: 2232, col: 15, offset: 68414},
				run: (*parser).callonConcatExpr1,
				expr: &seqExpr{
					pos: position{line: 2232, col: 15, offset: 68414},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2232, col: 15, offset: 68414},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2232, col: 21, offset: 68420},
								name: "ConcatAtom",
							},
						},
						&labeledExpr{
							pos:   position{line: 2232, col: 32, offset: 68431},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2232, col: 37, offset: 68436},
								expr: &seqExpr{
									pos: position{line: 2232, col: 38, offset: 68437},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 2232, col: 38, offset: 68437},
											name: "EVAL_CONCAT",
										},
										&ruleRefExpr{
											pos:  position{line: 2232, col: 50, offset: 68449},
											name: "ConcatAtom",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2232, col: 63, offset: 68462},
							expr: &choiceExpr{
								pos: position{line: 2232, col: 65, offset: 68464},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 2232, col: 65, offset: 68464},
										name: "OpPlus",
									},
									&ruleRefExpr{
										pos:  position{line: 2232, col: 74, offset: 68473},
										name: "OpMinus",
									},
									&ruleRefExpr{
										pos:  position{line: 2232, col: 84, offset: 68483},
										name: "OpMul",
									},
									&ruleRefExpr{
										pos:  position{line: 2232, col: 92, offset: 68491},
										name: "OpDiv",
									},
									&litMatcher{
										pos:        position{line: 2232, col: 100, offset: 68499},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcatAtom",
			pos:  position{line: 2250, col: 1, offset: 68905},
			expr: &choiceExpr{
				pos: position{line: 2250, col: 15, offset: 68919},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2250, col: 15, offset: 68919},
						run: (*parser).callonConcatAtom2,
						expr: &labeledExpr{
							pos:   position{line: 2250, col: 15, offset: 68919},
							label: "text",
							expr: &ruleRefExpr{
								pos:  position{line: 2250, col: 20, offset: 68924},
								name: "TextExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2259, col: 3, offset: 69088},
						run: (*parser).callonConcatAtom5,
						expr: &labeledExpr{
							pos:   position{line: 2259, col: 3, offset: 69088},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 2259, col: 7, offset: 69092},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2267, col: 3, offset: 69231},
						run: (*parser).callonConcatAtom8,
						expr: &labeledExpr{
							pos:   position{line: 2267, col: 3, offset: 69231},
							label: "number",
							expr: &ruleRefExpr{
								pos:  position{line: 2267, col: 10, offset: 69238},
								name: "NumberAsString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2275, col: 3, offset: 69377},
						run: (*parser).callonConcatAtom11,
						expr: &labeledExpr{
							pos:   position{line: 2275, col: 3, offset: 69377},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 2275, col: 9, offset: 69383},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExpr",
			pos:  position{line: 2285, col: 1, offset: 69552},
			expr: &actionExpr{
				pos: position{line: 2285, col: 16, offset: 69567},
				run: (*parser).callonNumericExpr1,
				expr: &seqExpr{
					pos: position{line: 2285, col: 16, offset: 69567},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2285, col: 16, offset: 69567},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 2285, col: 21, offset: 69572},
								name: "NumericExprLevel3",
							},
						},
						&notExpr{
							pos: position{line: 2285, col: 39, offset: 69590},
							expr: &choiceExpr{
								pos: position{line: 2285, col: 41, offset: 69592},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 2285, col: 41, offset: 69592},
										name: "EVAL_CONCAT",
									},
									&litMatcher{
										pos:        position{line: 2285, col: 55, offset: 69606},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel3",
			pos:  position{line: 2290, col: 1, offset: 69671},
			expr: &actionExpr{
				pos: position{line: 2290, col: 22, offset: 69692},
				run: (*parser).callonNumericExprLevel31,
				expr: &seqExpr{
					pos: position{line: 2290, col: 22, offset: 69692},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2290, col: 22, offset: 69692},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2290, col: 28, offset: 69698},
								name: "NumericExprLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 2290, col: 46, offset: 69716},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2290, col: 51, offset: 69721},
								expr: &seqExpr{
									pos: position{line: 2290, col: 52, offset: 69722},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 2290, col: 53, offset: 69723},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 2290, col: 53, offset: 69723},
													name: "OpPlus",
												},
												&ruleRefExpr{
													pos:  position{line: 2290, col: 62, offset: 69732},
													name: "OpMinus",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2290, col: 71, offset: 69741},
											name: "NumericExprLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel2",
			pos:  position{line: 2311, col: 1, offset: 70242},
			expr: &actionExpr{
				pos: position{line: 2311, col: 22, offset: 70263},
				run: (*parser).callonNumericExprLevel21,
				expr: &seqExpr{
					pos: position{line: 2311, col: 22, offset: 70263},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2311, col: 22, offset: 70263},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2311, col: 28, offset: 70269},
								name: "NumericExprLevel1",
							},
						},
						&labeledExpr{
							pos:   position{line: 2311, col: 46, offset: 70287},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2311, col: 51, offset: 70292},
								expr: &seqExpr{
									pos: position{line: 2311, col: 52, offset: 70293},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 2311, col: 53, offset: 70294},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 2311, col: 53, offset: 70294},
													name: "OpMul",
												},
												&ruleRefExpr{
													pos:  position{line: 2311, col: 61, offset: 70302},
													name: "OpDiv",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2311, col: 68, offset: 70309},
											name: "NumericExprLevel1",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NumericParamExpr",
			pos:  position{line: 2331, col: 1, offset: 70778},
			expr: &actionExpr{
				pos: position{line: 2331, col: 21, offset: 70798},
				run: (*parser).callonNumericParamExpr1,
				expr: &seqExpr{
					pos: position{line: 2331, col: 21, offset: 70798},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2331, col: 21, offset: 70798},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 2331, col: 27, offset: 70804},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 2331, col: 32, offset: 70809},
								name: "NumericExprLevel3",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel1",
			pos:  position{line: 2341, col: 1, offset: 71053},
			expr: &choiceExpr{
				pos: position{line: 2341, col: 22, offset: 71074},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2341, col: 22, offset: 71074},
						run: (*parser).callonNumericExprLevel12,
						expr: &seqExpr{
							pos: position{line: 2341, col: 22, offset: 71074},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2341, col: 22, offset: 71074},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2341, col: 30, offset: 71082},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2341, col: 35, offset: 71087},
										name: "NumericExprLevel3",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2341, col: 53, offset: 71105},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2344, col: 3, offset: 71140},
						run: (*parser).callonNumericExprLevel18,
						expr: &labeledExpr{
							pos:   position{line: 2344, col: 3, offset: 71140},
							label: "numericEvalExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 2344, col: 20, offset: 71157},
								name: "NumericEvalExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2347, col: 3, offset: 71211},
						run: (*parser).callonNumericExprLevel111,
						expr: &labeledExpr{
							pos:   position{line: 2347, col: 3, offset: 71211},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 2347, col: 9, offset: 71217},
								name: "EvalFieldToRead",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2357, col: 3, offset: 71436},
						run: (*parser).callonNumericExprLevel114,
						expr: &labeledExpr{
							pos:   position{line: 2357, col: 3, offset: 71436},
							label: "number",
							expr: &ruleRefExpr{
								pos:  position{line: 2357, col: 10, offset: 71443},
								name: "NumberAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericEvalExpr",
			pos:  position{line: 2370, col: 1, offset: 71821},
			expr: &choiceExpr{
				pos: position{line: 2370, col: 20, offset: 71840},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2370, col: 20, offset: 71840},
						run: (*parser).callonNumericEvalExpr2,
						expr: &seqExpr{
							pos: position{line: 2370, col: 21, offset: 71841},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2370, col: 21, offset: 71841},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2370, col: 29, offset: 71849},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2370, col: 29, offset: 71849},
												val:        "abs",
												ignoreCase: false,
												want:       "\"abs\"",
											},
											&litMatcher{
												pos:        position{line: 2370, col: 37, offset: 71857},
												val:        "ceil",
												ignoreCase: false,
												want:       "\"ceil\"",
											},
											&litMatcher{
												pos:        position{line: 2370, col: 46, offset: 71866},
												val:        "ceiling",
												ignoreCase: false,
												want:       "\"ceiling\"",
											},
											&litMatcher{
												pos:        position{line: 2370, col: 58, offset: 71878},
												val:        "sqrt",
												ignoreCase: false,
												want:       "\"sqrt\"",
											},
											&litMatcher{
												pos:        position{line: 2370, col: 67, offset: 71887},
												val:        "exact",
												ignoreCase: false,
												want:       "\"exact\"",
											},
											&litMatcher{
												pos:        position{line: 2370, col: 77, offset: 71897},
												val:        "exp",
												ignoreCase: false,
												want:       "\"exp\"",
											},
											&litMatcher{
												pos:        position{line: 2370, col: 85, offset: 71905},
												val:        "floor",
												ignoreCase: false,
												want:       "\"floor\"",
											},
											&litMatcher{
												pos:        position{line: 2370, col: 95, offset: 71915},
												val:        "ln",
												ignoreCase: false,
												want:       "\"ln\"",
											},
											&litMatcher{
												pos:        position{line: 2370, col: 102, offset: 71922},
												val:        "sigfig",
												ignoreCase: false,
												want:       "\"sigfig\"",
											},
											&litMatcher{
												pos:        position{line: 2370, col: 113, offset: 71933},
												val:        "acosh",
												ignoreCase: false,
												want:       "\"acosh\"",
											},
											&litMatcher{
												pos:        position{line: 2370, col: 123, offset: 71943},
												val:        "acos",
												ignoreCase: false,
												want:       "\"acos\"",
											},
											&litMatcher{
												pos:        position{line: 2370, col: 132, offset: 71952},
												val:        "asinh",
												ignoreCase: false,
												want:       "\"asinh\"",
											},
											&litMatcher{
												pos:        position{line: 2370, col: 142, offset: 71962},
												val:        "asin",
												ignoreCase: false,
												want:       "\"asin\"",
											},
											&litMatcher{
												pos:        position{line: 2370, col: 151, offset: 71971},
												val:        "atanh",
												ignoreCase: false,
												want:       "\"atanh\"",
											},
											&litMatcher{
												pos:        position{line: 2370, col: 161, offset: 71981},
												val:        "atan",
												ignoreCase: false,
												want:       "\"atan\"",
											},
											&litMatcher{
												pos:        position{line: 2370, col: 170, offset: 71990},
												val:        "cosh",
												ignoreCase: false,
												want:       "\"cosh\"",
											},
											&litMatcher{
												pos:        position{line: 2370, col: 179, offset: 71999},
												val:        "cos",
												ignoreCase: false,
												want:       "\"cos\"",
											},
											&litMatcher{
												pos:        position{line: 2370, col: 187, offset: 72007},
												val:        "sinh",
												ignoreCase: false,
												want:       "\"sinh\"",
											},
											&litMatcher{
												pos:        position{line: 2370, col: 196, offset: 72016},
												val:        "sin",
												ignoreCase: false,
												want:       "\"sin\"",
											},
											&litMatcher{
												pos:        position{line: 2370, col: 204, offset: 72024},
												val:        "tanh",
												ignoreCase: false,
												want:       "\"tanh\"",
											},
											&litMatcher{
												pos:        position{line: 2370, col: 213, offset: 72033},
												val:        "tan",
												ignoreCase: false,
												want:       "\"tan\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2370, col: 220, offset: 72040},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2370, col: 228, offset: 72048},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2370, col: 234, offset: 72054},
										name: "NumericExprLevel3",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2370, col: 253, offset: 72073},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2390, col: 3, offset: 72585},
						run: (*parser).callonNumericEvalExpr31,
						expr: &seqExpr{
							pos: position{line: 2390, col: 3, offset: 72585},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2390, col: 3, offset: 72585},
									label: "roundExpr",
									expr: &litMatcher{
										pos:        position{line: 2390, col: 13, offset: 72595},
										val:        "round",
										ignoreCase: false,
										want:       "\"round\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2390, col: 21, offset: 72603},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2390, col: 29, offset: 72611},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2390, col: 35, offset: 72617},
										name: "NumericExprLevel3",
									},
								},
								&labeledExpr{
									pos:   position{line: 2390, col: 54, offset: 72636},
									label: "roundPrecision",
									expr: &zeroOrOneExpr{
										pos: position{line: 2390, col: 69, offset: 72651},
										expr: &ruleRefExpr{
											pos:  position{line: 2390, col: 70, offset: 72652},
											name: "NumericParamExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2390, col: 89, offset: 72671},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2411, col: 3, offset: 73289},
						run: (*parser).callonNumericEvalExpr42,
						expr: &seqExpr{
							pos: position{line: 2411, col: 4, offset: 73290},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2411, col: 4, offset: 73290},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2411, col: 12, offset: 73298},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2411, col: 12, offset: 73298},
												val:        "now",
												ignoreCase: false,
												want:       "\"now\"",
											},
											&litMatcher{
												pos:        position{line: 2411, col: 20, offset: 73306},
												val:        "pi",
												ignoreCase: false,
												want:       "\"pi\"",
											},
											&litMatcher{
												pos:        position{line: 2411, col: 27, offset: 73313},
												val:        "random",
												ignoreCase: false,
												want:       "\"random\"",
											},
											&litMatcher{
												pos:        position{line: 2411, col: 38, offset: 73324},
												val:        "time",
												ignoreCase: false,
												want:       "\"time\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2411, col: 46, offset: 73332},
									name: "L_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2411, col: 54, offset: 73340},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2424, col: 3, offset: 73626},
						run: (*parser).callonNumericEvalExpr52,
						expr: &seqExpr{
							pos: position{line: 2424, col: 3, offset: 73626},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2424, col: 3, offset: 73626},
									val:        "tonumber",
									ignoreCase: false,
									want:       "\"tonumber\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2424, col: 14, offset: 73637},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2424, col: 22, offset: 73645},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2424, col: 33, offset: 73656},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2424, col: 44, offset: 73667},
									label: "baseExpr",
									expr: &zeroOrOneExpr{
										pos: position{line: 2424, col: 53, offset: 73676},
										expr: &seqExpr{
											pos: position{line: 2424, col: 54, offset: 73677},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2424, col: 54, offset: 73677},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2424, col: 60, offset: 73683},
													name: "NumericExprLevel3",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2424, col: 80, offset: 73703},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2452, col: 3, offset: 74545},
						run: (*parser).callonNumericEvalExpr64,
						expr: &seqExpr{
							pos: position{line: 2452, col: 3, offset: 74545},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2452, col: 3, offset: 74545},
									label: "lenExpr",
									expr: &litMatcher{
										pos:        position{line: 2452, col: 12, offset: 74554},
										val:        "len",
										ignoreCase: false,
										want:       "\"len\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2452, col: 18, offset: 74560},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2452, col: 26, offset: 74568},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2452, col: 31, offset: 74573},
										name: "LenExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2452, col: 39, offset: 74581},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2455, col: 3, offset: 74616},
						run: (*parser).callonNumericEvalExpr72,
						expr: &seqExpr{
							pos: position{line: 2455, col: 4, offset: 74617},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2455, col: 4, offset: 74617},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2455, col: 12, offset: 74625},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2455, col: 12, offset: 74625},
												val:        "pow",
												ignoreCase: false,
												want:       "\"pow\"",
											},
											&litMatcher{
												pos:        position{line: 2455, col: 20, offset: 74633},
												val:        "atan2",
												ignoreCase: false,
												want:       "\"atan2\"",
											},
											&litMatcher{
												pos:        position{line: 2455, col: 30, offset: 74643},
												val:        "hypot",
												ignoreCase: false,
												want:       "\"hypot\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2455, col: 39, offset: 74652},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2455, col: 47, offset: 74660},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2455, col: 53, offset: 74666},
										name: "NumericExprLevel3",
									},
								},
								&labeledExpr{
									pos:   position{line: 2455, col: 72, offset: 74685},
									label: "param",
									expr: &ruleRefExpr{
										pos:  position{line: 2455, col: 79, offset: 74692},
										name: "NumericParamExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2455, col: 97, offset: 74710},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2485, col: 3, offset: 75549},
						run: (*parser).callonNumericEvalExpr85,
						expr: &seqExpr{
							pos: position{line: 2485, col: 4, offset: 75550},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2485, col: 4, offset: 75550},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2485, col: 11, offset: 75557},
										val:        "log",
										ignoreCase: false,
										want:       "\"log\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2485, col: 17, offset: 75563},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2485, col: 25, offset: 75571},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2485, col: 31, offset: 75577},
										name: "NumericExprLevel3",
									},
								},
								&labeledExpr{
									pos:   position{line: 2485, col: 50, offset: 75596},
									label: "param",
									expr: &zeroOrOneExpr{
										pos: position{line: 2485, col: 56, offset: 75602},
										expr: &ruleRefExpr{
											pos:  position{line: 2485, col: 57, offset: 75603},
											name: "NumericParamExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2485, col: 76, offset: 75622},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2514, col: 3, offset: 76395},
						run: (*parser).callonNumericEvalExpr96,
						expr: &seqExpr{
							pos: position{line: 2514, col: 3, offset: 76395},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2514, col: 3, offset: 76395},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2514, col: 11, offset: 76403},
										val:        "relative_time",
										ignoreCase: false,
										want:       "\"relative_time\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2514, col: 28, offset: 76420},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2514, col: 36, offset: 76428},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2514, col: 42, offset: 76434},
										name: "NumericExprLevel3",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2514, col: 61, offset: 76453},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2514, col: 67, offset: 76459},
									label: "specifier",
									expr: &ruleRefExpr{
										pos:  position{line: 2514, col: 77, offset: 76469},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2514, col: 88, offset: 76480},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LenExpr",
			pos:  position{line: 2527, col: 1, offset: 76857},
			expr: &choiceExpr{
				pos: position{line: 2527, col: 12, offset: 76868},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2527, col: 12, offset: 76868},
						run: (*parser).callonLenExpr2,
						expr: &seqExpr{
							pos: position{line: 2527, col: 12, offset: 76868},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2527, col: 12, offset: 76868},
									label: "str",
									expr: &ruleRefExpr{
										pos:  position{line: 2527, col: 16, offset: 76872},
										name: "QuotedString",
									},
								},
								&notExpr{
									pos: position{line: 2527, col: 29, offset: 76885},
									expr: &ruleRefExpr{
										pos:  position{line: 2527, col: 31, offset: 76887},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2543, col: 3, offset: 77248},
						run: (*parser).callonLenExpr8,
						expr: &seqExpr{
							pos: position{line: 2543, col: 3, offset: 77248},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2543, col: 3, offset: 77248},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2543, col: 9, offset: 77254},
										name: "EvalFieldToRead",
									},
								},
								&notExpr{
									pos: position{line: 2543, col: 25, offset: 77270},
									expr: &choiceExpr{
										pos: position{line: 2543, col: 27, offset: 77272},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2543, col: 27, offset: 77272},
												name: "OpPlus",
											},
											&ruleRefExpr{
												pos:  position{line: 2543, col: 36, offset: 77281},
												name: "OpMinus",
											},
											&ruleRefExpr{
												pos:  position{line: 2543, col: 46, offset: 77291},
												name: "OpMul",
											},
											&ruleRefExpr{
												pos:  position{line: 2543, col: 54, offset: 77299},
												name: "OpDiv",
											},
											&ruleRefExpr{
												pos:  position{line: 2543, col: 62, offset: 77307},
												name: "EVAL_CONCAT",
											},
											&litMatcher{
												pos:        position{line: 2543, col: 76, offset: 77321},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NullOption",
			pos:  position{line: 2560, col: 1, offset: 77672},
			expr: &actionExpr{
				pos: position{line: 2560, col: 15, offset: 77686},
				run: (*parser).callonNullOption1,
				expr: &seqExpr{
					pos: position{line: 2560, col: 15, offset: 77686},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 2560, col: 15, offset: 77686},
							val:        "null",
							ignoreCase: false,
							want:       "\"null\"",
						},
						&ruleRefExpr{
							pos:  position{line: 2560, col: 22, offset: 77693},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 2560, col: 28, offset: 77699},
							label: "boolVal",
							expr: &ruleRefExpr{
								pos:  position{line: 2560, col: 36, offset: 77707},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "KeeplastOption",
			pos:  position{line: 2571, col: 1, offset: 77896},
			expr: &actionExpr{
				pos: position{line: 2571, col: 19, offset: 77914},
				run: (*parser).callonKeeplastOption1,
				expr: &seqExpr{
					pos: position{line: 2571, col: 19, offset: 77914},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 2571, col: 19, offset: 77914},
							val:        "keeplast",
							ignoreCase: false,
							want:       "\"keeplast\"",
						},
						&ruleRefExpr{
							pos:  position{line: 2571, col: 30, offset: 77925},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 2571, col: 36, offset: 77931},
							label: "boolVal",
							expr: &ruleRefExpr{
								pos:  position{line: 2571, col: 44, offset: 77939},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitOption",
			pos:  position{line: 2582, col: 1, offset: 78136},
			expr: &actionExpr{
				pos: position{line: 2582, col: 16, offset: 78151},
				run: (*parser).callonLimitOption1,
				expr: &seqExpr{
					pos: position{line: 2582, col: 16, offset: 78151},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 2582, col: 16, offset: 78151},
							val:        "limit",
							ignoreCase: false,
							want:       "\"limit\"",
						},
						&ruleRefExpr{
							pos:  position{line: 2582, col: 24, offset: 78159},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 2582, col: 30, offset: 78165},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 2582, col: 39, offset: 78174},
								name: "IntegerAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "ExprOption",
			pos:  position{line: 2597, col: 1, offset: 78536},
			expr: &actionExpr{
				pos: position{line: 2597, col: 15, offset: 78550},
				run: (*parser).callonExprOption1,
				expr: &labeledExpr{
					pos:   position{line: 2597, col: 15, offset: 78550},
					label: "boolExpr",
					expr: &ruleRefExpr{
						pos:  position{line: 2597, col: 24, offset: 78559},
						name: "BoolExpr",
					},
				},
			},
		},
		{
			name: "HeadOption",
			pos:  position{line: 2608, col: 1, offset: 78771},
			expr: &actionExpr{
				pos: position{line: 2608, col: 15, offset: 78785},
				run: (*parser).callonHeadOption1,
				expr: &labeledExpr{
					pos:   position{line: 2608, col: 15, offset: 78785},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 2608, col: 23, offset: 78793},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 2608, col: 23, offset: 78793},
								name: "KeeplastOption",
							},
							&ruleRefExpr{
								pos:  position{line: 2608, col: 40, offset: 78810},
								name: "NullOption",
							},
							&ruleRefExpr{
								pos:  position{line: 2608, col: 53, offset: 78823},
								name: "LimitOption",
							},
							&ruleRefExpr{
								pos:  position{line: 2608, col: 67, offset: 78837},
								name: "ExprOption",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOptionList",
			pos:  position{line: 2612, col: 1, offset: 78877},
			expr: &actionExpr{
				pos: position{line: 2612, col: 19, offset: 78895},
				run: (*parser).callonHeadOptionList1,
				expr: &seqExpr{
					pos: position{line: 2612, col: 19, offset: 78895},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2612, col: 19, offset: 78895},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2612, col: 26, offset: 78902},
								name: "HeadOption",
							},
						},
						&labeledExpr{
							pos:   position{line: 2612, col: 37, offset: 78913},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2612, col: 43, offset: 78919},
								expr: &seqExpr{
									pos: position{line: 2612, col: 44, offset: 78920},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 2612, col: 44, offset: 78920},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 2612, col: 50, offset: 78926},
											name: "HeadOption",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HeadBlock",
			pos:  position{line: 2670, col: 1, offset: 80659},
			expr: &choiceExpr{
				pos: position{line: 2670, col: 14, offset: 80672},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2670, col: 14, offset: 80672},
						run: (*parser).callonHeadBlock2,
						expr: &seqExpr{
							pos: position{line: 2670, col: 14, offset: 80672},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2670, col: 14, offset: 80672},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 2670, col: 19, offset: 80677},
									name: "CMD_HEAD",
								},
								&labeledExpr{
									pos:   position{line: 2670, col: 28, offset: 80686},
									label: "headExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2670, col: 37, offset: 80695},
										name: "HeadOptionList",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2680, col: 3, offset: 80966},
						run: (*parser).callonHeadBlock8,
						expr: &seqExpr{
							pos: position{line: 2680, col: 3, offset: 80966},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2680, col: 3, offset: 80966},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 2680, col: 8, offset: 80971},
									name: "CMD_HEAD",
								},
								&labeledExpr{
									pos:   position{line: 2680, col: 17, offset: 80980},
									label: "intAsStr",
									expr: &ruleRefExpr{
										pos:  position{line: 2680, col: 26, offset: 80989},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2697, col: 3, offset: 81468},
						run: (*parser).callonHeadBlock14,
						expr: &seqExpr{
							pos: position{line: 2697, col: 3, offset: 81468},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2697, col: 3, offset: 81468},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 2697, col: 8, offset: 81473},
									name: "CMD_HEAD_NO_SPACE",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggregationList",
			pos:  position{line: 2713, col: 1, offset: 81987},
			expr: &actionExpr{
				pos: position{line: 2713, col: 20, offset: 82006},
				run: (*parser).callonAggregationList1,
				expr: &seqExpr{
					pos: position{line: 2713, col: 20, offset: 82006},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2713, col: 20, offset: 82006},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2713, col: 26, offset: 82012},
								name: "Aggregator",
							},
						},
						&labeledExpr{
							pos:   position{line: 2713, col: 37, offset: 82023},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2713, col: 42, offset: 82028},
								expr: &seqExpr{
									pos: position{line: 2713, col: 43, offset: 82029},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 2713, col: 44, offset: 82030},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 2713, col: 44, offset: 82030},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2713, col: 52, offset: 82038},
													name: "SPACE",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2713, col: 59, offset: 82045},
											name: "Aggregator",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Aggregator",
			pos:  position{line: 2730, col: 1, offset: 82548},
			expr: &actionExpr{
				pos: position{line: 2730, col: 15, offset: 82562},
				run: (*parser).callonAggregator1,
				expr: &seqExpr{
					pos: position{line: 2730, col: 15, offset: 82562},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2730, col: 15, offset: 82562},
							label: "aggFunc",
							expr: &ruleRefExpr{
								pos:  position{line: 2730, col: 23, offset: 82570},
								name: "AggFunction",
							},
						},
						&labeledExpr{
							pos:   position{line: 2730, col: 35, offset: 82582},
							label: "asField",
							expr: &zeroOrOneExpr{
								pos: position{line: 2730, col: 43, offset: 82590},
								expr: &ruleRefExpr{
									pos:  position{line: 2730, col: 43, offset: 82590},
									name: "AsField",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggFunction",
			pos:  position{line: 2746, col: 1, offset: 83431},
			expr: &actionExpr{
				pos: position{line: 2746, col: 16, offset: 83446},
				run: (*parser).callonAggFunction1,
				expr: &labeledExpr{
					pos:   position{line: 2746, col: 16, offset: 83446},
					label: "agg",
					expr: &choiceExpr{
						pos: position{line: 2746, col: 21, offset: 83451},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 2746, col: 21, offset: 83451},
								name: "AggCount",
							},
							&ruleRefExpr{
								pos:  position{line: 2746, col: 32, offset: 83462},
								name: "AggDistinctCount",
							},
							&ruleRefExpr{
								pos:  position{line: 2746, col: 51, offset: 83481},
								name: "AggAvg",
							},
							&ruleRefExpr{
								pos:  position{line: 2746, col: 60, offset: 83490},
								name: "AggMin",
							},
							&ruleRefExpr{
								pos:  position{line: 2746, col: 69, offset: 83499},
								name: "AggMax",
							},
							&ruleRefExpr{
								pos:  position{line: 2746, col: 78, offset: 83508},
								name: "AggRange",
							},
							&ruleRefExpr{
								pos:  position{line: 2746, col: 89, offset: 83519},
								name: "AggSum",
							},
							&ruleRefExpr{
								pos:  position{line: 2746, col: 98, offset: 83528},
								name: "AggValues",
							},
							&ruleRefExpr{
								pos:  position{line: 2746, col: 110, offset: 83540},
								name: "AggEstdc",
							},
							&ruleRefExpr{
								pos:  position{line: 2746, col: 121, offset: 83551},
								name: "AggEstdcError",
							},
							&ruleRefExpr{
								pos:  position{line: 2746, col: 137, offset: 83567},
								name: "AggExactPerc",
							},
							&ruleRefExpr{
								pos:  position{line: 2746, col: 152, offset: 83582},
								name: "AggMedian",
							},
							&ruleRefExpr{
								pos:  position{line: 2746, col: 164, offset: 83594},
								name: "AggMode",
							},
							&ruleRefExpr{
								pos:  position{line: 2746, col: 174, offset: 83604},
								name: "AggPerc",
							},
							&ruleRefExpr{
								pos:  position{line: 2747, col: 1, offset: 83614},
								name: "AggStdev",
							},
							&ruleRefExpr{
								pos:  position{line: 2747, col: 12, offset: 83625},
								name: "AggStdevp",
							},
							&ruleRefExpr{
								pos:  position{line: 2747, col: 24, offset: 83637},
								name: "AggSumsq",
							},
							&ruleRefExpr{
								pos:  position{line: 2747, col: 35, offset: 83648},
								name: "AggUpperPerc",
							},
							&ruleRefExpr{
								pos:  position{line: 2747, col: 50, offset: 83663},
								name: "AggVar",
							},
							&ruleRefExpr{
								pos:  position{line: 2747, col: 59, offset: 83672},
								name: "AggVarp",
							},
							&ruleRefExpr{
								pos:  position{line: 2747, col: 69, offset: 83682},
								name: "AggFirst",
							},
							&ruleRefExpr{
								pos:  position{line: 2747, col: 80, offset: 83693},
								name: "AggLast",
							},
							&ruleRefExpr{
								pos:  position{line: 2747, col: 90, offset: 83703},
								name: "AggList",
							},
							&ruleRefExpr{
								pos:  position{line: 2747, col: 100, offset: 83713},
								name: "AggEarliest",
							},
							&ruleRefExpr{
								pos:  position{line: 2747, col: 114, offset: 83727},
								name: "AggEarliestTime",
							},
							&ruleRefExpr{
								pos:  position{line: 2747, col: 132, offset: 83745},
								name: "AggLatest",
							},
							&ruleRefExpr{
								pos:  position{line: 2747, col: 144, offset: 83757},
								name: "AggLatestTime",
							},
							&ruleRefExpr{
								pos:  position{line: 2747, col: 160, offset: 83773},
								name: "AggRate",
							},
						},
					},
				},
			},
		},
		{
			name: "AsField",
			pos:  position{line: 2751, col: 1, offset: 83807},
			expr: &actionExpr{
				pos: position{line: 2751, col: 12, offset: 83818},
				run: (*parser).callonAsField1,
				expr: &seqExpr{
					pos: position{line: 2751, col: 12, offset: 83818},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2751, col: 12, offset: 83818},
							name: "AS",
						},
						&labeledExpr{
							pos:   position{line: 2751, col: 15, offset: 83821},
							label: "field",
							expr: &choiceExpr{
								pos: position{line: 2751, col: 23, offset: 83829},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 2751, col: 23, offset: 83829},
										name: "FieldName",
									},
									&ruleRefExpr{
										pos:  position{line: 2751, col: 35, offset: 83841},
										name: "String",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggCount",
			pos:  position{line: 2765, col: 1, offset: 84170},
			expr: &choiceExpr{
				pos: position{line: 2765, col: 13, offset: 84182},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2765, col: 13, offset: 84182},
						run: (*parser).callonAggCount2,
						expr: &seqExpr{
							pos: position{line: 2765, col: 13, offset: 84182},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 2765, col: 14, offset: 84183},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 2765, col: 14, offset: 84183},
											val:        "count",
											ignoreCase: false,
											want:       "\"count\"",
										},
										&litMatcher{
											pos:        position{line: 2765, col: 24, offset: 84193},
											val:        "c",
											ignoreCase: false,
											want:       "\"c\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2765, col: 29, offset: 84198},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2765, col: 37, offset: 84206},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 2765, col: 44, offset: 84213},
									label: "boolExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2765, col: 53, offset: 84222},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2765, col: 62, offset: 84231},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2780, col: 3, offset: 84581},
						run: (*parser).callonAggCount12,
						expr: &seqExpr{
							pos: position{line: 2780, col: 3, offset: 84581},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 2780, col: 4, offset: 84582},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 2780, col: 4, offset: 84582},
											val:        "count",
											ignoreCase: false,
											want:       "\"count\"",
										},
										&litMatcher{
											pos:        position{line: 2780, col: 14, offset: 84592},
											val:        "c",
											ignoreCase: false,
											want:       "\"c\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2780, col: 19, offset: 84597},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2780, col: 27, offset: 84605},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2780, col: 33, offset: 84611},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2780, col: 43, offset: 84621},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2787, col: 5, offset: 84772},
						run: (*parser).callonAggCount21,
						expr: &choiceExpr{
							pos: position{line: 2787, col: 6, offset: 84773},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 2787, col: 6, offset: 84773},
									val:        "count",
									ignoreCase: false,
									want:       "\"count\"",
								},
								&litMatcher{
									pos:        position{line: 2787, col: 16, offset: 84783},
									val:        "c",
									ignoreCase: false,
									want:       "\"c\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggDistinctCount",
			pos:  position{line: 2796, col: 1, offset: 84919},
			expr: &choiceExpr{
				pos: position{line: 2796, col: 21, offset: 84939},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2796, col: 21, offset: 84939},
						run: (*parser).callonAggDistinctCount2,
						expr: &seqExpr{
							pos: position{line: 2796, col: 21, offset: 84939},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 2796, col: 22, offset: 84940},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 2796, col: 22, offset: 84940},
											val:        "distinct_count",
											ignoreCase: false,
											want:       "\"distinct_count\"",
										},
										&litMatcher{
											pos:        position{line: 2796, col: 41, offset: 84959},
											val:        "dc",
											ignoreCase: false,
											want:       "\"dc\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2796, col: 47, offset: 84965},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2796, col: 55, offset: 84973},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 2796, col: 62, offset: 84980},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2796, col: 72, offset: 84990},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2796, col: 82, offset: 85000},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2806, col: 3, offset: 85234},
						run: (*parser).callonAggDistinctCount12,
						expr: &seqExpr{
							pos: position{line: 2806, col: 3, offset: 85234},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 2806, col: 4, offset: 85235},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 2806, col: 4, offset: 85235},
											val:        "distinct_count",
											ignoreCase: false,
											want:       "\"distinct_count\"",
										},
										&litMatcher{
											pos:        position{line: 2806, col: 23, offset: 85254},
											val:        "dc",
											ignoreCase: false,
											want:       "\"dc\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2806, col: 29, offset: 85260},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2806, col: 37, offset: 85268},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2806, col: 43, offset: 85274},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2806, col: 53, offset: 85284},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAvg",
			pos:  position{line: 2815, col: 1, offset: 85440},
			expr: &choiceExpr{
				pos: position{line: 2815, col: 11, offset: 85450},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2815, col: 11, offset: 85450},
						run: (*parser).callonAggAvg2,
						expr: &seqExpr{
							pos: position{line: 2815, col: 11, offset: 85450},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2815, col: 11, offset: 85450},
									val:        "avg",
									ignoreCase: false,
									want:       "\"avg\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2815, col: 17, offset: 85456},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2815, col: 25, offset: 85464},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2815, col: 32, offset: 85471},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2815, col: 40, offset: 85479},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2815, col: 59, offset: 85498},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2815, col: 78, offset: 85517},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2815, col: 86, offset: 85525},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2830, col: 3, offset: 85883},
						run: (*parser).callonAggAvg12,
						expr: &seqExpr{
							pos: position{line: 2830, col: 3, offset: 85883},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2830, col: 3, offset: 85883},
									val:        "avg",
									ignoreCase: false,
									want:       "\"avg\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2830, col: 9, offset: 85889},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2830, col: 17, offset: 85897},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2830, col: 23, offset: 85903},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2830, col: 33, offset: 85913},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMin",
			pos:  position{line: 2839, col: 1, offset: 86061},
			expr: &choiceExpr{
				pos: position{line: 2839, col: 11, offset: 86071},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2839, col: 11, offset: 86071},
						run: (*parser).callonAggMin2,
						expr: &seqExpr{
							pos: position{line: 2839, col: 11, offset: 86071},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2839, col: 11, offset: 86071},
									val:        "min",
									ignoreCase: false,
									want:       "\"min\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2839, col: 17, offset: 86077},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2839, col: 25, offset: 86085},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2839, col: 32, offset: 86092},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2839, col: 40, offset: 86100},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2839, col: 59, offset: 86119},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2839, col: 78, offset: 86138},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2839, col: 86, offset: 86146},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2854, col: 3, offset: 86504},
						run: (*parser).callonAggMin12,
						expr: &seqExpr{
							pos: position{line: 2854, col: 3, offset: 86504},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2854, col: 3, offset: 86504},
									val:        "min",
									ignoreCase: false,
									want:       "\"min\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2854, col: 9, offset: 86510},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2854, col: 17, offset: 86518},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2854, col: 23, offset: 86524},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2854, col: 33, offset: 86534},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMax",
			pos:  position{line: 2863, col: 1, offset: 86682},
			expr: &choiceExpr{
				pos: position{line: 2863, col: 11, offset: 86692},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2863, col: 11, offset: 86692},
						run: (*parser).callonAggMax2,
						expr: &seqExpr{
							pos: position{line: 2863, col: 11, offset: 86692},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2863, col: 11, offset: 86692},
									val:        "max",
									ignoreCase: false,
									want:       "\"max\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2863, col: 17, offset: 86698},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2863, col: 25, offset: 86706},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2863, col: 32, offset: 86713},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2863, col: 41, offset: 86722},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2863, col: 60, offset: 86741},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2863, col: 79, offset: 86760},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2863, col: 87, offset: 86768},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2878, col: 3, offset: 87126},
						run: (*parser).callonAggMax12,
						expr: &seqExpr{
							pos: position{line: 2878, col: 3, offset: 87126},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2878, col: 3, offset: 87126},
									val:        "max",
									ignoreCase: false,
									want:       "\"max\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2878, col: 9, offset: 87132},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2878, col: 17, offset: 87140},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2878, col: 23, offset: 87146},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2878, col: 33, offset: 87156},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggRange",
			pos:  position{line: 2887, col: 1, offset: 87304},
			expr: &choiceExpr{
				pos: position{line: 2887, col: 13, offset: 87316},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2887, col: 13, offset: 87316},
						run: (*parser).callonAggRange2,
						expr: &seqExpr{
							pos: position{line: 2887, col: 13, offset: 87316},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2887, col: 13, offset: 87316},
									val:        "range",
									ignoreCase: false,
									want:       "\"range\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2887, col: 21, offset: 87324},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2887, col: 29, offset: 87332},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2887, col: 36, offset: 87339},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2887, col: 44, offset: 87347},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2887, col: 63, offset: 87366},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2887, col: 82, offset: 87385},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2887, col: 90, offset: 87393},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2902, col: 3, offset: 87753},
						run: (*parser).callonAggRange12,
						expr: &seqExpr{
							pos: position{line: 2902, col: 3, offset: 87753},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2902, col: 3, offset: 87753},
									val:        "range",
									ignoreCase: false,
									want:       "\"range\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2902, col: 11, offset: 87761},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2902, col: 19, offset: 87769},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2902, col: 25, offset: 87775},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2902, col: 35, offset: 87785},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggSum",
			pos:  position{line: 2911, col: 1, offset: 87935},
			expr: &choiceExpr{
				pos: position{line: 2911, col: 11, offset: 87945},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2911, col: 11, offset: 87945},
						run: (*parser).callonAggSum2,
						expr: &seqExpr{
							pos: position{line: 2911, col: 11, offset: 87945},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2911, col: 11, offset: 87945},
									val:        "sum",
									ignoreCase: false,
									want:       "\"sum\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2911, col: 17, offset: 87951},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2911, col: 25, offset: 87959},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2911, col: 32, offset: 87966},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2911, col: 40, offset: 87974},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2911, col: 59, offset: 87993},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2911, col: 78, offset: 88012},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2911, col: 86, offset: 88020},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2926, col: 3, offset: 88378},
						run: (*parser).callonAggSum12,
						expr: &seqExpr{
							pos: position{line: 2926, col: 3, offset: 88378},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2926, col: 3, offset: 88378},
									val:        "sum",
									ignoreCase: false,
									want:       "\"sum\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2926, col: 9, offset: 88384},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2926, col: 17, offset: 88392},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2926, col: 23, offset: 88398},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2926, col: 33, offset: 88408},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggEstdc",
			pos:  position{line: 2936, col: 1, offset: 88596},
			expr: &choiceExpr{
				pos: position{line: 2936, col: 13, offset: 88608},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2936, col: 13, offset: 88608},
						run: (*parser).callonAggEstdc2,
						expr: &seqExpr{
							pos: position{line: 2936, col: 13, offset: 88608},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2936, col: 13, offset: 88608},
									val:        "estdc",
									ignoreCase: false,
									want:       "\"estdc\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2936, col: 21, offset: 88616},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2936, col: 29, offset: 88624},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2936, col: 36, offset: 88631},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2936, col: 44, offset: 88639},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2936, col: 63, offset: 88658},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2936, col: 82, offset: 88677},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2936, col: 90, offset: 88685},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2951, col: 3, offset: 89045},
						run: (*parser).callonAggEstdc12,
						expr: &seqExpr{
							pos: position{line: 2951, col: 3, offset: 89045},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2951, col: 3, offset: 89045},
									val:        "estdc",
									ignoreCase: false,
									want:       "\"estdc\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2951, col: 11, offset: 89053},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2951, col: 19, offset: 89061},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2951, col: 25, offset: 89067},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2951, col: 35, offset: 89077},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggEstdcError",
			pos:  position{line: 2961, col: 1, offset: 89267},
			expr: &choiceExpr{
				pos: position{line: 2961, col: 18, offset: 89284},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2961, col: 18, offset: 89284},
						run: (*parser).callonAggEstdcError2,
						expr: &seqExpr{
							pos: position{line: 2961, col: 18, offset: 89284},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2961, col: 18, offset: 89284},
									val:        "estdc_error",
									ignoreCase: false,
									want:       "\"estdc_error\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2961, col: 32, offset: 89298},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2961, col: 40, offset: 89306},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2961, col: 47, offset: 89313},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2961, col: 55, offset: 89321},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2961, col: 74, offset: 89340},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2961, col: 93, offset: 89359},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2961, col: 101, offset: 89367},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2976, col: 3, offset: 89732},
						run: (*parser).callonAggEstdcError12,
						expr: &seqExpr{
							pos: position{line: 2976, col: 3, offset: 89732},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2976, col: 3, offset: 89732},
									val:        "estdc_error",
									ignoreCase: false,
									want:       "\"estdc_error\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2976, col: 17, offset: 89746},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2976, col: 25, offset: 89754},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2976, col: 31, offset: 89760},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2976, col: 41, offset: 89770},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggExactPerc",
			pos:  position{line: 2986, col: 1, offset: 89965},
			expr: &choiceExpr{
				pos: position{line: 2986, col: 17, offset: 89981},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2986, col: 17, offset: 89981},
						run: (*parser).callonAggExactPerc2,
						expr: &seqExpr{
							pos: position{line: 2986, col: 17, offset: 89981},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2986, col: 17, offset: 89981},
									val:        "exactperc",
									ignoreCase: false,
									want:       "\"exactperc\"",
								},
								&labeledExpr{
									pos:   position{line: 2986, col: 29, offset: 89993},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 2986, col: 37, offset: 90001},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2986, col: 37, offset: 90001},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 2986, col: 53, offset: 90017},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2986, col: 70, offset: 90034},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2986, col: 78, offset: 90042},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2986, col: 85, offset: 90049},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2986, col: 93, offset: 90057},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2986, col: 112, offset: 90076},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2986, col: 131, offset: 90095},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2986, col: 139, offset: 90103},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3002, col: 3, offset: 90499},
						run: (*parser).callonAggExactPerc16,
						expr: &seqExpr{
							pos: position{line: 3002, col: 3, offset: 90499},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3002, col: 3, offset: 90499},
									val:        "exactperc",
									ignoreCase: false,
									want:       "\"exactperc\"",
								},
								&labeledExpr{
									pos:   position{line: 3002, col: 15, offset: 90511},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 3002, col: 23, offset: 90519},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 3002, col: 23, offset: 90519},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 3002, col: 39, offset: 90535},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3002, col: 56, offset: 90552},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3002, col: 64, offset: 90560},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3002, col: 70, offset: 90566},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3002, col: 80, offset: 90576},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggPerc",
			pos:  position{line: 3013, col: 1, offset: 90802},
			expr: &choiceExpr{
				pos: position{line: 3013, col: 12, offset: 90813},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3013, col: 12, offset: 90813},
						run: (*parser).callonAggPerc2,
						expr: &seqExpr{
							pos: position{line: 3013, col: 12, offset: 90813},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3013, col: 12, offset: 90813},
									val:        "perc",
									ignoreCase: false,
									want:       "\"perc\"",
								},
								&labeledExpr{
									pos:   position{line: 3013, col: 19, offset: 90820},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 3013, col: 27, offset: 90828},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 3013, col: 27, offset: 90828},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 3013, col: 43, offset: 90844},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3013, col: 60, offset: 90861},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3013, col: 68, offset: 90869},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3013, col: 75, offset: 90876},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3013, col: 83, offset: 90884},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3013, col: 102, offset: 90903},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3013, col: 121, offset: 90922},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3013, col: 129, offset: 90930},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3029, col: 3, offset: 91321},
						run: (*parser).callonAggPerc16,
						expr: &seqExpr{
							pos: position{line: 3029, col: 3, offset: 91321},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3029, col: 3, offset: 91321},
									val:        "perc",
									ignoreCase: false,
									want:       "\"perc\"",
								},
								&labeledExpr{
									pos:   position{line: 3029, col: 10, offset: 91328},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 3029, col: 18, offset: 91336},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 3029, col: 18, offset: 91336},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 3029, col: 34, offset: 91352},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3029, col: 51, offset: 91369},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3029, col: 59, offset: 91377},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3029, col: 65, offset: 91383},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3029, col: 75, offset: 91393},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggUpperPerc",
			pos:  position{line: 3040, col: 1, offset: 91614},
			expr: &choiceExpr{
				pos: position{line: 3040, col: 17, offset: 91630},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3040, col: 17, offset: 91630},
						run: (*parser).callonAggUpperPerc2,
						expr: &seqExpr{
							pos: position{line: 3040, col: 17, offset: 91630},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3040, col: 17, offset: 91630},
									val:        "upperperc",
									ignoreCase: false,
									want:       "\"upperperc\"",
								},
								&labeledExpr{
									pos:   position{line: 3040, col: 29, offset: 91642},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 3040, col: 37, offset: 91650},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 3040, col: 37, offset: 91650},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 3040, col: 53, offset: 91666},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3040, col: 70, offset: 91683},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3040, col: 78, offset: 91691},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3040, col: 85, offset: 91698},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3040, col: 93, offset: 91706},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3040, col: 112, offset: 91725},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3040, col: 131, offset: 91744},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3040, col: 139, offset: 91752},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3056, col: 3, offset: 92148},
						run: (*parser).callonAggUpperPerc16,
						expr: &seqExpr{
							pos: position{line: 3056, col: 3, offset: 92148},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3056, col: 3, offset: 92148},
									val:        "upperperc",
									ignoreCase: false,
									want:       "\"upperperc\"",
								},
								&labeledExpr{
									pos:   position{line: 3056, col: 15, offset: 92160},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 3056, col: 23, offset: 92168},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 3056, col: 23, offset: 92168},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 3056, col: 39, offset: 92184},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3056, col: 56, offset: 92201},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3056, col: 64, offset: 92209},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3056, col: 70, offset: 92215},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3056, col: 80, offset: 92225},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMedian",
			pos:  position{line: 3067, col: 1, offset: 92451},
			expr: &choiceExpr{
				pos: position{line: 3067, col: 14, offset: 92464},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3067, col: 14, offset: 92464},
						run: (*parser).callonAggMedian2,
						expr: &seqExpr{
							pos: position{line: 3067, col: 14, offset: 92464},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3067, col: 14, offset: 92464},
									val:        "median",
									ignoreCase: false,
									want:       "\"median\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3067, col: 23, offset: 92473},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3067, col: 31, offset: 92481},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3067, col: 38, offset: 92488},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3067, col: 46, offset: 92496},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3067, col: 65, offset: 92515},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3067, col: 84, offset: 92534},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3067, col: 92, offset: 92542},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3082, col: 3, offset: 92903},
						run: (*parser).callonAggMedian12,
						expr: &seqExpr{
							pos: position{line: 3082, col: 3, offset: 92903},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3082, col: 3, offset: 92903},
									val:        "median",
									ignoreCase: false,
									want:       "\"median\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3082, col: 12, offset: 92912},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3082, col: 20, offset: 92920},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3082, col: 26, offset: 92926},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3082, col: 36, offset: 92936},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMode",
			pos:  position{line: 3092, col: 1, offset: 93127},
			expr: &choiceExpr{
				pos: position{line: 3092, col: 12, offset: 93138},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3092, col: 12, offset: 93138},
						run: (*parser).callonAggMode2,
						expr: &seqExpr{
							pos: position{line: 3092, col: 12, offset: 93138},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3092, col: 12, offset: 93138},
									val:        "mode",
									ignoreCase: false,
									want:       "\"mode\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3092, col: 19, offset: 93145},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3092, col: 27, offset: 93153},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3092, col: 34, offset: 93160},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3092, col: 42, offset: 93168},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3092, col: 61, offset: 93187},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3092, col: 80, offset: 93206},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3092, col: 88, offset: 93214},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3107, col: 3, offset: 93573},
						run: (*parser).callonAggMode12,
						expr: &seqExpr{
							pos: position{line: 3107, col: 3, offset: 93573},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3107, col: 3, offset: 93573},
									val:        "mode",
									ignoreCase: false,
									want:       "\"mode\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3107, col: 10, offset: 93580},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3107, col: 18, offset: 93588},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3107, col: 24, offset: 93594},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3107, col: 34, offset: 93604},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggStdev",
			pos:  position{line: 3117, col: 1, offset: 93793},
			expr: &choiceExpr{
				pos: position{line: 3117, col: 13, offset: 93805},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3117, col: 13, offset: 93805},
						run: (*parser).callonAggStdev2,
						expr: &seqExpr{
							pos: position{line: 3117, col: 13, offset: 93805},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3117, col: 13, offset: 93805},
									val:        "stdev",
									ignoreCase: false,
									want:       "\"stdev\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3117, col: 21, offset: 93813},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3117, col: 29, offset: 93821},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3117, col: 36, offset: 93828},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3117, col: 44, offset: 93836},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3117, col: 63, offset: 93855},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3117, col: 82, offset: 93874},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3117, col: 90, offset: 93882},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3132, col: 3, offset: 94242},
						run: (*parser).callonAggStdev12,
						expr: &seqExpr{
							pos: position{line: 3132, col: 3, offset: 94242},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3132, col: 3, offset: 94242},
									val:        "stdev",
									ignoreCase: false,
									want:       "\"stdev\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3132, col: 11, offset: 94250},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3132, col: 19, offset: 94258},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3132, col: 25, offset: 94264},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3132, col: 35, offset: 94274},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggStdevp",
			pos:  position{line: 3142, col: 1, offset: 94464},
			expr: &choiceExpr{
				pos: position{line: 3142, col: 14, offset: 94477},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3142, col: 14, offset: 94477},
						run: (*parser).callonAggStdevp2,
						expr: &seqExpr{
							pos: position{line: 3142, col: 14, offset: 94477},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3142, col: 14, offset: 94477},
									val:        "stdevp",
									ignoreCase: false,
									want:       "\"stdevp\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3142, col: 23, offset: 94486},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3142, col: 31, offset: 94494},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3142, col: 38, offset: 94501},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3142, col: 46, offset: 94509},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3142, col: 65, offset: 94528},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3142, col: 84, offset: 94547},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3142, col: 92, offset: 94555},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3157, col: 3, offset: 94916},
						run: (*parser).callonAggStdevp12,
						expr: &seqExpr{
							pos: position{line: 3157, col: 3, offset: 94916},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3157, col: 3, offset: 94916},
									val:        "stdevp",
									ignoreCase: false,
									want:       "\"stdevp\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3157, col: 12, offset: 94925},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3157, col: 20, offset: 94933},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3157, col: 26, offset: 94939},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3157, col: 36, offset: 94949},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggSumsq",
			pos:  position{line: 3167, col: 1, offset: 95140},
			expr: &choiceExpr{
				pos: position{line: 3167, col: 13, offset: 95152},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3167, col: 13, offset: 95152},
						run: (*parser).callonAggSumsq2,
						expr: &seqExpr{
							pos: position{line: 3167, col: 13, offset: 95152},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3167, col: 13, offset: 95152},
									val:        "sumsq",
									ignoreCase: false,
									want:       "\"sumsq\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3167, col: 21, offset: 95160},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3167, col: 29, offset: 95168},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3167, col: 36, offset: 95175},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3167, col: 44, offset: 95183},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3167, col: 63, offset: 95202},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3167, col: 82, offset: 95221},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3167, col: 90, offset: 95229},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3182, col: 3, offset: 95589},
						run: (*parser).callonAggSumsq12,
						expr: &seqExpr{
							pos: position{line: 3182, col: 3, offset: 95589},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3182, col: 3, offset: 95589},
									val:        "sumsq",
									ignoreCase: false,
									want:       "\"sumsq\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3182, col: 11, offset: 95597},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3182, col: 19, offset: 95605},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3182, col: 25, offset: 95611},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3182, col: 35, offset: 95621},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggVar",
			pos:  position{line: 3192, col: 1, offset: 95811},
			expr: &choiceExpr{
				pos: position{line: 3192, col: 11, offset: 95821},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3192, col: 11, offset: 95821},
						run: (*parser).callonAggVar2,
						expr: &seqExpr{
							pos: position{line: 3192, col: 11, offset: 95821},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3192, col: 11, offset: 95821},
									val:        "var",
									ignoreCase: false,
									want:       "\"var\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3192, col: 17, offset: 95827},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3192, col: 25, offset: 95835},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3192, col: 32, offset: 95842},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3192, col: 40, offset: 95850},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3192, col: 59, offset: 95869},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3192, col: 78, offset: 95888},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3192, col: 86, offset: 95896},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3207, col: 3, offset: 96254},
						run: (*parser).callonAggVar12,
						expr: &seqExpr{
							pos: position{line: 3207, col: 3, offset: 96254},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3207, col: 3, offset: 96254},
									val:        "var",
									ignoreCase: false,
									want:       "\"var\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3207, col: 9, offset: 96260},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3207, col: 17, offset: 96268},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3207, col: 23, offset: 96274},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3207, col: 33, offset: 96284},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggVarp",
			pos:  position{line: 3217, col: 1, offset: 96472},
			expr: &choiceExpr{
				pos: position{line: 3217, col: 12, offset: 96483},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3217, col: 12, offset: 96483},
						run: (*parser).callonAggVarp2,
						expr: &seqExpr{
							pos: position{line: 3217, col: 12, offset: 96483},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3217, col: 12, offset: 96483},
									val:        "varp",
									ignoreCase: false,
									want:       "\"varp\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3217, col: 19, offset: 96490},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3217, col: 27, offset: 96498},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3217, col: 34, offset: 96505},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3217, col: 42, offset: 96513},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3217, col: 61, offset: 96532},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3217, col: 80, offset: 96551},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3217, col: 88, offset: 96559},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3232, col: 3, offset: 96918},
						run: (*parser).callonAggVarp12,
						expr: &seqExpr{
							pos: position{line: 3232, col: 3, offset: 96918},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3232, col: 3, offset: 96918},
									val:        "varp",
									ignoreCase: false,
									want:       "\"varp\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3232, col: 10, offset: 96925},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3232, col: 18, offset: 96933},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3232, col: 24, offset: 96939},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3232, col: 34, offset: 96949},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggFirst",
			pos:  position{line: 3242, col: 1, offset: 97138},
			expr: &choiceExpr{
				pos: position{line: 3242, col: 13, offset: 97150},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3242, col: 13, offset: 97150},
						run: (*parser).callonAggFirst2,
						expr: &seqExpr{
							pos: position{line: 3242, col: 13, offset: 97150},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3242, col: 13, offset: 97150},
									val:        "first",
									ignoreCase: false,
									want:       "\"first\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3242, col: 21, offset: 97158},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3242, col: 29, offset: 97166},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3242, col: 36, offset: 97173},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3242, col: 44, offset: 97181},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3242, col: 63, offset: 97200},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3242, col: 82, offset: 97219},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3242, col: 90, offset: 97227},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3257, col: 3, offset: 97587},
						run: (*parser).callonAggFirst12,
						expr: &seqExpr{
							pos: position{line: 3257, col: 3, offset: 97587},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3257, col: 3, offset: 97587},
									val:        "first",
									ignoreCase: false,
									want:       "\"first\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3257, col: 11, offset: 97595},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3257, col: 19, offset: 97603},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3257, col: 25, offset: 97609},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3257, col: 35, offset: 97619},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggLast",
			pos:  position{line: 3267, col: 1, offset: 97809},
			expr: &choiceExpr{
				pos: position{line: 3267, col: 12, offset: 97820},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3267, col: 12, offset: 97820},
						run: (*parser).callonAggLast2,
						expr: &seqExpr{
							pos: position{line: 3267, col: 12, offset: 97820},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3267, col: 12, offset: 97820},
									val:        "last",
									ignoreCase: false,
									want:       "\"last\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3267, col: 19, offset: 97827},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3267, col: 27, offset: 97835},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3267, col: 34, offset: 97842},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3267, col: 42, offset: 97850},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3267, col: 61, offset: 97869},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3267, col: 80, offset: 97888},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3267, col: 88, offset: 97896},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3282, col: 3, offset: 98255},
						run: (*parser).callonAggLast12,
						expr: &seqExpr{
							pos: position{line: 3282, col: 3, offset: 98255},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3282, col: 3, offset: 98255},
									val:        "last",
									ignoreCase: false,
									want:       "\"last\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3282, col: 10, offset: 98262},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3282, col: 18, offset: 98270},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3282, col: 24, offset: 98276},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3282, col: 34, offset: 98286},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggList",
			pos:  position{line: 3292, col: 1, offset: 98475},
			expr: &choiceExpr{
				pos: position{line: 3292, col: 12, offset: 98486},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3292, col: 12, offset: 98486},
						run: (*parser).callonAggList2,
						expr: &seqExpr{
							pos: position{line: 3292, col: 12, offset: 98486},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3292, col: 12, offset: 98486},
									val:        "list",
									ignoreCase: false,
									want:       "\"list\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3292, col: 19, offset: 98493},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3292, col: 27, offset: 98501},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 3292, col: 34, offset: 98508},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3292, col: 44, offset: 98518},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3292, col: 54, offset: 98528},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3302, col: 3, offset: 98755},
						run: (*parser).callonAggList10,
						expr: &seqExpr{
							pos: position{line: 3302, col: 3, offset: 98755},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3302, col: 3, offset: 98755},
									val:        "list",
									ignoreCase: false,
									want:       "\"list\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3302, col: 10, offset: 98762},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3302, col: 18, offset: 98770},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3302, col: 24, offset: 98776},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3302, col: 34, offset: 98786},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggEarliest",
			pos:  position{line: 3312, col: 1, offset: 98975},
			expr: &choiceExpr{
				pos: position{line: 3312, col: 16, offset: 98990},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3312, col: 16, offset: 98990},
						run: (*parser).callonAggEarliest2,
						expr: &seqExpr{
							pos: position{line: 3312, col: 16, offset: 98990},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3312, col: 16, offset: 98990},
									val:        "earliest",
									ignoreCase: false,
									want:       "\"earliest\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3312, col: 27, offset: 99001},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3312, col: 35, offset: 99009},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3312, col: 42, offset: 99016},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3312, col: 50, offset: 99024},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3312, col: 69, offset: 99043},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3312, col: 88, offset: 99062},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3312, col: 96, offset: 99070},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3327, col: 3, offset: 99433},
						run: (*parser).callonAggEarliest12,
						expr: &seqExpr{
							pos: position{line: 3327, col: 3, offset: 99433},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3327, col: 3, offset: 99433},
									val:        "earliest",
									ignoreCase: false,
									want:       "\"earliest\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3327, col: 14, offset: 99444},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3327, col: 22, offset: 99452},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3327, col: 28, offset: 99458},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3327, col: 38, offset: 99468},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggEarliestTime",
			pos:  position{line: 3337, col: 1, offset: 99661},
			expr: &choiceExpr{
				pos: position{line: 3337, col: 20, offset: 99680},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3337, col: 20, offset: 99680},
						run: (*parser).callonAggEarliestTime2,
						expr: &seqExpr{
							pos: position{line: 3337, col: 20, offset: 99680},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3337, col: 20, offset: 99680},
									val:        "earliest_time",
									ignoreCase: false,
									want:       "\"earliest_time\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3337, col: 36, offset: 99696},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3337, col: 44, offset: 99704},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3337, col: 51, offset: 99711},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3337, col: 59, offset: 99719},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3337, col: 78, offset: 99738},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3337, col: 97, offset: 99757},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3337, col: 105, offset: 99765},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3352, col: 3, offset: 100132},
						run: (*parser).callonAggEarliestTime12,
						expr: &seqExpr{
							pos: position{line: 3352, col: 3, offset: 100132},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3352, col: 3, offset: 100132},
									val:        "earliest_time",
									ignoreCase: false,
									want:       "\"earliest_time\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3352, col: 19, offset: 100148},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3352, col: 27, offset: 100156},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3352, col: 33, offset: 100162},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3352, col: 43, offset: 100172},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggLatest",
			pos:  position{line: 3362, col: 1, offset: 100369},
			expr: &choiceExpr{
				pos: position{line: 3362, col: 14, offset: 100382},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3362, col: 14, offset: 100382},
						run: (*parser).callonAggLatest2,
						expr: &seqExpr{
							pos: position{line: 3362, col: 14, offset: 100382},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3362, col: 14, offset: 100382},
									val:        "latest",
									ignoreCase: false,
									want:       "\"latest\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3362, col: 23, offset: 100391},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3362, col: 31, offset: 100399},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3362, col: 38, offset: 100406},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3362, col: 46, offset: 100414},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3362, col: 65, offset: 100433},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3362, col: 84, offset: 100452},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3362, col: 92, offset: 100460},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3377, col: 3, offset: 100821},
						run: (*parser).callonAggLatest12,
						expr: &seqExpr{
							pos: position{line: 3377, col: 3, offset: 100821},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3377, col: 3, offset: 100821},
									val:        "latest",
									ignoreCase: false,
									want:       "\"latest\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3377, col: 12, offset: 100830},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3377, col: 20, offset: 100838},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3377, col: 26, offset: 100844},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3377, col: 36, offset: 100854},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggLatestTime",
			pos:  position{line: 3387, col: 1, offset: 101045},
			expr: &choiceExpr{
				pos: position{line: 3387, col: 18, offset: 101062},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3387, col: 18, offset: 101062},
						run: (*parser).callonAggLatestTime2,
						expr: &seqExpr{
							pos: position{line: 3387, col: 18, offset: 101062},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3387, col: 18, offset: 101062},
									val:        "latest_time",
									ignoreCase: false,
									want:       "\"latest_time\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3387, col: 32, offset: 101076},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3387, col: 40, offset: 101084},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3387, col: 47, offset: 101091},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3387, col: 55, offset: 101099},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3387, col: 74, offset: 101118},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3387, col: 93, offset: 101137},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3387, col: 101, offset: 101145},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3402, col: 3, offset: 101510},
						run: (*parser).callonAggLatestTime12,
						expr: &seqExpr{
							pos: position{line: 3402, col: 3, offset: 101510},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3402, col: 3, offset: 101510},
									val:        "latest_time",
									ignoreCase: false,
									want:       "\"latest_time\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3402, col: 17, offset: 101524},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3402, col: 25, offset: 101532},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3402, col: 31, offset: 101538},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3402, col: 41, offset: 101548},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggRate",
			pos:  position{line: 3412, col: 1, offset: 101743},
			expr: &choiceExpr{
				pos: position{line: 3412, col: 12, offset: 101754},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3412, col: 12, offset: 101754},
						run: (*parser).callonAggRate2,
						expr: &seqExpr{
							pos: position{line: 3412, col: 12, offset: 101754},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3412, col: 12, offset: 101754},
									val:        "rate",
									ignoreCase: false,
									want:       "\"rate\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3412, col: 19, offset: 101761},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3412, col: 27, offset: 101769},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3412, col: 34, offset: 101776},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3412, col: 42, offset: 101784},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3412, col: 61, offset: 101803},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3412, col: 80, offset: 101822},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3412, col: 88, offset: 101830},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3427, col: 3, offset: 102194},
						run: (*parser).callonAggRate12,
						expr: &seqExpr{
							pos: position{line: 3427, col: 3, offset: 102194},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3427, col: 3, offset: 102194},
									val:        "rate",
									ignoreCase: false,
									want:       "\"rate\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3427, col: 10, offset: 102201},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3427, col: 18, offset: 102209},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3427, col: 24, offset: 102215},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3427, col: 34, offset: 102225},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggValues",
			pos:  position{line: 3436, col: 1, offset: 102379},
			expr: &choiceExpr{
				pos: position{line: 3436, col: 14, offset: 102392},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3436, col: 14, offset: 102392},
						run: (*parser).callonAggValues2,
						expr: &seqExpr{
							pos: position{line: 3436, col: 14, offset: 102392},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3436, col: 14, offset: 102392},
									val:        "values",
									ignoreCase: false,
									want:       "\"values\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3436, col: 23, offset: 102401},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3436, col: 31, offset: 102409},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 3436, col: 38, offset: 102416},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3436, col: 48, offset: 102426},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3436, col: 58, offset: 102436},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3446, col: 3, offset: 102665},
						run: (*parser).callonAggValues10,
						expr: &seqExpr{
							pos: position{line: 3446, col: 3, offset: 102665},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3446, col: 3, offset: 102665},
									val:        "values",
									ignoreCase: false,
									want:       "\"values\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3446, col: 12, offset: 102674},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3446, col: 20, offset: 102682},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3446, col: 26, offset: 102688},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3446, col: 36, offset: 102698},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldWithNumberValue",
			pos:  position{line: 3455, col: 1, offset: 102849},
			expr: &actionExpr{
				pos: position{line: 3455, col: 25, offset: 102873},
				run: (*parser).callonFieldWithNumberValue1,
				expr: &labeledExpr{
					pos:   position{line: 3455, col: 25, offset: 102873},
					label: "keyValuePair",
					expr: &choiceExpr{
						pos: position{line: 3455, col: 39, offset: 102887},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3455, col: 39, offset: 102887},
								name: "NamedFieldWithNumberValue",
							},
							&ruleRefExpr{
								pos:  position{line: 3455, col: 67, offset: 102915},
								name: "UnnamedFieldWithNumberValue",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedFieldWithNumberValue",
			pos:  position{line: 3459, col: 1, offset: 102978},
			expr: &actionExpr{
				pos: position{line: 3459, col: 30, offset: 103007},
				run: (*parser).callonNamedFieldWithNumberValue1,
				expr: &seqExpr{
					pos: position{line: 3459, col: 30, offset: 103007},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3459, col: 30, offset: 103007},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 3459, col: 34, offset: 103011},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 3459, col: 44, offset: 103021},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 3459, col: 48, offset: 103025},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 3459, col: 48, offset: 103025},
										name: "EqualityOperator",
									},
									&ruleRefExpr{
										pos:  position{line: 3459, col: 67, offset: 103044},
										name: "InequalityOperator",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3459, col: 87, offset: 103064},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 3459, col: 93, offset: 103070},
								name: "Number",
							},
						},
					},
				},
			},
		},
		{
			name: "UnnamedFieldWithNumberValue",
			pos:  position{line: 3472, col: 1, offset: 103304},
			expr: &actionExpr{
				pos: position{line: 3472, col: 32, offset: 103335},
				run: (*parser).callonUnnamedFieldWithNumberValue1,
				expr: &labeledExpr{
					pos:   position{line: 3472, col: 32, offset: 103335},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 3472, col: 38, offset: 103341},
						name: "Number",
					},
				},
			},
		},
		{
			name: "FieldWithBooleanValue",
			pos:  position{line: 3485, col: 1, offset: 103558},
			expr: &actionExpr{
				pos: position{line: 3485, col: 26, offset: 103583},
				run: (*parser).callonFieldWithBooleanValue1,
				expr: &seqExpr{
					pos: position{line: 3485, col: 26, offset: 103583},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3485, col: 26, offset: 103583},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 3485, col: 30, offset: 103587},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 3485, col: 40, offset: 103597},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 3485, col: 43, offset: 103600},
								name: "EqualityOperator",
							},
						},
						&labeledExpr{
							pos:   position{line: 3485, col: 60, offset: 103617},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 3485, col: 66, offset: 103623},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldWithStringValue",
			pos:  position{line: 3498, col: 1, offset: 103858},
			expr: &actionExpr{
				pos: position{line: 3498, col: 25, offset: 103882},
				run: (*parser).callonFieldWithStringValue1,
				expr: &labeledExpr{
					pos:   position{line: 3498, col: 25, offset: 103882},
					label: "keyValuePair",
					expr: &choiceExpr{
						pos: position{line: 3498, col: 39, offset: 103896},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3498, col: 39, offset: 103896},
								name: "NamedFieldWithStringValue",
							},
							&ruleRefExpr{
								pos:  position{line: 3498, col: 67, offset: 103924},
								name: "UnnamedFieldWithStringValue",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedFieldWithStringValue",
			pos:  position{line: 3502, col: 1, offset: 103987},
			expr: &actionExpr{
				pos: position{line: 3502, col: 30, offset: 104016},
				run: (*parser).callonNamedFieldWithStringValue1,
				expr: &seqExpr{
					pos: position{line: 3502, col: 30, offset: 104016},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3502, col: 30, offset: 104016},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 3502, col: 34, offset: 104020},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 3502, col: 44, offset: 104030},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 3502, col: 47, offset: 104033},
								name: "EqualityOperator",
							},
						},
						&labeledExpr{
							pos:   position{line: 3502, col: 64, offset: 104050},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 3502, col: 70, offset: 104056},
								name: "String",
							},
						},
					},
				},
			},
		},
		{
			name: "UnnamedFieldWithStringValue",
			pos:  position{line: 3514, col: 1, offset: 104289},
			expr: &actionExpr{
				pos: position{line: 3514, col: 32, offset: 104320},
				run: (*parser).callonUnnamedFieldWithStringValue1,
				expr: &labeledExpr{
					pos:   position{line: 3514, col: 32, offset: 104320},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 3514, col: 38, offset: 104326},
						name: "String",
					},
				},
			},
		},
		{
			name: "FieldNameList",
			pos:  position{line: 3528, col: 1, offset: 104657},
			expr: &actionExpr{
				pos: position{line: 3528, col: 18, offset: 104674},
				run: (*parser).callonFieldNameList1,
				expr: &seqExpr{
					pos: position{line: 3528, col: 18, offset: 104674},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3528, col: 18, offset: 104674},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 3528, col: 24, offset: 104680},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 3528, col: 34, offset: 104690},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3528, col: 39, offset: 104695},
								expr: &seqExpr{
									pos: position{line: 3528, col: 40, offset: 104696},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 3528, col: 40, offset: 104696},
											name: "COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 3528, col: 46, offset: 104702},
											name: "FieldName",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeModifiers",
			pos:  position{line: 3545, col: 1, offset: 105197},
			expr: &choiceExpr{
				pos: position{line: 3545, col: 18, offset: 105214},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 3545, col: 18, offset: 105214},
						name: "EarliestAndLatest",
					},
					&ruleRefExpr{
						pos:  position{line: 3545, col: 38, offset: 105234},
						name: "EarliestOnly",
					},
				},
			},
		},
		{
			name: "EarliestAndLatest",
			pos:  position{line: 3547, col: 1, offset: 105248},
			expr: &actionExpr{
				pos: position{line: 3547, col: 22, offset: 105269},
				run: (*parser).callonEarliestAndLatest1,
				expr: &seqExpr{
					pos: position{line: 3547, col: 22, offset: 105269},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3547, col: 22, offset: 105269},
							name: "CMD_EARLIEST",
						},
						&ruleRefExpr{
							pos:  position{line: 3547, col: 35, offset: 105282},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3547, col: 41, offset: 105288},
							label: "earliestTime",
							expr: &choiceExpr{
								pos: position{line: 3547, col: 55, offset: 105302},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 3547, col: 55, offset: 105302},
										name: "AbsoluteTimestamp",
									},
									&ruleRefExpr{
										pos:  position{line: 3547, col: 75, offset: 105322},
										name: "RelativeTimestamp",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 3547, col: 94, offset: 105341},
							name: "SPACE",
						},
						&ruleRefExpr{
							pos:  position{line: 3547, col: 100, offset: 105347},
							name: "CMD_LATEST",
						},
						&ruleRefExpr{
							pos:  position{line: 3547, col: 111, offset: 105358},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3547, col: 117, offset: 105364},
							label: "latestTime",
							expr: &choiceExpr{
								pos: position{line: 3547, col: 129, offset: 105376},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 3547, col: 129, offset: 105376},
										name: "AbsoluteTimestamp",
									},
									&ruleRefExpr{
										pos:  position{line: 3547, col: 149, offset: 105396},
										name: "RelativeTimestamp",
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 3547, col: 168, offset: 105415},
							expr: &anyMatcher{
								line: 3547, col: 169, offset: 105416,
							},
						},
					},
				},
			},
		},
		{
			name: "EarliestOnly",
			pos:  position{line: 3578, col: 1, offset: 106148},
			expr: &actionExpr{
				pos: position{line: 3578, col: 17, offset: 106164},
				run: (*parser).callonEarliestOnly1,
				expr: &seqExpr{
					pos: position{line: 3578, col: 17, offset: 106164},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3578, col: 17, offset: 106164},
							name: "CMD_EARLIEST",
						},
						&ruleRefExpr{
							pos:  position{line: 3578, col: 30, offset: 106177},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3578, col: 36, offset: 106183},
							label: "earliestTime",
							expr: &choiceExpr{
								pos: position{line: 3578, col: 50, offset: 106197},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 3578, col: 50, offset: 106197},
										name: "AbsoluteTimestamp",
									},
									&ruleRefExpr{
										pos:  position{line: 3578, col: 70, offset: 106217},
										name: "RelativeTimestamp",
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 3578, col: 89, offset: 106236},
							expr: &anyMatcher{
								line: 3578, col: 90, offset: 106237,
							},
						},
					},
				},
			},
		},
		{
			name: "RelIntegerAsString",
			pos:  position{line: 3601, col: 1, offset: 106748},
			expr: &actionExpr{
				pos: position{line: 3601, col: 23, offset: 106770},
				run: (*parser).callonRelIntegerAsString1,
				expr: &seqExpr{
					pos: position{line: 3601, col: 23, offset: 106770},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 3601, col: 23, offset: 106770},
							val:        "[-+]",
							chars:      []rune{'-', '+'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 3601, col: 27, offset: 106774},
							expr: &charClassMatcher{
								pos:        position{line: 3601, col: 27, offset: 106774},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "WeekSnap",
			pos:  position{line: 3605, col: 1, offset: 106817},
			expr: &actionExpr{
				pos: position{line: 3605, col: 13, offset: 106829},
				run: (*parser).callonWeekSnap1,
				expr: &seqExpr{
					pos: position{line: 3605, col: 14, offset: 106830},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3605, col: 14, offset: 106830},
							val:        "w",
							ignoreCase: false,
							want:       "\"w\"",
						},
						&charClassMatcher{
							pos:        position{line: 3605, col: 17, offset: 106833},
							val:        "[0-7]",
							ranges:     []rune{'0', '7'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "RelTimeUnit",
			pos:  position{line: 3609, col: 1, offset: 106876},
			expr: &actionExpr{
				pos: position{line: 3609, col: 16, offset: 106891},
				run: (*parser).callonRelTimeUnit1,
				expr: &labeledExpr{
					pos:   position{line: 3609, col: 16, offset: 106891},
					label: "timeUnit",
					expr: &choiceExpr{
						pos: position{line: 3609, col: 26, offset: 106901},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3609, col: 26, offset: 106901},
								name: "Second",
							},
							&ruleRefExpr{
								pos:  position{line: 3609, col: 35, offset: 106910},
								name: "Month",
							},
							&ruleRefExpr{
								pos:  position{line: 3609, col: 43, offset: 106918},
								name: "Minute",
							},
							&ruleRefExpr{
								pos:  position{line: 3609, col: 52, offset: 106927},
								name: "Hour",
							},
							&ruleRefExpr{
								pos:  position{line: 3609, col: 59, offset: 106934},
								name: "Day",
							},
							&ruleRefExpr{
								pos:  position{line: 3609, col: 65, offset: 106940},
								name: "Week",
							},
							&ruleRefExpr{
								pos:  position{line: 3609, col: 72, offset: 106947},
								name: "Quarter",
							},
							&ruleRefExpr{
								pos:  position{line: 3609, col: 82, offset: 106957},
								name: "Year",
							},
						},
					},
				},
			},
		},
		{
			name: "Snap",
			pos:  position{line: 3613, col: 1, offset: 107029},
			expr: &actionExpr{
				pos: position{line: 3613, col: 9, offset: 107037},
				run: (*parser).callonSnap1,
				expr: &seqExpr{
					pos: position{line: 3613, col: 9, offset: 107037},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3613, col: 9, offset: 107037},
							val:        "@",
							ignoreCase: false,
							want:       "\"@\"",
						},
						&labeledExpr{
							pos:   position{line: 3613, col: 13, offset: 107041},
							label: "snap",
							expr: &choiceExpr{
								pos: position{line: 3613, col: 19, offset: 107047},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 3613, col: 19, offset: 107047},
										name: "WeekSnap",
									},
									&ruleRefExpr{
										pos:  position{line: 3613, col: 30, offset: 107058},
										name: "RelTimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Offset",
			pos:  position{line: 3617, col: 1, offset: 107106},
			expr: &actionExpr{
				pos: position{line: 3617, col: 11, offset: 107116},
				run: (*parser).callonOffset1,
				expr: &seqExpr{
					pos: position{line: 3617, col: 11, offset: 107116},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3617, col: 11, offset: 107116},
							label: "off",
							expr: &ruleRefExpr{
								pos:  position{line: 3617, col: 16, offset: 107121},
								name: "RelIntegerAsString",
							},
						},
						&labeledExpr{
							pos:   position{line: 3617, col: 36, offset: 107141},
							label: "tuOff",
							expr: &ruleRefExpr{
								pos:  position{line: 3617, col: 43, offset: 107148},
								name: "RelTimeUnit",
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeTimestamp",
			pos:  position{line: 3648, col: 1, offset: 108033},
			expr: &actionExpr{
				pos: position{line: 3648, col: 22, offset: 108054},
				run: (*parser).callonRelativeTimestamp1,
				expr: &seqExpr{
					pos: position{line: 3648, col: 22, offset: 108054},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3648, col: 22, offset: 108054},
							label: "defaultTime",
							expr: &zeroOrOneExpr{
								pos: position{line: 3648, col: 34, offset: 108066},
								expr: &choiceExpr{
									pos: position{line: 3648, col: 35, offset: 108067},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 3648, col: 35, offset: 108067},
											val:        "now",
											ignoreCase: false,
											want:       "\"now\"",
										},
										&litMatcher{
											pos:        position{line: 3648, col: 43, offset: 108075},
											val:        "1",
											ignoreCase: false,
											want:       "\"1\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3648, col: 49, offset: 108081},
							label: "offset",
							expr: &zeroOrOneExpr{
								pos: position{line: 3648, col: 56, offset: 108088},
								expr: &ruleRefExpr{
									pos:  position{line: 3648, col: 57, offset: 108089},
									name: "Offset",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3648, col: 66, offset: 108098},
							label: "snapParam",
							expr: &zeroOrOneExpr{
								pos: position{line: 3648, col: 76, offset: 108108},
								expr: &ruleRefExpr{
									pos:  position{line: 3648, col: 77, offset: 108109},
									name: "Snap",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AbsoluteTimestamp",
			pos:  position{line: 3692, col: 1, offset: 109289},
			expr: &actionExpr{
				pos: position{line: 3692, col: 22, offset: 109310},
				run: (*parser).callonAbsoluteTimestamp1,
				expr: &seqExpr{
					pos: position{line: 3692, col: 22, offset: 109310},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 3692, col: 22, offset: 109310},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 3692, col: 27, offset: 109315},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 3692, col: 33, offset: 109321},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&charClassMatcher{
							pos:        position{line: 3692, col: 37, offset: 109325},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 3692, col: 42, offset: 109330},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 3692, col: 48, offset: 109336},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&charClassMatcher{
							pos:        position{line: 3692, col: 52, offset: 109340},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 3692, col: 57, offset: 109345},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 3692, col: 62, offset: 109350},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 3692, col: 67, offset: 109355},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 3692, col: 73, offset: 109361},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&charClassMatcher{
							pos:        position{line: 3692, col: 77, offset: 109365},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 3692, col: 82, offset: 109370},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 3692, col: 88, offset: 109376},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&charClassMatcher{
							pos:        position{line: 3692, col: 92, offset: 109380},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 3692, col: 97, offset: 109385},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 3692, col: 103, offset: 109391},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&charClassMatcher{
							pos:        position{line: 3692, col: 107, offset: 109395},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 3692, col: 112, offset: 109400},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 3702, col: 1, offset: 109796},
			expr: &actionExpr{
				pos: position{line: 3702, col: 14, offset: 109809},
				run: (*parser).callonFieldName1,
				expr: &seqExpr{
					pos: position{line: 3702, col: 14, offset: 109809},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 3702, col: 14, offset: 109809},
							val:        "[a-zA-Z0-9:*]",
							chars:      []rune{':', '*'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 3702, col: 27, offset: 109822},
							expr: &charClassMatcher{
								pos:        position{line: 3702, col: 27, offset: 109822},
								val:        "[a-zA-Z0-9:_.*]",
								chars:      []rune{':', '_', '.', '*'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "FieldNameStartWith_",
			pos:  position{line: 3706, col: 1, offset: 109875},
			expr: &actionExpr{
				pos: position{line: 3706, col: 24, offset: 109898},
				run: (*parser).callonFieldNameStartWith_1,
				expr: &seqExpr{
					pos: position{line: 3706, col: 24, offset: 109898},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 3706, col: 24, offset: 109898},
							val:        "[a-zA-Z0-9:_.*]",
							chars:      []rune{':', '_', '.', '*'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 3706, col: 39, offset: 109913},
							expr: &charClassMatcher{
								pos:        position{line: 3706, col: 39, offset: 109913},
								val:        "[a-zA-Z0-9:_.*]",
								chars:      []rune{':', '_', '.', '*'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "String",
			pos:  position{line: 3710, col: 1, offset: 109966},
			expr: &actionExpr{
				pos: position{line: 3710, col: 11, offset: 109976},
				run: (*parser).callonString1,
				expr: &labeledExpr{
					pos:   position{line: 3710, col: 11, offset: 109976},
					label: "str",
					expr: &choiceExpr{
						pos: position{line: 3710, col: 16, offset: 109981},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3710, col: 16, offset: 109981},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 3710, col: 31, offset: 109996},
								name: "UnquotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 3714, col: 1, offset: 110037},
			expr: &actionExpr{
				pos: position{line: 3714, col: 17, offset: 110053},
				run: (*parser).callonQuotedString1,
				expr: &seqExpr{
					pos: position{line: 3714, col: 17, offset: 110053},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3714, col: 17, offset: 110053},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 3714, col: 21, offset: 110057},
							expr: &charClassMatcher{
								pos:        position{line: 3714, col: 21, offset: 110057},
								val:        "[^\"]",
								chars:      []rune{'"'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 3714, col: 27, offset: 110063},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UnquotedString",
			pos:  position{line: 3719, col: 1, offset: 110174},
			expr: &actionExpr{
				pos: position{line: 3719, col: 19, offset: 110192},
				run: (*parser).callonUnquotedString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 3719, col: 19, offset: 110192},
					expr: &choiceExpr{
						pos: position{line: 3719, col: 20, offset: 110193},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 3719, col: 20, offset: 110193},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&seqExpr{
								pos: position{line: 3719, col: 27, offset: 110200},
								exprs: []any{
									&notExpr{
										pos: position{line: 3719, col: 27, offset: 110200},
										expr: &choiceExpr{
											pos: position{line: 3719, col: 29, offset: 110202},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 3719, col: 29, offset: 110202},
													name: "MAJOR_BREAK",
												},
												&litMatcher{
													pos:        position{line: 3719, col: 43, offset: 110216},
													val:        "|",
													ignoreCase: false,
													want:       "\"|\"",
												},
												&ruleRefExpr{
													pos:  position{line: 3719, col: 49, offset: 110222},
													name: "EOF",
												},
											},
										},
									},
									&anyMatcher{
										line: 3719, col: 54, offset: 110227,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AllowedChar",
			pos:  position{line: 3726, col: 1, offset: 110342},
			expr: &choiceExpr{
				pos: position{line: 3726, col: 16, offset: 110357},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 3726, col: 16, offset: 110357},
						val:        "[a-zA-Z0-9:_{}@.]",
						chars:      []rune{':', '_', '{', '}', '@', '.'},
						ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&seqExpr{
						pos: position{line: 3726, col: 37, offset: 110378},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 3726, col: 37, offset: 110378},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 3726, col: 41, offset: 110382},
								expr: &charClassMatcher{
									pos:        position{line: 3726, col: 41, offset: 110382},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&litMatcher{
								pos:        position{line: 3726, col: 48, offset: 110389},
								val:        "}",
								ignoreCase: false,
								want:       "\"}\"",
							},
						},
					},
				},
			},
		},
		{
			name: "UnquotedStringWithTemplateWildCard",
			pos:  position{line: 3728, col: 1, offset: 110395},
			expr: &actionExpr{
				pos: position{line: 3728, col: 39, offset: 110433},
				run: (*parser).callonUnquotedStringWithTemplateWildCard1,
				expr: &oneOrMoreExpr{
					pos: position{line: 3728, col: 39, offset: 110433},
					expr: &choiceExpr{
						pos: position{line: 3728, col: 40, offset: 110434},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3728, col: 40, offset: 110434},
								name: "AllowedChar",
							},
							&seqExpr{
								pos: position{line: 3728, col: 54, offset: 110448},
								exprs: []any{
									&notExpr{
										pos: position{line: 3728, col: 54, offset: 110448},
										expr: &choiceExpr{
											pos: position{line: 3728, col: 56, offset: 110450},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 3728, col: 56, offset: 110450},
													name: "MAJOR_BREAK",
												},
												&litMatcher{
													pos:        position{line: 3728, col: 70, offset: 110464},
													val:        "|",
													ignoreCase: false,
													want:       "\"|\"",
												},
												&ruleRefExpr{
													pos:  position{line: 3728, col: 76, offset: 110470},
													name: "EOF",
												},
											},
										},
									},
									&anyMatcher{
										line: 3728, col: 81, offset: 110475,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Boolean",
			pos:  position{line: 3732, col: 1, offset: 110515},
			expr: &actionExpr{
				pos: position{line: 3732, col: 12, offset: 110526},
				run: (*parser).callonBoolean1,
				expr: &choiceExpr{
					pos: position{line: 3732, col: 13, offset: 110527},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3732, col: 13, offset: 110527},
							val:        "true",
							ignoreCase: false,
							want:       "\"true\"",
						},
						&litMatcher{
							pos:        position{line: 3732, col: 22, offset: 110536},
							val:        "false",
							ignoreCase: false,
							want:       "\"false\"",
						},
					},
				},
			},
		},
		{
			name: "RenamePattern",
			pos:  position{line: 3738, col: 1, offset: 110690},
			expr: &actionExpr{
				pos: position{line: 3738, col: 18, offset: 110707},
				run: (*parser).callonRenamePattern1,
				expr: &oneOrMoreExpr{
					pos: position{line: 3738, col: 18, offset: 110707},
					expr: &charClassMatcher{
						pos:        position{line: 3738, col: 18, offset: 110707},
						val:        "[a-zA-Z0-9_*]",
						chars:      []rune{'_', '*'},
						ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 3742, col: 1, offset: 110758},
			expr: &actionExpr{
				pos: position{line: 3742, col: 11, offset: 110768},
				run: (*parser).callonNumber1,
				expr: &labeledExpr{
					pos:   position{line: 3742, col: 11, offset: 110768},
					label: "number",
					expr: &ruleRefExpr{
						pos:  position{line: 3742, col: 18, offset: 110775},
						name: "NumberAsString",
					},
				},
			},
		},
		{
			name: "NumberAsString",
			pos:  position{line: 3748, col: 1, offset: 110964},
			expr: &actionExpr{
				pos: position{line: 3748, col: 19, offset: 110982},
				run: (*parser).callonNumberAsString1,
				expr: &seqExpr{
					pos: position{line: 3748, col: 19, offset: 110982},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3748, col: 19, offset: 110982},
							label: "number",
							expr: &choiceExpr{
								pos: position{line: 3748, col: 27, offset: 110990},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 3748, col: 27, offset: 110990},
										name: "FloatAsString",
									},
									&ruleRefExpr{
										pos:  position{line: 3748, col: 43, offset: 111006},
										name: "IntegerAsString",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 3748, col: 60, offset: 111023},
							expr: &choiceExpr{
								pos: position{line: 3748, col: 62, offset: 111025},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 3748, col: 62, offset: 111025},
										name: "SPACE",
									},
									&litMatcher{
										pos:        position{line: 3748, col: 70, offset: 111033},
										val:        "|",
										ignoreCase: false,
										want:       "\"|\"",
									},
									&litMatcher{
										pos:        position{line: 3748, col: 76, offset: 111039},
										val:        ")",
										ignoreCase: false,
										want:       "\")\"",
									},
									&litMatcher{
										pos:        position{line: 3748, col: 82, offset: 111045},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&ruleRefExpr{
										pos:  position{line: 3748, col: 88, offset: 111051},
										name: "EOF",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FloatAsString",
			pos:  position{line: 3754, col: 1, offset: 111180},
			expr: &actionExpr{
				pos: position{line: 3754, col: 18, offset: 111197},
				run: (*parser).callonFloatAsString1,
				expr: &seqExpr{
					pos: position{line: 3754, col: 18, offset: 111197},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 3754, col: 18, offset: 111197},
							expr: &charClassMatcher{
								pos:        position{line: 3754, col: 18, offset: 111197},
								val:        "[-+]",
								chars:      []rune{'-', '+'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 3754, col: 24, offset: 111203},
							expr: &charClassMatcher{
								pos:        position{line: 3754, col: 24, offset: 111203},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 3754, col: 31, offset: 111210},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 3754, col: 35, offset: 111214},
							expr: &charClassMatcher{
								pos:        position{line: 3754, col: 35, offset: 111214},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "IntegerAsString",
			pos:  position{line: 3759, col: 1, offset: 111309},
			expr: &actionExpr{
				pos: position{line: 3759, col: 20, offset: 111328},
				run: (*parser).callonIntegerAsString1,
				expr: &seqExpr{
					pos: position{line: 3759, col: 20, offset: 111328},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 3759, col: 20, offset: 111328},
							expr: &charClassMatcher{
								pos:        position{line: 3759, col: 20, offset: 111328},
								val:        "[-+]",
								chars:      []rune{'-', '+'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 3759, col: 26, offset: 111334},
							expr: &charClassMatcher{
								pos:        position{line: 3759, col: 26, offset: 111334},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 3763, col: 1, offset: 111377},
			expr: &actionExpr{
				pos: position{line: 3763, col: 21, offset: 111397},
				run: (*parser).callonEqualityOperator1,
				expr: &seqExpr{
					pos: position{line: 3763, col: 21, offset: 111397},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3763, col: 21, offset: 111397},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 3763, col: 36, offset: 111412},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 3763, col: 40, offset: 111416},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 3763, col: 40, offset: 111416},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
									&litMatcher{
										pos:        position{line: 3763, col: 46, offset: 111422},
										val:        "!=",
										ignoreCase: false,
										want:       "\"!=\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 3763, col: 52, offset: 111428},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "InequalityOperator",
			pos:  position{line: 3771, col: 1, offset: 111609},
			expr: &actionExpr{
				pos: position{line: 3771, col: 23, offset: 111631},
				run: (*parser).callonInequalityOperator1,
				expr: &seqExpr{
					pos: position{line: 3771, col: 23, offset: 111631},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3771, col: 23, offset: 111631},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 3771, col: 38, offset: 111646},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 3771, col: 42, offset: 111650},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 3771, col: 42, offset: 111650},
										val:        "<=",
										ignoreCase: false,
										want:       "\"<=\"",
									},
									&litMatcher{
										pos:        position{line: 3771, col: 49, offset: 111657},
										val:        "<",
										ignoreCase: false,
										want:       "\"<\"",
									},
									&litMatcher{
										pos:        position{line: 3771, col: 55, offset: 111663},
										val:        ">=",
										ignoreCase: false,
										want:       "\">=\"",
									},
									&litMatcher{
										pos:        position{line: 3771, col: 62, offset: 111670},
										val:        ">",
										ignoreCase: false,
										want:       "\">\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 3771, col: 67, offset: 111675},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "EqualityOrInequality",
			pos:  position{line: 3779, col: 1, offset: 111858},
			expr: &choiceExpr{
				pos: position{line: 3779, col: 25, offset: 111882},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3779, col: 25, offset: 111882},
						run: (*parser).callonEqualityOrInequality2,
						expr: &labeledExpr{
							pos:   position{line: 3779, col: 25, offset: 111882},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 3779, col: 28, offset: 111885},
								name: "EqualityOperator",
							},
						},
					},
					&actionExpr{
						pos: position{line: 3782, col: 3, offset: 111927},
						run: (*parser).callonEqualityOrInequality5,
						expr: &labeledExpr{
							pos:   position{line: 3782, col: 3, offset: 111927},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 3782, col: 6, offset: 111930},
								name: "InequalityOperator",
							},
						},
					},
				},
			},
		},
		{
			name: "OpPlus",
			pos:  position{line: 3786, col: 1, offset: 111973},
			expr: &actionExpr{
				pos: position{line: 3786, col: 11, offset: 111983},
				run: (*parser).callonOpPlus1,
				expr: &seqExpr{
					pos: position{line: 3786, col: 11, offset: 111983},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3786, col: 11, offset: 111983},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 3786, col: 26, offset: 111998},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3786, col: 30, offset: 112002},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpMinus",
			pos:  position{line: 3790, col: 1, offset: 112042},
			expr: &actionExpr{
				pos: position{line: 3790, col: 12, offset: 112053},
				run: (*parser).callonOpMinus1,
				expr: &seqExpr{
					pos: position{line: 3790, col: 12, offset: 112053},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3790, col: 12, offset: 112053},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 3790, col: 27, offset: 112068},
							val:        "-",
							ignoreCase: false,
							want:       "\"-\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3790, col: 31, offset: 112072},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpMul",
			pos:  position{line: 3794, col: 1, offset: 112112},
			expr: &actionExpr{
				pos: position{line: 3794, col: 10, offset: 112121},
				run: (*parser).callonOpMul1,
				expr: &seqExpr{
					pos: position{line: 3794, col: 10, offset: 112121},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3794, col: 10, offset: 112121},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 3794, col: 25, offset: 112136},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3794, col: 29, offset: 112140},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpDiv",
			pos:  position{line: 3798, col: 1, offset: 112180},
			expr: &actionExpr{
				pos: position{line: 3798, col: 10, offset: 112189},
				run: (*parser).callonOpDiv1,
				expr: &seqExpr{
					pos: position{line: 3798, col: 10, offset: 112189},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3798, col: 10, offset: 112189},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 3798, col: 25, offset: 112204},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3798, col: 29, offset: 112208},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "Second",
			pos:  position{line: 3803, col: 1, offset: 112272},
			expr: &actionExpr{
				pos: position{line: 3803, col: 11, offset: 112282},
				run: (*parser).callonSecond1,
				expr: &choiceExpr{
					pos: position{line: 3803, col: 12, offset: 112283},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3803, col: 12, offset: 112283},
							val:        "seconds",
							ignoreCase: false,
							want:       "\"seconds\"",
						},
						&litMatcher{
							pos:        position{line: 3803, col: 24, offset: 112295},
							val:        "second",
							ignoreCase: false,
							want:       "\"second\"",
						},
						&litMatcher{
							pos:        position{line: 3803, col: 35, offset: 112306},
							val:        "secs",
							ignoreCase: false,
							want:       "\"secs\"",
						},
						&litMatcher{
							pos:        position{line: 3803, col: 44, offset: 112315},
							val:        "sec",
							ignoreCase: false,
							want:       "\"sec\"",
						},
						&litMatcher{
							pos:        position{line: 3803, col: 52, offset: 112323},
							val:        "s",
							ignoreCase: false,
							want:       "\"s\"",
						},
					},
				},
			},
		},
		{
			name: "Minute",
			pos:  position{line: 3807, col: 1, offset: 112364},
			expr: &actionExpr{
				pos: position{line: 3807, col: 11, offset: 112374},
				run: (*parser).callonMinute1,
				expr: &choiceExpr{
					pos: position{line: 3807, col: 12, offset: 112375},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3807, col: 12, offset: 112375},
							val:        "minutes",
							ignoreCase: false,
							want:       "\"minutes\"",
						},
						&litMatcher{
							pos:        position{line: 3807, col: 24, offset: 112387},
							val:        "minute",
							ignoreCase: false,
							want:       "\"minute\"",
						},
						&litMatcher{
							pos:        position{line: 3807, col: 35, offset: 112398},
							val:        "mins",
							ignoreCase: false,
							want:       "\"mins\"",
						},
						&litMatcher{
							pos:        position{line: 3807, col: 44, offset: 112407},
							val:        "min",
							ignoreCase: false,
							want:       "\"min\"",
						},
						&litMatcher{
							pos:        position{line: 3807, col: 52, offset: 112415},
							val:        "m",
							ignoreCase: false,
							want:       "\"m\"",
						},
					},
				},
			},
		},
		{
			name: "Hour",
			pos:  position{line: 3811, col: 1, offset: 112456},
			expr: &actionExpr{
				pos: position{line: 3811, col: 9, offset: 112464},
				run: (*parser).callonHour1,
				expr: &choiceExpr{
					pos: position{line: 3811, col: 10, offset: 112465},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3811, col: 10, offset: 112465},
							val:        "hours",
							ignoreCase: false,
							want:       "\"hours\"",
						},
						&litMatcher{
							pos:        position{line: 3811, col: 20, offset: 112475},
							val:        "hour",
							ignoreCase: false,
							want:       "\"hour\"",
						},
						&litMatcher{
							pos:        position{line: 3811, col: 29, offset: 112484},
							val:        "hrs",
							ignoreCase: false,
							want:       "\"hrs\"",
						},
						&litMatcher{
							pos:        position{line: 3811, col: 37, offset: 112492},
							val:        "hr",
							ignoreCase: false,
							want:       "\"hr\"",
						},
						&litMatcher{
							pos:        position{line: 3811, col: 44, offset: 112499},
							val:        "h",
							ignoreCase: false,
							want:       "\"h\"",
						},
					},
				},
			},
		},
		{
			name: "Day",
			pos:  position{line: 3815, col: 1, offset: 112538},
			expr: &actionExpr{
				pos: position{line: 3815, col: 8, offset: 112545},
				run: (*parser).callonDay1,
				expr: &choiceExpr{
					pos: position{line: 3815, col: 9, offset: 112546},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3815, col: 9, offset: 112546},
							val:        "days",
							ignoreCase: false,
							want:       "\"days\"",
						},
						&litMatcher{
							pos:        position{line: 3815, col: 18, offset: 112555},
							val:        "day",
							ignoreCase: false,
							want:       "\"day\"",
						},
						&litMatcher{
							pos:        position{line: 3815, col: 26, offset: 112563},
							val:        "d",
							ignoreCase: false,
							want:       "\"d\"",
						},
					},
				},
			},
		},
		{
			name: "Week",
			pos:  position{line: 3819, col: 1, offset: 112601},
			expr: &actionExpr{
				pos: position{line: 3819, col: 9, offset: 112609},
				run: (*parser).callonWeek1,
				expr: &choiceExpr{
					pos: position{line: 3819, col: 10, offset: 112610},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3819, col: 10, offset: 112610},
							val:        "weeks",
							ignoreCase: false,
							want:       "\"weeks\"",
						},
						&litMatcher{
							pos:        position{line: 3819, col: 20, offset: 112620},
							val:        "week",
							ignoreCase: false,
							want:       "\"week\"",
						},
						&litMatcher{
							pos:        position{line: 3819, col: 29, offset: 112629},
							val:        "w",
							ignoreCase: false,
							want:       "\"w\"",
						},
					},
				},
			},
		},
		{
			name: "Month",
			pos:  position{line: 3823, col: 1, offset: 112668},
			expr: &actionExpr{
				pos: position{line: 3823, col: 10, offset: 112677},
				run: (*parser).callonMonth1,
				expr: &choiceExpr{
					pos: position{line: 3823, col: 11, offset: 112678},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3823, col: 11, offset: 112678},
							val:        "months",
							ignoreCase: false,
							want:       "\"months\"",
						},
						&litMatcher{
							pos:        position{line: 3823, col: 22, offset: 112689},
							val:        "month",
							ignoreCase: false,
							want:       "\"month\"",
						},
						&litMatcher{
							pos:        position{line: 3823, col: 32, offset: 112699},
							val:        "mon",
							ignoreCase: false,
							want:       "\"mon\"",
						},
					},
				},
			},
		},
		{
			name: "Quarter",
			pos:  position{line: 3827, col: 1, offset: 112741},
			expr: &actionExpr{
				pos: position{line: 3827, col: 12, offset: 112752},
				run: (*parser).callonQuarter1,
				expr: &choiceExpr{
					pos: position{line: 3827, col: 13, offset: 112753},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3827, col: 13, offset: 112753},
							val:        "quarters",
							ignoreCase: false,
							want:       "\"quarters\"",
						},
						&litMatcher{
							pos:        position{line: 3827, col: 26, offset: 112766},
							val:        "quarter",
							ignoreCase: false,
							want:       "\"quarter\"",
						},
						&litMatcher{
							pos:        position{line: 3827, col: 38, offset: 112778},
							val:        "qtrs",
							ignoreCase: false,
							want:       "\"qtrs\"",
						},
						&litMatcher{
							pos:        position{line: 3827, col: 47, offset: 112787},
							val:        "qtr",
							ignoreCase: false,
							want:       "\"qtr\"",
						},
						&litMatcher{
							pos:        position{line: 3827, col: 55, offset: 112795},
							val:        "q",
							ignoreCase: false,
							want:       "\"q\"",
						},
					},
				},
			},
		},
		{
			name: "Year",
			pos:  position{line: 3831, col: 1, offset: 112837},
			expr: &actionExpr{
				pos: position{line: 3831, col: 9, offset: 112845},
				run: (*parser).callonYear1,
				expr: &choiceExpr{
					pos: position{line: 3831, col: 10, offset: 112846},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3831, col: 10, offset: 112846},
							val:        "years",
							ignoreCase: false,
							want:       "\"years\"",
						},
						&litMatcher{
							pos:        position{line: 3831, col: 20, offset: 112856},
							val:        "year",
							ignoreCase: false,
							want:       "\"year\"",
						},
						&litMatcher{
							pos:        position{line: 3831, col: 29, offset: 112865},
							val:        "yrs",
							ignoreCase: false,
							want:       "\"yrs\"",
						},
						&litMatcher{
							pos:        position{line: 3831, col: 37, offset: 112873},
							val:        "yr",
							ignoreCase: false,
							want:       "\"yr\"",
						},
						&litMatcher{
							pos:        position{line: 3831, col: 44, offset: 112880},
							val:        "y",
							ignoreCase: false,
							want:       "\"y\"",
						},
					},
				},
			},
		},
		{
			name: "Subseconds",
			pos:  position{line: 3836, col: 1, offset: 113011},
			expr: &actionExpr{
				pos: position{line: 3836, col: 15, offset: 113025},
				run: (*parser).callonSubseconds1,
				expr: &choiceExpr{
					pos: position{line: 3836, col: 16, offset: 113026},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3836, col: 16, offset: 113026},
							val:        "us",
							ignoreCase: false,
							want:       "\"us\"",
						},
						&litMatcher{
							pos:        position{line: 3836, col: 23, offset: 113033},
							val:        "ms",
							ignoreCase: false,
							want:       "\"ms\"",
						},
						&litMatcher{
							pos:        position{line: 3836, col: 30, offset: 113040},
							val:        "cs",
							ignoreCase: false,
							want:       "\"cs\"",
						},
						&litMatcher{
							pos:        position{line: 3836, col: 37, offset: 113047},
							val:        "ds",
							ignoreCase: false,
							want:       "\"ds\"",
						},
					},
				},
			},
		},
		{
			name: "TransactionBlock",
			pos:  position{line: 3845, col: 1, offset: 113270},
			expr: &actionExpr{
				pos: position{line: 3845, col: 21, offset: 113290},
				run: (*parser).callonTransactionBlock1,
				expr: &seqExpr{
					pos: position{line: 3845, col: 21, offset: 113290},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3845, col: 21, offset: 113290},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 3845, col: 26, offset: 113295},
							name: "CMD_TRANSACTION",
						},
						&labeledExpr{
							pos:   position{line: 3845, col: 42, offset: 113311},
							label: "txnOptions",
							expr: &ruleRefExpr{
								pos:  position{line: 3845, col: 53, offset: 113322},
								name: "TransactionOptions",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionOptions",
			pos:  position{line: 3854, col: 1, offset: 113628},
			expr: &actionExpr{
				pos: position{line: 3854, col: 23, offset: 113650},
				run: (*parser).callonTransactionOptions1,
				expr: &labeledExpr{
					pos:   position{line: 3854, col: 23, offset: 113650},
					label: "txnOptions",
					expr: &zeroOrOneExpr{
						pos: position{line: 3854, col: 34, offset: 113661},
						expr: &ruleRefExpr{
							pos:  position{line: 3854, col: 34, offset: 113661},
							name: "TransactionDefinitionOptionsList",
						},
					},
				},
			},
		},
		{
			name: "TransactionDefinitionOptionsList",
			pos:  position{line: 3869, col: 1, offset: 114052},
			expr: &actionExpr{
				pos: position{line: 3869, col: 37, offset: 114088},
				run: (*parser).callonTransactionDefinitionOptionsList1,
				expr: &seqExpr{
					pos: position{line: 3869, col: 37, offset: 114088},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3869, col: 37, offset: 114088},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 3869, col: 43, offset: 114094},
								name: "TransactionDefinitionOption",
							},
						},
						&labeledExpr{
							pos:   position{line: 3869, col: 71, offset: 114122},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3869, col: 76, offset: 114127},
								expr: &seqExpr{
									pos: position{line: 3869, col: 77, offset: 114128},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 3869, col: 77, offset: 114128},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 3869, col: 83, offset: 114134},
											name: "TransactionDefinitionOption",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionDefinitionOption",
			pos:  position{line: 3904, col: 1, offset: 115123},
			expr: &actionExpr{
				pos: position{line: 3904, col: 32, offset: 115154},
				run: (*parser).callonTransactionDefinitionOption1,
				expr: &labeledExpr{
					pos:   position{line: 3904, col: 32, offset: 115154},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 3904, col: 40, offset: 115162},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3904, col: 40, offset: 115162},
								name: "SpaceSeparatedFieldNameList",
							},
							&ruleRefExpr{
								pos:  position{line: 3904, col: 70, offset: 115192},
								name: "StartsWithOption",
							},
							&ruleRefExpr{
								pos:  position{line: 3904, col: 89, offset: 115211},
								name: "EndsWithOption",
							},
						},
					},
				},
			},
		},
		{
			name: "SpaceSeparatedFieldNameList",
			pos:  position{line: 3910, col: 1, offset: 115357},
			expr: &actionExpr{
				pos: position{line: 3910, col: 32, offset: 115388},
				run: (*parser).callonSpaceSeparatedFieldNameList1,
				expr: &seqExpr{
					pos: position{line: 3910, col: 32, offset: 115388},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3910, col: 32, offset: 115388},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 3910, col: 38, offset: 115394},
								name: "FieldName",
							},
						},
						&notExpr{
							pos: position{line: 3910, col: 48, offset: 115404},
							expr: &ruleRefExpr{
								pos:  position{line: 3910, col: 50, offset: 115406},
								name: "EQUAL",
							},
						},
						&labeledExpr{
							pos:   position{line: 3910, col: 57, offset: 115413},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3910, col: 62, offset: 115418},
								expr: &seqExpr{
									pos: position{line: 3910, col: 63, offset: 115419},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 3910, col: 63, offset: 115419},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 3910, col: 69, offset: 115425},
											name: "FieldName",
										},
										&notExpr{
											pos: position{line: 3910, col: 79, offset: 115435},
											expr: &ruleRefExpr{
												pos:  position{line: 3910, col: 81, offset: 115437},
												name: "EQUAL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StartsWithOption",
			pos:  position{line: 3928, col: 1, offset: 115861},
			expr: &actionExpr{
				pos: position{line: 3928, col: 21, offset: 115881},
				run: (*parser).callonStartsWithOption1,
				expr: &seqExpr{
					pos: position{line: 3928, col: 21, offset: 115881},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3928, col: 21, offset: 115881},
							val:        "startswith",
							ignoreCase: false,
							want:       "\"startswith\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3928, col: 34, offset: 115894},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3928, col: 40, offset: 115900},
							label: "strExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 3928, col: 48, offset: 115908},
								name: "TransactionFilterString",
							},
						},
					},
				},
			},
		},
		{
			name: "EndsWithOption",
			pos:  position{line: 3938, col: 1, offset: 116146},
			expr: &actionExpr{
				pos: position{line: 3938, col: 19, offset: 116164},
				run: (*parser).callonEndsWithOption1,
				expr: &seqExpr{
					pos: position{line: 3938, col: 19, offset: 116164},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3938, col: 19, offset: 116164},
							val:        "endswith",
							ignoreCase: false,
							want:       "\"endswith\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3938, col: 30, offset: 116175},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3938, col: 36, offset: 116181},
							label: "strExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 3938, col: 44, offset: 116189},
								name: "TransactionFilterString",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionFilterString",
			pos:  position{line: 3949, col: 1, offset: 116458},
			expr: &actionExpr{
				pos: position{line: 3949, col: 28, offset: 116485},
				run: (*parser).callonTransactionFilterString1,
				expr: &labeledExpr{
					pos:   position{line: 3949, col: 28, offset: 116485},
					label: "strExpr",
					expr: &choiceExpr{
						pos: position{line: 3949, col: 37, offset: 116494},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3949, col: 37, offset: 116494},
								name: "TransactionQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 3949, col: 63, offset: 116520},
								name: "TransactionEval",
							},
							&ruleRefExpr{
								pos:  position{line: 3949, col: 81, offset: 116538},
								name: "TransactionSearch",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionQuotedString",
			pos:  position{line: 3953, col: 1, offset: 116586},
			expr: &actionExpr{
				pos: position{line: 3953, col: 28, offset: 116613},
				run: (*parser).callonTransactionQuotedString1,
				expr: &labeledExpr{
					pos:   position{line: 3953, col: 28, offset: 116613},
					label: "str",
					expr: &choiceExpr{
						pos: position{line: 3953, col: 33, offset: 116618},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3953, col: 33, offset: 116618},
								name: "TransactionQuotedStringValue",
							},
							&ruleRefExpr{
								pos:  position{line: 3953, col: 64, offset: 116649},
								name: "TransactionQuotedStringSearchExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionQuotedStringSearchExpr",
			pos:  position{line: 3957, col: 1, offset: 116709},
			expr: &actionExpr{
				pos: position{line: 3957, col: 38, offset: 116746},
				run: (*parser).callonTransactionQuotedStringSearchExpr1,
				expr: &seqExpr{
					pos: position{line: 3957, col: 38, offset: 116746},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3957, col: 38, offset: 116746},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 3957, col: 42, offset: 116750},
							label: "searchClause",
							expr: &ruleRefExpr{
								pos:  position{line: 3957, col: 55, offset: 116763},
								name: "ClauseLevel4",
							},
						},
						&litMatcher{
							pos:        position{line: 3957, col: 68, offset: 116776},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedStringNoOp",
			pos:  position{line: 3965, col: 1, offset: 116915},
			expr: &actionExpr{
				pos: position{line: 3965, col: 21, offset: 116935},
				run: (*parser).callonQuotedStringNoOp1,
				expr: &seqExpr{
					pos: position{line: 3965, col: 21, offset: 116935},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3965, col: 21, offset: 116935},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 3965, col: 25, offset: 116939},
							expr: &charClassMatcher{
								pos:        position{line: 3965, col: 25, offset: 116939},
								val:        "[^\" !(OR / AND)]",
								chars:      []rune{'"', ' ', '!', '(', 'O', 'R', ' ', '/', ' ', 'A', 'N', 'D', ')'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 3965, col: 44, offset: 116958},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "TransactionQuotedStringValue",
			pos:  position{line: 3970, col: 1, offset: 117069},
			expr: &actionExpr{
				pos: position{line: 3970, col: 33, offset: 117101},
				run: (*parser).callonTransactionQuotedStringValue1,
				expr: &labeledExpr{
					pos:   position{line: 3970, col: 33, offset: 117101},
					label: "str",
					expr: &ruleRefExpr{
						pos:  position{line: 3970, col: 37, offset: 117105},
						name: "QuotedStringNoOp",
					},
				},
			},
		},
		{
			name: "TransactionSearch",
			pos:  position{line: 3978, col: 1, offset: 117260},
			expr: &actionExpr{
				pos: position{line: 3978, col: 22, offset: 117281},
				run: (*parser).callonTransactionSearch1,
				expr: &labeledExpr{
					pos:   position{line: 3978, col: 22, offset: 117281},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 3978, col: 27, offset: 117286},
						name: "ClauseLevel1",
					},
				},
			},
		},
		{
			name: "TransactionEval",
			pos:  position{line: 3988, col: 1, offset: 117458},
			expr: &actionExpr{
				pos: position{line: 3988, col: 20, offset: 117477},
				run: (*parser).callonTransactionEval1,
				expr: &seqExpr{
					pos: position{line: 3988, col: 20, offset: 117477},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3988, col: 20, offset: 117477},
							val:        "eval",
							ignoreCase: false,
							want:       "\"eval\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3988, col: 27, offset: 117484},
							name: "EMPTY_OR_SPACE",
						},
						&ruleRefExpr{
							pos:  position{line: 3988, col: 42, offset: 117499},
							name: "L_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 3988, col: 50, offset: 117507},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 3988, col: 60, offset: 117517},
								name: "BoolExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 3988, col: 69, offset: 117526},
							name: "R_PAREN",
						},
					},
				},
			},
		},
		{
			name: "MultiValueBlock",
			pos:  position{line: 3998, col: 1, offset: 117829},
			expr: &actionExpr{
				pos: position{line: 3998, col: 20, offset: 117848},
				run: (*parser).callonMultiValueBlock1,
				expr: &seqExpr{
					pos: position{line: 3998, col: 20, offset: 117848},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3998, col: 20, offset: 117848},
							name: "PIPE",
						},
						&labeledExpr{
							pos:   position{line: 3998, col: 25, offset: 117853},
							label: "mvQueryAggNode",
							expr: &ruleRefExpr{
								pos:  position{line: 3998, col: 42, offset: 117870},
								name: "MakeMVBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "MakeMVBlock",
			pos:  position{line: 4002, col: 1, offset: 117919},
			expr: &actionExpr{
				pos: position{line: 4002, col: 16, offset: 117934},
				run: (*parser).callonMakeMVBlock1,
				expr: &seqExpr{
					pos: position{line: 4002, col: 16, offset: 117934},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4002, col: 16, offset: 117934},
							name: "CMD_MAKEMV",
						},
						&ruleRefExpr{
							pos:  position{line: 4002, col: 27, offset: 117945},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4002, col: 33, offset: 117951},
							label: "mvColOptionExpr",
							expr: &zeroOrOneExpr{
								pos: position{line: 4002, col: 50, offset: 117968},
								expr: &ruleRefExpr{
									pos:  position{line: 4002, col: 50, offset: 117968},
									name: "MVBlockOptionsList",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4002, col: 70, offset: 117988},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4002, col: 85, offset: 118003},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 4002, col: 91, offset: 118009},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "MVBlockOptionsList",
			pos:  position{line: 4030, col: 1, offset: 118749},
			expr: &actionExpr{
				pos: position{line: 4030, col: 23, offset: 118771},
				run: (*parser).callonMVBlockOptionsList1,
				expr: &seqExpr{
					pos: position{line: 4030, col: 23, offset: 118771},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4030, col: 23, offset: 118771},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 4030, col: 31, offset: 118779},
								name: "MVBlockOption",
							},
						},
						&labeledExpr{
							pos:   position{line: 4030, col: 46, offset: 118794},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 4030, col: 52, offset: 118800},
								expr: &seqExpr{
									pos: position{line: 4030, col: 53, offset: 118801},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 4030, col: 53, offset: 118801},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 4030, col: 59, offset: 118807},
											name: "MVBlockOption",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MVBlockOption",
			pos:  position{line: 4064, col: 1, offset: 119863},
			expr: &actionExpr{
				pos: position{line: 4064, col: 18, offset: 119880},
				run: (*parser).callonMVBlockOption1,
				expr: &labeledExpr{
					pos:   position{line: 4064, col: 18, offset: 119880},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 4064, col: 27, offset: 119889},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4064, col: 27, offset: 119889},
								name: "DelimOption",
							},
							&ruleRefExpr{
								pos:  position{line: 4064, col: 41, offset: 119903},
								name: "AllowEmptyOption",
							},
							&ruleRefExpr{
								pos:  position{line: 4064, col: 60, offset: 119922},
								name: "SetSvOption",
							},
						},
					},
				},
			},
		},
		{
			name: "DelimOption",
			pos:  position{line: 4068, col: 1, offset: 119963},
			expr: &actionExpr{
				pos: position{line: 4068, col: 16, offset: 119978},
				run: (*parser).callonDelimOption1,
				expr: &labeledExpr{
					pos:   position{line: 4068, col: 16, offset: 119978},
					label: "delimExpr",
					expr: &choiceExpr{
						pos: position{line: 4068, col: 28, offset: 119990},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4068, col: 28, offset: 119990},
								name: "StringDelimiter",
							},
							&ruleRefExpr{
								pos:  position{line: 4068, col: 46, offset: 120008},
								name: "RegexDelimiter",
							},
						},
					},
				},
			},
		},
		{
			name: "StringDelimiter",
			pos:  position{line: 4072, col: 1, offset: 120055},
			expr: &actionExpr{
				pos: position{line: 4072, col: 20, offset: 120074},
				run: (*parser).callonStringDelimiter1,
				expr: &seqExpr{
					pos: position{line: 4072, col: 20, offset: 120074},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4072, col: 20, offset: 120074},
							val:        "delim",
							ignoreCase: false,
							want:       "\"delim\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4072, col: 28, offset: 120082},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4072, col: 34, offset: 120088},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 4072, col: 38, offset: 120092},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexDelimiter",
			pos:  position{line: 4083, col: 1, offset: 120343},
			expr: &actionExpr{
				pos: position{line: 4083, col: 19, offset: 120361},
				run: (*parser).callonRegexDelimiter1,
				expr: &seqExpr{
					pos: position{line: 4083, col: 19, offset: 120361},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4083, col: 19, offset: 120361},
							val:        "tokenizer",
							ignoreCase: false,
							want:       "\"tokenizer\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4083, col: 31, offset: 120373},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4083, col: 37, offset: 120379},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 4083, col: 41, offset: 120383},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "AllowEmptyOption",
			pos:  position{line: 4101, col: 1, offset: 120854},
			expr: &actionExpr{
				pos: position{line: 4101, col: 21, offset: 120874},
				run: (*parser).callonAllowEmptyOption1,
				expr: &seqExpr{
					pos: position{line: 4101, col: 21, offset: 120874},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4101, col: 21, offset: 120874},
							val:        "allowempty",
							ignoreCase: false,
							want:       "\"allowempty\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4101, col: 34, offset: 120887},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4101, col: 40, offset: 120893},
							label: "boolVal",
							expr: &ruleRefExpr{
								pos:  position{line: 4101, col: 48, offset: 120901},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "SetSvOption",
			pos:  position{line: 4113, col: 1, offset: 121141},
			expr: &actionExpr{
				pos: position{line: 4113, col: 16, offset: 121156},
				run: (*parser).callonSetSvOption1,
				expr: &seqExpr{
					pos: position{line: 4113, col: 16, offset: 121156},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4113, col: 16, offset: 121156},
							val:        "setsv",
							ignoreCase: false,
							want:       "\"setsv\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4113, col: 24, offset: 121164},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4113, col: 30, offset: 121170},
							label: "boolVal",
							expr: &ruleRefExpr{
								pos:  position{line: 4113, col: 38, offset: 121178},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "SPathBlock",
			pos:  position{line: 4125, col: 1, offset: 121443},
			expr: &actionExpr{
				pos: position{line: 4125, col: 15, offset: 121457},
				run: (*parser).callonSPathBlock1,
				expr: &seqExpr{
					pos: position{line: 4125, col: 15, offset: 121457},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4125, col: 15, offset: 121457},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 4125, col: 20, offset: 121462},
							name: "CMD_SPATH",
						},
						&labeledExpr{
							pos:   position{line: 4125, col: 30, offset: 121472},
							label: "spathExpr",
							expr: &zeroOrOneExpr{
								pos: position{line: 4125, col: 40, offset: 121482},
								expr: &ruleRefExpr{
									pos:  position{line: 4125, col: 40, offset: 121482},
									name: "SPathArgumentsList",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SPathArgumentsList",
			pos:  position{line: 4132, col: 1, offset: 121608},
			expr: &actionExpr{
				pos: position{line: 4132, col: 23, offset: 121630},
				run: (*parser).callonSPathArgumentsList1,
				expr: &seqExpr{
					pos: position{line: 4132, col: 23, offset: 121630},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4132, col: 23, offset: 121630},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4132, col: 29, offset: 121636},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 4132, col: 35, offset: 121642},
								name: "SPathArgument",
							},
						},
						&labeledExpr{
							pos:   position{line: 4132, col: 49, offset: 121656},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 4132, col: 54, offset: 121661},
								expr: &seqExpr{
									pos: position{line: 4132, col: 55, offset: 121662},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 4132, col: 55, offset: 121662},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 4132, col: 61, offset: 121668},
											name: "SPathArgument",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SPathArgument",
			pos:  position{line: 4164, col: 1, offset: 122561},
			expr: &actionExpr{
				pos: position{line: 4164, col: 18, offset: 122578},
				run: (*parser).callonSPathArgument1,
				expr: &labeledExpr{
					pos:   position{line: 4164, col: 18, offset: 122578},
					label: "arg",
					expr: &choiceExpr{
						pos: position{line: 4164, col: 23, offset: 122583},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4164, col: 23, offset: 122583},
								name: "InputField",
							},
							&ruleRefExpr{
								pos:  position{line: 4164, col: 36, offset: 122596},
								name: "OutputField",
							},
							&ruleRefExpr{
								pos:  position{line: 4164, col: 50, offset: 122610},
								name: "PathField",
							},
						},
					},
				},
			},
		},
		{
			name: "InputField",
			pos:  position{line: 4168, col: 1, offset: 122646},
			expr: &actionExpr{
				pos: position{line: 4168, col: 15, offset: 122660},
				run: (*parser).callonInputField1,
				expr: &seqExpr{
					pos: position{line: 4168, col: 15, offset: 122660},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4168, col: 15, offset: 122660},
							val:        "input",
							ignoreCase: false,
							want:       "\"input\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4168, col: 23, offset: 122668},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4168, col: 29, offset: 122674},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 4168, col: 35, offset: 122680},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "OutputField",
			pos:  position{line: 4171, col: 1, offset: 122736},
			expr: &actionExpr{
				pos: position{line: 4171, col: 16, offset: 122751},
				run: (*parser).callonOutputField1,
				expr: &seqExpr{
					pos: position{line: 4171, col: 16, offset: 122751},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4171, col: 16, offset: 122751},
							val:        "output",
							ignoreCase: false,
							want:       "\"output\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4171, col: 25, offset: 122760},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4171, col: 31, offset: 122766},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 4171, col: 37, offset: 122772},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "PathField",
			pos:  position{line: 4174, col: 1, offset: 122829},
			expr: &actionExpr{
				pos: position{line: 4174, col: 14, offset: 122842},
				run: (*parser).callonPathField1,
				expr: &choiceExpr{
					pos: position{line: 4174, col: 15, offset: 122843},
					alternatives: []any{
						&seqExpr{
							pos: position{line: 4174, col: 15, offset: 122843},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4174, col: 15, offset: 122843},
									val:        "path",
									ignoreCase: false,
									want:       "\"path\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4174, col: 22, offset: 122850},
									name: "EQUAL",
								},
								&ruleRefExpr{
									pos:  position{line: 4174, col: 28, offset: 122856},
									name: "SPathFieldString",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4174, col: 47, offset: 122875},
							name: "SPathFieldString",
						},
					},
				},
			},
		},
		{
			name: "SPathFieldString",
			pos:  position{line: 4186, col: 1, offset: 123287},
			expr: &choiceExpr{
				pos: position{line: 4186, col: 21, offset: 123307},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 4186, col: 21, offset: 123307},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 4186, col: 36, offset: 123322},
						name: "UnquotedStringWithTemplateWildCard",
					},
				},
			},
		},
		{
			name: "FormatBlock",
			pos:  position{line: 4189, col: 1, offset: 123395},
			expr: &actionExpr{
				pos: position{line: 4189, col: 16, offset: 123410},
				run: (*parser).callonFormatBlock1,
				expr: &seqExpr{
					pos: position{line: 4189, col: 16, offset: 123410},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4189, col: 16, offset: 123410},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 4189, col: 21, offset: 123415},
							name: "CMD_FORMAT",
						},
						&labeledExpr{
							pos:   position{line: 4189, col: 32, offset: 123426},
							label: "formatArgExpr",
							expr: &zeroOrOneExpr{
								pos: position{line: 4189, col: 46, offset: 123440},
								expr: &ruleRefExpr{
									pos:  position{line: 4189, col: 46, offset: 123440},
									name: "FormatArgumentsList",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FormatArgumentsList",
			pos:  position{line: 4211, col: 1, offset: 124049},
			expr: &actionExpr{
				pos: position{line: 4211, col: 24, offset: 124072},
				run: (*parser).callonFormatArgumentsList1,
				expr: &seqExpr{
					pos: position{line: 4211, col: 24, offset: 124072},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4211, col: 24, offset: 124072},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4211, col: 30, offset: 124078},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 4211, col: 37, offset: 124085},
								name: "FormatArgument",
							},
						},
						&labeledExpr{
							pos:   position{line: 4211, col: 52, offset: 124100},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 4211, col: 57, offset: 124105},
								expr: &seqExpr{
									pos: position{line: 4211, col: 58, offset: 124106},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 4211, col: 58, offset: 124106},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 4211, col: 64, offset: 124112},
											name: "FormatArgument",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FormatArgument",
			pos:  position{line: 4245, col: 1, offset: 125301},
			expr: &actionExpr{
				pos: position{line: 4245, col: 19, offset: 125319},
				run: (*parser).callonFormatArgument1,
				expr: &labeledExpr{
					pos:   position{line: 4245, col: 19, offset: 125319},
					label: "argExpr",
					expr: &choiceExpr{
						pos: position{line: 4245, col: 28, offset: 125328},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4245, col: 28, offset: 125328},
								name: "FormatSeparator",
							},
							&ruleRefExpr{
								pos:  position{line: 4245, col: 46, offset: 125346},
								name: "FormatMaxResults",
							},
							&ruleRefExpr{
								pos:  position{line: 4245, col: 65, offset: 125365},
								name: "FormatEmptyStr",
							},
							&ruleRefExpr{
								pos:  position{line: 4245, col: 82, offset: 125382},
								name: "FormatRowColOptions",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatSeparator",
			pos:  position{line: 4249, col: 1, offset: 125432},
			expr: &actionExpr{
				pos: position{line: 4249, col: 20, offset: 125451},
				run: (*parser).callonFormatSeparator1,
				expr: &seqExpr{
					pos: position{line: 4249, col: 20, offset: 125451},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4249, col: 20, offset: 125451},
							val:        "mvsep",
							ignoreCase: false,
							want:       "\"mvsep\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4249, col: 28, offset: 125459},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4249, col: 34, offset: 125465},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 4249, col: 38, offset: 125469},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatMaxResults",
			pos:  position{line: 4258, col: 1, offset: 125681},
			expr: &actionExpr{
				pos: position{line: 4258, col: 21, offset: 125701},
				run: (*parser).callonFormatMaxResults1,
				expr: &seqExpr{
					pos: position{line: 4258, col: 21, offset: 125701},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4258, col: 21, offset: 125701},
							val:        "maxresults",
							ignoreCase: false,
							want:       "\"maxresults\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4258, col: 34, offset: 125714},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4258, col: 40, offset: 125720},
							label: "numStr",
							expr: &ruleRefExpr{
								pos:  position{line: 4258, col: 47, offset: 125727},
								name: "IntegerAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatEmptyStr",
			pos:  position{line: 4271, col: 1, offset: 126133},
			expr: &actionExpr{
				pos: position{line: 4271, col: 19, offset: 126151},
				run: (*parser).callonFormatEmptyStr1,
				expr: &seqExpr{
					pos: position{line: 4271, col: 19, offset: 126151},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4271, col: 19, offset: 126151},
							val:        "emptystr",
							ignoreCase: false,
							want:       "\"emptystr\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4271, col: 30, offset: 126162},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4271, col: 36, offset: 126168},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 4271, col: 40, offset: 126172},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatRowColOptions",
			pos:  position{line: 4280, col: 1, offset: 126387},
			expr: &actionExpr{
				pos: position{line: 4280, col: 24, offset: 126410},
				run: (*parser).callonFormatRowColOptions1,
				expr: &seqExpr{
					pos: position{line: 4280, col: 24, offset: 126410},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4280, col: 24, offset: 126410},
							label: "rowPrefix",
							expr: &ruleRefExpr{
								pos:  position{line: 4280, col: 34, offset: 126420},
								name: "QuotedString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4280, col: 47, offset: 126433},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4280, col: 53, offset: 126439},
							label: "colPrefix",
							expr: &ruleRefExpr{
								pos:  position{line: 4280, col: 63, offset: 126449},
								name: "QuotedString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4280, col: 76, offset: 126462},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4280, col: 82, offset: 126468},
							label: "colSeparator",
							expr: &ruleRefExpr{
								pos:  position{line: 4280, col: 95, offset: 126481},
								name: "QuotedString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4280, col: 108, offset: 126494},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4280, col: 114, offset: 126500},
							label: "colEnd",
							expr: &ruleRefExpr{
								pos:  position{line: 4280, col: 121, offset: 126507},
								name: "QuotedString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4280, col: 134, offset: 126520},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4280, col: 140, offset: 126526},
							label: "rowSeparator",
							expr: &ruleRefExpr{
								pos:  position{line: 4280, col: 153, offset: 126539},
								name: "QuotedString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4280, col: 166, offset: 126552},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4280, col: 172, offset: 126558},
							label: "rowEnd",
							expr: &ruleRefExpr{
								pos:  position{line: 4280, col: 179, offset: 126565},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "EventCountBlock",
			pos:  position{line: 4298, col: 1, offset: 127141},
			expr: &actionExpr{
				pos: position{line: 4298, col: 20, offset: 127160},
				run: (*parser).callonEventCountBlock1,
				expr: &seqExpr{
					pos: position{line: 4298, col: 20, offset: 127160},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4298, col: 20, offset: 127160},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 4298, col: 25, offset: 127165},
							name: "CMD_EVENTCOUNT",
						},
						&labeledExpr{
							pos:   position{line: 4298, col: 40, offset: 127180},
							label: "eventCountExpr",
							expr: &zeroOrOneExpr{
								pos: position{line: 4298, col: 55, offset: 127195},
								expr: &ruleRefExpr{
									pos:  position{line: 4298, col: 55, offset: 127195},
									name: "EventCountArgumentsList",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EventCountArgumentsList",
			pos:  position{line: 4305, col: 1, offset: 127348},
			expr: &actionExpr{
				pos: position{line: 4305, col: 28, offset: 127375},
				run: (*parser).callonEventCountArgumentsList1,
				expr: &seqExpr{
					pos: position{line: 4305, col: 28, offset: 127375},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4305, col: 28, offset: 127375},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4305, col: 34, offset: 127381},
							label: "first",
							expr: &zeroOrOneExpr{
								pos: position{line: 4305, col: 40, offset: 127387},
								expr: &ruleRefExpr{
									pos:  position{line: 4305, col: 40, offset: 127387},
									name: "EventCountArgument",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 4305, col: 60, offset: 127407},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 4305, col: 65, offset: 127412},
								expr: &seqExpr{
									pos: position{line: 4305, col: 66, offset: 127413},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 4305, col: 66, offset: 127413},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 4305, col: 72, offset: 127419},
											name: "EventCountArgument",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EventCountArgument",
			pos:  position{line: 4361, col: 1, offset: 129296},
			expr: &actionExpr{
				pos: position{line: 4361, col: 23, offset: 129318},
				run: (*parser).callonEventCountArgument1,
				expr: &labeledExpr{
					pos:   position{line: 4361, col: 23, offset: 129318},
					label: "arg",
					expr: &choiceExpr{
						pos: position{line: 4361, col: 28, offset: 129323},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4361, col: 28, offset: 129323},
								name: "IndexField",
							},
							&ruleRefExpr{
								pos:  position{line: 4361, col: 41, offset: 129336},
								name: "SummarizeField",
							},
							&ruleRefExpr{
								pos:  position{line: 4361, col: 58, offset: 129353},
								name: "ReportSizeField",
							},
							&ruleRefExpr{
								pos:  position{line: 4361, col: 76, offset: 129371},
								name: "ListVixField",
							},
						},
					},
				},
			},
		},
		{
			name: "IndexField",
			pos:  position{line: 4365, col: 1, offset: 129410},
			expr: &actionExpr{
				pos: position{line: 4365, col: 15, offset: 129424},
				run: (*parser).callonIndexField1,
				expr: &seqExpr{
					pos: position{line: 4365, col: 15, offset: 129424},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4365, col: 15, offset: 129424},
							val:        "index",
							ignoreCase: false,
							want:       "\"index\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4365, col: 23, offset: 129432},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4365, col: 29, offset: 129438},
							label: "index",
							expr: &ruleRefExpr{
								pos:  position{line: 4365, col: 35, offset: 129444},
								name: "IndexName",
							},
						},
					},
				},
			},
		},
		{
			name: "SummarizeField",
			pos:  position{line: 4368, col: 1, offset: 129500},
			expr: &actionExpr{
				pos: position{line: 4368, col: 19, offset: 129518},
				run: (*parser).callonSummarizeField1,
				expr: &seqExpr{
					pos: position{line: 4368, col: 19, offset: 129518},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4368, col: 19, offset: 129518},
							val:        "summarize",
							ignoreCase: false,
							want:       "\"summarize\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4368, col: 31, offset: 129530},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4368, col: 37, offset: 129536},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 4368, col: 43, offset: 129542},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "ReportSizeField",
			pos:  position{line: 4371, col: 1, offset: 129618},
			expr: &actionExpr{
				pos: position{line: 4371, col: 20, offset: 129637},
				run: (*parser).callonReportSizeField1,
				expr: &seqExpr{
					pos: position{line: 4371, col: 20, offset: 129637},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4371, col: 20, offset: 129637},
							val:        "report_size",
							ignoreCase: false,
							want:       "\"report_size\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4371, col: 34, offset: 129651},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4371, col: 40, offset: 129657},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 4371, col: 46, offset: 129663},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "ListVixField",
			pos:  position{line: 4374, col: 1, offset: 129741},
			expr: &actionExpr{
				pos: position{line: 4374, col: 17, offset: 129757},
				run: (*parser).callonListVixField1,
				expr: &seqExpr{
					pos: position{line: 4374, col: 17, offset: 129757},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4374, col: 17, offset: 129757},
							val:        "list_vix",
							ignoreCase: false,
							want:       "\"list_vix\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4374, col: 28, offset: 129768},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4374, col: 34, offset: 129774},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 4374, col: 40, offset: 129780},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "IndexName",
			pos:  position{line: 4378, col: 1, offset: 129856},
			expr: &actionExpr{
				pos: position{line: 4378, col: 14, offset: 129869},
				run: (*parser).callonIndexName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 4378, col: 14, offset: 129869},
					expr: &seqExpr{
						pos: position{line: 4378, col: 15, offset: 129870},
						exprs: []any{
							&notExpr{
								pos: position{line: 4378, col: 15, offset: 129870},
								expr: &ruleRefExpr{
									pos:  position{line: 4378, col: 16, offset: 129871},
									name: "SPACE",
								},
							},
							&anyMatcher{
								line: 4378, col: 22, offset: 129877,
							},
						},
					},
				},
			},
		},
		{
			name: "ALLCMD",
			pos:  position{line: 4383, col: 1, offset: 129943},
			expr: &choiceExpr{
				pos: position{line: 4383, col: 12, offset: 129954},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 4383, col: 12, offset: 129954},
						name: "CMD_REGEX",
					},
					&ruleRefExpr{
						pos:  position{line: 4383, col: 24, offset: 129966},
						name: "CMD_STATS",
					},
					&ruleRefExpr{
						pos:  position{line: 4383, col: 36, offset: 129978},
						name: "CMD_FIELDS",
					},
					&ruleRefExpr{
						pos:  position{line: 4383, col: 49, offset: 129991},
						name: "CMD_WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 4383, col: 61, offset: 130003},
						name: "CMD_HEAD_NO_SPACE",
					},
					&ruleRefExpr{
						pos:  position{line: 4383, col: 81, offset: 130023},
						name: "CMD_HEAD",
					},
					&ruleRefExpr{
						pos:  position{line: 4383, col: 92, offset: 130034},
						name: "CMD_EVAL",
					},
					&ruleRefExpr{
						pos:  position{line: 4383, col: 103, offset: 130045},
						name: "CMD_REX",
					},
					&ruleRefExpr{
						pos:  position{line: 4383, col: 113, offset: 130055},
						name: "CMD_TOP",
					},
					&ruleRefExpr{
						pos:  position{line: 4383, col: 123, offset: 130065},
						name: "CMD_RARE",
					},
					&ruleRefExpr{
						pos:  position{line: 4383, col: 134, offset: 130076},
						name: "CMD_RENAME",
					},
					&ruleRefExpr{
						pos:  position{line: 4383, col: 147, offset: 130089},
						name: "CMD_TIMECHART",
					},
					&ruleRefExpr{
						pos:  position{line: 4383, col: 163, offset: 130105},
						name: "CMD_TRANSACTION",
					},
					&ruleRefExpr{
						pos:  position{line: 4383, col: 181, offset: 130123},
						name: "CMD_DEDUP",
					},
					&ruleRefExpr{
						pos:  position{line: 4383, col: 193, offset: 130135},
						name: "CMD_SORT",
					},
					&ruleRefExpr{
						pos:  position{line: 4383, col: 204, offset: 130146},
						name: "CMD_MAKEMV",
					},
					&ruleRefExpr{
						pos:  position{line: 4383, col: 217, offset: 130159},
						name: "CMD_SPATH",
					},
					&ruleRefExpr{
						pos:  position{line: 4383, col: 229, offset: 130171},
						name: "CMD_FORMAT",
					},
					&ruleRefExpr{
						pos:  position{line: 4383, col: 242, offset: 130184},
						name: "CMD_EARLIEST",
					},
					&ruleRefExpr{
						pos:  position{line: 4383, col: 257, offset: 130199},
						name: "CMD_LATEST",
					},
					&ruleRefExpr{
						pos:  position{line: 4383, col: 270, offset: 130212},
						name: "CMD_EVENTCOUNT",
					},
				},
			},
		},
		{
			name: "CMD_SEARCH",
			pos:  position{line: 4384, col: 1, offset: 130228},
			expr: &seqExpr{
				pos: position{line: 4384, col: 15, offset: 130242},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 4384, col: 15, offset: 130242},
						val:        "search",
						ignoreCase: false,
						want:       "\"search\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4384, col: 24, offset: 130251},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_REGEX",
			pos:  position{line: 4385, col: 1, offset: 130257},
			expr: &seqExpr{
				pos: position{line: 4385, col: 14, offset: 130270},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 4385, col: 14, offset: 130270},
						val:        "regex",
						ignoreCase: false,
						want:       "\"regex\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4385, col: 22, offset: 130278},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_STATS",
			pos:  position{line: 4386, col: 1, offset: 130284},
			expr: &seqExpr{
				pos: position{line: 4386, col: 14, offset: 130297},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 4386, col: 14, offset: 130297},
						val:        "stats",
						ignoreCase: false,
						want:       "\"stats\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4386, col: 22, offset: 130305},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_FIELDS",
			pos:  position{line: 4387, col: 1, offset: 130311},
			expr: &seqExpr{
				pos: position{line: 4387, col: 15, offset: 130325},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 4387, col: 15, offset: 130325},
						val:        "fields",
						ignoreCase: false,
						want:       "\"fields\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4387, col: 24, offset: 130334},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_WHERE",
			pos:  position{line: 4388, col: 1, offset: 130340},
			expr: &seqExpr{
				pos: position{line: 4388, col: 14, offset: 130353},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 4388, col: 14, offset: 130353},
						val:        "where",
						ignoreCase: false,
						want:       "\"where\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4388, col: 22, offset: 130361},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_HEAD_NO_SPACE",
			pos:  position{line: 4389, col: 1, offset: 130367},
			expr: &litMatcher{
				pos:        position{line: 4389, col: 22, offset: 130388},
				val:        "head",
				ignoreCase: false,
				want:       "\"head\"",
			},
		},
		{
			name: "CMD_HEAD",
			pos:  position{line: 4390, col: 1, offset: 130395},
			expr: &seqExpr{
				pos: position{line: 4390, col: 13, offset: 130407},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 4390, col: 13, offset: 130407},
						name: "CMD_HEAD_NO_SPACE",
					},
					&ruleRefExpr{
						pos:  position{line: 4390, col: 31, offset: 130425},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_EVAL",
			pos:  position{line: 4391, col: 1, offset: 130431},
			expr: &seqExpr{
				pos: position{line: 4391, col: 13, offset: 130443},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 4391, col: 13, offset: 130443},
						val:        "eval",
						ignoreCase: false,
						want:       "\"eval\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4391, col: 20, offset: 130450},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_REX",
			pos:  position{line: 4392, col: 1, offset: 130456},
			expr: &seqExpr{
				pos: position{line: 4392, col: 12, offset: 130467},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 4392, col: 12, offset: 130467},
						val:        "rex",
						ignoreCase: false,
						want:       "\"rex\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4392, col: 18, offset: 130473},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_SORT",
			pos:  position{line: 4393, col: 1, offset: 130479},
			expr: &seqExpr{
				pos: position{line: 4393, col: 13, offset: 130491},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 4393, col: 13, offset: 130491},
						val:        "sort",
						ignoreCase: false,
						want:       "\"sort\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4393, col: 20, offset: 130498},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_TOP",
			pos:  position{line: 4394, col: 1, offset: 130504},
			expr: &litMatcher{
				pos:        position{line: 4394, col: 12, offset: 130515},
				val:        "top",
				ignoreCase: false,
				want:       "\"top\"",
			},
		},
		{
			name: "CMD_RARE",
			pos:  position{line: 4395, col: 1, offset: 130521},
			expr: &litMatcher{
				pos:        position{line: 4395, col: 13, offset: 130533},
				val:        "rare",
				ignoreCase: false,
				want:       "\"rare\"",
			},
		},
		{
			name: "CMD_RENAME",
			pos:  position{line: 4396, col: 1, offset: 130540},
			expr: &seqExpr{
				pos: position{line: 4396, col: 15, offset: 130554},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 4396, col: 15, offset: 130554},
						val:        "rename",
						ignoreCase: false,
						want:       "\"rename\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4396, col: 24, offset: 130563},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_TIMECHART",
			pos:  position{line: 4397, col: 1, offset: 130569},
			expr: &seqExpr{
				pos: position{line: 4397, col: 18, offset: 130586},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 4397, col: 18, offset: 130586},
						val:        "timechart",
						ignoreCase: false,
						want:       "\"timechart\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4397, col: 30, offset: 130598},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_SPAN",
			pos:  position{line: 4398, col: 1, offset: 130604},
			expr: &litMatcher{
				pos:        position{line: 4398, col: 13, offset: 130616},
				val:        "span",
				ignoreCase: false,
				want:       "\"span\"",
			},
		},
		{
			name: "CMD_TRANSACTION",
			pos:  position{line: 4399, col: 1, offset: 130623},
			expr: &seqExpr{
				pos: position{line: 4399, col: 20, offset: 130642},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 4399, col: 20, offset: 130642},
						val:        "transaction",
						ignoreCase: false,
						want:       "\"transaction\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4399, col: 34, offset: 130656},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_DEDUP",
			pos:  position{line: 4400, col: 1, offset: 130662},
			expr: &litMatcher{
				pos:        position{line: 4400, col: 14, offset: 130675},
				val:        "dedup",
				ignoreCase: false,
				want:       "\"dedup\"",
			},
		},
		{
			name: "CMD_DEDUP_SORTBY",
			pos:  position{line: 4401, col: 1, offset: 130683},
			expr: &seqExpr{
				pos: position{line: 4401, col: 21, offset: 130703},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 4401, col: 21, offset: 130703},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 4401, col: 27, offset: 130709},
						val:        "sortby",
						ignoreCase: false,
						want:       "\"sortby\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4401, col: 36, offset: 130718},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_MAKEMV",
			pos:  position{line: 4402, col: 1, offset: 130724},
			expr: &litMatcher{
				pos:        position{line: 4402, col: 15, offset: 130738},
				val:        "makemv",
				ignoreCase: false,
				want:       "\"makemv\"",
			},
		},
		{
			name: "CMD_SPATH",
			pos:  position{line: 4403, col: 1, offset: 130747},
			expr: &litMatcher{
				pos:        position{line: 4403, col: 14, offset: 130760},
				val:        "spath",
				ignoreCase: false,
				want:       "\"spath\"",
			},
		},
		{
			name: "CMD_FORMAT",
			pos:  position{line: 4404, col: 1, offset: 130768},
			expr: &litMatcher{
				pos:        position{line: 4404, col: 15, offset: 130782},
				val:        "format",
				ignoreCase: false,
				want:       "\"format\"",
			},
		},
		{
			name: "CMD_EARLIEST",
			pos:  position{line: 4405, col: 1, offset: 130791},
			expr: &litMatcher{
				pos:        position{line: 4405, col: 17, offset: 130807},
				val:        "earliest",
				ignoreCase: false,
				want:       "\"earliest\"",
			},
		},
		{
			name: "CMD_LATEST",
			pos:  position{line: 4406, col: 1, offset: 130818},
			expr: &litMatcher{
				pos:        position{line: 4406, col: 15, offset: 130832},
				val:        "latest",
				ignoreCase: false,
				want:       "\"latest\"",
			},
		},
		{
			name: "CMD_EVENTCOUNT",
			pos:  position{line: 4407, col: 1, offset: 130841},
			expr: &litMatcher{
				pos:        position{line: 4407, col: 19, offset: 130859},
				val:        "eventcount",
				ignoreCase: false,
				want:       "\"eventcount\"",
			},
		},
		{
			name: "EVAL_CONCAT",
			pos:  position{line: 4408, col: 1, offset: 130872},
			expr: &seqExpr{
				pos: position{line: 4408, col: 16, offset: 130887},
				exprs: []any{
					&zeroOrOneExpr{
						pos: position{line: 4408, col: 16, offset: 130887},
						expr: &ruleRefExpr{
							pos:  position{line: 4408, col: 16, offset: 130887},
							name: "SPACE",
						},
					},
					&litMatcher{
						pos:        position{line: 4408, col: 23, offset: 130894},
						val:        ".",
						ignoreCase: false,
						want:       "\".\"",
					},
					&zeroOrOneExpr{
						pos: position{line: 4408, col: 27, offset: 130898},
						expr: &ruleRefExpr{
							pos:  position{line: 4408, col: 27, offset: 130898},
							name: "SPACE",
						},
					},
				},
			},
		},
		{
			name: "MAJOR_BREAK",
			pos:  position{line: 4411, col: 1, offset: 131009},
			expr: &choiceExpr{
				pos: position{line: 4411, col: 16, offset: 131024},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 4411, col: 16, offset: 131024},
						val:        "[[\\]<>(){}|!;,'\"*\\n\\r \\t&?+]",
						chars:      []rune{'[', ']', '<', '>', '(', ')', '{', '}', '|', '!', ';', ',', '\'', '"', '*', '\n', '\r', ' ', '\t', '&', '?', '+'},
						ignoreCase: false,
						inverted:   false,
					},
					&litMatcher{
						pos:        position{line: 4411, col: 47, offset: 131055},
						val:        "%21",
						ignoreCase: false,
						want:       "\"%21\"",
					},
					&litMatcher{
						pos:        position{line: 4411, col: 55, offset: 131063},
						val:        "%26",
						ignoreCase: false,
						want:       "\"%26\"",
					},
					&litMatcher{
						pos:        position{line: 4412, col: 16, offset: 131086},
						val:        "%2526",
						ignoreCase: false,
						want:       "\"%2526\"",
					},
					&litMatcher{
						pos:        position{line: 4412, col: 26, offset: 131096},
						val:        "%3B",
						ignoreCase: false,
						want:       "\"%3B\"",
					},
					&litMatcher{
						pos:        position{line: 4412, col: 34, offset: 131104},
						val:        "%7C",
						ignoreCase: false,
						want:       "\"%7C\"",
					},
					&litMatcher{
						pos:        position{line: 4412, col: 42, offset: 131112},
						val:        "%20",
						ignoreCase: false,
						want:       "\"%20\"",
					},
					&litMatcher{
						pos:        position{line: 4412, col: 50, offset: 131120},
						val:        "%2B",
						ignoreCase: false,
						want:       "\"%2B\"",
					},
					&litMatcher{
						pos:        position{line: 4412, col: 58, offset: 131128},
						val:        "%3D",
						ignoreCase: false,
						want:       "\"%3D\"",
					},
					&litMatcher{
						pos:        position{line: 4412, col: 66, offset: 131136},
						val:        "--",
						ignoreCase: false,
						want:       "\"--\"",
					},
					&litMatcher{
						pos:        position{line: 4413, col: 16, offset: 131158},
						val:        "%2520",
						ignoreCase: false,
						want:       "\"%2520\"",
					},
					&litMatcher{
						pos:        position{line: 4413, col: 26, offset: 131168},
						val:        "%5D",
						ignoreCase: false,
						want:       "\"%5D\"",
					},
					&litMatcher{
						pos:        position{line: 4413, col: 34, offset: 131176},
						val:        "%5B",
						ignoreCase: false,
						want:       "\"%5B\"",
					},
					&litMatcher{
						pos:        position{line: 4413, col: 42, offset: 131184},
						val:        "%3A",
						ignoreCase: false,
						want:       "\"%3A\"",
					},
					&litMatcher{
						pos:        position{line: 4413, col: 50, offset: 131192},
						val:        "%0A",
						ignoreCase: false,
						want:       "\"%0A\"",
					},
					&litMatcher{
						pos:        position{line: 4413, col: 58, offset: 131200},
						val:        "%2C",
						ignoreCase: false,
						want:       "\"%2C\"",
					},
					&litMatcher{
						pos:        position{line: 4413, col: 66, offset: 131208},
						val:        "%28",
						ignoreCase: false,
						want:       "\"%28\"",
					},
					&litMatcher{
						pos:        position{line: 4413, col: 74, offset: 131216},
						val:        "%29",
						ignoreCase: false,
						want:       "\"%29\"",
					},
				},
			},
		},
		{
			name: "MINOR_BREAK",
			pos:  position{line: 4414, col: 1, offset: 131222},
			expr: &choiceExpr{
				pos: position{line: 4414, col: 16, offset: 131237},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 4414, col: 16, offset: 131237},
						val:        "[/:=@.$#%_]",
						chars:      []rune{'/', ':', '=', '@', '.', '$', '#', '%', '_'},
						ignoreCase: false,
						inverted:   false,
					},
					&litMatcher{
						pos:        position{line: 4414, col: 30, offset: 131251},
						val:        "-",
						ignoreCase: false,
						want:       "\"-\"",
					},
					&litMatcher{
						pos:        position{line: 4414, col: 36, offset: 131257},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "NOT",
			pos:  position{line: 4418, col: 1, offset: 131413},
			expr: &seqExpr{
				pos: position{line: 4418, col: 8, offset: 131420},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 4418, col: 8, offset: 131420},
						val:        "NOT",
						ignoreCase: false,
						want:       "\"NOT\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4418, col: 14, offset: 131426},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "OR",
			pos:  position{line: 4419, col: 1, offset: 131432},
			expr: &seqExpr{
				pos: position{line: 4419, col: 7, offset: 131438},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 4419, col: 7, offset: 131438},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 4419, col: 13, offset: 131444},
						val:        "OR",
						ignoreCase: false,
						want:       "\"OR\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4419, col: 18, offset: 131449},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "AND",
			pos:  position{line: 4420, col: 1, offset: 131455},
			expr: &seqExpr{
				pos: position{line: 4420, col: 8, offset: 131462},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 4420, col: 8, offset: 131462},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 4420, col: 14, offset: 131468},
						val:        "AND",
						ignoreCase: false,
						want:       "\"AND\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4420, col: 20, offset: 131474},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "PIPE",
			pos:  position{line: 4421, col: 1, offset: 131480},
			expr: &seqExpr{
				pos: position{line: 4421, col: 9, offset: 131488},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 4421, col: 9, offset: 131488},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 4421, col: 24, offset: 131503},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4421, col: 28, offset: 131507},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 4422, col: 1, offset: 131522},
			expr: &seqExpr{
				pos: position{line: 4422, col: 7, offset: 131528},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 4422, col: 7, offset: 131528},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 4422, col: 13, offset: 131534},
						val:        "as",
						ignoreCase: true,
						want:       "\"AS\"i",
					},
					&ruleRefExpr{
						pos:  position{line: 4422, col: 19, offset: 131540},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 4423, col: 1, offset: 131566},
			expr: &seqExpr{
				pos: position{line: 4423, col: 7, offset: 131572},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 4423, col: 7, offset: 131572},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 4423, col: 13, offset: 131578},
						val:        "by",
						ignoreCase: true,
						want:       "\"BY\"i",
					},
					&ruleRefExpr{
						pos:  position{line: 4423, col: 19, offset: 131584},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "EQUAL",
			pos:  position{line: 4425, col: 1, offset: 131611},
			expr: &seqExpr{
				pos: position{line: 4425, col: 10, offset: 131620},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 4425, col: 10, offset: 131620},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 4425, col: 25, offset: 131635},
						val:        "=",
						ignoreCase: false,
						want:       "\"=\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4425, col: 29, offset: 131639},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "COMMA",
			pos:  position{line: 4426, col: 1, offset: 131654},
			expr: &seqExpr{
				pos: position{line: 4426, col: 10, offset: 131663},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 4426, col: 10, offset: 131663},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 4426, col: 25, offset: 131678},
						val:        ",",
						ignoreCase: false,
						want:       "\",\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4426, col: 29, offset: 131682},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "L_PAREN",
			pos:  position{line: 4427, col: 1, offset: 131697},
			expr: &seqExpr{
				pos: position{line: 4427, col: 12, offset: 131708},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 4427, col: 12, offset: 131708},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4427, col: 16, offset: 131712},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "R_PAREN",
			pos:  position{line: 4428, col: 1, offset: 131727},
			expr: &seqExpr{
				pos: position{line: 4428, col: 12, offset: 131738},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 4428, col: 12, offset: 131738},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 4428, col: 27, offset: 131753},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 4430, col: 1, offset: 131758},
			expr: &notExpr{
				pos: position{line: 4430, col: 8, offset: 131765},
				expr: &anyMatcher{
					line: 4430, col: 9, offset: 131766,
				},
			},
		},
		{
			name: "WHITESPACE",
			pos:  position{line: 4431, col: 1, offset: 131768},
			expr: &choiceExpr{
				pos: position{line: 4431, col: 15, offset: 131782},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 4431, col: 15, offset: 131782},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&litMatcher{
						pos:        position{line: 4431, col: 21, offset: 131788},
						val:        "\t",
						ignoreCase: false,
						want:       "\"\\t\"",
					},
					&litMatcher{
						pos:        position{line: 4431, col: 28, offset: 131795},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
					&litMatcher{
						pos:        position{line: 4431, col: 35, offset: 131802},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
				},
			},
		},
		{
			name: "SPACE",
			pos:  position{line: 4432, col: 1, offset: 131807},
			expr: &choiceExpr{
				pos: position{line: 4432, col: 10, offset: 131816},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 4432, col: 11, offset: 131817},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 4432, col: 11, offset: 131817},
								expr: &ruleRefExpr{
									pos:  position{line: 4432, col: 11, offset: 131817},
									name: "WHITESPACE",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 4432, col: 23, offset: 131829},
								name: "COMMENT",
							},
							&zeroOrOneExpr{
								pos: position{line: 4432, col: 31, offset: 131837},
								expr: &ruleRefExpr{
									pos:  position{line: 4432, col: 31, offset: 131837},
									name: "WHITESPACE",
								},
							},
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 4432, col: 46, offset: 131852},
						expr: &ruleRefExpr{
							pos:  position{line: 4432, col: 46, offset: 131852},
							name: "WHITESPACE",
						},
					},
				},
			},
		},
		{
			name: "COMMENT",
			pos:  position{line: 4433, col: 1, offset: 131864},
			expr: &seqExpr{
				pos: position{line: 4433, col: 12, offset: 131875},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 4433, col: 12, offset: 131875},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 4433, col: 18, offset: 131881},
						expr: &seqExpr{
							pos: position{line: 4433, col: 19, offset: 131882},
							exprs: []any{
								&notExpr{
									pos: position{line: 4433, col: 19, offset: 131882},
									expr: &litMatcher{
										pos:        position{line: 4433, col: 21, offset: 131884},
										val:        "```",
										ignoreCase: false,
										want:       "\"```\"",
									},
								},
								&anyMatcher{
									line: 4433, col: 28, offset: 131891,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 4433, col: 32, offset: 131895},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
				},
			},
		},
		{
			name: "EMPTY_OR_SPACE",
			pos:  position{line: 4434, col: 1, offset: 131901},
			expr: &choiceExpr{
				pos: position{line: 4434, col: 20, offset: 131920},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 4434, col: 20, offset: 131920},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 4434, col: 28, offset: 131928},
						val:        "",
						ignoreCase: false,
						want:       "\"\"",
					},
				},
			},
		},
		{
			name: "SPACE_OR_COMMA",
			pos:  position{line: 4435, col: 1, offset: 131931},
			expr: &choiceExpr{
				pos: position{line: 4435, col: 19, offset: 131949},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 4435, col: 19, offset: 131949},
						name: "COMMA",
					},
					&ruleRefExpr{
						pos:  position{line: 4435, col: 27, offset: 131957},
						name: "SPACE",
					},
				},
			},
		},
	},
}

func (c *current) onStart1(initialSearch, filterBlocks, queryAggBlocks any) (any, error) {
	var q ast.QueryStruct
	q.SearchFilter = initialSearch.(*ast.Node)

	// Join the InitialSearchBlock with the FilterBlocks with AND nodes. For a
	// search like "A | B | C | D" we should generate the node structure below
	// so that when we run the search it evaluates A first.
	//
	//      AND
	//     /   \
	//    A     AND
	//         /   \
	//        B     AND
	//             /   \
	//            C     D

	filterBlocksSlice := filterBlocks.([]any)
	switch len(filterBlocksSlice) {
	case 0:
		q.SearchFilter = initialSearch.(*ast.Node)
	case 1:
		q.SearchFilter = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     initialSearch.(*ast.Node),
			Right:    filterBlocksSlice[0].(*ast.Node),
		}
	default: // len > 1
		// Iterate backwards so we build the node structure mentioned above.
		root := filterBlocksSlice[len(filterBlocksSlice)-1].(*ast.Node)
		for i := len(filterBlocksSlice) - 2; i > -1; i-- {
			newRoot := &ast.Node{
				NodeType: ast.NodeAnd,
				Left:     filterBlocksSlice[i].(*ast.Node),
				Right:    root,
			}

			root = newRoot
		}

		q.SearchFilter = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     initialSearch.(*ast.Node),
			Right:    root,
		}
	}

	if queryAggBlocks != nil {
		queryAggSlice := queryAggBlocks.([]any)

		if len(queryAggSlice) > 0 {
			// Chain together all QueryAggergators.
			q.PipeCommands = queryAggSlice[0].(*structs.QueryAggregators)

			// Go to the end of the first chain.
			curQueryAgg := q.PipeCommands
			for ; curQueryAgg.Next != nil; curQueryAgg = curQueryAgg.Next {
			}

			// Link the remaining chains.
			for i := range queryAggSlice[1:] {
				queryAgg := queryAggSlice[i+1].(*structs.QueryAggregators)
				curQueryAgg.Next = queryAgg

				// Go to the end of this chain.
				for ; curQueryAgg.Next != nil; curQueryAgg = curQueryAgg.Next {
				}
			}
		}
	}

	return q, nil
}

func (p *parser) callonStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStart1(stack["initialSearch"], stack["filterBlocks"], stack["queryAggBlocks"])
}

func (c *current) onInitialSearchBlock1(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonInitialSearchBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialSearchBlock1(stack["clause"])
}

func (c *current) onSearchBlock1(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonSearchBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBlock1(stack["clause"])
}

func (c *current) onFilterBlock1(block any) (any, error) {
	return block, nil
}

func (p *parser) callonFilterBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterBlock1(stack["block"])
}

func (c *current) onQueryAggergatorBlock1(block any) (any, error) {
	queryAgg := block.(*structs.QueryAggregators)
	return queryAgg, nil
}

func (p *parser) callonQueryAggergatorBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQueryAggergatorBlock1(stack["block"])
}

func (c *current) onFieldSelectBlock1(op, fields any) (any, error) {
	columnsRequest := &structs.ColumnsRequest{}
	if op == nil || string(op.([]byte)) == "+" {
		columnsRequest.IncludeColumns = fields.([]string)
	} else {
		columnsRequest.ExcludeColumns = fields.([]string)
	}

	queryAggregator := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			OutputColumns: columnsRequest,
		},
	}

	return queryAggregator, nil
}

func (p *parser) callonFieldSelectBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldSelectBlock1(stack["op"], stack["fields"])
}

func (c *current) onAggregatorBlock1(aggs, byFields, options any) (any, error) {
	aggNode := &structs.QueryAggregators{}

	// Extract the MeasureAggregators and check if any of the aggregation fields
	// need to be renamed.
	aggsSlice := aggs.([]*aggregator)
	measureAggs := make([]*structs.MeasureAggregator, len(aggsSlice))
	columnsRequest := &structs.ColumnsRequest{}
	columnsRequest.RenameAggregationColumns = make(map[string]string, 0)

	for i, agg := range aggsSlice {
		measureAggs[i] = agg.measureAgg

		if agg.renameOutputField {
			columnsRequest.RenameAggregationColumns[measureAggs[i].String()] = agg.outputFieldNewName
		}
	}

	// If any agg field was renamed, make a QueryAggregators for all the renames.
	if len(columnsRequest.RenameAggregationColumns) > 0 {
		renameNode := &structs.QueryAggregators{
			PipeCommandType: structs.OutputTransformType,
			OutputTransforms: &structs.OutputTransforms{
				OutputColumns: columnsRequest,
			},
		}

		aggNode.Next = renameNode
	}

	if byFields == nil {
		aggNode.PipeCommandType = structs.MeasureAggsType
		aggNode.MeasureOperations = measureAggs
	} else {
		aggNode.PipeCommandType = structs.GroupByType
		aggNode.GroupByRequest = &structs.GroupByRequest{
			MeasureOperations: measureAggs,
			GroupByColumns:    byFields.([]string),
		}
		aggNode.BucketLimit = query.MAX_GRP_BUCKS
	}

	if options != nil {
		aggNode.StatsOptions = options.(*structs.StatsOptions)
	} else {
		aggNode.StatsOptions = initializeStatsOptions()
	}

	return aggNode, nil
}

func (p *parser) callonAggregatorBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregatorBlock1(stack["aggs"], stack["byFields"], stack["options"])
}

func (c *current) onStatsOptions1(option any) (any, error) {
	//Default value
	options := initializeStatsOptions()

	optionSlice := option.([]any)
	for _, opt := range optionSlice {
		optArr := opt.([]string)
		// Check for matching option types
		switch optArr[0] {
		case "dedup_splitvals":
			dedupSplitvalsBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatsBlock: Options: invalid param for dedup_splitvals option, param: %v, err: %v", optArr[1], err)
			}
			options.DedupSplitvals = dedupSplitvalsBool
		case "partitions":
			pVal, err := strconv.ParseUint(optArr[1], 10, 64)
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatsBlock: Options: invalid param for partitions option, param: %v, err: %v", optArr[1], err)
			}
			options.Partitions = pVal
		case "allnum":
			allnumBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatsBlock: Options: invalid param for allnum option, param: %v, err: %v", optArr[1], err)
			}
			options.Allnum = allnumBool
		case "delim":
			options.Delim = optArr[1]
		default:
			return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: invalid option: %v", optArr[0])
		}
	}

	return options, nil
}

func (p *parser) callonStatsOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatsOptions1(stack["option"])
}

func (c *current) onStatsOption1(optionCMD, str any) (any, error) {
	optionArr := []string{optionCMD.(string), str.(string)}
	return optionArr, nil
}

func (p *parser) callonStatsOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatsOption1(stack["optionCMD"], stack["str"])
}

func (c *current) onStatsOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: StatsOptionCMD: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonStatsOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatsOptionCMD1(stack["option"])
}

func (c *current) onGroupbyBlock1(fields any) (any, error) {
	// Wildcard fields are not allowed. See https://docs.splunk.com/Documentation/Splunk/9.1.0/SearchReference/Stats
	for _, field := range fields.([]string) {
		if strings.Contains(field, "*") {
			return nil, errors.New("BY clause cannot contain fields with wildcards")
		}
	}

	return fields, nil
}

func (p *parser) callonGroupbyBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupbyBlock1(stack["fields"])
}

func (c *current) onRegexBlock1(keyAndOp, str any) (any, error) {
	var key, op string
	if keyAndOp == nil {
		key = "*"
		op = "="
	} else {
		keyAndOpSlice := keyAndOp.([]any)
		key = keyAndOpSlice[0].(string)
		op = keyAndOpSlice[1].(string)
	}

	// Remove the quotation marks.
	regex := str.(string)
	regex = regex[1 : len(regex)-1]

	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:           op,
			Field:        key,
			Values:       regex,
			ValueIsRegex: true,
		},
	}

	return node, nil
}

func (p *parser) callonRegexBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexBlock1(stack["keyAndOp"], stack["str"])
}

func (c *current) onClauseLevel41(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*ast.Node)
	for _, v := range rest.([]any) {
		parts := v.([]any) // This will be [(AND / SPACE), ClauseLevel3].
		cur = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     cur,
			Right:    parts[1].(*ast.Node),
		}
	}

	return cur, nil
}

func (p *parser) callonClauseLevel41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel41(stack["first"], stack["rest"])
}

func (c *current) onClauseLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*ast.Node)
	for _, v := range rest.([]any) {
		parts := v.([]any) // This will be [OR, ClauseLevel2].
		cur = &ast.Node{
			NodeType: ast.NodeOr,
			Left:     cur,
			Right:    parts[1].(*ast.Node),
		}
	}

	return cur, nil
}

func (p *parser) callonClauseLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel31(stack["first"], stack["rest"])
}

func (c *current) onClauseLevel22(notList, first any) (any, error) {
	// There's an issue with how queries with AST Not nodes are run, so use
	// De Morgan's law to manipulate the expression.
	node := first.(*ast.Node)
	numNots := len(notList.([]any))

	if numNots%2 == 1 {
		deMorgansLaw(node)
	}

	return node, nil
}

func (p *parser) callonClauseLevel22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel22(stack["notList"], stack["first"])
}

func (c *current) onClauseLevel29(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonClauseLevel29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel29(stack["clause"])
}

func (c *current) onClauseLevel12(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonClauseLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel12(stack["clause"])
}

func (c *current) onClauseLevel18(term any) (any, error) {
	return term, nil
}

func (p *parser) callonClauseLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel18(stack["term"])
}

func (c *current) onSearchTerm1(term any) (any, error) {
	return term, nil
}

func (p *parser) callonSearchTerm1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchTerm1(stack["term"])
}

func (c *current) onTimechartBlock1(tcArgs, limitExpr any) (any, error) {
	aggNode := &structs.QueryAggregators{}

	columnsRequest := &structs.ColumnsRequest{}
	columnsRequest.RenameAggregationColumns = make(map[string]string, 0)
	measureAggs := make([]*structs.MeasureAggregator, 0)

	timechartExpr := &structs.TimechartExpr{}
	byField := ""

	if tcArgs == nil {
		return nil, fmt.Errorf("spl peg: timechart: either single-agg or eval-expression by split-by-clause is required")
	}

	timechartArgs := tcArgs.(*TimechartArgs)

	// TODO: Should add || timechartArgs.evalExpr == nil
	if timechartArgs.singleAggExpr == nil {
		return nil, fmt.Errorf("spl peg: timechart: either single-agg or eval-expression by split-by-clause is required")
	}

	var bOptions *structs.BinOptions

	if timechartArgs.tcOptions != nil {
		if timechartArgs.tcOptions.BinOptions != nil {
			bOptions = timechartArgs.tcOptions.BinOptions
		}
	}

	if timechartArgs.singleAggExpr != nil {
		singleAgg := &structs.SingleAgg{}
		aggTemp := timechartArgs.singleAggExpr

		for i, agg := range aggTemp.aggregators {
			measureAggs = append(measureAggs, agg.measureAgg)

			if agg.renameOutputField {
				measureAggs[i].StrEnc = agg.outputFieldNewName
			}
		}

		singleAgg.MeasureOperations = measureAggs
		timechartExpr.SingleAgg = singleAgg

		if aggTemp.SplitByClause != nil {
			byField = aggTemp.SplitByClause.Field
		}
	}

	// TODO: if timechartArgs.evalExpr != nil {}

	aggNode.PipeCommandType = structs.GroupByType
	aggNode.GroupByRequest = &structs.GroupByRequest{
		MeasureOperations: measureAggs,
		GroupByColumns:    []string{"timestamp"},
	}
	aggNode.BucketLimit = query.MAX_GRP_BUCKS

	if bOptions == nil {
		bOptions = &structs.BinOptions{
			SpanOptions: &structs.SpanOptions{
				DefaultSettings: true,
				SpanLength: &structs.SpanLength{
					Num:       1,
					TimeScalr: utils.TMMinute,
				},
			},
		}
	}

	var limitExprTmp *structs.LimitExpr
	if limitExpr != nil {
		limitExprTmp = limitExpr.(*structs.LimitExpr)
		if len(measureAggs) > 1 {
			limitExprTmp.LimitScoreMode = structs.LSMByFreq
		}
	}

	timeBucket := aggregations.InitTimeBucket(bOptions.SpanOptions.SpanLength.Num, bOptions.SpanOptions.SpanLength.TimeScalr, byField, limitExprTmp, len(measureAggs))
	aggNode.TimeHistogram = timeBucket

	return aggNode, nil
}

func (p *parser) callonTimechartBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimechartBlock1(stack["tcArgs"], stack["limitExpr"])
}

func (c *current) onTimechartArgumentsList1(first, rest any) (any, error) {
	restSlice := rest.([]any)
	timechartArgs := &TimechartArgs{}

	numArgs := 1 + len(restSlice)

	for i := 0; i < numArgs; i++ {

		var numArg interface{}

		if i == 0 {
			numArg = first
		} else {
			numArg = restSlice[i-1].([]any)[1]
		}

		switch numArg.(type) {
		case *singleAggTemp:
			timechartArgs.singleAggExpr = numArg.(*singleAggTemp)
		case *structs.TcOptions:
			timechartArgs.tcOptions = numArg.(*structs.TcOptions)
		default:
			return nil, fmt.Errorf("Spl peg: Timechart: invalid timechart argument: %v", numArg)
		}
	}

	return timechartArgs, nil
}

func (p *parser) callonTimechartArgumentsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimechartArgumentsList1(stack["first"], stack["rest"])
}

func (c *current) onTimechartArgument1(tcArg any) (any, error) {
	return tcArg, nil
}

func (p *parser) callonTimechartArgument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimechartArgument1(stack["tcArg"])
}

func (c *current) onSingleAggExpr1(aggs, splitByClause any) (any, error) {
	singleAggExpr := &singleAggTemp{
		aggregators: aggs.([]*aggregator),
	}

	if splitByClause != nil {
		singleAggExpr.SplitByClause = splitByClause.(*structs.SplitByClause)
	}

	return singleAggExpr, nil
}

func (p *parser) callonSingleAggExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleAggExpr1(stack["aggs"], stack["splitByClause"])
}

func (c *current) onSplitByClause1(field any) (any, error) {
	splitByClause := &structs.SplitByClause{
		Field: field.(string),
	}

	return splitByClause, nil
}

func (p *parser) callonSplitByClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSplitByClause1(stack["field"])
}

func (c *current) onTcOptions1(option any) (any, error) {
	//Default value
	tcOptions := &structs.TcOptions{
		UseNull:  true,
		UseOther: true,
		NullStr:  "null",
		OtherStr: "other",
	}
	switch option.(type) {
	case *structs.BinOptions:
		tcOptions.BinOptions = option.(*structs.BinOptions)
	case [][]string:
		optionSlice := option.([]any)
		for _, opt := range optionSlice {
			optArr := opt.([]string)
			switch optArr[0] {
			case "usenull":
				useNullBool, err := strconv.ParseBool(optArr[1])
				if err != nil {
					return nil, fmt.Errorf("Spl peg: Timechart: TcOptions: %v", err)
				}
				tcOptions.UseNull = useNullBool
			case "useother":
				useOtherBool, err := strconv.ParseBool(optArr[1])
				if err != nil {
					return nil, fmt.Errorf("Spl peg: Timechart: TcOptions: %v", err)
				}
				tcOptions.UseOther = useOtherBool
			case "nullstr":
				tcOptions.OtherStr = optArr[1]
			case "otherstr":
				tcOptions.OtherStr = optArr[1]
			default:
				return nil, fmt.Errorf("Spl peg: Timechart: TcOptions: invalid option: %v", optArr[0])
			}
		}
	default:
		return nil, fmt.Errorf("Spl peg: Timechart: Invalid tcOptions %v", option)
	}
	return tcOptions, nil
}

func (p *parser) callonTcOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTcOptions1(stack["option"])
}

func (c *current) onTcOption1(tcOptionCMD, val any) (any, error) {
	tcOptionArr := []string{tcOptionCMD.(string), val.(string)}
	return tcOptionArr, nil
}

func (p *parser) callonTcOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTcOption1(stack["tcOptionCMD"], stack["val"])
}

func (c *current) onTcOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Timechart: TcOptionCMD: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonTcOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTcOptionCMD1(stack["option"])
}

func (c *current) onBinOptions1(spanOptions any) (any, error) {
	binOptions := &structs.BinOptions{
		SpanOptions: spanOptions.(*structs.SpanOptions),
	}
	return binOptions, nil
}

func (p *parser) callonBinOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptions1(stack["spanOptions"])
}

func (c *current) onSpanOptions1(spanLength any) (any, error) {
	spanOptions := &structs.SpanOptions{
		SpanLength: spanLength.(*structs.SpanLength),
	}
	return spanOptions, nil
}

func (p *parser) callonSpanOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpanOptions1(stack["spanLength"])
}

func (c *current) onSpanLength1(intAsStr, timeScale any) (any, error) {
	num, err := strconv.Atoi(intAsStr.(string))
	if err != nil {
		return nil, fmt.Errorf("SpanLength: Invalid num (%v): %v", intAsStr.(string), err)
	}

	spanLength := &structs.SpanLength{
		Num:       num,
		TimeScalr: timeScale.(utils.TimeUnit),
	}
	return spanLength, nil
}

func (p *parser) callonSpanLength1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpanLength1(stack["intAsStr"], stack["timeScale"])
}

func (c *current) onTimeScale1(timeUnit any) (any, error) {
	return timeUnit, nil
}

func (p *parser) callonTimeScale1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimeScale1(stack["timeUnit"])
}

func (c *current) onLimitExpr1(sortBy, intAsStr any) (any, error) {
	num, err := strconv.Atoi(intAsStr.(string))
	if err != nil {
		return nil, fmt.Errorf("SpanLength: Invalid num (%v): %v", intAsStr.(string), err)
	}

	limitExpr := &structs.LimitExpr{
		IsTop: true, // Default Value
		Num:   num,
	}

	if sortBy != nil {
		sortByStr, err := transferUint8ToString(sortBy)
		if err != nil {
			return nil, fmt.Errorf("Spl peg: Timechart: %v", err)
		}
		if sortByStr == "bottom" {
			limitExpr.IsTop = false
		}
	}

	return limitExpr, nil
}

func (p *parser) callonLimitExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitExpr1(stack["sortBy"], stack["intAsStr"])
}

func (c *current) onStatisticBlock1(statisticExpr any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		StatisticColRequest: statisticExpr.(*structs.StatisticExpr),
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	measureAgg := &structs.MeasureAggregator{
		MeasureCol:  "*",
		MeasureFunc: utils.Count,
	}

	measureOperations := make([]*structs.MeasureAggregator, 1)
	measureOperations[0] = measureAgg

	groupByColumns := append(statisticExpr.(*structs.StatisticExpr).FieldList, statisticExpr.(*structs.StatisticExpr).ByClause...)

	aggNode := &structs.QueryAggregators{}
	aggNode.Next = root
	aggNode.PipeCommandType = structs.GroupByType
	aggNode.GroupByRequest = &structs.GroupByRequest{
		MeasureOperations: measureOperations,
		GroupByColumns:    groupByColumns,
	}

	return aggNode, nil
}

func (p *parser) callonStatisticBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticBlock1(stack["statisticExpr"])
}

func (c *current) onStatisticExpr1(cmd, limit, fieldList, byClause, options any) (any, error) {

	statisticExpr := &structs.StatisticExpr{
		FieldList: fieldList.([]interface{})[1].([]string),
	}

	statisticCmd, err := transferUint8ToString(cmd)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: StatisticExpr: %v", err)
	}

	if statisticCmd == "top" {
		statisticExpr.StatisticFunctionMode = structs.SFMTop
	} else {
		statisticExpr.StatisticFunctionMode = structs.SFMRare
	}

	if limit != nil {
		statisticExpr.Limit = limit.(string)
	}

	if options != nil {
		statisticExpr.StatisticOptions = options.(*structs.StatisticOptions)
	} else {
		statisticExpr.StatisticOptions = &structs.StatisticOptions{
			ShowCount:    true,
			CountField:   "count",
			ShowPerc:     true,
			PercentField: "percent",
			UseOther:     false,
			OtherStr:     "Other",
		}
	}

	if byClause != nil {
		statisticExpr.ByClause = byClause.([]string)
	}

	return statisticExpr, nil
}

func (p *parser) callonStatisticExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticExpr1(stack["cmd"], stack["limit"], stack["fieldList"], stack["byClause"], stack["options"])
}

func (c *current) onStatisticLimit2(number any) (any, error) {
	return number.(string), nil
}

func (p *parser) callonStatisticLimit2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticLimit2(stack["number"])
}

func (c *current) onStatisticLimit7(limit any) (any, error) {
	return limit.(string), nil
}

func (p *parser) callonStatisticLimit7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticLimit7(stack["limit"])
}

func (c *current) onStatisticOptions1(option any) (any, error) {
	//Default value
	options := &structs.StatisticOptions{
		ShowCount:    true,
		CountField:   "count",
		ShowPerc:     true,
		PercentField: "percent",
		UseOther:     false,
		OtherStr:     "other",
	}

	optionSlice := option.([]any)
	for _, opt := range optionSlice {
		optArr := opt.([]string)
		// Check for matching option types
		switch optArr[0] {
		case "showcount":
			showCountBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.ShowCount = showCountBool
		case "countfield":
			options.CountField = optArr[1]
		case "showperc":
			showPercBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.ShowPerc = showPercBool
		case "percentfield":
			options.PercentField = optArr[1]
		case "useother":
			useOtherBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.UseOther = useOtherBool
		case "otherstr":
			options.OtherStr = optArr[1]
		default:
			return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: invalid option")
		}
	}

	return options, nil
}

func (p *parser) callonStatisticOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticOptions1(stack["option"])
}

func (c *current) onStatisticOption1(optionCMD, field any) (any, error) {
	optionArr := []string{optionCMD.(string), field.(string)}
	return optionArr, nil
}

func (p *parser) callonStatisticOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticOption1(stack["optionCMD"], stack["field"])
}

func (c *current) onStatisticOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: StatisticExpr: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonStatisticOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticOptionCMD1(stack["option"])
}

func (c *current) onByClause2(fieldList any) (any, error) {
	return fieldList.([]string), nil
}

func (p *parser) callonByClause2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByClause2(stack["fieldList"])
}

func (c *current) onByClause7(groupByBlock any) (any, error) {
	return groupByBlock.([]string), nil
}

func (p *parser) callonByClause7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByClause7(stack["groupByBlock"])
}

func (c *current) onDedupBlock1(dedupExpr any) (any, error) {

	letColReq := &structs.LetColumnsRequest{
		DedupColRequest: dedupExpr.(*structs.DedupExpr),
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonDedupBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupBlock1(stack["dedupExpr"])
}

func (c *current) onDedupExpr1(limitArr, options1, fieldList, options2, sortByClause any) (any, error) {
	dedupExpr := &structs.DedupExpr{
		FieldList:         fieldList.([]string),
		Limit:             1,
		DedupCombinations: make(map[string]map[int][]structs.SortValue, 0),
		DedupRecords:      make(map[string]map[string]interface{}, 0),
	}

	if limitArr != nil {
		limitStr := limitArr.([]interface{})[1].(string)
		limit, err := strconv.ParseUint(limitStr, 10, 64)
		if err != nil || limit == 0 {
			return nil, fmt.Errorf("Invalid limit (%v): %v", limitStr, err)
		}
		dedupExpr.Limit = limit
	}

	dedupExpr.DedupOptions = &structs.DedupOptions{
		Consecutive: false,
		KeepEmpty:   false,
		KeepEvents:  false,
	}

	if options1 != nil {
		dedupExpr.DedupOptions = options1.(*structs.DedupOptions)
	}
	if options2 != nil {
		options := options2.(*structs.DedupOptions)

		if options.Consecutive {
			dedupExpr.DedupOptions.Consecutive = options.Consecutive
		}
		if options.KeepEmpty {
			dedupExpr.DedupOptions.KeepEmpty = options.KeepEmpty
		}
		if options.KeepEvents {
			dedupExpr.DedupOptions.KeepEvents = options.KeepEvents
		}
	}

	if sortByClause != nil {
		dedupExpr.DedupSortEles = sortByClause.([]*structs.SortElement)

		// Make the DedupSortAscending from the DedupSortEles.
		dedupExpr.DedupSortAscending = make([]int, len(dedupExpr.DedupSortEles))
		for i, ele := range dedupExpr.DedupSortEles {
			if ele.SortByAsc {
				dedupExpr.DedupSortAscending[i] = 1
			} else {
				dedupExpr.DedupSortAscending[i] = -1
			}
		}
	}

	return dedupExpr, nil
}

func (p *parser) callonDedupExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupExpr1(stack["limitArr"], stack["options1"], stack["fieldList"], stack["options2"], stack["sortByClause"])
}

func (c *current) onDedupFieldName1(field any) (any, error) {
	return field, nil
}

func (p *parser) callonDedupFieldName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupFieldName1(stack["field"])
}

func (c *current) onDedupFieldList1(first, rest any) (any, error) {
	// Convert `rest` to a slice. Each element of the slice will be a 2-element
	// slice where the first element is " " and the second is a FieldName.
	restSlice := rest.([]any)

	numFieldNames := 1 + len(restSlice)
	fields := make([]string, numFieldNames)
	fields[0] = first.(string)

	for i := 1; i < numFieldNames; i++ {
		separatorAndField := restSlice[i-1].([]any)
		fields[i] = separatorAndField[1].(string)
	}

	return fields, nil
}

func (p *parser) callonDedupFieldList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupFieldList1(stack["first"], stack["rest"])
}

func (c *current) onDedupOptions1(option any) (any, error) {
	//Default value
	options := &structs.DedupOptions{
		Consecutive: false,
		KeepEmpty:   false,
		KeepEvents:  false,
	}

	optionSlice := option.([]any)
	for _, opt := range optionSlice {
		optArr := opt.([]string)
		// Check for matching option types
		switch optArr[0] {
		case "consecutive":
			consecutiveBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: DedupBlock: Options: %v", err)
			}
			options.Consecutive = consecutiveBool
		case "keepempty":
			keepEmptyBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: DedupBlock: Options: %v", err)
			}
			options.KeepEmpty = keepEmptyBool
		case "keepevents":
			keepEventsBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: DedupBlock: Options: %v", err)
			}
			options.KeepEvents = keepEventsBool
		default:
			return nil, fmt.Errorf("Spl peg: DedupBlock: Options: invalid option")
		}
	}

	return options, nil
}

func (p *parser) callonDedupOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupOptions1(stack["option"])
}

func (c *current) onDedupOption1(optionCMD, field any) (any, error) {
	optionArr := []string{optionCMD.(string), field.(string)}
	return optionArr, nil
}

func (p *parser) callonDedupOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupOption1(stack["optionCMD"], stack["field"])
}

func (c *current) onDedupOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: DedupExpr: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonDedupOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupOptionCMD1(stack["option"])
}

func (c *current) onDedupSortByClause1(dedupSortEles any) (any, error) {
	return dedupSortEles, nil
}

func (p *parser) callonDedupSortByClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupSortByClause1(stack["dedupSortEles"])
}

func (c *current) onSortElements1(first, rest any) (any, error) {
	restSlice := rest.([]any)

	length := 1 + len(restSlice)
	sortEles := make([]*structs.SortElement, length)
	sortEles[0] = first.(*structs.SortElement)

	for i := 1; i < length; i++ {
		elements := restSlice[i-1].([]any)
		sortEles[i] = elements[1].(*structs.SortElement)
	}

	return sortEles, nil
}

func (p *parser) callonSortElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortElements1(stack["first"], stack["rest"])
}

func (c *current) onSingleSortElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSingleSortElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleSortElement1(stack["element"])
}

func (c *current) onSingleSortElementWithoutCast1(sortBySymbol, field any) (any, error) {
	sortByAsc := true

	symbol := sortBySymbol.([]byte)
	if len(symbol) > 0 && symbol[0] == '-' {
		sortByAsc = false
	}

	return &structs.SortElement{
		SortByAsc: sortByAsc,
		Op:        "",
		Field:     field.(string),
	}, nil
}

func (p *parser) callonSingleSortElementWithoutCast1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleSortElementWithoutCast1(stack["sortBySymbol"], stack["field"])
}

func (c *current) onSingleSortElementWithCast1(sortBySymbol, op, field any) (any, error) {
	sortByAsc := true

	symbol := sortBySymbol.([]byte)
	if len(symbol) > 0 && symbol[0] == '-' {
		sortByAsc = false
	}

	opStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: singleSortElementWithCast: %v", err)
	}

	return &structs.SortElement{
		SortByAsc: sortByAsc,
		Op:        opStr,
		Field:     field.(string),
	}, nil
}

func (p *parser) callonSingleSortElementWithCast1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleSortElementWithCast1(stack["sortBySymbol"], stack["op"], stack["field"])
}

func (c *current) onRenameBlock1(renameExpr any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		RenameColRequest: renameExpr.(*structs.RenameExpr),
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonRenameBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameBlock1(stack["renameExpr"])
}

func (c *current) onRenameExpr2(originalPattern, newPattern any) (any, error) {
	renameExpr := &structs.RenameExpr{
		RenameExprMode:  structs.REMPhrase,
		OriginalPattern: originalPattern.(string),
		NewPattern:      removeQuotes(newPattern),
	}

	return renameExpr, nil
}

func (p *parser) callonRenameExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameExpr2(stack["originalPattern"], stack["newPattern"])
}

func (c *current) onRenameExpr9(originalPattern, newPattern any) (any, error) {
	isRegex, err := isRegexRename(originalPattern.(string), newPattern.(string))
	if err != nil {
		return nil, fmt.Errorf("Spl peg: RenameExpr: %v", err)
	}

	var renameExprMode structs.RenameExprMode
	if isRegex {
		renameExprMode = structs.REMRegex
	} else {
		renameExprMode = structs.REMOverride
	}

	renameExpr := &structs.RenameExpr{
		RenameExprMode:  renameExprMode,
		OriginalPattern: originalPattern.(string),
		NewPattern:      newPattern.(string),
	}

	return renameExpr, nil
}

func (p *parser) callonRenameExpr9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameExpr9(stack["originalPattern"], stack["newPattern"])
}

func (c *current) onRexBlock1(field, str any) (any, error) {
	pattern := removeQuotes(str)
	rexColNames, err := getRexColNames(pattern)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: RexBlock: %v", err)
	}
	rexExpr := &structs.RexExpr{
		FieldName:   field.(string),
		Pattern:     transferPCREToRE2(pattern),
		RexColNames: rexColNames,
	}

	letColReq := &structs.LetColumnsRequest{
		RexColRequest: rexExpr,
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonRexBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRexBlock1(stack["field"], stack["str"])
}

func (c *current) onSortBlock1(limit, sortByEles any) (any, error) {

	sortExpr := &structs.SortExpr{
		SortEles:    sortByEles.([]*structs.SortElement),
		SortRecords: make(map[string]map[string]interface{}, 0),
		Limit:       10000,
	}

	if limit != nil {
		sortExpr.Limit = limit.(uint64)
	}

	ascendingArr := make([]int, len(sortExpr.SortEles))
	for i, ele := range sortExpr.SortEles {
		if ele.SortByAsc {
			ascendingArr[i] = 1
		} else {
			ascendingArr[i] = -1
		}
	}

	sortExpr.SortAscending = ascendingArr

	letColReq := &structs.LetColumnsRequest{
		SortColRequest: sortExpr,
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonSortBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortBlock1(stack["limit"], stack["sortByEles"])
}

func (c *current) onSortLimit1(intAsStr any) (any, error) {
	limit, err := strconv.ParseUint(intAsStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid limit (%v): %v", intAsStr.(string), err)
	}

	if limit == 0 {
		limit = math.MaxUint64
	}

	return limit, nil
}

func (p *parser) callonSortLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortLimit1(stack["intAsStr"])
}

func (c *current) onEvalBlock1(first, rest any) (any, error) {
	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: first.(*structs.LetColumnsRequest),
		},
	}

	leafQueryAgg := root
	restSlice := rest.([]any)
	for i := range restSlice {
		CommaSpaceAndEval := restSlice[i].([]any)
		nextQueryAgg := &structs.QueryAggregators{
			PipeCommandType: structs.OutputTransformType,
			OutputTransforms: &structs.OutputTransforms{
				LetColumns: CommaSpaceAndEval[1].(*structs.LetColumnsRequest),
			},
		}

		leafQueryAgg.Next = nextQueryAgg
		leafQueryAgg = leafQueryAgg.Next
	}

	return root, nil
}

func (p *parser) callonEvalBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalBlock1(stack["first"], stack["rest"])
}

func (c *current) onSingleEval1(field, expr any) (any, error) {
	fieldStr := field.(string)
	if strings.Contains(fieldStr, "*") {
		return nil, fmt.Errorf("New fields must not contain wildcards; invalid field: %v", field)
	}

	letColumnsRequest := expr.(*structs.LetColumnsRequest)
	letColumnsRequest.NewColName = fieldStr

	return letColumnsRequest, nil
}

func (p *parser) callonSingleEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleEval1(stack["field"], stack["expr"])
}

func (c *current) onEvalExpression1(value any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		ValueColRequest: value.(*structs.ValueExpr),
	}

	return letColReq, nil
}

func (p *parser) callonEvalExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalExpression1(stack["value"])
}

func (c *current) onConditionExpr2(condition, trueValue, falseValue any) (any, error) {

	node := &structs.ConditionExpr{
		Op:         "if",
		BoolExpr:   condition.(*structs.BoolExpr),
		TrueValue:  trueValue.(*structs.ValueExpr),
		FalseValue: falseValue.(*structs.ValueExpr),
	}

	return node, nil
}

func (p *parser) callonConditionExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr2(stack["condition"], stack["trueValue"], stack["falseValue"])
}

func (c *current) onConditionExpr15(opName, pair, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: ConditionExpr: %v", err)
	}
	pairs := make([]*structs.ConditionValuePair, 1)
	pairs[0] = pair.(*structs.ConditionValuePair)

	if rest != nil {
		restSlice := rest.([]any)
		for i := range restSlice {
			ele := restSlice[i].([]any)
			pairs = append(pairs, ele[1].(*structs.ConditionValuePair))
		}
	}

	node := &structs.ConditionExpr{
		Op:                  opNameStr,
		ConditionValuePairs: pairs,
	}

	return node, nil
}

func (p *parser) callonConditionExpr15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr15(stack["opName"], stack["pair"], stack["rest"])
}

func (c *current) onConditionExpr30(valueExpr, rest any) (any, error) {
	restSlice := rest.([]any)
	valueList := make([]*structs.ValueExpr, 1+len(restSlice))
	valueList[0] = valueExpr.(*structs.ValueExpr)

	for i := range restSlice {
		valueAtom := restSlice[i].([]any)
		valueList[i+1] = valueAtom[1].(*structs.ValueExpr)
	}

	node := &structs.ConditionExpr{
		Op:        "coalesce",
		ValueList: valueList,
	}

	return node, nil
}

func (p *parser) callonConditionExpr30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr30(stack["valueExpr"], stack["rest"])
}

func (c *current) onConditionExpr42(leftValue, rightValue any) (any, error) {
	valueList := make([]*structs.ValueExpr, 2)
	valueList[0] = leftValue.(*structs.ValueExpr)
	valueList[1] = rightValue.(*structs.ValueExpr)

	node := &structs.ConditionExpr{
		Op:        "nullif",
		ValueList: valueList,
	}

	return node, nil
}

func (p *parser) callonConditionExpr42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr42(stack["leftValue"], stack["rightValue"])
}

func (c *current) onConditionValuePair1(condition, value any) (any, error) {
	conditionValuePair := &structs.ConditionValuePair{
		Condition: condition.(*structs.BoolExpr),
		Value:     value.(*structs.ValueExpr),
	}
	return conditionValuePair, nil
}

func (p *parser) callonConditionValuePair1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionValuePair1(stack["condition"], stack["value"])
}

func (c *current) onTextExpr2(opName, stringExpr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:          opNameStr,
		Param:       stringExpr.(*structs.StringExpr),
		StrToRemove: "",
	}
	return node, nil
}

func (p *parser) callonTextExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr2(stack["opName"], stack["stringExpr"])
}

func (c *current) onTextExpr16(opName, firstVal, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	if rest == nil {
		return firstVal, nil
	}
	restSlice := rest.([]any)
	values := make([]*structs.StringExpr, 1+len(restSlice))
	values[0] = firstVal.(*structs.StringExpr)

	for i := range restSlice {
		stringAtom := restSlice[i].([]any)
		values[i+1] = stringAtom[1].(*structs.StringExpr)
	}
	node := &structs.TextExpr{
		Op:        opNameStr,
		ValueList: values,
	}
	return node, nil
}

func (p *parser) callonTextExpr16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr16(stack["opName"], stack["firstVal"], stack["rest"])
}

func (c *current) onTextExpr33(opName, stringExpr, delim any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:        opNameStr,
		Param:     stringExpr.(*structs.StringExpr),
		Delimiter: delim.(*structs.StringExpr),
	}
	return node, nil
}

func (p *parser) callonTextExpr33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr33(stack["opName"], stack["stringExpr"], stack["delim"])
}

func (c *current) onTextExpr46(opName, stringExpr, startIndex, lengthParam any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	var lengthConverted *structs.NumericExpr
	if lengthParam != nil {
		lengthSlice, ok := lengthParam.([]interface{})
		if ok && len(lengthSlice) > 1 {
			length, ok := lengthSlice[1].(*structs.NumericExpr)
			if ok {
				lengthConverted = length
			} else {
				return nil, fmt.Errorf("Spl peg: TextExpr: Unable to assert length as *structs.NumericExpr")
			}
		}
	}
	node := &structs.TextExpr{
		Op:         opNameStr,
		Param:      stringExpr.(*structs.StringExpr),
		StartIndex: startIndex.(*structs.NumericExpr),
		LengthExpr: lengthConverted,
	}
	return node, nil
}

func (p *parser) callonTextExpr46() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr46(stack["opName"], stack["stringExpr"], stack["startIndex"], stack["lengthParam"])
}

func (c *current) onTextExpr62(value, format any) (any, error) {
	var formatExpr *structs.StringExpr
	if format != nil {
		formatSlice := format.([]interface{})
		formatExpr, _ = formatSlice[1].(*structs.StringExpr)
	}
	return &structs.TextExpr{
		IsTerminal: false,
		Op:         "tostring",
		Val:        value.(*structs.ValueExpr),
		Param:      formatExpr,
	}, nil
}

func (p *parser) callonTextExpr62() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr62(stack["value"], stack["format"])
}

func (c *current) onTextExpr74(opName, expr, strToRemoveExpr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}

	strToRemove := " \t"
	if strToRemoveExpr != nil {
		strToRemove = strToRemoveExpr.(string)
	}

	node := &structs.TextExpr{
		Op:          opNameStr,
		Param:       expr.(*structs.StringExpr),
		StrToRemove: removeQuotes(strToRemove),
	}

	return node, nil
}

func (p *parser) callonTextExpr74() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr74(stack["opName"], stack["expr"], stack["strToRemoveExpr"])
}

func (c *current) onTextExpr88(inputField, path any) (any, error) {
	pathExpr := path.(*SPathFieldExpr)
	return &structs.TextExpr{
		Op: "spath",
		SPathExpr: &structs.SPathExpr{
			InputColName:    inputField.(string),
			Path:            pathExpr.PathValue,
			IsPathFieldName: pathExpr.IsPathFieldName,
		},
	}, nil
}

func (p *parser) callonTextExpr88() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr88(stack["inputField"], stack["path"])
}

func (c *current) onTextExpr100(mask, ip any) (any, error) {
	return &structs.TextExpr{
		Op:    "ipmask",
		Val:   ip.(*structs.ValueExpr),
		Param: mask.(*structs.StringExpr),
	}, nil
}

func (p *parser) callonTextExpr100() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr100(stack["mask"], stack["ip"])
}

func (c *current) onTextExpr110(obj, key, value any) (any, error) {
	stringExpr := &structs.StringExpr{
		StringExprMode: structs.SEMRawStringList,
		StringList:     []string{key.(string), value.(string)},
	}
	return &structs.TextExpr{
		Op:    "object_to_array",
		Val:   obj.(*structs.ValueExpr),
		Param: stringExpr,
	}, nil
}

func (p *parser) callonTextExpr110() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr110(stack["obj"], stack["key"], stack["value"])
}

func (c *current) onTextExpr123(format, rest any) (any, error) {
	textExpr := &structs.TextExpr{
		Op:    "printf",
		Param: format.(*structs.StringExpr),
	}
	if rest != nil {
		restSlice := rest.([]any)
		valueList := make([]*structs.StringExpr, len(restSlice))

		for i := range restSlice {
			valueAtom := restSlice[i].([]any)
			valueList[i] = valueAtom[1].(*structs.StringExpr)
		}
		textExpr.ValueList = valueList
	}

	return textExpr, nil
}

func (p *parser) callonTextExpr123() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr123(stack["format"], stack["rest"])
}

func (c *current) onTextExpr135(containInternalFields any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMRawString,
		RawString:      "true", // default value
	}

	if containInternalFields != nil {
		restSlice := containInternalFields.([]any)
		containInternalFieldsStr, err := transferUint8ToString(restSlice[0])
		if err != nil {
			return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
		}
		if containInternalFieldsStr == "false" {
			expr.RawString = "false"
		}
	}

	return &structs.TextExpr{
		Op:    "tojson",
		Param: expr,
	}, nil
}

func (p *parser) callonTextExpr135() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr135(stack["containInternalFields"])
}

func (c *current) onTextExpr147(opName, condition any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: Failed to recognize operator: %v, err= %v", opName, err)
	}

	node := &structs.TextExpr{
		Op:        opNameStr,
		Condition: condition.(*structs.BoolExpr),
	}

	return node, nil
}

func (p *parser) callonTextExpr147() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr147(stack["opName"], stack["condition"])
}

func (c *current) onTextExpr155(opName, stringExpr, startIndex, endIndex any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:         opNameStr,
		Param:      stringExpr.(*structs.StringExpr),
		StartIndex: startIndex.(*structs.NumericExpr),
	}
	if endIndex != nil {
		node.EndIndex = endIndex.(*structs.NumericExpr)
	}

	return node, nil
}

func (p *parser) callonTextExpr155() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr155(stack["opName"], stack["stringExpr"], stack["startIndex"], stack["endIndex"])
}

func (c *current) onTextExpr169(opName, stringExpr, expr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:    opNameStr,
		Val:   expr.(*structs.ValueExpr),
		Param: stringExpr.(*structs.StringExpr),
	}

	return node, nil
}

func (p *parser) callonTextExpr169() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr169(stack["opName"], stack["stringExpr"], stack["expr"])
}

func (c *current) onTextExpr180(opName, startIndex, endIndex, stringExpr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:         opNameStr,
		StartIndex: startIndex.(*structs.NumericExpr),
		EndIndex:   endIndex.(*structs.NumericExpr),
	}
	if stringExpr != nil {
		node.Param = stringExpr.(*structs.StringExpr)
	}

	return node, nil
}

func (p *parser) callonTextExpr180() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr180(stack["opName"], stack["startIndex"], stack["endIndex"], stack["stringExpr"])
}

func (c *current) onTextExpr195(opName, mvLeft, mvRight, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	values := make([]*structs.StringExpr, 2)
	values[0] = mvLeft.(*structs.StringExpr)
	values[1] = mvRight.(*structs.StringExpr)

	node := &structs.TextExpr{
		Op:        opNameStr,
		ValueList: values,
	}

	if rest != nil {
		restSlice := rest.([]any)
		node.Delimiter = restSlice[1].(*structs.StringExpr)
	}

	return node, nil
}

func (p *parser) callonTextExpr195() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr195(stack["opName"], stack["mvLeft"], stack["mvRight"], stack["rest"])
}

func (c *current) onTextExpr211(opName, stringExpr, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}

	node := &structs.TextExpr{
		Op:         opNameStr,
		Param:      stringExpr.(*structs.StringExpr),
		InferTypes: false, // default value
	}

	if rest != nil {
		restSlice := rest.([]any)
		inferTypes, err := transferUint8ToString(restSlice[1])
		if err != nil {
			return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
		}
		if inferTypes == "true" {
			node.InferTypes = true
		}
	}

	return node, nil
}

func (p *parser) callonTextExpr211() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr211(stack["opName"], stack["stringExpr"], stack["rest"])
}

func (c *current) onTextExpr227(field, threshold, match, delims any) (any, error) {
	textExpr := &structs.TextExpr{
		Op: "cluster",
	}

	cluster := &structs.Cluster{
		Field:     field.(string),
		Threshold: 0.8,
		Match:     "termlist",
	}

	if threshold != nil {
		slice := threshold.([]interface{})
		thresholdStr := slice[2].(string)
		val, err := strconv.ParseFloat(thresholdStr, 64)
		if err != nil {
			return nil, fmt.Errorf("Spl peg: TextExpr: invalid threshold: %v", thresholdStr)
		}
		cluster.Threshold = val
	}

	if match != nil {
		slice := match.([]interface{})
		matchStr, err := transferUint8ToString(slice[2])
		if err != nil {
			return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
		}
		cluster.Match = matchStr
	}

	if delims != nil {
		slice := delims.([]interface{})
		delimsStr := slice[2].(string)
		cluster.Delims = delimsStr
	}

	textExpr.Cluster = cluster

	return textExpr, nil
}

func (p *parser) callonTextExpr227() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr227(stack["field"], stack["threshold"], stack["match"], stack["delims"])
}

func (c *current) onTextExpr255(filter any) (any, error) {
	textExpr := &structs.TextExpr{
		Op: "getfields",
	}

	if filter != nil {
		textExpr.Param = filter.(*structs.StringExpr)
	}

	return textExpr, nil
}

func (p *parser) callonTextExpr255() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr255(stack["filter"])
}

func (c *current) onTextExpr263(valueExpr any) (any, error) {
	return &structs.TextExpr{
		Op:  "typeof",
		Val: valueExpr.(*structs.ValueExpr),
	}, nil
}

func (p *parser) callonTextExpr263() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr263(stack["valueExpr"])
}

func (c *current) onTextExpr270(val, regex, replacement any) (any, error) {
	return &structs.TextExpr{
		Op:        "replace",
		Val:       val.(*structs.ValueExpr),
		ValueList: []*structs.StringExpr{regex.(*structs.StringExpr), replacement.(*structs.StringExpr)},
	}, nil
}

func (p *parser) callonTextExpr270() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr270(stack["val"], stack["regex"], stack["replacement"])
}

func (c *current) onTextExpr283(val, format any) (any, error) {
	return &structs.TextExpr{
		Op:    "strftime",
		Val:   val.(*structs.ValueExpr),
		Param: format.(*structs.StringExpr),
	}, nil
}

func (p *parser) callonTextExpr283() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr283(stack["val"], stack["format"])
}

func (c *current) onTextExpr293(val, format any) (any, error) {
	return &structs.TextExpr{
		Op:    "strptime",
		Val:   val.(*structs.ValueExpr),
		Param: format.(*structs.StringExpr),
	}, nil
}

func (p *parser) callonTextExpr293() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr293(stack["val"], stack["format"])
}

func (c *current) onQuotedPathString1(str any) (any, error) {
	return &SPathFieldExpr{
		PathValue:       removeQuotes(str),
		IsPathFieldName: false,
	}, nil
}

func (p *parser) callonQuotedPathString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedPathString1(stack["str"])
}

func (c *current) onUnquotedPathValue1(str any) (any, error) {
	return &SPathFieldExpr{
		PathValue:       removeQuotes(str),
		IsPathFieldName: true,
	}, nil
}

func (p *parser) callonUnquotedPathValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedPathValue1(stack["str"])
}

func (c *current) onStrToRemoveExpr1(strToRemove any) (any, error) {
	return strToRemove, nil
}

func (p *parser) callonStrToRemoveExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStrToRemoveExpr1(stack["strToRemove"])
}

func (c *current) onEvalFieldToRead2() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEvalFieldToRead2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalFieldToRead2()
}

func (c *current) onEvalFieldToRead8(field any) (any, error) {
	return field, nil
}

func (p *parser) callonEvalFieldToRead8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalFieldToRead8(stack["field"])
}

func (c *current) onWhereBlock1(condition any) (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			FilterRows: condition.(*structs.BoolExpr),
		},
	}

	return queryAgg, nil
}

func (p *parser) callonWhereBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereBlock1(stack["condition"])
}

func (c *current) onBoolExpr1(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonBoolExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExpr1(stack["expr"])
}

func (c *current) onBoolExprLevel41(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.BoolExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.BoolExpr{
			IsTerminal: false,
			BoolOp:     structs.BoolOpOr,
			LeftBool:   cur,
			RightBool:  opAndClause[1].(*structs.BoolExpr),
		}
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel41(stack["first"], stack["rest"])
}

func (c *current) onBoolExprLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.BoolExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.BoolExpr{
			IsTerminal: false,
			BoolOp:     structs.BoolOpAnd,
			LeftBool:   cur,
			RightBool:  opAndClause[1].(*structs.BoolExpr),
		}
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel31(stack["first"], stack["rest"])
}

func (c *current) onBoolExprLevel22(first any) (any, error) {
	cur := &structs.BoolExpr{
		IsTerminal: false,
		BoolOp:     structs.BoolOpNot,
		LeftBool:   first.(*structs.BoolExpr),
		RightBool:  nil,
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel22(stack["first"])
}

func (c *current) onBoolExprLevel29(first any) (any, error) {
	return first, nil
}

func (p *parser) callonBoolExprLevel29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel29(stack["first"])
}

func (c *current) onBoolExprLevel12(first any) (any, error) {
	return first, nil
}

func (p *parser) callonBoolExprLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel12(stack["first"])
}

func (c *current) onBoolExprLevel18(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonBoolExprLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel18(stack["expr"])
}

func (c *current) onEvalComparisonExpr2(op, value any) (any, error) {
	opNameStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: BoolExpr: %v", err)
	}
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  value.(*structs.ValueExpr),
		RightValue: nil,
		ValueOp:    opNameStr,
	}
	return expr, nil
}

func (p *parser) callonEvalComparisonExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalComparisonExpr2(stack["op"], stack["value"])
}

func (c *current) onEvalComparisonExpr17(opName, leftValue, rightValue any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: BoolExpr: %v", err)
	}
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  leftValue.(*structs.ValueExpr),
		RightValue: rightValue.(*structs.ValueExpr),
		ValueOp:    opNameStr,
	}
	return expr, nil
}

func (p *parser) callonEvalComparisonExpr17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalComparisonExpr17(stack["opName"], stack["leftValue"], stack["rightValue"])
}

func (c *current) onEvalComparisonExpr32(left, valueToJudge, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ValueExpr, 1+len(restSlice))
	slice[0] = valueToJudge.(*structs.ValueExpr)

	for i := range restSlice {
		valueAtom := restSlice[i].([]any)
		slice[i+1] = valueAtom[1].(*structs.ValueExpr)
	}

	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  left.(*structs.ValueExpr),
		ValueList:  slice,
		ValueOp:    "in",
	}
	return expr, nil
}

func (p *parser) callonEvalComparisonExpr32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalComparisonExpr32(stack["left"], stack["valueToJudge"], stack["rest"])
}

func (c *current) onEvalComparisonExpr47(valueToJudge, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ValueExpr, len(restSlice))

	for i := range restSlice {
		valueAtom := restSlice[i].([]any)
		slice[i] = valueAtom[1].(*structs.ValueExpr)
	}

	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  valueToJudge.(*structs.ValueExpr),
		ValueList:  slice,
		ValueOp:    "in",
	}
	return expr, nil
}

func (p *parser) callonEvalComparisonExpr47() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalComparisonExpr47(stack["valueToJudge"], stack["rest"])
}

func (c *current) onBoolComparisonExpr1(left, op, right any) (any, error) {
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  left.(*structs.ValueExpr),
		RightValue: right.(*structs.ValueExpr),
		ValueOp:    op.(string),
	}

	return expr, nil
}

func (p *parser) callonBoolComparisonExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolComparisonExpr1(stack["left"], stack["op"], stack["right"])
}

func (c *current) onValueExpr2(condition any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMConditionExpr,
		ConditionExpr: condition.(*structs.ConditionExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr2(stack["condition"])
}

func (c *current) onValueExpr5(condition any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMConditionExpr,
		ConditionExpr: condition.(*structs.ConditionExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr5(stack["condition"])
}

func (c *current) onValueExpr11(numeric any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMNumericExpr,
		NumericExpr:   numeric.(*structs.NumericExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr11(stack["numeric"])
}

func (c *current) onValueExpr14(str any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMStringExpr,
		StringExpr:    str.(*structs.StringExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr14(stack["str"])
}

func (c *current) onValueExpr17(str any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMStringExpr,
		StringExpr:    str.(*structs.StringExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr17(stack["str"])
}

func (c *current) onValueExpr23(boolean any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolean.(*structs.BoolExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr23(stack["boolean"])
}

func (c *current) onStringExpr2(text any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMTextExpr,
		TextExpr:       text.(*structs.TextExpr),
	}

	return expr, nil
}

func (p *parser) callonStringExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr2(stack["text"])
}

func (c *current) onStringExpr8(str any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMRawString,
		RawString:      removeQuotes(str),
	}

	return expr, nil
}

func (p *parser) callonStringExpr8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr8(stack["str"])
}

func (c *current) onStringExpr14(field any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMField,
		FieldName:      field.(string),
	}

	return expr, nil
}

func (p *parser) callonStringExpr14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr14(stack["field"])
}

func (c *current) onStringExpr26(concat any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMConcatExpr,
		ConcatExpr:     concat.(*structs.ConcatExpr),
	}

	return expr, nil
}

func (p *parser) callonStringExpr26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr26(stack["concat"])
}

func (c *current) onConcatExpr1(first, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ConcatAtom, 1+len(restSlice))
	slice[0] = first.(*structs.ConcatAtom)

	for i := range restSlice {
		concatAndAtom := restSlice[i].([]any)
		slice[i+1] = concatAndAtom[1].(*structs.ConcatAtom)
	}

	expr := &structs.ConcatExpr{
		Atoms: slice,
	}

	return expr, nil
}

func (p *parser) callonConcatExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatExpr1(stack["first"], stack["rest"])
}

func (c *current) onConcatAtom2(text any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField:  false,
		Value:    "",
		TextExpr: text.(*structs.TextExpr),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom2(stack["text"])
}

func (c *current) onConcatAtom5(str any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: false,
		Value:   removeQuotes(str),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom5(stack["str"])
}

func (c *current) onConcatAtom8(number any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: false,
		Value:   number.(string),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom8(stack["number"])
}

func (c *current) onConcatAtom11(field any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: true,
		Value:   field.(string),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom11(stack["field"])
}

func (c *current) onNumericExpr1(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExpr1(stack["expr"])
}

func (c *current) onNumericExprLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.NumericExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.NumericExpr{
			IsTerminal:      false,
			Op:              opAndClause[0].(string),
			Left:            cur,
			Right:           opAndClause[1].(*structs.NumericExpr),
			NumericExprMode: structs.NEMNumericExpr,
		}
	}

	return cur, nil
}

func (p *parser) callonNumericExprLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel31(stack["first"], stack["rest"])
}

func (c *current) onNumericExprLevel21(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.NumericExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.NumericExpr{
			IsTerminal:      false,
			Op:              opAndClause[0].(string),
			Left:            cur,
			Right:           opAndClause[1].(*structs.NumericExpr),
			NumericExprMode: structs.NEMNumericExpr,
		}
	}

	return cur, nil
}

func (p *parser) callonNumericExprLevel21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel21(stack["first"], stack["rest"])
}

func (c *current) onNumericParamExpr1(expr any) (any, error) {
	rightNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	return rightNumericExpr, nil
}

func (p *parser) callonNumericParamExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericParamExpr1(stack["expr"])
}

func (c *current) onNumericExprLevel12(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericExprLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel12(stack["expr"])
}

func (c *current) onNumericExprLevel18(numericEvalExpr any) (any, error) {
	return numericEvalExpr, nil
}

func (p *parser) callonNumericExprLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel18(stack["numericEvalExpr"])
}

func (c *current) onNumericExprLevel111(field any) (any, error) {
	expr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    true,
		Value:           field.(string),
		NumericExprMode: structs.NEMNumberField,
	}

	return expr, nil
}

func (p *parser) callonNumericExprLevel111() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel111(stack["field"])
}

func (c *current) onNumericExprLevel114(number any) (any, error) {
	expr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    false,
		Value:           number.(string),
		NumericExprMode: structs.NEMNumber,
	}

	return expr, nil
}

func (p *parser) callonNumericExprLevel114() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel114(stack["number"])
}

func (c *current) onNumericEvalExpr2(opName, expr any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)
	node, err := createNumericExpr(opNameStr, leftNumericExpr, nil, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr2(stack["opName"], stack["expr"])
}

func (c *current) onNumericEvalExpr31(roundExpr, expr, roundPrecision any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	var rightNumericExpr *structs.NumericExpr
	if roundPrecision != nil {
		rightNumericExpr, ok = roundPrecision.(*structs.NumericExpr)
		if !ok {
			return nil, fmt.Errorf("Failed to assert roundPrecision as *structs.NumericExpr")
		}
	}

	node, err := createNumericExpr("round", leftNumericExpr, rightNumericExpr, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr31(stack["roundExpr"], stack["expr"], stack["roundPrecision"])
}

func (c *current) onNumericEvalExpr42(opName any) (any, error) {
	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)
	return &structs.NumericExpr{
		IsTerminal: true,
		Op:         opNameStr,
	}, nil
}

func (p *parser) callonNumericEvalExpr42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr42(stack["opName"])
}

func (c *current) onNumericEvalExpr52(stringExpr, baseExpr any) (any, error) {
	stringExprConverted, ok := stringExpr.(*structs.StringExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert stringExpr as *structs.StringExpr")
	}

	var baseExprConverted *structs.NumericExpr
	if baseExpr != nil {
		baseSlice, ok := baseExpr.([]interface{})
		if ok && len(baseSlice) > 1 {
			if base, ok := baseSlice[1].(*structs.NumericExpr); ok {
				baseExprConverted = base
			} else {
				return nil, fmt.Errorf("Failed to assert base as *structs.NumericExpr")
			}
		}
	}

	node := &structs.NumericExpr{
		IsTerminal:      false,
		Op:              "tonumber",
		Left:            nil,
		Right:           baseExprConverted,
		Val:             stringExprConverted,
		NumericExprMode: structs.NEMNumericExpr,
	}
	return node, nil
}

func (p *parser) callonNumericEvalExpr52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr52(stack["stringExpr"], stack["baseExpr"])
}

func (c *current) onNumericEvalExpr64(lenExpr, expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericEvalExpr64() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr64(stack["lenExpr"], stack["expr"])
}

func (c *current) onNumericEvalExpr72(opName, expr, param any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)

	var rightNumericExpr *structs.NumericExpr
	if param == nil {
		return nil, fmt.Errorf("Function: %v 's param can not be nil", opNameStr)
	}
	rightNumericExpr, ok = param.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert param as *structs.NumericExpr")
	}

	node, err := createNumericExpr(opNameStr, leftNumericExpr, rightNumericExpr, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr72() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr72(stack["opName"], stack["expr"], stack["param"])
}

func (c *current) onNumericEvalExpr85(opName, expr, param any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)

	var rightNumericExpr *structs.NumericExpr
	if param != nil {
		rightNumericExpr, ok = param.(*structs.NumericExpr)
		if !ok {
			return nil, fmt.Errorf("Failed to assert param as *structs.NumericExpr")
		}
	}

	node, err := createNumericExpr(opNameStr, leftNumericExpr, rightNumericExpr, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr85() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr85(stack["opName"], stack["expr"], stack["param"])
}

func (c *current) onNumericEvalExpr96(opName, expr, specifier any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: NumericExpr: %v", err)
	}
	node, err := createNumericExpr(opNameStr, expr.(*structs.NumericExpr), nil, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}
	node.Val = specifier.(*structs.StringExpr)
	return node, nil
}

func (p *parser) callonNumericEvalExpr96() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr96(stack["opName"], stack["expr"], stack["specifier"])
}

func (c *current) onLenExpr2(str any) (any, error) {

	leftNumericExpr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    false,
		Value:           str.(string),
		NumericExprMode: structs.NEMLenString,
	}

	node, err := createNumericExpr("len", leftNumericExpr, nil, structs.NEMLenString)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonLenExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLenExpr2(stack["str"])
}

func (c *current) onLenExpr8(field any) (any, error) {

	leftNumericExpr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    true,
		Value:           field.(string),
		NumericExprMode: structs.NEMLenField,
	}

	node, err := createNumericExpr("len", leftNumericExpr, nil, structs.NEMLenField)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonLenExpr8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLenExpr8(stack["field"])
}

func (c *current) onNullOption1(boolVal any) (any, error) {
	optionArg := &HeadOptionArgs{
		argOption: "null",
		headExpr: &structs.HeadExpr{
			Null: boolVal.(bool),
		},
	}

	return optionArg, nil
}

func (p *parser) callonNullOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullOption1(stack["boolVal"])
}

func (c *current) onKeeplastOption1(boolVal any) (any, error) {
	optionArg := &HeadOptionArgs{
		argOption: "keeplast",
		headExpr: &structs.HeadExpr{
			Keeplast: boolVal.(bool),
		},
	}

	return optionArg, nil
}

func (p *parser) callonKeeplastOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeeplastOption1(stack["boolVal"])
}

func (c *current) onLimitOption1(intAsStr any) (any, error) {
	limit, err := strconv.ParseUint(intAsStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid limit (%v): %v", intAsStr.(string), err)
	}
	optionArg := &HeadOptionArgs{
		argOption: "limit",
		headExpr: &structs.HeadExpr{
			MaxRows: limit,
		},
	}

	return optionArg, nil
}

func (p *parser) callonLimitOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitOption1(stack["intAsStr"])
}

func (c *current) onExprOption1(boolExpr any) (any, error) {
	optionArg := &HeadOptionArgs{
		argOption: "boolexpr",
		headExpr: &structs.HeadExpr{
			BoolExpr: boolExpr.(*structs.BoolExpr),
		},
	}

	return optionArg, nil
}

func (p *parser) callonExprOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprOption1(stack["boolExpr"])
}

func (c *current) onHeadOption1(option any) (any, error) {
	return option, nil
}

func (p *parser) callonHeadOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOption1(stack["option"])
}

func (c *current) onHeadOptionList1(first, rest any) (any, error) {
	restSlice := rest.([]any)
	mapOption := make(map[string]bool)
	mapOption["null"] = false
	mapOption["keeplast"] = false
	mapOption["boolexpr"] = false
	mapOption["limit"] = false

	numOptions := 1 + len(restSlice)

	headExpr := &structs.HeadExpr{}

	for i := 0; i < numOptions; i++ {
		var headOptArg *HeadOptionArgs
		if i == 0 {
			headOptArg = first.(*HeadOptionArgs)
		} else {
			separator := restSlice[i-1].([]any)
			headOptArg = separator[1].(*HeadOptionArgs)
		}

		argOption := headOptArg.argOption
		val, exist := mapOption[argOption]
		if !exist {
			return nil, fmt.Errorf("Not a Valid HeadOption: %v", argOption)
		}
		if val {
			return nil, fmt.Errorf("Invalid Syntax, option: %v is already specified", argOption)
		}
		mapOption[argOption] = true

		switch argOption {
		case "null":
			headExpr.Null = headOptArg.headExpr.Null
		case "keeplast":
			headExpr.Keeplast = headOptArg.headExpr.Keeplast
		case "limit":
			headExpr.MaxRows = headOptArg.headExpr.MaxRows
		case "boolexpr":
			headExpr.BoolExpr = headOptArg.headExpr.BoolExpr
		default:
			return nil, fmt.Errorf("Not a Valid HeadOption: %v", argOption)
		}
	}

	isBoolExpr, _ := mapOption["boolexpr"]

	for k, _ := range mapOption {
		if k != "limit" && !isBoolExpr {
			return nil, fmt.Errorf("Invalid Syntax %v can only be present with condition expression", k)
		}
	}

	return headExpr, nil
}

func (p *parser) callonHeadOptionList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOptionList1(stack["first"], stack["rest"])
}

func (c *current) onHeadBlock2(headExpr any) (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			HeadRequest: headExpr.(*structs.HeadExpr),
		},
	}

	return queryAgg, nil
}

func (p *parser) callonHeadBlock2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadBlock2(stack["headExpr"])
}

func (c *current) onHeadBlock8(intAsStr any) (any, error) {
	limit, err := strconv.ParseUint(intAsStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid limit (%v): %v", intAsStr.(string), err)
	}

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			HeadRequest: &structs.HeadExpr{
				MaxRows: limit,
			},
		},
	}

	return queryAgg, nil
}

func (p *parser) callonHeadBlock8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadBlock8(stack["intAsStr"])
}

func (c *current) onHeadBlock14() (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			HeadRequest: &structs.HeadExpr{
				MaxRows: uint64(10), // From https://docs.splunk.com/Documentation/Splunk/9.1.0/SearchReference/Head
			},
		},
	}

	return queryAgg, nil
}

func (p *parser) callonHeadBlock14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadBlock14()
}

func (c *current) onAggregationList1(first, rest any) (any, error) {
	// Convert `rest` to a slice. Each element of the slice will be a 2-element
	// slice where the first element is ", " and the second is an Aggregator.
	restSlice := rest.([]any)

	numAggs := 1 + len(restSlice)
	aggsSlice := make([]*aggregator, numAggs)
	aggsSlice[0] = first.(*aggregator)

	for i := 1; i < numAggs; i++ {
		separatorAndAgg := restSlice[i-1].([]any)
		aggsSlice[i] = separatorAndAgg[1].(*aggregator)
	}

	return aggsSlice, nil
}

func (p *parser) callonAggregationList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregationList1(stack["first"], stack["rest"])
}

func (c *current) onAggregator1(aggFunc, asField any) (any, error) {
	agg := &aggregator{}
	agg.measureAgg = aggFunc.(*structs.MeasureAggregator)

	if asField != nil {
		agg.renameOutputField = true
		agg.outputFieldNewName = asField.(string)
	}

	return agg, nil
}

func (p *parser) callonAggregator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregator1(stack["aggFunc"], stack["asField"])
}

func (c *current) onAggFunction1(agg any) (any, error) {
	return agg, nil
}

func (p *parser) callonAggFunction1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggFunction1(stack["agg"])
}

func (c *current) onAsField1(field any) (any, error) {
	fieldStr := field.(string)

	if strings.Contains(fieldStr, "*") {
		return nil, errors.New("The field specified in `AS` cannot contain wildcards")
	}

	if fieldStr[0] == '"' && fieldStr[len(fieldStr)-1] == '"' {
		fieldStr = fieldStr[1 : len(fieldStr)-1]
	}

	return fieldStr, nil
}

func (p *parser) callonAsField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsField1(stack["field"])
}

func (c *current) onAggCount2(boolExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Count,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggCount2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggCount2(stack["boolExpr"])
}

func (c *current) onAggCount12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Count,
	}

	return agg, nil
}

func (p *parser) callonAggCount12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggCount12(stack["field"])
}

func (c *current) onAggCount21() (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  "*",
		MeasureFunc: utils.Count,
	}

	return agg, nil
}

func (p *parser) callonAggCount21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggCount21()
}

func (c *current) onAggDistinctCount2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Cardinality,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggDistinctCount2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggDistinctCount2(stack["valueExpr"])
}

func (c *current) onAggDistinctCount12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Cardinality,
	}

	return agg, nil
}

func (p *parser) callonAggDistinctCount12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggDistinctCount12(stack["field"])
}

func (c *current) onAggAvg2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Avg,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggAvg2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAvg2(stack["boolComparisonExpr"])
}

func (c *current) onAggAvg12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Avg,
	}

	return agg, nil
}

func (p *parser) callonAggAvg12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAvg12(stack["field"])
}

func (c *current) onAggMin2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Min,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggMin2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMin2(stack["boolComparisonExpr"])
}

func (c *current) onAggMin12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Min,
	}

	return agg, nil
}

func (p *parser) callonAggMin12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMin12(stack["field"])
}

func (c *current) onAggMax2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Max,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggMax2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMax2(stack["boolComparisonExpr"])
}

func (c *current) onAggMax12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Max,
	}

	return agg, nil
}

func (p *parser) callonAggMax12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMax12(stack["field"])
}

func (c *current) onAggRange2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Range,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggRange2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRange2(stack["boolComparisonExpr"])
}

func (c *current) onAggRange12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Range,
	}

	return agg, nil
}

func (p *parser) callonAggRange12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRange12(stack["field"])
}

func (c *current) onAggSum2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Sum,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggSum2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSum2(stack["boolComparisonExpr"])
}

func (c *current) onAggSum12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Sum,
	}

	return agg, nil
}

func (p *parser) callonAggSum12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSum12(stack["field"])
}

func (c *current) onAggEstdc2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Estdc,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggEstdc2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEstdc2(stack["boolComparisonExpr"])
}

func (c *current) onAggEstdc12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Estdc,
	}

	return agg, nil
}

func (p *parser) callonAggEstdc12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEstdc12(stack["field"])
}

func (c *current) onAggEstdcError2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.EstdcError,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggEstdcError2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEstdcError2(stack["boolComparisonExpr"])
}

func (c *current) onAggEstdcError12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.EstdcError,
	}

	return agg, nil
}

func (p *parser) callonAggEstdcError12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEstdcError12(stack["field"])
}

func (c *current) onAggExactPerc2(numStr, boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.ExactPerc,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
		Param:           numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggExactPerc2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggExactPerc2(stack["numStr"], stack["boolComparisonExpr"])
}

func (c *current) onAggExactPerc16(numStr, field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.ExactPerc,
		Param:       numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggExactPerc16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggExactPerc16(stack["numStr"], stack["field"])
}

func (c *current) onAggPerc2(numStr, boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Perc,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
		Param:           numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggPerc2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggPerc2(stack["numStr"], stack["boolComparisonExpr"])
}

func (c *current) onAggPerc16(numStr, field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Perc,
		Param:       numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggPerc16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggPerc16(stack["numStr"], stack["field"])
}

func (c *current) onAggUpperPerc2(numStr, boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.UpperPerc,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
		Param:           numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggUpperPerc2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggUpperPerc2(stack["numStr"], stack["boolComparisonExpr"])
}

func (c *current) onAggUpperPerc16(numStr, field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.UpperPerc,
		Param:       numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggUpperPerc16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggUpperPerc16(stack["numStr"], stack["field"])
}

func (c *current) onAggMedian2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Median,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggMedian2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMedian2(stack["boolComparisonExpr"])
}

func (c *current) onAggMedian12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Median,
	}

	return agg, nil
}

func (p *parser) callonAggMedian12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMedian12(stack["field"])
}

func (c *current) onAggMode2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Mode,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggMode2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMode2(stack["boolComparisonExpr"])
}

func (c *current) onAggMode12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Mode,
	}

	return agg, nil
}

func (p *parser) callonAggMode12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMode12(stack["field"])
}

func (c *current) onAggStdev2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Stdev,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggStdev2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggStdev2(stack["boolComparisonExpr"])
}

func (c *current) onAggStdev12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Stdev,
	}

	return agg, nil
}

func (p *parser) callonAggStdev12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggStdev12(stack["field"])
}

func (c *current) onAggStdevp2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Stdevp,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggStdevp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggStdevp2(stack["boolComparisonExpr"])
}

func (c *current) onAggStdevp12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Stdevp,
	}

	return agg, nil
}

func (p *parser) callonAggStdevp12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggStdevp12(stack["field"])
}

func (c *current) onAggSumsq2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Sumsq,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggSumsq2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSumsq2(stack["boolComparisonExpr"])
}

func (c *current) onAggSumsq12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Sumsq,
	}

	return agg, nil
}

func (p *parser) callonAggSumsq12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSumsq12(stack["field"])
}

func (c *current) onAggVar2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Var,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggVar2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggVar2(stack["boolComparisonExpr"])
}

func (c *current) onAggVar12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Var,
	}

	return agg, nil
}

func (p *parser) callonAggVar12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggVar12(stack["field"])
}

func (c *current) onAggVarp2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Varp,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggVarp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggVarp2(stack["boolComparisonExpr"])
}

func (c *current) onAggVarp12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Varp,
	}

	return agg, nil
}

func (p *parser) callonAggVarp12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggVarp12(stack["field"])
}

func (c *current) onAggFirst2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.First,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggFirst2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggFirst2(stack["boolComparisonExpr"])
}

func (c *current) onAggFirst12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.First,
	}

	return agg, nil
}

func (p *parser) callonAggFirst12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggFirst12(stack["field"])
}

func (c *current) onAggLast2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Last,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggLast2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLast2(stack["boolComparisonExpr"])
}

func (c *current) onAggLast12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Last,
	}

	return agg, nil
}

func (p *parser) callonAggLast12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLast12(stack["field"])
}

func (c *current) onAggList2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.List,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggList2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggList2(stack["valueExpr"])
}

func (c *current) onAggList10(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.List,
	}

	return agg, nil
}

func (p *parser) callonAggList10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggList10(stack["field"])
}

func (c *current) onAggEarliest2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Earliest,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggEarliest2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEarliest2(stack["boolComparisonExpr"])
}

func (c *current) onAggEarliest12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Earliest,
	}

	return agg, nil
}

func (p *parser) callonAggEarliest12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEarliest12(stack["field"])
}

func (c *current) onAggEarliestTime2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.EarliestTime,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggEarliestTime2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEarliestTime2(stack["boolComparisonExpr"])
}

func (c *current) onAggEarliestTime12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.EarliestTime,
	}

	return agg, nil
}

func (p *parser) callonAggEarliestTime12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEarliestTime12(stack["field"])
}

func (c *current) onAggLatest2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Latest,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggLatest2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLatest2(stack["boolComparisonExpr"])
}

func (c *current) onAggLatest12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Latest,
	}

	return agg, nil
}

func (p *parser) callonAggLatest12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLatest12(stack["field"])
}

func (c *current) onAggLatestTime2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.LatestTime,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggLatestTime2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLatestTime2(stack["boolComparisonExpr"])
}

func (c *current) onAggLatestTime12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.LatestTime,
	}

	return agg, nil
}

func (p *parser) callonAggLatestTime12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLatestTime12(stack["field"])
}

func (c *current) onAggRate2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.StatsRate,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggRate2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRate2(stack["boolComparisonExpr"])
}

func (c *current) onAggRate12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.StatsRate,
	}

	return agg, nil
}

func (p *parser) callonAggRate12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRate12(stack["field"])
}

func (c *current) onAggValues2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Values,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggValues2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggValues2(stack["valueExpr"])
}

func (c *current) onAggValues10(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Values,
	}

	return agg, nil
}

func (p *parser) callonAggValues10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggValues10(stack["field"])
}

func (c *current) onFieldWithNumberValue1(keyValuePair any) (any, error) {
	return keyValuePair, nil
}

func (p *parser) callonFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithNumberValue1(stack["keyValuePair"])
}

func (c *current) onNamedFieldWithNumberValue1(key, op, value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     op.(string),
			Field:  key.(string),
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonNamedFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedFieldWithNumberValue1(stack["key"], stack["op"], stack["value"])
}

func (c *current) onUnnamedFieldWithNumberValue1(value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     "=",
			Field:  "*",
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonUnnamedFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnnamedFieldWithNumberValue1(stack["value"])
}

func (c *current) onFieldWithBooleanValue1(key, op, value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     op.(string),
			Field:  key.(string),
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonFieldWithBooleanValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithBooleanValue1(stack["key"], stack["op"], stack["value"])
}

func (c *current) onFieldWithStringValue1(keyValuePair any) (any, error) {
	return keyValuePair, nil
}

func (p *parser) callonFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithStringValue1(stack["keyValuePair"])
}

func (c *current) onNamedFieldWithStringValue1(key, op, value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     op.(string),
			Field:  key.(string),
			Values: value,
		},
	}
	return node, nil
}

func (p *parser) callonNamedFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedFieldWithStringValue1(stack["key"], stack["op"], stack["value"])
}

func (c *current) onUnnamedFieldWithStringValue1(value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     "=",
			Field:  "*",
			Values: value,
		},
	}
	return node, nil
}

func (p *parser) callonUnnamedFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnnamedFieldWithStringValue1(stack["value"])
}

func (c *current) onFieldNameList1(first, rest any) (any, error) {
	// Convert `rest` to a slice. Each element of the slice will be a 2-element
	// slice where the first element is ", " and the second is a FieldName.
	restSlice := rest.([]any)

	numFieldNames := 1 + len(restSlice)
	fields := make([]string, numFieldNames)
	fields[0] = first.(string)

	for i := 1; i < numFieldNames; i++ {
		separatorAndField := restSlice[i-1].([]any)
		fields[i] = separatorAndField[1].(string)
	}

	return fields, nil
}

func (p *parser) callonFieldNameList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldNameList1(stack["first"], stack["rest"])
}

func (c *current) onEarliestAndLatest1(earliestTime, latestTime any) (any, error) {
	var startEpoch int64 = 0
	var endEpoch int64 = 0
	var err error

	earliestTimeModifier := earliestTime.(ast.TimeModifier)
	latestTimeModifier := latestTime.(ast.TimeModifier)

	currTime := time.Now()
	startEpoch, err = CalculateRelativeTime(earliestTimeModifier, currTime)
	if err != nil {
		return nil, err
	}

	endEpoch, err = CalculateRelativeTime(latestTimeModifier, currTime)
	if err != nil {
		return nil, err
	}

	// Create AST node
	node := &ast.Node{
		NodeType: ast.TimeModifierNode,
		TimeModifiers: &ast.TimeModifiers{
			StartEpoch: uint64(startEpoch),
			EndEpoch:   uint64(endEpoch),
		},
	}

	return node, nil
}

func (p *parser) callonEarliestAndLatest1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEarliestAndLatest1(stack["earliestTime"], stack["latestTime"])
}

func (c *current) onEarliestOnly1(earliestTime any) (any, error) {
	var startEpoch int64 = 0
	var err error

	earliestTimeModifier := earliestTime.(ast.TimeModifier)

	startEpoch, err = CalculateRelativeTime(earliestTimeModifier, time.Now())
	if err != nil {
		return nil, err
	}

	// Create AST node
	node := &ast.Node{
		NodeType: ast.TimeModifierNode,
		TimeModifiers: &ast.TimeModifiers{
			StartEpoch: uint64(startEpoch),
			EndEpoch:   uint64(time.Now().UnixMilli()),
		},
	}

	return node, nil
}

func (p *parser) callonEarliestOnly1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEarliestOnly1(stack["earliestTime"])
}

func (c *current) onRelIntegerAsString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonRelIntegerAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelIntegerAsString1()
}

func (c *current) onWeekSnap1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonWeekSnap1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeekSnap1()
}

func (c *current) onRelTimeUnit1(timeUnit any) (any, error) {
	return strconv.Itoa(int(timeUnit.(utils.TimeUnit))), nil
}

func (p *parser) callonRelTimeUnit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelTimeUnit1(stack["timeUnit"])
}

func (c *current) onSnap1(snap any) (any, error) {
	return snap.(string), nil
}

func (p *parser) callonSnap1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSnap1(stack["snap"])
}

func (c *current) onOffset1(off, tuOff any) (any, error) {
	var offsetNum int64 = 0
	var err error
	offStr := off.(string)
	if offStr == "+" {
		offsetNum = 1
	} else if offStr == "-" {
		offsetNum = -1
	} else {
		offsetNum, err = strconv.ParseInt(offStr, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("Invalid Relative Time Format time unit value: (%v): , err: %v", offStr, err)
		}
	}

	timeUnit, err := strconv.Atoi(tuOff.(string))
	if err != nil {
		return nil, fmt.Errorf("Invalid Time Unit value: (%v), err: %v", tuOff.(string), err)
	}

	relTimeOffset := ast.RelativeTimeOffset{
		Offset:   offsetNum,
		TimeUnit: utils.TimeUnit(timeUnit),
	}

	return relTimeOffset, nil
}

func (p *parser) callonOffset1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOffset1(stack["off"], stack["tuOff"])
}

func (c *current) onRelativeTimestamp1(defaultTime, offset, snapParam any) (any, error) {

	if defaultTime != nil {
		if offset != nil || snapParam != nil {
			return nil, fmt.Errorf("Invalid Relative timestamp cannot combine default with offset or snap")
		}
		defTime, err := transferUint8ToString(defaultTime)
		if err != nil {
			return nil, fmt.Errorf("Spl peg: Relative timestamp for default time, err: %v", err)
		}

		timeModifier := ast.TimeModifier{
			AbsoluteTime: defTime,
		}

		return timeModifier, nil
	}

	if offset == nil && snapParam == nil {
		return nil, fmt.Errorf("Invalid Relative Time Format: Need either offset or snap param")
	}

	relTimeOffset := ast.RelativeTimeOffset{}
	snap := ""
	if snapParam != nil {
		snap = snapParam.(string)
	}

	if offset != nil {
		relTimeOffset.Offset = offset.(ast.RelativeTimeOffset).Offset
		relTimeOffset.TimeUnit = offset.(ast.RelativeTimeOffset).TimeUnit
	}

	timeModifier := ast.TimeModifier{
		RelativeTime: ast.RelativeTimeModifier{
			RelativeTimeOffset: relTimeOffset,
			Snap:               snap,
		},
	}

	return timeModifier, nil
}

func (p *parser) callonRelativeTimestamp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeTimestamp1(stack["defaultTime"], stack["offset"], stack["snapParam"])
}

func (c *current) onAbsoluteTimestamp1() (any, error) {
	relTimeModifier := ast.TimeModifier{
		AbsoluteTime: string(c.text),
	}
	return relTimeModifier, nil
}

func (p *parser) callonAbsoluteTimestamp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAbsoluteTimestamp1()
}

func (c *current) onFieldName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFieldName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldName1()
}

func (c *current) onFieldNameStartWith_1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFieldNameStartWith_1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldNameStartWith_1()
}

func (c *current) onString1(str any) (any, error) {
	return str, nil
}

func (p *parser) callonString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onString1(stack["str"])
}

func (c *current) onQuotedString1() (any, error) {
	// The returned string has quotes as the first and last character.
	return string(c.text), nil
}

func (p *parser) callonQuotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString1()
}

func (c *current) onUnquotedString1() (any, error) {
	// Return the string wrapped in quotes.
	str := "\"" + string(c.text) + "\""
	return str, nil
}

func (p *parser) callonUnquotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedString1()
}

func (c *current) onUnquotedStringWithTemplateWildCard1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUnquotedStringWithTemplateWildCard1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedStringWithTemplateWildCard1()
}

func (c *current) onBoolean1() (any, error) {
	boolValue, _ := strconv.ParseBool(string(c.text))
	return boolValue, nil
}

func (p *parser) callonBoolean1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolean1()
}

func (c *current) onRenamePattern1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonRenamePattern1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenamePattern1()
}

func (c *current) onNumber1(number any) (any, error) {
	return json.Number(number.(string)), nil
}

func (p *parser) callonNumber1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1(stack["number"])
}

func (c *current) onNumberAsString1(number any) (any, error) {
	return number, nil
}

func (p *parser) callonNumberAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumberAsString1(stack["number"])
}

func (c *current) onFloatAsString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatAsString1()
}

func (c *current) onIntegerAsString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIntegerAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerAsString1()
}

func (c *current) onEqualityOperator1(op any) (any, error) {
	opStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: EqualityOperator: %v", err)
	}
	return opStr, nil
}

func (p *parser) callonEqualityOperator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator1(stack["op"])
}

func (c *current) onInequalityOperator1(op any) (any, error) {
	opStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: InequalityOperator: %v", err)
	}
	return opStr, nil
}

func (p *parser) callonInequalityOperator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInequalityOperator1(stack["op"])
}

func (c *current) onEqualityOrInequality2(op any) (any, error) {
	return op, nil
}

func (p *parser) callonEqualityOrInequality2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOrInequality2(stack["op"])
}

func (c *current) onEqualityOrInequality5(op any) (any, error) {
	return op, nil
}

func (p *parser) callonEqualityOrInequality5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOrInequality5(stack["op"])
}

func (c *current) onOpPlus1() (any, error) {
	return "+", nil
}

func (p *parser) callonOpPlus1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpPlus1()
}

func (c *current) onOpMinus1() (any, error) {
	return "-", nil
}

func (p *parser) callonOpMinus1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpMinus1()
}

func (c *current) onOpMul1() (any, error) {
	return "*", nil
}

func (p *parser) callonOpMul1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpMul1()
}

func (c *current) onOpDiv1() (any, error) {
	return "/", nil
}

func (p *parser) callonOpDiv1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpDiv1()
}

func (c *current) onSecond1() (any, error) {
	return utils.TMSecond, nil
}

func (p *parser) callonSecond1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSecond1()
}

func (c *current) onMinute1() (any, error) {
	return utils.TMMinute, nil
}

func (p *parser) callonMinute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinute1()
}

func (c *current) onHour1() (any, error) {
	return utils.TMHour, nil
}

func (p *parser) callonHour1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHour1()
}

func (c *current) onDay1() (any, error) {
	return utils.TMDay, nil
}

func (p *parser) callonDay1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDay1()
}

func (c *current) onWeek1() (any, error) {
	return utils.TMWeek, nil
}

func (p *parser) callonWeek1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeek1()
}

func (c *current) onMonth1() (any, error) {
	return utils.TMMonth, nil
}

func (p *parser) callonMonth1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMonth1()
}

func (c *current) onQuarter1() (any, error) {
	return utils.TMQuarter, nil
}

func (p *parser) callonQuarter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuarter1()
}

func (c *current) onYear1() (any, error) {
	return utils.TMYear, nil
}

func (p *parser) callonYear1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYear1()
}

func (c *current) onSubseconds1() (any, error) {
	timeUnit, err := utils.ConvertSubseconds(string(c.text))
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Subseconds: %v", err)
	}
	return timeUnit, nil
}

func (p *parser) callonSubseconds1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubseconds1()
}

func (c *current) onTransactionBlock1(txnOptions any) (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType:      structs.TransactionType,
		TransactionArguments: txnOptions.(*structs.TransactionArguments),
	}
	return queryAgg, nil
}

func (p *parser) callonTransactionBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionBlock1(stack["txnOptions"])
}

func (c *current) onTransactionOptions1(txnOptions any) (any, error) {

	transactionRequest := &structs.TransactionArguments{}

	if txnOptions != nil {
		txnArgs := txnOptions.(*TxnArgs).arguments
		transactionRequest.Fields = txnArgs.Fields
		transactionRequest.StartsWith = txnArgs.StartsWith
		transactionRequest.EndsWith = txnArgs.EndsWith
	}

	return transactionRequest, nil
}

func (p *parser) callonTransactionOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionOptions1(stack["txnOptions"])
}

func (c *current) onTransactionDefinitionOptionsList1(first, rest any) (any, error) {

	restSlice := rest.([]any)
	txnArgs := &TxnArgs{
		argOption: "txn-definition",
		arguments: &structs.TransactionArguments{},
	}

	numArgs := 1 + len(restSlice)

	for i := 0; i < numArgs; i++ {
		var txnArg *TxnArgs
		if i == 0 {
			txnArg = first.(*TxnArgs)
		} else {
			separatorAndArg := restSlice[i-1].([]any)
			txnArg = separatorAndArg[1].(*TxnArgs)
		}
		argOption := txnArg.argOption

		switch argOption {
		case "fields":
			txnArgs.arguments.Fields = txnArg.arguments.Fields
		case "startswith":
			txnArgs.arguments.StartsWith = txnArg.arguments.StartsWith
		case "endswith":
			txnArgs.arguments.EndsWith = txnArg.arguments.EndsWith
		default:
			return nil, fmt.Errorf("Not a Valid Transaction Argument option")
		}
	}

	return txnArgs, nil
}

func (p *parser) callonTransactionDefinitionOptionsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionDefinitionOptionsList1(stack["first"], stack["rest"])
}

func (c *current) onTransactionDefinitionOption1(option any) (any, error) {
	return option, nil
}

func (p *parser) callonTransactionDefinitionOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionDefinitionOption1(stack["option"])
}

func (c *current) onSpaceSeparatedFieldNameList1(first, rest any) (any, error) {
	var fields []string
	fields = append(fields, first.(string))
	for _, r := range rest.([]any) {
		// Extracting the field name from the tuple (SPACE, FieldName)
		fields = append(fields, r.([]any)[1].(string))
	}

	txnArg := &TxnArgs{
		argOption: "fields",
		arguments: &structs.TransactionArguments{
			Fields: fields,
		},
	}

	return txnArg, nil
}

func (p *parser) callonSpaceSeparatedFieldNameList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpaceSeparatedFieldNameList1(stack["first"], stack["rest"])
}

func (c *current) onStartsWithOption1(strExpr any) (any, error) {
	txnArg := &TxnArgs{
		argOption: "startswith",
		arguments: &structs.TransactionArguments{
			StartsWith: strExpr.(*structs.FilterStringExpr),
		},
	}
	return txnArg, nil
}

func (p *parser) callonStartsWithOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStartsWithOption1(stack["strExpr"])
}

func (c *current) onEndsWithOption1(strExpr any) (any, error) {
	txnArg := &TxnArgs{
		argOption: "endswith",
		arguments: &structs.TransactionArguments{
			EndsWith: strExpr.(*structs.FilterStringExpr),
		},
	}
	return txnArg, nil
}

func (p *parser) callonEndsWithOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEndsWithOption1(stack["strExpr"])
}

func (c *current) onTransactionFilterString1(strExpr any) (any, error) {
	return strExpr, nil
}

func (p *parser) callonTransactionFilterString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionFilterString1(stack["strExpr"])
}

func (c *current) onTransactionQuotedString1(str any) (any, error) {
	return str, nil
}

func (p *parser) callonTransactionQuotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionQuotedString1(stack["str"])
}

func (c *current) onTransactionQuotedStringSearchExpr1(searchClause any) (any, error) {
	filterStrExpr := &structs.FilterStringExpr{
		SearchNode: searchClause.(*ast.Node),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionQuotedStringSearchExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionQuotedStringSearchExpr1(stack["searchClause"])
}

func (c *current) onQuotedStringNoOp1() (any, error) {
	// The returned string has quotes as the first and last character.
	return string(c.text), nil
}

func (p *parser) callonQuotedStringNoOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedStringNoOp1()
}

func (c *current) onTransactionQuotedStringValue1(str any) (any, error) {
	filterStrExpr := &structs.FilterStringExpr{
		StringValue: removeQuotes(str.(string)),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionQuotedStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionQuotedStringValue1(stack["str"])
}

func (c *current) onTransactionSearch1(expr any) (any, error) {

	filterStrExpr := &structs.FilterStringExpr{
		SearchNode: expr.(*ast.Node),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionSearch1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionSearch1(stack["expr"])
}

func (c *current) onTransactionEval1(condition any) (any, error) {
	filterStrExpr := &structs.FilterStringExpr{
		EvalBoolExpr: condition.(*structs.BoolExpr),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionEval1(stack["condition"])
}

func (c *current) onMultiValueBlock1(mvQueryAggNode any) (any, error) {
	return mvQueryAggNode, nil
}

func (p *parser) callonMultiValueBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiValueBlock1(stack["mvQueryAggNode"])
}

func (c *current) onMakeMVBlock1(mvColOptionExpr, field any) (any, error) {
	var mvColExpr *structs.MultiValueColLetRequest

	if mvColOptionExpr != nil {
		mvColExpr = mvColOptionExpr.(*structs.MultiValueColLetRequest)
	} else {
		mvColExpr = &structs.MultiValueColLetRequest{}
	}

	mvColExpr.Command = "makemv"
	mvColExpr.ColName = field.(string)

	if mvColExpr.DelimiterString == "" {
		mvColExpr.DelimiterString = " " // default single space
	}

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: &structs.LetColumnsRequest{
				MultiValueColRequest: mvColExpr,
			},
		},
	}

	return queryAgg, nil
}

func (p *parser) callonMakeMVBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMakeMVBlock1(stack["mvColOptionExpr"], stack["field"])
}

func (c *current) onMVBlockOptionsList1(first, rest any) (any, error) {
	restSlice := rest.([]any)

	numOptions := 1 + len(restSlice)

	mvColExpr := &structs.MultiValueColLetRequest{}

	for i := 0; i < numOptions; i++ {
		var currMvColExpr *MultiValueColOptionArgs
		if i == 0 {
			currMvColExpr = first.(*MultiValueColOptionArgs)
		} else {
			separator := restSlice[i-1].([]any)
			currMvColExpr = separator[1].(*MultiValueColOptionArgs)
		}

		argOption := currMvColExpr.argOption

		switch argOption {
		case "delimiter":
			mvColExpr.DelimiterString = currMvColExpr.mvColExpr.DelimiterString
			mvColExpr.IsRegex = currMvColExpr.mvColExpr.IsRegex
		case "allowempty":
			mvColExpr.AllowEmpty = currMvColExpr.mvColExpr.AllowEmpty
		case "setsv":
			mvColExpr.Setsv = currMvColExpr.mvColExpr.Setsv
		default:
			return nil, fmt.Errorf("Not a Valid MVBlockOption: %v", argOption)
		}
	}

	return mvColExpr, nil
}

func (p *parser) callonMVBlockOptionsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMVBlockOptionsList1(stack["first"], stack["rest"])
}

func (c *current) onMVBlockOption1(option any) (any, error) {
	return option, nil
}

func (p *parser) callonMVBlockOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMVBlockOption1(stack["option"])
}

func (c *current) onDelimOption1(delimExpr any) (any, error) {
	return delimExpr, nil
}

func (p *parser) callonDelimOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimOption1(stack["delimExpr"])
}

func (c *current) onStringDelimiter1(str any) (any, error) {
	mvColOptionArgs := &MultiValueColOptionArgs{
		argOption: "delimiter",
		mvColExpr: &structs.MultiValueColLetRequest{
			DelimiterString: removeQuotes(str),
		},
	}

	return mvColOptionArgs, nil
}

func (p *parser) callonStringDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringDelimiter1(stack["str"])
}

func (c *current) onRegexDelimiter1(str any) (any, error) {
	pattern := removeQuotes(str)
	_, err := regexp.Compile(pattern)
	if err != nil {
		return nil, fmt.Errorf("Error parsing tokenizer regular expression: %v. Error: %v", pattern, err)
	}

	mvColOptionArgs := &MultiValueColOptionArgs{
		argOption: "delimiter",
		mvColExpr: &structs.MultiValueColLetRequest{
			DelimiterString: pattern,
			IsRegex:         true,
		},
	}

	return mvColOptionArgs, nil
}

func (p *parser) callonRegexDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexDelimiter1(stack["str"])
}

func (c *current) onAllowEmptyOption1(boolVal any) (any, error) {

	mvColOptionArgs := &MultiValueColOptionArgs{
		argOption: "allowempty",
		mvColExpr: &structs.MultiValueColLetRequest{
			AllowEmpty: boolVal.(bool),
		},
	}

	return mvColOptionArgs, nil
}

func (p *parser) callonAllowEmptyOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAllowEmptyOption1(stack["boolVal"])
}

func (c *current) onSetSvOption1(boolVal any) (any, error) {
	mvColOptionArgs := &MultiValueColOptionArgs{
		argOption: "setsv",
		mvColExpr: &structs.MultiValueColLetRequest{
			Setsv: boolVal.(bool),
		},
	}

	return mvColOptionArgs, nil
}

func (p *parser) callonSetSvOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSetSvOption1(stack["boolVal"])
}

func (c *current) onSPathBlock1(spathExpr any) (any, error) {
	if spathExpr == nil {
		return createSPathExpr("", "", "")
	}
	return spathExpr, nil
}

func (p *parser) callonSPathBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSPathBlock1(stack["spathExpr"])
}

func (c *current) onSPathArgumentsList1(first, rest any) (any, error) {

	restSlice := rest.([]any)

	inputField, pathField, outputField := "", "", ""

	numArgs := 1 + len(restSlice)

	for i := 0; i < numArgs; i++ {
		var arg string
		if i == 0 {
			arg = first.(string)
		} else {
			separator := restSlice[i-1].([]any)
			arg = separator[1].(string)
		}

		switch {
		case strings.HasPrefix(arg, "input="):
			inputField = strings.TrimPrefix(arg, "input=")
		case strings.HasPrefix(arg, "output="):
			outputField = strings.TrimPrefix(arg, "output=")
		case strings.HasPrefix(arg, "path="):
			pathField = strings.TrimPrefix(arg, "path=")
		default:
			return nil, fmt.Errorf("SPathArguments: Invalid Spath Argument: %v", arg)
		}
	}

	return createSPathExpr(inputField, pathField, outputField)
}

func (p *parser) callonSPathArgumentsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSPathArgumentsList1(stack["first"], stack["rest"])
}

func (c *current) onSPathArgument1(arg any) (any, error) {
	return arg, nil
}

func (p *parser) callonSPathArgument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSPathArgument1(stack["arg"])
}

func (c *current) onInputField1(field any) (any, error) {
	return "input=" + field.(string), nil
}

func (p *parser) callonInputField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInputField1(stack["field"])
}

func (c *current) onOutputField1(field any) (any, error) {
	return "output=" + field.(string), nil
}

func (p *parser) callonOutputField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOutputField1(stack["field"])
}

func (c *current) onPathField1() (any, error) {
	pathField := string(c.text)
	if strings.HasPrefix(pathField, "path") {
		pathField = strings.TrimSpace(strings.TrimPrefix(pathField, "path="))
		pathField = strings.TrimSpace(strings.TrimPrefix(pathField, "path ="))
		if pathField != "" && pathField[0] == '"' {
			pathField = removeQuotes(pathField)
		}
	}
	return "path=" + pathField, nil
}

func (p *parser) callonPathField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPathField1()
}

func (c *current) onFormatBlock1(formatArgExpr any) (any, error) {
	var formatResultExpr *structs.FormatResultsRequest

	if formatArgExpr != nil {
		formatResultExpr = formatArgExpr.(*structs.FormatResultsRequest)
	} else {
		formatResultExpr = getDefaultFormatResultsExpr()
	}

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: &structs.LetColumnsRequest{
				NewColName:    "search",
				FormatResults: formatResultExpr,
			},
		},
	}

	return queryAgg, nil
}

func (p *parser) callonFormatBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatBlock1(stack["formatArgExpr"])
}

func (c *current) onFormatArgumentsList1(first, rest any) (any, error) {
	restSlice := rest.([]any)

	numOptions := 1 + len(restSlice)

	formatResultExpr := getDefaultFormatResultsExpr()

	for i := 0; i < numOptions; i++ {
		var currFormatExpr *FormatResultsRequestArguments

		if i == 0 {
			currFormatExpr = first.(*FormatResultsRequestArguments)
		} else {
			separator := restSlice[i-1].([]any)
			currFormatExpr = separator[1].(*FormatResultsRequestArguments)
		}

		switch currFormatExpr.argOption {
		case "mvsep":
			formatResultExpr.MVSeparator = currFormatExpr.formatResultExpr.MVSeparator
		case "maxresults":
			formatResultExpr.MaxResults = currFormatExpr.formatResultExpr.MaxResults
		case "emptystr":
			formatResultExpr.EmptyString = currFormatExpr.formatResultExpr.EmptyString
		case "rowColOptions":
			formatResultExpr.RowColOptions = currFormatExpr.formatResultExpr.RowColOptions
		default:
			return nil, fmt.Errorf("not a valid Format Result Argument: %v", currFormatExpr.argOption)
		}
	}

	return formatResultExpr, nil
}

func (p *parser) callonFormatArgumentsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArgumentsList1(stack["first"], stack["rest"])
}

func (c *current) onFormatArgument1(argExpr any) (any, error) {
	return argExpr, nil
}

func (p *parser) callonFormatArgument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArgument1(stack["argExpr"])
}

func (c *current) onFormatSeparator1(str any) (any, error) {
	return &FormatResultsRequestArguments{
		argOption: "mvsep",
		formatResultExpr: &structs.FormatResultsRequest{
			MVSeparator: removeQuotes(str),
		},
	}, nil
}

func (p *parser) callonFormatSeparator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatSeparator1(stack["str"])
}

func (c *current) onFormatMaxResults1(numStr any) (any, error) {
	num, err := strconv.ParseUint(numStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid Max results value is set for format: (%v): Error=%v", numStr.(string), err)
	}
	return &FormatResultsRequestArguments{
		argOption: "maxresults",
		formatResultExpr: &structs.FormatResultsRequest{
			MaxResults: num,
		},
	}, nil
}

func (p *parser) callonFormatMaxResults1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatMaxResults1(stack["numStr"])
}

func (c *current) onFormatEmptyStr1(str any) (any, error) {
	return &FormatResultsRequestArguments{
		argOption: "emptystr",
		formatResultExpr: &structs.FormatResultsRequest{
			EmptyString: removeQuotes(str),
		},
	}, nil
}

func (p *parser) callonFormatEmptyStr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatEmptyStr1(stack["str"])
}

func (c *current) onFormatRowColOptions1(rowPrefix, colPrefix, colSeparator, colEnd, rowSeparator, rowEnd any) (any, error) {
	rowColOptions := &structs.RowColOptions{
		RowPrefix:       removeQuotes(rowPrefix),
		ColumnPrefix:    removeQuotes(colPrefix),
		ColumnSeparator: removeQuotes(colSeparator),
		ColumnEnd:       removeQuotes(colEnd),
		RowSeparator:    removeQuotes(rowSeparator),
		RowEnd:          removeQuotes(rowEnd),
	}

	return &FormatResultsRequestArguments{
		argOption: "rowColOptions",
		formatResultExpr: &structs.FormatResultsRequest{
			RowColOptions: rowColOptions,
		},
	}, nil
}

func (p *parser) callonFormatRowColOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatRowColOptions1(stack["rowPrefix"], stack["colPrefix"], stack["colSeparator"], stack["colEnd"], stack["rowSeparator"], stack["rowEnd"])
}

func (c *current) onEventCountBlock1(eventCountExpr any) (any, error) {
	if eventCountExpr == nil {
		return createEventCountExpr([]string{"*"}, true, false, true)
	}
	return eventCountExpr, nil
}

func (p *parser) callonEventCountBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEventCountBlock1(stack["eventCountExpr"])
}

func (c *current) onEventCountArgumentsList1(first, rest any) (any, error) {

	restSlice := rest.([]any)

	indices := []string{}
	list_vix, report_size, summarize := true, false, true

	numArgs := 0
	if first != nil {
		numArgs++
	}
	numArgs += len(restSlice)

	for i := 0; i < numArgs; i++ {
		var arg string
		if i == 0 && first != nil {
			arg = first.(string)
		} else {
			separator := restSlice[i-1].([]any)
			arg = separator[1].(string)
		}

		switch {
		case strings.HasPrefix(arg, "index="):
			indices = append(indices, strings.TrimPrefix(arg, "index="))
		case strings.HasPrefix(arg, "list_vix="):
			var err error
			list_vix, err = strconv.ParseBool(strings.TrimPrefix(arg, "list_vix="))
			if err != nil {
				return nil, fmt.Errorf("EventCountArguments: Invalid value for list_vix: %v", err)
			}
		case strings.HasPrefix(arg, "report_size="):
			var err error
			report_size, err = strconv.ParseBool(strings.TrimPrefix(arg, "report_size="))
			if err != nil {
				return nil, fmt.Errorf("EventCountArguments: Invalid value for report_size: %v", err)
			}
		case strings.HasPrefix(arg, "summarize="):
			var err error
			summarize, err = strconv.ParseBool(strings.TrimPrefix(arg, "summarize="))
			if err != nil {
				return nil, fmt.Errorf("EventCountArguments: Invalid value for summarize: %v", err)
			}
		default:
			return nil, fmt.Errorf("EventCountArguments: Invalid EventCount Argument: %v", arg)
		}
	}

	// If no indices were provided, use the default value "*"
	if len(indices) == 0 {
		indices = append(indices, "*")
	}

	return createEventCountExpr(indices, list_vix, report_size, summarize)
}

func (p *parser) callonEventCountArgumentsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEventCountArgumentsList1(stack["first"], stack["rest"])
}

func (c *current) onEventCountArgument1(arg any) (any, error) {
	return arg, nil
}

func (p *parser) callonEventCountArgument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEventCountArgument1(stack["arg"])
}

func (c *current) onIndexField1(index any) (any, error) {
	return "index=" + index.(string), nil
}

func (p *parser) callonIndexField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexField1(stack["index"])
}

func (c *current) onSummarizeField1(field any) (any, error) {
	return "summarize=" + strconv.FormatBool(field.(bool)), nil
}

func (p *parser) callonSummarizeField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSummarizeField1(stack["field"])
}

func (c *current) onReportSizeField1(field any) (any, error) {
	return "report_size=" + strconv.FormatBool(field.(bool)), nil
}

func (p *parser) callonReportSizeField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReportSizeField1(stack["field"])
}

func (c *current) onListVixField1(field any) (any, error) {
	return "list_vix=" + strconv.FormatBool(field.(bool)), nil
}

func (p *parser) callonListVixField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListVixField1(stack["field"])
}

func (c *current) onIndexName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexName1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize {
		val, ok = p.parseRuleMemoize(rule)
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
