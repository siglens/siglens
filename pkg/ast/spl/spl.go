// Code generated by pigeon; DO NOT EDIT.

// Copyright (c) 2021-2024 SigScalr, Inc.
//
// This file is part of SigLens Observability Solution
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

package spl

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/siglens/siglens/pkg/ast"
	"github.com/siglens/siglens/pkg/segment/aggregations"
	"github.com/siglens/siglens/pkg/segment/query"
	"github.com/siglens/siglens/pkg/segment/structs"
	"github.com/siglens/siglens/pkg/segment/utils"
	log "github.com/sirupsen/logrus"
)

func getParseError(err error) error {
	switch ev := err.(type) {
	case errList:
		if pe, ok := ev[0].(*parserError); ok {
			return &ast.ParseError{
				Inner:    pe.Inner,
				Line:     pe.pos.line,
				Column:   pe.pos.col,
				Offset:   pe.pos.offset,
				Prefix:   pe.prefix,
				Expected: pe.expected,
			}
		}
	}
	return err
}

// Remove the first and last character of the string
func removeQuotes(s any) string {
	str := s.(string)
	if len(str) < 3 {
		return ""
	}

	return str[1 : len(str)-1]
}

// Check if it rename fields with similar names using a wildcard
func isRegexRename(originalPattern, newPattern string) (bool, error) {
	oldWildcards := strings.Count(originalPattern, "*")
	newWildcards := strings.Count(newPattern, "*")

	if oldWildcards == 0 && newWildcards == 0 {
		return false, nil
	} else if oldWildcards > 0 && oldWildcards == newWildcards {
		return true, nil
	} else {
		return false, errors.New("Patterns do not match")
	}
}

func deMorgansLaw(node *ast.Node) {
	switch node.NodeType {
	case ast.NodeTerminal:
		switch node.Comparison.Op {
		case "=":
			node.Comparison.Op = "!="
		case "!=":
			node.Comparison.Op = "="
		case ">":
			node.Comparison.Op = "<="
		case "<":
			node.Comparison.Op = ">="
		case ">=":
			node.Comparison.Op = "<"
		case "<=":
			node.Comparison.Op = ">"
		default:
			log.Errorf("deMorgansLaw: unexpected node comparison op: %v", node.Comparison.Op)
		}
	case ast.NodeAnd:
		node.NodeType = ast.NodeOr
		deMorgansLaw(node.Left)
		deMorgansLaw(node.Right)
	case ast.NodeOr:
		node.NodeType = ast.NodeAnd
		deMorgansLaw(node.Left)
		deMorgansLaw(node.Right)
	default:
		log.Errorf("deMorgansLaw: unexpected NodeType: %v", node.NodeType)
	}
}

// Generate NumericExpr struct for eval functions
func createNumericExpr(op string, leftNumericExpr *structs.NumericExpr, rightNumericExpr *structs.NumericExpr, numericExprMode structs.NumericExprMode) (*structs.NumericExpr, error) {
	if leftNumericExpr == nil {
		return nil, fmt.Errorf("expr cannot be nil")
	}

	return &structs.NumericExpr{
		IsTerminal:      false,
		Op:              op,
		Left:            leftNumericExpr,
		Right:           rightNumericExpr,
		NumericExprMode: numericExprMode,
	}, nil
}

func transferUint8ToString(opName interface{}) (string, error) {
	strData, ok := opName.([]byte)
	if !ok {
		return "", fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)
	return opNameStr, nil
}

func transferPCREToRE2(pattern string) string {
	pattern = strings.Replace(pattern, "(?<", "(?P<", -1)
	return pattern
}

func getRexColNames(pattern string) ([]string, error) {
	re, err := regexp.Compile(`\?<(?P<GroupName>[a-zA-Z0-9_]+)>`)
	if err != nil {
		return nil, fmt.Errorf("getRexColNames: There are some errors in the pattern: %v", err)
	}
	matches := re.FindAllStringSubmatch(pattern, -1)

	var rexColNames []string
	for _, match := range matches {
		rexColNames = append(rexColNames, match[1])
	}

	return rexColNames, nil
}

func initializeStatsOptions() *structs.StatsOptions {
	return &structs.StatsOptions{
		Delim:          " ",
		Partitions:     1,
		DedupSplitvals: false,
		Allnum:         false,
	}
}

func createSPathExpr(inputField, pathField, outputField string) (*structs.QueryAggregators, error) {

	if inputField == "" {
		inputField = "_raw"
	}

	spathExpr := &structs.SPathExpr{
		InputColName:  inputField,
		Path:          pathField,
		OutputColName: outputField,
	}
	return &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: &structs.LetColumnsRequest{
				ValueColRequest: &structs.ValueExpr{
					ValueExprMode: structs.VEMStringExpr,
					StringExpr: &structs.StringExpr{
						StringExprMode: structs.SEMTextExpr,
						TextExpr: &structs.TextExpr{
							IsTerminal: true,
							Op:         "spath",
							SPathExpr:  spathExpr,
						},
					},
				},
				NewColName: outputField,
			},
		},
	}, nil
}

type aggregator struct {
	measureAgg         *structs.MeasureAggregator
	renameOutputField  bool
	outputFieldNewName string
}

type singleAggTemp struct {
	aggregators   []*aggregator
	SplitByClause *structs.SplitByClause
}

type TxnArgs struct {
	argOption string
	arguments *structs.TransactionArguments
}

type TimechartArgs struct {
	singleAggExpr *singleAggTemp
	// TODO: Add eval clause expr.
	tcOptions *structs.TcOptions
}

type MultiValueColOptionArgs struct {
	argOption string
	mvColExpr *structs.MultiValueColLetRequest
}

type SPathFieldExpr struct {
	PathValue       string
	IsPathFieldName bool
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Start",
			pos:  position{line: 226, col: 1, offset: 6418},
			expr: &actionExpr{
				pos: position{line: 226, col: 10, offset: 6427},
				run: (*parser).callonStart1,
				expr: &seqExpr{
					pos: position{line: 226, col: 10, offset: 6427},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 226, col: 10, offset: 6427},
							expr: &ruleRefExpr{
								pos:  position{line: 226, col: 10, offset: 6427},
								name: "SPACE",
							},
						},
						&labeledExpr{
							pos:   position{line: 226, col: 17, offset: 6434},
							label: "initialSearch",
							expr: &ruleRefExpr{
								pos:  position{line: 226, col: 32, offset: 6449},
								name: "InitialSearchBlock",
							},
						},
						&labeledExpr{
							pos:   position{line: 226, col: 52, offset: 6469},
							label: "filterBlocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 226, col: 65, offset: 6482},
								expr: &ruleRefExpr{
									pos:  position{line: 226, col: 66, offset: 6483},
									name: "FilterBlock",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 226, col: 80, offset: 6497},
							label: "queryAggBlocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 226, col: 95, offset: 6512},
								expr: &ruleRefExpr{
									pos:  position{line: 226, col: 96, offset: 6513},
									name: "QueryAggergatorBlock",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 226, col: 119, offset: 6536},
							expr: &ruleRefExpr{
								pos:  position{line: 226, col: 119, offset: 6536},
								name: "SPACE",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 226, col: 126, offset: 6543},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "InitialSearchBlock",
			pos:  position{line: 297, col: 1, offset: 8744},
			expr: &actionExpr{
				pos: position{line: 297, col: 23, offset: 8766},
				run: (*parser).callonInitialSearchBlock1,
				expr: &seqExpr{
					pos: position{line: 297, col: 23, offset: 8766},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 297, col: 23, offset: 8766},
							expr: &ruleRefExpr{
								pos:  position{line: 297, col: 23, offset: 8766},
								name: "CMD_SEARCH",
							},
						},
						&labeledExpr{
							pos:   position{line: 297, col: 35, offset: 8778},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 297, col: 42, offset: 8785},
								name: "ClauseLevel4",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBlock",
			pos:  position{line: 301, col: 1, offset: 8826},
			expr: &actionExpr{
				pos: position{line: 301, col: 16, offset: 8841},
				run: (*parser).callonSearchBlock1,
				expr: &seqExpr{
					pos: position{line: 301, col: 16, offset: 8841},
					exprs: []any{
						&notExpr{
							pos: position{line: 301, col: 16, offset: 8841},
							expr: &ruleRefExpr{
								pos:  position{line: 301, col: 18, offset: 8843},
								name: "ALLCMD",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 301, col: 26, offset: 8851},
							expr: &ruleRefExpr{
								pos:  position{line: 301, col: 26, offset: 8851},
								name: "CMD_SEARCH",
							},
						},
						&labeledExpr{
							pos:   position{line: 301, col: 38, offset: 8863},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 301, col: 45, offset: 8870},
								name: "ClauseLevel4",
							},
						},
					},
				},
			},
		},
		{
			name: "FilterBlock",
			pos:  position{line: 305, col: 1, offset: 8911},
			expr: &actionExpr{
				pos: position{line: 305, col: 16, offset: 8926},
				run: (*parser).callonFilterBlock1,
				expr: &seqExpr{
					pos: position{line: 305, col: 16, offset: 8926},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 305, col: 16, offset: 8926},
							name: "PIPE",
						},
						&labeledExpr{
							pos:   position{line: 305, col: 21, offset: 8931},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 305, col: 28, offset: 8938},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 305, col: 28, offset: 8938},
										name: "SearchBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 305, col: 42, offset: 8952},
										name: "RegexBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QueryAggergatorBlock",
			pos:  position{line: 310, col: 1, offset: 9028},
			expr: &actionExpr{
				pos: position{line: 310, col: 25, offset: 9052},
				run: (*parser).callonQueryAggergatorBlock1,
				expr: &labeledExpr{
					pos:   position{line: 310, col: 25, offset: 9052},
					label: "block",
					expr: &choiceExpr{
						pos: position{line: 310, col: 32, offset: 9059},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 310, col: 32, offset: 9059},
								name: "FieldSelectBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 310, col: 51, offset: 9078},
								name: "AggregatorBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 310, col: 69, offset: 9096},
								name: "EvalBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 310, col: 81, offset: 9108},
								name: "WhereBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 310, col: 94, offset: 9121},
								name: "HeadBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 310, col: 106, offset: 9133},
								name: "RexBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 310, col: 117, offset: 9144},
								name: "StatisticBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 310, col: 134, offset: 9161},
								name: "RenameBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 310, col: 148, offset: 9175},
								name: "TimechartBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 310, col: 165, offset: 9192},
								name: "TransactionBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 310, col: 184, offset: 9211},
								name: "DedupBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 310, col: 197, offset: 9224},
								name: "SortBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 310, col: 209, offset: 9236},
								name: "MultiValueBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 310, col: 227, offset: 9254},
								name: "SPathBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldSelectBlock",
			pos:  position{line: 315, col: 1, offset: 9346},
			expr: &actionExpr{
				pos: position{line: 315, col: 21, offset: 9366},
				run: (*parser).callonFieldSelectBlock1,
				expr: &seqExpr{
					pos: position{line: 315, col: 21, offset: 9366},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 315, col: 21, offset: 9366},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 315, col: 26, offset: 9371},
							name: "CMD_FIELDS",
						},
						&labeledExpr{
							pos:   position{line: 315, col: 37, offset: 9382},
							label: "op",
							expr: &zeroOrOneExpr{
								pos: position{line: 315, col: 40, offset: 9385},
								expr: &choiceExpr{
									pos: position{line: 315, col: 41, offset: 9386},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 315, col: 41, offset: 9386},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
										&litMatcher{
											pos:        position{line: 315, col: 47, offset: 9392},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 315, col: 53, offset: 9398},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 315, col: 68, offset: 9413},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 315, col: 75, offset: 9420},
								name: "FieldNameList",
							},
						},
					},
				},
			},
		},
		{
			name: "AggregatorBlock",
			pos:  position{line: 333, col: 1, offset: 9924},
			expr: &actionExpr{
				pos: position{line: 333, col: 20, offset: 9943},
				run: (*parser).callonAggregatorBlock1,
				expr: &seqExpr{
					pos: position{line: 333, col: 20, offset: 9943},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 333, col: 20, offset: 9943},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 333, col: 25, offset: 9948},
							name: "CMD_STATS",
						},
						&labeledExpr{
							pos:   position{line: 333, col: 35, offset: 9958},
							label: "aggs",
							expr: &ruleRefExpr{
								pos:  position{line: 333, col: 40, offset: 9963},
								name: "AggregationList",
							},
						},
						&labeledExpr{
							pos:   position{line: 333, col: 56, offset: 9979},
							label: "byFields",
							expr: &zeroOrOneExpr{
								pos: position{line: 333, col: 65, offset: 9988},
								expr: &ruleRefExpr{
									pos:  position{line: 333, col: 66, offset: 9989},
									name: "GroupbyBlock",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 333, col: 81, offset: 10004},
							label: "options",
							expr: &zeroOrOneExpr{
								pos: position{line: 333, col: 89, offset: 10012},
								expr: &ruleRefExpr{
									pos:  position{line: 333, col: 90, offset: 10013},
									name: "StatsOptions",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatsOptions",
			pos:  position{line: 386, col: 1, offset: 11747},
			expr: &actionExpr{
				pos: position{line: 386, col: 17, offset: 11763},
				run: (*parser).callonStatsOptions1,
				expr: &labeledExpr{
					pos:   position{line: 386, col: 17, offset: 11763},
					label: "option",
					expr: &zeroOrMoreExpr{
						pos: position{line: 386, col: 24, offset: 11770},
						expr: &ruleRefExpr{
							pos:  position{line: 386, col: 25, offset: 11771},
							name: "StatsOption",
						},
					},
				},
			},
		},
		{
			name: "StatsOption",
			pos:  position{line: 424, col: 1, offset: 13212},
			expr: &actionExpr{
				pos: position{line: 424, col: 16, offset: 13227},
				run: (*parser).callonStatsOption1,
				expr: &seqExpr{
					pos: position{line: 424, col: 16, offset: 13227},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 424, col: 16, offset: 13227},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 424, col: 22, offset: 13233},
							label: "optionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 424, col: 32, offset: 13243},
								name: "StatsOptionCMD",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 424, col: 47, offset: 13258},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 424, col: 53, offset: 13264},
							label: "str",
							expr: &choiceExpr{
								pos: position{line: 424, col: 58, offset: 13269},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 424, col: 58, offset: 13269},
										name: "IntegerAsString",
									},
									&ruleRefExpr{
										pos:  position{line: 424, col: 76, offset: 13287},
										name: "EvalFieldToRead",
									},
									&ruleRefExpr{
										pos:  position{line: 424, col: 94, offset: 13305},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatsOptionCMD",
			pos:  position{line: 429, col: 1, offset: 13410},
			expr: &actionExpr{
				pos: position{line: 429, col: 19, offset: 13428},
				run: (*parser).callonStatsOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 429, col: 19, offset: 13428},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 429, col: 27, offset: 13436},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 429, col: 27, offset: 13436},
								val:        "allnum",
								ignoreCase: false,
								want:       "\"allnum\"",
							},
							&litMatcher{
								pos:        position{line: 429, col: 38, offset: 13447},
								val:        "dedup_splitvals",
								ignoreCase: false,
								want:       "\"dedup_splitvals\"",
							},
							&litMatcher{
								pos:        position{line: 429, col: 58, offset: 13467},
								val:        "delim",
								ignoreCase: false,
								want:       "\"delim\"",
							},
							&litMatcher{
								pos:        position{line: 429, col: 68, offset: 13477},
								val:        "partitions",
								ignoreCase: false,
								want:       "\"partitions\"",
							},
						},
					},
				},
			},
		},
		{
			name: "GroupbyBlock",
			pos:  position{line: 437, col: 1, offset: 13667},
			expr: &actionExpr{
				pos: position{line: 437, col: 17, offset: 13683},
				run: (*parser).callonGroupbyBlock1,
				expr: &seqExpr{
					pos: position{line: 437, col: 17, offset: 13683},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 437, col: 17, offset: 13683},
							name: "BY",
						},
						&labeledExpr{
							pos:   position{line: 437, col: 20, offset: 13686},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 437, col: 27, offset: 13693},
								name: "FieldNameList",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexBlock",
			pos:  position{line: 448, col: 1, offset: 14042},
			expr: &actionExpr{
				pos: position{line: 448, col: 15, offset: 14056},
				run: (*parser).callonRegexBlock1,
				expr: &seqExpr{
					pos: position{line: 448, col: 15, offset: 14056},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 448, col: 15, offset: 14056},
							name: "CMD_REGEX",
						},
						&labeledExpr{
							pos:   position{line: 448, col: 25, offset: 14066},
							label: "keyAndOp",
							expr: &zeroOrOneExpr{
								pos: position{line: 448, col: 34, offset: 14075},
								expr: &seqExpr{
									pos: position{line: 448, col: 35, offset: 14076},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 448, col: 35, offset: 14076},
											name: "FieldName",
										},
										&ruleRefExpr{
											pos:  position{line: 448, col: 45, offset: 14086},
											name: "EqualityOperator",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 448, col: 64, offset: 14105},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 448, col: 68, offset: 14109},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel4",
			pos:  position{line: 476, col: 1, offset: 14688},
			expr: &actionExpr{
				pos: position{line: 476, col: 17, offset: 14704},
				run: (*parser).callonClauseLevel41,
				expr: &seqExpr{
					pos: position{line: 476, col: 17, offset: 14704},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 476, col: 17, offset: 14704},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 476, col: 23, offset: 14710},
								name: "ClauseLevel3",
							},
						},
						&labeledExpr{
							pos:   position{line: 476, col: 36, offset: 14723},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 476, col: 41, offset: 14728},
								expr: &seqExpr{
									pos: position{line: 476, col: 42, offset: 14729},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 476, col: 43, offset: 14730},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 476, col: 43, offset: 14730},
													name: "AND",
												},
												&ruleRefExpr{
													pos:  position{line: 476, col: 49, offset: 14736},
													name: "SPACE",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 476, col: 56, offset: 14743},
											name: "ClauseLevel3",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel3",
			pos:  position{line: 494, col: 1, offset: 15120},
			expr: &actionExpr{
				pos: position{line: 494, col: 17, offset: 15136},
				run: (*parser).callonClauseLevel31,
				expr: &seqExpr{
					pos: position{line: 494, col: 17, offset: 15136},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 494, col: 17, offset: 15136},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 494, col: 23, offset: 15142},
								name: "ClauseLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 494, col: 36, offset: 15155},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 494, col: 41, offset: 15160},
								expr: &seqExpr{
									pos: position{line: 494, col: 42, offset: 15161},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 494, col: 42, offset: 15161},
											name: "OR",
										},
										&ruleRefExpr{
											pos:  position{line: 494, col: 45, offset: 15164},
											name: "ClauseLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel2",
			pos:  position{line: 512, col: 1, offset: 15529},
			expr: &choiceExpr{
				pos: position{line: 512, col: 17, offset: 15545},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 512, col: 17, offset: 15545},
						run: (*parser).callonClauseLevel22,
						expr: &seqExpr{
							pos: position{line: 512, col: 17, offset: 15545},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 512, col: 17, offset: 15545},
									label: "notList",
									expr: &oneOrMoreExpr{
										pos: position{line: 512, col: 25, offset: 15553},
										expr: &ruleRefExpr{
											pos:  position{line: 512, col: 25, offset: 15553},
											name: "NOT",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 512, col: 30, offset: 15558},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 512, col: 36, offset: 15564},
										name: "ClauseLevel1",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 523, col: 5, offset: 15860},
						run: (*parser).callonClauseLevel29,
						expr: &labeledExpr{
							pos:   position{line: 523, col: 5, offset: 15860},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 523, col: 12, offset: 15867},
								name: "ClauseLevel1",
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel1",
			pos:  position{line: 527, col: 1, offset: 15908},
			expr: &choiceExpr{
				pos: position{line: 527, col: 17, offset: 15924},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 527, col: 17, offset: 15924},
						run: (*parser).callonClauseLevel12,
						expr: &seqExpr{
							pos: position{line: 527, col: 17, offset: 15924},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 527, col: 17, offset: 15924},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 527, col: 25, offset: 15932},
									label: "clause",
									expr: &ruleRefExpr{
										pos:  position{line: 527, col: 32, offset: 15939},
										name: "ClauseLevel4",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 527, col: 45, offset: 15952},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 529, col: 5, offset: 15989},
						run: (*parser).callonClauseLevel18,
						expr: &labeledExpr{
							pos:   position{line: 529, col: 5, offset: 15989},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 529, col: 10, offset: 15994},
								name: "SearchTerm",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchTerm",
			pos:  position{line: 535, col: 1, offset: 16152},
			expr: &actionExpr{
				pos: position{line: 535, col: 15, offset: 16166},
				run: (*parser).callonSearchTerm1,
				expr: &labeledExpr{
					pos:   position{line: 535, col: 15, offset: 16166},
					label: "term",
					expr: &choiceExpr{
						pos: position{line: 535, col: 21, offset: 16172},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 535, col: 21, offset: 16172},
								name: "FieldWithNumberValue",
							},
							&ruleRefExpr{
								pos:  position{line: 535, col: 44, offset: 16195},
								name: "FieldWithBooleanValue",
							},
							&ruleRefExpr{
								pos:  position{line: 535, col: 68, offset: 16219},
								name: "FieldWithStringValue",
							},
						},
					},
				},
			},
		},
		{
			name: "TimechartBlock",
			pos:  position{line: 540, col: 1, offset: 16360},
			expr: &actionExpr{
				pos: position{line: 540, col: 19, offset: 16378},
				run: (*parser).callonTimechartBlock1,
				expr: &seqExpr{
					pos: position{line: 540, col: 19, offset: 16378},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 540, col: 19, offset: 16378},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 540, col: 24, offset: 16383},
							name: "CMD_TIMECHART",
						},
						&labeledExpr{
							pos:   position{line: 540, col: 38, offset: 16397},
							label: "tcArgs",
							expr: &ruleRefExpr{
								pos:  position{line: 540, col: 45, offset: 16404},
								name: "TimechartArgumentsList",
							},
						},
						&labeledExpr{
							pos:   position{line: 540, col: 68, offset: 16427},
							label: "limitExpr",
							expr: &zeroOrOneExpr{
								pos: position{line: 540, col: 78, offset: 16437},
								expr: &ruleRefExpr{
									pos:  position{line: 540, col: 79, offset: 16438},
									name: "LimitExpr",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimechartArgumentsList",
			pos:  position{line: 628, col: 1, offset: 19181},
			expr: &actionExpr{
				pos: position{line: 628, col: 27, offset: 19207},
				run: (*parser).callonTimechartArgumentsList1,
				expr: &seqExpr{
					pos: position{line: 628, col: 27, offset: 19207},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 628, col: 27, offset: 19207},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 628, col: 33, offset: 19213},
								name: "TimechartArgument",
							},
						},
						&labeledExpr{
							pos:   position{line: 628, col: 51, offset: 19231},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 628, col: 56, offset: 19236},
								expr: &seqExpr{
									pos: position{line: 628, col: 57, offset: 19237},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 628, col: 57, offset: 19237},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 628, col: 63, offset: 19243},
											name: "TimechartArgument",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimechartArgument",
			pos:  position{line: 657, col: 1, offset: 19977},
			expr: &actionExpr{
				pos: position{line: 657, col: 22, offset: 19998},
				run: (*parser).callonTimechartArgument1,
				expr: &labeledExpr{
					pos:   position{line: 657, col: 22, offset: 19998},
					label: "tcArg",
					expr: &choiceExpr{
						pos: position{line: 657, col: 29, offset: 20005},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 657, col: 29, offset: 20005},
								name: "SingleAggExpr",
							},
							&ruleRefExpr{
								pos:  position{line: 657, col: 45, offset: 20021},
								name: "TcOptions",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleAggExpr",
			pos:  position{line: 661, col: 1, offset: 20059},
			expr: &actionExpr{
				pos: position{line: 661, col: 18, offset: 20076},
				run: (*parser).callonSingleAggExpr1,
				expr: &seqExpr{
					pos: position{line: 661, col: 18, offset: 20076},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 661, col: 18, offset: 20076},
							label: "aggs",
							expr: &ruleRefExpr{
								pos:  position{line: 661, col: 23, offset: 20081},
								name: "AggregationList",
							},
						},
						&labeledExpr{
							pos:   position{line: 661, col: 39, offset: 20097},
							label: "splitByClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 661, col: 53, offset: 20111},
								expr: &ruleRefExpr{
									pos:  position{line: 661, col: 53, offset: 20111},
									name: "SplitByClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SplitByClause",
			pos:  position{line: 675, col: 1, offset: 20450},
			expr: &actionExpr{
				pos: position{line: 675, col: 18, offset: 20467},
				run: (*parser).callonSplitByClause1,
				expr: &seqExpr{
					pos: position{line: 675, col: 18, offset: 20467},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 675, col: 18, offset: 20467},
							name: "BY",
						},
						&labeledExpr{
							pos:   position{line: 675, col: 21, offset: 20470},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 675, col: 27, offset: 20476},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "TcOptions",
			pos:  position{line: 683, col: 1, offset: 20605},
			expr: &actionExpr{
				pos: position{line: 683, col: 14, offset: 20618},
				run: (*parser).callonTcOptions1,
				expr: &labeledExpr{
					pos:   position{line: 683, col: 14, offset: 20618},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 683, col: 22, offset: 20626},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 683, col: 22, offset: 20626},
								name: "BinOptions",
							},
							&oneOrMoreExpr{
								pos: position{line: 683, col: 35, offset: 20639},
								expr: &ruleRefExpr{
									pos:  position{line: 683, col: 36, offset: 20640},
									name: "TcOption",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TcOption",
			pos:  position{line: 725, col: 1, offset: 22160},
			expr: &actionExpr{
				pos: position{line: 725, col: 13, offset: 22172},
				run: (*parser).callonTcOption1,
				expr: &seqExpr{
					pos: position{line: 725, col: 13, offset: 22172},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 725, col: 13, offset: 22172},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 725, col: 19, offset: 22178},
							label: "tcOptionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 725, col: 31, offset: 22190},
								name: "TcOptionCMD",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 725, col: 43, offset: 22202},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 725, col: 49, offset: 22208},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 725, col: 53, offset: 22212},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "TcOptionCMD",
			pos:  position{line: 730, col: 1, offset: 22325},
			expr: &actionExpr{
				pos: position{line: 730, col: 16, offset: 22340},
				run: (*parser).callonTcOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 730, col: 16, offset: 22340},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 730, col: 24, offset: 22348},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 730, col: 24, offset: 22348},
								val:        "usenull",
								ignoreCase: false,
								want:       "\"usenull\"",
							},
							&litMatcher{
								pos:        position{line: 730, col: 36, offset: 22360},
								val:        "useother",
								ignoreCase: false,
								want:       "\"useother\"",
							},
							&litMatcher{
								pos:        position{line: 730, col: 49, offset: 22373},
								val:        "nullstr",
								ignoreCase: false,
								want:       "\"nullstr\"",
							},
							&litMatcher{
								pos:        position{line: 730, col: 61, offset: 22385},
								val:        "otherstr",
								ignoreCase: false,
								want:       "\"otherstr\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BinOptions",
			pos:  position{line: 739, col: 1, offset: 22734},
			expr: &actionExpr{
				pos: position{line: 739, col: 15, offset: 22748},
				run: (*parser).callonBinOptions1,
				expr: &labeledExpr{
					pos:   position{line: 739, col: 15, offset: 22748},
					label: "spanOptions",
					expr: &ruleRefExpr{
						pos:  position{line: 739, col: 27, offset: 22760},
						name: "SpanOptions",
					},
				},
			},
		},
		{
			name: "SpanOptions",
			pos:  position{line: 747, col: 1, offset: 22985},
			expr: &actionExpr{
				pos: position{line: 747, col: 16, offset: 23000},
				run: (*parser).callonSpanOptions1,
				expr: &seqExpr{
					pos: position{line: 747, col: 16, offset: 23000},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 747, col: 16, offset: 23000},
							name: "CMD_SPAN",
						},
						&ruleRefExpr{
							pos:  position{line: 747, col: 25, offset: 23009},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 747, col: 31, offset: 23015},
							label: "spanLength",
							expr: &ruleRefExpr{
								pos:  position{line: 747, col: 42, offset: 23026},
								name: "SpanLength",
							},
						},
					},
				},
			},
		},
		{
			name: "SpanLength",
			pos:  position{line: 754, col: 1, offset: 23172},
			expr: &actionExpr{
				pos: position{line: 754, col: 15, offset: 23186},
				run: (*parser).callonSpanLength1,
				expr: &seqExpr{
					pos: position{line: 754, col: 15, offset: 23186},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 754, col: 15, offset: 23186},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 754, col: 24, offset: 23195},
								name: "IntegerAsString",
							},
						},
						&labeledExpr{
							pos:   position{line: 754, col: 40, offset: 23211},
							label: "timeScale",
							expr: &ruleRefExpr{
								pos:  position{line: 754, col: 50, offset: 23221},
								name: "TimeScale",
							},
						},
					},
				},
			},
		},
		{
			name: "TimeScale",
			pos:  position{line: 767, col: 1, offset: 23539},
			expr: &actionExpr{
				pos: position{line: 767, col: 14, offset: 23552},
				run: (*parser).callonTimeScale1,
				expr: &labeledExpr{
					pos:   position{line: 767, col: 14, offset: 23552},
					label: "timeUnit",
					expr: &choiceExpr{
						pos: position{line: 767, col: 24, offset: 23562},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 767, col: 24, offset: 23562},
								name: "Second",
							},
							&ruleRefExpr{
								pos:  position{line: 767, col: 33, offset: 23571},
								name: "Minute",
							},
							&ruleRefExpr{
								pos:  position{line: 767, col: 42, offset: 23580},
								name: "Hour",
							},
							&ruleRefExpr{
								pos:  position{line: 767, col: 49, offset: 23587},
								name: "Day",
							},
							&ruleRefExpr{
								pos:  position{line: 767, col: 54, offset: 23592},
								name: "Week",
							},
							&ruleRefExpr{
								pos:  position{line: 767, col: 61, offset: 23599},
								name: "Month",
							},
							&ruleRefExpr{
								pos:  position{line: 767, col: 69, offset: 23607},
								name: "Quarter",
							},
							&ruleRefExpr{
								pos:  position{line: 767, col: 78, offset: 23616},
								name: "Subseconds",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitExpr",
			pos:  position{line: 772, col: 1, offset: 23738},
			expr: &actionExpr{
				pos: position{line: 772, col: 14, offset: 23751},
				run: (*parser).callonLimitExpr1,
				expr: &seqExpr{
					pos: position{line: 772, col: 14, offset: 23751},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 772, col: 14, offset: 23751},
							name: "SPACE",
						},
						&litMatcher{
							pos:        position{line: 772, col: 20, offset: 23757},
							val:        "limit",
							ignoreCase: false,
							want:       "\"limit\"",
						},
						&ruleRefExpr{
							pos:  position{line: 772, col: 28, offset: 23765},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 772, col: 34, offset: 23771},
							label: "sortBy",
							expr: &zeroOrOneExpr{
								pos: position{line: 772, col: 41, offset: 23778},
								expr: &choiceExpr{
									pos: position{line: 772, col: 42, offset: 23779},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 772, col: 42, offset: 23779},
											val:        "top",
											ignoreCase: false,
											want:       "\"top\"",
										},
										&litMatcher{
											pos:        position{line: 772, col: 50, offset: 23787},
											val:        "bottom",
											ignoreCase: false,
											want:       "\"bottom\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 772, col: 61, offset: 23798},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 772, col: 76, offset: 23813},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 772, col: 86, offset: 23823},
								name: "IntegerAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticBlock",
			pos:  position{line: 796, col: 1, offset: 24404},
			expr: &actionExpr{
				pos: position{line: 796, col: 19, offset: 24422},
				run: (*parser).callonStatisticBlock1,
				expr: &seqExpr{
					pos: position{line: 796, col: 19, offset: 24422},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 796, col: 19, offset: 24422},
							name: "PIPE",
						},
						&labeledExpr{
							pos:   position{line: 796, col: 24, offset: 24427},
							label: "statisticExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 796, col: 38, offset: 24441},
								name: "StatisticExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticExpr",
			pos:  position{line: 829, col: 1, offset: 25419},
			expr: &actionExpr{
				pos: position{line: 829, col: 18, offset: 25436},
				run: (*parser).callonStatisticExpr1,
				expr: &seqExpr{
					pos: position{line: 829, col: 18, offset: 25436},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 829, col: 18, offset: 25436},
							label: "cmd",
							expr: &choiceExpr{
								pos: position{line: 829, col: 23, offset: 25441},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 829, col: 23, offset: 25441},
										name: "CMD_TOP",
									},
									&ruleRefExpr{
										pos:  position{line: 829, col: 33, offset: 25451},
										name: "CMD_RARE",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 829, col: 43, offset: 25461},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 829, col: 49, offset: 25467},
								expr: &ruleRefExpr{
									pos:  position{line: 829, col: 50, offset: 25468},
									name: "StatisticLimit",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 829, col: 67, offset: 25485},
							label: "fieldList",
							expr: &seqExpr{
								pos: position{line: 829, col: 78, offset: 25496},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 829, col: 78, offset: 25496},
										name: "SPACE",
									},
									&ruleRefExpr{
										pos:  position{line: 829, col: 84, offset: 25502},
										name: "FieldNameList",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 829, col: 99, offset: 25517},
							label: "byClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 829, col: 108, offset: 25526},
								expr: &ruleRefExpr{
									pos:  position{line: 829, col: 109, offset: 25527},
									name: "ByClause",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 829, col: 120, offset: 25538},
							label: "options",
							expr: &zeroOrOneExpr{
								pos: position{line: 829, col: 128, offset: 25546},
								expr: &ruleRefExpr{
									pos:  position{line: 829, col: 129, offset: 25547},
									name: "StatisticOptions",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticLimit",
			pos:  position{line: 871, col: 1, offset: 26632},
			expr: &choiceExpr{
				pos: position{line: 871, col: 19, offset: 26650},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 871, col: 19, offset: 26650},
						run: (*parser).callonStatisticLimit2,
						expr: &seqExpr{
							pos: position{line: 871, col: 19, offset: 26650},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 871, col: 19, offset: 26650},
									name: "SPACE",
								},
								&labeledExpr{
									pos:   position{line: 871, col: 25, offset: 26656},
									label: "number",
									expr: &ruleRefExpr{
										pos:  position{line: 871, col: 32, offset: 26663},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 874, col: 3, offset: 26717},
						run: (*parser).callonStatisticLimit7,
						expr: &seqExpr{
							pos: position{line: 874, col: 3, offset: 26717},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 874, col: 3, offset: 26717},
									name: "SPACE",
								},
								&litMatcher{
									pos:        position{line: 874, col: 9, offset: 26723},
									val:        "limit",
									ignoreCase: false,
									want:       "\"limit\"",
								},
								&ruleRefExpr{
									pos:  position{line: 874, col: 17, offset: 26731},
									name: "EQUAL",
								},
								&labeledExpr{
									pos:   position{line: 874, col: 23, offset: 26737},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 874, col: 30, offset: 26744},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticOptions",
			pos:  position{line: 879, col: 1, offset: 26842},
			expr: &actionExpr{
				pos: position{line: 879, col: 21, offset: 26862},
				run: (*parser).callonStatisticOptions1,
				expr: &labeledExpr{
					pos:   position{line: 879, col: 21, offset: 26862},
					label: "option",
					expr: &zeroOrMoreExpr{
						pos: position{line: 879, col: 28, offset: 26869},
						expr: &ruleRefExpr{
							pos:  position{line: 879, col: 29, offset: 26870},
							name: "StatisticOption",
						},
					},
				},
			},
		},
		{
			name: "StatisticOption",
			pos:  position{line: 928, col: 1, offset: 28432},
			expr: &actionExpr{
				pos: position{line: 928, col: 20, offset: 28451},
				run: (*parser).callonStatisticOption1,
				expr: &seqExpr{
					pos: position{line: 928, col: 20, offset: 28451},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 928, col: 20, offset: 28451},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 928, col: 26, offset: 28457},
							label: "optionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 928, col: 36, offset: 28467},
								name: "StatisticOptionCMD",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 928, col: 55, offset: 28486},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 928, col: 61, offset: 28492},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 928, col: 67, offset: 28498},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticOptionCMD",
			pos:  position{line: 933, col: 1, offset: 28607},
			expr: &actionExpr{
				pos: position{line: 933, col: 23, offset: 28629},
				run: (*parser).callonStatisticOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 933, col: 23, offset: 28629},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 933, col: 31, offset: 28637},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 933, col: 31, offset: 28637},
								val:        "countfield",
								ignoreCase: false,
								want:       "\"countfield\"",
							},
							&litMatcher{
								pos:        position{line: 933, col: 46, offset: 28652},
								val:        "showcount",
								ignoreCase: false,
								want:       "\"showcount\"",
							},
							&litMatcher{
								pos:        position{line: 933, col: 60, offset: 28666},
								val:        "otherstr",
								ignoreCase: false,
								want:       "\"otherstr\"",
							},
							&litMatcher{
								pos:        position{line: 933, col: 73, offset: 28679},
								val:        "useother",
								ignoreCase: false,
								want:       "\"useother\"",
							},
							&litMatcher{
								pos:        position{line: 933, col: 85, offset: 28691},
								val:        "percentfield",
								ignoreCase: false,
								want:       "\"percentfield\"",
							},
							&litMatcher{
								pos:        position{line: 933, col: 102, offset: 28708},
								val:        "showperc",
								ignoreCase: false,
								want:       "\"showperc\"",
							},
						},
					},
				},
			},
		},
		{
			name: "ByClause",
			pos:  position{line: 941, col: 1, offset: 28895},
			expr: &choiceExpr{
				pos: position{line: 941, col: 13, offset: 28907},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 941, col: 13, offset: 28907},
						run: (*parser).callonByClause2,
						expr: &seqExpr{
							pos: position{line: 941, col: 13, offset: 28907},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 941, col: 13, offset: 28907},
									name: "BY",
								},
								&labeledExpr{
									pos:   position{line: 941, col: 16, offset: 28910},
									label: "fieldList",
									expr: &ruleRefExpr{
										pos:  position{line: 941, col: 26, offset: 28920},
										name: "FieldNameList",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 944, col: 3, offset: 28977},
						run: (*parser).callonByClause7,
						expr: &labeledExpr{
							pos:   position{line: 944, col: 3, offset: 28977},
							label: "groupByBlock",
							expr: &ruleRefExpr{
								pos:  position{line: 944, col: 16, offset: 28990},
								name: "GroupbyBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupBlock",
			pos:  position{line: 948, col: 1, offset: 29048},
			expr: &actionExpr{
				pos: position{line: 948, col: 15, offset: 29062},
				run: (*parser).callonDedupBlock1,
				expr: &seqExpr{
					pos: position{line: 948, col: 15, offset: 29062},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 948, col: 15, offset: 29062},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 948, col: 20, offset: 29067},
							name: "CMD_DEDUP",
						},
						&labeledExpr{
							pos:   position{line: 948, col: 30, offset: 29077},
							label: "dedupExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 948, col: 40, offset: 29087},
								name: "DedupExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupExpr",
			pos:  position{line: 968, col: 1, offset: 29655},
			expr: &actionExpr{
				pos: position{line: 968, col: 14, offset: 29668},
				run: (*parser).callonDedupExpr1,
				expr: &seqExpr{
					pos: position{line: 968, col: 14, offset: 29668},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 968, col: 14, offset: 29668},
							label: "limitArr",
							expr: &zeroOrOneExpr{
								pos: position{line: 968, col: 23, offset: 29677},
								expr: &seqExpr{
									pos: position{line: 968, col: 24, offset: 29678},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 968, col: 24, offset: 29678},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 968, col: 30, offset: 29684},
											name: "IntegerAsString",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 968, col: 48, offset: 29702},
							label: "options1",
							expr: &zeroOrOneExpr{
								pos: position{line: 968, col: 57, offset: 29711},
								expr: &ruleRefExpr{
									pos:  position{line: 968, col: 58, offset: 29712},
									name: "DedupOptions",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 968, col: 73, offset: 29727},
							label: "fieldList",
							expr: &zeroOrOneExpr{
								pos: position{line: 968, col: 83, offset: 29737},
								expr: &ruleRefExpr{
									pos:  position{line: 968, col: 84, offset: 29738},
									name: "DedupFieldList",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 968, col: 101, offset: 29755},
							label: "options2",
							expr: &zeroOrOneExpr{
								pos: position{line: 968, col: 110, offset: 29764},
								expr: &ruleRefExpr{
									pos:  position{line: 968, col: 111, offset: 29765},
									name: "DedupOptions",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 968, col: 126, offset: 29780},
							label: "sortByClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 968, col: 139, offset: 29793},
								expr: &ruleRefExpr{
									pos:  position{line: 968, col: 140, offset: 29794},
									name: "DedupSortByClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DedupFieldName",
			pos:  position{line: 1025, col: 1, offset: 31532},
			expr: &actionExpr{
				pos: position{line: 1025, col: 19, offset: 31550},
				run: (*parser).callonDedupFieldName1,
				expr: &seqExpr{
					pos: position{line: 1025, col: 19, offset: 31550},
					exprs: []any{
						&notExpr{
							pos: position{line: 1025, col: 19, offset: 31550},
							expr: &litMatcher{
								pos:        position{line: 1025, col: 21, offset: 31552},
								val:        "sortby",
								ignoreCase: false,
								want:       "\"sortby\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1025, col: 31, offset: 31562},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1025, col: 37, offset: 31568},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupFieldList",
			pos:  position{line: 1029, col: 1, offset: 31605},
			expr: &actionExpr{
				pos: position{line: 1029, col: 19, offset: 31623},
				run: (*parser).callonDedupFieldList1,
				expr: &seqExpr{
					pos: position{line: 1029, col: 19, offset: 31623},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1029, col: 19, offset: 31623},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 1029, col: 25, offset: 31629},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1029, col: 31, offset: 31635},
								name: "DedupFieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 1029, col: 46, offset: 31650},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1029, col: 51, offset: 31655},
								expr: &seqExpr{
									pos: position{line: 1029, col: 52, offset: 31656},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1029, col: 52, offset: 31656},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 1029, col: 58, offset: 31662},
											name: "DedupFieldName",
										},
										&notExpr{
											pos: position{line: 1029, col: 73, offset: 31677},
											expr: &ruleRefExpr{
												pos:  position{line: 1029, col: 74, offset: 31678},
												name: "EQUAL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DedupOptions",
			pos:  position{line: 1047, col: 1, offset: 32206},
			expr: &actionExpr{
				pos: position{line: 1047, col: 17, offset: 32222},
				run: (*parser).callonDedupOptions1,
				expr: &labeledExpr{
					pos:   position{line: 1047, col: 17, offset: 32222},
					label: "option",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1047, col: 24, offset: 32229},
						expr: &ruleRefExpr{
							pos:  position{line: 1047, col: 25, offset: 32230},
							name: "DedupOption",
						},
					},
				},
			},
		},
		{
			name: "DedupOption",
			pos:  position{line: 1087, col: 1, offset: 33496},
			expr: &actionExpr{
				pos: position{line: 1087, col: 16, offset: 33511},
				run: (*parser).callonDedupOption1,
				expr: &seqExpr{
					pos: position{line: 1087, col: 16, offset: 33511},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1087, col: 16, offset: 33511},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 1087, col: 22, offset: 33517},
							label: "optionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 1087, col: 32, offset: 33527},
								name: "DedupOptionCMD",
							},
						},
						&litMatcher{
							pos:        position{line: 1087, col: 47, offset: 33542},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 1087, col: 51, offset: 33546},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1087, col: 57, offset: 33552},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupOptionCMD",
			pos:  position{line: 1092, col: 1, offset: 33661},
			expr: &actionExpr{
				pos: position{line: 1092, col: 19, offset: 33679},
				run: (*parser).callonDedupOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 1092, col: 19, offset: 33679},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 1092, col: 27, offset: 33687},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 1092, col: 27, offset: 33687},
								val:        "consecutive",
								ignoreCase: false,
								want:       "\"consecutive\"",
							},
							&litMatcher{
								pos:        position{line: 1092, col: 43, offset: 33703},
								val:        "keepempty",
								ignoreCase: false,
								want:       "\"keepempty\"",
							},
							&litMatcher{
								pos:        position{line: 1092, col: 57, offset: 33717},
								val:        "keepevents",
								ignoreCase: false,
								want:       "\"keepevents\"",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupSortByClause",
			pos:  position{line: 1100, col: 1, offset: 33902},
			expr: &actionExpr{
				pos: position{line: 1100, col: 22, offset: 33923},
				run: (*parser).callonDedupSortByClause1,
				expr: &seqExpr{
					pos: position{line: 1100, col: 22, offset: 33923},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1100, col: 22, offset: 33923},
							name: "CMD_DEDUP_SORTBY",
						},
						&labeledExpr{
							pos:   position{line: 1100, col: 39, offset: 33940},
							label: "dedupSortEles",
							expr: &ruleRefExpr{
								pos:  position{line: 1100, col: 53, offset: 33954},
								name: "SortElements",
							},
						},
					},
				},
			},
		},
		{
			name: "SortElements",
			pos:  position{line: 1105, col: 1, offset: 34062},
			expr: &actionExpr{
				pos: position{line: 1105, col: 17, offset: 34078},
				run: (*parser).callonSortElements1,
				expr: &seqExpr{
					pos: position{line: 1105, col: 17, offset: 34078},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1105, col: 17, offset: 34078},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1105, col: 23, offset: 34084},
								name: "SingleSortElement",
							},
						},
						&labeledExpr{
							pos:   position{line: 1105, col: 41, offset: 34102},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1105, col: 46, offset: 34107},
								expr: &seqExpr{
									pos: position{line: 1105, col: 47, offset: 34108},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1105, col: 47, offset: 34108},
											name: "SPACE_OR_COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 1105, col: 62, offset: 34123},
											name: "SingleSortElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleSortElement",
			pos:  position{line: 1120, col: 1, offset: 34481},
			expr: &actionExpr{
				pos: position{line: 1120, col: 22, offset: 34502},
				run: (*parser).callonSingleSortElement1,
				expr: &labeledExpr{
					pos:   position{line: 1120, col: 22, offset: 34502},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1120, col: 31, offset: 34511},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1120, col: 31, offset: 34511},
								name: "SingleSortElementWithCast",
							},
							&ruleRefExpr{
								pos:  position{line: 1120, col: 59, offset: 34539},
								name: "SingleSortElementWithoutCast",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleSortElementWithoutCast",
			pos:  position{line: 1124, col: 1, offset: 34598},
			expr: &actionExpr{
				pos: position{line: 1124, col: 33, offset: 34630},
				run: (*parser).callonSingleSortElementWithoutCast1,
				expr: &seqExpr{
					pos: position{line: 1124, col: 33, offset: 34630},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1124, col: 33, offset: 34630},
							label: "sortBySymbol",
							expr: &choiceExpr{
								pos: position{line: 1124, col: 47, offset: 34644},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 1124, col: 47, offset: 34644},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&litMatcher{
										pos:        position{line: 1124, col: 53, offset: 34650},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
									&litMatcher{
										pos:        position{line: 1124, col: 59, offset: 34656},
										val:        "",
										ignoreCase: false,
										want:       "\"\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1124, col: 63, offset: 34660},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1124, col: 69, offset: 34666},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleSortElementWithCast",
			pos:  position{line: 1139, col: 1, offset: 34941},
			expr: &actionExpr{
				pos: position{line: 1139, col: 30, offset: 34970},
				run: (*parser).callonSingleSortElementWithCast1,
				expr: &seqExpr{
					pos: position{line: 1139, col: 30, offset: 34970},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1139, col: 30, offset: 34970},
							label: "sortBySymbol",
							expr: &choiceExpr{
								pos: position{line: 1139, col: 44, offset: 34984},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 1139, col: 44, offset: 34984},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&litMatcher{
										pos:        position{line: 1139, col: 50, offset: 34990},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
									&litMatcher{
										pos:        position{line: 1139, col: 56, offset: 34996},
										val:        "",
										ignoreCase: false,
										want:       "\"\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1139, col: 60, offset: 35000},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 1139, col: 64, offset: 35004},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 1139, col: 64, offset: 35004},
										val:        "auto",
										ignoreCase: false,
										want:       "\"auto\"",
									},
									&litMatcher{
										pos:        position{line: 1139, col: 73, offset: 35013},
										val:        "str",
										ignoreCase: false,
										want:       "\"str\"",
									},
									&litMatcher{
										pos:        position{line: 1139, col: 81, offset: 35021},
										val:        "ip",
										ignoreCase: false,
										want:       "\"ip\"",
									},
									&litMatcher{
										pos:        position{line: 1139, col: 88, offset: 35028},
										val:        "num",
										ignoreCase: false,
										want:       "\"num\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1139, col: 95, offset: 35035},
							name: "L_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 1139, col: 103, offset: 35043},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1139, col: 109, offset: 35049},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1139, col: 119, offset: 35059},
							name: "R_PAREN",
						},
					},
				},
			},
		},
		{
			name: "RenameBlock",
			pos:  position{line: 1159, col: 1, offset: 35484},
			expr: &actionExpr{
				pos: position{line: 1159, col: 16, offset: 35499},
				run: (*parser).callonRenameBlock1,
				expr: &seqExpr{
					pos: position{line: 1159, col: 16, offset: 35499},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1159, col: 16, offset: 35499},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1159, col: 21, offset: 35504},
							name: "CMD_RENAME",
						},
						&labeledExpr{
							pos:   position{line: 1159, col: 32, offset: 35515},
							label: "renameExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 1159, col: 43, offset: 35526},
								name: "RenameExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameExpr",
			pos:  position{line: 1175, col: 1, offset: 35901},
			expr: &choiceExpr{
				pos: position{line: 1175, col: 15, offset: 35915},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1175, col: 15, offset: 35915},
						run: (*parser).callonRenameExpr2,
						expr: &seqExpr{
							pos: position{line: 1175, col: 15, offset: 35915},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1175, col: 15, offset: 35915},
									label: "originalPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1175, col: 31, offset: 35931},
										name: "RenamePattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1175, col: 45, offset: 35945},
									name: "AS",
								},
								&labeledExpr{
									pos:   position{line: 1175, col: 48, offset: 35948},
									label: "newPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1175, col: 59, offset: 35959},
										name: "QuotedString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1186, col: 3, offset: 36278},
						run: (*parser).callonRenameExpr9,
						expr: &seqExpr{
							pos: position{line: 1186, col: 3, offset: 36278},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1186, col: 3, offset: 36278},
									label: "originalPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1186, col: 19, offset: 36294},
										name: "RenamePattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1186, col: 33, offset: 36308},
									name: "AS",
								},
								&labeledExpr{
									pos:   position{line: 1186, col: 36, offset: 36311},
									label: "newPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1186, col: 47, offset: 36322},
										name: "RenamePattern",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RexBlock",
			pos:  position{line: 1208, col: 1, offset: 36888},
			expr: &actionExpr{
				pos: position{line: 1208, col: 13, offset: 36900},
				run: (*parser).callonRexBlock1,
				expr: &seqExpr{
					pos: position{line: 1208, col: 13, offset: 36900},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1208, col: 13, offset: 36900},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1208, col: 18, offset: 36905},
							name: "CMD_REX",
						},
						&litMatcher{
							pos:        position{line: 1208, col: 26, offset: 36913},
							val:        "field",
							ignoreCase: false,
							want:       "\"field\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1208, col: 34, offset: 36921},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1208, col: 40, offset: 36927},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1208, col: 46, offset: 36933},
								name: "EvalFieldToRead",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1208, col: 62, offset: 36949},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 1208, col: 68, offset: 36955},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 1208, col: 72, offset: 36959},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "SortBlock",
			pos:  position{line: 1236, col: 1, offset: 37662},
			expr: &actionExpr{
				pos: position{line: 1236, col: 14, offset: 37675},
				run: (*parser).callonSortBlock1,
				expr: &seqExpr{
					pos: position{line: 1236, col: 14, offset: 37675},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1236, col: 14, offset: 37675},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1236, col: 19, offset: 37680},
							name: "CMD_SORT",
						},
						&labeledExpr{
							pos:   position{line: 1236, col: 28, offset: 37689},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 1236, col: 34, offset: 37695},
								expr: &ruleRefExpr{
									pos:  position{line: 1236, col: 35, offset: 37696},
									name: "SortLimit",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1236, col: 47, offset: 37708},
							label: "sortByEles",
							expr: &ruleRefExpr{
								pos:  position{line: 1236, col: 58, offset: 37719},
								name: "SortElements",
							},
						},
					},
				},
			},
		},
		{
			name: "SortLimit",
			pos:  position{line: 1273, col: 1, offset: 38570},
			expr: &actionExpr{
				pos: position{line: 1273, col: 14, offset: 38583},
				run: (*parser).callonSortLimit1,
				expr: &seqExpr{
					pos: position{line: 1273, col: 14, offset: 38583},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 1273, col: 14, offset: 38583},
							expr: &seqExpr{
								pos: position{line: 1273, col: 15, offset: 38584},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1273, col: 15, offset: 38584},
										val:        "limit",
										ignoreCase: false,
										want:       "\"limit\"",
									},
									&ruleRefExpr{
										pos:  position{line: 1273, col: 23, offset: 38592},
										name: "EQUAL",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1273, col: 31, offset: 38600},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 1273, col: 40, offset: 38609},
								name: "IntegerAsString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1273, col: 56, offset: 38625},
							name: "SPACE",
						},
					},
				},
			},
		},
		{
			name: "EvalBlock",
			pos:  position{line: 1287, col: 1, offset: 38924},
			expr: &actionExpr{
				pos: position{line: 1287, col: 14, offset: 38937},
				run: (*parser).callonEvalBlock1,
				expr: &seqExpr{
					pos: position{line: 1287, col: 14, offset: 38937},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1287, col: 14, offset: 38937},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1287, col: 19, offset: 38942},
							name: "CMD_EVAL",
						},
						&labeledExpr{
							pos:   position{line: 1287, col: 28, offset: 38951},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1287, col: 34, offset: 38957},
								name: "SingleEval",
							},
						},
						&labeledExpr{
							pos:   position{line: 1287, col: 45, offset: 38968},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1287, col: 50, offset: 38973},
								expr: &seqExpr{
									pos: position{line: 1287, col: 51, offset: 38974},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1287, col: 51, offset: 38974},
											name: "COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 1287, col: 57, offset: 38980},
											name: "SingleEval",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleEval",
			pos:  position{line: 1314, col: 1, offset: 39781},
			expr: &actionExpr{
				pos: position{line: 1314, col: 15, offset: 39795},
				run: (*parser).callonSingleEval1,
				expr: &seqExpr{
					pos: position{line: 1314, col: 15, offset: 39795},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1314, col: 15, offset: 39795},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1314, col: 21, offset: 39801},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1314, col: 31, offset: 39811},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1314, col: 37, offset: 39817},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 1314, col: 42, offset: 39822},
								name: "EvalExpression",
							},
						},
					},
				},
			},
		},
		{
			name: "EvalExpression",
			pos:  position{line: 1327, col: 1, offset: 40223},
			expr: &actionExpr{
				pos: position{line: 1327, col: 19, offset: 40241},
				run: (*parser).callonEvalExpression1,
				expr: &labeledExpr{
					pos:   position{line: 1327, col: 19, offset: 40241},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 1327, col: 25, offset: 40247},
						name: "ValueExpr",
					},
				},
			},
		},
		{
			name: "ConditionExpr",
			pos:  position{line: 1336, col: 1, offset: 40471},
			expr: &choiceExpr{
				pos: position{line: 1336, col: 18, offset: 40488},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1336, col: 18, offset: 40488},
						run: (*parser).callonConditionExpr2,
						expr: &seqExpr{
							pos: position{line: 1336, col: 18, offset: 40488},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1336, col: 18, offset: 40488},
									val:        "if",
									ignoreCase: false,
									want:       "\"if\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1336, col: 23, offset: 40493},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1336, col: 31, offset: 40501},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 1336, col: 41, offset: 40511},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1336, col: 50, offset: 40520},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1336, col: 56, offset: 40526},
									label: "trueValue",
									expr: &ruleRefExpr{
										pos:  position{line: 1336, col: 66, offset: 40536},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1336, col: 76, offset: 40546},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1336, col: 82, offset: 40552},
									label: "falseValue",
									expr: &ruleRefExpr{
										pos:  position{line: 1336, col: 93, offset: 40563},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1336, col: 103, offset: 40573},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1347, col: 3, offset: 40824},
						run: (*parser).callonConditionExpr15,
						expr: &seqExpr{
							pos: position{line: 1347, col: 3, offset: 40824},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1347, col: 3, offset: 40824},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1347, col: 11, offset: 40832},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1347, col: 11, offset: 40832},
												val:        "case",
												ignoreCase: false,
												want:       "\"case\"",
											},
											&litMatcher{
												pos:        position{line: 1347, col: 20, offset: 40841},
												val:        "validate",
												ignoreCase: false,
												want:       "\"validate\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1347, col: 32, offset: 40853},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1347, col: 40, offset: 40861},
									label: "pair",
									expr: &ruleRefExpr{
										pos:  position{line: 1347, col: 45, offset: 40866},
										name: "ConditionValuePair",
									},
								},
								&labeledExpr{
									pos:   position{line: 1347, col: 64, offset: 40885},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1347, col: 69, offset: 40890},
										expr: &seqExpr{
											pos: position{line: 1347, col: 70, offset: 40891},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1347, col: 70, offset: 40891},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1347, col: 76, offset: 40897},
													name: "ConditionValuePair",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1347, col: 97, offset: 40918},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1370, col: 3, offset: 41522},
						run: (*parser).callonConditionExpr30,
						expr: &seqExpr{
							pos: position{line: 1370, col: 3, offset: 41522},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1370, col: 3, offset: 41522},
									val:        "coalesce",
									ignoreCase: false,
									want:       "\"coalesce\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1370, col: 14, offset: 41533},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1370, col: 22, offset: 41541},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1370, col: 32, offset: 41551},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1370, col: 42, offset: 41561},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1370, col: 47, offset: 41566},
										expr: &seqExpr{
											pos: position{line: 1370, col: 48, offset: 41567},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1370, col: 48, offset: 41567},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1370, col: 54, offset: 41573},
													name: "ValueExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1370, col: 66, offset: 41585},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1387, col: 3, offset: 42004},
						run: (*parser).callonConditionExpr42,
						expr: &seqExpr{
							pos: position{line: 1387, col: 3, offset: 42004},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1387, col: 3, offset: 42004},
									val:        "nullif",
									ignoreCase: false,
									want:       "\"nullif\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1387, col: 12, offset: 42013},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1387, col: 20, offset: 42021},
									label: "leftValue",
									expr: &ruleRefExpr{
										pos:  position{line: 1387, col: 30, offset: 42031},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1387, col: 40, offset: 42041},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1387, col: 46, offset: 42047},
									label: "rightValue",
									expr: &ruleRefExpr{
										pos:  position{line: 1387, col: 57, offset: 42058},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1387, col: 67, offset: 42068},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConditionValuePair",
			pos:  position{line: 1400, col: 1, offset: 42347},
			expr: &actionExpr{
				pos: position{line: 1400, col: 23, offset: 42369},
				run: (*parser).callonConditionValuePair1,
				expr: &seqExpr{
					pos: position{line: 1400, col: 23, offset: 42369},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1400, col: 23, offset: 42369},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 1400, col: 33, offset: 42379},
								name: "BoolExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1400, col: 42, offset: 42388},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 1400, col: 48, offset: 42394},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1400, col: 54, offset: 42400},
								name: "ValueExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "TextExpr",
			pos:  position{line: 1410, col: 1, offset: 42841},
			expr: &choiceExpr{
				pos: position{line: 1410, col: 13, offset: 42853},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1410, col: 13, offset: 42853},
						run: (*parser).callonTextExpr2,
						expr: &seqExpr{
							pos: position{line: 1410, col: 14, offset: 42854},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1410, col: 14, offset: 42854},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1410, col: 22, offset: 42862},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1410, col: 22, offset: 42862},
												val:        "lower",
												ignoreCase: false,
												want:       "\"lower\"",
											},
											&litMatcher{
												pos:        position{line: 1410, col: 32, offset: 42872},
												val:        "upper",
												ignoreCase: false,
												want:       "\"upper\"",
											},
											&litMatcher{
												pos:        position{line: 1410, col: 42, offset: 42882},
												val:        "urldecode",
												ignoreCase: false,
												want:       "\"urldecode\"",
											},
											&litMatcher{
												pos:        position{line: 1410, col: 56, offset: 42896},
												val:        "mvcount",
												ignoreCase: false,
												want:       "\"mvcount\"",
											},
											&litMatcher{
												pos:        position{line: 1410, col: 68, offset: 42908},
												val:        "mvdedup",
												ignoreCase: false,
												want:       "\"mvdedup\"",
											},
											&litMatcher{
												pos:        position{line: 1410, col: 80, offset: 42920},
												val:        "mvsort",
												ignoreCase: false,
												want:       "\"mvsort\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1410, col: 90, offset: 42930},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1410, col: 98, offset: 42938},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1410, col: 109, offset: 42949},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1410, col: 120, offset: 42960},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1422, col: 3, offset: 43274},
						run: (*parser).callonTextExpr16,
						expr: &seqExpr{
							pos: position{line: 1422, col: 4, offset: 43275},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1422, col: 4, offset: 43275},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1422, col: 12, offset: 43283},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1422, col: 12, offset: 43283},
												val:        "max",
												ignoreCase: false,
												want:       "\"max\"",
											},
											&litMatcher{
												pos:        position{line: 1422, col: 20, offset: 43291},
												val:        "min",
												ignoreCase: false,
												want:       "\"min\"",
											},
											&litMatcher{
												pos:        position{line: 1422, col: 28, offset: 43299},
												val:        "mvappend",
												ignoreCase: false,
												want:       "\"mvappend\"",
											},
											&litMatcher{
												pos:        position{line: 1422, col: 41, offset: 43312},
												val:        "mvfind",
												ignoreCase: false,
												want:       "\"mvfind\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1422, col: 51, offset: 43322},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1422, col: 59, offset: 43330},
									label: "firstVal",
									expr: &ruleRefExpr{
										pos:  position{line: 1422, col: 68, offset: 43339},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1422, col: 79, offset: 43350},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1422, col: 84, offset: 43355},
										expr: &seqExpr{
											pos: position{line: 1422, col: 85, offset: 43356},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1422, col: 85, offset: 43356},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1422, col: 91, offset: 43362},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1422, col: 104, offset: 43375},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1444, col: 3, offset: 43975},
						run: (*parser).callonTextExpr33,
						expr: &seqExpr{
							pos: position{line: 1444, col: 4, offset: 43976},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1444, col: 4, offset: 43976},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1444, col: 12, offset: 43984},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1444, col: 12, offset: 43984},
												val:        "split",
												ignoreCase: false,
												want:       "\"split\"",
											},
											&litMatcher{
												pos:        position{line: 1444, col: 22, offset: 43994},
												val:        "mvjoin",
												ignoreCase: false,
												want:       "\"mvjoin\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1444, col: 32, offset: 44004},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1444, col: 40, offset: 44012},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1444, col: 51, offset: 44023},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1444, col: 62, offset: 44034},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1444, col: 68, offset: 44040},
									label: "delim",
									expr: &ruleRefExpr{
										pos:  position{line: 1444, col: 74, offset: 44046},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1444, col: 85, offset: 44057},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1456, col: 3, offset: 44390},
						run: (*parser).callonTextExpr46,
						expr: &seqExpr{
							pos: position{line: 1456, col: 4, offset: 44391},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1456, col: 4, offset: 44391},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1456, col: 12, offset: 44399},
										val:        "substr",
										ignoreCase: false,
										want:       "\"substr\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1456, col: 22, offset: 44409},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1456, col: 30, offset: 44417},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1456, col: 41, offset: 44428},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1456, col: 52, offset: 44439},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1456, col: 58, offset: 44445},
									label: "startIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 1456, col: 69, offset: 44456},
										name: "NumericExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1456, col: 81, offset: 44468},
									label: "lengthParam",
									expr: &zeroOrOneExpr{
										pos: position{line: 1456, col: 93, offset: 44480},
										expr: &seqExpr{
											pos: position{line: 1456, col: 94, offset: 44481},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1456, col: 94, offset: 44481},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1456, col: 100, offset: 44487},
													name: "NumericExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1456, col: 114, offset: 44501},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1481, col: 3, offset: 45331},
						run: (*parser).callonTextExpr62,
						expr: &seqExpr{
							pos: position{line: 1481, col: 3, offset: 45331},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1481, col: 3, offset: 45331},
									val:        "tostring",
									ignoreCase: false,
									want:       "\"tostring\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1481, col: 14, offset: 45342},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1481, col: 22, offset: 45350},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 1481, col: 28, offset: 45356},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1481, col: 38, offset: 45366},
									label: "format",
									expr: &zeroOrOneExpr{
										pos: position{line: 1481, col: 45, offset: 45373},
										expr: &seqExpr{
											pos: position{line: 1481, col: 46, offset: 45374},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1481, col: 46, offset: 45374},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1481, col: 52, offset: 45380},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1481, col: 65, offset: 45393},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1494, col: 3, offset: 45761},
						run: (*parser).callonTextExpr74,
						expr: &seqExpr{
							pos: position{line: 1494, col: 4, offset: 45762},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1494, col: 4, offset: 45762},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1494, col: 12, offset: 45770},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1494, col: 12, offset: 45770},
												val:        "ltrim",
												ignoreCase: false,
												want:       "\"ltrim\"",
											},
											&litMatcher{
												pos:        position{line: 1494, col: 22, offset: 45780},
												val:        "rtrim",
												ignoreCase: false,
												want:       "\"rtrim\"",
											},
											&litMatcher{
												pos:        position{line: 1494, col: 32, offset: 45790},
												val:        "trim",
												ignoreCase: false,
												want:       "\"trim\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1494, col: 40, offset: 45798},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1494, col: 48, offset: 45806},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1494, col: 54, offset: 45812},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1494, col: 66, offset: 45824},
									label: "strToRemoveExpr",
									expr: &zeroOrOneExpr{
										pos: position{line: 1494, col: 82, offset: 45840},
										expr: &ruleRefExpr{
											pos:  position{line: 1494, col: 83, offset: 45841},
											name: "StrToRemoveExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1494, col: 101, offset: 45859},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1513, col: 3, offset: 46299},
						run: (*parser).callonTextExpr88,
						expr: &seqExpr{
							pos: position{line: 1513, col: 3, offset: 46299},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1513, col: 3, offset: 46299},
									val:        "spath",
									ignoreCase: false,
									want:       "\"spath\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1513, col: 11, offset: 46307},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1513, col: 19, offset: 46315},
									label: "inputField",
									expr: &ruleRefExpr{
										pos:  position{line: 1513, col: 30, offset: 46326},
										name: "FieldNameStartWith_",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1513, col: 50, offset: 46346},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1513, col: 56, offset: 46352},
									label: "path",
									expr: &choiceExpr{
										pos: position{line: 1513, col: 62, offset: 46358},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 1513, col: 62, offset: 46358},
												name: "QuotedPathString",
											},
											&ruleRefExpr{
												pos:  position{line: 1513, col: 81, offset: 46377},
												name: "UnquotedPathValue",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1513, col: 100, offset: 46396},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1524, col: 3, offset: 46701},
						run: (*parser).callonTextExpr100,
						expr: &seqExpr{
							pos: position{line: 1524, col: 3, offset: 46701},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1524, col: 3, offset: 46701},
									val:        "ipmask",
									ignoreCase: false,
									want:       "\"ipmask\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1524, col: 12, offset: 46710},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1524, col: 20, offset: 46718},
									label: "mask",
									expr: &ruleRefExpr{
										pos:  position{line: 1524, col: 25, offset: 46723},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1524, col: 36, offset: 46734},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1524, col: 42, offset: 46740},
									label: "ip",
									expr: &ruleRefExpr{
										pos:  position{line: 1524, col: 45, offset: 46743},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1524, col: 55, offset: 46753},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1531, col: 3, offset: 46911},
						run: (*parser).callonTextExpr110,
						expr: &seqExpr{
							pos: position{line: 1531, col: 3, offset: 46911},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1531, col: 3, offset: 46911},
									val:        "object_to_array",
									ignoreCase: false,
									want:       "\"object_to_array\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1531, col: 21, offset: 46929},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1531, col: 29, offset: 46937},
									label: "obj",
									expr: &ruleRefExpr{
										pos:  position{line: 1531, col: 33, offset: 46941},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1531, col: 43, offset: 46951},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1531, col: 49, offset: 46957},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 1531, col: 53, offset: 46961},
										name: "QuotedString",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1531, col: 66, offset: 46974},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1531, col: 72, offset: 46980},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 1531, col: 78, offset: 46986},
										name: "QuotedString",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1531, col: 91, offset: 46999},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1542, col: 3, offset: 47307},
						run: (*parser).callonTextExpr123,
						expr: &seqExpr{
							pos: position{line: 1542, col: 3, offset: 47307},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1542, col: 3, offset: 47307},
									val:        "printf",
									ignoreCase: false,
									want:       "\"printf\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1542, col: 12, offset: 47316},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1542, col: 20, offset: 47324},
									label: "format",
									expr: &ruleRefExpr{
										pos:  position{line: 1542, col: 27, offset: 47331},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1542, col: 38, offset: 47342},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1542, col: 43, offset: 47347},
										expr: &seqExpr{
											pos: position{line: 1542, col: 44, offset: 47348},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1542, col: 44, offset: 47348},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1542, col: 50, offset: 47354},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1542, col: 63, offset: 47367},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1560, col: 3, offset: 47834},
						run: (*parser).callonTextExpr135,
						expr: &seqExpr{
							pos: position{line: 1560, col: 3, offset: 47834},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1560, col: 3, offset: 47834},
									val:        "tojson",
									ignoreCase: false,
									want:       "\"tojson\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1560, col: 12, offset: 47843},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1560, col: 20, offset: 47851},
									label: "containInternalFields",
									expr: &zeroOrOneExpr{
										pos: position{line: 1560, col: 42, offset: 47873},
										expr: &seqExpr{
											pos: position{line: 1560, col: 43, offset: 47874},
											exprs: []any{
												&choiceExpr{
													pos: position{line: 1560, col: 44, offset: 47875},
													alternatives: []any{
														&litMatcher{
															pos:        position{line: 1560, col: 44, offset: 47875},
															val:        "true",
															ignoreCase: false,
															want:       "\"true\"",
														},
														&litMatcher{
															pos:        position{line: 1560, col: 53, offset: 47884},
															val:        "false",
															ignoreCase: false,
															want:       "\"false\"",
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1560, col: 62, offset: 47893},
													val:        "()",
													ignoreCase: false,
													want:       "\"()\"",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1560, col: 69, offset: 47900},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1582, col: 3, offset: 48497},
						run: (*parser).callonTextExpr147,
						expr: &seqExpr{
							pos: position{line: 1582, col: 4, offset: 48498},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1582, col: 4, offset: 48498},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1582, col: 12, offset: 48506},
										val:        "mvfilter",
										ignoreCase: false,
										want:       "\"mvfilter\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1582, col: 24, offset: 48518},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1582, col: 32, offset: 48526},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 1582, col: 42, offset: 48536},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1582, col: 51, offset: 48545},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1595, col: 3, offset: 48880},
						run: (*parser).callonTextExpr155,
						expr: &seqExpr{
							pos: position{line: 1595, col: 4, offset: 48881},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1595, col: 4, offset: 48881},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1595, col: 12, offset: 48889},
										val:        "mvindex",
										ignoreCase: false,
										want:       "\"mvindex\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1595, col: 23, offset: 48900},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1595, col: 31, offset: 48908},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1595, col: 42, offset: 48919},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1595, col: 53, offset: 48930},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1595, col: 59, offset: 48936},
									label: "startIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 1595, col: 70, offset: 48947},
										name: "NumericExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1595, col: 82, offset: 48959},
									label: "endIndex",
									expr: &zeroOrOneExpr{
										pos: position{line: 1595, col: 91, offset: 48968},
										expr: &ruleRefExpr{
											pos:  position{line: 1595, col: 92, offset: 48969},
											name: "NumericParamExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1595, col: 111, offset: 48988},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1611, col: 3, offset: 49416},
						run: (*parser).callonTextExpr169,
						expr: &seqExpr{
							pos: position{line: 1611, col: 4, offset: 49417},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1611, col: 4, offset: 49417},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1611, col: 12, offset: 49425},
										val:        "mvmap",
										ignoreCase: false,
										want:       "\"mvmap\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1611, col: 21, offset: 49434},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1611, col: 29, offset: 49442},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1611, col: 40, offset: 49453},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1611, col: 51, offset: 49464},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1611, col: 57, offset: 49470},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1611, col: 62, offset: 49475},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1611, col: 72, offset: 49485},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1624, col: 3, offset: 49811},
						run: (*parser).callonTextExpr180,
						expr: &seqExpr{
							pos: position{line: 1624, col: 4, offset: 49812},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1624, col: 4, offset: 49812},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1624, col: 12, offset: 49820},
										val:        "mvrange",
										ignoreCase: false,
										want:       "\"mvrange\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1624, col: 23, offset: 49831},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1624, col: 31, offset: 49839},
									label: "startIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 1624, col: 42, offset: 49850},
										name: "NumericExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1624, col: 54, offset: 49862},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1624, col: 60, offset: 49868},
									label: "endIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 1624, col: 69, offset: 49877},
										name: "NumericExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1624, col: 81, offset: 49889},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1624, col: 87, offset: 49895},
									label: "stringExpr",
									expr: &zeroOrOneExpr{
										pos: position{line: 1624, col: 98, offset: 49906},
										expr: &ruleRefExpr{
											pos:  position{line: 1624, col: 99, offset: 49907},
											name: "StringExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1624, col: 112, offset: 49920},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1640, col: 3, offset: 50350},
						run: (*parser).callonTextExpr195,
						expr: &seqExpr{
							pos: position{line: 1640, col: 4, offset: 50351},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1640, col: 4, offset: 50351},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1640, col: 12, offset: 50359},
										val:        "mvzip",
										ignoreCase: false,
										want:       "\"mvzip\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1640, col: 21, offset: 50368},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1640, col: 29, offset: 50376},
									label: "mvLeft",
									expr: &ruleRefExpr{
										pos:  position{line: 1640, col: 36, offset: 50383},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1640, col: 47, offset: 50394},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1640, col: 53, offset: 50400},
									label: "mvRight",
									expr: &ruleRefExpr{
										pos:  position{line: 1640, col: 61, offset: 50408},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1640, col: 72, offset: 50419},
									label: "rest",
									expr: &zeroOrOneExpr{
										pos: position{line: 1640, col: 77, offset: 50424},
										expr: &seqExpr{
											pos: position{line: 1640, col: 78, offset: 50425},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1640, col: 78, offset: 50425},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1640, col: 84, offset: 50431},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1640, col: 97, offset: 50444},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1661, col: 3, offset: 50968},
						run: (*parser).callonTextExpr211,
						expr: &seqExpr{
							pos: position{line: 1661, col: 4, offset: 50969},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1661, col: 4, offset: 50969},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1661, col: 12, offset: 50977},
										val:        "mv_to_json_array",
										ignoreCase: false,
										want:       "\"mv_to_json_array\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1661, col: 32, offset: 50997},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1661, col: 40, offset: 51005},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1661, col: 51, offset: 51016},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1661, col: 62, offset: 51027},
									label: "rest",
									expr: &zeroOrOneExpr{
										pos: position{line: 1661, col: 67, offset: 51032},
										expr: &seqExpr{
											pos: position{line: 1661, col: 68, offset: 51033},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1661, col: 68, offset: 51033},
													name: "COMMA",
												},
												&choiceExpr{
													pos: position{line: 1661, col: 75, offset: 51040},
													alternatives: []any{
														&litMatcher{
															pos:        position{line: 1661, col: 75, offset: 51040},
															val:        "true",
															ignoreCase: false,
															want:       "\"true\"",
														},
														&litMatcher{
															pos:        position{line: 1661, col: 84, offset: 51049},
															val:        "false",
															ignoreCase: false,
															want:       "\"false\"",
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1661, col: 93, offset: 51058},
													val:        "()",
													ignoreCase: false,
													want:       "\"()\"",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1661, col: 100, offset: 51065},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1686, col: 3, offset: 51700},
						run: (*parser).callonTextExpr227,
						expr: &seqExpr{
							pos: position{line: 1686, col: 3, offset: 51700},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1686, col: 3, offset: 51700},
									val:        "cluster",
									ignoreCase: false,
									want:       "\"cluster\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1686, col: 13, offset: 51710},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1686, col: 21, offset: 51718},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1686, col: 27, offset: 51724},
										name: "EvalFieldToRead",
									},
								},
								&labeledExpr{
									pos:   position{line: 1686, col: 43, offset: 51740},
									label: "threshold",
									expr: &zeroOrOneExpr{
										pos: position{line: 1686, col: 53, offset: 51750},
										expr: &seqExpr{
											pos: position{line: 1686, col: 54, offset: 51751},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1686, col: 54, offset: 51751},
													name: "COMMA",
												},
												&litMatcher{
													pos:        position{line: 1686, col: 60, offset: 51757},
													val:        "threshold:",
													ignoreCase: false,
													want:       "\"threshold:\"",
												},
												&ruleRefExpr{
													pos:  position{line: 1686, col: 73, offset: 51770},
													name: "FloatAsString",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1686, col: 89, offset: 51786},
									label: "match",
									expr: &zeroOrOneExpr{
										pos: position{line: 1686, col: 95, offset: 51792},
										expr: &seqExpr{
											pos: position{line: 1686, col: 96, offset: 51793},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1686, col: 96, offset: 51793},
													name: "COMMA",
												},
												&litMatcher{
													pos:        position{line: 1686, col: 102, offset: 51799},
													val:        "match:",
													ignoreCase: false,
													want:       "\"match:\"",
												},
												&choiceExpr{
													pos: position{line: 1686, col: 112, offset: 51809},
													alternatives: []any{
														&litMatcher{
															pos:        position{line: 1686, col: 112, offset: 51809},
															val:        "termlist",
															ignoreCase: false,
															want:       "\"termlist\"",
														},
														&litMatcher{
															pos:        position{line: 1686, col: 125, offset: 51822},
															val:        "termset",
															ignoreCase: false,
															want:       "\"termset\"",
														},
														&litMatcher{
															pos:        position{line: 1686, col: 137, offset: 51834},
															val:        "ngramset",
															ignoreCase: false,
															want:       "\"ngramset\"",
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1686, col: 151, offset: 51848},
									label: "delims",
									expr: &zeroOrOneExpr{
										pos: position{line: 1686, col: 158, offset: 51855},
										expr: &seqExpr{
											pos: position{line: 1686, col: 159, offset: 51856},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1686, col: 159, offset: 51856},
													name: "COMMA",
												},
												&litMatcher{
													pos:        position{line: 1686, col: 165, offset: 51862},
													val:        "delims:",
													ignoreCase: false,
													want:       "\"delims:\"",
												},
												&ruleRefExpr{
													pos:  position{line: 1686, col: 175, offset: 51872},
													name: "QuotedString",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1686, col: 190, offset: 51887},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1726, col: 3, offset: 52882},
						run: (*parser).callonTextExpr255,
						expr: &seqExpr{
							pos: position{line: 1726, col: 3, offset: 52882},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1726, col: 3, offset: 52882},
									val:        "getfields",
									ignoreCase: false,
									want:       "\"getfields\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1726, col: 15, offset: 52894},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1726, col: 23, offset: 52902},
									label: "filter",
									expr: &zeroOrOneExpr{
										pos: position{line: 1726, col: 30, offset: 52909},
										expr: &ruleRefExpr{
											pos:  position{line: 1726, col: 31, offset: 52910},
											name: "StringExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1726, col: 44, offset: 52923},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1737, col: 3, offset: 53114},
						run: (*parser).callonTextExpr263,
						expr: &seqExpr{
							pos: position{line: 1737, col: 3, offset: 53114},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1737, col: 3, offset: 53114},
									val:        "typeof",
									ignoreCase: false,
									want:       "\"typeof\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1737, col: 12, offset: 53123},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1737, col: 20, offset: 53131},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1737, col: 30, offset: 53141},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1737, col: 40, offset: 53151},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1743, col: 3, offset: 53274},
						run: (*parser).callonTextExpr270,
						expr: &seqExpr{
							pos: position{line: 1743, col: 3, offset: 53274},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1743, col: 3, offset: 53274},
									val:        "replace",
									ignoreCase: false,
									want:       "\"replace\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1743, col: 13, offset: 53284},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1743, col: 21, offset: 53292},
									label: "val",
									expr: &ruleRefExpr{
										pos:  position{line: 1743, col: 25, offset: 53296},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1743, col: 35, offset: 53306},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1743, col: 41, offset: 53312},
									label: "regex",
									expr: &ruleRefExpr{
										pos:  position{line: 1743, col: 47, offset: 53318},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1743, col: 58, offset: 53329},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1743, col: 64, offset: 53335},
									label: "replacement",
									expr: &ruleRefExpr{
										pos:  position{line: 1743, col: 76, offset: 53347},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1743, col: 87, offset: 53358},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedPathString",
			pos:  position{line: 1751, col: 1, offset: 53581},
			expr: &actionExpr{
				pos: position{line: 1751, col: 21, offset: 53601},
				run: (*parser).callonQuotedPathString1,
				expr: &labeledExpr{
					pos:   position{line: 1751, col: 21, offset: 53601},
					label: "str",
					expr: &ruleRefExpr{
						pos:  position{line: 1751, col: 25, offset: 53605},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "UnquotedPathValue",
			pos:  position{line: 1758, col: 1, offset: 53732},
			expr: &actionExpr{
				pos: position{line: 1758, col: 22, offset: 53753},
				run: (*parser).callonUnquotedPathValue1,
				expr: &labeledExpr{
					pos:   position{line: 1758, col: 22, offset: 53753},
					label: "str",
					expr: &ruleRefExpr{
						pos:  position{line: 1758, col: 26, offset: 53757},
						name: "UnquotedString",
					},
				},
			},
		},
		{
			name: "StrToRemoveExpr",
			pos:  position{line: 1765, col: 1, offset: 53885},
			expr: &actionExpr{
				pos: position{line: 1765, col: 20, offset: 53904},
				run: (*parser).callonStrToRemoveExpr1,
				expr: &seqExpr{
					pos: position{line: 1765, col: 20, offset: 53904},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1765, col: 20, offset: 53904},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 1765, col: 26, offset: 53910},
							label: "strToRemove",
							expr: &ruleRefExpr{
								pos:  position{line: 1765, col: 38, offset: 53922},
								name: "String",
							},
						},
					},
				},
			},
		},
		{
			name: "EvalFieldToRead",
			pos:  position{line: 1771, col: 1, offset: 54107},
			expr: &choiceExpr{
				pos: position{line: 1771, col: 20, offset: 54126},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1771, col: 20, offset: 54126},
						run: (*parser).callonEvalFieldToRead2,
						expr: &seqExpr{
							pos: position{line: 1771, col: 20, offset: 54126},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 1771, col: 20, offset: 54126},
									expr: &charClassMatcher{
										pos:        position{line: 1771, col: 20, offset: 54126},
										val:        "[a-zA-Z_]",
										chars:      []rune{'_'},
										ranges:     []rune{'a', 'z', 'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&notExpr{
									pos: position{line: 1771, col: 31, offset: 54137},
									expr: &litMatcher{
										pos:        position{line: 1771, col: 33, offset: 54139},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1774, col: 3, offset: 54181},
						run: (*parser).callonEvalFieldToRead8,
						expr: &seqExpr{
							pos: position{line: 1774, col: 3, offset: 54181},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1774, col: 3, offset: 54181},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&labeledExpr{
									pos:   position{line: 1774, col: 7, offset: 54185},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1774, col: 13, offset: 54191},
										name: "FieldName",
									},
								},
								&litMatcher{
									pos:        position{line: 1774, col: 23, offset: 54201},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "WhereBlock",
			pos:  position{line: 1779, col: 1, offset: 54269},
			expr: &actionExpr{
				pos: position{line: 1779, col: 15, offset: 54283},
				run: (*parser).callonWhereBlock1,
				expr: &seqExpr{
					pos: position{line: 1779, col: 15, offset: 54283},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1779, col: 15, offset: 54283},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1779, col: 20, offset: 54288},
							name: "CMD_WHERE",
						},
						&labeledExpr{
							pos:   position{line: 1779, col: 30, offset: 54298},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 1779, col: 40, offset: 54308},
								name: "BoolExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExpr",
			pos:  position{line: 1791, col: 1, offset: 54601},
			expr: &actionExpr{
				pos: position{line: 1791, col: 13, offset: 54613},
				run: (*parser).callonBoolExpr1,
				expr: &labeledExpr{
					pos:   position{line: 1791, col: 13, offset: 54613},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 1791, col: 18, offset: 54618},
						name: "BoolExprLevel4",
					},
				},
			},
		},
		{
			name: "BoolExprLevel4",
			pos:  position{line: 1796, col: 1, offset: 54688},
			expr: &actionExpr{
				pos: position{line: 1796, col: 19, offset: 54706},
				run: (*parser).callonBoolExprLevel41,
				expr: &seqExpr{
					pos: position{line: 1796, col: 19, offset: 54706},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1796, col: 19, offset: 54706},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1796, col: 25, offset: 54712},
								name: "BoolExprLevel3",
							},
						},
						&labeledExpr{
							pos:   position{line: 1796, col: 40, offset: 54727},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1796, col: 45, offset: 54732},
								expr: &seqExpr{
									pos: position{line: 1796, col: 46, offset: 54733},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1796, col: 46, offset: 54733},
											name: "OR",
										},
										&ruleRefExpr{
											pos:  position{line: 1796, col: 49, offset: 54736},
											name: "BoolExprLevel3",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel3",
			pos:  position{line: 1816, col: 1, offset: 55174},
			expr: &actionExpr{
				pos: position{line: 1816, col: 19, offset: 55192},
				run: (*parser).callonBoolExprLevel31,
				expr: &seqExpr{
					pos: position{line: 1816, col: 19, offset: 55192},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1816, col: 19, offset: 55192},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1816, col: 25, offset: 55198},
								name: "BoolExprLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 1816, col: 40, offset: 55213},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1816, col: 45, offset: 55218},
								expr: &seqExpr{
									pos: position{line: 1816, col: 46, offset: 55219},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1816, col: 46, offset: 55219},
											name: "AND",
										},
										&ruleRefExpr{
											pos:  position{line: 1816, col: 50, offset: 55223},
											name: "BoolExprLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel2",
			pos:  position{line: 1836, col: 1, offset: 55662},
			expr: &choiceExpr{
				pos: position{line: 1836, col: 19, offset: 55680},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1836, col: 19, offset: 55680},
						run: (*parser).callonBoolExprLevel22,
						expr: &seqExpr{
							pos: position{line: 1836, col: 19, offset: 55680},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1836, col: 19, offset: 55680},
									name: "NOT",
								},
								&ruleRefExpr{
									pos:  position{line: 1836, col: 23, offset: 55684},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1836, col: 31, offset: 55692},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 1836, col: 37, offset: 55698},
										name: "BoolExprLevel1",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1836, col: 52, offset: 55713},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1846, col: 3, offset: 55916},
						run: (*parser).callonBoolExprLevel29,
						expr: &labeledExpr{
							pos:   position{line: 1846, col: 3, offset: 55916},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1846, col: 9, offset: 55922},
								name: "BoolExprLevel1",
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel1",
			pos:  position{line: 1851, col: 1, offset: 55993},
			expr: &choiceExpr{
				pos: position{line: 1851, col: 19, offset: 56011},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1851, col: 19, offset: 56011},
						run: (*parser).callonBoolExprLevel12,
						expr: &seqExpr{
							pos: position{line: 1851, col: 19, offset: 56011},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1851, col: 19, offset: 56011},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1851, col: 27, offset: 56019},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 1851, col: 33, offset: 56025},
										name: "BoolExprLevel4",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1851, col: 48, offset: 56040},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1854, col: 3, offset: 56076},
						run: (*parser).callonBoolExprLevel18,
						expr: &labeledExpr{
							pos:   position{line: 1854, col: 3, offset: 56076},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 1854, col: 10, offset: 56083},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1854, col: 10, offset: 56083},
										name: "EvalComparisonExpr",
									},
									&ruleRefExpr{
										pos:  position{line: 1854, col: 31, offset: 56104},
										name: "BoolComparisonExpr",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EvalComparisonExpr",
			pos:  position{line: 1859, col: 1, offset: 56224},
			expr: &choiceExpr{
				pos: position{line: 1859, col: 23, offset: 56246},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1859, col: 23, offset: 56246},
						run: (*parser).callonEvalComparisonExpr2,
						expr: &seqExpr{
							pos: position{line: 1859, col: 24, offset: 56247},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1859, col: 24, offset: 56247},
									label: "op",
									expr: &choiceExpr{
										pos: position{line: 1859, col: 28, offset: 56251},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1859, col: 28, offset: 56251},
												val:        "isbool",
												ignoreCase: false,
												want:       "\"isbool\"",
											},
											&litMatcher{
												pos:        position{line: 1859, col: 39, offset: 56262},
												val:        "isint",
												ignoreCase: false,
												want:       "\"isint\"",
											},
											&litMatcher{
												pos:        position{line: 1859, col: 49, offset: 56272},
												val:        "isstr",
												ignoreCase: false,
												want:       "\"isstr\"",
											},
											&litMatcher{
												pos:        position{line: 1859, col: 59, offset: 56282},
												val:        "isnull",
												ignoreCase: false,
												want:       "\"isnull\"",
											},
											&litMatcher{
												pos:        position{line: 1859, col: 70, offset: 56293},
												val:        "isnotnull",
												ignoreCase: false,
												want:       "\"isnotnull\"",
											},
											&litMatcher{
												pos:        position{line: 1859, col: 84, offset: 56307},
												val:        "isnum",
												ignoreCase: false,
												want:       "\"isnum\"",
											},
											&litMatcher{
												pos:        position{line: 1859, col: 94, offset: 56317},
												val:        "searchmatch",
												ignoreCase: false,
												want:       "\"searchmatch\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1859, col: 109, offset: 56332},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1859, col: 117, offset: 56340},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 1859, col: 123, offset: 56346},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1859, col: 133, offset: 56356},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1872, col: 3, offset: 56692},
						run: (*parser).callonEvalComparisonExpr17,
						expr: &seqExpr{
							pos: position{line: 1872, col: 3, offset: 56692},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1872, col: 3, offset: 56692},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1872, col: 11, offset: 56700},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1872, col: 11, offset: 56700},
												val:        "like",
												ignoreCase: false,
												want:       "\"like\"",
											},
											&litMatcher{
												pos:        position{line: 1872, col: 20, offset: 56709},
												val:        "Like",
												ignoreCase: false,
												want:       "\"Like\"",
											},
											&litMatcher{
												pos:        position{line: 1872, col: 29, offset: 56718},
												val:        "match",
												ignoreCase: false,
												want:       "\"match\"",
											},
											&litMatcher{
												pos:        position{line: 1872, col: 39, offset: 56728},
												val:        "cidrmatch",
												ignoreCase: false,
												want:       "\"cidrmatch\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1872, col: 52, offset: 56741},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1872, col: 60, offset: 56749},
									label: "leftValue",
									expr: &ruleRefExpr{
										pos:  position{line: 1872, col: 70, offset: 56759},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1872, col: 80, offset: 56769},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1872, col: 86, offset: 56775},
									label: "rightValue",
									expr: &ruleRefExpr{
										pos:  position{line: 1872, col: 97, offset: 56786},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1872, col: 107, offset: 56796},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1885, col: 3, offset: 57166},
						run: (*parser).callonEvalComparisonExpr32,
						expr: &seqExpr{
							pos: position{line: 1885, col: 3, offset: 57166},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1885, col: 3, offset: 57166},
									label: "left",
									expr: &ruleRefExpr{
										pos:  position{line: 1885, col: 8, offset: 57171},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1885, col: 18, offset: 57181},
									name: "SPACE",
								},
								&litMatcher{
									pos:        position{line: 1885, col: 24, offset: 57187},
									val:        "in",
									ignoreCase: false,
									want:       "\"in\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1885, col: 29, offset: 57192},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1885, col: 37, offset: 57200},
									label: "valueToJudge",
									expr: &ruleRefExpr{
										pos:  position{line: 1885, col: 50, offset: 57213},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1885, col: 60, offset: 57223},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1885, col: 65, offset: 57228},
										expr: &seqExpr{
											pos: position{line: 1885, col: 66, offset: 57229},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1885, col: 66, offset: 57229},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1885, col: 72, offset: 57235},
													name: "ValueExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1885, col: 84, offset: 57247},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1904, col: 3, offset: 57798},
						run: (*parser).callonEvalComparisonExpr47,
						expr: &seqExpr{
							pos: position{line: 1904, col: 3, offset: 57798},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1904, col: 3, offset: 57798},
									val:        "in",
									ignoreCase: false,
									want:       "\"in\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1904, col: 8, offset: 57803},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1904, col: 16, offset: 57811},
									label: "valueToJudge",
									expr: &ruleRefExpr{
										pos:  position{line: 1904, col: 29, offset: 57824},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1904, col: 39, offset: 57834},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1904, col: 44, offset: 57839},
										expr: &seqExpr{
											pos: position{line: 1904, col: 45, offset: 57840},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1904, col: 45, offset: 57840},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1904, col: 51, offset: 57846},
													name: "ValueExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1904, col: 63, offset: 57858},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoolComparisonExpr",
			pos:  position{line: 1922, col: 1, offset: 58279},
			expr: &actionExpr{
				pos: position{line: 1922, col: 23, offset: 58301},
				run: (*parser).callonBoolComparisonExpr1,
				expr: &seqExpr{
					pos: position{line: 1922, col: 23, offset: 58301},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1922, col: 23, offset: 58301},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 1922, col: 28, offset: 58306},
								name: "ValueExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 1922, col: 38, offset: 58316},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 1922, col: 41, offset: 58319},
								name: "EqualityOrInequality",
							},
						},
						&labeledExpr{
							pos:   position{line: 1922, col: 62, offset: 58340},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 1922, col: 68, offset: 58346},
								name: "ValueExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "ValueExpr",
			pos:  position{line: 1940, col: 1, offset: 58940},
			expr: &choiceExpr{
				pos: position{line: 1940, col: 14, offset: 58953},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1940, col: 14, offset: 58953},
						run: (*parser).callonValueExpr2,
						expr: &labeledExpr{
							pos:   position{line: 1940, col: 14, offset: 58953},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 1940, col: 24, offset: 58963},
								name: "ConditionExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1949, col: 3, offset: 59153},
						run: (*parser).callonValueExpr5,
						expr: &seqExpr{
							pos: position{line: 1949, col: 3, offset: 59153},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1949, col: 3, offset: 59153},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1949, col: 12, offset: 59162},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 1949, col: 22, offset: 59172},
										name: "ConditionExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1949, col: 37, offset: 59187},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1958, col: 3, offset: 59371},
						run: (*parser).callonValueExpr11,
						expr: &labeledExpr{
							pos:   position{line: 1958, col: 3, offset: 59371},
							label: "numeric",
							expr: &ruleRefExpr{
								pos:  position{line: 1958, col: 11, offset: 59379},
								name: "NumericExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1967, col: 3, offset: 59559},
						run: (*parser).callonValueExpr14,
						expr: &labeledExpr{
							pos:   position{line: 1967, col: 3, offset: 59559},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 1967, col: 7, offset: 59563},
								name: "StringExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1976, col: 3, offset: 59735},
						run: (*parser).callonValueExpr17,
						expr: &seqExpr{
							pos: position{line: 1976, col: 3, offset: 59735},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1976, col: 3, offset: 59735},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1976, col: 12, offset: 59744},
									label: "str",
									expr: &ruleRefExpr{
										pos:  position{line: 1976, col: 16, offset: 59748},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1976, col: 28, offset: 59760},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1985, col: 3, offset: 59929},
						run: (*parser).callonValueExpr23,
						expr: &seqExpr{
							pos: position{line: 1985, col: 3, offset: 59929},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1985, col: 3, offset: 59929},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1985, col: 11, offset: 59937},
									label: "boolean",
									expr: &ruleRefExpr{
										pos:  position{line: 1985, col: 19, offset: 59945},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1985, col: 28, offset: 59954},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StringExpr",
			pos:  position{line: 1995, col: 1, offset: 60125},
			expr: &choiceExpr{
				pos: position{line: 1995, col: 15, offset: 60139},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1995, col: 15, offset: 60139},
						run: (*parser).callonStringExpr2,
						expr: &seqExpr{
							pos: position{line: 1995, col: 15, offset: 60139},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1995, col: 15, offset: 60139},
									label: "text",
									expr: &ruleRefExpr{
										pos:  position{line: 1995, col: 20, offset: 60144},
										name: "TextExpr",
									},
								},
								&notExpr{
									pos: position{line: 1995, col: 29, offset: 60153},
									expr: &ruleRefExpr{
										pos:  position{line: 1995, col: 31, offset: 60155},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2003, col: 3, offset: 60325},
						run: (*parser).callonStringExpr8,
						expr: &seqExpr{
							pos: position{line: 2003, col: 3, offset: 60325},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2003, col: 3, offset: 60325},
									label: "str",
									expr: &ruleRefExpr{
										pos:  position{line: 2003, col: 7, offset: 60329},
										name: "QuotedString",
									},
								},
								&notExpr{
									pos: position{line: 2003, col: 20, offset: 60342},
									expr: &ruleRefExpr{
										pos:  position{line: 2003, col: 22, offset: 60344},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2011, col: 3, offset: 60509},
						run: (*parser).callonStringExpr14,
						expr: &seqExpr{
							pos: position{line: 2011, col: 3, offset: 60509},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2011, col: 3, offset: 60509},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2011, col: 9, offset: 60515},
										name: "EvalFieldToRead",
									},
								},
								&notExpr{
									pos: position{line: 2011, col: 25, offset: 60531},
									expr: &choiceExpr{
										pos: position{line: 2011, col: 27, offset: 60533},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2011, col: 27, offset: 60533},
												name: "OpPlus",
											},
											&ruleRefExpr{
												pos:  position{line: 2011, col: 36, offset: 60542},
												name: "OpMinus",
											},
											&ruleRefExpr{
												pos:  position{line: 2011, col: 46, offset: 60552},
												name: "OpMul",
											},
											&ruleRefExpr{
												pos:  position{line: 2011, col: 54, offset: 60560},
												name: "OpDiv",
											},
											&ruleRefExpr{
												pos:  position{line: 2011, col: 62, offset: 60568},
												name: "EVAL_CONCAT",
											},
											&litMatcher{
												pos:        position{line: 2011, col: 76, offset: 60582},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2019, col: 3, offset: 60732},
						run: (*parser).callonStringExpr26,
						expr: &labeledExpr{
							pos:   position{line: 2019, col: 3, offset: 60732},
							label: "concat",
							expr: &ruleRefExpr{
								pos:  position{line: 2019, col: 10, offset: 60739},
								name: "ConcatExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "ConcatExpr",
			pos:  position{line: 2029, col: 1, offset: 60945},
			expr: &actionExpr{
				pos: position{line: 2029, col: 15, offset: 60959},
				run: (*parser).callonConcatExpr1,
				expr: &seqExpr{
					pos: position{line: 2029, col: 15, offset: 60959},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2029, col: 15, offset: 60959},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2029, col: 21, offset: 60965},
								name: "ConcatAtom",
							},
						},
						&labeledExpr{
							pos:   position{line: 2029, col: 32, offset: 60976},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2029, col: 37, offset: 60981},
								expr: &seqExpr{
									pos: position{line: 2029, col: 38, offset: 60982},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 2029, col: 38, offset: 60982},
											name: "EVAL_CONCAT",
										},
										&ruleRefExpr{
											pos:  position{line: 2029, col: 50, offset: 60994},
											name: "ConcatAtom",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2029, col: 63, offset: 61007},
							expr: &choiceExpr{
								pos: position{line: 2029, col: 65, offset: 61009},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 2029, col: 65, offset: 61009},
										name: "OpPlus",
									},
									&ruleRefExpr{
										pos:  position{line: 2029, col: 74, offset: 61018},
										name: "OpMinus",
									},
									&ruleRefExpr{
										pos:  position{line: 2029, col: 84, offset: 61028},
										name: "OpMul",
									},
									&ruleRefExpr{
										pos:  position{line: 2029, col: 92, offset: 61036},
										name: "OpDiv",
									},
									&litMatcher{
										pos:        position{line: 2029, col: 100, offset: 61044},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcatAtom",
			pos:  position{line: 2047, col: 1, offset: 61450},
			expr: &choiceExpr{
				pos: position{line: 2047, col: 15, offset: 61464},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2047, col: 15, offset: 61464},
						run: (*parser).callonConcatAtom2,
						expr: &labeledExpr{
							pos:   position{line: 2047, col: 15, offset: 61464},
							label: "text",
							expr: &ruleRefExpr{
								pos:  position{line: 2047, col: 20, offset: 61469},
								name: "TextExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2056, col: 3, offset: 61633},
						run: (*parser).callonConcatAtom5,
						expr: &labeledExpr{
							pos:   position{line: 2056, col: 3, offset: 61633},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 2056, col: 7, offset: 61637},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2064, col: 3, offset: 61776},
						run: (*parser).callonConcatAtom8,
						expr: &labeledExpr{
							pos:   position{line: 2064, col: 3, offset: 61776},
							label: "number",
							expr: &ruleRefExpr{
								pos:  position{line: 2064, col: 10, offset: 61783},
								name: "NumberAsString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2072, col: 3, offset: 61922},
						run: (*parser).callonConcatAtom11,
						expr: &labeledExpr{
							pos:   position{line: 2072, col: 3, offset: 61922},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 2072, col: 9, offset: 61928},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExpr",
			pos:  position{line: 2082, col: 1, offset: 62097},
			expr: &actionExpr{
				pos: position{line: 2082, col: 16, offset: 62112},
				run: (*parser).callonNumericExpr1,
				expr: &seqExpr{
					pos: position{line: 2082, col: 16, offset: 62112},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2082, col: 16, offset: 62112},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 2082, col: 21, offset: 62117},
								name: "NumericExprLevel3",
							},
						},
						&notExpr{
							pos: position{line: 2082, col: 39, offset: 62135},
							expr: &choiceExpr{
								pos: position{line: 2082, col: 41, offset: 62137},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 2082, col: 41, offset: 62137},
										name: "EVAL_CONCAT",
									},
									&litMatcher{
										pos:        position{line: 2082, col: 55, offset: 62151},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel3",
			pos:  position{line: 2087, col: 1, offset: 62216},
			expr: &actionExpr{
				pos: position{line: 2087, col: 22, offset: 62237},
				run: (*parser).callonNumericExprLevel31,
				expr: &seqExpr{
					pos: position{line: 2087, col: 22, offset: 62237},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2087, col: 22, offset: 62237},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2087, col: 28, offset: 62243},
								name: "NumericExprLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 2087, col: 46, offset: 62261},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2087, col: 51, offset: 62266},
								expr: &seqExpr{
									pos: position{line: 2087, col: 52, offset: 62267},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 2087, col: 53, offset: 62268},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 2087, col: 53, offset: 62268},
													name: "OpPlus",
												},
												&ruleRefExpr{
													pos:  position{line: 2087, col: 62, offset: 62277},
													name: "OpMinus",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2087, col: 71, offset: 62286},
											name: "NumericExprLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel2",
			pos:  position{line: 2108, col: 1, offset: 62787},
			expr: &actionExpr{
				pos: position{line: 2108, col: 22, offset: 62808},
				run: (*parser).callonNumericExprLevel21,
				expr: &seqExpr{
					pos: position{line: 2108, col: 22, offset: 62808},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2108, col: 22, offset: 62808},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2108, col: 28, offset: 62814},
								name: "NumericExprLevel1",
							},
						},
						&labeledExpr{
							pos:   position{line: 2108, col: 46, offset: 62832},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2108, col: 51, offset: 62837},
								expr: &seqExpr{
									pos: position{line: 2108, col: 52, offset: 62838},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 2108, col: 53, offset: 62839},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 2108, col: 53, offset: 62839},
													name: "OpMul",
												},
												&ruleRefExpr{
													pos:  position{line: 2108, col: 61, offset: 62847},
													name: "OpDiv",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2108, col: 68, offset: 62854},
											name: "NumericExprLevel1",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NumericParamExpr",
			pos:  position{line: 2128, col: 1, offset: 63323},
			expr: &actionExpr{
				pos: position{line: 2128, col: 21, offset: 63343},
				run: (*parser).callonNumericParamExpr1,
				expr: &seqExpr{
					pos: position{line: 2128, col: 21, offset: 63343},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2128, col: 21, offset: 63343},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 2128, col: 27, offset: 63349},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 2128, col: 32, offset: 63354},
								name: "NumericExprLevel3",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel1",
			pos:  position{line: 2138, col: 1, offset: 63598},
			expr: &choiceExpr{
				pos: position{line: 2138, col: 22, offset: 63619},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2138, col: 22, offset: 63619},
						run: (*parser).callonNumericExprLevel12,
						expr: &seqExpr{
							pos: position{line: 2138, col: 22, offset: 63619},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2138, col: 22, offset: 63619},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2138, col: 30, offset: 63627},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2138, col: 35, offset: 63632},
										name: "NumericExprLevel3",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2138, col: 53, offset: 63650},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2141, col: 3, offset: 63685},
						run: (*parser).callonNumericExprLevel18,
						expr: &labeledExpr{
							pos:   position{line: 2141, col: 3, offset: 63685},
							label: "numericEvalExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 2141, col: 20, offset: 63702},
								name: "NumericEvalExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2144, col: 3, offset: 63756},
						run: (*parser).callonNumericExprLevel111,
						expr: &labeledExpr{
							pos:   position{line: 2144, col: 3, offset: 63756},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 2144, col: 9, offset: 63762},
								name: "EvalFieldToRead",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2154, col: 3, offset: 63981},
						run: (*parser).callonNumericExprLevel114,
						expr: &labeledExpr{
							pos:   position{line: 2154, col: 3, offset: 63981},
							label: "number",
							expr: &ruleRefExpr{
								pos:  position{line: 2154, col: 10, offset: 63988},
								name: "NumberAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericEvalExpr",
			pos:  position{line: 2167, col: 1, offset: 64335},
			expr: &choiceExpr{
				pos: position{line: 2167, col: 20, offset: 64354},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2167, col: 20, offset: 64354},
						run: (*parser).callonNumericEvalExpr2,
						expr: &seqExpr{
							pos: position{line: 2167, col: 21, offset: 64355},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2167, col: 21, offset: 64355},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2167, col: 29, offset: 64363},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2167, col: 29, offset: 64363},
												val:        "abs",
												ignoreCase: false,
												want:       "\"abs\"",
											},
											&litMatcher{
												pos:        position{line: 2167, col: 37, offset: 64371},
												val:        "ceil",
												ignoreCase: false,
												want:       "\"ceil\"",
											},
											&litMatcher{
												pos:        position{line: 2167, col: 46, offset: 64380},
												val:        "ceiling",
												ignoreCase: false,
												want:       "\"ceiling\"",
											},
											&litMatcher{
												pos:        position{line: 2167, col: 58, offset: 64392},
												val:        "sqrt",
												ignoreCase: false,
												want:       "\"sqrt\"",
											},
											&litMatcher{
												pos:        position{line: 2167, col: 66, offset: 64400},
												val:        "exact",
												ignoreCase: false,
												want:       "\"exact\"",
											},
											&litMatcher{
												pos:        position{line: 2167, col: 75, offset: 64409},
												val:        "exp",
												ignoreCase: false,
												want:       "\"exp\"",
											},
											&litMatcher{
												pos:        position{line: 2167, col: 83, offset: 64417},
												val:        "floor",
												ignoreCase: false,
												want:       "\"floor\"",
											},
											&litMatcher{
												pos:        position{line: 2167, col: 93, offset: 64427},
												val:        "ln",
												ignoreCase: false,
												want:       "\"ln\"",
											},
											&litMatcher{
												pos:        position{line: 2167, col: 100, offset: 64434},
												val:        "sigfig",
												ignoreCase: false,
												want:       "\"sigfig\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2167, col: 110, offset: 64444},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2167, col: 118, offset: 64452},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2167, col: 124, offset: 64458},
										name: "NumericExprLevel3",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2167, col: 143, offset: 64477},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2187, col: 3, offset: 64989},
						run: (*parser).callonNumericEvalExpr19,
						expr: &seqExpr{
							pos: position{line: 2187, col: 3, offset: 64989},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2187, col: 3, offset: 64989},
									label: "roundExpr",
									expr: &litMatcher{
										pos:        position{line: 2187, col: 13, offset: 64999},
										val:        "round",
										ignoreCase: false,
										want:       "\"round\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2187, col: 21, offset: 65007},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2187, col: 29, offset: 65015},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2187, col: 35, offset: 65021},
										name: "NumericExprLevel3",
									},
								},
								&labeledExpr{
									pos:   position{line: 2187, col: 54, offset: 65040},
									label: "roundPrecision",
									expr: &zeroOrOneExpr{
										pos: position{line: 2187, col: 69, offset: 65055},
										expr: &ruleRefExpr{
											pos:  position{line: 2187, col: 70, offset: 65056},
											name: "NumericParamExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2187, col: 89, offset: 65075},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2208, col: 3, offset: 65693},
						run: (*parser).callonNumericEvalExpr30,
						expr: &seqExpr{
							pos: position{line: 2208, col: 4, offset: 65694},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2208, col: 4, offset: 65694},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2208, col: 12, offset: 65702},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2208, col: 12, offset: 65702},
												val:        "now",
												ignoreCase: false,
												want:       "\"now\"",
											},
											&litMatcher{
												pos:        position{line: 2208, col: 20, offset: 65710},
												val:        "pi",
												ignoreCase: false,
												want:       "\"pi\"",
											},
											&litMatcher{
												pos:        position{line: 2208, col: 27, offset: 65717},
												val:        "random",
												ignoreCase: false,
												want:       "\"random\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2208, col: 37, offset: 65727},
									name: "L_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2208, col: 45, offset: 65735},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2221, col: 3, offset: 66021},
						run: (*parser).callonNumericEvalExpr39,
						expr: &seqExpr{
							pos: position{line: 2221, col: 3, offset: 66021},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2221, col: 3, offset: 66021},
									val:        "tonumber",
									ignoreCase: false,
									want:       "\"tonumber\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2221, col: 14, offset: 66032},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2221, col: 22, offset: 66040},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2221, col: 33, offset: 66051},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2221, col: 44, offset: 66062},
									label: "baseExpr",
									expr: &zeroOrOneExpr{
										pos: position{line: 2221, col: 53, offset: 66071},
										expr: &seqExpr{
											pos: position{line: 2221, col: 54, offset: 66072},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2221, col: 54, offset: 66072},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2221, col: 60, offset: 66078},
													name: "NumericExprLevel3",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2221, col: 80, offset: 66098},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2249, col: 3, offset: 66940},
						run: (*parser).callonNumericEvalExpr51,
						expr: &seqExpr{
							pos: position{line: 2249, col: 3, offset: 66940},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2249, col: 3, offset: 66940},
									label: "lenExpr",
									expr: &litMatcher{
										pos:        position{line: 2249, col: 12, offset: 66949},
										val:        "len",
										ignoreCase: false,
										want:       "\"len\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2249, col: 18, offset: 66955},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2249, col: 26, offset: 66963},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2249, col: 31, offset: 66968},
										name: "LenExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2249, col: 39, offset: 66976},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2252, col: 3, offset: 67011},
						run: (*parser).callonNumericEvalExpr59,
						expr: &seqExpr{
							pos: position{line: 2252, col: 4, offset: 67012},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2252, col: 4, offset: 67012},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2252, col: 12, offset: 67020},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2252, col: 12, offset: 67020},
												val:        "pow",
												ignoreCase: false,
												want:       "\"pow\"",
											},
											&litMatcher{
												pos:        position{line: 2252, col: 20, offset: 67028},
												val:        "atan2",
												ignoreCase: false,
												want:       "\"atan2\"",
											},
											&litMatcher{
												pos:        position{line: 2252, col: 30, offset: 67038},
												val:        "hypot",
												ignoreCase: false,
												want:       "\"hypot\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2252, col: 39, offset: 67047},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2252, col: 47, offset: 67055},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2252, col: 53, offset: 67061},
										name: "NumericExprLevel3",
									},
								},
								&labeledExpr{
									pos:   position{line: 2252, col: 72, offset: 67080},
									label: "param",
									expr: &ruleRefExpr{
										pos:  position{line: 2252, col: 79, offset: 67087},
										name: "NumericParamExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2252, col: 97, offset: 67105},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2283, col: 3, offset: 67945},
						run: (*parser).callonNumericEvalExpr72,
						expr: &seqExpr{
							pos: position{line: 2283, col: 4, offset: 67946},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2283, col: 4, offset: 67946},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2283, col: 11, offset: 67953},
										val:        "log",
										ignoreCase: false,
										want:       "\"log\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2283, col: 17, offset: 67959},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2283, col: 25, offset: 67967},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2283, col: 31, offset: 67973},
										name: "NumericExprLevel3",
									},
								},
								&labeledExpr{
									pos:   position{line: 2283, col: 50, offset: 67992},
									label: "param",
									expr: &zeroOrOneExpr{
										pos: position{line: 2283, col: 56, offset: 67998},
										expr: &ruleRefExpr{
											pos:  position{line: 2283, col: 57, offset: 67999},
											name: "NumericParamExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2283, col: 76, offset: 68018},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2313, col: 3, offset: 68792},
						run: (*parser).callonNumericEvalExpr83,
						expr: &seqExpr{
							pos: position{line: 2313, col: 4, offset: 68793},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2313, col: 4, offset: 68793},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2313, col: 11, offset: 68800},
										val:        "log",
										ignoreCase: false,
										want:       "\"log\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2313, col: 17, offset: 68806},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2313, col: 25, offset: 68814},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2313, col: 31, offset: 68820},
										name: "NumericExprLevel3",
									},
								},
								&labeledExpr{
									pos:   position{line: 2313, col: 50, offset: 68839},
									label: "param",
									expr: &zeroOrOneExpr{
										pos: position{line: 2313, col: 56, offset: 68845},
										expr: &ruleRefExpr{
											pos:  position{line: 2313, col: 57, offset: 68846},
											name: "NumericParamExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2313, col: 76, offset: 68865},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LenExpr",
			pos:  position{line: 2343, col: 1, offset: 69637},
			expr: &choiceExpr{
				pos: position{line: 2343, col: 12, offset: 69648},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2343, col: 12, offset: 69648},
						run: (*parser).callonLenExpr2,
						expr: &seqExpr{
							pos: position{line: 2343, col: 12, offset: 69648},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2343, col: 12, offset: 69648},
									label: "str",
									expr: &ruleRefExpr{
										pos:  position{line: 2343, col: 16, offset: 69652},
										name: "QuotedString",
									},
								},
								&notExpr{
									pos: position{line: 2343, col: 29, offset: 69665},
									expr: &ruleRefExpr{
										pos:  position{line: 2343, col: 31, offset: 69667},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2359, col: 3, offset: 70028},
						run: (*parser).callonLenExpr8,
						expr: &seqExpr{
							pos: position{line: 2359, col: 3, offset: 70028},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2359, col: 3, offset: 70028},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2359, col: 9, offset: 70034},
										name: "EvalFieldToRead",
									},
								},
								&notExpr{
									pos: position{line: 2359, col: 25, offset: 70050},
									expr: &choiceExpr{
										pos: position{line: 2359, col: 27, offset: 70052},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2359, col: 27, offset: 70052},
												name: "OpPlus",
											},
											&ruleRefExpr{
												pos:  position{line: 2359, col: 36, offset: 70061},
												name: "OpMinus",
											},
											&ruleRefExpr{
												pos:  position{line: 2359, col: 46, offset: 70071},
												name: "OpMul",
											},
											&ruleRefExpr{
												pos:  position{line: 2359, col: 54, offset: 70079},
												name: "OpDiv",
											},
											&ruleRefExpr{
												pos:  position{line: 2359, col: 62, offset: 70087},
												name: "EVAL_CONCAT",
											},
											&litMatcher{
												pos:        position{line: 2359, col: 76, offset: 70101},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HeadBlock",
			pos:  position{line: 2377, col: 1, offset: 70489},
			expr: &choiceExpr{
				pos: position{line: 2377, col: 14, offset: 70502},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2377, col: 14, offset: 70502},
						run: (*parser).callonHeadBlock2,
						expr: &seqExpr{
							pos: position{line: 2377, col: 14, offset: 70502},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2377, col: 14, offset: 70502},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 2377, col: 19, offset: 70507},
									name: "CMD_HEAD",
								},
								&zeroOrOneExpr{
									pos: position{line: 2377, col: 28, offset: 70516},
									expr: &seqExpr{
										pos: position{line: 2377, col: 29, offset: 70517},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 2377, col: 29, offset: 70517},
												val:        "limit",
												ignoreCase: false,
												want:       "\"limit\"",
											},
											&ruleRefExpr{
												pos:  position{line: 2377, col: 37, offset: 70525},
												name: "EQUAL",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2377, col: 45, offset: 70533},
									label: "intAsStr",
									expr: &ruleRefExpr{
										pos:  position{line: 2377, col: 54, offset: 70542},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2392, col: 3, offset: 70958},
						run: (*parser).callonHeadBlock12,
						expr: &seqExpr{
							pos: position{line: 2392, col: 3, offset: 70958},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2392, col: 3, offset: 70958},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 2392, col: 8, offset: 70963},
									name: "CMD_HEAD_NO_SPACE",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggregationList",
			pos:  position{line: 2405, col: 1, offset: 71413},
			expr: &actionExpr{
				pos: position{line: 2405, col: 20, offset: 71432},
				run: (*parser).callonAggregationList1,
				expr: &seqExpr{
					pos: position{line: 2405, col: 20, offset: 71432},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2405, col: 20, offset: 71432},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2405, col: 26, offset: 71438},
								name: "Aggregator",
							},
						},
						&labeledExpr{
							pos:   position{line: 2405, col: 37, offset: 71449},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2405, col: 42, offset: 71454},
								expr: &seqExpr{
									pos: position{line: 2405, col: 43, offset: 71455},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 2405, col: 44, offset: 71456},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 2405, col: 44, offset: 71456},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2405, col: 52, offset: 71464},
													name: "SPACE",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2405, col: 59, offset: 71471},
											name: "Aggregator",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Aggregator",
			pos:  position{line: 2422, col: 1, offset: 71974},
			expr: &actionExpr{
				pos: position{line: 2422, col: 15, offset: 71988},
				run: (*parser).callonAggregator1,
				expr: &seqExpr{
					pos: position{line: 2422, col: 15, offset: 71988},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2422, col: 15, offset: 71988},
							label: "aggFunc",
							expr: &ruleRefExpr{
								pos:  position{line: 2422, col: 23, offset: 71996},
								name: "AggFunction",
							},
						},
						&labeledExpr{
							pos:   position{line: 2422, col: 35, offset: 72008},
							label: "asField",
							expr: &zeroOrOneExpr{
								pos: position{line: 2422, col: 43, offset: 72016},
								expr: &ruleRefExpr{
									pos:  position{line: 2422, col: 43, offset: 72016},
									name: "AsField",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggFunction",
			pos:  position{line: 2438, col: 1, offset: 72857},
			expr: &actionExpr{
				pos: position{line: 2438, col: 16, offset: 72872},
				run: (*parser).callonAggFunction1,
				expr: &labeledExpr{
					pos:   position{line: 2438, col: 16, offset: 72872},
					label: "agg",
					expr: &choiceExpr{
						pos: position{line: 2438, col: 21, offset: 72877},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 2438, col: 21, offset: 72877},
								name: "AggCount",
							},
							&ruleRefExpr{
								pos:  position{line: 2438, col: 32, offset: 72888},
								name: "AggDistinctCount",
							},
							&ruleRefExpr{
								pos:  position{line: 2438, col: 51, offset: 72907},
								name: "AggAvg",
							},
							&ruleRefExpr{
								pos:  position{line: 2438, col: 60, offset: 72916},
								name: "AggMin",
							},
							&ruleRefExpr{
								pos:  position{line: 2438, col: 69, offset: 72925},
								name: "AggMax",
							},
							&ruleRefExpr{
								pos:  position{line: 2438, col: 78, offset: 72934},
								name: "AggRange",
							},
							&ruleRefExpr{
								pos:  position{line: 2438, col: 89, offset: 72945},
								name: "AggSum",
							},
							&ruleRefExpr{
								pos:  position{line: 2438, col: 98, offset: 72954},
								name: "AggValues",
							},
							&ruleRefExpr{
								pos:  position{line: 2438, col: 110, offset: 72966},
								name: "AggEstdc",
							},
							&ruleRefExpr{
								pos:  position{line: 2438, col: 121, offset: 72977},
								name: "AggEstdcError",
							},
							&ruleRefExpr{
								pos:  position{line: 2438, col: 137, offset: 72993},
								name: "AggExactPerc",
							},
							&ruleRefExpr{
								pos:  position{line: 2438, col: 152, offset: 73008},
								name: "AggMedian",
							},
							&ruleRefExpr{
								pos:  position{line: 2438, col: 164, offset: 73020},
								name: "AggMode",
							},
							&ruleRefExpr{
								pos:  position{line: 2438, col: 174, offset: 73030},
								name: "AggPerc",
							},
							&ruleRefExpr{
								pos:  position{line: 2439, col: 1, offset: 73040},
								name: "AggStdev",
							},
							&ruleRefExpr{
								pos:  position{line: 2439, col: 12, offset: 73051},
								name: "AggStdevp",
							},
							&ruleRefExpr{
								pos:  position{line: 2439, col: 24, offset: 73063},
								name: "AggSumsq",
							},
							&ruleRefExpr{
								pos:  position{line: 2439, col: 35, offset: 73074},
								name: "AggUpperPerc",
							},
							&ruleRefExpr{
								pos:  position{line: 2439, col: 50, offset: 73089},
								name: "AggVar",
							},
							&ruleRefExpr{
								pos:  position{line: 2439, col: 59, offset: 73098},
								name: "AggVarp",
							},
							&ruleRefExpr{
								pos:  position{line: 2439, col: 69, offset: 73108},
								name: "AggFirst",
							},
							&ruleRefExpr{
								pos:  position{line: 2439, col: 80, offset: 73119},
								name: "AggLast",
							},
							&ruleRefExpr{
								pos:  position{line: 2439, col: 90, offset: 73129},
								name: "AggList",
							},
							&ruleRefExpr{
								pos:  position{line: 2439, col: 100, offset: 73139},
								name: "AggEarliest",
							},
							&ruleRefExpr{
								pos:  position{line: 2439, col: 114, offset: 73153},
								name: "AggEarliestTime",
							},
							&ruleRefExpr{
								pos:  position{line: 2439, col: 132, offset: 73171},
								name: "AggLatest",
							},
							&ruleRefExpr{
								pos:  position{line: 2439, col: 144, offset: 73183},
								name: "AggLatestTime",
							},
							&ruleRefExpr{
								pos:  position{line: 2439, col: 160, offset: 73199},
								name: "AggRate",
							},
						},
					},
				},
			},
		},
		{
			name: "AsField",
			pos:  position{line: 2443, col: 1, offset: 73233},
			expr: &actionExpr{
				pos: position{line: 2443, col: 12, offset: 73244},
				run: (*parser).callonAsField1,
				expr: &seqExpr{
					pos: position{line: 2443, col: 12, offset: 73244},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2443, col: 12, offset: 73244},
							name: "AS",
						},
						&labeledExpr{
							pos:   position{line: 2443, col: 15, offset: 73247},
							label: "field",
							expr: &choiceExpr{
								pos: position{line: 2443, col: 23, offset: 73255},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 2443, col: 23, offset: 73255},
										name: "FieldName",
									},
									&ruleRefExpr{
										pos:  position{line: 2443, col: 35, offset: 73267},
										name: "String",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggCount",
			pos:  position{line: 2457, col: 1, offset: 73596},
			expr: &choiceExpr{
				pos: position{line: 2457, col: 13, offset: 73608},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2457, col: 13, offset: 73608},
						run: (*parser).callonAggCount2,
						expr: &seqExpr{
							pos: position{line: 2457, col: 13, offset: 73608},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 2457, col: 14, offset: 73609},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 2457, col: 14, offset: 73609},
											val:        "count",
											ignoreCase: false,
											want:       "\"count\"",
										},
										&litMatcher{
											pos:        position{line: 2457, col: 24, offset: 73619},
											val:        "c",
											ignoreCase: false,
											want:       "\"c\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2457, col: 29, offset: 73624},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2457, col: 37, offset: 73632},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 2457, col: 44, offset: 73639},
									label: "boolExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2457, col: 53, offset: 73648},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2457, col: 62, offset: 73657},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2472, col: 3, offset: 74007},
						run: (*parser).callonAggCount12,
						expr: &seqExpr{
							pos: position{line: 2472, col: 3, offset: 74007},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 2472, col: 4, offset: 74008},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 2472, col: 4, offset: 74008},
											val:        "count",
											ignoreCase: false,
											want:       "\"count\"",
										},
										&litMatcher{
											pos:        position{line: 2472, col: 14, offset: 74018},
											val:        "c",
											ignoreCase: false,
											want:       "\"c\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2472, col: 19, offset: 74023},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2472, col: 27, offset: 74031},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2472, col: 33, offset: 74037},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2472, col: 43, offset: 74047},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2479, col: 5, offset: 74198},
						run: (*parser).callonAggCount21,
						expr: &choiceExpr{
							pos: position{line: 2479, col: 6, offset: 74199},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 2479, col: 6, offset: 74199},
									val:        "count",
									ignoreCase: false,
									want:       "\"count\"",
								},
								&litMatcher{
									pos:        position{line: 2479, col: 16, offset: 74209},
									val:        "c",
									ignoreCase: false,
									want:       "\"c\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggDistinctCount",
			pos:  position{line: 2488, col: 1, offset: 74345},
			expr: &choiceExpr{
				pos: position{line: 2488, col: 21, offset: 74365},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2488, col: 21, offset: 74365},
						run: (*parser).callonAggDistinctCount2,
						expr: &seqExpr{
							pos: position{line: 2488, col: 21, offset: 74365},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 2488, col: 22, offset: 74366},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 2488, col: 22, offset: 74366},
											val:        "distinct_count",
											ignoreCase: false,
											want:       "\"distinct_count\"",
										},
										&litMatcher{
											pos:        position{line: 2488, col: 41, offset: 74385},
											val:        "dc",
											ignoreCase: false,
											want:       "\"dc\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2488, col: 47, offset: 74391},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2488, col: 55, offset: 74399},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 2488, col: 62, offset: 74406},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2488, col: 72, offset: 74416},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2488, col: 82, offset: 74426},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2498, col: 3, offset: 74660},
						run: (*parser).callonAggDistinctCount12,
						expr: &seqExpr{
							pos: position{line: 2498, col: 3, offset: 74660},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 2498, col: 4, offset: 74661},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 2498, col: 4, offset: 74661},
											val:        "distinct_count",
											ignoreCase: false,
											want:       "\"distinct_count\"",
										},
										&litMatcher{
											pos:        position{line: 2498, col: 23, offset: 74680},
											val:        "dc",
											ignoreCase: false,
											want:       "\"dc\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2498, col: 29, offset: 74686},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2498, col: 37, offset: 74694},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2498, col: 43, offset: 74700},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2498, col: 53, offset: 74710},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAvg",
			pos:  position{line: 2507, col: 1, offset: 74866},
			expr: &choiceExpr{
				pos: position{line: 2507, col: 11, offset: 74876},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2507, col: 11, offset: 74876},
						run: (*parser).callonAggAvg2,
						expr: &seqExpr{
							pos: position{line: 2507, col: 11, offset: 74876},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2507, col: 11, offset: 74876},
									val:        "avg",
									ignoreCase: false,
									want:       "\"avg\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2507, col: 17, offset: 74882},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2507, col: 25, offset: 74890},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2507, col: 32, offset: 74897},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2507, col: 40, offset: 74905},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2507, col: 59, offset: 74924},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2507, col: 78, offset: 74943},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2507, col: 86, offset: 74951},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2522, col: 3, offset: 75309},
						run: (*parser).callonAggAvg12,
						expr: &seqExpr{
							pos: position{line: 2522, col: 3, offset: 75309},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2522, col: 3, offset: 75309},
									val:        "avg",
									ignoreCase: false,
									want:       "\"avg\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2522, col: 9, offset: 75315},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2522, col: 17, offset: 75323},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2522, col: 23, offset: 75329},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2522, col: 33, offset: 75339},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMin",
			pos:  position{line: 2531, col: 1, offset: 75487},
			expr: &choiceExpr{
				pos: position{line: 2531, col: 11, offset: 75497},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2531, col: 11, offset: 75497},
						run: (*parser).callonAggMin2,
						expr: &seqExpr{
							pos: position{line: 2531, col: 11, offset: 75497},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2531, col: 11, offset: 75497},
									val:        "min",
									ignoreCase: false,
									want:       "\"min\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2531, col: 17, offset: 75503},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2531, col: 25, offset: 75511},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2531, col: 32, offset: 75518},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2531, col: 40, offset: 75526},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2531, col: 59, offset: 75545},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2531, col: 78, offset: 75564},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2531, col: 86, offset: 75572},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2546, col: 3, offset: 75930},
						run: (*parser).callonAggMin12,
						expr: &seqExpr{
							pos: position{line: 2546, col: 3, offset: 75930},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2546, col: 3, offset: 75930},
									val:        "min",
									ignoreCase: false,
									want:       "\"min\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2546, col: 9, offset: 75936},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2546, col: 17, offset: 75944},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2546, col: 23, offset: 75950},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2546, col: 33, offset: 75960},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMax",
			pos:  position{line: 2555, col: 1, offset: 76108},
			expr: &choiceExpr{
				pos: position{line: 2555, col: 11, offset: 76118},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2555, col: 11, offset: 76118},
						run: (*parser).callonAggMax2,
						expr: &seqExpr{
							pos: position{line: 2555, col: 11, offset: 76118},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2555, col: 11, offset: 76118},
									val:        "max",
									ignoreCase: false,
									want:       "\"max\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2555, col: 17, offset: 76124},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2555, col: 25, offset: 76132},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2555, col: 32, offset: 76139},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2555, col: 41, offset: 76148},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2555, col: 60, offset: 76167},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2555, col: 79, offset: 76186},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2555, col: 87, offset: 76194},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2570, col: 3, offset: 76552},
						run: (*parser).callonAggMax12,
						expr: &seqExpr{
							pos: position{line: 2570, col: 3, offset: 76552},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2570, col: 3, offset: 76552},
									val:        "max",
									ignoreCase: false,
									want:       "\"max\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2570, col: 9, offset: 76558},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2570, col: 17, offset: 76566},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2570, col: 23, offset: 76572},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2570, col: 33, offset: 76582},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggRange",
			pos:  position{line: 2579, col: 1, offset: 76730},
			expr: &choiceExpr{
				pos: position{line: 2579, col: 13, offset: 76742},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2579, col: 13, offset: 76742},
						run: (*parser).callonAggRange2,
						expr: &seqExpr{
							pos: position{line: 2579, col: 13, offset: 76742},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2579, col: 13, offset: 76742},
									val:        "range",
									ignoreCase: false,
									want:       "\"range\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2579, col: 21, offset: 76750},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2579, col: 29, offset: 76758},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2579, col: 36, offset: 76765},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2579, col: 44, offset: 76773},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2579, col: 63, offset: 76792},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2579, col: 82, offset: 76811},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2579, col: 90, offset: 76819},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2594, col: 3, offset: 77179},
						run: (*parser).callonAggRange12,
						expr: &seqExpr{
							pos: position{line: 2594, col: 3, offset: 77179},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2594, col: 3, offset: 77179},
									val:        "range",
									ignoreCase: false,
									want:       "\"range\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2594, col: 11, offset: 77187},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2594, col: 19, offset: 77195},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2594, col: 25, offset: 77201},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2594, col: 35, offset: 77211},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggSum",
			pos:  position{line: 2603, col: 1, offset: 77361},
			expr: &choiceExpr{
				pos: position{line: 2603, col: 11, offset: 77371},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2603, col: 11, offset: 77371},
						run: (*parser).callonAggSum2,
						expr: &seqExpr{
							pos: position{line: 2603, col: 11, offset: 77371},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2603, col: 11, offset: 77371},
									val:        "sum",
									ignoreCase: false,
									want:       "\"sum\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2603, col: 17, offset: 77377},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2603, col: 25, offset: 77385},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2603, col: 32, offset: 77392},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2603, col: 40, offset: 77400},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2603, col: 59, offset: 77419},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2603, col: 78, offset: 77438},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2603, col: 86, offset: 77446},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2618, col: 3, offset: 77804},
						run: (*parser).callonAggSum12,
						expr: &seqExpr{
							pos: position{line: 2618, col: 3, offset: 77804},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2618, col: 3, offset: 77804},
									val:        "sum",
									ignoreCase: false,
									want:       "\"sum\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2618, col: 9, offset: 77810},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2618, col: 17, offset: 77818},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2618, col: 23, offset: 77824},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2618, col: 33, offset: 77834},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggEstdc",
			pos:  position{line: 2628, col: 1, offset: 78022},
			expr: &choiceExpr{
				pos: position{line: 2628, col: 13, offset: 78034},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2628, col: 13, offset: 78034},
						run: (*parser).callonAggEstdc2,
						expr: &seqExpr{
							pos: position{line: 2628, col: 13, offset: 78034},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2628, col: 13, offset: 78034},
									val:        "estdc",
									ignoreCase: false,
									want:       "\"estdc\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2628, col: 21, offset: 78042},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2628, col: 29, offset: 78050},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2628, col: 36, offset: 78057},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2628, col: 44, offset: 78065},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2628, col: 63, offset: 78084},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2628, col: 82, offset: 78103},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2628, col: 90, offset: 78111},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2643, col: 3, offset: 78471},
						run: (*parser).callonAggEstdc12,
						expr: &seqExpr{
							pos: position{line: 2643, col: 3, offset: 78471},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2643, col: 3, offset: 78471},
									val:        "estdc",
									ignoreCase: false,
									want:       "\"estdc\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2643, col: 11, offset: 78479},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2643, col: 19, offset: 78487},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2643, col: 25, offset: 78493},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2643, col: 35, offset: 78503},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggEstdcError",
			pos:  position{line: 2653, col: 1, offset: 78693},
			expr: &choiceExpr{
				pos: position{line: 2653, col: 18, offset: 78710},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2653, col: 18, offset: 78710},
						run: (*parser).callonAggEstdcError2,
						expr: &seqExpr{
							pos: position{line: 2653, col: 18, offset: 78710},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2653, col: 18, offset: 78710},
									val:        "estdc_error",
									ignoreCase: false,
									want:       "\"estdc_error\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2653, col: 32, offset: 78724},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2653, col: 40, offset: 78732},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2653, col: 47, offset: 78739},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2653, col: 55, offset: 78747},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2653, col: 74, offset: 78766},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2653, col: 93, offset: 78785},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2653, col: 101, offset: 78793},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2668, col: 3, offset: 79158},
						run: (*parser).callonAggEstdcError12,
						expr: &seqExpr{
							pos: position{line: 2668, col: 3, offset: 79158},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2668, col: 3, offset: 79158},
									val:        "estdc_error",
									ignoreCase: false,
									want:       "\"estdc_error\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2668, col: 17, offset: 79172},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2668, col: 25, offset: 79180},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2668, col: 31, offset: 79186},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2668, col: 41, offset: 79196},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggExactPerc",
			pos:  position{line: 2678, col: 1, offset: 79391},
			expr: &choiceExpr{
				pos: position{line: 2678, col: 17, offset: 79407},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2678, col: 17, offset: 79407},
						run: (*parser).callonAggExactPerc2,
						expr: &seqExpr{
							pos: position{line: 2678, col: 17, offset: 79407},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2678, col: 17, offset: 79407},
									val:        "exactperc",
									ignoreCase: false,
									want:       "\"exactperc\"",
								},
								&labeledExpr{
									pos:   position{line: 2678, col: 29, offset: 79419},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 2678, col: 37, offset: 79427},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2678, col: 37, offset: 79427},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 2678, col: 53, offset: 79443},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2678, col: 70, offset: 79460},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2678, col: 78, offset: 79468},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2678, col: 85, offset: 79475},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2678, col: 93, offset: 79483},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2678, col: 112, offset: 79502},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2678, col: 131, offset: 79521},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2678, col: 139, offset: 79529},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2694, col: 3, offset: 79925},
						run: (*parser).callonAggExactPerc16,
						expr: &seqExpr{
							pos: position{line: 2694, col: 3, offset: 79925},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2694, col: 3, offset: 79925},
									val:        "exactperc",
									ignoreCase: false,
									want:       "\"exactperc\"",
								},
								&labeledExpr{
									pos:   position{line: 2694, col: 15, offset: 79937},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 2694, col: 23, offset: 79945},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2694, col: 23, offset: 79945},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 2694, col: 39, offset: 79961},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2694, col: 56, offset: 79978},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2694, col: 64, offset: 79986},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2694, col: 70, offset: 79992},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2694, col: 80, offset: 80002},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggPerc",
			pos:  position{line: 2705, col: 1, offset: 80228},
			expr: &choiceExpr{
				pos: position{line: 2705, col: 12, offset: 80239},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2705, col: 12, offset: 80239},
						run: (*parser).callonAggPerc2,
						expr: &seqExpr{
							pos: position{line: 2705, col: 12, offset: 80239},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2705, col: 12, offset: 80239},
									val:        "perc",
									ignoreCase: false,
									want:       "\"perc\"",
								},
								&labeledExpr{
									pos:   position{line: 2705, col: 19, offset: 80246},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 2705, col: 27, offset: 80254},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2705, col: 27, offset: 80254},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 2705, col: 43, offset: 80270},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2705, col: 60, offset: 80287},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2705, col: 68, offset: 80295},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2705, col: 75, offset: 80302},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2705, col: 83, offset: 80310},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2705, col: 102, offset: 80329},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2705, col: 121, offset: 80348},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2705, col: 129, offset: 80356},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2721, col: 3, offset: 80747},
						run: (*parser).callonAggPerc16,
						expr: &seqExpr{
							pos: position{line: 2721, col: 3, offset: 80747},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2721, col: 3, offset: 80747},
									val:        "perc",
									ignoreCase: false,
									want:       "\"perc\"",
								},
								&labeledExpr{
									pos:   position{line: 2721, col: 10, offset: 80754},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 2721, col: 18, offset: 80762},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2721, col: 18, offset: 80762},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 2721, col: 34, offset: 80778},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2721, col: 51, offset: 80795},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2721, col: 59, offset: 80803},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2721, col: 65, offset: 80809},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2721, col: 75, offset: 80819},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggUpperPerc",
			pos:  position{line: 2732, col: 1, offset: 81040},
			expr: &choiceExpr{
				pos: position{line: 2732, col: 17, offset: 81056},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2732, col: 17, offset: 81056},
						run: (*parser).callonAggUpperPerc2,
						expr: &seqExpr{
							pos: position{line: 2732, col: 17, offset: 81056},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2732, col: 17, offset: 81056},
									val:        "upperperc",
									ignoreCase: false,
									want:       "\"upperperc\"",
								},
								&labeledExpr{
									pos:   position{line: 2732, col: 29, offset: 81068},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 2732, col: 37, offset: 81076},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2732, col: 37, offset: 81076},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 2732, col: 53, offset: 81092},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2732, col: 70, offset: 81109},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2732, col: 78, offset: 81117},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2732, col: 85, offset: 81124},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2732, col: 93, offset: 81132},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2732, col: 112, offset: 81151},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2732, col: 131, offset: 81170},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2732, col: 139, offset: 81178},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2748, col: 3, offset: 81574},
						run: (*parser).callonAggUpperPerc16,
						expr: &seqExpr{
							pos: position{line: 2748, col: 3, offset: 81574},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2748, col: 3, offset: 81574},
									val:        "upperperc",
									ignoreCase: false,
									want:       "\"upperperc\"",
								},
								&labeledExpr{
									pos:   position{line: 2748, col: 15, offset: 81586},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 2748, col: 23, offset: 81594},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2748, col: 23, offset: 81594},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 2748, col: 39, offset: 81610},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2748, col: 56, offset: 81627},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2748, col: 64, offset: 81635},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2748, col: 70, offset: 81641},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2748, col: 80, offset: 81651},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMedian",
			pos:  position{line: 2759, col: 1, offset: 81877},
			expr: &choiceExpr{
				pos: position{line: 2759, col: 14, offset: 81890},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2759, col: 14, offset: 81890},
						run: (*parser).callonAggMedian2,
						expr: &seqExpr{
							pos: position{line: 2759, col: 14, offset: 81890},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2759, col: 14, offset: 81890},
									val:        "median",
									ignoreCase: false,
									want:       "\"median\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2759, col: 23, offset: 81899},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2759, col: 31, offset: 81907},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2759, col: 38, offset: 81914},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2759, col: 46, offset: 81922},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2759, col: 65, offset: 81941},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2759, col: 84, offset: 81960},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2759, col: 92, offset: 81968},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2774, col: 3, offset: 82329},
						run: (*parser).callonAggMedian12,
						expr: &seqExpr{
							pos: position{line: 2774, col: 3, offset: 82329},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2774, col: 3, offset: 82329},
									val:        "median",
									ignoreCase: false,
									want:       "\"median\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2774, col: 12, offset: 82338},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2774, col: 20, offset: 82346},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2774, col: 26, offset: 82352},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2774, col: 36, offset: 82362},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMode",
			pos:  position{line: 2784, col: 1, offset: 82553},
			expr: &choiceExpr{
				pos: position{line: 2784, col: 12, offset: 82564},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2784, col: 12, offset: 82564},
						run: (*parser).callonAggMode2,
						expr: &seqExpr{
							pos: position{line: 2784, col: 12, offset: 82564},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2784, col: 12, offset: 82564},
									val:        "mode",
									ignoreCase: false,
									want:       "\"mode\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2784, col: 19, offset: 82571},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2784, col: 27, offset: 82579},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2784, col: 34, offset: 82586},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2784, col: 42, offset: 82594},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2784, col: 61, offset: 82613},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2784, col: 80, offset: 82632},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2784, col: 88, offset: 82640},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2799, col: 3, offset: 82999},
						run: (*parser).callonAggMode12,
						expr: &seqExpr{
							pos: position{line: 2799, col: 3, offset: 82999},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2799, col: 3, offset: 82999},
									val:        "mode",
									ignoreCase: false,
									want:       "\"mode\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2799, col: 10, offset: 83006},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2799, col: 18, offset: 83014},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2799, col: 24, offset: 83020},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2799, col: 34, offset: 83030},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggStdev",
			pos:  position{line: 2809, col: 1, offset: 83219},
			expr: &choiceExpr{
				pos: position{line: 2809, col: 13, offset: 83231},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2809, col: 13, offset: 83231},
						run: (*parser).callonAggStdev2,
						expr: &seqExpr{
							pos: position{line: 2809, col: 13, offset: 83231},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2809, col: 13, offset: 83231},
									val:        "stdev",
									ignoreCase: false,
									want:       "\"stdev\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2809, col: 21, offset: 83239},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2809, col: 29, offset: 83247},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2809, col: 36, offset: 83254},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2809, col: 44, offset: 83262},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2809, col: 63, offset: 83281},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2809, col: 82, offset: 83300},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2809, col: 90, offset: 83308},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2824, col: 3, offset: 83668},
						run: (*parser).callonAggStdev12,
						expr: &seqExpr{
							pos: position{line: 2824, col: 3, offset: 83668},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2824, col: 3, offset: 83668},
									val:        "stdev",
									ignoreCase: false,
									want:       "\"stdev\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2824, col: 11, offset: 83676},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2824, col: 19, offset: 83684},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2824, col: 25, offset: 83690},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2824, col: 35, offset: 83700},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggStdevp",
			pos:  position{line: 2834, col: 1, offset: 83890},
			expr: &choiceExpr{
				pos: position{line: 2834, col: 14, offset: 83903},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2834, col: 14, offset: 83903},
						run: (*parser).callonAggStdevp2,
						expr: &seqExpr{
							pos: position{line: 2834, col: 14, offset: 83903},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2834, col: 14, offset: 83903},
									val:        "stdevp",
									ignoreCase: false,
									want:       "\"stdevp\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2834, col: 23, offset: 83912},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2834, col: 31, offset: 83920},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2834, col: 38, offset: 83927},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2834, col: 46, offset: 83935},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2834, col: 65, offset: 83954},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2834, col: 84, offset: 83973},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2834, col: 92, offset: 83981},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2849, col: 3, offset: 84342},
						run: (*parser).callonAggStdevp12,
						expr: &seqExpr{
							pos: position{line: 2849, col: 3, offset: 84342},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2849, col: 3, offset: 84342},
									val:        "stdevp",
									ignoreCase: false,
									want:       "\"stdevp\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2849, col: 12, offset: 84351},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2849, col: 20, offset: 84359},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2849, col: 26, offset: 84365},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2849, col: 36, offset: 84375},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggSumsq",
			pos:  position{line: 2859, col: 1, offset: 84566},
			expr: &choiceExpr{
				pos: position{line: 2859, col: 13, offset: 84578},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2859, col: 13, offset: 84578},
						run: (*parser).callonAggSumsq2,
						expr: &seqExpr{
							pos: position{line: 2859, col: 13, offset: 84578},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2859, col: 13, offset: 84578},
									val:        "sumsq",
									ignoreCase: false,
									want:       "\"sumsq\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2859, col: 21, offset: 84586},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2859, col: 29, offset: 84594},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2859, col: 36, offset: 84601},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2859, col: 44, offset: 84609},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2859, col: 63, offset: 84628},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2859, col: 82, offset: 84647},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2859, col: 90, offset: 84655},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2874, col: 3, offset: 85015},
						run: (*parser).callonAggSumsq12,
						expr: &seqExpr{
							pos: position{line: 2874, col: 3, offset: 85015},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2874, col: 3, offset: 85015},
									val:        "sumsq",
									ignoreCase: false,
									want:       "\"sumsq\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2874, col: 11, offset: 85023},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2874, col: 19, offset: 85031},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2874, col: 25, offset: 85037},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2874, col: 35, offset: 85047},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggVar",
			pos:  position{line: 2884, col: 1, offset: 85237},
			expr: &choiceExpr{
				pos: position{line: 2884, col: 11, offset: 85247},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2884, col: 11, offset: 85247},
						run: (*parser).callonAggVar2,
						expr: &seqExpr{
							pos: position{line: 2884, col: 11, offset: 85247},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2884, col: 11, offset: 85247},
									val:        "var",
									ignoreCase: false,
									want:       "\"var\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2884, col: 17, offset: 85253},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2884, col: 25, offset: 85261},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2884, col: 32, offset: 85268},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2884, col: 40, offset: 85276},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2884, col: 59, offset: 85295},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2884, col: 78, offset: 85314},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2884, col: 86, offset: 85322},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2899, col: 3, offset: 85680},
						run: (*parser).callonAggVar12,
						expr: &seqExpr{
							pos: position{line: 2899, col: 3, offset: 85680},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2899, col: 3, offset: 85680},
									val:        "var",
									ignoreCase: false,
									want:       "\"var\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2899, col: 9, offset: 85686},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2899, col: 17, offset: 85694},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2899, col: 23, offset: 85700},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2899, col: 33, offset: 85710},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggVarp",
			pos:  position{line: 2909, col: 1, offset: 85898},
			expr: &choiceExpr{
				pos: position{line: 2909, col: 12, offset: 85909},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2909, col: 12, offset: 85909},
						run: (*parser).callonAggVarp2,
						expr: &seqExpr{
							pos: position{line: 2909, col: 12, offset: 85909},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2909, col: 12, offset: 85909},
									val:        "varp",
									ignoreCase: false,
									want:       "\"varp\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2909, col: 19, offset: 85916},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2909, col: 27, offset: 85924},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2909, col: 34, offset: 85931},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2909, col: 42, offset: 85939},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2909, col: 61, offset: 85958},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2909, col: 80, offset: 85977},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2909, col: 88, offset: 85985},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2924, col: 3, offset: 86344},
						run: (*parser).callonAggVarp12,
						expr: &seqExpr{
							pos: position{line: 2924, col: 3, offset: 86344},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2924, col: 3, offset: 86344},
									val:        "varp",
									ignoreCase: false,
									want:       "\"varp\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2924, col: 10, offset: 86351},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2924, col: 18, offset: 86359},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2924, col: 24, offset: 86365},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2924, col: 34, offset: 86375},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggFirst",
			pos:  position{line: 2934, col: 1, offset: 86564},
			expr: &choiceExpr{
				pos: position{line: 2934, col: 13, offset: 86576},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2934, col: 13, offset: 86576},
						run: (*parser).callonAggFirst2,
						expr: &seqExpr{
							pos: position{line: 2934, col: 13, offset: 86576},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2934, col: 13, offset: 86576},
									val:        "first",
									ignoreCase: false,
									want:       "\"first\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2934, col: 21, offset: 86584},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2934, col: 29, offset: 86592},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2934, col: 36, offset: 86599},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2934, col: 44, offset: 86607},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2934, col: 63, offset: 86626},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2934, col: 82, offset: 86645},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2934, col: 90, offset: 86653},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2949, col: 3, offset: 87013},
						run: (*parser).callonAggFirst12,
						expr: &seqExpr{
							pos: position{line: 2949, col: 3, offset: 87013},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2949, col: 3, offset: 87013},
									val:        "first",
									ignoreCase: false,
									want:       "\"first\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2949, col: 11, offset: 87021},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2949, col: 19, offset: 87029},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2949, col: 25, offset: 87035},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2949, col: 35, offset: 87045},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggLast",
			pos:  position{line: 2959, col: 1, offset: 87235},
			expr: &choiceExpr{
				pos: position{line: 2959, col: 12, offset: 87246},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2959, col: 12, offset: 87246},
						run: (*parser).callonAggLast2,
						expr: &seqExpr{
							pos: position{line: 2959, col: 12, offset: 87246},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2959, col: 12, offset: 87246},
									val:        "last",
									ignoreCase: false,
									want:       "\"last\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2959, col: 19, offset: 87253},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2959, col: 27, offset: 87261},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2959, col: 34, offset: 87268},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2959, col: 42, offset: 87276},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2959, col: 61, offset: 87295},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2959, col: 80, offset: 87314},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2959, col: 88, offset: 87322},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2974, col: 3, offset: 87681},
						run: (*parser).callonAggLast12,
						expr: &seqExpr{
							pos: position{line: 2974, col: 3, offset: 87681},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2974, col: 3, offset: 87681},
									val:        "last",
									ignoreCase: false,
									want:       "\"last\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2974, col: 10, offset: 87688},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2974, col: 18, offset: 87696},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2974, col: 24, offset: 87702},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2974, col: 34, offset: 87712},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggList",
			pos:  position{line: 2984, col: 1, offset: 87901},
			expr: &choiceExpr{
				pos: position{line: 2984, col: 12, offset: 87912},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2984, col: 12, offset: 87912},
						run: (*parser).callonAggList2,
						expr: &seqExpr{
							pos: position{line: 2984, col: 12, offset: 87912},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2984, col: 12, offset: 87912},
									val:        "list",
									ignoreCase: false,
									want:       "\"list\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2984, col: 19, offset: 87919},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2984, col: 27, offset: 87927},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 2984, col: 34, offset: 87934},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2984, col: 44, offset: 87944},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2984, col: 54, offset: 87954},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2994, col: 3, offset: 88181},
						run: (*parser).callonAggList10,
						expr: &seqExpr{
							pos: position{line: 2994, col: 3, offset: 88181},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2994, col: 3, offset: 88181},
									val:        "list",
									ignoreCase: false,
									want:       "\"list\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2994, col: 10, offset: 88188},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2994, col: 18, offset: 88196},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2994, col: 24, offset: 88202},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2994, col: 34, offset: 88212},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggEarliest",
			pos:  position{line: 3004, col: 1, offset: 88401},
			expr: &choiceExpr{
				pos: position{line: 3004, col: 16, offset: 88416},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3004, col: 16, offset: 88416},
						run: (*parser).callonAggEarliest2,
						expr: &seqExpr{
							pos: position{line: 3004, col: 16, offset: 88416},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3004, col: 16, offset: 88416},
									val:        "earliest",
									ignoreCase: false,
									want:       "\"earliest\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3004, col: 27, offset: 88427},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3004, col: 35, offset: 88435},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3004, col: 42, offset: 88442},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3004, col: 50, offset: 88450},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3004, col: 69, offset: 88469},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3004, col: 88, offset: 88488},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3004, col: 96, offset: 88496},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3019, col: 3, offset: 88859},
						run: (*parser).callonAggEarliest12,
						expr: &seqExpr{
							pos: position{line: 3019, col: 3, offset: 88859},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3019, col: 3, offset: 88859},
									val:        "earliest",
									ignoreCase: false,
									want:       "\"earliest\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3019, col: 14, offset: 88870},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3019, col: 22, offset: 88878},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3019, col: 28, offset: 88884},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3019, col: 38, offset: 88894},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggEarliestTime",
			pos:  position{line: 3029, col: 1, offset: 89087},
			expr: &choiceExpr{
				pos: position{line: 3029, col: 20, offset: 89106},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3029, col: 20, offset: 89106},
						run: (*parser).callonAggEarliestTime2,
						expr: &seqExpr{
							pos: position{line: 3029, col: 20, offset: 89106},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3029, col: 20, offset: 89106},
									val:        "earliest_time",
									ignoreCase: false,
									want:       "\"earliest_time\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3029, col: 36, offset: 89122},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3029, col: 44, offset: 89130},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3029, col: 51, offset: 89137},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3029, col: 59, offset: 89145},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3029, col: 78, offset: 89164},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3029, col: 97, offset: 89183},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3029, col: 105, offset: 89191},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3044, col: 3, offset: 89558},
						run: (*parser).callonAggEarliestTime12,
						expr: &seqExpr{
							pos: position{line: 3044, col: 3, offset: 89558},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3044, col: 3, offset: 89558},
									val:        "earliest_time",
									ignoreCase: false,
									want:       "\"earliest_time\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3044, col: 19, offset: 89574},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3044, col: 27, offset: 89582},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3044, col: 33, offset: 89588},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3044, col: 43, offset: 89598},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggLatest",
			pos:  position{line: 3054, col: 1, offset: 89795},
			expr: &choiceExpr{
				pos: position{line: 3054, col: 14, offset: 89808},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3054, col: 14, offset: 89808},
						run: (*parser).callonAggLatest2,
						expr: &seqExpr{
							pos: position{line: 3054, col: 14, offset: 89808},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3054, col: 14, offset: 89808},
									val:        "latest",
									ignoreCase: false,
									want:       "\"latest\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3054, col: 23, offset: 89817},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3054, col: 31, offset: 89825},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3054, col: 38, offset: 89832},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3054, col: 46, offset: 89840},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3054, col: 65, offset: 89859},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3054, col: 84, offset: 89878},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3054, col: 92, offset: 89886},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3069, col: 3, offset: 90247},
						run: (*parser).callonAggLatest12,
						expr: &seqExpr{
							pos: position{line: 3069, col: 3, offset: 90247},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3069, col: 3, offset: 90247},
									val:        "latest",
									ignoreCase: false,
									want:       "\"latest\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3069, col: 12, offset: 90256},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3069, col: 20, offset: 90264},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3069, col: 26, offset: 90270},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3069, col: 36, offset: 90280},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggLatestTime",
			pos:  position{line: 3079, col: 1, offset: 90471},
			expr: &choiceExpr{
				pos: position{line: 3079, col: 18, offset: 90488},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3079, col: 18, offset: 90488},
						run: (*parser).callonAggLatestTime2,
						expr: &seqExpr{
							pos: position{line: 3079, col: 18, offset: 90488},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3079, col: 18, offset: 90488},
									val:        "latest_time",
									ignoreCase: false,
									want:       "\"latest_time\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3079, col: 32, offset: 90502},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3079, col: 40, offset: 90510},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3079, col: 47, offset: 90517},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3079, col: 55, offset: 90525},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3079, col: 74, offset: 90544},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3079, col: 93, offset: 90563},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3079, col: 101, offset: 90571},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3094, col: 3, offset: 90936},
						run: (*parser).callonAggLatestTime12,
						expr: &seqExpr{
							pos: position{line: 3094, col: 3, offset: 90936},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3094, col: 3, offset: 90936},
									val:        "latest_time",
									ignoreCase: false,
									want:       "\"latest_time\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3094, col: 17, offset: 90950},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3094, col: 25, offset: 90958},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3094, col: 31, offset: 90964},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3094, col: 41, offset: 90974},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggRate",
			pos:  position{line: 3104, col: 1, offset: 91169},
			expr: &choiceExpr{
				pos: position{line: 3104, col: 12, offset: 91180},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3104, col: 12, offset: 91180},
						run: (*parser).callonAggRate2,
						expr: &seqExpr{
							pos: position{line: 3104, col: 12, offset: 91180},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3104, col: 12, offset: 91180},
									val:        "rate",
									ignoreCase: false,
									want:       "\"rate\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3104, col: 19, offset: 91187},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3104, col: 27, offset: 91195},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3104, col: 34, offset: 91202},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3104, col: 42, offset: 91210},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3104, col: 61, offset: 91229},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3104, col: 80, offset: 91248},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3104, col: 88, offset: 91256},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3119, col: 3, offset: 91620},
						run: (*parser).callonAggRate12,
						expr: &seqExpr{
							pos: position{line: 3119, col: 3, offset: 91620},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3119, col: 3, offset: 91620},
									val:        "rate",
									ignoreCase: false,
									want:       "\"rate\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3119, col: 10, offset: 91627},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3119, col: 18, offset: 91635},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3119, col: 24, offset: 91641},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3119, col: 34, offset: 91651},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggValues",
			pos:  position{line: 3128, col: 1, offset: 91805},
			expr: &choiceExpr{
				pos: position{line: 3128, col: 14, offset: 91818},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3128, col: 14, offset: 91818},
						run: (*parser).callonAggValues2,
						expr: &seqExpr{
							pos: position{line: 3128, col: 14, offset: 91818},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3128, col: 14, offset: 91818},
									val:        "values",
									ignoreCase: false,
									want:       "\"values\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3128, col: 23, offset: 91827},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3128, col: 31, offset: 91835},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 3128, col: 38, offset: 91842},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3128, col: 48, offset: 91852},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3128, col: 58, offset: 91862},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3138, col: 3, offset: 92091},
						run: (*parser).callonAggValues10,
						expr: &seqExpr{
							pos: position{line: 3138, col: 3, offset: 92091},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3138, col: 3, offset: 92091},
									val:        "values",
									ignoreCase: false,
									want:       "\"values\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3138, col: 12, offset: 92100},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3138, col: 20, offset: 92108},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3138, col: 26, offset: 92114},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3138, col: 36, offset: 92124},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldWithNumberValue",
			pos:  position{line: 3147, col: 1, offset: 92275},
			expr: &actionExpr{
				pos: position{line: 3147, col: 25, offset: 92299},
				run: (*parser).callonFieldWithNumberValue1,
				expr: &labeledExpr{
					pos:   position{line: 3147, col: 25, offset: 92299},
					label: "keyValuePair",
					expr: &choiceExpr{
						pos: position{line: 3147, col: 39, offset: 92313},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3147, col: 39, offset: 92313},
								name: "NamedFieldWithNumberValue",
							},
							&ruleRefExpr{
								pos:  position{line: 3147, col: 67, offset: 92341},
								name: "UnnamedFieldWithNumberValue",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedFieldWithNumberValue",
			pos:  position{line: 3151, col: 1, offset: 92404},
			expr: &actionExpr{
				pos: position{line: 3151, col: 30, offset: 92433},
				run: (*parser).callonNamedFieldWithNumberValue1,
				expr: &seqExpr{
					pos: position{line: 3151, col: 30, offset: 92433},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3151, col: 30, offset: 92433},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 3151, col: 34, offset: 92437},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 3151, col: 44, offset: 92447},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 3151, col: 48, offset: 92451},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 3151, col: 48, offset: 92451},
										name: "EqualityOperator",
									},
									&ruleRefExpr{
										pos:  position{line: 3151, col: 67, offset: 92470},
										name: "InequalityOperator",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3151, col: 87, offset: 92490},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 3151, col: 93, offset: 92496},
								name: "Number",
							},
						},
					},
				},
			},
		},
		{
			name: "UnnamedFieldWithNumberValue",
			pos:  position{line: 3164, col: 1, offset: 92730},
			expr: &actionExpr{
				pos: position{line: 3164, col: 32, offset: 92761},
				run: (*parser).callonUnnamedFieldWithNumberValue1,
				expr: &labeledExpr{
					pos:   position{line: 3164, col: 32, offset: 92761},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 3164, col: 38, offset: 92767},
						name: "Number",
					},
				},
			},
		},
		{
			name: "FieldWithBooleanValue",
			pos:  position{line: 3177, col: 1, offset: 92984},
			expr: &actionExpr{
				pos: position{line: 3177, col: 26, offset: 93009},
				run: (*parser).callonFieldWithBooleanValue1,
				expr: &seqExpr{
					pos: position{line: 3177, col: 26, offset: 93009},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3177, col: 26, offset: 93009},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 3177, col: 30, offset: 93013},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 3177, col: 40, offset: 93023},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 3177, col: 43, offset: 93026},
								name: "EqualityOperator",
							},
						},
						&labeledExpr{
							pos:   position{line: 3177, col: 60, offset: 93043},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 3177, col: 66, offset: 93049},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldWithStringValue",
			pos:  position{line: 3190, col: 1, offset: 93284},
			expr: &actionExpr{
				pos: position{line: 3190, col: 25, offset: 93308},
				run: (*parser).callonFieldWithStringValue1,
				expr: &labeledExpr{
					pos:   position{line: 3190, col: 25, offset: 93308},
					label: "keyValuePair",
					expr: &choiceExpr{
						pos: position{line: 3190, col: 39, offset: 93322},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3190, col: 39, offset: 93322},
								name: "NamedFieldWithStringValue",
							},
							&ruleRefExpr{
								pos:  position{line: 3190, col: 67, offset: 93350},
								name: "UnnamedFieldWithStringValue",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedFieldWithStringValue",
			pos:  position{line: 3194, col: 1, offset: 93413},
			expr: &actionExpr{
				pos: position{line: 3194, col: 30, offset: 93442},
				run: (*parser).callonNamedFieldWithStringValue1,
				expr: &seqExpr{
					pos: position{line: 3194, col: 30, offset: 93442},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3194, col: 30, offset: 93442},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 3194, col: 34, offset: 93446},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 3194, col: 44, offset: 93456},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 3194, col: 47, offset: 93459},
								name: "EqualityOperator",
							},
						},
						&labeledExpr{
							pos:   position{line: 3194, col: 64, offset: 93476},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 3194, col: 70, offset: 93482},
								name: "String",
							},
						},
					},
				},
			},
		},
		{
			name: "UnnamedFieldWithStringValue",
			pos:  position{line: 3206, col: 1, offset: 93715},
			expr: &actionExpr{
				pos: position{line: 3206, col: 32, offset: 93746},
				run: (*parser).callonUnnamedFieldWithStringValue1,
				expr: &labeledExpr{
					pos:   position{line: 3206, col: 32, offset: 93746},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 3206, col: 38, offset: 93752},
						name: "String",
					},
				},
			},
		},
		{
			name: "FieldNameList",
			pos:  position{line: 3220, col: 1, offset: 94083},
			expr: &actionExpr{
				pos: position{line: 3220, col: 18, offset: 94100},
				run: (*parser).callonFieldNameList1,
				expr: &seqExpr{
					pos: position{line: 3220, col: 18, offset: 94100},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3220, col: 18, offset: 94100},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 3220, col: 24, offset: 94106},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 3220, col: 34, offset: 94116},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3220, col: 39, offset: 94121},
								expr: &seqExpr{
									pos: position{line: 3220, col: 40, offset: 94122},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 3220, col: 40, offset: 94122},
											name: "COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 3220, col: 46, offset: 94128},
											name: "FieldName",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 3240, col: 1, offset: 94891},
			expr: &actionExpr{
				pos: position{line: 3240, col: 14, offset: 94904},
				run: (*parser).callonFieldName1,
				expr: &seqExpr{
					pos: position{line: 3240, col: 14, offset: 94904},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 3240, col: 14, offset: 94904},
							val:        "[a-zA-Z0-9:*]",
							chars:      []rune{':', '*'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 3240, col: 27, offset: 94917},
							expr: &charClassMatcher{
								pos:        position{line: 3240, col: 27, offset: 94917},
								val:        "[a-zA-Z0-9:_.*]",
								chars:      []rune{':', '_', '.', '*'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "FieldNameStartWith_",
			pos:  position{line: 3244, col: 1, offset: 94970},
			expr: &actionExpr{
				pos: position{line: 3244, col: 24, offset: 94993},
				run: (*parser).callonFieldNameStartWith_1,
				expr: &seqExpr{
					pos: position{line: 3244, col: 24, offset: 94993},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 3244, col: 24, offset: 94993},
							val:        "[a-zA-Z0-9:_.*]",
							chars:      []rune{':', '_', '.', '*'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 3244, col: 39, offset: 95008},
							expr: &charClassMatcher{
								pos:        position{line: 3244, col: 39, offset: 95008},
								val:        "[a-zA-Z0-9:_.*]",
								chars:      []rune{':', '_', '.', '*'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "String",
			pos:  position{line: 3248, col: 1, offset: 95061},
			expr: &actionExpr{
				pos: position{line: 3248, col: 11, offset: 95071},
				run: (*parser).callonString1,
				expr: &labeledExpr{
					pos:   position{line: 3248, col: 11, offset: 95071},
					label: "str",
					expr: &choiceExpr{
						pos: position{line: 3248, col: 16, offset: 95076},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3248, col: 16, offset: 95076},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 3248, col: 31, offset: 95091},
								name: "UnquotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 3252, col: 1, offset: 95132},
			expr: &actionExpr{
				pos: position{line: 3252, col: 17, offset: 95148},
				run: (*parser).callonQuotedString1,
				expr: &seqExpr{
					pos: position{line: 3252, col: 17, offset: 95148},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3252, col: 17, offset: 95148},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 3252, col: 21, offset: 95152},
							expr: &charClassMatcher{
								pos:        position{line: 3252, col: 21, offset: 95152},
								val:        "[^\"]",
								chars:      []rune{'"'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 3252, col: 27, offset: 95158},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UnquotedString",
			pos:  position{line: 3257, col: 1, offset: 95269},
			expr: &actionExpr{
				pos: position{line: 3257, col: 19, offset: 95287},
				run: (*parser).callonUnquotedString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 3257, col: 19, offset: 95287},
					expr: &choiceExpr{
						pos: position{line: 3257, col: 20, offset: 95288},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 3257, col: 20, offset: 95288},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&seqExpr{
								pos: position{line: 3257, col: 27, offset: 95295},
								exprs: []any{
									&notExpr{
										pos: position{line: 3257, col: 27, offset: 95295},
										expr: &choiceExpr{
											pos: position{line: 3257, col: 29, offset: 95297},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 3257, col: 29, offset: 95297},
													name: "MAJOR_BREAK",
												},
												&litMatcher{
													pos:        position{line: 3257, col: 43, offset: 95311},
													val:        "|",
													ignoreCase: false,
													want:       "\"|\"",
												},
												&ruleRefExpr{
													pos:  position{line: 3257, col: 49, offset: 95317},
													name: "EOF",
												},
											},
										},
									},
									&anyMatcher{
										line: 3257, col: 54, offset: 95322,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AllowedChar",
			pos:  position{line: 3264, col: 1, offset: 95437},
			expr: &choiceExpr{
				pos: position{line: 3264, col: 16, offset: 95452},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 3264, col: 16, offset: 95452},
						val:        "[a-zA-Z0-9:_{}@.]",
						chars:      []rune{':', '_', '{', '}', '@', '.'},
						ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&seqExpr{
						pos: position{line: 3264, col: 37, offset: 95473},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 3264, col: 37, offset: 95473},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 3264, col: 41, offset: 95477},
								expr: &charClassMatcher{
									pos:        position{line: 3264, col: 41, offset: 95477},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&litMatcher{
								pos:        position{line: 3264, col: 48, offset: 95484},
								val:        "}",
								ignoreCase: false,
								want:       "\"}\"",
							},
						},
					},
				},
			},
		},
		{
			name: "UnquotedStringWithTemplateWildCard",
			pos:  position{line: 3266, col: 1, offset: 95490},
			expr: &actionExpr{
				pos: position{line: 3266, col: 39, offset: 95528},
				run: (*parser).callonUnquotedStringWithTemplateWildCard1,
				expr: &oneOrMoreExpr{
					pos: position{line: 3266, col: 39, offset: 95528},
					expr: &choiceExpr{
						pos: position{line: 3266, col: 40, offset: 95529},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3266, col: 40, offset: 95529},
								name: "AllowedChar",
							},
							&seqExpr{
								pos: position{line: 3266, col: 54, offset: 95543},
								exprs: []any{
									&notExpr{
										pos: position{line: 3266, col: 54, offset: 95543},
										expr: &choiceExpr{
											pos: position{line: 3266, col: 56, offset: 95545},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 3266, col: 56, offset: 95545},
													name: "MAJOR_BREAK",
												},
												&litMatcher{
													pos:        position{line: 3266, col: 70, offset: 95559},
													val:        "|",
													ignoreCase: false,
													want:       "\"|\"",
												},
												&ruleRefExpr{
													pos:  position{line: 3266, col: 76, offset: 95565},
													name: "EOF",
												},
											},
										},
									},
									&anyMatcher{
										line: 3266, col: 81, offset: 95570,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Boolean",
			pos:  position{line: 3270, col: 1, offset: 95610},
			expr: &actionExpr{
				pos: position{line: 3270, col: 12, offset: 95621},
				run: (*parser).callonBoolean1,
				expr: &choiceExpr{
					pos: position{line: 3270, col: 13, offset: 95622},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3270, col: 13, offset: 95622},
							val:        "true",
							ignoreCase: false,
							want:       "\"true\"",
						},
						&litMatcher{
							pos:        position{line: 3270, col: 22, offset: 95631},
							val:        "false",
							ignoreCase: false,
							want:       "\"false\"",
						},
					},
				},
			},
		},
		{
			name: "RenamePattern",
			pos:  position{line: 3276, col: 1, offset: 95785},
			expr: &actionExpr{
				pos: position{line: 3276, col: 18, offset: 95802},
				run: (*parser).callonRenamePattern1,
				expr: &oneOrMoreExpr{
					pos: position{line: 3276, col: 18, offset: 95802},
					expr: &charClassMatcher{
						pos:        position{line: 3276, col: 18, offset: 95802},
						val:        "[a-zA-Z0-9_*]",
						chars:      []rune{'_', '*'},
						ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 3280, col: 1, offset: 95853},
			expr: &actionExpr{
				pos: position{line: 3280, col: 11, offset: 95863},
				run: (*parser).callonNumber1,
				expr: &labeledExpr{
					pos:   position{line: 3280, col: 11, offset: 95863},
					label: "number",
					expr: &ruleRefExpr{
						pos:  position{line: 3280, col: 18, offset: 95870},
						name: "NumberAsString",
					},
				},
			},
		},
		{
			name: "NumberAsString",
			pos:  position{line: 3286, col: 1, offset: 96059},
			expr: &actionExpr{
				pos: position{line: 3286, col: 19, offset: 96077},
				run: (*parser).callonNumberAsString1,
				expr: &seqExpr{
					pos: position{line: 3286, col: 19, offset: 96077},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3286, col: 19, offset: 96077},
							label: "number",
							expr: &choiceExpr{
								pos: position{line: 3286, col: 27, offset: 96085},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 3286, col: 27, offset: 96085},
										name: "FloatAsString",
									},
									&ruleRefExpr{
										pos:  position{line: 3286, col: 43, offset: 96101},
										name: "IntegerAsString",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 3286, col: 60, offset: 96118},
							expr: &choiceExpr{
								pos: position{line: 3286, col: 62, offset: 96120},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 3286, col: 62, offset: 96120},
										name: "SPACE",
									},
									&litMatcher{
										pos:        position{line: 3286, col: 70, offset: 96128},
										val:        "|",
										ignoreCase: false,
										want:       "\"|\"",
									},
									&litMatcher{
										pos:        position{line: 3286, col: 76, offset: 96134},
										val:        ")",
										ignoreCase: false,
										want:       "\")\"",
									},
									&litMatcher{
										pos:        position{line: 3286, col: 82, offset: 96140},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&ruleRefExpr{
										pos:  position{line: 3286, col: 88, offset: 96146},
										name: "EOF",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FloatAsString",
			pos:  position{line: 3292, col: 1, offset: 96275},
			expr: &actionExpr{
				pos: position{line: 3292, col: 18, offset: 96292},
				run: (*parser).callonFloatAsString1,
				expr: &seqExpr{
					pos: position{line: 3292, col: 18, offset: 96292},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 3292, col: 18, offset: 96292},
							expr: &charClassMatcher{
								pos:        position{line: 3292, col: 18, offset: 96292},
								val:        "[-+]",
								chars:      []rune{'-', '+'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 3292, col: 24, offset: 96298},
							expr: &charClassMatcher{
								pos:        position{line: 3292, col: 24, offset: 96298},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 3292, col: 31, offset: 96305},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 3292, col: 35, offset: 96309},
							expr: &charClassMatcher{
								pos:        position{line: 3292, col: 35, offset: 96309},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "IntegerAsString",
			pos:  position{line: 3297, col: 1, offset: 96404},
			expr: &actionExpr{
				pos: position{line: 3297, col: 20, offset: 96423},
				run: (*parser).callonIntegerAsString1,
				expr: &seqExpr{
					pos: position{line: 3297, col: 20, offset: 96423},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 3297, col: 20, offset: 96423},
							expr: &charClassMatcher{
								pos:        position{line: 3297, col: 20, offset: 96423},
								val:        "[-+]",
								chars:      []rune{'-', '+'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 3297, col: 26, offset: 96429},
							expr: &charClassMatcher{
								pos:        position{line: 3297, col: 26, offset: 96429},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 3301, col: 1, offset: 96472},
			expr: &actionExpr{
				pos: position{line: 3301, col: 21, offset: 96492},
				run: (*parser).callonEqualityOperator1,
				expr: &seqExpr{
					pos: position{line: 3301, col: 21, offset: 96492},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3301, col: 21, offset: 96492},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 3301, col: 36, offset: 96507},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 3301, col: 40, offset: 96511},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 3301, col: 40, offset: 96511},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
									&litMatcher{
										pos:        position{line: 3301, col: 46, offset: 96517},
										val:        "!=",
										ignoreCase: false,
										want:       "\"!=\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 3301, col: 52, offset: 96523},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "InequalityOperator",
			pos:  position{line: 3309, col: 1, offset: 96704},
			expr: &actionExpr{
				pos: position{line: 3309, col: 23, offset: 96726},
				run: (*parser).callonInequalityOperator1,
				expr: &seqExpr{
					pos: position{line: 3309, col: 23, offset: 96726},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3309, col: 23, offset: 96726},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 3309, col: 38, offset: 96741},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 3309, col: 42, offset: 96745},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 3309, col: 42, offset: 96745},
										val:        "<=",
										ignoreCase: false,
										want:       "\"<=\"",
									},
									&litMatcher{
										pos:        position{line: 3309, col: 49, offset: 96752},
										val:        "<",
										ignoreCase: false,
										want:       "\"<\"",
									},
									&litMatcher{
										pos:        position{line: 3309, col: 55, offset: 96758},
										val:        ">=",
										ignoreCase: false,
										want:       "\">=\"",
									},
									&litMatcher{
										pos:        position{line: 3309, col: 62, offset: 96765},
										val:        ">",
										ignoreCase: false,
										want:       "\">\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 3309, col: 67, offset: 96770},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "EqualityOrInequality",
			pos:  position{line: 3317, col: 1, offset: 96953},
			expr: &choiceExpr{
				pos: position{line: 3317, col: 25, offset: 96977},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3317, col: 25, offset: 96977},
						run: (*parser).callonEqualityOrInequality2,
						expr: &labeledExpr{
							pos:   position{line: 3317, col: 25, offset: 96977},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 3317, col: 28, offset: 96980},
								name: "EqualityOperator",
							},
						},
					},
					&actionExpr{
						pos: position{line: 3320, col: 3, offset: 97022},
						run: (*parser).callonEqualityOrInequality5,
						expr: &labeledExpr{
							pos:   position{line: 3320, col: 3, offset: 97022},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 3320, col: 6, offset: 97025},
								name: "InequalityOperator",
							},
						},
					},
				},
			},
		},
		{
			name: "OpPlus",
			pos:  position{line: 3324, col: 1, offset: 97068},
			expr: &actionExpr{
				pos: position{line: 3324, col: 11, offset: 97078},
				run: (*parser).callonOpPlus1,
				expr: &seqExpr{
					pos: position{line: 3324, col: 11, offset: 97078},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3324, col: 11, offset: 97078},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 3324, col: 26, offset: 97093},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3324, col: 30, offset: 97097},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpMinus",
			pos:  position{line: 3328, col: 1, offset: 97137},
			expr: &actionExpr{
				pos: position{line: 3328, col: 12, offset: 97148},
				run: (*parser).callonOpMinus1,
				expr: &seqExpr{
					pos: position{line: 3328, col: 12, offset: 97148},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3328, col: 12, offset: 97148},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 3328, col: 27, offset: 97163},
							val:        "-",
							ignoreCase: false,
							want:       "\"-\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3328, col: 31, offset: 97167},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpMul",
			pos:  position{line: 3332, col: 1, offset: 97207},
			expr: &actionExpr{
				pos: position{line: 3332, col: 10, offset: 97216},
				run: (*parser).callonOpMul1,
				expr: &seqExpr{
					pos: position{line: 3332, col: 10, offset: 97216},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3332, col: 10, offset: 97216},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 3332, col: 25, offset: 97231},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3332, col: 29, offset: 97235},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpDiv",
			pos:  position{line: 3336, col: 1, offset: 97275},
			expr: &actionExpr{
				pos: position{line: 3336, col: 10, offset: 97284},
				run: (*parser).callonOpDiv1,
				expr: &seqExpr{
					pos: position{line: 3336, col: 10, offset: 97284},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3336, col: 10, offset: 97284},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 3336, col: 25, offset: 97299},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3336, col: 29, offset: 97303},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "Second",
			pos:  position{line: 3341, col: 1, offset: 97367},
			expr: &actionExpr{
				pos: position{line: 3341, col: 11, offset: 97377},
				run: (*parser).callonSecond1,
				expr: &choiceExpr{
					pos: position{line: 3341, col: 12, offset: 97378},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3341, col: 12, offset: 97378},
							val:        "seconds",
							ignoreCase: false,
							want:       "\"seconds\"",
						},
						&litMatcher{
							pos:        position{line: 3341, col: 24, offset: 97390},
							val:        "second",
							ignoreCase: false,
							want:       "\"second\"",
						},
						&litMatcher{
							pos:        position{line: 3341, col: 35, offset: 97401},
							val:        "secs",
							ignoreCase: false,
							want:       "\"secs\"",
						},
						&litMatcher{
							pos:        position{line: 3341, col: 44, offset: 97410},
							val:        "sec",
							ignoreCase: false,
							want:       "\"sec\"",
						},
						&litMatcher{
							pos:        position{line: 3341, col: 52, offset: 97418},
							val:        "s",
							ignoreCase: false,
							want:       "\"s\"",
						},
					},
				},
			},
		},
		{
			name: "Minute",
			pos:  position{line: 3345, col: 1, offset: 97459},
			expr: &actionExpr{
				pos: position{line: 3345, col: 11, offset: 97469},
				run: (*parser).callonMinute1,
				expr: &choiceExpr{
					pos: position{line: 3345, col: 12, offset: 97470},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3345, col: 12, offset: 97470},
							val:        "minutes",
							ignoreCase: false,
							want:       "\"minutes\"",
						},
						&litMatcher{
							pos:        position{line: 3345, col: 24, offset: 97482},
							val:        "minute",
							ignoreCase: false,
							want:       "\"minute\"",
						},
						&litMatcher{
							pos:        position{line: 3345, col: 35, offset: 97493},
							val:        "mins",
							ignoreCase: false,
							want:       "\"mins\"",
						},
						&litMatcher{
							pos:        position{line: 3345, col: 44, offset: 97502},
							val:        "min",
							ignoreCase: false,
							want:       "\"min\"",
						},
						&litMatcher{
							pos:        position{line: 3345, col: 52, offset: 97510},
							val:        "m",
							ignoreCase: false,
							want:       "\"m\"",
						},
					},
				},
			},
		},
		{
			name: "Hour",
			pos:  position{line: 3349, col: 1, offset: 97551},
			expr: &actionExpr{
				pos: position{line: 3349, col: 9, offset: 97559},
				run: (*parser).callonHour1,
				expr: &choiceExpr{
					pos: position{line: 3349, col: 10, offset: 97560},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3349, col: 10, offset: 97560},
							val:        "hours",
							ignoreCase: false,
							want:       "\"hours\"",
						},
						&litMatcher{
							pos:        position{line: 3349, col: 20, offset: 97570},
							val:        "hour",
							ignoreCase: false,
							want:       "\"hour\"",
						},
						&litMatcher{
							pos:        position{line: 3349, col: 29, offset: 97579},
							val:        "hrs",
							ignoreCase: false,
							want:       "\"hrs\"",
						},
						&litMatcher{
							pos:        position{line: 3349, col: 37, offset: 97587},
							val:        "hr",
							ignoreCase: false,
							want:       "\"hr\"",
						},
						&litMatcher{
							pos:        position{line: 3349, col: 44, offset: 97594},
							val:        "h",
							ignoreCase: false,
							want:       "\"h\"",
						},
					},
				},
			},
		},
		{
			name: "Day",
			pos:  position{line: 3353, col: 1, offset: 97633},
			expr: &actionExpr{
				pos: position{line: 3353, col: 8, offset: 97640},
				run: (*parser).callonDay1,
				expr: &choiceExpr{
					pos: position{line: 3353, col: 9, offset: 97641},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3353, col: 9, offset: 97641},
							val:        "days",
							ignoreCase: false,
							want:       "\"days\"",
						},
						&litMatcher{
							pos:        position{line: 3353, col: 18, offset: 97650},
							val:        "day",
							ignoreCase: false,
							want:       "\"day\"",
						},
						&litMatcher{
							pos:        position{line: 3353, col: 26, offset: 97658},
							val:        "d",
							ignoreCase: false,
							want:       "\"d\"",
						},
					},
				},
			},
		},
		{
			name: "Week",
			pos:  position{line: 3357, col: 1, offset: 97696},
			expr: &actionExpr{
				pos: position{line: 3357, col: 9, offset: 97704},
				run: (*parser).callonWeek1,
				expr: &choiceExpr{
					pos: position{line: 3357, col: 10, offset: 97705},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3357, col: 10, offset: 97705},
							val:        "weeks",
							ignoreCase: false,
							want:       "\"weeks\"",
						},
						&litMatcher{
							pos:        position{line: 3357, col: 20, offset: 97715},
							val:        "week",
							ignoreCase: false,
							want:       "\"week\"",
						},
						&litMatcher{
							pos:        position{line: 3357, col: 29, offset: 97724},
							val:        "w",
							ignoreCase: false,
							want:       "\"w\"",
						},
					},
				},
			},
		},
		{
			name: "Month",
			pos:  position{line: 3361, col: 1, offset: 97763},
			expr: &actionExpr{
				pos: position{line: 3361, col: 10, offset: 97772},
				run: (*parser).callonMonth1,
				expr: &choiceExpr{
					pos: position{line: 3361, col: 11, offset: 97773},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3361, col: 11, offset: 97773},
							val:        "months",
							ignoreCase: false,
							want:       "\"months\"",
						},
						&litMatcher{
							pos:        position{line: 3361, col: 22, offset: 97784},
							val:        "month",
							ignoreCase: false,
							want:       "\"month\"",
						},
						&litMatcher{
							pos:        position{line: 3361, col: 32, offset: 97794},
							val:        "mon",
							ignoreCase: false,
							want:       "\"mon\"",
						},
					},
				},
			},
		},
		{
			name: "Quarter",
			pos:  position{line: 3365, col: 1, offset: 97836},
			expr: &actionExpr{
				pos: position{line: 3365, col: 12, offset: 97847},
				run: (*parser).callonQuarter1,
				expr: &choiceExpr{
					pos: position{line: 3365, col: 13, offset: 97848},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3365, col: 13, offset: 97848},
							val:        "quarters",
							ignoreCase: false,
							want:       "\"quarters\"",
						},
						&litMatcher{
							pos:        position{line: 3365, col: 26, offset: 97861},
							val:        "quarter",
							ignoreCase: false,
							want:       "\"quarter\"",
						},
						&litMatcher{
							pos:        position{line: 3365, col: 38, offset: 97873},
							val:        "qtrs",
							ignoreCase: false,
							want:       "\"qtrs\"",
						},
						&litMatcher{
							pos:        position{line: 3365, col: 47, offset: 97882},
							val:        "qtr",
							ignoreCase: false,
							want:       "\"qtr\"",
						},
						&litMatcher{
							pos:        position{line: 3365, col: 55, offset: 97890},
							val:        "q",
							ignoreCase: false,
							want:       "\"q\"",
						},
					},
				},
			},
		},
		{
			name: "Subseconds",
			pos:  position{line: 3370, col: 1, offset: 98024},
			expr: &actionExpr{
				pos: position{line: 3370, col: 15, offset: 98038},
				run: (*parser).callonSubseconds1,
				expr: &choiceExpr{
					pos: position{line: 3370, col: 16, offset: 98039},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3370, col: 16, offset: 98039},
							val:        "us",
							ignoreCase: false,
							want:       "\"us\"",
						},
						&litMatcher{
							pos:        position{line: 3370, col: 23, offset: 98046},
							val:        "ms",
							ignoreCase: false,
							want:       "\"ms\"",
						},
						&litMatcher{
							pos:        position{line: 3370, col: 30, offset: 98053},
							val:        "cs",
							ignoreCase: false,
							want:       "\"cs\"",
						},
						&litMatcher{
							pos:        position{line: 3370, col: 37, offset: 98060},
							val:        "ds",
							ignoreCase: false,
							want:       "\"ds\"",
						},
					},
				},
			},
		},
		{
			name: "TransactionBlock",
			pos:  position{line: 3379, col: 1, offset: 98283},
			expr: &actionExpr{
				pos: position{line: 3379, col: 21, offset: 98303},
				run: (*parser).callonTransactionBlock1,
				expr: &seqExpr{
					pos: position{line: 3379, col: 21, offset: 98303},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3379, col: 21, offset: 98303},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 3379, col: 26, offset: 98308},
							name: "CMD_TRANSACTION",
						},
						&labeledExpr{
							pos:   position{line: 3379, col: 42, offset: 98324},
							label: "txnOptions",
							expr: &ruleRefExpr{
								pos:  position{line: 3379, col: 53, offset: 98335},
								name: "TransactionOptions",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionOptions",
			pos:  position{line: 3388, col: 1, offset: 98641},
			expr: &actionExpr{
				pos: position{line: 3388, col: 23, offset: 98663},
				run: (*parser).callonTransactionOptions1,
				expr: &labeledExpr{
					pos:   position{line: 3388, col: 23, offset: 98663},
					label: "txnOptions",
					expr: &zeroOrOneExpr{
						pos: position{line: 3388, col: 34, offset: 98674},
						expr: &ruleRefExpr{
							pos:  position{line: 3388, col: 34, offset: 98674},
							name: "TransactionDefinitionOptionsList",
						},
					},
				},
			},
		},
		{
			name: "TransactionDefinitionOptionsList",
			pos:  position{line: 3403, col: 1, offset: 99065},
			expr: &actionExpr{
				pos: position{line: 3403, col: 37, offset: 99101},
				run: (*parser).callonTransactionDefinitionOptionsList1,
				expr: &seqExpr{
					pos: position{line: 3403, col: 37, offset: 99101},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3403, col: 37, offset: 99101},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 3403, col: 43, offset: 99107},
								name: "TransactionDefinitionOption",
							},
						},
						&labeledExpr{
							pos:   position{line: 3403, col: 71, offset: 99135},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3403, col: 76, offset: 99140},
								expr: &seqExpr{
									pos: position{line: 3403, col: 77, offset: 99141},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 3403, col: 77, offset: 99141},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 3403, col: 83, offset: 99147},
											name: "TransactionDefinitionOption",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionDefinitionOption",
			pos:  position{line: 3438, col: 1, offset: 100136},
			expr: &actionExpr{
				pos: position{line: 3438, col: 32, offset: 100167},
				run: (*parser).callonTransactionDefinitionOption1,
				expr: &labeledExpr{
					pos:   position{line: 3438, col: 32, offset: 100167},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 3438, col: 40, offset: 100175},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3438, col: 40, offset: 100175},
								name: "SpaceSeparatedFieldNameList",
							},
							&ruleRefExpr{
								pos:  position{line: 3438, col: 70, offset: 100205},
								name: "StartsWithOption",
							},
							&ruleRefExpr{
								pos:  position{line: 3438, col: 89, offset: 100224},
								name: "EndsWithOption",
							},
						},
					},
				},
			},
		},
		{
			name: "SpaceSeparatedFieldNameList",
			pos:  position{line: 3444, col: 1, offset: 100370},
			expr: &actionExpr{
				pos: position{line: 3444, col: 32, offset: 100401},
				run: (*parser).callonSpaceSeparatedFieldNameList1,
				expr: &seqExpr{
					pos: position{line: 3444, col: 32, offset: 100401},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3444, col: 32, offset: 100401},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 3444, col: 38, offset: 100407},
								name: "FieldName",
							},
						},
						&notExpr{
							pos: position{line: 3444, col: 48, offset: 100417},
							expr: &ruleRefExpr{
								pos:  position{line: 3444, col: 50, offset: 100419},
								name: "EQUAL",
							},
						},
						&labeledExpr{
							pos:   position{line: 3444, col: 57, offset: 100426},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3444, col: 62, offset: 100431},
								expr: &seqExpr{
									pos: position{line: 3444, col: 63, offset: 100432},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 3444, col: 63, offset: 100432},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 3444, col: 69, offset: 100438},
											name: "FieldName",
										},
										&notExpr{
											pos: position{line: 3444, col: 79, offset: 100448},
											expr: &ruleRefExpr{
												pos:  position{line: 3444, col: 81, offset: 100450},
												name: "EQUAL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StartsWithOption",
			pos:  position{line: 3462, col: 1, offset: 100874},
			expr: &actionExpr{
				pos: position{line: 3462, col: 21, offset: 100894},
				run: (*parser).callonStartsWithOption1,
				expr: &seqExpr{
					pos: position{line: 3462, col: 21, offset: 100894},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3462, col: 21, offset: 100894},
							val:        "startswith",
							ignoreCase: false,
							want:       "\"startswith\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3462, col: 34, offset: 100907},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3462, col: 40, offset: 100913},
							label: "strExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 3462, col: 48, offset: 100921},
								name: "TransactionFilterString",
							},
						},
					},
				},
			},
		},
		{
			name: "EndsWithOption",
			pos:  position{line: 3472, col: 1, offset: 101159},
			expr: &actionExpr{
				pos: position{line: 3472, col: 19, offset: 101177},
				run: (*parser).callonEndsWithOption1,
				expr: &seqExpr{
					pos: position{line: 3472, col: 19, offset: 101177},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3472, col: 19, offset: 101177},
							val:        "endswith",
							ignoreCase: false,
							want:       "\"endswith\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3472, col: 30, offset: 101188},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3472, col: 36, offset: 101194},
							label: "strExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 3472, col: 44, offset: 101202},
								name: "TransactionFilterString",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionFilterString",
			pos:  position{line: 3483, col: 1, offset: 101471},
			expr: &actionExpr{
				pos: position{line: 3483, col: 28, offset: 101498},
				run: (*parser).callonTransactionFilterString1,
				expr: &labeledExpr{
					pos:   position{line: 3483, col: 28, offset: 101498},
					label: "strExpr",
					expr: &choiceExpr{
						pos: position{line: 3483, col: 37, offset: 101507},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3483, col: 37, offset: 101507},
								name: "TransactionQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 3483, col: 63, offset: 101533},
								name: "TransactionEval",
							},
							&ruleRefExpr{
								pos:  position{line: 3483, col: 81, offset: 101551},
								name: "TransactionSearch",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionQuotedString",
			pos:  position{line: 3487, col: 1, offset: 101599},
			expr: &actionExpr{
				pos: position{line: 3487, col: 28, offset: 101626},
				run: (*parser).callonTransactionQuotedString1,
				expr: &labeledExpr{
					pos:   position{line: 3487, col: 28, offset: 101626},
					label: "str",
					expr: &choiceExpr{
						pos: position{line: 3487, col: 33, offset: 101631},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3487, col: 33, offset: 101631},
								name: "TransactionQuotedStringValue",
							},
							&ruleRefExpr{
								pos:  position{line: 3487, col: 64, offset: 101662},
								name: "TransactionQuotedStringSearchExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionQuotedStringSearchExpr",
			pos:  position{line: 3491, col: 1, offset: 101722},
			expr: &actionExpr{
				pos: position{line: 3491, col: 38, offset: 101759},
				run: (*parser).callonTransactionQuotedStringSearchExpr1,
				expr: &seqExpr{
					pos: position{line: 3491, col: 38, offset: 101759},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3491, col: 38, offset: 101759},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 3491, col: 42, offset: 101763},
							label: "searchClause",
							expr: &ruleRefExpr{
								pos:  position{line: 3491, col: 55, offset: 101776},
								name: "ClauseLevel4",
							},
						},
						&litMatcher{
							pos:        position{line: 3491, col: 68, offset: 101789},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedStringNoOp",
			pos:  position{line: 3499, col: 1, offset: 101928},
			expr: &actionExpr{
				pos: position{line: 3499, col: 21, offset: 101948},
				run: (*parser).callonQuotedStringNoOp1,
				expr: &seqExpr{
					pos: position{line: 3499, col: 21, offset: 101948},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3499, col: 21, offset: 101948},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 3499, col: 25, offset: 101952},
							expr: &charClassMatcher{
								pos:        position{line: 3499, col: 25, offset: 101952},
								val:        "[^\" !(OR / AND)]",
								chars:      []rune{'"', ' ', '!', '(', 'O', 'R', ' ', '/', ' ', 'A', 'N', 'D', ')'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 3499, col: 44, offset: 101971},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "TransactionQuotedStringValue",
			pos:  position{line: 3504, col: 1, offset: 102082},
			expr: &actionExpr{
				pos: position{line: 3504, col: 33, offset: 102114},
				run: (*parser).callonTransactionQuotedStringValue1,
				expr: &labeledExpr{
					pos:   position{line: 3504, col: 33, offset: 102114},
					label: "str",
					expr: &ruleRefExpr{
						pos:  position{line: 3504, col: 37, offset: 102118},
						name: "QuotedStringNoOp",
					},
				},
			},
		},
		{
			name: "TransactionSearch",
			pos:  position{line: 3512, col: 1, offset: 102273},
			expr: &actionExpr{
				pos: position{line: 3512, col: 22, offset: 102294},
				run: (*parser).callonTransactionSearch1,
				expr: &labeledExpr{
					pos:   position{line: 3512, col: 22, offset: 102294},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 3512, col: 27, offset: 102299},
						name: "ClauseLevel1",
					},
				},
			},
		},
		{
			name: "TransactionEval",
			pos:  position{line: 3522, col: 1, offset: 102471},
			expr: &actionExpr{
				pos: position{line: 3522, col: 20, offset: 102490},
				run: (*parser).callonTransactionEval1,
				expr: &seqExpr{
					pos: position{line: 3522, col: 20, offset: 102490},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3522, col: 20, offset: 102490},
							val:        "eval",
							ignoreCase: false,
							want:       "\"eval\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3522, col: 27, offset: 102497},
							name: "EMPTY_OR_SPACE",
						},
						&ruleRefExpr{
							pos:  position{line: 3522, col: 42, offset: 102512},
							name: "L_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 3522, col: 50, offset: 102520},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 3522, col: 60, offset: 102530},
								name: "BoolExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 3522, col: 69, offset: 102539},
							name: "R_PAREN",
						},
					},
				},
			},
		},
		{
			name: "MultiValueBlock",
			pos:  position{line: 3532, col: 1, offset: 102842},
			expr: &actionExpr{
				pos: position{line: 3532, col: 20, offset: 102861},
				run: (*parser).callonMultiValueBlock1,
				expr: &seqExpr{
					pos: position{line: 3532, col: 20, offset: 102861},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3532, col: 20, offset: 102861},
							name: "PIPE",
						},
						&labeledExpr{
							pos:   position{line: 3532, col: 25, offset: 102866},
							label: "mvQueryAggNode",
							expr: &ruleRefExpr{
								pos:  position{line: 3532, col: 42, offset: 102883},
								name: "MakeMVBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "MakeMVBlock",
			pos:  position{line: 3536, col: 1, offset: 102932},
			expr: &actionExpr{
				pos: position{line: 3536, col: 16, offset: 102947},
				run: (*parser).callonMakeMVBlock1,
				expr: &seqExpr{
					pos: position{line: 3536, col: 16, offset: 102947},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3536, col: 16, offset: 102947},
							name: "CMD_MAKEMV",
						},
						&ruleRefExpr{
							pos:  position{line: 3536, col: 27, offset: 102958},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 3536, col: 33, offset: 102964},
							label: "mvColOptionExpr",
							expr: &zeroOrOneExpr{
								pos: position{line: 3536, col: 50, offset: 102981},
								expr: &ruleRefExpr{
									pos:  position{line: 3536, col: 50, offset: 102981},
									name: "MVBlockOptionsList",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 3536, col: 70, offset: 103001},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 3536, col: 85, offset: 103016},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 3536, col: 91, offset: 103022},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "MVBlockOptionsList",
			pos:  position{line: 3563, col: 1, offset: 103729},
			expr: &actionExpr{
				pos: position{line: 3563, col: 23, offset: 103751},
				run: (*parser).callonMVBlockOptionsList1,
				expr: &seqExpr{
					pos: position{line: 3563, col: 23, offset: 103751},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3563, col: 23, offset: 103751},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 3563, col: 31, offset: 103759},
								name: "MVBlockOption",
							},
						},
						&labeledExpr{
							pos:   position{line: 3563, col: 46, offset: 103774},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3563, col: 52, offset: 103780},
								expr: &seqExpr{
									pos: position{line: 3563, col: 53, offset: 103781},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 3563, col: 53, offset: 103781},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 3563, col: 59, offset: 103787},
											name: "MVBlockOption",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MVBlockOption",
			pos:  position{line: 3597, col: 1, offset: 104843},
			expr: &actionExpr{
				pos: position{line: 3597, col: 18, offset: 104860},
				run: (*parser).callonMVBlockOption1,
				expr: &labeledExpr{
					pos:   position{line: 3597, col: 18, offset: 104860},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 3597, col: 27, offset: 104869},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3597, col: 27, offset: 104869},
								name: "DelimOption",
							},
							&ruleRefExpr{
								pos:  position{line: 3597, col: 41, offset: 104883},
								name: "AllowEmptyOption",
							},
							&ruleRefExpr{
								pos:  position{line: 3597, col: 60, offset: 104902},
								name: "SetSvOption",
							},
						},
					},
				},
			},
		},
		{
			name: "DelimOption",
			pos:  position{line: 3601, col: 1, offset: 104943},
			expr: &actionExpr{
				pos: position{line: 3601, col: 16, offset: 104958},
				run: (*parser).callonDelimOption1,
				expr: &labeledExpr{
					pos:   position{line: 3601, col: 16, offset: 104958},
					label: "delimExpr",
					expr: &choiceExpr{
						pos: position{line: 3601, col: 28, offset: 104970},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3601, col: 28, offset: 104970},
								name: "StringDelimiter",
							},
							&ruleRefExpr{
								pos:  position{line: 3601, col: 46, offset: 104988},
								name: "RegexDelimiter",
							},
						},
					},
				},
			},
		},
		{
			name: "StringDelimiter",
			pos:  position{line: 3605, col: 1, offset: 105035},
			expr: &actionExpr{
				pos: position{line: 3605, col: 20, offset: 105054},
				run: (*parser).callonStringDelimiter1,
				expr: &seqExpr{
					pos: position{line: 3605, col: 20, offset: 105054},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3605, col: 20, offset: 105054},
							val:        "delim",
							ignoreCase: false,
							want:       "\"delim\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3605, col: 28, offset: 105062},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3605, col: 34, offset: 105068},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 3605, col: 38, offset: 105072},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexDelimiter",
			pos:  position{line: 3616, col: 1, offset: 105323},
			expr: &actionExpr{
				pos: position{line: 3616, col: 19, offset: 105341},
				run: (*parser).callonRegexDelimiter1,
				expr: &seqExpr{
					pos: position{line: 3616, col: 19, offset: 105341},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3616, col: 19, offset: 105341},
							val:        "tokenizer",
							ignoreCase: false,
							want:       "\"tokenizer\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3616, col: 31, offset: 105353},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3616, col: 37, offset: 105359},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 3616, col: 41, offset: 105363},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "AllowEmptyOption",
			pos:  position{line: 3634, col: 1, offset: 105834},
			expr: &actionExpr{
				pos: position{line: 3634, col: 21, offset: 105854},
				run: (*parser).callonAllowEmptyOption1,
				expr: &seqExpr{
					pos: position{line: 3634, col: 21, offset: 105854},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3634, col: 21, offset: 105854},
							val:        "allowempty",
							ignoreCase: false,
							want:       "\"allowempty\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3634, col: 34, offset: 105867},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3634, col: 40, offset: 105873},
							label: "boolVal",
							expr: &ruleRefExpr{
								pos:  position{line: 3634, col: 48, offset: 105881},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "SetSvOption",
			pos:  position{line: 3646, col: 1, offset: 106121},
			expr: &actionExpr{
				pos: position{line: 3646, col: 16, offset: 106136},
				run: (*parser).callonSetSvOption1,
				expr: &seqExpr{
					pos: position{line: 3646, col: 16, offset: 106136},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3646, col: 16, offset: 106136},
							val:        "setsv",
							ignoreCase: false,
							want:       "\"setsv\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3646, col: 24, offset: 106144},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3646, col: 30, offset: 106150},
							label: "boolVal",
							expr: &ruleRefExpr{
								pos:  position{line: 3646, col: 38, offset: 106158},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "SPathBlock",
			pos:  position{line: 3658, col: 1, offset: 106423},
			expr: &actionExpr{
				pos: position{line: 3658, col: 15, offset: 106437},
				run: (*parser).callonSPathBlock1,
				expr: &seqExpr{
					pos: position{line: 3658, col: 15, offset: 106437},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3658, col: 15, offset: 106437},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 3658, col: 20, offset: 106442},
							name: "CMD_SPATH",
						},
						&labeledExpr{
							pos:   position{line: 3658, col: 30, offset: 106452},
							label: "spathExpr",
							expr: &zeroOrOneExpr{
								pos: position{line: 3658, col: 40, offset: 106462},
								expr: &ruleRefExpr{
									pos:  position{line: 3658, col: 40, offset: 106462},
									name: "SPathArgumentsList",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SPathArgumentsList",
			pos:  position{line: 3665, col: 1, offset: 106588},
			expr: &actionExpr{
				pos: position{line: 3665, col: 23, offset: 106610},
				run: (*parser).callonSPathArgumentsList1,
				expr: &seqExpr{
					pos: position{line: 3665, col: 23, offset: 106610},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3665, col: 23, offset: 106610},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 3665, col: 29, offset: 106616},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 3665, col: 35, offset: 106622},
								name: "SPathArgument",
							},
						},
						&labeledExpr{
							pos:   position{line: 3665, col: 49, offset: 106636},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3665, col: 54, offset: 106641},
								expr: &seqExpr{
									pos: position{line: 3665, col: 55, offset: 106642},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 3665, col: 55, offset: 106642},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 3665, col: 61, offset: 106648},
											name: "SPathArgument",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SPathArgument",
			pos:  position{line: 3697, col: 1, offset: 107541},
			expr: &actionExpr{
				pos: position{line: 3697, col: 18, offset: 107558},
				run: (*parser).callonSPathArgument1,
				expr: &labeledExpr{
					pos:   position{line: 3697, col: 18, offset: 107558},
					label: "arg",
					expr: &choiceExpr{
						pos: position{line: 3697, col: 23, offset: 107563},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3697, col: 23, offset: 107563},
								name: "InputField",
							},
							&ruleRefExpr{
								pos:  position{line: 3697, col: 36, offset: 107576},
								name: "OutputField",
							},
							&ruleRefExpr{
								pos:  position{line: 3697, col: 50, offset: 107590},
								name: "PathField",
							},
						},
					},
				},
			},
		},
		{
			name: "InputField",
			pos:  position{line: 3701, col: 1, offset: 107626},
			expr: &actionExpr{
				pos: position{line: 3701, col: 15, offset: 107640},
				run: (*parser).callonInputField1,
				expr: &seqExpr{
					pos: position{line: 3701, col: 15, offset: 107640},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3701, col: 15, offset: 107640},
							val:        "input",
							ignoreCase: false,
							want:       "\"input\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3701, col: 23, offset: 107648},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3701, col: 29, offset: 107654},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 3701, col: 35, offset: 107660},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "OutputField",
			pos:  position{line: 3704, col: 1, offset: 107716},
			expr: &actionExpr{
				pos: position{line: 3704, col: 16, offset: 107731},
				run: (*parser).callonOutputField1,
				expr: &seqExpr{
					pos: position{line: 3704, col: 16, offset: 107731},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3704, col: 16, offset: 107731},
							val:        "output",
							ignoreCase: false,
							want:       "\"output\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3704, col: 25, offset: 107740},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3704, col: 31, offset: 107746},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 3704, col: 37, offset: 107752},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "PathField",
			pos:  position{line: 3707, col: 1, offset: 107809},
			expr: &actionExpr{
				pos: position{line: 3707, col: 14, offset: 107822},
				run: (*parser).callonPathField1,
				expr: &choiceExpr{
					pos: position{line: 3707, col: 15, offset: 107823},
					alternatives: []any{
						&seqExpr{
							pos: position{line: 3707, col: 15, offset: 107823},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3707, col: 15, offset: 107823},
									val:        "path",
									ignoreCase: false,
									want:       "\"path\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3707, col: 22, offset: 107830},
									name: "EQUAL",
								},
								&ruleRefExpr{
									pos:  position{line: 3707, col: 28, offset: 107836},
									name: "SPathFieldString",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 3707, col: 47, offset: 107855},
							name: "SPathFieldString",
						},
					},
				},
			},
		},
		{
			name: "SPathFieldString",
			pos:  position{line: 3719, col: 1, offset: 108267},
			expr: &choiceExpr{
				pos: position{line: 3719, col: 21, offset: 108287},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 3719, col: 21, offset: 108287},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 3719, col: 36, offset: 108302},
						name: "UnquotedStringWithTemplateWildCard",
					},
				},
			},
		},
		{
			name: "ALLCMD",
			pos:  position{line: 3723, col: 1, offset: 108368},
			expr: &choiceExpr{
				pos: position{line: 3723, col: 12, offset: 108379},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 3723, col: 12, offset: 108379},
						name: "CMD_REGEX",
					},
					&ruleRefExpr{
						pos:  position{line: 3723, col: 24, offset: 108391},
						name: "CMD_STATS",
					},
					&ruleRefExpr{
						pos:  position{line: 3723, col: 36, offset: 108403},
						name: "CMD_FIELDS",
					},
					&ruleRefExpr{
						pos:  position{line: 3723, col: 49, offset: 108416},
						name: "CMD_WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 3723, col: 61, offset: 108428},
						name: "CMD_HEAD_NO_SPACE",
					},
					&ruleRefExpr{
						pos:  position{line: 3723, col: 81, offset: 108448},
						name: "CMD_HEAD",
					},
					&ruleRefExpr{
						pos:  position{line: 3723, col: 92, offset: 108459},
						name: "CMD_EVAL",
					},
					&ruleRefExpr{
						pos:  position{line: 3723, col: 103, offset: 108470},
						name: "CMD_REX",
					},
					&ruleRefExpr{
						pos:  position{line: 3723, col: 113, offset: 108480},
						name: "CMD_TOP",
					},
					&ruleRefExpr{
						pos:  position{line: 3723, col: 123, offset: 108490},
						name: "CMD_RARE",
					},
					&ruleRefExpr{
						pos:  position{line: 3723, col: 134, offset: 108501},
						name: "CMD_RENAME",
					},
					&ruleRefExpr{
						pos:  position{line: 3723, col: 147, offset: 108514},
						name: "CMD_TIMECHART",
					},
					&ruleRefExpr{
						pos:  position{line: 3723, col: 163, offset: 108530},
						name: "CMD_TRANSACTION",
					},
					&ruleRefExpr{
						pos:  position{line: 3723, col: 181, offset: 108548},
						name: "CMD_DEDUP",
					},
					&ruleRefExpr{
						pos:  position{line: 3723, col: 193, offset: 108560},
						name: "CMD_SORT",
					},
					&ruleRefExpr{
						pos:  position{line: 3723, col: 204, offset: 108571},
						name: "CMD_MAKEMV",
					},
					&ruleRefExpr{
						pos:  position{line: 3723, col: 217, offset: 108584},
						name: "CMD_SPATH",
					},
				},
			},
		},
		{
			name: "CMD_SEARCH",
			pos:  position{line: 3724, col: 1, offset: 108595},
			expr: &seqExpr{
				pos: position{line: 3724, col: 15, offset: 108609},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3724, col: 15, offset: 108609},
						val:        "search",
						ignoreCase: false,
						want:       "\"search\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3724, col: 24, offset: 108618},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_REGEX",
			pos:  position{line: 3725, col: 1, offset: 108624},
			expr: &seqExpr{
				pos: position{line: 3725, col: 14, offset: 108637},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3725, col: 14, offset: 108637},
						val:        "regex",
						ignoreCase: false,
						want:       "\"regex\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3725, col: 22, offset: 108645},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_STATS",
			pos:  position{line: 3726, col: 1, offset: 108651},
			expr: &seqExpr{
				pos: position{line: 3726, col: 14, offset: 108664},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3726, col: 14, offset: 108664},
						val:        "stats",
						ignoreCase: false,
						want:       "\"stats\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3726, col: 22, offset: 108672},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_FIELDS",
			pos:  position{line: 3727, col: 1, offset: 108678},
			expr: &seqExpr{
				pos: position{line: 3727, col: 15, offset: 108692},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3727, col: 15, offset: 108692},
						val:        "fields",
						ignoreCase: false,
						want:       "\"fields\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3727, col: 24, offset: 108701},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_WHERE",
			pos:  position{line: 3728, col: 1, offset: 108707},
			expr: &seqExpr{
				pos: position{line: 3728, col: 14, offset: 108720},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3728, col: 14, offset: 108720},
						val:        "where",
						ignoreCase: false,
						want:       "\"where\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3728, col: 22, offset: 108728},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_HEAD_NO_SPACE",
			pos:  position{line: 3729, col: 1, offset: 108734},
			expr: &litMatcher{
				pos:        position{line: 3729, col: 22, offset: 108755},
				val:        "head",
				ignoreCase: false,
				want:       "\"head\"",
			},
		},
		{
			name: "CMD_HEAD",
			pos:  position{line: 3730, col: 1, offset: 108762},
			expr: &seqExpr{
				pos: position{line: 3730, col: 13, offset: 108774},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3730, col: 13, offset: 108774},
						name: "CMD_HEAD_NO_SPACE",
					},
					&ruleRefExpr{
						pos:  position{line: 3730, col: 31, offset: 108792},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_EVAL",
			pos:  position{line: 3731, col: 1, offset: 108798},
			expr: &seqExpr{
				pos: position{line: 3731, col: 13, offset: 108810},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3731, col: 13, offset: 108810},
						val:        "eval",
						ignoreCase: false,
						want:       "\"eval\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3731, col: 20, offset: 108817},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_REX",
			pos:  position{line: 3732, col: 1, offset: 108823},
			expr: &seqExpr{
				pos: position{line: 3732, col: 12, offset: 108834},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3732, col: 12, offset: 108834},
						val:        "rex",
						ignoreCase: false,
						want:       "\"rex\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3732, col: 18, offset: 108840},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_SORT",
			pos:  position{line: 3733, col: 1, offset: 108846},
			expr: &seqExpr{
				pos: position{line: 3733, col: 13, offset: 108858},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3733, col: 13, offset: 108858},
						val:        "sort",
						ignoreCase: false,
						want:       "\"sort\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3733, col: 20, offset: 108865},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_TOP",
			pos:  position{line: 3734, col: 1, offset: 108871},
			expr: &litMatcher{
				pos:        position{line: 3734, col: 12, offset: 108882},
				val:        "top",
				ignoreCase: false,
				want:       "\"top\"",
			},
		},
		{
			name: "CMD_RARE",
			pos:  position{line: 3735, col: 1, offset: 108888},
			expr: &litMatcher{
				pos:        position{line: 3735, col: 13, offset: 108900},
				val:        "rare",
				ignoreCase: false,
				want:       "\"rare\"",
			},
		},
		{
			name: "CMD_RENAME",
			pos:  position{line: 3736, col: 1, offset: 108907},
			expr: &seqExpr{
				pos: position{line: 3736, col: 15, offset: 108921},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3736, col: 15, offset: 108921},
						val:        "rename",
						ignoreCase: false,
						want:       "\"rename\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3736, col: 24, offset: 108930},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_TIMECHART",
			pos:  position{line: 3737, col: 1, offset: 108936},
			expr: &seqExpr{
				pos: position{line: 3737, col: 18, offset: 108953},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3737, col: 18, offset: 108953},
						val:        "timechart",
						ignoreCase: false,
						want:       "\"timechart\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3737, col: 30, offset: 108965},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_SPAN",
			pos:  position{line: 3738, col: 1, offset: 108971},
			expr: &litMatcher{
				pos:        position{line: 3738, col: 13, offset: 108983},
				val:        "span",
				ignoreCase: false,
				want:       "\"span\"",
			},
		},
		{
			name: "CMD_TRANSACTION",
			pos:  position{line: 3739, col: 1, offset: 108990},
			expr: &seqExpr{
				pos: position{line: 3739, col: 20, offset: 109009},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3739, col: 20, offset: 109009},
						val:        "transaction",
						ignoreCase: false,
						want:       "\"transaction\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3739, col: 34, offset: 109023},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_DEDUP",
			pos:  position{line: 3740, col: 1, offset: 109029},
			expr: &litMatcher{
				pos:        position{line: 3740, col: 14, offset: 109042},
				val:        "dedup",
				ignoreCase: false,
				want:       "\"dedup\"",
			},
		},
		{
			name: "CMD_DEDUP_SORTBY",
			pos:  position{line: 3741, col: 1, offset: 109050},
			expr: &seqExpr{
				pos: position{line: 3741, col: 21, offset: 109070},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3741, col: 21, offset: 109070},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 3741, col: 27, offset: 109076},
						val:        "sortby",
						ignoreCase: false,
						want:       "\"sortby\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3741, col: 36, offset: 109085},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_MAKEMV",
			pos:  position{line: 3742, col: 1, offset: 109091},
			expr: &litMatcher{
				pos:        position{line: 3742, col: 15, offset: 109105},
				val:        "makemv",
				ignoreCase: false,
				want:       "\"makemv\"",
			},
		},
		{
			name: "CMD_SPATH",
			pos:  position{line: 3743, col: 1, offset: 109114},
			expr: &litMatcher{
				pos:        position{line: 3743, col: 14, offset: 109127},
				val:        "spath",
				ignoreCase: false,
				want:       "\"spath\"",
			},
		},
		{
			name: "EVAL_CONCAT",
			pos:  position{line: 3744, col: 1, offset: 109135},
			expr: &seqExpr{
				pos: position{line: 3744, col: 16, offset: 109150},
				exprs: []any{
					&zeroOrOneExpr{
						pos: position{line: 3744, col: 16, offset: 109150},
						expr: &ruleRefExpr{
							pos:  position{line: 3744, col: 16, offset: 109150},
							name: "SPACE",
						},
					},
					&litMatcher{
						pos:        position{line: 3744, col: 23, offset: 109157},
						val:        ".",
						ignoreCase: false,
						want:       "\".\"",
					},
					&zeroOrOneExpr{
						pos: position{line: 3744, col: 27, offset: 109161},
						expr: &ruleRefExpr{
							pos:  position{line: 3744, col: 27, offset: 109161},
							name: "SPACE",
						},
					},
				},
			},
		},
		{
			name: "MAJOR_BREAK",
			pos:  position{line: 3747, col: 1, offset: 109272},
			expr: &choiceExpr{
				pos: position{line: 3747, col: 16, offset: 109287},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 3747, col: 16, offset: 109287},
						val:        "[[\\]<>(){}|!;,'\"*\\n\\r \\t&?+]",
						chars:      []rune{'[', ']', '<', '>', '(', ')', '{', '}', '|', '!', ';', ',', '\'', '"', '*', '\n', '\r', ' ', '\t', '&', '?', '+'},
						ignoreCase: false,
						inverted:   false,
					},
					&litMatcher{
						pos:        position{line: 3747, col: 47, offset: 109318},
						val:        "%21",
						ignoreCase: false,
						want:       "\"%21\"",
					},
					&litMatcher{
						pos:        position{line: 3747, col: 55, offset: 109326},
						val:        "%26",
						ignoreCase: false,
						want:       "\"%26\"",
					},
					&litMatcher{
						pos:        position{line: 3748, col: 16, offset: 109349},
						val:        "%2526",
						ignoreCase: false,
						want:       "\"%2526\"",
					},
					&litMatcher{
						pos:        position{line: 3748, col: 26, offset: 109359},
						val:        "%3B",
						ignoreCase: false,
						want:       "\"%3B\"",
					},
					&litMatcher{
						pos:        position{line: 3748, col: 34, offset: 109367},
						val:        "%7C",
						ignoreCase: false,
						want:       "\"%7C\"",
					},
					&litMatcher{
						pos:        position{line: 3748, col: 42, offset: 109375},
						val:        "%20",
						ignoreCase: false,
						want:       "\"%20\"",
					},
					&litMatcher{
						pos:        position{line: 3748, col: 50, offset: 109383},
						val:        "%2B",
						ignoreCase: false,
						want:       "\"%2B\"",
					},
					&litMatcher{
						pos:        position{line: 3748, col: 58, offset: 109391},
						val:        "%3D",
						ignoreCase: false,
						want:       "\"%3D\"",
					},
					&litMatcher{
						pos:        position{line: 3748, col: 66, offset: 109399},
						val:        "--",
						ignoreCase: false,
						want:       "\"--\"",
					},
					&litMatcher{
						pos:        position{line: 3749, col: 16, offset: 109421},
						val:        "%2520",
						ignoreCase: false,
						want:       "\"%2520\"",
					},
					&litMatcher{
						pos:        position{line: 3749, col: 26, offset: 109431},
						val:        "%5D",
						ignoreCase: false,
						want:       "\"%5D\"",
					},
					&litMatcher{
						pos:        position{line: 3749, col: 34, offset: 109439},
						val:        "%5B",
						ignoreCase: false,
						want:       "\"%5B\"",
					},
					&litMatcher{
						pos:        position{line: 3749, col: 42, offset: 109447},
						val:        "%3A",
						ignoreCase: false,
						want:       "\"%3A\"",
					},
					&litMatcher{
						pos:        position{line: 3749, col: 50, offset: 109455},
						val:        "%0A",
						ignoreCase: false,
						want:       "\"%0A\"",
					},
					&litMatcher{
						pos:        position{line: 3749, col: 58, offset: 109463},
						val:        "%2C",
						ignoreCase: false,
						want:       "\"%2C\"",
					},
					&litMatcher{
						pos:        position{line: 3749, col: 66, offset: 109471},
						val:        "%28",
						ignoreCase: false,
						want:       "\"%28\"",
					},
					&litMatcher{
						pos:        position{line: 3749, col: 74, offset: 109479},
						val:        "%29",
						ignoreCase: false,
						want:       "\"%29\"",
					},
				},
			},
		},
		{
			name: "MINOR_BREAK",
			pos:  position{line: 3750, col: 1, offset: 109485},
			expr: &choiceExpr{
				pos: position{line: 3750, col: 16, offset: 109500},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 3750, col: 16, offset: 109500},
						val:        "[/:=@.$#%_]",
						chars:      []rune{'/', ':', '=', '@', '.', '$', '#', '%', '_'},
						ignoreCase: false,
						inverted:   false,
					},
					&litMatcher{
						pos:        position{line: 3750, col: 30, offset: 109514},
						val:        "-",
						ignoreCase: false,
						want:       "\"-\"",
					},
					&litMatcher{
						pos:        position{line: 3750, col: 36, offset: 109520},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "NOT",
			pos:  position{line: 3754, col: 1, offset: 109676},
			expr: &seqExpr{
				pos: position{line: 3754, col: 8, offset: 109683},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3754, col: 8, offset: 109683},
						val:        "NOT",
						ignoreCase: false,
						want:       "\"NOT\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3754, col: 14, offset: 109689},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "OR",
			pos:  position{line: 3755, col: 1, offset: 109695},
			expr: &seqExpr{
				pos: position{line: 3755, col: 7, offset: 109701},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3755, col: 7, offset: 109701},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 3755, col: 13, offset: 109707},
						val:        "OR",
						ignoreCase: false,
						want:       "\"OR\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3755, col: 18, offset: 109712},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "AND",
			pos:  position{line: 3756, col: 1, offset: 109718},
			expr: &seqExpr{
				pos: position{line: 3756, col: 8, offset: 109725},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3756, col: 8, offset: 109725},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 3756, col: 14, offset: 109731},
						val:        "AND",
						ignoreCase: false,
						want:       "\"AND\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3756, col: 20, offset: 109737},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "PIPE",
			pos:  position{line: 3757, col: 1, offset: 109743},
			expr: &seqExpr{
				pos: position{line: 3757, col: 9, offset: 109751},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3757, col: 9, offset: 109751},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 3757, col: 24, offset: 109766},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3757, col: 28, offset: 109770},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 3758, col: 1, offset: 109785},
			expr: &seqExpr{
				pos: position{line: 3758, col: 7, offset: 109791},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3758, col: 7, offset: 109791},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 3758, col: 13, offset: 109797},
						val:        "as",
						ignoreCase: true,
						want:       "\"AS\"i",
					},
					&ruleRefExpr{
						pos:  position{line: 3758, col: 19, offset: 109803},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 3759, col: 1, offset: 109829},
			expr: &seqExpr{
				pos: position{line: 3759, col: 7, offset: 109835},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3759, col: 7, offset: 109835},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 3759, col: 13, offset: 109841},
						val:        "by",
						ignoreCase: true,
						want:       "\"BY\"i",
					},
					&ruleRefExpr{
						pos:  position{line: 3759, col: 19, offset: 109847},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "EQUAL",
			pos:  position{line: 3761, col: 1, offset: 109874},
			expr: &seqExpr{
				pos: position{line: 3761, col: 10, offset: 109883},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3761, col: 10, offset: 109883},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 3761, col: 25, offset: 109898},
						val:        "=",
						ignoreCase: false,
						want:       "\"=\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3761, col: 29, offset: 109902},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "COMMA",
			pos:  position{line: 3762, col: 1, offset: 109917},
			expr: &seqExpr{
				pos: position{line: 3762, col: 10, offset: 109926},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3762, col: 10, offset: 109926},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 3762, col: 25, offset: 109941},
						val:        ",",
						ignoreCase: false,
						want:       "\",\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3762, col: 29, offset: 109945},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "L_PAREN",
			pos:  position{line: 3763, col: 1, offset: 109960},
			expr: &seqExpr{
				pos: position{line: 3763, col: 12, offset: 109971},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3763, col: 12, offset: 109971},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3763, col: 16, offset: 109975},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "R_PAREN",
			pos:  position{line: 3764, col: 1, offset: 109990},
			expr: &seqExpr{
				pos: position{line: 3764, col: 12, offset: 110001},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3764, col: 12, offset: 110001},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 3764, col: 27, offset: 110016},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 3766, col: 1, offset: 110021},
			expr: &notExpr{
				pos: position{line: 3766, col: 8, offset: 110028},
				expr: &anyMatcher{
					line: 3766, col: 9, offset: 110029,
				},
			},
		},
		{
			name: "WHITESPACE",
			pos:  position{line: 3767, col: 1, offset: 110031},
			expr: &choiceExpr{
				pos: position{line: 3767, col: 15, offset: 110045},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 3767, col: 15, offset: 110045},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&litMatcher{
						pos:        position{line: 3767, col: 21, offset: 110051},
						val:        "\t",
						ignoreCase: false,
						want:       "\"\\t\"",
					},
					&litMatcher{
						pos:        position{line: 3767, col: 28, offset: 110058},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
					&litMatcher{
						pos:        position{line: 3767, col: 35, offset: 110065},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
				},
			},
		},
		{
			name: "SPACE",
			pos:  position{line: 3768, col: 1, offset: 110070},
			expr: &choiceExpr{
				pos: position{line: 3768, col: 10, offset: 110079},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 3768, col: 11, offset: 110080},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 3768, col: 11, offset: 110080},
								expr: &ruleRefExpr{
									pos:  position{line: 3768, col: 11, offset: 110080},
									name: "WHITESPACE",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 3768, col: 23, offset: 110092},
								name: "COMMENT",
							},
							&zeroOrOneExpr{
								pos: position{line: 3768, col: 31, offset: 110100},
								expr: &ruleRefExpr{
									pos:  position{line: 3768, col: 31, offset: 110100},
									name: "WHITESPACE",
								},
							},
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 3768, col: 46, offset: 110115},
						expr: &ruleRefExpr{
							pos:  position{line: 3768, col: 46, offset: 110115},
							name: "WHITESPACE",
						},
					},
				},
			},
		},
		{
			name: "COMMENT",
			pos:  position{line: 3769, col: 1, offset: 110127},
			expr: &seqExpr{
				pos: position{line: 3769, col: 12, offset: 110138},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3769, col: 12, offset: 110138},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 3769, col: 18, offset: 110144},
						expr: &seqExpr{
							pos: position{line: 3769, col: 19, offset: 110145},
							exprs: []any{
								&notExpr{
									pos: position{line: 3769, col: 19, offset: 110145},
									expr: &litMatcher{
										pos:        position{line: 3769, col: 21, offset: 110147},
										val:        "```",
										ignoreCase: false,
										want:       "\"```\"",
									},
								},
								&anyMatcher{
									line: 3769, col: 28, offset: 110154,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 3769, col: 32, offset: 110158},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
				},
			},
		},
		{
			name: "EMPTY_OR_SPACE",
			pos:  position{line: 3770, col: 1, offset: 110164},
			expr: &choiceExpr{
				pos: position{line: 3770, col: 20, offset: 110183},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 3770, col: 20, offset: 110183},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 3770, col: 28, offset: 110191},
						val:        "",
						ignoreCase: false,
						want:       "\"\"",
					},
				},
			},
		},
		{
			name: "SPACE_OR_COMMA",
			pos:  position{line: 3771, col: 1, offset: 110194},
			expr: &choiceExpr{
				pos: position{line: 3771, col: 19, offset: 110212},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 3771, col: 19, offset: 110212},
						name: "COMMA",
					},
					&ruleRefExpr{
						pos:  position{line: 3771, col: 27, offset: 110220},
						name: "SPACE",
					},
				},
			},
		},
	},
}

func (c *current) onStart1(initialSearch, filterBlocks, queryAggBlocks any) (any, error) {
	var q ast.QueryStruct
	q.SearchFilter = initialSearch.(*ast.Node)

	// Join the InitialSearchBlock with the FilterBlocks with AND nodes. For a
	// search like "A | B | C | D" we should generate the node structure below
	// so that when we run the search it evaluates A first.
	//
	//      AND
	//     /   \
	//    A     AND
	//         /   \
	//        B     AND
	//             /   \
	//            C     D

	filterBlocksSlice := filterBlocks.([]any)
	switch len(filterBlocksSlice) {
	case 0:
		q.SearchFilter = initialSearch.(*ast.Node)
	case 1:
		q.SearchFilter = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     initialSearch.(*ast.Node),
			Right:    filterBlocksSlice[0].(*ast.Node),
		}
	default: // len > 1
		// Iterate backwards so we build the node structure mentioned above.
		root := filterBlocksSlice[len(filterBlocksSlice)-1].(*ast.Node)
		for i := len(filterBlocksSlice) - 2; i > -1; i-- {
			newRoot := &ast.Node{
				NodeType: ast.NodeAnd,
				Left:     filterBlocksSlice[i].(*ast.Node),
				Right:    root,
			}

			root = newRoot
		}

		q.SearchFilter = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     initialSearch.(*ast.Node),
			Right:    root,
		}
	}

	if queryAggBlocks != nil {
		queryAggSlice := queryAggBlocks.([]any)

		if len(queryAggSlice) > 0 {
			// Chain together all QueryAggergators.
			q.PipeCommands = queryAggSlice[0].(*structs.QueryAggregators)

			// Go to the end of the first chain.
			curQueryAgg := q.PipeCommands
			for ; curQueryAgg.Next != nil; curQueryAgg = curQueryAgg.Next {
			}

			// Link the remaining chains.
			for i := range queryAggSlice[1:] {
				queryAgg := queryAggSlice[i+1].(*structs.QueryAggregators)
				curQueryAgg.Next = queryAgg

				// Go to the end of this chain.
				for ; curQueryAgg.Next != nil; curQueryAgg = curQueryAgg.Next {
				}
			}
		}
	}

	return q, nil
}

func (p *parser) callonStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStart1(stack["initialSearch"], stack["filterBlocks"], stack["queryAggBlocks"])
}

func (c *current) onInitialSearchBlock1(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonInitialSearchBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialSearchBlock1(stack["clause"])
}

func (c *current) onSearchBlock1(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonSearchBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBlock1(stack["clause"])
}

func (c *current) onFilterBlock1(block any) (any, error) {
	return block, nil
}

func (p *parser) callonFilterBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterBlock1(stack["block"])
}

func (c *current) onQueryAggergatorBlock1(block any) (any, error) {
	queryAgg := block.(*structs.QueryAggregators)
	return queryAgg, nil
}

func (p *parser) callonQueryAggergatorBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQueryAggergatorBlock1(stack["block"])
}

func (c *current) onFieldSelectBlock1(op, fields any) (any, error) {
	columnsRequest := &structs.ColumnsRequest{}
	if op == nil || string(op.([]byte)) == "+" {
		columnsRequest.IncludeColumns = fields.([]string)
	} else {
		columnsRequest.ExcludeColumns = fields.([]string)
	}

	queryAggregator := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			OutputColumns: columnsRequest,
		},
	}

	return queryAggregator, nil
}

func (p *parser) callonFieldSelectBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldSelectBlock1(stack["op"], stack["fields"])
}

func (c *current) onAggregatorBlock1(aggs, byFields, options any) (any, error) {
	aggNode := &structs.QueryAggregators{}

	// Extract the MeasureAggregators and check if any of the aggregation fields
	// need to be renamed.
	aggsSlice := aggs.([]*aggregator)
	measureAggs := make([]*structs.MeasureAggregator, len(aggsSlice))
	columnsRequest := &structs.ColumnsRequest{}
	columnsRequest.RenameAggregationColumns = make(map[string]string, 0)

	for i, agg := range aggsSlice {
		measureAggs[i] = agg.measureAgg

		if agg.renameOutputField {
			columnsRequest.RenameAggregationColumns[measureAggs[i].String()] = agg.outputFieldNewName
		}
	}

	// If any agg field was renamed, make a QueryAggregators for all the renames.
	if len(columnsRequest.RenameAggregationColumns) > 0 {
		renameNode := &structs.QueryAggregators{
			PipeCommandType: structs.OutputTransformType,
			OutputTransforms: &structs.OutputTransforms{
				OutputColumns: columnsRequest,
			},
		}

		aggNode.Next = renameNode
	}

	if byFields == nil {
		aggNode.PipeCommandType = structs.MeasureAggsType
		aggNode.MeasureOperations = measureAggs
	} else {
		aggNode.PipeCommandType = structs.GroupByType
		aggNode.GroupByRequest = &structs.GroupByRequest{
			MeasureOperations: measureAggs,
			GroupByColumns:    byFields.([]string),
		}
		aggNode.BucketLimit = query.MAX_GRP_BUCKS
	}

	if options != nil {
		aggNode.StatsOptions = options.(*structs.StatsOptions)
	} else {
		aggNode.StatsOptions = initializeStatsOptions()
	}

	return aggNode, nil
}

func (p *parser) callonAggregatorBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregatorBlock1(stack["aggs"], stack["byFields"], stack["options"])
}

func (c *current) onStatsOptions1(option any) (any, error) {
	//Default value
	options := initializeStatsOptions()

	optionSlice := option.([]any)
	for _, opt := range optionSlice {
		optArr := opt.([]string)
		// Check for matching option types
		switch optArr[0] {
		case "dedup_splitvals":
			dedupSplitvalsBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatsBlock: Options: invalid param for dedup_splitvals option, param: %v, err: %v", optArr[1], err)
			}
			options.DedupSplitvals = dedupSplitvalsBool
		case "partitions":
			pVal, err := strconv.ParseUint(optArr[1], 10, 64)
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatsBlock: Options: invalid param for partitions option, param: %v, err: %v", optArr[1], err)
			}
			options.Partitions = pVal
		case "allnum":
			allnumBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatsBlock: Options: invalid param for allnum option, param: %v, err: %v", optArr[1], err)
			}
			options.Allnum = allnumBool
		case "delim":
			options.Delim = optArr[1]
		default:
			return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: invalid option: %v", optArr[0])
		}
	}

	return options, nil
}

func (p *parser) callonStatsOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatsOptions1(stack["option"])
}

func (c *current) onStatsOption1(optionCMD, str any) (any, error) {
	optionArr := []string{optionCMD.(string), str.(string)}
	return optionArr, nil
}

func (p *parser) callonStatsOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatsOption1(stack["optionCMD"], stack["str"])
}

func (c *current) onStatsOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: StatsOptionCMD: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonStatsOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatsOptionCMD1(stack["option"])
}

func (c *current) onGroupbyBlock1(fields any) (any, error) {
	// Wildcard fields are not allowed. See https://docs.splunk.com/Documentation/Splunk/9.1.0/SearchReference/Stats
	for _, field := range fields.([]string) {
		if strings.Contains(field, "*") {
			return nil, errors.New("BY clause cannot contain fields with wildcards")
		}
	}

	return fields, nil
}

func (p *parser) callonGroupbyBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupbyBlock1(stack["fields"])
}

func (c *current) onRegexBlock1(keyAndOp, str any) (any, error) {
	var key, op string
	if keyAndOp == nil {
		key = "*"
		op = "="
	} else {
		keyAndOpSlice := keyAndOp.([]any)
		key = keyAndOpSlice[0].(string)
		op = keyAndOpSlice[1].(string)
	}

	// Remove the quotation marks.
	regex := str.(string)
	regex = regex[1 : len(regex)-1]

	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:           op,
			Field:        key,
			Values:       regex,
			ValueIsRegex: true,
		},
	}

	return node, nil
}

func (p *parser) callonRegexBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexBlock1(stack["keyAndOp"], stack["str"])
}

func (c *current) onClauseLevel41(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*ast.Node)
	for _, v := range rest.([]any) {
		parts := v.([]any) // This will be [(AND / SPACE), ClauseLevel3].
		cur = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     cur,
			Right:    parts[1].(*ast.Node),
		}
	}

	return cur, nil
}

func (p *parser) callonClauseLevel41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel41(stack["first"], stack["rest"])
}

func (c *current) onClauseLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*ast.Node)
	for _, v := range rest.([]any) {
		parts := v.([]any) // This will be [OR, ClauseLevel2].
		cur = &ast.Node{
			NodeType: ast.NodeOr,
			Left:     cur,
			Right:    parts[1].(*ast.Node),
		}
	}

	return cur, nil
}

func (p *parser) callonClauseLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel31(stack["first"], stack["rest"])
}

func (c *current) onClauseLevel22(notList, first any) (any, error) {
	// There's an issue with how queries with AST Not nodes are run, so use
	// De Morgan's law to manipulate the expression.
	node := first.(*ast.Node)
	numNots := len(notList.([]any))

	if numNots%2 == 1 {
		deMorgansLaw(node)
	}

	return node, nil
}

func (p *parser) callonClauseLevel22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel22(stack["notList"], stack["first"])
}

func (c *current) onClauseLevel29(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonClauseLevel29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel29(stack["clause"])
}

func (c *current) onClauseLevel12(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonClauseLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel12(stack["clause"])
}

func (c *current) onClauseLevel18(term any) (any, error) {
	return term, nil
}

func (p *parser) callonClauseLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel18(stack["term"])
}

func (c *current) onSearchTerm1(term any) (any, error) {
	return term, nil
}

func (p *parser) callonSearchTerm1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchTerm1(stack["term"])
}

func (c *current) onTimechartBlock1(tcArgs, limitExpr any) (any, error) {
	aggNode := &structs.QueryAggregators{}

	columnsRequest := &structs.ColumnsRequest{}
	columnsRequest.RenameAggregationColumns = make(map[string]string, 0)
	measureAggs := make([]*structs.MeasureAggregator, 0)

	timechartExpr := &structs.TimechartExpr{}
	byField := ""

	if tcArgs == nil {
		return nil, fmt.Errorf("spl peg: timechart: either single-agg or eval-expression by split-by-clause is required")
	}

	timechartArgs := tcArgs.(*TimechartArgs)

	// TODO: Should add || timechartArgs.evalExpr == nil
	if timechartArgs.singleAggExpr == nil {
		return nil, fmt.Errorf("spl peg: timechart: either single-agg or eval-expression by split-by-clause is required")
	}

	var bOptions *structs.BinOptions

	if timechartArgs.tcOptions != nil {
		if timechartArgs.tcOptions.BinOptions != nil {
			bOptions = timechartArgs.tcOptions.BinOptions
		}
	}

	if timechartArgs.singleAggExpr != nil {
		singleAgg := &structs.SingleAgg{}
		aggTemp := timechartArgs.singleAggExpr

		for i, agg := range aggTemp.aggregators {
			measureAggs = append(measureAggs, agg.measureAgg)

			if agg.renameOutputField {
				measureAggs[i].StrEnc = agg.outputFieldNewName
			}
		}

		singleAgg.MeasureOperations = measureAggs
		timechartExpr.SingleAgg = singleAgg

		if aggTemp.SplitByClause != nil {
			byField = aggTemp.SplitByClause.Field
		}
	}

	// TODO: if timechartArgs.evalExpr != nil {}

	aggNode.PipeCommandType = structs.GroupByType
	aggNode.GroupByRequest = &structs.GroupByRequest{
		MeasureOperations: measureAggs,
		GroupByColumns:    []string{"timestamp"},
	}
	aggNode.BucketLimit = query.MAX_GRP_BUCKS

	if bOptions == nil {
		bOptions = &structs.BinOptions{
			SpanOptions: &structs.SpanOptions{
				DefaultSettings: true,
				SpanLength: &structs.SpanLength{
					Num:       1,
					TimeScalr: utils.TMMinute,
				},
			},
		}
	}

	var limitExprTmp *structs.LimitExpr
	if limitExpr != nil {
		limitExprTmp = limitExpr.(*structs.LimitExpr)
		if len(measureAggs) > 1 {
			limitExprTmp.LimitScoreMode = structs.LSMByFreq
		}
	}

	timeBucket := aggregations.InitTimeBucket(bOptions.SpanOptions.SpanLength.Num, bOptions.SpanOptions.SpanLength.TimeScalr, byField, limitExprTmp, len(measureAggs))
	aggNode.TimeHistogram = timeBucket

	return aggNode, nil
}

func (p *parser) callonTimechartBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimechartBlock1(stack["tcArgs"], stack["limitExpr"])
}

func (c *current) onTimechartArgumentsList1(first, rest any) (any, error) {
	restSlice := rest.([]any)
	timechartArgs := &TimechartArgs{}

	numArgs := 1 + len(restSlice)

	for i := 0; i < numArgs; i++ {

		var numArg interface{}

		if i == 0 {
			numArg = first
		} else {
			numArg = restSlice[i-1].([]any)[1]
		}

		switch numArg.(type) {
		case *singleAggTemp:
			timechartArgs.singleAggExpr = numArg.(*singleAggTemp)
		case *structs.TcOptions:
			timechartArgs.tcOptions = numArg.(*structs.TcOptions)
		default:
			return nil, fmt.Errorf("Spl peg: Timechart: invalid timechart argument: %v", numArg)
		}
	}

	return timechartArgs, nil
}

func (p *parser) callonTimechartArgumentsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimechartArgumentsList1(stack["first"], stack["rest"])
}

func (c *current) onTimechartArgument1(tcArg any) (any, error) {
	return tcArg, nil
}

func (p *parser) callonTimechartArgument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimechartArgument1(stack["tcArg"])
}

func (c *current) onSingleAggExpr1(aggs, splitByClause any) (any, error) {
	singleAggExpr := &singleAggTemp{
		aggregators: aggs.([]*aggregator),
	}

	if splitByClause != nil {
		singleAggExpr.SplitByClause = splitByClause.(*structs.SplitByClause)
	}

	return singleAggExpr, nil
}

func (p *parser) callonSingleAggExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleAggExpr1(stack["aggs"], stack["splitByClause"])
}

func (c *current) onSplitByClause1(field any) (any, error) {
	splitByClause := &structs.SplitByClause{
		Field: field.(string),
	}

	return splitByClause, nil
}

func (p *parser) callonSplitByClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSplitByClause1(stack["field"])
}

func (c *current) onTcOptions1(option any) (any, error) {
	//Default value
	tcOptions := &structs.TcOptions{
		UseNull:  true,
		UseOther: true,
		NullStr:  "null",
		OtherStr: "other",
	}
	switch option.(type) {
	case *structs.BinOptions:
		tcOptions.BinOptions = option.(*structs.BinOptions)
	case [][]string:
		optionSlice := option.([]any)
		for _, opt := range optionSlice {
			optArr := opt.([]string)
			switch optArr[0] {
			case "usenull":
				useNullBool, err := strconv.ParseBool(optArr[1])
				if err != nil {
					return nil, fmt.Errorf("Spl peg: Timechart: TcOptions: %v", err)
				}
				tcOptions.UseNull = useNullBool
			case "useother":
				useOtherBool, err := strconv.ParseBool(optArr[1])
				if err != nil {
					return nil, fmt.Errorf("Spl peg: Timechart: TcOptions: %v", err)
				}
				tcOptions.UseOther = useOtherBool
			case "nullstr":
				tcOptions.OtherStr = optArr[1]
			case "otherstr":
				tcOptions.OtherStr = optArr[1]
			default:
				return nil, fmt.Errorf("Spl peg: Timechart: TcOptions: invalid option: %v", optArr[0])
			}
		}
	default:
		return nil, fmt.Errorf("Spl peg: Timechart: Invalid tcOptions %v", option)
	}
	return tcOptions, nil
}

func (p *parser) callonTcOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTcOptions1(stack["option"])
}

func (c *current) onTcOption1(tcOptionCMD, val any) (any, error) {
	tcOptionArr := []string{tcOptionCMD.(string), val.(string)}
	return tcOptionArr, nil
}

func (p *parser) callonTcOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTcOption1(stack["tcOptionCMD"], stack["val"])
}

func (c *current) onTcOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Timechart: TcOptionCMD: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonTcOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTcOptionCMD1(stack["option"])
}

func (c *current) onBinOptions1(spanOptions any) (any, error) {
	binOptions := &structs.BinOptions{
		SpanOptions: spanOptions.(*structs.SpanOptions),
	}
	return binOptions, nil
}

func (p *parser) callonBinOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptions1(stack["spanOptions"])
}

func (c *current) onSpanOptions1(spanLength any) (any, error) {
	spanOptions := &structs.SpanOptions{
		SpanLength: spanLength.(*structs.SpanLength),
	}
	return spanOptions, nil
}

func (p *parser) callonSpanOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpanOptions1(stack["spanLength"])
}

func (c *current) onSpanLength1(intAsStr, timeScale any) (any, error) {
	num, err := strconv.Atoi(intAsStr.(string))
	if err != nil {
		return nil, fmt.Errorf("SpanLength: Invalid num (%v): %v", intAsStr.(string), err)
	}

	spanLength := &structs.SpanLength{
		Num:       num,
		TimeScalr: timeScale.(utils.TimeUnit),
	}
	return spanLength, nil
}

func (p *parser) callonSpanLength1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpanLength1(stack["intAsStr"], stack["timeScale"])
}

func (c *current) onTimeScale1(timeUnit any) (any, error) {
	return timeUnit, nil
}

func (p *parser) callonTimeScale1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimeScale1(stack["timeUnit"])
}

func (c *current) onLimitExpr1(sortBy, intAsStr any) (any, error) {
	num, err := strconv.Atoi(intAsStr.(string))
	if err != nil {
		return nil, fmt.Errorf("SpanLength: Invalid num (%v): %v", intAsStr.(string), err)
	}

	limitExpr := &structs.LimitExpr{
		IsTop: true, // Default Value
		Num:   num,
	}

	if sortBy != nil {
		sortByStr, err := transferUint8ToString(sortBy)
		if err != nil {
			return nil, fmt.Errorf("Spl peg: Timechart: %v", err)
		}
		if sortByStr == "bottom" {
			limitExpr.IsTop = false
		}
	}

	return limitExpr, nil
}

func (p *parser) callonLimitExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitExpr1(stack["sortBy"], stack["intAsStr"])
}

func (c *current) onStatisticBlock1(statisticExpr any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		StatisticColRequest: statisticExpr.(*structs.StatisticExpr),
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	measureAgg := &structs.MeasureAggregator{
		MeasureCol:  "*",
		MeasureFunc: utils.Count,
	}

	measureOperations := make([]*structs.MeasureAggregator, 1)
	measureOperations[0] = measureAgg

	groupByColumns := append(statisticExpr.(*structs.StatisticExpr).FieldList, statisticExpr.(*structs.StatisticExpr).ByClause...)

	aggNode := &structs.QueryAggregators{}
	aggNode.Next = root
	aggNode.PipeCommandType = structs.GroupByType
	aggNode.GroupByRequest = &structs.GroupByRequest{
		MeasureOperations: measureOperations,
		GroupByColumns:    groupByColumns,
	}

	return aggNode, nil
}

func (p *parser) callonStatisticBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticBlock1(stack["statisticExpr"])
}

func (c *current) onStatisticExpr1(cmd, limit, fieldList, byClause, options any) (any, error) {

	statisticExpr := &structs.StatisticExpr{
		FieldList: fieldList.([]interface{})[1].([]string),
	}

	statisticCmd, err := transferUint8ToString(cmd)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: StatisticExpr: %v", err)
	}

	if statisticCmd == "top" {
		statisticExpr.StatisticFunctionMode = structs.SFMTop
	} else {
		statisticExpr.StatisticFunctionMode = structs.SFMRare
	}

	if limit != nil {
		statisticExpr.Limit = limit.(string)
	}

	if options != nil {
		statisticExpr.StatisticOptions = options.(*structs.StatisticOptions)
	} else {
		statisticExpr.StatisticOptions = &structs.StatisticOptions{
			ShowCount:    true,
			CountField:   "count",
			ShowPerc:     true,
			PercentField: "percent",
			UseOther:     false,
			OtherStr:     "Other",
		}
	}

	if byClause != nil {
		statisticExpr.ByClause = byClause.([]string)
	}

	return statisticExpr, nil
}

func (p *parser) callonStatisticExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticExpr1(stack["cmd"], stack["limit"], stack["fieldList"], stack["byClause"], stack["options"])
}

func (c *current) onStatisticLimit2(number any) (any, error) {
	return number.(string), nil
}

func (p *parser) callonStatisticLimit2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticLimit2(stack["number"])
}

func (c *current) onStatisticLimit7(limit any) (any, error) {
	return limit.(string), nil
}

func (p *parser) callonStatisticLimit7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticLimit7(stack["limit"])
}

func (c *current) onStatisticOptions1(option any) (any, error) {
	//Default value
	options := &structs.StatisticOptions{
		ShowCount:    true,
		CountField:   "count",
		ShowPerc:     true,
		PercentField: "percent",
		UseOther:     false,
		OtherStr:     "other",
	}

	optionSlice := option.([]any)
	for _, opt := range optionSlice {
		optArr := opt.([]string)
		// Check for matching option types
		switch optArr[0] {
		case "showcount":
			showCountBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.ShowCount = showCountBool
		case "countfield":
			options.CountField = optArr[1]
		case "showperc":
			showPercBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.ShowPerc = showPercBool
		case "percentfield":
			options.PercentField = optArr[1]
		case "useother":
			useOtherBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.UseOther = useOtherBool
		case "otherstr":
			options.OtherStr = optArr[1]
		default:
			return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: invalid option")
		}
	}

	return options, nil
}

func (p *parser) callonStatisticOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticOptions1(stack["option"])
}

func (c *current) onStatisticOption1(optionCMD, field any) (any, error) {
	optionArr := []string{optionCMD.(string), field.(string)}
	return optionArr, nil
}

func (p *parser) callonStatisticOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticOption1(stack["optionCMD"], stack["field"])
}

func (c *current) onStatisticOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: StatisticExpr: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonStatisticOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticOptionCMD1(stack["option"])
}

func (c *current) onByClause2(fieldList any) (any, error) {
	return fieldList.([]string), nil
}

func (p *parser) callonByClause2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByClause2(stack["fieldList"])
}

func (c *current) onByClause7(groupByBlock any) (any, error) {
	return groupByBlock.([]string), nil
}

func (p *parser) callonByClause7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByClause7(stack["groupByBlock"])
}

func (c *current) onDedupBlock1(dedupExpr any) (any, error) {

	letColReq := &structs.LetColumnsRequest{
		DedupColRequest: dedupExpr.(*structs.DedupExpr),
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonDedupBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupBlock1(stack["dedupExpr"])
}

func (c *current) onDedupExpr1(limitArr, options1, fieldList, options2, sortByClause any) (any, error) {
	dedupExpr := &structs.DedupExpr{
		FieldList:         fieldList.([]string),
		Limit:             1,
		DedupCombinations: make(map[string]map[int][]structs.SortValue, 0),
		DedupRecords:      make(map[string]map[string]interface{}, 0),
	}

	if limitArr != nil {
		limitStr := limitArr.([]interface{})[1].(string)
		limit, err := strconv.ParseUint(limitStr, 10, 64)
		if err != nil || limit == 0 {
			return nil, fmt.Errorf("Invalid limit (%v): %v", limitStr, err)
		}
		dedupExpr.Limit = limit
	}

	dedupExpr.DedupOptions = &structs.DedupOptions{
		Consecutive: false,
		KeepEmpty:   false,
		KeepEvents:  false,
	}

	if options1 != nil {
		dedupExpr.DedupOptions = options1.(*structs.DedupOptions)
	}
	if options2 != nil {
		options := options2.(*structs.DedupOptions)

		if options.Consecutive {
			dedupExpr.DedupOptions.Consecutive = options.Consecutive
		}
		if options.KeepEmpty {
			dedupExpr.DedupOptions.KeepEmpty = options.KeepEmpty
		}
		if options.KeepEvents {
			dedupExpr.DedupOptions.KeepEvents = options.KeepEvents
		}
	}

	if sortByClause != nil {
		dedupExpr.DedupSortEles = sortByClause.([]*structs.SortElement)

		// Make the DedupSortAscending from the DedupSortEles.
		dedupExpr.DedupSortAscending = make([]int, len(dedupExpr.DedupSortEles))
		for i, ele := range dedupExpr.DedupSortEles {
			if ele.SortByAsc {
				dedupExpr.DedupSortAscending[i] = 1
			} else {
				dedupExpr.DedupSortAscending[i] = -1
			}
		}
	}

	return dedupExpr, nil
}

func (p *parser) callonDedupExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupExpr1(stack["limitArr"], stack["options1"], stack["fieldList"], stack["options2"], stack["sortByClause"])
}

func (c *current) onDedupFieldName1(field any) (any, error) {
	return field, nil
}

func (p *parser) callonDedupFieldName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupFieldName1(stack["field"])
}

func (c *current) onDedupFieldList1(first, rest any) (any, error) {
	// Convert `rest` to a slice. Each element of the slice will be a 2-element
	// slice where the first element is " " and the second is a FieldName.
	restSlice := rest.([]any)

	numFieldNames := 1 + len(restSlice)
	fields := make([]string, numFieldNames)
	fields[0] = first.(string)

	for i := 1; i < numFieldNames; i++ {
		separatorAndField := restSlice[i-1].([]any)
		fields[i] = separatorAndField[1].(string)
	}

	return fields, nil
}

func (p *parser) callonDedupFieldList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupFieldList1(stack["first"], stack["rest"])
}

func (c *current) onDedupOptions1(option any) (any, error) {
	//Default value
	options := &structs.DedupOptions{
		Consecutive: false,
		KeepEmpty:   false,
		KeepEvents:  false,
	}

	optionSlice := option.([]any)
	for _, opt := range optionSlice {
		optArr := opt.([]string)
		// Check for matching option types
		switch optArr[0] {
		case "consecutive":
			consecutiveBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: DedupBlock: Options: %v", err)
			}
			options.Consecutive = consecutiveBool
		case "keepempty":
			keepEmptyBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: DedupBlock: Options: %v", err)
			}
			options.KeepEmpty = keepEmptyBool
		case "keepevents":
			keepEventsBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: DedupBlock: Options: %v", err)
			}
			options.KeepEvents = keepEventsBool
		default:
			return nil, fmt.Errorf("Spl peg: DedupBlock: Options: invalid option")
		}
	}

	return options, nil
}

func (p *parser) callonDedupOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupOptions1(stack["option"])
}

func (c *current) onDedupOption1(optionCMD, field any) (any, error) {
	optionArr := []string{optionCMD.(string), field.(string)}
	return optionArr, nil
}

func (p *parser) callonDedupOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupOption1(stack["optionCMD"], stack["field"])
}

func (c *current) onDedupOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: DedupExpr: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonDedupOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupOptionCMD1(stack["option"])
}

func (c *current) onDedupSortByClause1(dedupSortEles any) (any, error) {
	return dedupSortEles, nil
}

func (p *parser) callonDedupSortByClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupSortByClause1(stack["dedupSortEles"])
}

func (c *current) onSortElements1(first, rest any) (any, error) {
	restSlice := rest.([]any)

	length := 1 + len(restSlice)
	sortEles := make([]*structs.SortElement, length)
	sortEles[0] = first.(*structs.SortElement)

	for i := 1; i < length; i++ {
		elements := restSlice[i-1].([]any)
		sortEles[i] = elements[1].(*structs.SortElement)
	}

	return sortEles, nil
}

func (p *parser) callonSortElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortElements1(stack["first"], stack["rest"])
}

func (c *current) onSingleSortElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSingleSortElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleSortElement1(stack["element"])
}

func (c *current) onSingleSortElementWithoutCast1(sortBySymbol, field any) (any, error) {
	sortByAsc := true

	symbol := sortBySymbol.([]byte)
	if len(symbol) > 0 && symbol[0] == '-' {
		sortByAsc = false
	}

	return &structs.SortElement{
		SortByAsc: sortByAsc,
		Op:        "",
		Field:     field.(string),
	}, nil
}

func (p *parser) callonSingleSortElementWithoutCast1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleSortElementWithoutCast1(stack["sortBySymbol"], stack["field"])
}

func (c *current) onSingleSortElementWithCast1(sortBySymbol, op, field any) (any, error) {
	sortByAsc := true

	symbol := sortBySymbol.([]byte)
	if len(symbol) > 0 && symbol[0] == '-' {
		sortByAsc = false
	}

	opStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: singleSortElementWithCast: %v", err)
	}

	return &structs.SortElement{
		SortByAsc: sortByAsc,
		Op:        opStr,
		Field:     field.(string),
	}, nil
}

func (p *parser) callonSingleSortElementWithCast1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleSortElementWithCast1(stack["sortBySymbol"], stack["op"], stack["field"])
}

func (c *current) onRenameBlock1(renameExpr any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		RenameColRequest: renameExpr.(*structs.RenameExpr),
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonRenameBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameBlock1(stack["renameExpr"])
}

func (c *current) onRenameExpr2(originalPattern, newPattern any) (any, error) {
	renameExpr := &structs.RenameExpr{
		RenameExprMode:  structs.REMPhrase,
		OriginalPattern: originalPattern.(string),
		NewPattern:      removeQuotes(newPattern),
	}

	return renameExpr, nil
}

func (p *parser) callonRenameExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameExpr2(stack["originalPattern"], stack["newPattern"])
}

func (c *current) onRenameExpr9(originalPattern, newPattern any) (any, error) {
	isRegex, err := isRegexRename(originalPattern.(string), newPattern.(string))
	if err != nil {
		return nil, fmt.Errorf("Spl peg: RenameExpr: %v", err)
	}

	var renameExprMode structs.RenameExprMode
	if isRegex {
		renameExprMode = structs.REMRegex
	} else {
		renameExprMode = structs.REMOverride
	}

	renameExpr := &structs.RenameExpr{
		RenameExprMode:  renameExprMode,
		OriginalPattern: originalPattern.(string),
		NewPattern:      newPattern.(string),
	}

	return renameExpr, nil
}

func (p *parser) callonRenameExpr9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameExpr9(stack["originalPattern"], stack["newPattern"])
}

func (c *current) onRexBlock1(field, str any) (any, error) {
	pattern := removeQuotes(str)
	rexColNames, err := getRexColNames(pattern)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: RexBlock: %v", err)
	}
	rexExpr := &structs.RexExpr{
		FieldName:   field.(string),
		Pattern:     transferPCREToRE2(pattern),
		RexColNames: rexColNames,
	}

	letColReq := &structs.LetColumnsRequest{
		RexColRequest: rexExpr,
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonRexBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRexBlock1(stack["field"], stack["str"])
}

func (c *current) onSortBlock1(limit, sortByEles any) (any, error) {

	sortExpr := &structs.SortExpr{
		SortEles:    sortByEles.([]*structs.SortElement),
		SortRecords: make(map[string]map[string]interface{}, 0),
		Limit:       10000,
	}

	if limit != nil {
		sortExpr.Limit = limit.(uint64)
	}

	ascendingArr := make([]int, len(sortExpr.SortEles))
	for i, ele := range sortExpr.SortEles {
		if ele.SortByAsc {
			ascendingArr[i] = 1
		} else {
			ascendingArr[i] = -1
		}
	}

	sortExpr.SortAscending = ascendingArr

	letColReq := &structs.LetColumnsRequest{
		SortColRequest: sortExpr,
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonSortBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortBlock1(stack["limit"], stack["sortByEles"])
}

func (c *current) onSortLimit1(intAsStr any) (any, error) {
	limit, err := strconv.ParseUint(intAsStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid limit (%v): %v", intAsStr.(string), err)
	}

	if limit == 0 {
		limit = math.MaxUint64
	}

	return limit, nil
}

func (p *parser) callonSortLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortLimit1(stack["intAsStr"])
}

func (c *current) onEvalBlock1(first, rest any) (any, error) {
	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: first.(*structs.LetColumnsRequest),
		},
	}

	leafQueryAgg := root
	restSlice := rest.([]any)
	for i := range restSlice {
		CommaSpaceAndEval := restSlice[i].([]any)
		nextQueryAgg := &structs.QueryAggregators{
			PipeCommandType: structs.OutputTransformType,
			OutputTransforms: &structs.OutputTransforms{
				LetColumns: CommaSpaceAndEval[1].(*structs.LetColumnsRequest),
			},
		}

		leafQueryAgg.Next = nextQueryAgg
		leafQueryAgg = leafQueryAgg.Next
	}

	return root, nil
}

func (p *parser) callonEvalBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalBlock1(stack["first"], stack["rest"])
}

func (c *current) onSingleEval1(field, expr any) (any, error) {
	fieldStr := field.(string)
	if strings.Contains(fieldStr, "*") {
		return nil, fmt.Errorf("New fields must not contain wildcards; invalid field: %v", field)
	}

	letColumnsRequest := expr.(*structs.LetColumnsRequest)
	letColumnsRequest.NewColName = fieldStr

	return letColumnsRequest, nil
}

func (p *parser) callonSingleEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleEval1(stack["field"], stack["expr"])
}

func (c *current) onEvalExpression1(value any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		ValueColRequest: value.(*structs.ValueExpr),
	}

	return letColReq, nil
}

func (p *parser) callonEvalExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalExpression1(stack["value"])
}

func (c *current) onConditionExpr2(condition, trueValue, falseValue any) (any, error) {

	node := &structs.ConditionExpr{
		Op:         "if",
		BoolExpr:   condition.(*structs.BoolExpr),
		TrueValue:  trueValue.(*structs.ValueExpr),
		FalseValue: falseValue.(*structs.ValueExpr),
	}

	return node, nil
}

func (p *parser) callonConditionExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr2(stack["condition"], stack["trueValue"], stack["falseValue"])
}

func (c *current) onConditionExpr15(opName, pair, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: ConditionExpr: %v", err)
	}
	pairs := make([]*structs.ConditionValuePair, 1)
	pairs[0] = pair.(*structs.ConditionValuePair)

	if rest != nil {
		restSlice := rest.([]any)
		for i := range restSlice {
			ele := restSlice[i].([]any)
			pairs = append(pairs, ele[1].(*structs.ConditionValuePair))
		}
	}

	node := &structs.ConditionExpr{
		Op:                  opNameStr,
		ConditionValuePairs: pairs,
	}

	return node, nil
}

func (p *parser) callonConditionExpr15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr15(stack["opName"], stack["pair"], stack["rest"])
}

func (c *current) onConditionExpr30(valueExpr, rest any) (any, error) {
	restSlice := rest.([]any)
	valueList := make([]*structs.ValueExpr, 1+len(restSlice))
	valueList[0] = valueExpr.(*structs.ValueExpr)

	for i := range restSlice {
		valueAtom := restSlice[i].([]any)
		valueList[i+1] = valueAtom[1].(*structs.ValueExpr)
	}

	node := &structs.ConditionExpr{
		Op:        "coalesce",
		ValueList: valueList,
	}

	return node, nil
}

func (p *parser) callonConditionExpr30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr30(stack["valueExpr"], stack["rest"])
}

func (c *current) onConditionExpr42(leftValue, rightValue any) (any, error) {
	valueList := make([]*structs.ValueExpr, 2)
	valueList[0] = leftValue.(*structs.ValueExpr)
	valueList[1] = rightValue.(*structs.ValueExpr)

	node := &structs.ConditionExpr{
		Op:        "nullif",
		ValueList: valueList,
	}

	return node, nil
}

func (p *parser) callonConditionExpr42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr42(stack["leftValue"], stack["rightValue"])
}

func (c *current) onConditionValuePair1(condition, value any) (any, error) {
	conditionValuePair := &structs.ConditionValuePair{
		Condition: condition.(*structs.BoolExpr),
		Value:     value.(*structs.ValueExpr),
	}
	return conditionValuePair, nil
}

func (p *parser) callonConditionValuePair1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionValuePair1(stack["condition"], stack["value"])
}

func (c *current) onTextExpr2(opName, stringExpr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:          opNameStr,
		Param:       stringExpr.(*structs.StringExpr),
		StrToRemove: "",
	}
	return node, nil
}

func (p *parser) callonTextExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr2(stack["opName"], stack["stringExpr"])
}

func (c *current) onTextExpr16(opName, firstVal, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	if rest == nil {
		return firstVal, nil
	}
	restSlice := rest.([]any)
	values := make([]*structs.StringExpr, 1+len(restSlice))
	values[0] = firstVal.(*structs.StringExpr)

	for i := range restSlice {
		stringAtom := restSlice[i].([]any)
		values[i+1] = stringAtom[1].(*structs.StringExpr)
	}
	node := &structs.TextExpr{
		Op:        opNameStr,
		ValueList: values,
	}
	return node, nil
}

func (p *parser) callonTextExpr16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr16(stack["opName"], stack["firstVal"], stack["rest"])
}

func (c *current) onTextExpr33(opName, stringExpr, delim any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:        opNameStr,
		Param:     stringExpr.(*structs.StringExpr),
		Delimiter: delim.(*structs.StringExpr),
	}
	return node, nil
}

func (p *parser) callonTextExpr33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr33(stack["opName"], stack["stringExpr"], stack["delim"])
}

func (c *current) onTextExpr46(opName, stringExpr, startIndex, lengthParam any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	var lengthConverted *structs.NumericExpr
	if lengthParam != nil {
		lengthSlice, ok := lengthParam.([]interface{})
		if ok && len(lengthSlice) > 1 {
			length, ok := lengthSlice[1].(*structs.NumericExpr)
			if ok {
				lengthConverted = length
			} else {
				return nil, fmt.Errorf("Spl peg: TextExpr: Unable to assert length as *structs.NumericExpr")
			}
		}
	}
	node := &structs.TextExpr{
		Op:         opNameStr,
		Param:      stringExpr.(*structs.StringExpr),
		StartIndex: startIndex.(*structs.NumericExpr),
		LengthExpr: lengthConverted,
	}
	return node, nil
}

func (p *parser) callonTextExpr46() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr46(stack["opName"], stack["stringExpr"], stack["startIndex"], stack["lengthParam"])
}

func (c *current) onTextExpr62(value, format any) (any, error) {
	var formatExpr *structs.StringExpr
	if format != nil {
		formatSlice := format.([]interface{})
		formatExpr, _ = formatSlice[1].(*structs.StringExpr)
	}
	return &structs.TextExpr{
		IsTerminal: false,
		Op:         "tostring",
		Val:        value.(*structs.ValueExpr),
		Param:      formatExpr,
	}, nil
}

func (p *parser) callonTextExpr62() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr62(stack["value"], stack["format"])
}

func (c *current) onTextExpr74(opName, expr, strToRemoveExpr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}

	strToRemove := " \t"
	if strToRemoveExpr != nil {
		strToRemove = strToRemoveExpr.(string)
	}

	node := &structs.TextExpr{
		Op:          opNameStr,
		Param:       expr.(*structs.StringExpr),
		StrToRemove: removeQuotes(strToRemove),
	}

	return node, nil
}

func (p *parser) callonTextExpr74() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr74(stack["opName"], stack["expr"], stack["strToRemoveExpr"])
}

func (c *current) onTextExpr88(inputField, path any) (any, error) {
	pathExpr := path.(*SPathFieldExpr)
	return &structs.TextExpr{
		Op: "spath",
		SPathExpr: &structs.SPathExpr{
			InputColName:    inputField.(string),
			Path:            pathExpr.PathValue,
			IsPathFieldName: pathExpr.IsPathFieldName,
		},
	}, nil
}

func (p *parser) callonTextExpr88() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr88(stack["inputField"], stack["path"])
}

func (c *current) onTextExpr100(mask, ip any) (any, error) {
	return &structs.TextExpr{
		Op:    "ipmask",
		Val:   ip.(*structs.ValueExpr),
		Param: mask.(*structs.StringExpr),
	}, nil
}

func (p *parser) callonTextExpr100() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr100(stack["mask"], stack["ip"])
}

func (c *current) onTextExpr110(obj, key, value any) (any, error) {
	stringExpr := &structs.StringExpr{
		StringExprMode: structs.SEMRawStringList,
		StringList:     []string{key.(string), value.(string)},
	}
	return &structs.TextExpr{
		Op:    "object_to_array",
		Val:   obj.(*structs.ValueExpr),
		Param: stringExpr,
	}, nil
}

func (p *parser) callonTextExpr110() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr110(stack["obj"], stack["key"], stack["value"])
}

func (c *current) onTextExpr123(format, rest any) (any, error) {
	textExpr := &structs.TextExpr{
		Op:    "printf",
		Param: format.(*structs.StringExpr),
	}
	if rest != nil {
		restSlice := rest.([]any)
		valueList := make([]*structs.StringExpr, len(restSlice))

		for i := range restSlice {
			valueAtom := restSlice[i].([]any)
			valueList[i] = valueAtom[1].(*structs.StringExpr)
		}
		textExpr.ValueList = valueList
	}

	return textExpr, nil
}

func (p *parser) callonTextExpr123() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr123(stack["format"], stack["rest"])
}

func (c *current) onTextExpr135(containInternalFields any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMRawString,
		RawString:      "true", // default value
	}

	if containInternalFields != nil {
		restSlice := containInternalFields.([]any)
		containInternalFieldsStr, err := transferUint8ToString(restSlice[0])
		if err != nil {
			return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
		}
		if containInternalFieldsStr == "false" {
			expr.RawString = "false"
		}
	}

	return &structs.TextExpr{
		Op:    "tojson",
		Param: expr,
	}, nil
}

func (p *parser) callonTextExpr135() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr135(stack["containInternalFields"])
}

func (c *current) onTextExpr147(opName, condition any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: Failed to recognize operator: %v, err= %v", opName, err)
	}

	node := &structs.TextExpr{
		Op:        opNameStr,
		Condition: condition.(*structs.BoolExpr),
	}

	return node, nil
}

func (p *parser) callonTextExpr147() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr147(stack["opName"], stack["condition"])
}

func (c *current) onTextExpr155(opName, stringExpr, startIndex, endIndex any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:         opNameStr,
		Param:      stringExpr.(*structs.StringExpr),
		StartIndex: startIndex.(*structs.NumericExpr),
	}
	if endIndex != nil {
		node.EndIndex = endIndex.(*structs.NumericExpr)
	}

	return node, nil
}

func (p *parser) callonTextExpr155() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr155(stack["opName"], stack["stringExpr"], stack["startIndex"], stack["endIndex"])
}

func (c *current) onTextExpr169(opName, stringExpr, expr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:    opNameStr,
		Val:   expr.(*structs.ValueExpr),
		Param: stringExpr.(*structs.StringExpr),
	}

	return node, nil
}

func (p *parser) callonTextExpr169() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr169(stack["opName"], stack["stringExpr"], stack["expr"])
}

func (c *current) onTextExpr180(opName, startIndex, endIndex, stringExpr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:         opNameStr,
		StartIndex: startIndex.(*structs.NumericExpr),
		EndIndex:   endIndex.(*structs.NumericExpr),
	}
	if stringExpr != nil {
		node.Param = stringExpr.(*structs.StringExpr)
	}

	return node, nil
}

func (p *parser) callonTextExpr180() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr180(stack["opName"], stack["startIndex"], stack["endIndex"], stack["stringExpr"])
}

func (c *current) onTextExpr195(opName, mvLeft, mvRight, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	values := make([]*structs.StringExpr, 2)
	values[0] = mvLeft.(*structs.StringExpr)
	values[1] = mvRight.(*structs.StringExpr)

	node := &structs.TextExpr{
		Op:        opNameStr,
		ValueList: values,
	}

	if rest != nil {
		restSlice := rest.([]any)
		node.Delimiter = restSlice[1].(*structs.StringExpr)
	}

	return node, nil
}

func (p *parser) callonTextExpr195() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr195(stack["opName"], stack["mvLeft"], stack["mvRight"], stack["rest"])
}

func (c *current) onTextExpr211(opName, stringExpr, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}

	node := &structs.TextExpr{
		Op:         opNameStr,
		Param:      stringExpr.(*structs.StringExpr),
		InferTypes: false, // default value
	}

	if rest != nil {
		restSlice := rest.([]any)
		inferTypes, err := transferUint8ToString(restSlice[1])
		if err != nil {
			return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
		}
		if inferTypes == "true" {
			node.InferTypes = true
		}
	}

	return node, nil
}

func (p *parser) callonTextExpr211() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr211(stack["opName"], stack["stringExpr"], stack["rest"])
}

func (c *current) onTextExpr227(field, threshold, match, delims any) (any, error) {
	textExpr := &structs.TextExpr{
		Op: "cluster",
	}

	cluster := &structs.Cluster{
		Field:     field.(string),
		Threshold: 0.8,
		Match:     "termlist",
	}

	if threshold != nil {
		slice := threshold.([]interface{})
		thresholdStr := slice[2].(string)
		val, err := strconv.ParseFloat(thresholdStr, 64)
		if err != nil {
			return nil, fmt.Errorf("Spl peg: TextExpr: invalid threshold: %v", thresholdStr)
		}
		cluster.Threshold = val
	}

	if match != nil {
		slice := match.([]interface{})
		matchStr, err := transferUint8ToString(slice[2])
		if err != nil {
			return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
		}
		cluster.Match = matchStr
	}

	if delims != nil {
		slice := delims.([]interface{})
		delimsStr := slice[2].(string)
		cluster.Delims = delimsStr
	}

	textExpr.Cluster = cluster

	return textExpr, nil
}

func (p *parser) callonTextExpr227() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr227(stack["field"], stack["threshold"], stack["match"], stack["delims"])
}

func (c *current) onTextExpr255(filter any) (any, error) {
	textExpr := &structs.TextExpr{
		Op: "getfields",
	}

	if filter != nil {
		textExpr.Param = filter.(*structs.StringExpr)
	}

	return textExpr, nil
}

func (p *parser) callonTextExpr255() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr255(stack["filter"])
}

func (c *current) onTextExpr263(valueExpr any) (any, error) {
	return &structs.TextExpr{
		Op:  "typeof",
		Val: valueExpr.(*structs.ValueExpr),
	}, nil
}

func (p *parser) callonTextExpr263() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr263(stack["valueExpr"])
}

func (c *current) onTextExpr270(val, regex, replacement any) (any, error) {
	return &structs.TextExpr{
		Op:        "replace",
		Val:       val.(*structs.ValueExpr),
		ValueList: []*structs.StringExpr{regex.(*structs.StringExpr), replacement.(*structs.StringExpr)},
	}, nil
}

func (p *parser) callonTextExpr270() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr270(stack["val"], stack["regex"], stack["replacement"])
}

func (c *current) onQuotedPathString1(str any) (any, error) {
	return &SPathFieldExpr{
		PathValue:       removeQuotes(str),
		IsPathFieldName: false,
	}, nil
}

func (p *parser) callonQuotedPathString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedPathString1(stack["str"])
}

func (c *current) onUnquotedPathValue1(str any) (any, error) {
	return &SPathFieldExpr{
		PathValue:       removeQuotes(str),
		IsPathFieldName: true,
	}, nil
}

func (p *parser) callonUnquotedPathValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedPathValue1(stack["str"])
}

func (c *current) onStrToRemoveExpr1(strToRemove any) (any, error) {
	return strToRemove, nil
}

func (p *parser) callonStrToRemoveExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStrToRemoveExpr1(stack["strToRemove"])
}

func (c *current) onEvalFieldToRead2() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEvalFieldToRead2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalFieldToRead2()
}

func (c *current) onEvalFieldToRead8(field any) (any, error) {
	return field, nil
}

func (p *parser) callonEvalFieldToRead8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalFieldToRead8(stack["field"])
}

func (c *current) onWhereBlock1(condition any) (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			FilterRows: condition.(*structs.BoolExpr),
		},
	}

	return queryAgg, nil
}

func (p *parser) callonWhereBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereBlock1(stack["condition"])
}

func (c *current) onBoolExpr1(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonBoolExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExpr1(stack["expr"])
}

func (c *current) onBoolExprLevel41(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.BoolExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.BoolExpr{
			IsTerminal: false,
			BoolOp:     structs.BoolOpOr,
			LeftBool:   cur,
			RightBool:  opAndClause[1].(*structs.BoolExpr),
		}
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel41(stack["first"], stack["rest"])
}

func (c *current) onBoolExprLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.BoolExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.BoolExpr{
			IsTerminal: false,
			BoolOp:     structs.BoolOpAnd,
			LeftBool:   cur,
			RightBool:  opAndClause[1].(*structs.BoolExpr),
		}
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel31(stack["first"], stack["rest"])
}

func (c *current) onBoolExprLevel22(first any) (any, error) {
	cur := &structs.BoolExpr{
		IsTerminal: false,
		BoolOp:     structs.BoolOpNot,
		LeftBool:   first.(*structs.BoolExpr),
		RightBool:  nil,
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel22(stack["first"])
}

func (c *current) onBoolExprLevel29(first any) (any, error) {
	return first, nil
}

func (p *parser) callonBoolExprLevel29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel29(stack["first"])
}

func (c *current) onBoolExprLevel12(first any) (any, error) {
	return first, nil
}

func (p *parser) callonBoolExprLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel12(stack["first"])
}

func (c *current) onBoolExprLevel18(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonBoolExprLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel18(stack["expr"])
}

func (c *current) onEvalComparisonExpr2(op, value any) (any, error) {
	opNameStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: BoolExpr: %v", err)
	}
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  value.(*structs.ValueExpr),
		RightValue: nil,
		ValueOp:    opNameStr,
	}
	return expr, nil
}

func (p *parser) callonEvalComparisonExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalComparisonExpr2(stack["op"], stack["value"])
}

func (c *current) onEvalComparisonExpr17(opName, leftValue, rightValue any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: BoolExpr: %v", err)
	}
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  leftValue.(*structs.ValueExpr),
		RightValue: rightValue.(*structs.ValueExpr),
		ValueOp:    opNameStr,
	}
	return expr, nil
}

func (p *parser) callonEvalComparisonExpr17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalComparisonExpr17(stack["opName"], stack["leftValue"], stack["rightValue"])
}

func (c *current) onEvalComparisonExpr32(left, valueToJudge, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ValueExpr, 1+len(restSlice))
	slice[0] = valueToJudge.(*structs.ValueExpr)

	for i := range restSlice {
		valueAtom := restSlice[i].([]any)
		slice[i+1] = valueAtom[1].(*structs.ValueExpr)
	}

	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  left.(*structs.ValueExpr),
		ValueList:  slice,
		ValueOp:    "in",
	}
	return expr, nil
}

func (p *parser) callonEvalComparisonExpr32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalComparisonExpr32(stack["left"], stack["valueToJudge"], stack["rest"])
}

func (c *current) onEvalComparisonExpr47(valueToJudge, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ValueExpr, len(restSlice))

	for i := range restSlice {
		valueAtom := restSlice[i].([]any)
		slice[i] = valueAtom[1].(*structs.ValueExpr)
	}

	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  valueToJudge.(*structs.ValueExpr),
		ValueList:  slice,
		ValueOp:    "in",
	}
	return expr, nil
}

func (p *parser) callonEvalComparisonExpr47() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalComparisonExpr47(stack["valueToJudge"], stack["rest"])
}

func (c *current) onBoolComparisonExpr1(left, op, right any) (any, error) {
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  left.(*structs.ValueExpr),
		RightValue: right.(*structs.ValueExpr),
		ValueOp:    op.(string),
	}

	return expr, nil
}

func (p *parser) callonBoolComparisonExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolComparisonExpr1(stack["left"], stack["op"], stack["right"])
}

func (c *current) onValueExpr2(condition any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMConditionExpr,
		ConditionExpr: condition.(*structs.ConditionExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr2(stack["condition"])
}

func (c *current) onValueExpr5(condition any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMConditionExpr,
		ConditionExpr: condition.(*structs.ConditionExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr5(stack["condition"])
}

func (c *current) onValueExpr11(numeric any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMNumericExpr,
		NumericExpr:   numeric.(*structs.NumericExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr11(stack["numeric"])
}

func (c *current) onValueExpr14(str any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMStringExpr,
		StringExpr:    str.(*structs.StringExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr14(stack["str"])
}

func (c *current) onValueExpr17(str any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMStringExpr,
		StringExpr:    str.(*structs.StringExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr17(stack["str"])
}

func (c *current) onValueExpr23(boolean any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolean.(*structs.BoolExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr23(stack["boolean"])
}

func (c *current) onStringExpr2(text any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMTextExpr,
		TextExpr:       text.(*structs.TextExpr),
	}

	return expr, nil
}

func (p *parser) callonStringExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr2(stack["text"])
}

func (c *current) onStringExpr8(str any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMRawString,
		RawString:      removeQuotes(str),
	}

	return expr, nil
}

func (p *parser) callonStringExpr8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr8(stack["str"])
}

func (c *current) onStringExpr14(field any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMField,
		FieldName:      field.(string),
	}

	return expr, nil
}

func (p *parser) callonStringExpr14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr14(stack["field"])
}

func (c *current) onStringExpr26(concat any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMConcatExpr,
		ConcatExpr:     concat.(*structs.ConcatExpr),
	}

	return expr, nil
}

func (p *parser) callonStringExpr26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr26(stack["concat"])
}

func (c *current) onConcatExpr1(first, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ConcatAtom, 1+len(restSlice))
	slice[0] = first.(*structs.ConcatAtom)

	for i := range restSlice {
		concatAndAtom := restSlice[i].([]any)
		slice[i+1] = concatAndAtom[1].(*structs.ConcatAtom)
	}

	expr := &structs.ConcatExpr{
		Atoms: slice,
	}

	return expr, nil
}

func (p *parser) callonConcatExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatExpr1(stack["first"], stack["rest"])
}

func (c *current) onConcatAtom2(text any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField:  false,
		Value:    "",
		TextExpr: text.(*structs.TextExpr),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom2(stack["text"])
}

func (c *current) onConcatAtom5(str any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: false,
		Value:   removeQuotes(str),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom5(stack["str"])
}

func (c *current) onConcatAtom8(number any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: false,
		Value:   number.(string),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom8(stack["number"])
}

func (c *current) onConcatAtom11(field any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: true,
		Value:   field.(string),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom11(stack["field"])
}

func (c *current) onNumericExpr1(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExpr1(stack["expr"])
}

func (c *current) onNumericExprLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.NumericExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.NumericExpr{
			IsTerminal:      false,
			Op:              opAndClause[0].(string),
			Left:            cur,
			Right:           opAndClause[1].(*structs.NumericExpr),
			NumericExprMode: structs.NEMNumericExpr,
		}
	}

	return cur, nil
}

func (p *parser) callonNumericExprLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel31(stack["first"], stack["rest"])
}

func (c *current) onNumericExprLevel21(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.NumericExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.NumericExpr{
			IsTerminal:      false,
			Op:              opAndClause[0].(string),
			Left:            cur,
			Right:           opAndClause[1].(*structs.NumericExpr),
			NumericExprMode: structs.NEMNumericExpr,
		}
	}

	return cur, nil
}

func (p *parser) callonNumericExprLevel21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel21(stack["first"], stack["rest"])
}

func (c *current) onNumericParamExpr1(expr any) (any, error) {
	rightNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	return rightNumericExpr, nil
}

func (p *parser) callonNumericParamExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericParamExpr1(stack["expr"])
}

func (c *current) onNumericExprLevel12(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericExprLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel12(stack["expr"])
}

func (c *current) onNumericExprLevel18(numericEvalExpr any) (any, error) {
	return numericEvalExpr, nil
}

func (p *parser) callonNumericExprLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel18(stack["numericEvalExpr"])
}

func (c *current) onNumericExprLevel111(field any) (any, error) {
	expr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    true,
		Value:           field.(string),
		NumericExprMode: structs.NEMNumberField,
	}

	return expr, nil
}

func (p *parser) callonNumericExprLevel111() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel111(stack["field"])
}

func (c *current) onNumericExprLevel114(number any) (any, error) {
	expr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    false,
		Value:           number.(string),
		NumericExprMode: structs.NEMNumber,
	}

	return expr, nil
}

func (p *parser) callonNumericExprLevel114() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel114(stack["number"])
}

func (c *current) onNumericEvalExpr2(opName, expr any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)
	node, err := createNumericExpr(opNameStr, leftNumericExpr, nil, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr2(stack["opName"], stack["expr"])
}

func (c *current) onNumericEvalExpr19(roundExpr, expr, roundPrecision any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	var rightNumericExpr *structs.NumericExpr
	if roundPrecision != nil {
		rightNumericExpr, ok = roundPrecision.(*structs.NumericExpr)
		if !ok {
			return nil, fmt.Errorf("Failed to assert roundPrecision as *structs.NumericExpr")
		}
	}

	node, err := createNumericExpr("round", leftNumericExpr, rightNumericExpr, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr19() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr19(stack["roundExpr"], stack["expr"], stack["roundPrecision"])
}

func (c *current) onNumericEvalExpr30(opName any) (any, error) {
	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)
	return &structs.NumericExpr{
		IsTerminal: true,
		Op:         opNameStr,
	}, nil
}

func (p *parser) callonNumericEvalExpr30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr30(stack["opName"])
}

func (c *current) onNumericEvalExpr39(stringExpr, baseExpr any) (any, error) {
	stringExprConverted, ok := stringExpr.(*structs.StringExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert stringExpr as *structs.StringExpr")
	}

	var baseExprConverted *structs.NumericExpr
	if baseExpr != nil {
		baseSlice, ok := baseExpr.([]interface{})
		if ok && len(baseSlice) > 1 {
			if base, ok := baseSlice[1].(*structs.NumericExpr); ok {
				baseExprConverted = base
			} else {
				return nil, fmt.Errorf("Failed to assert base as *structs.NumericExpr")
			}
		}
	}

	node := &structs.NumericExpr{
		IsTerminal:      false,
		Op:              "tonumber",
		Left:            nil,
		Right:           baseExprConverted,
		Val:             stringExprConverted,
		NumericExprMode: structs.NEMNumericExpr,
	}
	return node, nil
}

func (p *parser) callonNumericEvalExpr39() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr39(stack["stringExpr"], stack["baseExpr"])
}

func (c *current) onNumericEvalExpr51(lenExpr, expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericEvalExpr51() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr51(stack["lenExpr"], stack["expr"])
}

func (c *current) onNumericEvalExpr59(opName, expr, param any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)

	var rightNumericExpr *structs.NumericExpr
	if param == nil {
		return nil, fmt.Errorf("Function: %v 's param can not be nil", opNameStr)
	}
	rightNumericExpr, ok = param.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert param as *structs.NumericExpr")
	}

	node, err := createNumericExpr(opNameStr, leftNumericExpr, rightNumericExpr, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr59() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr59(stack["opName"], stack["expr"], stack["param"])
}

func (c *current) onNumericEvalExpr72(opName, expr, param any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)

	var rightNumericExpr *structs.NumericExpr
	if param != nil {
		rightNumericExpr, ok = param.(*structs.NumericExpr)
		if !ok {
			return nil, fmt.Errorf("Failed to assert param as *structs.NumericExpr")
		}
	}

	node, err := createNumericExpr(opNameStr, leftNumericExpr, rightNumericExpr, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr72() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr72(stack["opName"], stack["expr"], stack["param"])
}

func (c *current) onNumericEvalExpr83(opName, expr, param any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)

	var rightNumericExpr *structs.NumericExpr
	if param != nil {
		rightNumericExpr, ok = param.(*structs.NumericExpr)
		if !ok {
			return nil, fmt.Errorf("Failed to assert param as *structs.NumericExpr")
		}
	}

	node, err := createNumericExpr(opNameStr, leftNumericExpr, rightNumericExpr, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr83() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr83(stack["opName"], stack["expr"], stack["param"])
}

func (c *current) onLenExpr2(str any) (any, error) {

	leftNumericExpr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    false,
		Value:           str.(string),
		NumericExprMode: structs.NEMLenString,
	}

	node, err := createNumericExpr("len", leftNumericExpr, nil, structs.NEMLenString)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonLenExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLenExpr2(stack["str"])
}

func (c *current) onLenExpr8(field any) (any, error) {

	leftNumericExpr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    true,
		Value:           field.(string),
		NumericExprMode: structs.NEMLenField,
	}

	node, err := createNumericExpr("len", leftNumericExpr, nil, structs.NEMLenField)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonLenExpr8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLenExpr8(stack["field"])
}

func (c *current) onHeadBlock2(intAsStr any) (any, error) {
	limit, err := strconv.ParseUint(intAsStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid limit (%v): %v", intAsStr.(string), err)
	}

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			MaxRows: limit,
		},
	}

	return queryAgg, nil
}

func (p *parser) callonHeadBlock2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadBlock2(stack["intAsStr"])
}

func (c *current) onHeadBlock12() (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			MaxRows: uint64(10), // From https://docs.splunk.com/Documentation/Splunk/9.1.0/SearchReference/Head
		},
	}

	return queryAgg, nil
}

func (p *parser) callonHeadBlock12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadBlock12()
}

func (c *current) onAggregationList1(first, rest any) (any, error) {
	// Convert `rest` to a slice. Each element of the slice will be a 2-element
	// slice where the first element is ", " and the second is an Aggregator.
	restSlice := rest.([]any)

	numAggs := 1 + len(restSlice)
	aggsSlice := make([]*aggregator, numAggs)
	aggsSlice[0] = first.(*aggregator)

	for i := 1; i < numAggs; i++ {
		separatorAndAgg := restSlice[i-1].([]any)
		aggsSlice[i] = separatorAndAgg[1].(*aggregator)
	}

	return aggsSlice, nil
}

func (p *parser) callonAggregationList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregationList1(stack["first"], stack["rest"])
}

func (c *current) onAggregator1(aggFunc, asField any) (any, error) {
	agg := &aggregator{}
	agg.measureAgg = aggFunc.(*structs.MeasureAggregator)

	if asField != nil {
		agg.renameOutputField = true
		agg.outputFieldNewName = asField.(string)
	}

	return agg, nil
}

func (p *parser) callonAggregator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregator1(stack["aggFunc"], stack["asField"])
}

func (c *current) onAggFunction1(agg any) (any, error) {
	return agg, nil
}

func (p *parser) callonAggFunction1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggFunction1(stack["agg"])
}

func (c *current) onAsField1(field any) (any, error) {
	fieldStr := field.(string)

	if strings.Contains(fieldStr, "*") {
		return nil, errors.New("The field specified in `AS` cannot contain wildcards")
	}

	if fieldStr[0] == '"' && fieldStr[len(fieldStr)-1] == '"' {
		fieldStr = fieldStr[1 : len(fieldStr)-1]
	}

	return fieldStr, nil
}

func (p *parser) callonAsField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsField1(stack["field"])
}

func (c *current) onAggCount2(boolExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Count,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggCount2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggCount2(stack["boolExpr"])
}

func (c *current) onAggCount12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Count,
	}

	return agg, nil
}

func (p *parser) callonAggCount12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggCount12(stack["field"])
}

func (c *current) onAggCount21() (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  "*",
		MeasureFunc: utils.Count,
	}

	return agg, nil
}

func (p *parser) callonAggCount21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggCount21()
}

func (c *current) onAggDistinctCount2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Cardinality,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggDistinctCount2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggDistinctCount2(stack["valueExpr"])
}

func (c *current) onAggDistinctCount12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Cardinality,
	}

	return agg, nil
}

func (p *parser) callonAggDistinctCount12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggDistinctCount12(stack["field"])
}

func (c *current) onAggAvg2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Avg,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggAvg2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAvg2(stack["boolComparisonExpr"])
}

func (c *current) onAggAvg12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Avg,
	}

	return agg, nil
}

func (p *parser) callonAggAvg12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAvg12(stack["field"])
}

func (c *current) onAggMin2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Min,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggMin2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMin2(stack["boolComparisonExpr"])
}

func (c *current) onAggMin12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Min,
	}

	return agg, nil
}

func (p *parser) callonAggMin12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMin12(stack["field"])
}

func (c *current) onAggMax2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Max,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggMax2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMax2(stack["boolComparisonExpr"])
}

func (c *current) onAggMax12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Max,
	}

	return agg, nil
}

func (p *parser) callonAggMax12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMax12(stack["field"])
}

func (c *current) onAggRange2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Range,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggRange2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRange2(stack["boolComparisonExpr"])
}

func (c *current) onAggRange12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Range,
	}

	return agg, nil
}

func (p *parser) callonAggRange12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRange12(stack["field"])
}

func (c *current) onAggSum2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Sum,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggSum2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSum2(stack["boolComparisonExpr"])
}

func (c *current) onAggSum12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Sum,
	}

	return agg, nil
}

func (p *parser) callonAggSum12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSum12(stack["field"])
}

func (c *current) onAggEstdc2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Estdc,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggEstdc2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEstdc2(stack["boolComparisonExpr"])
}

func (c *current) onAggEstdc12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Estdc,
	}

	return agg, nil
}

func (p *parser) callonAggEstdc12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEstdc12(stack["field"])
}

func (c *current) onAggEstdcError2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.EstdcError,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggEstdcError2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEstdcError2(stack["boolComparisonExpr"])
}

func (c *current) onAggEstdcError12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.EstdcError,
	}

	return agg, nil
}

func (p *parser) callonAggEstdcError12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEstdcError12(stack["field"])
}

func (c *current) onAggExactPerc2(numStr, boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.ExactPerc,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
		Param:           numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggExactPerc2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggExactPerc2(stack["numStr"], stack["boolComparisonExpr"])
}

func (c *current) onAggExactPerc16(numStr, field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.ExactPerc,
		Param:       numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggExactPerc16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggExactPerc16(stack["numStr"], stack["field"])
}

func (c *current) onAggPerc2(numStr, boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Perc,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
		Param:           numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggPerc2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggPerc2(stack["numStr"], stack["boolComparisonExpr"])
}

func (c *current) onAggPerc16(numStr, field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Perc,
		Param:       numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggPerc16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggPerc16(stack["numStr"], stack["field"])
}

func (c *current) onAggUpperPerc2(numStr, boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.UpperPerc,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
		Param:           numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggUpperPerc2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggUpperPerc2(stack["numStr"], stack["boolComparisonExpr"])
}

func (c *current) onAggUpperPerc16(numStr, field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.UpperPerc,
		Param:       numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggUpperPerc16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggUpperPerc16(stack["numStr"], stack["field"])
}

func (c *current) onAggMedian2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Median,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggMedian2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMedian2(stack["boolComparisonExpr"])
}

func (c *current) onAggMedian12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Median,
	}

	return agg, nil
}

func (p *parser) callonAggMedian12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMedian12(stack["field"])
}

func (c *current) onAggMode2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Mode,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggMode2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMode2(stack["boolComparisonExpr"])
}

func (c *current) onAggMode12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Mode,
	}

	return agg, nil
}

func (p *parser) callonAggMode12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMode12(stack["field"])
}

func (c *current) onAggStdev2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Stdev,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggStdev2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggStdev2(stack["boolComparisonExpr"])
}

func (c *current) onAggStdev12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Stdev,
	}

	return agg, nil
}

func (p *parser) callonAggStdev12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggStdev12(stack["field"])
}

func (c *current) onAggStdevp2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Stdevp,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggStdevp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggStdevp2(stack["boolComparisonExpr"])
}

func (c *current) onAggStdevp12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Stdevp,
	}

	return agg, nil
}

func (p *parser) callonAggStdevp12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggStdevp12(stack["field"])
}

func (c *current) onAggSumsq2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Sumsq,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggSumsq2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSumsq2(stack["boolComparisonExpr"])
}

func (c *current) onAggSumsq12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Sumsq,
	}

	return agg, nil
}

func (p *parser) callonAggSumsq12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSumsq12(stack["field"])
}

func (c *current) onAggVar2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Var,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggVar2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggVar2(stack["boolComparisonExpr"])
}

func (c *current) onAggVar12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Var,
	}

	return agg, nil
}

func (p *parser) callonAggVar12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggVar12(stack["field"])
}

func (c *current) onAggVarp2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Varp,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggVarp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggVarp2(stack["boolComparisonExpr"])
}

func (c *current) onAggVarp12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Varp,
	}

	return agg, nil
}

func (p *parser) callonAggVarp12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggVarp12(stack["field"])
}

func (c *current) onAggFirst2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.First,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggFirst2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggFirst2(stack["boolComparisonExpr"])
}

func (c *current) onAggFirst12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.First,
	}

	return agg, nil
}

func (p *parser) callonAggFirst12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggFirst12(stack["field"])
}

func (c *current) onAggLast2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Last,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggLast2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLast2(stack["boolComparisonExpr"])
}

func (c *current) onAggLast12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Last,
	}

	return agg, nil
}

func (p *parser) callonAggLast12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLast12(stack["field"])
}

func (c *current) onAggList2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.List,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggList2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggList2(stack["valueExpr"])
}

func (c *current) onAggList10(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.List,
	}

	return agg, nil
}

func (p *parser) callonAggList10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggList10(stack["field"])
}

func (c *current) onAggEarliest2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Earliest,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggEarliest2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEarliest2(stack["boolComparisonExpr"])
}

func (c *current) onAggEarliest12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Earliest,
	}

	return agg, nil
}

func (p *parser) callonAggEarliest12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEarliest12(stack["field"])
}

func (c *current) onAggEarliestTime2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.EarliestTime,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggEarliestTime2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEarliestTime2(stack["boolComparisonExpr"])
}

func (c *current) onAggEarliestTime12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.EarliestTime,
	}

	return agg, nil
}

func (p *parser) callonAggEarliestTime12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEarliestTime12(stack["field"])
}

func (c *current) onAggLatest2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Latest,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggLatest2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLatest2(stack["boolComparisonExpr"])
}

func (c *current) onAggLatest12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Latest,
	}

	return agg, nil
}

func (p *parser) callonAggLatest12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLatest12(stack["field"])
}

func (c *current) onAggLatestTime2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.LatestTime,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggLatestTime2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLatestTime2(stack["boolComparisonExpr"])
}

func (c *current) onAggLatestTime12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.LatestTime,
	}

	return agg, nil
}

func (p *parser) callonAggLatestTime12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLatestTime12(stack["field"])
}

func (c *current) onAggRate2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.StatsRate,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggRate2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRate2(stack["boolComparisonExpr"])
}

func (c *current) onAggRate12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.StatsRate,
	}

	return agg, nil
}

func (p *parser) callonAggRate12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRate12(stack["field"])
}

func (c *current) onAggValues2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Values,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggValues2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggValues2(stack["valueExpr"])
}

func (c *current) onAggValues10(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Values,
	}

	return agg, nil
}

func (p *parser) callonAggValues10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggValues10(stack["field"])
}

func (c *current) onFieldWithNumberValue1(keyValuePair any) (any, error) {
	return keyValuePair, nil
}

func (p *parser) callonFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithNumberValue1(stack["keyValuePair"])
}

func (c *current) onNamedFieldWithNumberValue1(key, op, value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     op.(string),
			Field:  key.(string),
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonNamedFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedFieldWithNumberValue1(stack["key"], stack["op"], stack["value"])
}

func (c *current) onUnnamedFieldWithNumberValue1(value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     "=",
			Field:  "*",
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonUnnamedFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnnamedFieldWithNumberValue1(stack["value"])
}

func (c *current) onFieldWithBooleanValue1(key, op, value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     op.(string),
			Field:  key.(string),
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonFieldWithBooleanValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithBooleanValue1(stack["key"], stack["op"], stack["value"])
}

func (c *current) onFieldWithStringValue1(keyValuePair any) (any, error) {
	return keyValuePair, nil
}

func (p *parser) callonFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithStringValue1(stack["keyValuePair"])
}

func (c *current) onNamedFieldWithStringValue1(key, op, value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     op.(string),
			Field:  key.(string),
			Values: value,
		},
	}
	return node, nil
}

func (p *parser) callonNamedFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedFieldWithStringValue1(stack["key"], stack["op"], stack["value"])
}

func (c *current) onUnnamedFieldWithStringValue1(value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     "=",
			Field:  "*",
			Values: value,
		},
	}
	return node, nil
}

func (p *parser) callonUnnamedFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnnamedFieldWithStringValue1(stack["value"])
}

func (c *current) onFieldNameList1(first, rest any) (any, error) {
	// Convert `rest` to a slice. Each element of the slice will be a 2-element
	// slice where the first element is ", " and the second is a FieldName.
	restSlice := rest.([]any)

	numFieldNames := 1 + len(restSlice)
	fields := make([]string, numFieldNames)
	fields[0] = first.(string)

	for i := 1; i < numFieldNames; i++ {
		separatorAndField := restSlice[i-1].([]any)
		fields[i] = separatorAndField[1].(string)
	}

	return fields, nil
}

func (p *parser) callonFieldNameList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldNameList1(stack["first"], stack["rest"])
}

func (c *current) onFieldName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFieldName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldName1()
}

func (c *current) onFieldNameStartWith_1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFieldNameStartWith_1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldNameStartWith_1()
}

func (c *current) onString1(str any) (any, error) {
	return str, nil
}

func (p *parser) callonString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onString1(stack["str"])
}

func (c *current) onQuotedString1() (any, error) {
	// The returned string has quotes as the first and last character.
	return string(c.text), nil
}

func (p *parser) callonQuotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString1()
}

func (c *current) onUnquotedString1() (any, error) {
	// Return the string wrapped in quotes.
	str := "\"" + string(c.text) + "\""
	return str, nil
}

func (p *parser) callonUnquotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedString1()
}

func (c *current) onUnquotedStringWithTemplateWildCard1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUnquotedStringWithTemplateWildCard1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedStringWithTemplateWildCard1()
}

func (c *current) onBoolean1() (any, error) {
	boolValue, _ := strconv.ParseBool(string(c.text))
	return boolValue, nil
}

func (p *parser) callonBoolean1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolean1()
}

func (c *current) onRenamePattern1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonRenamePattern1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenamePattern1()
}

func (c *current) onNumber1(number any) (any, error) {
	return json.Number(number.(string)), nil
}

func (p *parser) callonNumber1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1(stack["number"])
}

func (c *current) onNumberAsString1(number any) (any, error) {
	return number, nil
}

func (p *parser) callonNumberAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumberAsString1(stack["number"])
}

func (c *current) onFloatAsString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatAsString1()
}

func (c *current) onIntegerAsString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIntegerAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerAsString1()
}

func (c *current) onEqualityOperator1(op any) (any, error) {
	opStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: EqualityOperator: %v", err)
	}
	return opStr, nil
}

func (p *parser) callonEqualityOperator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator1(stack["op"])
}

func (c *current) onInequalityOperator1(op any) (any, error) {
	opStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: InequalityOperator: %v", err)
	}
	return opStr, nil
}

func (p *parser) callonInequalityOperator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInequalityOperator1(stack["op"])
}

func (c *current) onEqualityOrInequality2(op any) (any, error) {
	return op, nil
}

func (p *parser) callonEqualityOrInequality2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOrInequality2(stack["op"])
}

func (c *current) onEqualityOrInequality5(op any) (any, error) {
	return op, nil
}

func (p *parser) callonEqualityOrInequality5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOrInequality5(stack["op"])
}

func (c *current) onOpPlus1() (any, error) {
	return "+", nil
}

func (p *parser) callonOpPlus1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpPlus1()
}

func (c *current) onOpMinus1() (any, error) {
	return "-", nil
}

func (p *parser) callonOpMinus1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpMinus1()
}

func (c *current) onOpMul1() (any, error) {
	return "*", nil
}

func (p *parser) callonOpMul1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpMul1()
}

func (c *current) onOpDiv1() (any, error) {
	return "/", nil
}

func (p *parser) callonOpDiv1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpDiv1()
}

func (c *current) onSecond1() (any, error) {
	return utils.TMSecond, nil
}

func (p *parser) callonSecond1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSecond1()
}

func (c *current) onMinute1() (any, error) {
	return utils.TMMinute, nil
}

func (p *parser) callonMinute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinute1()
}

func (c *current) onHour1() (any, error) {
	return utils.TMHour, nil
}

func (p *parser) callonHour1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHour1()
}

func (c *current) onDay1() (any, error) {
	return utils.TMDay, nil
}

func (p *parser) callonDay1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDay1()
}

func (c *current) onWeek1() (any, error) {
	return utils.TMWeek, nil
}

func (p *parser) callonWeek1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeek1()
}

func (c *current) onMonth1() (any, error) {
	return utils.TMMonth, nil
}

func (p *parser) callonMonth1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMonth1()
}

func (c *current) onQuarter1() (any, error) {
	return utils.TMQuarter, nil
}

func (p *parser) callonQuarter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuarter1()
}

func (c *current) onSubseconds1() (any, error) {
	timeUnit, err := utils.ConvertSubseconds(string(c.text))
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Subseconds: %v", err)
	}
	return timeUnit, nil
}

func (p *parser) callonSubseconds1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubseconds1()
}

func (c *current) onTransactionBlock1(txnOptions any) (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType:      structs.TransactionType,
		TransactionArguments: txnOptions.(*structs.TransactionArguments),
	}
	return queryAgg, nil
}

func (p *parser) callonTransactionBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionBlock1(stack["txnOptions"])
}

func (c *current) onTransactionOptions1(txnOptions any) (any, error) {

	transactionRequest := &structs.TransactionArguments{}

	if txnOptions != nil {
		txnArgs := txnOptions.(*TxnArgs).arguments
		transactionRequest.Fields = txnArgs.Fields
		transactionRequest.StartsWith = txnArgs.StartsWith
		transactionRequest.EndsWith = txnArgs.EndsWith
	}

	return transactionRequest, nil
}

func (p *parser) callonTransactionOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionOptions1(stack["txnOptions"])
}

func (c *current) onTransactionDefinitionOptionsList1(first, rest any) (any, error) {

	restSlice := rest.([]any)
	txnArgs := &TxnArgs{
		argOption: "txn-definition",
		arguments: &structs.TransactionArguments{},
	}

	numArgs := 1 + len(restSlice)

	for i := 0; i < numArgs; i++ {
		var txnArg *TxnArgs
		if i == 0 {
			txnArg = first.(*TxnArgs)
		} else {
			separatorAndArg := restSlice[i-1].([]any)
			txnArg = separatorAndArg[1].(*TxnArgs)
		}
		argOption := txnArg.argOption

		switch argOption {
		case "fields":
			txnArgs.arguments.Fields = txnArg.arguments.Fields
		case "startswith":
			txnArgs.arguments.StartsWith = txnArg.arguments.StartsWith
		case "endswith":
			txnArgs.arguments.EndsWith = txnArg.arguments.EndsWith
		default:
			return nil, fmt.Errorf("Not a Valid Transaction Argument option")
		}
	}

	return txnArgs, nil
}

func (p *parser) callonTransactionDefinitionOptionsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionDefinitionOptionsList1(stack["first"], stack["rest"])
}

func (c *current) onTransactionDefinitionOption1(option any) (any, error) {
	return option, nil
}

func (p *parser) callonTransactionDefinitionOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionDefinitionOption1(stack["option"])
}

func (c *current) onSpaceSeparatedFieldNameList1(first, rest any) (any, error) {
	var fields []string
	fields = append(fields, first.(string))
	for _, r := range rest.([]any) {
		// Extracting the field name from the tuple (SPACE, FieldName)
		fields = append(fields, r.([]any)[1].(string))
	}

	txnArg := &TxnArgs{
		argOption: "fields",
		arguments: &structs.TransactionArguments{
			Fields: fields,
		},
	}

	return txnArg, nil
}

func (p *parser) callonSpaceSeparatedFieldNameList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpaceSeparatedFieldNameList1(stack["first"], stack["rest"])
}

func (c *current) onStartsWithOption1(strExpr any) (any, error) {
	txnArg := &TxnArgs{
		argOption: "startswith",
		arguments: &structs.TransactionArguments{
			StartsWith: strExpr.(*structs.FilterStringExpr),
		},
	}
	return txnArg, nil
}

func (p *parser) callonStartsWithOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStartsWithOption1(stack["strExpr"])
}

func (c *current) onEndsWithOption1(strExpr any) (any, error) {
	txnArg := &TxnArgs{
		argOption: "endswith",
		arguments: &structs.TransactionArguments{
			EndsWith: strExpr.(*structs.FilterStringExpr),
		},
	}
	return txnArg, nil
}

func (p *parser) callonEndsWithOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEndsWithOption1(stack["strExpr"])
}

func (c *current) onTransactionFilterString1(strExpr any) (any, error) {
	return strExpr, nil
}

func (p *parser) callonTransactionFilterString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionFilterString1(stack["strExpr"])
}

func (c *current) onTransactionQuotedString1(str any) (any, error) {
	return str, nil
}

func (p *parser) callonTransactionQuotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionQuotedString1(stack["str"])
}

func (c *current) onTransactionQuotedStringSearchExpr1(searchClause any) (any, error) {
	filterStrExpr := &structs.FilterStringExpr{
		SearchNode: searchClause.(*ast.Node),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionQuotedStringSearchExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionQuotedStringSearchExpr1(stack["searchClause"])
}

func (c *current) onQuotedStringNoOp1() (any, error) {
	// The returned string has quotes as the first and last character.
	return string(c.text), nil
}

func (p *parser) callonQuotedStringNoOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedStringNoOp1()
}

func (c *current) onTransactionQuotedStringValue1(str any) (any, error) {
	filterStrExpr := &structs.FilterStringExpr{
		StringValue: removeQuotes(str.(string)),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionQuotedStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionQuotedStringValue1(stack["str"])
}

func (c *current) onTransactionSearch1(expr any) (any, error) {

	filterStrExpr := &structs.FilterStringExpr{
		SearchNode: expr.(*ast.Node),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionSearch1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionSearch1(stack["expr"])
}

func (c *current) onTransactionEval1(condition any) (any, error) {
	filterStrExpr := &structs.FilterStringExpr{
		EvalBoolExpr: condition.(*structs.BoolExpr),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionEval1(stack["condition"])
}

func (c *current) onMultiValueBlock1(mvQueryAggNode any) (any, error) {
	return mvQueryAggNode, nil
}

func (p *parser) callonMultiValueBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiValueBlock1(stack["mvQueryAggNode"])
}

func (c *current) onMakeMVBlock1(mvColOptionExpr, field any) (any, error) {
	var mvColExpr *structs.MultiValueColLetRequest

	if mvColOptionExpr != nil {
		mvColExpr = mvColOptionExpr.(*structs.MultiValueColLetRequest)
	} else {
		mvColExpr = &structs.MultiValueColLetRequest{}
	}

	mvColExpr.ColName = field.(string)

	if mvColExpr.DelimiterString == "" {
		mvColExpr.DelimiterString = " " // default single space
	}

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: &structs.LetColumnsRequest{
				MultiValueColRequest: mvColExpr,
			},
		},
	}

	return queryAgg, nil
}

func (p *parser) callonMakeMVBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMakeMVBlock1(stack["mvColOptionExpr"], stack["field"])
}

func (c *current) onMVBlockOptionsList1(first, rest any) (any, error) {
	restSlice := rest.([]any)

	numOptions := 1 + len(restSlice)

	mvColExpr := &structs.MultiValueColLetRequest{}

	for i := 0; i < numOptions; i++ {
		var currMvColExpr *MultiValueColOptionArgs
		if i == 0 {
			currMvColExpr = first.(*MultiValueColOptionArgs)
		} else {
			separator := restSlice[i-1].([]any)
			currMvColExpr = separator[1].(*MultiValueColOptionArgs)
		}

		argOption := currMvColExpr.argOption

		switch argOption {
		case "delimiter":
			mvColExpr.DelimiterString = currMvColExpr.mvColExpr.DelimiterString
			mvColExpr.IsRegex = currMvColExpr.mvColExpr.IsRegex
		case "allowempty":
			mvColExpr.AllowEmpty = currMvColExpr.mvColExpr.AllowEmpty
		case "setsv":
			mvColExpr.Setsv = currMvColExpr.mvColExpr.Setsv
		default:
			return nil, fmt.Errorf("Not a Valid MVBlockOption: %v", argOption)
		}
	}

	return mvColExpr, nil
}

func (p *parser) callonMVBlockOptionsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMVBlockOptionsList1(stack["first"], stack["rest"])
}

func (c *current) onMVBlockOption1(option any) (any, error) {
	return option, nil
}

func (p *parser) callonMVBlockOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMVBlockOption1(stack["option"])
}

func (c *current) onDelimOption1(delimExpr any) (any, error) {
	return delimExpr, nil
}

func (p *parser) callonDelimOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimOption1(stack["delimExpr"])
}

func (c *current) onStringDelimiter1(str any) (any, error) {
	mvColOptionArgs := &MultiValueColOptionArgs{
		argOption: "delimiter",
		mvColExpr: &structs.MultiValueColLetRequest{
			DelimiterString: removeQuotes(str),
		},
	}

	return mvColOptionArgs, nil
}

func (p *parser) callonStringDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringDelimiter1(stack["str"])
}

func (c *current) onRegexDelimiter1(str any) (any, error) {
	pattern := removeQuotes(str)
	_, err := regexp.Compile(pattern)
	if err != nil {
		return nil, fmt.Errorf("Error parsing tokenizer regular expression: %v. Error: %v", pattern, err)
	}

	mvColOptionArgs := &MultiValueColOptionArgs{
		argOption: "delimiter",
		mvColExpr: &structs.MultiValueColLetRequest{
			DelimiterString: pattern,
			IsRegex:         true,
		},
	}

	return mvColOptionArgs, nil
}

func (p *parser) callonRegexDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexDelimiter1(stack["str"])
}

func (c *current) onAllowEmptyOption1(boolVal any) (any, error) {

	mvColOptionArgs := &MultiValueColOptionArgs{
		argOption: "allowempty",
		mvColExpr: &structs.MultiValueColLetRequest{
			AllowEmpty: boolVal.(bool),
		},
	}

	return mvColOptionArgs, nil
}

func (p *parser) callonAllowEmptyOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAllowEmptyOption1(stack["boolVal"])
}

func (c *current) onSetSvOption1(boolVal any) (any, error) {
	mvColOptionArgs := &MultiValueColOptionArgs{
		argOption: "setsv",
		mvColExpr: &structs.MultiValueColLetRequest{
			Setsv: boolVal.(bool),
		},
	}

	return mvColOptionArgs, nil
}

func (p *parser) callonSetSvOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSetSvOption1(stack["boolVal"])
}

func (c *current) onSPathBlock1(spathExpr any) (any, error) {
	if spathExpr == nil {
		return createSPathExpr("", "", "")
	}
	return spathExpr, nil
}

func (p *parser) callonSPathBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSPathBlock1(stack["spathExpr"])
}

func (c *current) onSPathArgumentsList1(first, rest any) (any, error) {

	restSlice := rest.([]any)

	inputField, pathField, outputField := "", "", ""

	numArgs := 1 + len(restSlice)

	for i := 0; i < numArgs; i++ {
		var arg string
		if i == 0 {
			arg = first.(string)
		} else {
			separator := restSlice[i-1].([]any)
			arg = separator[1].(string)
		}

		switch {
		case strings.HasPrefix(arg, "input="):
			inputField = strings.TrimPrefix(arg, "input=")
		case strings.HasPrefix(arg, "output="):
			outputField = strings.TrimPrefix(arg, "output=")
		case strings.HasPrefix(arg, "path="):
			pathField = strings.TrimPrefix(arg, "path=")
		default:
			return nil, fmt.Errorf("SPathArguments: Invalid Spath Argument: %v", arg)
		}
	}

	return createSPathExpr(inputField, pathField, outputField)
}

func (p *parser) callonSPathArgumentsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSPathArgumentsList1(stack["first"], stack["rest"])
}

func (c *current) onSPathArgument1(arg any) (any, error) {
	return arg, nil
}

func (p *parser) callonSPathArgument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSPathArgument1(stack["arg"])
}

func (c *current) onInputField1(field any) (any, error) {
	return "input=" + field.(string), nil
}

func (p *parser) callonInputField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInputField1(stack["field"])
}

func (c *current) onOutputField1(field any) (any, error) {
	return "output=" + field.(string), nil
}

func (p *parser) callonOutputField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOutputField1(stack["field"])
}

func (c *current) onPathField1() (any, error) {
	pathField := string(c.text)
	if strings.HasPrefix(pathField, "path") {
		pathField = strings.TrimSpace(strings.TrimPrefix(pathField, "path="))
		pathField = strings.TrimSpace(strings.TrimPrefix(pathField, "path ="))
		if pathField != "" && pathField[0] == '"' {
			pathField = removeQuotes(pathField)
		}
	}
	return "path=" + pathField, nil
}

func (p *parser) callonPathField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPathField1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize {
		val, ok = p.parseRuleMemoize(rule)
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
