// Code generated by pigeon; DO NOT EDIT.

// Copyright (c) 2021-2024 SigScalr, Inc.
//
// This file is part of SigLens Observability Solution
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

package spl

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"
	"unicode"
	"unicode/utf8"

	"github.com/siglens/siglens/pkg/ast"
	"github.com/siglens/siglens/pkg/segment/aggregations"
	"github.com/siglens/siglens/pkg/segment/query"
	"github.com/siglens/siglens/pkg/segment/structs"
	"github.com/siglens/siglens/pkg/segment/utils"
	log "github.com/sirupsen/logrus"
)

// ConvertCustomDateTimeFormatToEpochMs converts a date string in the format "MM/DD/YYYY:HH:MM:SS"
// to Unix time in milliseconds (epoch ms).
func ConvertCustomDateTimeFormatToEpochMs(dateStr string) (int64, error) {
	loc, _ := time.LoadLocation("Local")
	t, err := time.ParseInLocation("01/02/2006:15:04:05", dateStr, loc)
	if err != nil {
		return 0, err
	}
	return t.UnixMilli(), nil
}

// This function would snap backwards based on unit present.
// For e.x. Consider the time (Wednesday) 06/05/2024:13:37:05.123 (mm/dd/yyyy:hh:mm:ss)
// Snapping on Second would be 06/05/2024:13:37:05.000
// Snapping on Minute would be 06/05/2024:13:37:00.000
// Snapping on Hour would be 06/05/2024:13:00:00.000
// Snapping on Day would be 06/05/2024:00:00:00.000
// Snapping on Month would be 06/05/2024:00:00:00.000
// Snapping on Quarter (would snap to recent most quarter out of Jan 1, Apr 1, Jul 1, Oct 1) would be 04/01/2024:00:00:00.000
// Snapping on Year would be 01/01/2024:00:00:00.000
// Snapping on weekdays (w0 to w7) would snap backward to that weekday.
// Snapping on w0 would be (Sunday) 06/02/2024:00:00:00.000
// Snapping on w1 would be (Monday) 06/03/2024:00:00:00.000 and so on.
// Snap on w0 and w7 is same.
// snap parameter would be a string of the form w0 or it would be utils.TimeUnit constant integers converted to string type (see Rule: RelTimeUnit)
func applySnap(snap string, t time.Time) (time.Time, error) {
	sec := t.Second()
	min := t.Minute()
	hour := t.Hour()
	day := t.Day()
	week := t.Weekday()
	mon := t.Month()
	year := t.Year()

	if snap[0] != 'w' {
		tunit, err := strconv.Atoi(snap)
		if err != nil {
			return t, fmt.Errorf("Error while converting the snap: %v to integer, err: %v", snap, err)
		}

		switch utils.TimeUnit(tunit) {
		case utils.TMSecond:
			return time.Date(year, mon, day, hour, min, sec, 0, time.Local), nil
		case utils.TMMinute:
			return time.Date(year, mon, day, hour, min, 0, 0, time.Local), nil
		case utils.TMHour:
			return time.Date(year, mon, day, hour, 0, 0, 0, time.Local), nil
		case utils.TMDay:
			return time.Date(year, mon, day, 0, 0, 0, 0, time.Local), nil
		case utils.TMWeek:
			diff := week - time.Sunday
			return time.Date(year, mon, day-int(diff), 0, 0, 0, 0, time.Local), nil
		case utils.TMMonth:
			return time.Date(year, mon, 1, 0, 0, 0, 0, time.Local), nil
		case utils.TMQuarter:
			if mon >= time.October {
				mon = time.October
			} else if mon >= time.July {
				mon = time.July
			} else if mon >= time.April {
				mon = time.April
			} else {
				mon = time.January
			}
			return time.Date(year, mon, 1, 0, 0, 0, 0, time.Local), nil
		case utils.TMYear:
			return time.Date(year, 1, 1, 0, 0, 0, 0, time.Local), nil
		default:
			return t, fmt.Errorf("Unsupported time unit for relative timestamp: %v", tunit)
		}
	} else {
		if len(snap) != 2 {
			return t, fmt.Errorf("Error for special week snap, should follow the regex w[0-7] got: %v", snap)
		}
		weeknum := int(snap[1] - '0')
		if weeknum == 7 {
			weeknum = 0
		}
		diff := int(week) - weeknum
		if diff < 0 {
			diff += 7
		}
		return time.Date(year, mon, day, 0, 0, 0, 0, time.Local).AddDate(0, 0, -diff), nil
	}
}

func applyOffset(num int64, unit utils.TimeUnit, t time.Time) (time.Time, error) {

	durNum := time.Duration(num)

	switch unit {
	case utils.TMSecond:
		return t.Add(durNum * time.Second), nil
	case utils.TMMinute:
		return t.Add(durNum * time.Minute), nil
	case utils.TMHour:
		return t.Add(durNum * time.Hour), nil
	case utils.TMDay:
		return t.AddDate(0, 0, int(num)), nil
	case utils.TMWeek:
		return t.AddDate(0, 0, 7*int(num)), nil
	case utils.TMMonth:
		return t.AddDate(0, int(num), 0), nil
	case utils.TMQuarter:
		return t.AddDate(0, 4*int(num), 0), nil
	case utils.TMYear:
		return t.AddDate(int(num), 0, 0), nil
	default:
		return t, fmt.Errorf("Unsupported time unit for relative timestamp: %v", unit)
	}
}

func CalculateRelativeTime(timeModifier ast.TimeModifier, currTime time.Time) (int64, error) {
	var epoch int64 = 0
	var err error
	if timeModifier.AbsoluteTime == "now" {
		epoch = currTime.UnixMilli()
	} else if timeModifier.AbsoluteTime == "1" {
		return 1, nil
	} else if timeModifier.AbsoluteTime != "" {
		epoch, err = ConvertCustomDateTimeFormatToEpochMs(timeModifier.AbsoluteTime)
		if err != nil {
			return 0, err
		}
	} else {
		offsetNum := timeModifier.RelativeTime.RelativeTimeOffset.Offset
		offsetTimeUnit := timeModifier.RelativeTime.RelativeTimeOffset.TimeUnit
		snap := timeModifier.RelativeTime.Snap
		finalTime := currTime
		if offsetNum != 0 {
			finalTime, err = applyOffset(offsetNum, offsetTimeUnit, finalTime)
			if err != nil {
				return 0, err
			}
		}
		if snap != "" {
			finalTime, err = applySnap(snap, finalTime)
			if err != nil {
				return 0, err
			}
		}
		epoch = finalTime.UnixMilli()
	}

	return epoch, nil
}

func getParseError(err error) error {
	switch ev := err.(type) {
	case errList:
		if pe, ok := ev[0].(*parserError); ok {
			return &ast.ParseError{
				Inner:    pe.Inner,
				Line:     pe.pos.line,
				Column:   pe.pos.col,
				Offset:   pe.pos.offset,
				Prefix:   pe.prefix,
				Expected: pe.expected,
			}
		}
	}
	return err
}

// Remove the first and last character of the string
func removeQuotes(s any) string {
	str := s.(string)
	if len(str) < 3 {
		return ""
	}

	return str[1 : len(str)-1]
}

// Check if it rename fields with similar names using a wildcard
func isRegexRename(originalPattern, newPattern string) (bool, error) {
	oldWildcards := strings.Count(originalPattern, "*")
	newWildcards := strings.Count(newPattern, "*")

	if oldWildcards == 0 && newWildcards == 0 {
		return false, nil
	} else if oldWildcards > 0 && oldWildcards == newWildcards {
		return true, nil
	} else {
		return false, errors.New("Patterns do not match")
	}
}

func deMorgansLaw(node *ast.Node) {
	switch node.NodeType {
	case ast.NodeTerminal:
		switch node.Comparison.Op {
		case "=":
			node.Comparison.Op = "!="
		case "!=":
			node.Comparison.Op = "="
		case ">":
			node.Comparison.Op = "<="
		case "<":
			node.Comparison.Op = ">="
		case ">=":
			node.Comparison.Op = "<"
		case "<=":
			node.Comparison.Op = ">"
		default:
			log.Errorf("deMorgansLaw: unexpected node comparison op: %v", node.Comparison.Op)
		}
	case ast.NodeAnd:
		node.NodeType = ast.NodeOr
		deMorgansLaw(node.Left)
		deMorgansLaw(node.Right)
	case ast.NodeOr:
		node.NodeType = ast.NodeAnd
		deMorgansLaw(node.Left)
		deMorgansLaw(node.Right)
	default:
		log.Errorf("deMorgansLaw: unexpected NodeType: %v", node.NodeType)
	}
}

// Generate NumericExpr struct for eval functions
func createNumericExpr(op string, leftNumericExpr *structs.NumericExpr, rightNumericExpr *structs.NumericExpr, numericExprMode structs.NumericExprMode) (*structs.NumericExpr, error) {
	if leftNumericExpr == nil {
		return nil, fmt.Errorf("expr cannot be nil")
	}

	return &structs.NumericExpr{
		IsTerminal:      false,
		Op:              op,
		Left:            leftNumericExpr,
		Right:           rightNumericExpr,
		NumericExprMode: numericExprMode,
	}, nil
}

func transferUint8ToString(opName interface{}) (string, error) {
	strData, ok := opName.([]byte)
	if !ok {
		return "", fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)
	return opNameStr, nil
}

func transferPCREToRE2(pattern string) string {
	pattern = strings.Replace(pattern, "(?<", "(?P<", -1)
	return pattern
}

func getRexColNames(pattern string) ([]string, error) {
	re, err := regexp.Compile(`\?<(?P<GroupName>[a-zA-Z0-9_]+)>`)
	if err != nil {
		return nil, fmt.Errorf("getRexColNames: There are some errors in the pattern: %v", err)
	}
	matches := re.FindAllStringSubmatch(pattern, -1)

	var rexColNames []string
	for _, match := range matches {
		rexColNames = append(rexColNames, match[1])
	}

	return rexColNames, nil
}

func SearchMatchGetFields(searchStr string) ([]string, error) {

	kvPairs := strings.Fields(searchStr)
	if len(kvPairs) == 0 {
		return []string{}, fmt.Errorf("Spl peg: Invalid syntax for searchmatch")
	}
	fieldList := make([]string, 0)

	for _, kvPair := range kvPairs {
		parts := strings.Split(kvPair, "=")
		if len(parts) == 1 {
			if len(kvPairs) == 1 {
				fieldList = append(fieldList, "*")
				return fieldList, nil
			} else {
				return []string{}, fmt.Errorf("Spl peg: Invalid syntax for searchmatch")
			}
		}
		if len(parts) != 2 {
			return []string{}, fmt.Errorf("Spl peg: Invalid syntax for searchmatch")
		}
		// fieldname is empty
		if len(parts[0]) == 0 {
			return []string{}, fmt.Errorf("Spl peg: Invalid syntax for searchmatch")
		}

		fieldList = append(fieldList, parts[0])
	}

	return fieldList, nil
}

func initializeStatsOptions() *structs.StatsOptions {
	return &structs.StatsOptions{
		Delim:          " ",
		Partitions:     1,
		DedupSplitvals: false,
		Allnum:         false,
	}
}

func initializeStreamStatsOptions() *structs.StreamStatsOptions {
	return &structs.StreamStatsOptions{
		Current: true,
		Global:  true,
	}
}

func createSPathExpr(inputField, pathField, outputField string) (*structs.QueryAggregators, error) {

	if inputField == "" {
		inputField = "_raw"
	}

	spathExpr := &structs.SPathExpr{
		InputColName:  inputField,
		Path:          pathField,
		OutputColName: outputField,
	}
	return &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: &structs.LetColumnsRequest{
				ValueColRequest: &structs.ValueExpr{
					ValueExprMode: structs.VEMStringExpr,
					StringExpr: &structs.StringExpr{
						StringExprMode: structs.SEMTextExpr,
						TextExpr: &structs.TextExpr{
							IsTerminal: true,
							Op:         "spath",
							SPathExpr:  spathExpr,
						},
					},
				},
				NewColName: outputField,
			},
		},
	}, nil
}
func createEventCountExpr(indices []string, list_vix, report_size, summarize bool) (*structs.QueryAggregators, error) {
	eventCountExpr := &structs.EventCountExpr{
		Indices:    indices,
		ListVix:    list_vix,
		ReportSize: report_size,
		Summarize:  summarize,
	}
	return &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: &structs.LetColumnsRequest{
				EventCountRequest: eventCountExpr,
			},
		},
	}, nil
}
func getDefaultFormatResultsExpr() *structs.FormatResultsRequest {
	return &structs.FormatResultsRequest{
		MVSeparator: "OR",
		MaxResults:  0,
		EmptyString: "NOT()",
		RowColOptions: &structs.RowColOptions{
			RowPrefix:       "(",
			ColumnPrefix:    "(",
			ColumnSeparator: "AND",
			ColumnEnd:       ")",
			RowSeparator:    "OR",
			RowEnd:          ")",
		},
	}
}

type aggregator struct {
	measureAgg         *structs.MeasureAggregator
	renameOutputField  bool
	outputFieldNewName string
}

type singleAggTemp struct {
	aggregators   []*aggregator
	SplitByClause *structs.SplitByClause
}

type TxnArgs struct {
	argOption string
	arguments *structs.TransactionArguments
}

type TimechartArgs struct {
	singleAggExpr *singleAggTemp
	// TODO: Add eval clause expr.
	tcOptions *structs.TcOptions
}

type MultiValueColOptionArgs struct {
	argOption string
	mvColExpr *structs.MultiValueColLetRequest
}

type HeadOptionArgs struct {
	argOption string
	headExpr  *structs.HeadExpr
}

type BinOptionArgs struct {
	argOption  string
	binOptions *structs.BinCmdOptions
}

type StreamStatsOptionArgs struct {
	argOption          string
	streamStatsOptions *structs.StreamStatsOptions
}

type SPathFieldExpr struct {
	PathValue       string
	IsPathFieldName bool
}

type FormatResultsRequestArguments struct {
	argOption        string
	formatResultExpr *structs.FormatResultsRequest
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Start",
			pos:  position{line: 464, col: 1, offset: 14754},
			expr: &actionExpr{
				pos: position{line: 464, col: 10, offset: 14763},
				run: (*parser).callonStart1,
				expr: &seqExpr{
					pos: position{line: 464, col: 10, offset: 14763},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 464, col: 10, offset: 14763},
							expr: &ruleRefExpr{
								pos:  position{line: 464, col: 10, offset: 14763},
								name: "SPACE",
							},
						},
						&labeledExpr{
							pos:   position{line: 464, col: 17, offset: 14770},
							label: "initialSearch",
							expr: &ruleRefExpr{
								pos:  position{line: 464, col: 32, offset: 14785},
								name: "InitialSearchBlock",
							},
						},
						&labeledExpr{
							pos:   position{line: 464, col: 52, offset: 14805},
							label: "filterBlocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 464, col: 65, offset: 14818},
								expr: &ruleRefExpr{
									pos:  position{line: 464, col: 66, offset: 14819},
									name: "FilterBlock",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 464, col: 80, offset: 14833},
							label: "queryAggBlocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 464, col: 95, offset: 14848},
								expr: &ruleRefExpr{
									pos:  position{line: 464, col: 96, offset: 14849},
									name: "QueryAggergatorBlock",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 464, col: 119, offset: 14872},
							expr: &ruleRefExpr{
								pos:  position{line: 464, col: 119, offset: 14872},
								name: "SPACE",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 464, col: 126, offset: 14879},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "InitialSearchBlock",
			pos:  position{line: 535, col: 1, offset: 17080},
			expr: &actionExpr{
				pos: position{line: 535, col: 23, offset: 17102},
				run: (*parser).callonInitialSearchBlock1,
				expr: &seqExpr{
					pos: position{line: 535, col: 23, offset: 17102},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 535, col: 23, offset: 17102},
							expr: &ruleRefExpr{
								pos:  position{line: 535, col: 23, offset: 17102},
								name: "CMD_SEARCH",
							},
						},
						&labeledExpr{
							pos:   position{line: 535, col: 35, offset: 17114},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 535, col: 42, offset: 17121},
								name: "ClauseLevel4",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBlock",
			pos:  position{line: 539, col: 1, offset: 17162},
			expr: &actionExpr{
				pos: position{line: 539, col: 16, offset: 17177},
				run: (*parser).callonSearchBlock1,
				expr: &seqExpr{
					pos: position{line: 539, col: 16, offset: 17177},
					exprs: []any{
						&notExpr{
							pos: position{line: 539, col: 16, offset: 17177},
							expr: &ruleRefExpr{
								pos:  position{line: 539, col: 18, offset: 17179},
								name: "ALLCMD",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 539, col: 26, offset: 17187},
							expr: &ruleRefExpr{
								pos:  position{line: 539, col: 26, offset: 17187},
								name: "CMD_SEARCH",
							},
						},
						&labeledExpr{
							pos:   position{line: 539, col: 38, offset: 17199},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 539, col: 45, offset: 17206},
								name: "ClauseLevel4",
							},
						},
					},
				},
			},
		},
		{
			name: "FilterBlock",
			pos:  position{line: 543, col: 1, offset: 17247},
			expr: &actionExpr{
				pos: position{line: 543, col: 16, offset: 17262},
				run: (*parser).callonFilterBlock1,
				expr: &seqExpr{
					pos: position{line: 543, col: 16, offset: 17262},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 543, col: 16, offset: 17262},
							name: "PIPE",
						},
						&labeledExpr{
							pos:   position{line: 543, col: 21, offset: 17267},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 543, col: 28, offset: 17274},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 543, col: 28, offset: 17274},
										name: "SearchBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 543, col: 42, offset: 17288},
										name: "RegexBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 543, col: 55, offset: 17301},
										name: "TimeModifiers",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QueryAggergatorBlock",
			pos:  position{line: 548, col: 1, offset: 17380},
			expr: &actionExpr{
				pos: position{line: 548, col: 25, offset: 17404},
				run: (*parser).callonQueryAggergatorBlock1,
				expr: &labeledExpr{
					pos:   position{line: 548, col: 25, offset: 17404},
					label: "block",
					expr: &choiceExpr{
						pos: position{line: 548, col: 32, offset: 17411},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 548, col: 32, offset: 17411},
								name: "FieldSelectBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 548, col: 51, offset: 17430},
								name: "AggregatorBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 548, col: 69, offset: 17448},
								name: "EvalBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 548, col: 81, offset: 17460},
								name: "WhereBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 548, col: 94, offset: 17473},
								name: "HeadBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 548, col: 106, offset: 17485},
								name: "RexBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 548, col: 117, offset: 17496},
								name: "StatisticBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 548, col: 134, offset: 17513},
								name: "RenameBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 548, col: 148, offset: 17527},
								name: "TimechartBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 548, col: 165, offset: 17544},
								name: "TransactionBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 548, col: 184, offset: 17563},
								name: "DedupBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 548, col: 197, offset: 17576},
								name: "SortBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 548, col: 209, offset: 17588},
								name: "MultiValueBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 548, col: 227, offset: 17606},
								name: "SPathBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 548, col: 240, offset: 17619},
								name: "FormatBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 548, col: 254, offset: 17633},
								name: "EventCountBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 548, col: 272, offset: 17651},
								name: "TailBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 548, col: 284, offset: 17663},
								name: "BinBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 548, col: 295, offset: 17674},
								name: "StreamStatsBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldSelectBlock",
			pos:  position{line: 553, col: 1, offset: 17772},
			expr: &actionExpr{
				pos: position{line: 553, col: 21, offset: 17792},
				run: (*parser).callonFieldSelectBlock1,
				expr: &seqExpr{
					pos: position{line: 553, col: 21, offset: 17792},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 553, col: 21, offset: 17792},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 553, col: 26, offset: 17797},
							name: "CMD_FIELDS",
						},
						&labeledExpr{
							pos:   position{line: 553, col: 37, offset: 17808},
							label: "op",
							expr: &zeroOrOneExpr{
								pos: position{line: 553, col: 40, offset: 17811},
								expr: &choiceExpr{
									pos: position{line: 553, col: 41, offset: 17812},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 553, col: 41, offset: 17812},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
										&litMatcher{
											pos:        position{line: 553, col: 47, offset: 17818},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 553, col: 53, offset: 17824},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 553, col: 68, offset: 17839},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 553, col: 75, offset: 17846},
								name: "FieldNameList",
							},
						},
					},
				},
			},
		},
		{
			name: "CommonAggregatorBlock",
			pos:  position{line: 571, col: 1, offset: 18350},
			expr: &actionExpr{
				pos: position{line: 571, col: 26, offset: 18375},
				run: (*parser).callonCommonAggregatorBlock1,
				expr: &seqExpr{
					pos: position{line: 571, col: 26, offset: 18375},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 571, col: 26, offset: 18375},
							label: "aggs",
							expr: &ruleRefExpr{
								pos:  position{line: 571, col: 31, offset: 18380},
								name: "AggregationList",
							},
						},
						&labeledExpr{
							pos:   position{line: 571, col: 47, offset: 18396},
							label: "byFields",
							expr: &zeroOrOneExpr{
								pos: position{line: 571, col: 56, offset: 18405},
								expr: &ruleRefExpr{
									pos:  position{line: 571, col: 57, offset: 18406},
									name: "GroupbyBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggregatorBlock",
			pos:  position{line: 617, col: 1, offset: 19901},
			expr: &actionExpr{
				pos: position{line: 617, col: 20, offset: 19920},
				run: (*parser).callonAggregatorBlock1,
				expr: &seqExpr{
					pos: position{line: 617, col: 20, offset: 19920},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 617, col: 20, offset: 19920},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 617, col: 25, offset: 19925},
							name: "CMD_STATS",
						},
						&labeledExpr{
							pos:   position{line: 617, col: 35, offset: 19935},
							label: "aggs",
							expr: &ruleRefExpr{
								pos:  position{line: 617, col: 41, offset: 19941},
								name: "CommonAggregatorBlock",
							},
						},
						&labeledExpr{
							pos:   position{line: 617, col: 64, offset: 19964},
							label: "options",
							expr: &zeroOrOneExpr{
								pos: position{line: 617, col: 72, offset: 19972},
								expr: &ruleRefExpr{
									pos:  position{line: 617, col: 73, offset: 19973},
									name: "StatsOptions",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatsOptions",
			pos:  position{line: 631, col: 1, offset: 20306},
			expr: &actionExpr{
				pos: position{line: 631, col: 17, offset: 20322},
				run: (*parser).callonStatsOptions1,
				expr: &labeledExpr{
					pos:   position{line: 631, col: 17, offset: 20322},
					label: "option",
					expr: &zeroOrMoreExpr{
						pos: position{line: 631, col: 24, offset: 20329},
						expr: &ruleRefExpr{
							pos:  position{line: 631, col: 25, offset: 20330},
							name: "StatsOption",
						},
					},
				},
			},
		},
		{
			name: "StatsOption",
			pos:  position{line: 669, col: 1, offset: 21771},
			expr: &actionExpr{
				pos: position{line: 669, col: 16, offset: 21786},
				run: (*parser).callonStatsOption1,
				expr: &seqExpr{
					pos: position{line: 669, col: 16, offset: 21786},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 669, col: 16, offset: 21786},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 669, col: 22, offset: 21792},
							label: "optionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 669, col: 32, offset: 21802},
								name: "StatsOptionCMD",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 669, col: 47, offset: 21817},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 669, col: 53, offset: 21823},
							label: "str",
							expr: &choiceExpr{
								pos: position{line: 669, col: 58, offset: 21828},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 669, col: 58, offset: 21828},
										name: "IntegerAsString",
									},
									&ruleRefExpr{
										pos:  position{line: 669, col: 76, offset: 21846},
										name: "EvalFieldToRead",
									},
									&ruleRefExpr{
										pos:  position{line: 669, col: 94, offset: 21864},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatsOptionCMD",
			pos:  position{line: 674, col: 1, offset: 21969},
			expr: &actionExpr{
				pos: position{line: 674, col: 19, offset: 21987},
				run: (*parser).callonStatsOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 674, col: 19, offset: 21987},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 674, col: 27, offset: 21995},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 674, col: 27, offset: 21995},
								val:        "allnum",
								ignoreCase: false,
								want:       "\"allnum\"",
							},
							&litMatcher{
								pos:        position{line: 674, col: 38, offset: 22006},
								val:        "dedup_splitvals",
								ignoreCase: false,
								want:       "\"dedup_splitvals\"",
							},
							&litMatcher{
								pos:        position{line: 674, col: 58, offset: 22026},
								val:        "delim",
								ignoreCase: false,
								want:       "\"delim\"",
							},
							&litMatcher{
								pos:        position{line: 674, col: 68, offset: 22036},
								val:        "partitions",
								ignoreCase: false,
								want:       "\"partitions\"",
							},
						},
					},
				},
			},
		},
		{
			name: "GroupbyBlock",
			pos:  position{line: 682, col: 1, offset: 22226},
			expr: &actionExpr{
				pos: position{line: 682, col: 17, offset: 22242},
				run: (*parser).callonGroupbyBlock1,
				expr: &seqExpr{
					pos: position{line: 682, col: 17, offset: 22242},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 682, col: 17, offset: 22242},
							name: "BY",
						},
						&labeledExpr{
							pos:   position{line: 682, col: 20, offset: 22245},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 682, col: 27, offset: 22252},
								name: "FieldNameList",
							},
						},
					},
				},
			},
		},
		{
			name: "StreamStatsOptionResetOnChange",
			pos:  position{line: 694, col: 1, offset: 22602},
			expr: &actionExpr{
				pos: position{line: 694, col: 35, offset: 22636},
				run: (*parser).callonStreamStatsOptionResetOnChange1,
				expr: &seqExpr{
					pos: position{line: 694, col: 35, offset: 22636},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 694, col: 35, offset: 22636},
							val:        "reset_on_change",
							ignoreCase: false,
							want:       "\"reset_on_change\"",
						},
						&ruleRefExpr{
							pos:  position{line: 694, col: 53, offset: 22654},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 694, col: 59, offset: 22660},
							label: "boolVal",
							expr: &ruleRefExpr{
								pos:  position{line: 694, col: 67, offset: 22668},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "StreamStatsOptionCurrent",
			pos:  position{line: 706, col: 1, offset: 22929},
			expr: &actionExpr{
				pos: position{line: 706, col: 29, offset: 22957},
				run: (*parser).callonStreamStatsOptionCurrent1,
				expr: &seqExpr{
					pos: position{line: 706, col: 29, offset: 22957},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 706, col: 29, offset: 22957},
							val:        "current",
							ignoreCase: false,
							want:       "\"current\"",
						},
						&ruleRefExpr{
							pos:  position{line: 706, col: 39, offset: 22967},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 706, col: 45, offset: 22973},
							label: "boolVal",
							expr: &ruleRefExpr{
								pos:  position{line: 706, col: 53, offset: 22981},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "StreamStatsOptionGlobal",
			pos:  position{line: 718, col: 1, offset: 23228},
			expr: &actionExpr{
				pos: position{line: 718, col: 28, offset: 23255},
				run: (*parser).callonStreamStatsOptionGlobal1,
				expr: &seqExpr{
					pos: position{line: 718, col: 28, offset: 23255},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 718, col: 28, offset: 23255},
							val:        "global",
							ignoreCase: false,
							want:       "\"global\"",
						},
						&ruleRefExpr{
							pos:  position{line: 718, col: 37, offset: 23264},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 718, col: 43, offset: 23270},
							label: "boolVal",
							expr: &ruleRefExpr{
								pos:  position{line: 718, col: 51, offset: 23278},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "StreamStatsOptionAllNum",
			pos:  position{line: 731, col: 1, offset: 23612},
			expr: &actionExpr{
				pos: position{line: 731, col: 28, offset: 23639},
				run: (*parser).callonStreamStatsOptionAllNum1,
				expr: &seqExpr{
					pos: position{line: 731, col: 28, offset: 23639},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 731, col: 28, offset: 23639},
							val:        "allnum",
							ignoreCase: false,
							want:       "\"allnum\"",
						},
						&ruleRefExpr{
							pos:  position{line: 731, col: 37, offset: 23648},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 731, col: 43, offset: 23654},
							label: "boolVal",
							expr: &ruleRefExpr{
								pos:  position{line: 731, col: 51, offset: 23662},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "StreamStatsOptionWindow",
			pos:  position{line: 744, col: 1, offset: 23996},
			expr: &actionExpr{
				pos: position{line: 744, col: 28, offset: 24023},
				run: (*parser).callonStreamStatsOptionWindow1,
				expr: &seqExpr{
					pos: position{line: 744, col: 28, offset: 24023},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 744, col: 28, offset: 24023},
							val:        "window",
							ignoreCase: false,
							want:       "\"window\"",
						},
						&ruleRefExpr{
							pos:  position{line: 744, col: 37, offset: 24032},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 744, col: 43, offset: 24038},
							label: "windowSize",
							expr: &ruleRefExpr{
								pos:  position{line: 744, col: 54, offset: 24049},
								name: "PositiveIntegerAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "StreamStatsOptionResetBefore",
			pos:  position{line: 764, col: 1, offset: 24653},
			expr: &actionExpr{
				pos: position{line: 764, col: 33, offset: 24685},
				run: (*parser).callonStreamStatsOptionResetBefore1,
				expr: &seqExpr{
					pos: position{line: 764, col: 33, offset: 24685},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 764, col: 33, offset: 24685},
							val:        "reset_before",
							ignoreCase: false,
							want:       "\"reset_before\"",
						},
						&ruleRefExpr{
							pos:  position{line: 764, col: 48, offset: 24700},
							name: "EQUAL",
						},
						&ruleRefExpr{
							pos:  position{line: 764, col: 54, offset: 24706},
							name: "L_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 764, col: 62, offset: 24714},
							label: "boolExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 764, col: 71, offset: 24723},
								name: "BoolExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 764, col: 80, offset: 24732},
							name: "R_PAREN",
						},
					},
				},
			},
		},
		{
			name: "StreamStatsOptionResetAfter",
			pos:  position{line: 776, col: 1, offset: 25002},
			expr: &actionExpr{
				pos: position{line: 776, col: 32, offset: 25033},
				run: (*parser).callonStreamStatsOptionResetAfter1,
				expr: &seqExpr{
					pos: position{line: 776, col: 32, offset: 25033},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 776, col: 32, offset: 25033},
							val:        "reset_after",
							ignoreCase: false,
							want:       "\"reset_after\"",
						},
						&ruleRefExpr{
							pos:  position{line: 776, col: 46, offset: 25047},
							name: "EQUAL",
						},
						&ruleRefExpr{
							pos:  position{line: 776, col: 52, offset: 25053},
							name: "L_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 776, col: 60, offset: 25061},
							label: "boolExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 776, col: 69, offset: 25070},
								name: "BoolExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 776, col: 78, offset: 25079},
							name: "R_PAREN",
						},
					},
				},
			},
		},
		{
			name: "StreamStatsOptionTimeWindow",
			pos:  position{line: 788, col: 1, offset: 25347},
			expr: &actionExpr{
				pos: position{line: 788, col: 32, offset: 25378},
				run: (*parser).callonStreamStatsOptionTimeWindow1,
				expr: &seqExpr{
					pos: position{line: 788, col: 32, offset: 25378},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 788, col: 32, offset: 25378},
							val:        "time_window",
							ignoreCase: false,
							want:       "\"time_window\"",
						},
						&ruleRefExpr{
							pos:  position{line: 788, col: 46, offset: 25392},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 788, col: 52, offset: 25398},
							label: "spanLength",
							expr: &ruleRefExpr{
								pos:  position{line: 788, col: 63, offset: 25409},
								name: "BinSpanLenOption",
							},
						},
					},
				},
			},
		},
		{
			name: "StreamStatsOption",
			pos:  position{line: 804, col: 1, offset: 25871},
			expr: &actionExpr{
				pos: position{line: 804, col: 22, offset: 25892},
				run: (*parser).callonStreamStatsOption1,
				expr: &labeledExpr{
					pos:   position{line: 804, col: 22, offset: 25892},
					label: "ssOption",
					expr: &choiceExpr{
						pos: position{line: 804, col: 32, offset: 25902},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 804, col: 32, offset: 25902},
								name: "StreamStatsOptionResetOnChange",
							},
							&ruleRefExpr{
								pos:  position{line: 804, col: 65, offset: 25935},
								name: "StreamStatsOptionCurrent",
							},
							&ruleRefExpr{
								pos:  position{line: 804, col: 92, offset: 25962},
								name: "StreamStatsOptionGlobal",
							},
							&ruleRefExpr{
								pos:  position{line: 804, col: 118, offset: 25988},
								name: "StreamStatsOptionAllNum",
							},
							&ruleRefExpr{
								pos:  position{line: 804, col: 144, offset: 26014},
								name: "StreamStatsOptionWindow",
							},
							&ruleRefExpr{
								pos:  position{line: 804, col: 170, offset: 26040},
								name: "StreamStatsOptionResetBefore",
							},
							&ruleRefExpr{
								pos:  position{line: 804, col: 201, offset: 26071},
								name: "StreamStatsOptionResetAfter",
							},
							&ruleRefExpr{
								pos:  position{line: 804, col: 231, offset: 26101},
								name: "StreamStatsOptionTimeWindow",
							},
						},
					},
				},
			},
		},
		{
			name: "StreamStatsOptionList",
			pos:  position{line: 808, col: 1, offset: 26160},
			expr: &actionExpr{
				pos: position{line: 808, col: 26, offset: 26185},
				run: (*parser).callonStreamStatsOptionList1,
				expr: &seqExpr{
					pos: position{line: 808, col: 26, offset: 26185},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 808, col: 26, offset: 26185},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 808, col: 32, offset: 26191},
								name: "StreamStatsOption",
							},
						},
						&labeledExpr{
							pos:   position{line: 808, col: 50, offset: 26209},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 808, col: 55, offset: 26214},
								expr: &seqExpr{
									pos: position{line: 808, col: 56, offset: 26215},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 808, col: 56, offset: 26215},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 808, col: 62, offset: 26221},
											name: "StreamStatsOption",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StreamStatsBlock",
			pos:  position{line: 857, col: 1, offset: 27999},
			expr: &choiceExpr{
				pos: position{line: 857, col: 21, offset: 28019},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 857, col: 21, offset: 28019},
						run: (*parser).callonStreamStatsBlock2,
						expr: &seqExpr{
							pos: position{line: 857, col: 21, offset: 28019},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 857, col: 21, offset: 28019},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 857, col: 26, offset: 28024},
									name: "CMD_STREAMSTATS",
								},
								&labeledExpr{
									pos:   position{line: 857, col: 42, offset: 28040},
									label: "ssOptionList",
									expr: &ruleRefExpr{
										pos:  position{line: 857, col: 56, offset: 28054},
										name: "StreamStatsOptionList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 857, col: 79, offset: 28077},
									name: "SPACE",
								},
								&labeledExpr{
									pos:   position{line: 857, col: 85, offset: 28083},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 857, col: 91, offset: 28089},
										name: "CommonAggregatorBlock",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 864, col: 3, offset: 28268},
						run: (*parser).callonStreamStatsBlock11,
						expr: &seqExpr{
							pos: position{line: 864, col: 3, offset: 28268},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 864, col: 3, offset: 28268},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 864, col: 8, offset: 28273},
									name: "CMD_STREAMSTATS",
								},
								&labeledExpr{
									pos:   position{line: 864, col: 24, offset: 28289},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 864, col: 30, offset: 28295},
										name: "CommonAggregatorBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RegexBlock",
			pos:  position{line: 872, col: 1, offset: 28461},
			expr: &actionExpr{
				pos: position{line: 872, col: 15, offset: 28475},
				run: (*parser).callonRegexBlock1,
				expr: &seqExpr{
					pos: position{line: 872, col: 15, offset: 28475},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 872, col: 15, offset: 28475},
							name: "CMD_REGEX",
						},
						&labeledExpr{
							pos:   position{line: 872, col: 25, offset: 28485},
							label: "keyAndOp",
							expr: &zeroOrOneExpr{
								pos: position{line: 872, col: 34, offset: 28494},
								expr: &seqExpr{
									pos: position{line: 872, col: 35, offset: 28495},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 872, col: 35, offset: 28495},
											name: "FieldName",
										},
										&ruleRefExpr{
											pos:  position{line: 872, col: 45, offset: 28505},
											name: "EqualityOperator",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 872, col: 64, offset: 28524},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 872, col: 68, offset: 28528},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel4",
			pos:  position{line: 900, col: 1, offset: 29107},
			expr: &actionExpr{
				pos: position{line: 900, col: 17, offset: 29123},
				run: (*parser).callonClauseLevel41,
				expr: &seqExpr{
					pos: position{line: 900, col: 17, offset: 29123},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 900, col: 17, offset: 29123},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 900, col: 23, offset: 29129},
								name: "ClauseLevel3",
							},
						},
						&labeledExpr{
							pos:   position{line: 900, col: 36, offset: 29142},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 900, col: 41, offset: 29147},
								expr: &seqExpr{
									pos: position{line: 900, col: 42, offset: 29148},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 900, col: 43, offset: 29149},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 900, col: 43, offset: 29149},
													name: "AND",
												},
												&ruleRefExpr{
													pos:  position{line: 900, col: 49, offset: 29155},
													name: "SPACE",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 900, col: 56, offset: 29162},
											name: "ClauseLevel3",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel3",
			pos:  position{line: 918, col: 1, offset: 29539},
			expr: &actionExpr{
				pos: position{line: 918, col: 17, offset: 29555},
				run: (*parser).callonClauseLevel31,
				expr: &seqExpr{
					pos: position{line: 918, col: 17, offset: 29555},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 918, col: 17, offset: 29555},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 918, col: 23, offset: 29561},
								name: "ClauseLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 918, col: 36, offset: 29574},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 918, col: 41, offset: 29579},
								expr: &seqExpr{
									pos: position{line: 918, col: 42, offset: 29580},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 918, col: 42, offset: 29580},
											name: "OR",
										},
										&ruleRefExpr{
											pos:  position{line: 918, col: 45, offset: 29583},
											name: "ClauseLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel2",
			pos:  position{line: 936, col: 1, offset: 29948},
			expr: &choiceExpr{
				pos: position{line: 936, col: 17, offset: 29964},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 936, col: 17, offset: 29964},
						run: (*parser).callonClauseLevel22,
						expr: &seqExpr{
							pos: position{line: 936, col: 17, offset: 29964},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 936, col: 17, offset: 29964},
									label: "notList",
									expr: &oneOrMoreExpr{
										pos: position{line: 936, col: 25, offset: 29972},
										expr: &ruleRefExpr{
											pos:  position{line: 936, col: 25, offset: 29972},
											name: "NOT",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 936, col: 30, offset: 29977},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 936, col: 36, offset: 29983},
										name: "ClauseLevel1",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 947, col: 5, offset: 30279},
						run: (*parser).callonClauseLevel29,
						expr: &labeledExpr{
							pos:   position{line: 947, col: 5, offset: 30279},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 947, col: 12, offset: 30286},
								name: "ClauseLevel1",
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel1",
			pos:  position{line: 951, col: 1, offset: 30327},
			expr: &choiceExpr{
				pos: position{line: 951, col: 17, offset: 30343},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 951, col: 17, offset: 30343},
						run: (*parser).callonClauseLevel12,
						expr: &seqExpr{
							pos: position{line: 951, col: 17, offset: 30343},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 951, col: 17, offset: 30343},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 951, col: 25, offset: 30351},
									label: "clause",
									expr: &ruleRefExpr{
										pos:  position{line: 951, col: 32, offset: 30358},
										name: "ClauseLevel4",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 951, col: 45, offset: 30371},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 953, col: 5, offset: 30408},
						run: (*parser).callonClauseLevel18,
						expr: &labeledExpr{
							pos:   position{line: 953, col: 5, offset: 30408},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 953, col: 10, offset: 30413},
								name: "SearchTerm",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchTerm",
			pos:  position{line: 959, col: 1, offset: 30571},
			expr: &actionExpr{
				pos: position{line: 959, col: 15, offset: 30585},
				run: (*parser).callonSearchTerm1,
				expr: &labeledExpr{
					pos:   position{line: 959, col: 15, offset: 30585},
					label: "term",
					expr: &choiceExpr{
						pos: position{line: 959, col: 21, offset: 30591},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 959, col: 21, offset: 30591},
								name: "FieldWithNumberValue",
							},
							&ruleRefExpr{
								pos:  position{line: 959, col: 44, offset: 30614},
								name: "FieldWithBooleanValue",
							},
							&ruleRefExpr{
								pos:  position{line: 959, col: 68, offset: 30638},
								name: "FieldWithStringValue",
							},
						},
					},
				},
			},
		},
		{
			name: "TimechartBlock",
			pos:  position{line: 964, col: 1, offset: 30779},
			expr: &actionExpr{
				pos: position{line: 964, col: 19, offset: 30797},
				run: (*parser).callonTimechartBlock1,
				expr: &seqExpr{
					pos: position{line: 964, col: 19, offset: 30797},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 964, col: 19, offset: 30797},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 964, col: 24, offset: 30802},
							name: "CMD_TIMECHART",
						},
						&labeledExpr{
							pos:   position{line: 964, col: 38, offset: 30816},
							label: "tcArgs",
							expr: &ruleRefExpr{
								pos:  position{line: 964, col: 45, offset: 30823},
								name: "TimechartArgumentsList",
							},
						},
						&labeledExpr{
							pos:   position{line: 964, col: 68, offset: 30846},
							label: "limitExpr",
							expr: &zeroOrOneExpr{
								pos: position{line: 964, col: 78, offset: 30856},
								expr: &ruleRefExpr{
									pos:  position{line: 964, col: 79, offset: 30857},
									name: "LimitExpr",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimechartArgumentsList",
			pos:  position{line: 1052, col: 1, offset: 33600},
			expr: &actionExpr{
				pos: position{line: 1052, col: 27, offset: 33626},
				run: (*parser).callonTimechartArgumentsList1,
				expr: &seqExpr{
					pos: position{line: 1052, col: 27, offset: 33626},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1052, col: 27, offset: 33626},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1052, col: 33, offset: 33632},
								name: "TimechartArgument",
							},
						},
						&labeledExpr{
							pos:   position{line: 1052, col: 51, offset: 33650},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1052, col: 56, offset: 33655},
								expr: &seqExpr{
									pos: position{line: 1052, col: 57, offset: 33656},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1052, col: 57, offset: 33656},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 1052, col: 63, offset: 33662},
											name: "TimechartArgument",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimechartArgument",
			pos:  position{line: 1081, col: 1, offset: 34396},
			expr: &actionExpr{
				pos: position{line: 1081, col: 22, offset: 34417},
				run: (*parser).callonTimechartArgument1,
				expr: &labeledExpr{
					pos:   position{line: 1081, col: 22, offset: 34417},
					label: "tcArg",
					expr: &choiceExpr{
						pos: position{line: 1081, col: 29, offset: 34424},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1081, col: 29, offset: 34424},
								name: "SingleAggExpr",
							},
							&ruleRefExpr{
								pos:  position{line: 1081, col: 45, offset: 34440},
								name: "TcOptions",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleAggExpr",
			pos:  position{line: 1085, col: 1, offset: 34478},
			expr: &actionExpr{
				pos: position{line: 1085, col: 18, offset: 34495},
				run: (*parser).callonSingleAggExpr1,
				expr: &seqExpr{
					pos: position{line: 1085, col: 18, offset: 34495},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1085, col: 18, offset: 34495},
							label: "aggs",
							expr: &ruleRefExpr{
								pos:  position{line: 1085, col: 23, offset: 34500},
								name: "AggregationList",
							},
						},
						&labeledExpr{
							pos:   position{line: 1085, col: 39, offset: 34516},
							label: "splitByClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 1085, col: 53, offset: 34530},
								expr: &ruleRefExpr{
									pos:  position{line: 1085, col: 53, offset: 34530},
									name: "SplitByClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SplitByClause",
			pos:  position{line: 1099, col: 1, offset: 34869},
			expr: &actionExpr{
				pos: position{line: 1099, col: 18, offset: 34886},
				run: (*parser).callonSplitByClause1,
				expr: &seqExpr{
					pos: position{line: 1099, col: 18, offset: 34886},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1099, col: 18, offset: 34886},
							name: "BY",
						},
						&labeledExpr{
							pos:   position{line: 1099, col: 21, offset: 34889},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1099, col: 27, offset: 34895},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "TcOptions",
			pos:  position{line: 1107, col: 1, offset: 35024},
			expr: &actionExpr{
				pos: position{line: 1107, col: 14, offset: 35037},
				run: (*parser).callonTcOptions1,
				expr: &labeledExpr{
					pos:   position{line: 1107, col: 14, offset: 35037},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 1107, col: 22, offset: 35045},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1107, col: 22, offset: 35045},
								name: "BinOptions",
							},
							&oneOrMoreExpr{
								pos: position{line: 1107, col: 35, offset: 35058},
								expr: &ruleRefExpr{
									pos:  position{line: 1107, col: 36, offset: 35059},
									name: "TcOption",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TcOption",
			pos:  position{line: 1149, col: 1, offset: 36579},
			expr: &actionExpr{
				pos: position{line: 1149, col: 13, offset: 36591},
				run: (*parser).callonTcOption1,
				expr: &seqExpr{
					pos: position{line: 1149, col: 13, offset: 36591},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1149, col: 13, offset: 36591},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 1149, col: 19, offset: 36597},
							label: "tcOptionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 1149, col: 31, offset: 36609},
								name: "TcOptionCMD",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1149, col: 43, offset: 36621},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1149, col: 49, offset: 36627},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 1149, col: 53, offset: 36631},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "TcOptionCMD",
			pos:  position{line: 1154, col: 1, offset: 36744},
			expr: &actionExpr{
				pos: position{line: 1154, col: 16, offset: 36759},
				run: (*parser).callonTcOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 1154, col: 16, offset: 36759},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 1154, col: 24, offset: 36767},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 1154, col: 24, offset: 36767},
								val:        "usenull",
								ignoreCase: false,
								want:       "\"usenull\"",
							},
							&litMatcher{
								pos:        position{line: 1154, col: 36, offset: 36779},
								val:        "useother",
								ignoreCase: false,
								want:       "\"useother\"",
							},
							&litMatcher{
								pos:        position{line: 1154, col: 49, offset: 36792},
								val:        "nullstr",
								ignoreCase: false,
								want:       "\"nullstr\"",
							},
							&litMatcher{
								pos:        position{line: 1154, col: 61, offset: 36804},
								val:        "otherstr",
								ignoreCase: false,
								want:       "\"otherstr\"",
							},
						},
					},
				},
			},
		},
		{
			name: "AllTimeScale",
			pos:  position{line: 1162, col: 1, offset: 37000},
			expr: &actionExpr{
				pos: position{line: 1162, col: 17, offset: 37016},
				run: (*parser).callonAllTimeScale1,
				expr: &labeledExpr{
					pos:   position{line: 1162, col: 17, offset: 37016},
					label: "timeUnit",
					expr: &choiceExpr{
						pos: position{line: 1162, col: 27, offset: 37026},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1162, col: 27, offset: 37026},
								name: "Second",
							},
							&ruleRefExpr{
								pos:  position{line: 1162, col: 36, offset: 37035},
								name: "Month",
							},
							&ruleRefExpr{
								pos:  position{line: 1162, col: 44, offset: 37043},
								name: "Subseconds",
							},
							&ruleRefExpr{
								pos:  position{line: 1162, col: 57, offset: 37056},
								name: "Minute",
							},
							&ruleRefExpr{
								pos:  position{line: 1162, col: 66, offset: 37065},
								name: "Hour",
							},
							&ruleRefExpr{
								pos:  position{line: 1162, col: 73, offset: 37072},
								name: "Day",
							},
							&ruleRefExpr{
								pos:  position{line: 1162, col: 79, offset: 37078},
								name: "Week",
							},
							&ruleRefExpr{
								pos:  position{line: 1162, col: 86, offset: 37085},
								name: "Quarter",
							},
							&ruleRefExpr{
								pos:  position{line: 1162, col: 96, offset: 37095},
								name: "Year",
							},
						},
					},
				},
			},
		},
		{
			name: "BinSpanLenOption",
			pos:  position{line: 1166, col: 1, offset: 37131},
			expr: &actionExpr{
				pos: position{line: 1166, col: 21, offset: 37151},
				run: (*parser).callonBinSpanLenOption1,
				expr: &seqExpr{
					pos: position{line: 1166, col: 21, offset: 37151},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1166, col: 21, offset: 37151},
							label: "number",
							expr: &choiceExpr{
								pos: position{line: 1166, col: 29, offset: 37159},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1166, col: 29, offset: 37159},
										name: "FloatAsString",
									},
									&ruleRefExpr{
										pos:  position{line: 1166, col: 45, offset: 37175},
										name: "IntegerAsString",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1166, col: 62, offset: 37192},
							label: "timeScale",
							expr: &zeroOrOneExpr{
								pos: position{line: 1166, col: 72, offset: 37202},
								expr: &ruleRefExpr{
									pos:  position{line: 1166, col: 73, offset: 37203},
									name: "AllTimeScale",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BinOptionMinSpan",
			pos:  position{line: 1225, col: 1, offset: 39885},
			expr: &actionExpr{
				pos: position{line: 1225, col: 21, offset: 39905},
				run: (*parser).callonBinOptionMinSpan1,
				expr: &seqExpr{
					pos: position{line: 1225, col: 21, offset: 39905},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1225, col: 21, offset: 39905},
							val:        "minspan",
							ignoreCase: false,
							want:       "\"minspan\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1225, col: 31, offset: 39915},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1225, col: 37, offset: 39921},
							label: "spanLength",
							expr: &ruleRefExpr{
								pos:  position{line: 1225, col: 48, offset: 39932},
								name: "BinSpanLenOption",
							},
						},
					},
				},
			},
		},
		{
			name: "BinOptionMaxBins",
			pos:  position{line: 1236, col: 1, offset: 40173},
			expr: &actionExpr{
				pos: position{line: 1236, col: 21, offset: 40193},
				run: (*parser).callonBinOptionMaxBins1,
				expr: &seqExpr{
					pos: position{line: 1236, col: 21, offset: 40193},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1236, col: 21, offset: 40193},
							val:        "bins",
							ignoreCase: false,
							want:       "\"bins\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1236, col: 28, offset: 40200},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1236, col: 34, offset: 40206},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 1236, col: 43, offset: 40215},
								name: "IntegerAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "BinOptionAlignTime",
			pos:  position{line: 1257, col: 1, offset: 40794},
			expr: &choiceExpr{
				pos: position{line: 1257, col: 23, offset: 40816},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1257, col: 23, offset: 40816},
						run: (*parser).callonBinOptionAlignTime2,
						expr: &seqExpr{
							pos: position{line: 1257, col: 23, offset: 40816},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1257, col: 23, offset: 40816},
									val:        "aligntime",
									ignoreCase: false,
									want:       "\"aligntime\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1257, col: 35, offset: 40828},
									name: "EQUAL",
								},
								&labeledExpr{
									pos:   position{line: 1257, col: 41, offset: 40834},
									label: "utcEpoch",
									expr: &ruleRefExpr{
										pos:  position{line: 1257, col: 51, offset: 40844},
										name: "PositiveIntegerAsString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1271, col: 3, offset: 41263},
						run: (*parser).callonBinOptionAlignTime8,
						expr: &seqExpr{
							pos: position{line: 1271, col: 3, offset: 41263},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1271, col: 3, offset: 41263},
									val:        "aligntime",
									ignoreCase: false,
									want:       "\"aligntime\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1271, col: 15, offset: 41275},
									name: "EQUAL",
								},
								&labeledExpr{
									pos:   position{line: 1271, col: 21, offset: 41281},
									label: "timestamp",
									expr: &choiceExpr{
										pos: position{line: 1271, col: 32, offset: 41292},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 1271, col: 32, offset: 41292},
												name: "AbsoluteTimestamp",
											},
											&ruleRefExpr{
												pos:  position{line: 1271, col: 52, offset: 41312},
												name: "RelativeTimestamp",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BinOptionStart",
			pos:  position{line: 1291, col: 1, offset: 41781},
			expr: &actionExpr{
				pos: position{line: 1291, col: 19, offset: 41799},
				run: (*parser).callonBinOptionStart1,
				expr: &seqExpr{
					pos: position{line: 1291, col: 19, offset: 41799},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1291, col: 19, offset: 41799},
							val:        "start",
							ignoreCase: false,
							want:       "\"start\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1291, col: 27, offset: 41807},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1291, col: 33, offset: 41813},
							label: "number",
							expr: &choiceExpr{
								pos: position{line: 1291, col: 41, offset: 41821},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1291, col: 41, offset: 41821},
										name: "FloatAsString",
									},
									&ruleRefExpr{
										pos:  position{line: 1291, col: 57, offset: 41837},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BinOptionEnd",
			pos:  position{line: 1306, col: 1, offset: 42216},
			expr: &actionExpr{
				pos: position{line: 1306, col: 17, offset: 42232},
				run: (*parser).callonBinOptionEnd1,
				expr: &seqExpr{
					pos: position{line: 1306, col: 17, offset: 42232},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1306, col: 17, offset: 42232},
							val:        "end",
							ignoreCase: false,
							want:       "\"end\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1306, col: 23, offset: 42238},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1306, col: 29, offset: 42244},
							label: "number",
							expr: &choiceExpr{
								pos: position{line: 1306, col: 37, offset: 42252},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1306, col: 37, offset: 42252},
										name: "FloatAsString",
									},
									&ruleRefExpr{
										pos:  position{line: 1306, col: 53, offset: 42268},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BinOptionSpan",
			pos:  position{line: 1321, col: 1, offset: 42639},
			expr: &choiceExpr{
				pos: position{line: 1321, col: 18, offset: 42656},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1321, col: 18, offset: 42656},
						run: (*parser).callonBinOptionSpan2,
						expr: &seqExpr{
							pos: position{line: 1321, col: 18, offset: 42656},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1321, col: 18, offset: 42656},
									val:        "span",
									ignoreCase: false,
									want:       "\"span\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1321, col: 25, offset: 42663},
									name: "EQUAL",
								},
								&labeledExpr{
									pos:   position{line: 1321, col: 31, offset: 42669},
									label: "num1",
									expr: &zeroOrOneExpr{
										pos: position{line: 1321, col: 36, offset: 42674},
										expr: &choiceExpr{
											pos: position{line: 1321, col: 37, offset: 42675},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 1321, col: 37, offset: 42675},
													name: "FloatAsString",
												},
												&ruleRefExpr{
													pos:  position{line: 1321, col: 53, offset: 42691},
													name: "IntegerAsString",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1321, col: 71, offset: 42709},
									val:        "log",
									ignoreCase: false,
									want:       "\"log\"",
								},
								&labeledExpr{
									pos:   position{line: 1321, col: 77, offset: 42715},
									label: "num2",
									expr: &zeroOrOneExpr{
										pos: position{line: 1321, col: 82, offset: 42720},
										expr: &choiceExpr{
											pos: position{line: 1321, col: 83, offset: 42721},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 1321, col: 83, offset: 42721},
													name: "FloatAsString",
												},
												&ruleRefExpr{
													pos:  position{line: 1321, col: 99, offset: 42737},
													name: "IntegerAsString",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1364, col: 3, offset: 44173},
						run: (*parser).callonBinOptionSpan17,
						expr: &seqExpr{
							pos: position{line: 1364, col: 3, offset: 44173},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1364, col: 3, offset: 44173},
									val:        "span",
									ignoreCase: false,
									want:       "\"span\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1364, col: 10, offset: 44180},
									name: "EQUAL",
								},
								&labeledExpr{
									pos:   position{line: 1364, col: 16, offset: 44186},
									label: "spanLen",
									expr: &ruleRefExpr{
										pos:  position{line: 1364, col: 24, offset: 44194},
										name: "BinSpanLenOption",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BinCmdOption",
			pos:  position{line: 1379, col: 1, offset: 44525},
			expr: &actionExpr{
				pos: position{line: 1379, col: 17, offset: 44541},
				run: (*parser).callonBinCmdOption1,
				expr: &labeledExpr{
					pos:   position{line: 1379, col: 17, offset: 44541},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 1379, col: 25, offset: 44549},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1379, col: 25, offset: 44549},
								name: "BinOptionAlignTime",
							},
							&ruleRefExpr{
								pos:  position{line: 1379, col: 46, offset: 44570},
								name: "BinOptionMinSpan",
							},
							&ruleRefExpr{
								pos:  position{line: 1379, col: 65, offset: 44589},
								name: "BinOptionMaxBins",
							},
							&ruleRefExpr{
								pos:  position{line: 1379, col: 84, offset: 44608},
								name: "BinOptionStart",
							},
							&ruleRefExpr{
								pos:  position{line: 1379, col: 101, offset: 44625},
								name: "BinOptionEnd",
							},
							&ruleRefExpr{
								pos:  position{line: 1379, col: 116, offset: 44640},
								name: "BinOptionSpan",
							},
						},
					},
				},
			},
		},
		{
			name: "BinCmdOptionsList",
			pos:  position{line: 1383, col: 1, offset: 44683},
			expr: &actionExpr{
				pos: position{line: 1383, col: 22, offset: 44704},
				run: (*parser).callonBinCmdOptionsList1,
				expr: &seqExpr{
					pos: position{line: 1383, col: 22, offset: 44704},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1383, col: 22, offset: 44704},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1383, col: 29, offset: 44711},
								name: "BinCmdOption",
							},
						},
						&labeledExpr{
							pos:   position{line: 1383, col: 42, offset: 44724},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1383, col: 48, offset: 44730},
								expr: &seqExpr{
									pos: position{line: 1383, col: 49, offset: 44731},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1383, col: 49, offset: 44731},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 1383, col: 55, offset: 44737},
											name: "BinCmdOption",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BinBlock",
			pos:  position{line: 1429, col: 1, offset: 46221},
			expr: &choiceExpr{
				pos: position{line: 1429, col: 13, offset: 46233},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1429, col: 13, offset: 46233},
						run: (*parser).callonBinBlock2,
						expr: &seqExpr{
							pos: position{line: 1429, col: 13, offset: 46233},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1429, col: 13, offset: 46233},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 1429, col: 18, offset: 46238},
									name: "CMD_BIN",
								},
								&labeledExpr{
									pos:   position{line: 1429, col: 26, offset: 46246},
									label: "binCmdOption",
									expr: &ruleRefExpr{
										pos:  position{line: 1429, col: 40, offset: 46260},
										name: "BinCmdOptionsList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1429, col: 59, offset: 46279},
									name: "SPACE",
								},
								&labeledExpr{
									pos:   position{line: 1429, col: 65, offset: 46285},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1429, col: 71, offset: 46291},
										name: "FieldName",
									},
								},
								&labeledExpr{
									pos:   position{line: 1429, col: 81, offset: 46301},
									label: "newFieldName",
									expr: &zeroOrOneExpr{
										pos: position{line: 1429, col: 94, offset: 46314},
										expr: &ruleRefExpr{
											pos:  position{line: 1429, col: 95, offset: 46315},
											name: "AsField",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1452, col: 3, offset: 46944},
						run: (*parser).callonBinBlock14,
						expr: &seqExpr{
							pos: position{line: 1452, col: 3, offset: 46944},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1452, col: 3, offset: 46944},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 1452, col: 8, offset: 46949},
									name: "CMD_BIN",
								},
								&labeledExpr{
									pos:   position{line: 1452, col: 16, offset: 46957},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1452, col: 22, offset: 46963},
										name: "FieldName",
									},
								},
								&labeledExpr{
									pos:   position{line: 1452, col: 32, offset: 46973},
									label: "newFieldName",
									expr: &zeroOrOneExpr{
										pos: position{line: 1452, col: 45, offset: 46986},
										expr: &ruleRefExpr{
											pos:  position{line: 1452, col: 46, offset: 46987},
											name: "AsField",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BinOptions",
			pos:  position{line: 1479, col: 1, offset: 47725},
			expr: &actionExpr{
				pos: position{line: 1479, col: 15, offset: 47739},
				run: (*parser).callonBinOptions1,
				expr: &labeledExpr{
					pos:   position{line: 1479, col: 15, offset: 47739},
					label: "spanOptions",
					expr: &ruleRefExpr{
						pos:  position{line: 1479, col: 27, offset: 47751},
						name: "SpanOptions",
					},
				},
			},
		},
		{
			name: "SpanOptions",
			pos:  position{line: 1487, col: 1, offset: 47976},
			expr: &actionExpr{
				pos: position{line: 1487, col: 16, offset: 47991},
				run: (*parser).callonSpanOptions1,
				expr: &seqExpr{
					pos: position{line: 1487, col: 16, offset: 47991},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1487, col: 16, offset: 47991},
							name: "CMD_SPAN",
						},
						&ruleRefExpr{
							pos:  position{line: 1487, col: 25, offset: 48000},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1487, col: 31, offset: 48006},
							label: "spanLength",
							expr: &ruleRefExpr{
								pos:  position{line: 1487, col: 42, offset: 48017},
								name: "SpanLength",
							},
						},
					},
				},
			},
		},
		{
			name: "SpanLength",
			pos:  position{line: 1494, col: 1, offset: 48163},
			expr: &actionExpr{
				pos: position{line: 1494, col: 15, offset: 48177},
				run: (*parser).callonSpanLength1,
				expr: &seqExpr{
					pos: position{line: 1494, col: 15, offset: 48177},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1494, col: 15, offset: 48177},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 1494, col: 24, offset: 48186},
								name: "IntegerAsString",
							},
						},
						&labeledExpr{
							pos:   position{line: 1494, col: 40, offset: 48202},
							label: "timeScale",
							expr: &ruleRefExpr{
								pos:  position{line: 1494, col: 50, offset: 48212},
								name: "AllTimeScale",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitExpr",
			pos:  position{line: 1511, col: 1, offset: 48758},
			expr: &actionExpr{
				pos: position{line: 1511, col: 14, offset: 48771},
				run: (*parser).callonLimitExpr1,
				expr: &seqExpr{
					pos: position{line: 1511, col: 14, offset: 48771},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1511, col: 14, offset: 48771},
							name: "SPACE",
						},
						&litMatcher{
							pos:        position{line: 1511, col: 20, offset: 48777},
							val:        "limit",
							ignoreCase: false,
							want:       "\"limit\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1511, col: 28, offset: 48785},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1511, col: 34, offset: 48791},
							label: "sortBy",
							expr: &zeroOrOneExpr{
								pos: position{line: 1511, col: 41, offset: 48798},
								expr: &choiceExpr{
									pos: position{line: 1511, col: 42, offset: 48799},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 1511, col: 42, offset: 48799},
											val:        "top",
											ignoreCase: false,
											want:       "\"top\"",
										},
										&litMatcher{
											pos:        position{line: 1511, col: 50, offset: 48807},
											val:        "bottom",
											ignoreCase: false,
											want:       "\"bottom\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1511, col: 61, offset: 48818},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 1511, col: 76, offset: 48833},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 1511, col: 86, offset: 48843},
								name: "IntegerAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticBlock",
			pos:  position{line: 1535, col: 1, offset: 49424},
			expr: &actionExpr{
				pos: position{line: 1535, col: 19, offset: 49442},
				run: (*parser).callonStatisticBlock1,
				expr: &seqExpr{
					pos: position{line: 1535, col: 19, offset: 49442},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1535, col: 19, offset: 49442},
							name: "PIPE",
						},
						&labeledExpr{
							pos:   position{line: 1535, col: 24, offset: 49447},
							label: "statisticExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 1535, col: 38, offset: 49461},
								name: "StatisticExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticExpr",
			pos:  position{line: 1568, col: 1, offset: 50439},
			expr: &actionExpr{
				pos: position{line: 1568, col: 18, offset: 50456},
				run: (*parser).callonStatisticExpr1,
				expr: &seqExpr{
					pos: position{line: 1568, col: 18, offset: 50456},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1568, col: 18, offset: 50456},
							label: "cmd",
							expr: &choiceExpr{
								pos: position{line: 1568, col: 23, offset: 50461},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1568, col: 23, offset: 50461},
										name: "CMD_TOP",
									},
									&ruleRefExpr{
										pos:  position{line: 1568, col: 33, offset: 50471},
										name: "CMD_RARE",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1568, col: 43, offset: 50481},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 1568, col: 49, offset: 50487},
								expr: &ruleRefExpr{
									pos:  position{line: 1568, col: 50, offset: 50488},
									name: "StatisticLimit",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1568, col: 67, offset: 50505},
							label: "fieldList",
							expr: &seqExpr{
								pos: position{line: 1568, col: 78, offset: 50516},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 1568, col: 78, offset: 50516},
										name: "SPACE",
									},
									&ruleRefExpr{
										pos:  position{line: 1568, col: 84, offset: 50522},
										name: "FieldNameList",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1568, col: 99, offset: 50537},
							label: "byClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 1568, col: 108, offset: 50546},
								expr: &ruleRefExpr{
									pos:  position{line: 1568, col: 109, offset: 50547},
									name: "ByClause",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1568, col: 120, offset: 50558},
							label: "options",
							expr: &zeroOrOneExpr{
								pos: position{line: 1568, col: 128, offset: 50566},
								expr: &ruleRefExpr{
									pos:  position{line: 1568, col: 129, offset: 50567},
									name: "StatisticOptions",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticLimit",
			pos:  position{line: 1610, col: 1, offset: 51652},
			expr: &choiceExpr{
				pos: position{line: 1610, col: 19, offset: 51670},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1610, col: 19, offset: 51670},
						run: (*parser).callonStatisticLimit2,
						expr: &seqExpr{
							pos: position{line: 1610, col: 19, offset: 51670},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1610, col: 19, offset: 51670},
									name: "SPACE",
								},
								&labeledExpr{
									pos:   position{line: 1610, col: 25, offset: 51676},
									label: "number",
									expr: &ruleRefExpr{
										pos:  position{line: 1610, col: 32, offset: 51683},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1613, col: 3, offset: 51737},
						run: (*parser).callonStatisticLimit7,
						expr: &seqExpr{
							pos: position{line: 1613, col: 3, offset: 51737},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1613, col: 3, offset: 51737},
									name: "SPACE",
								},
								&litMatcher{
									pos:        position{line: 1613, col: 9, offset: 51743},
									val:        "limit",
									ignoreCase: false,
									want:       "\"limit\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1613, col: 17, offset: 51751},
									name: "EQUAL",
								},
								&labeledExpr{
									pos:   position{line: 1613, col: 23, offset: 51757},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 1613, col: 30, offset: 51764},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticOptions",
			pos:  position{line: 1618, col: 1, offset: 51862},
			expr: &actionExpr{
				pos: position{line: 1618, col: 21, offset: 51882},
				run: (*parser).callonStatisticOptions1,
				expr: &labeledExpr{
					pos:   position{line: 1618, col: 21, offset: 51882},
					label: "option",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1618, col: 28, offset: 51889},
						expr: &ruleRefExpr{
							pos:  position{line: 1618, col: 29, offset: 51890},
							name: "StatisticOption",
						},
					},
				},
			},
		},
		{
			name: "StatisticOption",
			pos:  position{line: 1667, col: 1, offset: 53452},
			expr: &actionExpr{
				pos: position{line: 1667, col: 20, offset: 53471},
				run: (*parser).callonStatisticOption1,
				expr: &seqExpr{
					pos: position{line: 1667, col: 20, offset: 53471},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1667, col: 20, offset: 53471},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 1667, col: 26, offset: 53477},
							label: "optionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 1667, col: 36, offset: 53487},
								name: "StatisticOptionCMD",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1667, col: 55, offset: 53506},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1667, col: 61, offset: 53512},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1667, col: 67, offset: 53518},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticOptionCMD",
			pos:  position{line: 1672, col: 1, offset: 53627},
			expr: &actionExpr{
				pos: position{line: 1672, col: 23, offset: 53649},
				run: (*parser).callonStatisticOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 1672, col: 23, offset: 53649},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 1672, col: 31, offset: 53657},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 1672, col: 31, offset: 53657},
								val:        "countfield",
								ignoreCase: false,
								want:       "\"countfield\"",
							},
							&litMatcher{
								pos:        position{line: 1672, col: 46, offset: 53672},
								val:        "showcount",
								ignoreCase: false,
								want:       "\"showcount\"",
							},
							&litMatcher{
								pos:        position{line: 1672, col: 60, offset: 53686},
								val:        "otherstr",
								ignoreCase: false,
								want:       "\"otherstr\"",
							},
							&litMatcher{
								pos:        position{line: 1672, col: 73, offset: 53699},
								val:        "useother",
								ignoreCase: false,
								want:       "\"useother\"",
							},
							&litMatcher{
								pos:        position{line: 1672, col: 85, offset: 53711},
								val:        "percentfield",
								ignoreCase: false,
								want:       "\"percentfield\"",
							},
							&litMatcher{
								pos:        position{line: 1672, col: 102, offset: 53728},
								val:        "showperc",
								ignoreCase: false,
								want:       "\"showperc\"",
							},
						},
					},
				},
			},
		},
		{
			name: "ByClause",
			pos:  position{line: 1680, col: 1, offset: 53915},
			expr: &choiceExpr{
				pos: position{line: 1680, col: 13, offset: 53927},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1680, col: 13, offset: 53927},
						run: (*parser).callonByClause2,
						expr: &seqExpr{
							pos: position{line: 1680, col: 13, offset: 53927},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1680, col: 13, offset: 53927},
									name: "BY",
								},
								&labeledExpr{
									pos:   position{line: 1680, col: 16, offset: 53930},
									label: "fieldList",
									expr: &ruleRefExpr{
										pos:  position{line: 1680, col: 26, offset: 53940},
										name: "FieldNameList",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1683, col: 3, offset: 53997},
						run: (*parser).callonByClause7,
						expr: &labeledExpr{
							pos:   position{line: 1683, col: 3, offset: 53997},
							label: "groupByBlock",
							expr: &ruleRefExpr{
								pos:  position{line: 1683, col: 16, offset: 54010},
								name: "GroupbyBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupBlock",
			pos:  position{line: 1687, col: 1, offset: 54068},
			expr: &actionExpr{
				pos: position{line: 1687, col: 15, offset: 54082},
				run: (*parser).callonDedupBlock1,
				expr: &seqExpr{
					pos: position{line: 1687, col: 15, offset: 54082},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1687, col: 15, offset: 54082},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1687, col: 20, offset: 54087},
							name: "CMD_DEDUP",
						},
						&labeledExpr{
							pos:   position{line: 1687, col: 30, offset: 54097},
							label: "dedupExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 1687, col: 40, offset: 54107},
								name: "DedupExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupExpr",
			pos:  position{line: 1707, col: 1, offset: 54675},
			expr: &actionExpr{
				pos: position{line: 1707, col: 14, offset: 54688},
				run: (*parser).callonDedupExpr1,
				expr: &seqExpr{
					pos: position{line: 1707, col: 14, offset: 54688},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1707, col: 14, offset: 54688},
							label: "limitArr",
							expr: &zeroOrOneExpr{
								pos: position{line: 1707, col: 23, offset: 54697},
								expr: &seqExpr{
									pos: position{line: 1707, col: 24, offset: 54698},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1707, col: 24, offset: 54698},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 1707, col: 30, offset: 54704},
											name: "IntegerAsString",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1707, col: 48, offset: 54722},
							label: "options1",
							expr: &zeroOrOneExpr{
								pos: position{line: 1707, col: 57, offset: 54731},
								expr: &ruleRefExpr{
									pos:  position{line: 1707, col: 58, offset: 54732},
									name: "DedupOptions",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1707, col: 73, offset: 54747},
							label: "fieldList",
							expr: &zeroOrOneExpr{
								pos: position{line: 1707, col: 83, offset: 54757},
								expr: &ruleRefExpr{
									pos:  position{line: 1707, col: 84, offset: 54758},
									name: "DedupFieldList",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1707, col: 101, offset: 54775},
							label: "options2",
							expr: &zeroOrOneExpr{
								pos: position{line: 1707, col: 110, offset: 54784},
								expr: &ruleRefExpr{
									pos:  position{line: 1707, col: 111, offset: 54785},
									name: "DedupOptions",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1707, col: 126, offset: 54800},
							label: "sortByClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 1707, col: 139, offset: 54813},
								expr: &ruleRefExpr{
									pos:  position{line: 1707, col: 140, offset: 54814},
									name: "DedupSortByClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DedupFieldName",
			pos:  position{line: 1764, col: 1, offset: 56552},
			expr: &actionExpr{
				pos: position{line: 1764, col: 19, offset: 56570},
				run: (*parser).callonDedupFieldName1,
				expr: &seqExpr{
					pos: position{line: 1764, col: 19, offset: 56570},
					exprs: []any{
						&notExpr{
							pos: position{line: 1764, col: 19, offset: 56570},
							expr: &litMatcher{
								pos:        position{line: 1764, col: 21, offset: 56572},
								val:        "sortby",
								ignoreCase: false,
								want:       "\"sortby\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1764, col: 31, offset: 56582},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1764, col: 37, offset: 56588},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupFieldList",
			pos:  position{line: 1768, col: 1, offset: 56625},
			expr: &actionExpr{
				pos: position{line: 1768, col: 19, offset: 56643},
				run: (*parser).callonDedupFieldList1,
				expr: &seqExpr{
					pos: position{line: 1768, col: 19, offset: 56643},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1768, col: 19, offset: 56643},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 1768, col: 25, offset: 56649},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1768, col: 31, offset: 56655},
								name: "DedupFieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 1768, col: 46, offset: 56670},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1768, col: 51, offset: 56675},
								expr: &seqExpr{
									pos: position{line: 1768, col: 52, offset: 56676},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1768, col: 52, offset: 56676},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 1768, col: 58, offset: 56682},
											name: "DedupFieldName",
										},
										&notExpr{
											pos: position{line: 1768, col: 73, offset: 56697},
											expr: &ruleRefExpr{
												pos:  position{line: 1768, col: 74, offset: 56698},
												name: "EQUAL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DedupOptions",
			pos:  position{line: 1786, col: 1, offset: 57226},
			expr: &actionExpr{
				pos: position{line: 1786, col: 17, offset: 57242},
				run: (*parser).callonDedupOptions1,
				expr: &labeledExpr{
					pos:   position{line: 1786, col: 17, offset: 57242},
					label: "option",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1786, col: 24, offset: 57249},
						expr: &ruleRefExpr{
							pos:  position{line: 1786, col: 25, offset: 57250},
							name: "DedupOption",
						},
					},
				},
			},
		},
		{
			name: "DedupOption",
			pos:  position{line: 1826, col: 1, offset: 58516},
			expr: &actionExpr{
				pos: position{line: 1826, col: 16, offset: 58531},
				run: (*parser).callonDedupOption1,
				expr: &seqExpr{
					pos: position{line: 1826, col: 16, offset: 58531},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1826, col: 16, offset: 58531},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 1826, col: 22, offset: 58537},
							label: "optionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 1826, col: 32, offset: 58547},
								name: "DedupOptionCMD",
							},
						},
						&litMatcher{
							pos:        position{line: 1826, col: 47, offset: 58562},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 1826, col: 51, offset: 58566},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1826, col: 57, offset: 58572},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupOptionCMD",
			pos:  position{line: 1831, col: 1, offset: 58681},
			expr: &actionExpr{
				pos: position{line: 1831, col: 19, offset: 58699},
				run: (*parser).callonDedupOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 1831, col: 19, offset: 58699},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 1831, col: 27, offset: 58707},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 1831, col: 27, offset: 58707},
								val:        "consecutive",
								ignoreCase: false,
								want:       "\"consecutive\"",
							},
							&litMatcher{
								pos:        position{line: 1831, col: 43, offset: 58723},
								val:        "keepempty",
								ignoreCase: false,
								want:       "\"keepempty\"",
							},
							&litMatcher{
								pos:        position{line: 1831, col: 57, offset: 58737},
								val:        "keepevents",
								ignoreCase: false,
								want:       "\"keepevents\"",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupSortByClause",
			pos:  position{line: 1839, col: 1, offset: 58922},
			expr: &actionExpr{
				pos: position{line: 1839, col: 22, offset: 58943},
				run: (*parser).callonDedupSortByClause1,
				expr: &seqExpr{
					pos: position{line: 1839, col: 22, offset: 58943},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1839, col: 22, offset: 58943},
							name: "CMD_DEDUP_SORTBY",
						},
						&labeledExpr{
							pos:   position{line: 1839, col: 39, offset: 58960},
							label: "dedupSortEles",
							expr: &ruleRefExpr{
								pos:  position{line: 1839, col: 53, offset: 58974},
								name: "SortElements",
							},
						},
					},
				},
			},
		},
		{
			name: "SortElements",
			pos:  position{line: 1844, col: 1, offset: 59082},
			expr: &actionExpr{
				pos: position{line: 1844, col: 17, offset: 59098},
				run: (*parser).callonSortElements1,
				expr: &seqExpr{
					pos: position{line: 1844, col: 17, offset: 59098},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1844, col: 17, offset: 59098},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1844, col: 23, offset: 59104},
								name: "SingleSortElement",
							},
						},
						&labeledExpr{
							pos:   position{line: 1844, col: 41, offset: 59122},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1844, col: 46, offset: 59127},
								expr: &seqExpr{
									pos: position{line: 1844, col: 47, offset: 59128},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1844, col: 47, offset: 59128},
											name: "SPACE_OR_COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 1844, col: 62, offset: 59143},
											name: "SingleSortElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleSortElement",
			pos:  position{line: 1859, col: 1, offset: 59501},
			expr: &actionExpr{
				pos: position{line: 1859, col: 22, offset: 59522},
				run: (*parser).callonSingleSortElement1,
				expr: &labeledExpr{
					pos:   position{line: 1859, col: 22, offset: 59522},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1859, col: 31, offset: 59531},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1859, col: 31, offset: 59531},
								name: "SingleSortElementWithCast",
							},
							&ruleRefExpr{
								pos:  position{line: 1859, col: 59, offset: 59559},
								name: "SingleSortElementWithoutCast",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleSortElementWithoutCast",
			pos:  position{line: 1863, col: 1, offset: 59618},
			expr: &actionExpr{
				pos: position{line: 1863, col: 33, offset: 59650},
				run: (*parser).callonSingleSortElementWithoutCast1,
				expr: &seqExpr{
					pos: position{line: 1863, col: 33, offset: 59650},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1863, col: 33, offset: 59650},
							label: "sortBySymbol",
							expr: &choiceExpr{
								pos: position{line: 1863, col: 47, offset: 59664},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 1863, col: 47, offset: 59664},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&litMatcher{
										pos:        position{line: 1863, col: 53, offset: 59670},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
									&litMatcher{
										pos:        position{line: 1863, col: 59, offset: 59676},
										val:        "",
										ignoreCase: false,
										want:       "\"\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1863, col: 63, offset: 59680},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1863, col: 69, offset: 59686},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleSortElementWithCast",
			pos:  position{line: 1878, col: 1, offset: 59961},
			expr: &actionExpr{
				pos: position{line: 1878, col: 30, offset: 59990},
				run: (*parser).callonSingleSortElementWithCast1,
				expr: &seqExpr{
					pos: position{line: 1878, col: 30, offset: 59990},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1878, col: 30, offset: 59990},
							label: "sortBySymbol",
							expr: &choiceExpr{
								pos: position{line: 1878, col: 44, offset: 60004},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 1878, col: 44, offset: 60004},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&litMatcher{
										pos:        position{line: 1878, col: 50, offset: 60010},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
									&litMatcher{
										pos:        position{line: 1878, col: 56, offset: 60016},
										val:        "",
										ignoreCase: false,
										want:       "\"\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1878, col: 60, offset: 60020},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 1878, col: 64, offset: 60024},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 1878, col: 64, offset: 60024},
										val:        "auto",
										ignoreCase: false,
										want:       "\"auto\"",
									},
									&litMatcher{
										pos:        position{line: 1878, col: 73, offset: 60033},
										val:        "str",
										ignoreCase: false,
										want:       "\"str\"",
									},
									&litMatcher{
										pos:        position{line: 1878, col: 81, offset: 60041},
										val:        "ip",
										ignoreCase: false,
										want:       "\"ip\"",
									},
									&litMatcher{
										pos:        position{line: 1878, col: 88, offset: 60048},
										val:        "num",
										ignoreCase: false,
										want:       "\"num\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1878, col: 95, offset: 60055},
							name: "L_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 1878, col: 103, offset: 60063},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1878, col: 109, offset: 60069},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1878, col: 119, offset: 60079},
							name: "R_PAREN",
						},
					},
				},
			},
		},
		{
			name: "RenameBlock",
			pos:  position{line: 1898, col: 1, offset: 60504},
			expr: &actionExpr{
				pos: position{line: 1898, col: 16, offset: 60519},
				run: (*parser).callonRenameBlock1,
				expr: &seqExpr{
					pos: position{line: 1898, col: 16, offset: 60519},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1898, col: 16, offset: 60519},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1898, col: 21, offset: 60524},
							name: "CMD_RENAME",
						},
						&labeledExpr{
							pos:   position{line: 1898, col: 32, offset: 60535},
							label: "renameExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 1898, col: 43, offset: 60546},
								name: "RenameExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameExpr",
			pos:  position{line: 1914, col: 1, offset: 60921},
			expr: &choiceExpr{
				pos: position{line: 1914, col: 15, offset: 60935},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1914, col: 15, offset: 60935},
						run: (*parser).callonRenameExpr2,
						expr: &seqExpr{
							pos: position{line: 1914, col: 15, offset: 60935},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1914, col: 15, offset: 60935},
									label: "originalPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1914, col: 31, offset: 60951},
										name: "RenamePattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1914, col: 45, offset: 60965},
									name: "AS",
								},
								&labeledExpr{
									pos:   position{line: 1914, col: 48, offset: 60968},
									label: "newPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1914, col: 59, offset: 60979},
										name: "QuotedString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1925, col: 3, offset: 61298},
						run: (*parser).callonRenameExpr9,
						expr: &seqExpr{
							pos: position{line: 1925, col: 3, offset: 61298},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1925, col: 3, offset: 61298},
									label: "originalPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1925, col: 19, offset: 61314},
										name: "RenamePattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1925, col: 33, offset: 61328},
									name: "AS",
								},
								&labeledExpr{
									pos:   position{line: 1925, col: 36, offset: 61331},
									label: "newPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1925, col: 47, offset: 61342},
										name: "RenamePattern",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RexBlock",
			pos:  position{line: 1947, col: 1, offset: 61908},
			expr: &actionExpr{
				pos: position{line: 1947, col: 13, offset: 61920},
				run: (*parser).callonRexBlock1,
				expr: &seqExpr{
					pos: position{line: 1947, col: 13, offset: 61920},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1947, col: 13, offset: 61920},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1947, col: 18, offset: 61925},
							name: "CMD_REX",
						},
						&litMatcher{
							pos:        position{line: 1947, col: 26, offset: 61933},
							val:        "field",
							ignoreCase: false,
							want:       "\"field\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1947, col: 34, offset: 61941},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1947, col: 40, offset: 61947},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1947, col: 46, offset: 61953},
								name: "EvalFieldToRead",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1947, col: 62, offset: 61969},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 1947, col: 68, offset: 61975},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 1947, col: 72, offset: 61979},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "SortBlock",
			pos:  position{line: 1975, col: 1, offset: 62682},
			expr: &actionExpr{
				pos: position{line: 1975, col: 14, offset: 62695},
				run: (*parser).callonSortBlock1,
				expr: &seqExpr{
					pos: position{line: 1975, col: 14, offset: 62695},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1975, col: 14, offset: 62695},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1975, col: 19, offset: 62700},
							name: "CMD_SORT",
						},
						&labeledExpr{
							pos:   position{line: 1975, col: 28, offset: 62709},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 1975, col: 34, offset: 62715},
								expr: &ruleRefExpr{
									pos:  position{line: 1975, col: 35, offset: 62716},
									name: "SortLimit",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1975, col: 47, offset: 62728},
							label: "sortByEles",
							expr: &ruleRefExpr{
								pos:  position{line: 1975, col: 58, offset: 62739},
								name: "SortElements",
							},
						},
					},
				},
			},
		},
		{
			name: "SortLimit",
			pos:  position{line: 2012, col: 1, offset: 63590},
			expr: &actionExpr{
				pos: position{line: 2012, col: 14, offset: 63603},
				run: (*parser).callonSortLimit1,
				expr: &seqExpr{
					pos: position{line: 2012, col: 14, offset: 63603},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 2012, col: 14, offset: 63603},
							expr: &seqExpr{
								pos: position{line: 2012, col: 15, offset: 63604},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 2012, col: 15, offset: 63604},
										val:        "limit",
										ignoreCase: false,
										want:       "\"limit\"",
									},
									&ruleRefExpr{
										pos:  position{line: 2012, col: 23, offset: 63612},
										name: "EQUAL",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2012, col: 31, offset: 63620},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 2012, col: 40, offset: 63629},
								name: "IntegerAsString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2012, col: 56, offset: 63645},
							name: "SPACE",
						},
					},
				},
			},
		},
		{
			name: "EvalBlock",
			pos:  position{line: 2026, col: 1, offset: 63944},
			expr: &actionExpr{
				pos: position{line: 2026, col: 14, offset: 63957},
				run: (*parser).callonEvalBlock1,
				expr: &seqExpr{
					pos: position{line: 2026, col: 14, offset: 63957},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2026, col: 14, offset: 63957},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 2026, col: 19, offset: 63962},
							name: "CMD_EVAL",
						},
						&labeledExpr{
							pos:   position{line: 2026, col: 28, offset: 63971},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2026, col: 34, offset: 63977},
								name: "SingleEval",
							},
						},
						&labeledExpr{
							pos:   position{line: 2026, col: 45, offset: 63988},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2026, col: 50, offset: 63993},
								expr: &seqExpr{
									pos: position{line: 2026, col: 51, offset: 63994},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 2026, col: 51, offset: 63994},
											name: "COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 2026, col: 57, offset: 64000},
											name: "SingleEval",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleEval",
			pos:  position{line: 2053, col: 1, offset: 64801},
			expr: &actionExpr{
				pos: position{line: 2053, col: 15, offset: 64815},
				run: (*parser).callonSingleEval1,
				expr: &seqExpr{
					pos: position{line: 2053, col: 15, offset: 64815},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2053, col: 15, offset: 64815},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 2053, col: 21, offset: 64821},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2053, col: 31, offset: 64831},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 2053, col: 37, offset: 64837},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 2053, col: 42, offset: 64842},
								name: "EvalExpression",
							},
						},
					},
				},
			},
		},
		{
			name: "EvalExpression",
			pos:  position{line: 2066, col: 1, offset: 65243},
			expr: &actionExpr{
				pos: position{line: 2066, col: 19, offset: 65261},
				run: (*parser).callonEvalExpression1,
				expr: &labeledExpr{
					pos:   position{line: 2066, col: 19, offset: 65261},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 2066, col: 25, offset: 65267},
						name: "ValueExpr",
					},
				},
			},
		},
		{
			name: "ConditionExpr",
			pos:  position{line: 2075, col: 1, offset: 65491},
			expr: &choiceExpr{
				pos: position{line: 2075, col: 18, offset: 65508},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2075, col: 18, offset: 65508},
						run: (*parser).callonConditionExpr2,
						expr: &seqExpr{
							pos: position{line: 2075, col: 18, offset: 65508},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2075, col: 18, offset: 65508},
									val:        "if",
									ignoreCase: false,
									want:       "\"if\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2075, col: 23, offset: 65513},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2075, col: 31, offset: 65521},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 2075, col: 41, offset: 65531},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2075, col: 50, offset: 65540},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2075, col: 56, offset: 65546},
									label: "trueValue",
									expr: &ruleRefExpr{
										pos:  position{line: 2075, col: 66, offset: 65556},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2075, col: 76, offset: 65566},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2075, col: 82, offset: 65572},
									label: "falseValue",
									expr: &ruleRefExpr{
										pos:  position{line: 2075, col: 93, offset: 65583},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2075, col: 103, offset: 65593},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2086, col: 3, offset: 65844},
						run: (*parser).callonConditionExpr15,
						expr: &seqExpr{
							pos: position{line: 2086, col: 3, offset: 65844},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2086, col: 3, offset: 65844},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2086, col: 11, offset: 65852},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2086, col: 11, offset: 65852},
												val:        "case",
												ignoreCase: false,
												want:       "\"case\"",
											},
											&litMatcher{
												pos:        position{line: 2086, col: 20, offset: 65861},
												val:        "validate",
												ignoreCase: false,
												want:       "\"validate\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2086, col: 32, offset: 65873},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2086, col: 40, offset: 65881},
									label: "pair",
									expr: &ruleRefExpr{
										pos:  position{line: 2086, col: 45, offset: 65886},
										name: "ConditionValuePair",
									},
								},
								&labeledExpr{
									pos:   position{line: 2086, col: 64, offset: 65905},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2086, col: 69, offset: 65910},
										expr: &seqExpr{
											pos: position{line: 2086, col: 70, offset: 65911},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2086, col: 70, offset: 65911},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2086, col: 76, offset: 65917},
													name: "ConditionValuePair",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2086, col: 97, offset: 65938},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2109, col: 3, offset: 66542},
						run: (*parser).callonConditionExpr30,
						expr: &seqExpr{
							pos: position{line: 2109, col: 3, offset: 66542},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2109, col: 3, offset: 66542},
									val:        "coalesce",
									ignoreCase: false,
									want:       "\"coalesce\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2109, col: 14, offset: 66553},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2109, col: 22, offset: 66561},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2109, col: 32, offset: 66571},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2109, col: 42, offset: 66581},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2109, col: 47, offset: 66586},
										expr: &seqExpr{
											pos: position{line: 2109, col: 48, offset: 66587},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2109, col: 48, offset: 66587},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2109, col: 54, offset: 66593},
													name: "ValueExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2109, col: 66, offset: 66605},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2126, col: 3, offset: 67024},
						run: (*parser).callonConditionExpr42,
						expr: &seqExpr{
							pos: position{line: 2126, col: 3, offset: 67024},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2126, col: 3, offset: 67024},
									val:        "nullif",
									ignoreCase: false,
									want:       "\"nullif\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2126, col: 12, offset: 67033},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2126, col: 20, offset: 67041},
									label: "leftValue",
									expr: &ruleRefExpr{
										pos:  position{line: 2126, col: 30, offset: 67051},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2126, col: 40, offset: 67061},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2126, col: 46, offset: 67067},
									label: "rightValue",
									expr: &ruleRefExpr{
										pos:  position{line: 2126, col: 57, offset: 67078},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2126, col: 67, offset: 67088},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConditionValuePair",
			pos:  position{line: 2139, col: 1, offset: 67367},
			expr: &actionExpr{
				pos: position{line: 2139, col: 23, offset: 67389},
				run: (*parser).callonConditionValuePair1,
				expr: &seqExpr{
					pos: position{line: 2139, col: 23, offset: 67389},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2139, col: 23, offset: 67389},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 2139, col: 33, offset: 67399},
								name: "BoolExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2139, col: 42, offset: 67408},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 2139, col: 48, offset: 67414},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 2139, col: 54, offset: 67420},
								name: "ValueExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "TextExpr",
			pos:  position{line: 2149, col: 1, offset: 67861},
			expr: &choiceExpr{
				pos: position{line: 2149, col: 13, offset: 67873},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2149, col: 13, offset: 67873},
						run: (*parser).callonTextExpr2,
						expr: &seqExpr{
							pos: position{line: 2149, col: 14, offset: 67874},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2149, col: 14, offset: 67874},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2149, col: 22, offset: 67882},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2149, col: 22, offset: 67882},
												val:        "lower",
												ignoreCase: false,
												want:       "\"lower\"",
											},
											&litMatcher{
												pos:        position{line: 2149, col: 32, offset: 67892},
												val:        "upper",
												ignoreCase: false,
												want:       "\"upper\"",
											},
											&litMatcher{
												pos:        position{line: 2149, col: 42, offset: 67902},
												val:        "urldecode",
												ignoreCase: false,
												want:       "\"urldecode\"",
											},
											&litMatcher{
												pos:        position{line: 2149, col: 56, offset: 67916},
												val:        "mvcount",
												ignoreCase: false,
												want:       "\"mvcount\"",
											},
											&litMatcher{
												pos:        position{line: 2149, col: 68, offset: 67928},
												val:        "mvdedup",
												ignoreCase: false,
												want:       "\"mvdedup\"",
											},
											&litMatcher{
												pos:        position{line: 2149, col: 80, offset: 67940},
												val:        "mvsort",
												ignoreCase: false,
												want:       "\"mvsort\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2149, col: 90, offset: 67950},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2149, col: 98, offset: 67958},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2149, col: 109, offset: 67969},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2149, col: 120, offset: 67980},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2161, col: 3, offset: 68294},
						run: (*parser).callonTextExpr16,
						expr: &seqExpr{
							pos: position{line: 2161, col: 4, offset: 68295},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2161, col: 4, offset: 68295},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2161, col: 12, offset: 68303},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2161, col: 12, offset: 68303},
												val:        "max",
												ignoreCase: false,
												want:       "\"max\"",
											},
											&litMatcher{
												pos:        position{line: 2161, col: 20, offset: 68311},
												val:        "min",
												ignoreCase: false,
												want:       "\"min\"",
											},
											&litMatcher{
												pos:        position{line: 2161, col: 28, offset: 68319},
												val:        "mvappend",
												ignoreCase: false,
												want:       "\"mvappend\"",
											},
											&litMatcher{
												pos:        position{line: 2161, col: 41, offset: 68332},
												val:        "mvfind",
												ignoreCase: false,
												want:       "\"mvfind\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2161, col: 51, offset: 68342},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2161, col: 59, offset: 68350},
									label: "firstVal",
									expr: &ruleRefExpr{
										pos:  position{line: 2161, col: 68, offset: 68359},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2161, col: 79, offset: 68370},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2161, col: 84, offset: 68375},
										expr: &seqExpr{
											pos: position{line: 2161, col: 85, offset: 68376},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2161, col: 85, offset: 68376},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2161, col: 91, offset: 68382},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2161, col: 104, offset: 68395},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2183, col: 3, offset: 68995},
						run: (*parser).callonTextExpr33,
						expr: &seqExpr{
							pos: position{line: 2183, col: 4, offset: 68996},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2183, col: 4, offset: 68996},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2183, col: 12, offset: 69004},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2183, col: 12, offset: 69004},
												val:        "split",
												ignoreCase: false,
												want:       "\"split\"",
											},
											&litMatcher{
												pos:        position{line: 2183, col: 22, offset: 69014},
												val:        "mvjoin",
												ignoreCase: false,
												want:       "\"mvjoin\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2183, col: 32, offset: 69024},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2183, col: 40, offset: 69032},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2183, col: 51, offset: 69043},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2183, col: 62, offset: 69054},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2183, col: 68, offset: 69060},
									label: "delim",
									expr: &ruleRefExpr{
										pos:  position{line: 2183, col: 74, offset: 69066},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2183, col: 85, offset: 69077},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2195, col: 3, offset: 69410},
						run: (*parser).callonTextExpr46,
						expr: &seqExpr{
							pos: position{line: 2195, col: 4, offset: 69411},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2195, col: 4, offset: 69411},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2195, col: 12, offset: 69419},
										val:        "substr",
										ignoreCase: false,
										want:       "\"substr\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2195, col: 22, offset: 69429},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2195, col: 30, offset: 69437},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2195, col: 41, offset: 69448},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2195, col: 52, offset: 69459},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2195, col: 58, offset: 69465},
									label: "startIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 2195, col: 69, offset: 69476},
										name: "NumericExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2195, col: 81, offset: 69488},
									label: "lengthParam",
									expr: &zeroOrOneExpr{
										pos: position{line: 2195, col: 93, offset: 69500},
										expr: &seqExpr{
											pos: position{line: 2195, col: 94, offset: 69501},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2195, col: 94, offset: 69501},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2195, col: 100, offset: 69507},
													name: "NumericExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2195, col: 114, offset: 69521},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2220, col: 3, offset: 70351},
						run: (*parser).callonTextExpr62,
						expr: &seqExpr{
							pos: position{line: 2220, col: 3, offset: 70351},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2220, col: 3, offset: 70351},
									val:        "tostring",
									ignoreCase: false,
									want:       "\"tostring\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2220, col: 14, offset: 70362},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2220, col: 22, offset: 70370},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 2220, col: 28, offset: 70376},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2220, col: 38, offset: 70386},
									label: "format",
									expr: &zeroOrOneExpr{
										pos: position{line: 2220, col: 45, offset: 70393},
										expr: &seqExpr{
											pos: position{line: 2220, col: 46, offset: 70394},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2220, col: 46, offset: 70394},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2220, col: 52, offset: 70400},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2220, col: 65, offset: 70413},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2233, col: 3, offset: 70781},
						run: (*parser).callonTextExpr74,
						expr: &seqExpr{
							pos: position{line: 2233, col: 4, offset: 70782},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2233, col: 4, offset: 70782},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2233, col: 12, offset: 70790},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2233, col: 12, offset: 70790},
												val:        "ltrim",
												ignoreCase: false,
												want:       "\"ltrim\"",
											},
											&litMatcher{
												pos:        position{line: 2233, col: 22, offset: 70800},
												val:        "rtrim",
												ignoreCase: false,
												want:       "\"rtrim\"",
											},
											&litMatcher{
												pos:        position{line: 2233, col: 32, offset: 70810},
												val:        "trim",
												ignoreCase: false,
												want:       "\"trim\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2233, col: 40, offset: 70818},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2233, col: 48, offset: 70826},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2233, col: 54, offset: 70832},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2233, col: 66, offset: 70844},
									label: "strToRemoveExpr",
									expr: &zeroOrOneExpr{
										pos: position{line: 2233, col: 82, offset: 70860},
										expr: &ruleRefExpr{
											pos:  position{line: 2233, col: 83, offset: 70861},
											name: "StrToRemoveExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2233, col: 101, offset: 70879},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2252, col: 3, offset: 71319},
						run: (*parser).callonTextExpr88,
						expr: &seqExpr{
							pos: position{line: 2252, col: 3, offset: 71319},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2252, col: 3, offset: 71319},
									val:        "spath",
									ignoreCase: false,
									want:       "\"spath\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2252, col: 11, offset: 71327},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2252, col: 19, offset: 71335},
									label: "inputField",
									expr: &ruleRefExpr{
										pos:  position{line: 2252, col: 30, offset: 71346},
										name: "FieldNameStartWith_",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2252, col: 50, offset: 71366},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2252, col: 56, offset: 71372},
									label: "path",
									expr: &choiceExpr{
										pos: position{line: 2252, col: 62, offset: 71378},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2252, col: 62, offset: 71378},
												name: "QuotedPathString",
											},
											&ruleRefExpr{
												pos:  position{line: 2252, col: 81, offset: 71397},
												name: "UnquotedPathValue",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2252, col: 100, offset: 71416},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2263, col: 3, offset: 71721},
						run: (*parser).callonTextExpr100,
						expr: &seqExpr{
							pos: position{line: 2263, col: 3, offset: 71721},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2263, col: 3, offset: 71721},
									val:        "ipmask",
									ignoreCase: false,
									want:       "\"ipmask\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2263, col: 12, offset: 71730},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2263, col: 20, offset: 71738},
									label: "mask",
									expr: &ruleRefExpr{
										pos:  position{line: 2263, col: 25, offset: 71743},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2263, col: 36, offset: 71754},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2263, col: 42, offset: 71760},
									label: "ip",
									expr: &ruleRefExpr{
										pos:  position{line: 2263, col: 45, offset: 71763},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2263, col: 55, offset: 71773},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2270, col: 3, offset: 71931},
						run: (*parser).callonTextExpr110,
						expr: &seqExpr{
							pos: position{line: 2270, col: 3, offset: 71931},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2270, col: 3, offset: 71931},
									val:        "object_to_array",
									ignoreCase: false,
									want:       "\"object_to_array\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2270, col: 21, offset: 71949},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2270, col: 29, offset: 71957},
									label: "obj",
									expr: &ruleRefExpr{
										pos:  position{line: 2270, col: 33, offset: 71961},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2270, col: 43, offset: 71971},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2270, col: 49, offset: 71977},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 2270, col: 53, offset: 71981},
										name: "QuotedString",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2270, col: 66, offset: 71994},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2270, col: 72, offset: 72000},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 2270, col: 78, offset: 72006},
										name: "QuotedString",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2270, col: 91, offset: 72019},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2281, col: 3, offset: 72327},
						run: (*parser).callonTextExpr123,
						expr: &seqExpr{
							pos: position{line: 2281, col: 3, offset: 72327},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2281, col: 3, offset: 72327},
									val:        "printf",
									ignoreCase: false,
									want:       "\"printf\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2281, col: 12, offset: 72336},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2281, col: 20, offset: 72344},
									label: "format",
									expr: &ruleRefExpr{
										pos:  position{line: 2281, col: 27, offset: 72351},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2281, col: 38, offset: 72362},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2281, col: 43, offset: 72367},
										expr: &seqExpr{
											pos: position{line: 2281, col: 44, offset: 72368},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2281, col: 44, offset: 72368},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2281, col: 50, offset: 72374},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2281, col: 63, offset: 72387},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2299, col: 3, offset: 72854},
						run: (*parser).callonTextExpr135,
						expr: &seqExpr{
							pos: position{line: 2299, col: 3, offset: 72854},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2299, col: 3, offset: 72854},
									val:        "tojson",
									ignoreCase: false,
									want:       "\"tojson\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2299, col: 12, offset: 72863},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2299, col: 20, offset: 72871},
									label: "containInternalFields",
									expr: &zeroOrOneExpr{
										pos: position{line: 2299, col: 42, offset: 72893},
										expr: &seqExpr{
											pos: position{line: 2299, col: 43, offset: 72894},
											exprs: []any{
												&choiceExpr{
													pos: position{line: 2299, col: 44, offset: 72895},
													alternatives: []any{
														&litMatcher{
															pos:        position{line: 2299, col: 44, offset: 72895},
															val:        "true",
															ignoreCase: false,
															want:       "\"true\"",
														},
														&litMatcher{
															pos:        position{line: 2299, col: 53, offset: 72904},
															val:        "false",
															ignoreCase: false,
															want:       "\"false\"",
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2299, col: 62, offset: 72913},
													val:        "()",
													ignoreCase: false,
													want:       "\"()\"",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2299, col: 69, offset: 72920},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2321, col: 3, offset: 73517},
						run: (*parser).callonTextExpr147,
						expr: &seqExpr{
							pos: position{line: 2321, col: 4, offset: 73518},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2321, col: 4, offset: 73518},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2321, col: 12, offset: 73526},
										val:        "mvfilter",
										ignoreCase: false,
										want:       "\"mvfilter\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2321, col: 24, offset: 73538},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2321, col: 32, offset: 73546},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 2321, col: 42, offset: 73556},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2321, col: 51, offset: 73565},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2334, col: 3, offset: 73900},
						run: (*parser).callonTextExpr155,
						expr: &seqExpr{
							pos: position{line: 2334, col: 4, offset: 73901},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2334, col: 4, offset: 73901},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2334, col: 12, offset: 73909},
										val:        "mvindex",
										ignoreCase: false,
										want:       "\"mvindex\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2334, col: 23, offset: 73920},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2334, col: 31, offset: 73928},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2334, col: 42, offset: 73939},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2334, col: 53, offset: 73950},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2334, col: 59, offset: 73956},
									label: "startIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 2334, col: 70, offset: 73967},
										name: "NumericExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2334, col: 82, offset: 73979},
									label: "endIndex",
									expr: &zeroOrOneExpr{
										pos: position{line: 2334, col: 91, offset: 73988},
										expr: &ruleRefExpr{
											pos:  position{line: 2334, col: 92, offset: 73989},
											name: "NumericParamExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2334, col: 111, offset: 74008},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2350, col: 3, offset: 74436},
						run: (*parser).callonTextExpr169,
						expr: &seqExpr{
							pos: position{line: 2350, col: 4, offset: 74437},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2350, col: 4, offset: 74437},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2350, col: 12, offset: 74445},
										val:        "mvmap",
										ignoreCase: false,
										want:       "\"mvmap\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2350, col: 21, offset: 74454},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2350, col: 29, offset: 74462},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2350, col: 40, offset: 74473},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2350, col: 51, offset: 74484},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2350, col: 57, offset: 74490},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2350, col: 62, offset: 74495},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2350, col: 72, offset: 74505},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2363, col: 3, offset: 74831},
						run: (*parser).callonTextExpr180,
						expr: &seqExpr{
							pos: position{line: 2363, col: 4, offset: 74832},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2363, col: 4, offset: 74832},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2363, col: 12, offset: 74840},
										val:        "mvrange",
										ignoreCase: false,
										want:       "\"mvrange\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2363, col: 23, offset: 74851},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2363, col: 31, offset: 74859},
									label: "startIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 2363, col: 42, offset: 74870},
										name: "NumericExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2363, col: 54, offset: 74882},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2363, col: 60, offset: 74888},
									label: "endIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 2363, col: 69, offset: 74897},
										name: "NumericExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2363, col: 81, offset: 74909},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2363, col: 87, offset: 74915},
									label: "stringExpr",
									expr: &zeroOrOneExpr{
										pos: position{line: 2363, col: 98, offset: 74926},
										expr: &ruleRefExpr{
											pos:  position{line: 2363, col: 99, offset: 74927},
											name: "StringExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2363, col: 112, offset: 74940},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2379, col: 3, offset: 75370},
						run: (*parser).callonTextExpr195,
						expr: &seqExpr{
							pos: position{line: 2379, col: 4, offset: 75371},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2379, col: 4, offset: 75371},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2379, col: 12, offset: 75379},
										val:        "mvzip",
										ignoreCase: false,
										want:       "\"mvzip\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2379, col: 21, offset: 75388},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2379, col: 29, offset: 75396},
									label: "mvLeft",
									expr: &ruleRefExpr{
										pos:  position{line: 2379, col: 36, offset: 75403},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2379, col: 47, offset: 75414},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2379, col: 53, offset: 75420},
									label: "mvRight",
									expr: &ruleRefExpr{
										pos:  position{line: 2379, col: 61, offset: 75428},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2379, col: 72, offset: 75439},
									label: "rest",
									expr: &zeroOrOneExpr{
										pos: position{line: 2379, col: 77, offset: 75444},
										expr: &seqExpr{
											pos: position{line: 2379, col: 78, offset: 75445},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2379, col: 78, offset: 75445},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2379, col: 84, offset: 75451},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2379, col: 97, offset: 75464},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2400, col: 3, offset: 75988},
						run: (*parser).callonTextExpr211,
						expr: &seqExpr{
							pos: position{line: 2400, col: 4, offset: 75989},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2400, col: 4, offset: 75989},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2400, col: 12, offset: 75997},
										val:        "mv_to_json_array",
										ignoreCase: false,
										want:       "\"mv_to_json_array\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2400, col: 32, offset: 76017},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2400, col: 40, offset: 76025},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2400, col: 51, offset: 76036},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2400, col: 62, offset: 76047},
									label: "rest",
									expr: &zeroOrOneExpr{
										pos: position{line: 2400, col: 67, offset: 76052},
										expr: &seqExpr{
											pos: position{line: 2400, col: 68, offset: 76053},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2400, col: 68, offset: 76053},
													name: "COMMA",
												},
												&choiceExpr{
													pos: position{line: 2400, col: 75, offset: 76060},
													alternatives: []any{
														&litMatcher{
															pos:        position{line: 2400, col: 75, offset: 76060},
															val:        "true",
															ignoreCase: false,
															want:       "\"true\"",
														},
														&litMatcher{
															pos:        position{line: 2400, col: 84, offset: 76069},
															val:        "false",
															ignoreCase: false,
															want:       "\"false\"",
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2400, col: 93, offset: 76078},
													val:        "()",
													ignoreCase: false,
													want:       "\"()\"",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2400, col: 100, offset: 76085},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2425, col: 3, offset: 76720},
						run: (*parser).callonTextExpr227,
						expr: &seqExpr{
							pos: position{line: 2425, col: 3, offset: 76720},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2425, col: 3, offset: 76720},
									val:        "cluster",
									ignoreCase: false,
									want:       "\"cluster\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2425, col: 13, offset: 76730},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2425, col: 21, offset: 76738},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2425, col: 27, offset: 76744},
										name: "EvalFieldToRead",
									},
								},
								&labeledExpr{
									pos:   position{line: 2425, col: 43, offset: 76760},
									label: "threshold",
									expr: &zeroOrOneExpr{
										pos: position{line: 2425, col: 53, offset: 76770},
										expr: &seqExpr{
											pos: position{line: 2425, col: 54, offset: 76771},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2425, col: 54, offset: 76771},
													name: "COMMA",
												},
												&litMatcher{
													pos:        position{line: 2425, col: 60, offset: 76777},
													val:        "threshold:",
													ignoreCase: false,
													want:       "\"threshold:\"",
												},
												&ruleRefExpr{
													pos:  position{line: 2425, col: 73, offset: 76790},
													name: "FloatAsString",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2425, col: 89, offset: 76806},
									label: "match",
									expr: &zeroOrOneExpr{
										pos: position{line: 2425, col: 95, offset: 76812},
										expr: &seqExpr{
											pos: position{line: 2425, col: 96, offset: 76813},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2425, col: 96, offset: 76813},
													name: "COMMA",
												},
												&litMatcher{
													pos:        position{line: 2425, col: 102, offset: 76819},
													val:        "match:",
													ignoreCase: false,
													want:       "\"match:\"",
												},
												&choiceExpr{
													pos: position{line: 2425, col: 112, offset: 76829},
													alternatives: []any{
														&litMatcher{
															pos:        position{line: 2425, col: 112, offset: 76829},
															val:        "termlist",
															ignoreCase: false,
															want:       "\"termlist\"",
														},
														&litMatcher{
															pos:        position{line: 2425, col: 125, offset: 76842},
															val:        "termset",
															ignoreCase: false,
															want:       "\"termset\"",
														},
														&litMatcher{
															pos:        position{line: 2425, col: 137, offset: 76854},
															val:        "ngramset",
															ignoreCase: false,
															want:       "\"ngramset\"",
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2425, col: 151, offset: 76868},
									label: "delims",
									expr: &zeroOrOneExpr{
										pos: position{line: 2425, col: 158, offset: 76875},
										expr: &seqExpr{
											pos: position{line: 2425, col: 159, offset: 76876},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2425, col: 159, offset: 76876},
													name: "COMMA",
												},
												&litMatcher{
													pos:        position{line: 2425, col: 165, offset: 76882},
													val:        "delims:",
													ignoreCase: false,
													want:       "\"delims:\"",
												},
												&ruleRefExpr{
													pos:  position{line: 2425, col: 175, offset: 76892},
													name: "QuotedString",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2425, col: 190, offset: 76907},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2465, col: 3, offset: 77902},
						run: (*parser).callonTextExpr255,
						expr: &seqExpr{
							pos: position{line: 2465, col: 3, offset: 77902},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2465, col: 3, offset: 77902},
									val:        "getfields",
									ignoreCase: false,
									want:       "\"getfields\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2465, col: 15, offset: 77914},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2465, col: 23, offset: 77922},
									label: "filter",
									expr: &zeroOrOneExpr{
										pos: position{line: 2465, col: 30, offset: 77929},
										expr: &ruleRefExpr{
											pos:  position{line: 2465, col: 31, offset: 77930},
											name: "StringExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2465, col: 44, offset: 77943},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2476, col: 3, offset: 78134},
						run: (*parser).callonTextExpr263,
						expr: &seqExpr{
							pos: position{line: 2476, col: 3, offset: 78134},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2476, col: 3, offset: 78134},
									val:        "typeof",
									ignoreCase: false,
									want:       "\"typeof\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2476, col: 12, offset: 78143},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2476, col: 20, offset: 78151},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2476, col: 30, offset: 78161},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2476, col: 40, offset: 78171},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2482, col: 3, offset: 78294},
						run: (*parser).callonTextExpr270,
						expr: &seqExpr{
							pos: position{line: 2482, col: 3, offset: 78294},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2482, col: 3, offset: 78294},
									val:        "replace",
									ignoreCase: false,
									want:       "\"replace\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2482, col: 13, offset: 78304},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2482, col: 21, offset: 78312},
									label: "val",
									expr: &ruleRefExpr{
										pos:  position{line: 2482, col: 25, offset: 78316},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2482, col: 35, offset: 78326},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2482, col: 41, offset: 78332},
									label: "regex",
									expr: &ruleRefExpr{
										pos:  position{line: 2482, col: 47, offset: 78338},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2482, col: 58, offset: 78349},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2482, col: 64, offset: 78355},
									label: "replacement",
									expr: &ruleRefExpr{
										pos:  position{line: 2482, col: 76, offset: 78367},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2482, col: 87, offset: 78378},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2489, col: 3, offset: 78602},
						run: (*parser).callonTextExpr283,
						expr: &seqExpr{
							pos: position{line: 2489, col: 3, offset: 78602},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2489, col: 3, offset: 78602},
									val:        "strftime",
									ignoreCase: false,
									want:       "\"strftime\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2489, col: 14, offset: 78613},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2489, col: 22, offset: 78621},
									label: "val",
									expr: &ruleRefExpr{
										pos:  position{line: 2489, col: 26, offset: 78625},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2489, col: 36, offset: 78635},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2489, col: 42, offset: 78641},
									label: "format",
									expr: &ruleRefExpr{
										pos:  position{line: 2489, col: 49, offset: 78648},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2489, col: 60, offset: 78659},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2497, col: 3, offset: 78823},
						run: (*parser).callonTextExpr293,
						expr: &seqExpr{
							pos: position{line: 2497, col: 3, offset: 78823},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2497, col: 3, offset: 78823},
									val:        "strptime",
									ignoreCase: false,
									want:       "\"strptime\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2497, col: 14, offset: 78834},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2497, col: 22, offset: 78842},
									label: "val",
									expr: &ruleRefExpr{
										pos:  position{line: 2497, col: 26, offset: 78846},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2497, col: 36, offset: 78856},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2497, col: 42, offset: 78862},
									label: "format",
									expr: &ruleRefExpr{
										pos:  position{line: 2497, col: 49, offset: 78869},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2497, col: 60, offset: 78880},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedPathString",
			pos:  position{line: 2505, col: 1, offset: 79042},
			expr: &actionExpr{
				pos: position{line: 2505, col: 21, offset: 79062},
				run: (*parser).callonQuotedPathString1,
				expr: &labeledExpr{
					pos:   position{line: 2505, col: 21, offset: 79062},
					label: "str",
					expr: &ruleRefExpr{
						pos:  position{line: 2505, col: 25, offset: 79066},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "UnquotedPathValue",
			pos:  position{line: 2512, col: 1, offset: 79193},
			expr: &actionExpr{
				pos: position{line: 2512, col: 22, offset: 79214},
				run: (*parser).callonUnquotedPathValue1,
				expr: &labeledExpr{
					pos:   position{line: 2512, col: 22, offset: 79214},
					label: "str",
					expr: &ruleRefExpr{
						pos:  position{line: 2512, col: 26, offset: 79218},
						name: "UnquotedString",
					},
				},
			},
		},
		{
			name: "StrToRemoveExpr",
			pos:  position{line: 2519, col: 1, offset: 79346},
			expr: &actionExpr{
				pos: position{line: 2519, col: 20, offset: 79365},
				run: (*parser).callonStrToRemoveExpr1,
				expr: &seqExpr{
					pos: position{line: 2519, col: 20, offset: 79365},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2519, col: 20, offset: 79365},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 2519, col: 26, offset: 79371},
							label: "strToRemove",
							expr: &ruleRefExpr{
								pos:  position{line: 2519, col: 38, offset: 79383},
								name: "String",
							},
						},
					},
				},
			},
		},
		{
			name: "EvalFieldToRead",
			pos:  position{line: 2525, col: 1, offset: 79568},
			expr: &choiceExpr{
				pos: position{line: 2525, col: 20, offset: 79587},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2525, col: 20, offset: 79587},
						run: (*parser).callonEvalFieldToRead2,
						expr: &seqExpr{
							pos: position{line: 2525, col: 20, offset: 79587},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 2525, col: 20, offset: 79587},
									expr: &charClassMatcher{
										pos:        position{line: 2525, col: 20, offset: 79587},
										val:        "[a-zA-Z_]",
										chars:      []rune{'_'},
										ranges:     []rune{'a', 'z', 'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&notExpr{
									pos: position{line: 2525, col: 31, offset: 79598},
									expr: &litMatcher{
										pos:        position{line: 2525, col: 33, offset: 79600},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2528, col: 3, offset: 79642},
						run: (*parser).callonEvalFieldToRead8,
						expr: &seqExpr{
							pos: position{line: 2528, col: 3, offset: 79642},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2528, col: 3, offset: 79642},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&labeledExpr{
									pos:   position{line: 2528, col: 7, offset: 79646},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2528, col: 13, offset: 79652},
										name: "FieldName",
									},
								},
								&litMatcher{
									pos:        position{line: 2528, col: 23, offset: 79662},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "WhereBlock",
			pos:  position{line: 2533, col: 1, offset: 79730},
			expr: &actionExpr{
				pos: position{line: 2533, col: 15, offset: 79744},
				run: (*parser).callonWhereBlock1,
				expr: &seqExpr{
					pos: position{line: 2533, col: 15, offset: 79744},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2533, col: 15, offset: 79744},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 2533, col: 20, offset: 79749},
							name: "CMD_WHERE",
						},
						&labeledExpr{
							pos:   position{line: 2533, col: 30, offset: 79759},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 2533, col: 40, offset: 79769},
								name: "BoolExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExpr",
			pos:  position{line: 2545, col: 1, offset: 80062},
			expr: &actionExpr{
				pos: position{line: 2545, col: 13, offset: 80074},
				run: (*parser).callonBoolExpr1,
				expr: &labeledExpr{
					pos:   position{line: 2545, col: 13, offset: 80074},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 2545, col: 18, offset: 80079},
						name: "BoolExprLevel4",
					},
				},
			},
		},
		{
			name: "BoolExprLevel4",
			pos:  position{line: 2550, col: 1, offset: 80149},
			expr: &actionExpr{
				pos: position{line: 2550, col: 19, offset: 80167},
				run: (*parser).callonBoolExprLevel41,
				expr: &seqExpr{
					pos: position{line: 2550, col: 19, offset: 80167},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2550, col: 19, offset: 80167},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2550, col: 25, offset: 80173},
								name: "BoolExprLevel3",
							},
						},
						&labeledExpr{
							pos:   position{line: 2550, col: 40, offset: 80188},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2550, col: 45, offset: 80193},
								expr: &seqExpr{
									pos: position{line: 2550, col: 46, offset: 80194},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 2550, col: 46, offset: 80194},
											name: "OR",
										},
										&ruleRefExpr{
											pos:  position{line: 2550, col: 49, offset: 80197},
											name: "BoolExprLevel3",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel3",
			pos:  position{line: 2570, col: 1, offset: 80635},
			expr: &actionExpr{
				pos: position{line: 2570, col: 19, offset: 80653},
				run: (*parser).callonBoolExprLevel31,
				expr: &seqExpr{
					pos: position{line: 2570, col: 19, offset: 80653},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2570, col: 19, offset: 80653},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2570, col: 25, offset: 80659},
								name: "BoolExprLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 2570, col: 40, offset: 80674},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2570, col: 45, offset: 80679},
								expr: &seqExpr{
									pos: position{line: 2570, col: 46, offset: 80680},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 2570, col: 46, offset: 80680},
											name: "AND",
										},
										&ruleRefExpr{
											pos:  position{line: 2570, col: 50, offset: 80684},
											name: "BoolExprLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel2",
			pos:  position{line: 2590, col: 1, offset: 81123},
			expr: &choiceExpr{
				pos: position{line: 2590, col: 19, offset: 81141},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2590, col: 19, offset: 81141},
						run: (*parser).callonBoolExprLevel22,
						expr: &seqExpr{
							pos: position{line: 2590, col: 19, offset: 81141},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2590, col: 19, offset: 81141},
									name: "NOT",
								},
								&ruleRefExpr{
									pos:  position{line: 2590, col: 23, offset: 81145},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2590, col: 31, offset: 81153},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 2590, col: 37, offset: 81159},
										name: "BoolExprLevel1",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2590, col: 52, offset: 81174},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2600, col: 3, offset: 81377},
						run: (*parser).callonBoolExprLevel29,
						expr: &labeledExpr{
							pos:   position{line: 2600, col: 3, offset: 81377},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2600, col: 9, offset: 81383},
								name: "BoolExprLevel1",
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel1",
			pos:  position{line: 2605, col: 1, offset: 81454},
			expr: &choiceExpr{
				pos: position{line: 2605, col: 19, offset: 81472},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2605, col: 19, offset: 81472},
						run: (*parser).callonBoolExprLevel12,
						expr: &seqExpr{
							pos: position{line: 2605, col: 19, offset: 81472},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2605, col: 19, offset: 81472},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2605, col: 27, offset: 81480},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 2605, col: 33, offset: 81486},
										name: "BoolExprLevel4",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2605, col: 48, offset: 81501},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2608, col: 3, offset: 81537},
						run: (*parser).callonBoolExprLevel18,
						expr: &labeledExpr{
							pos:   position{line: 2608, col: 3, offset: 81537},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 2608, col: 10, offset: 81544},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 2608, col: 10, offset: 81544},
										name: "EvalComparisonExpr",
									},
									&ruleRefExpr{
										pos:  position{line: 2608, col: 31, offset: 81565},
										name: "BoolComparisonExpr",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EvalComparisonExpr",
			pos:  position{line: 2613, col: 1, offset: 81685},
			expr: &choiceExpr{
				pos: position{line: 2613, col: 23, offset: 81707},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2613, col: 23, offset: 81707},
						run: (*parser).callonEvalComparisonExpr2,
						expr: &seqExpr{
							pos: position{line: 2613, col: 24, offset: 81708},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2613, col: 24, offset: 81708},
									label: "op",
									expr: &choiceExpr{
										pos: position{line: 2613, col: 28, offset: 81712},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2613, col: 28, offset: 81712},
												val:        "isbool",
												ignoreCase: false,
												want:       "\"isbool\"",
											},
											&litMatcher{
												pos:        position{line: 2613, col: 39, offset: 81723},
												val:        "isint",
												ignoreCase: false,
												want:       "\"isint\"",
											},
											&litMatcher{
												pos:        position{line: 2613, col: 49, offset: 81733},
												val:        "isstr",
												ignoreCase: false,
												want:       "\"isstr\"",
											},
											&litMatcher{
												pos:        position{line: 2613, col: 59, offset: 81743},
												val:        "isnull",
												ignoreCase: false,
												want:       "\"isnull\"",
											},
											&litMatcher{
												pos:        position{line: 2613, col: 70, offset: 81754},
												val:        "isnotnull",
												ignoreCase: false,
												want:       "\"isnotnull\"",
											},
											&litMatcher{
												pos:        position{line: 2613, col: 84, offset: 81768},
												val:        "isnum",
												ignoreCase: false,
												want:       "\"isnum\"",
											},
											&litMatcher{
												pos:        position{line: 2613, col: 94, offset: 81778},
												val:        "searchmatch",
												ignoreCase: false,
												want:       "\"searchmatch\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2613, col: 109, offset: 81793},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2613, col: 117, offset: 81801},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 2613, col: 123, offset: 81807},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2613, col: 133, offset: 81817},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2643, col: 3, offset: 82688},
						run: (*parser).callonEvalComparisonExpr17,
						expr: &seqExpr{
							pos: position{line: 2643, col: 3, offset: 82688},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2643, col: 3, offset: 82688},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2643, col: 11, offset: 82696},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2643, col: 11, offset: 82696},
												val:        "like",
												ignoreCase: false,
												want:       "\"like\"",
											},
											&litMatcher{
												pos:        position{line: 2643, col: 20, offset: 82705},
												val:        "Like",
												ignoreCase: false,
												want:       "\"Like\"",
											},
											&litMatcher{
												pos:        position{line: 2643, col: 29, offset: 82714},
												val:        "match",
												ignoreCase: false,
												want:       "\"match\"",
											},
											&litMatcher{
												pos:        position{line: 2643, col: 39, offset: 82724},
												val:        "cidrmatch",
												ignoreCase: false,
												want:       "\"cidrmatch\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2643, col: 52, offset: 82737},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2643, col: 60, offset: 82745},
									label: "leftValue",
									expr: &ruleRefExpr{
										pos:  position{line: 2643, col: 70, offset: 82755},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2643, col: 80, offset: 82765},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2643, col: 86, offset: 82771},
									label: "rightValue",
									expr: &ruleRefExpr{
										pos:  position{line: 2643, col: 97, offset: 82782},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2643, col: 107, offset: 82792},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2656, col: 3, offset: 83162},
						run: (*parser).callonEvalComparisonExpr32,
						expr: &seqExpr{
							pos: position{line: 2656, col: 3, offset: 83162},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2656, col: 3, offset: 83162},
									label: "left",
									expr: &ruleRefExpr{
										pos:  position{line: 2656, col: 8, offset: 83167},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2656, col: 18, offset: 83177},
									name: "SPACE",
								},
								&litMatcher{
									pos:        position{line: 2656, col: 24, offset: 83183},
									val:        "in",
									ignoreCase: false,
									want:       "\"in\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2656, col: 29, offset: 83188},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2656, col: 37, offset: 83196},
									label: "valueToJudge",
									expr: &ruleRefExpr{
										pos:  position{line: 2656, col: 50, offset: 83209},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2656, col: 60, offset: 83219},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2656, col: 65, offset: 83224},
										expr: &seqExpr{
											pos: position{line: 2656, col: 66, offset: 83225},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2656, col: 66, offset: 83225},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2656, col: 72, offset: 83231},
													name: "ValueExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2656, col: 84, offset: 83243},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2675, col: 3, offset: 83794},
						run: (*parser).callonEvalComparisonExpr47,
						expr: &seqExpr{
							pos: position{line: 2675, col: 3, offset: 83794},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2675, col: 3, offset: 83794},
									val:        "in",
									ignoreCase: false,
									want:       "\"in\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2675, col: 8, offset: 83799},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2675, col: 16, offset: 83807},
									label: "valueToJudge",
									expr: &ruleRefExpr{
										pos:  position{line: 2675, col: 29, offset: 83820},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2675, col: 39, offset: 83830},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2675, col: 44, offset: 83835},
										expr: &seqExpr{
											pos: position{line: 2675, col: 45, offset: 83836},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2675, col: 45, offset: 83836},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2675, col: 51, offset: 83842},
													name: "ValueExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2675, col: 63, offset: 83854},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoolComparisonExpr",
			pos:  position{line: 2693, col: 1, offset: 84275},
			expr: &actionExpr{
				pos: position{line: 2693, col: 23, offset: 84297},
				run: (*parser).callonBoolComparisonExpr1,
				expr: &seqExpr{
					pos: position{line: 2693, col: 23, offset: 84297},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2693, col: 23, offset: 84297},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 2693, col: 28, offset: 84302},
								name: "ValueExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 2693, col: 38, offset: 84312},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 2693, col: 41, offset: 84315},
								name: "EqualityOrInequality",
							},
						},
						&labeledExpr{
							pos:   position{line: 2693, col: 62, offset: 84336},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 2693, col: 68, offset: 84342},
								name: "ValueExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "ValueExpr",
			pos:  position{line: 2711, col: 1, offset: 84936},
			expr: &choiceExpr{
				pos: position{line: 2711, col: 14, offset: 84949},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2711, col: 14, offset: 84949},
						run: (*parser).callonValueExpr2,
						expr: &labeledExpr{
							pos:   position{line: 2711, col: 14, offset: 84949},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 2711, col: 24, offset: 84959},
								name: "ConditionExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2720, col: 3, offset: 85149},
						run: (*parser).callonValueExpr5,
						expr: &seqExpr{
							pos: position{line: 2720, col: 3, offset: 85149},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2720, col: 3, offset: 85149},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2720, col: 12, offset: 85158},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 2720, col: 22, offset: 85168},
										name: "ConditionExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2720, col: 37, offset: 85183},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2729, col: 3, offset: 85367},
						run: (*parser).callonValueExpr11,
						expr: &labeledExpr{
							pos:   position{line: 2729, col: 3, offset: 85367},
							label: "numeric",
							expr: &ruleRefExpr{
								pos:  position{line: 2729, col: 11, offset: 85375},
								name: "NumericExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2738, col: 3, offset: 85555},
						run: (*parser).callonValueExpr14,
						expr: &labeledExpr{
							pos:   position{line: 2738, col: 3, offset: 85555},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 2738, col: 7, offset: 85559},
								name: "StringExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2747, col: 3, offset: 85731},
						run: (*parser).callonValueExpr17,
						expr: &seqExpr{
							pos: position{line: 2747, col: 3, offset: 85731},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2747, col: 3, offset: 85731},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2747, col: 12, offset: 85740},
									label: "str",
									expr: &ruleRefExpr{
										pos:  position{line: 2747, col: 16, offset: 85744},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2747, col: 28, offset: 85756},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2756, col: 3, offset: 85925},
						run: (*parser).callonValueExpr23,
						expr: &seqExpr{
							pos: position{line: 2756, col: 3, offset: 85925},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2756, col: 3, offset: 85925},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2756, col: 11, offset: 85933},
									label: "boolean",
									expr: &ruleRefExpr{
										pos:  position{line: 2756, col: 19, offset: 85941},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2756, col: 28, offset: 85950},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StringExpr",
			pos:  position{line: 2766, col: 1, offset: 86121},
			expr: &choiceExpr{
				pos: position{line: 2766, col: 15, offset: 86135},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2766, col: 15, offset: 86135},
						run: (*parser).callonStringExpr2,
						expr: &seqExpr{
							pos: position{line: 2766, col: 15, offset: 86135},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2766, col: 15, offset: 86135},
									label: "text",
									expr: &ruleRefExpr{
										pos:  position{line: 2766, col: 20, offset: 86140},
										name: "TextExpr",
									},
								},
								&notExpr{
									pos: position{line: 2766, col: 29, offset: 86149},
									expr: &ruleRefExpr{
										pos:  position{line: 2766, col: 31, offset: 86151},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2774, col: 3, offset: 86321},
						run: (*parser).callonStringExpr8,
						expr: &seqExpr{
							pos: position{line: 2774, col: 3, offset: 86321},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2774, col: 3, offset: 86321},
									label: "str",
									expr: &ruleRefExpr{
										pos:  position{line: 2774, col: 7, offset: 86325},
										name: "QuotedString",
									},
								},
								&notExpr{
									pos: position{line: 2774, col: 20, offset: 86338},
									expr: &ruleRefExpr{
										pos:  position{line: 2774, col: 22, offset: 86340},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2782, col: 3, offset: 86505},
						run: (*parser).callonStringExpr14,
						expr: &seqExpr{
							pos: position{line: 2782, col: 3, offset: 86505},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2782, col: 3, offset: 86505},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2782, col: 9, offset: 86511},
										name: "EvalFieldToRead",
									},
								},
								&notExpr{
									pos: position{line: 2782, col: 25, offset: 86527},
									expr: &choiceExpr{
										pos: position{line: 2782, col: 27, offset: 86529},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2782, col: 27, offset: 86529},
												name: "OpPlus",
											},
											&ruleRefExpr{
												pos:  position{line: 2782, col: 36, offset: 86538},
												name: "OpMinus",
											},
											&ruleRefExpr{
												pos:  position{line: 2782, col: 46, offset: 86548},
												name: "OpMul",
											},
											&ruleRefExpr{
												pos:  position{line: 2782, col: 54, offset: 86556},
												name: "OpDiv",
											},
											&ruleRefExpr{
												pos:  position{line: 2782, col: 62, offset: 86564},
												name: "EVAL_CONCAT",
											},
											&litMatcher{
												pos:        position{line: 2782, col: 76, offset: 86578},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2790, col: 3, offset: 86728},
						run: (*parser).callonStringExpr26,
						expr: &labeledExpr{
							pos:   position{line: 2790, col: 3, offset: 86728},
							label: "concat",
							expr: &ruleRefExpr{
								pos:  position{line: 2790, col: 10, offset: 86735},
								name: "ConcatExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "ConcatExpr",
			pos:  position{line: 2800, col: 1, offset: 86941},
			expr: &actionExpr{
				pos: position{line: 2800, col: 15, offset: 86955},
				run: (*parser).callonConcatExpr1,
				expr: &seqExpr{
					pos: position{line: 2800, col: 15, offset: 86955},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2800, col: 15, offset: 86955},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2800, col: 21, offset: 86961},
								name: "ConcatAtom",
							},
						},
						&labeledExpr{
							pos:   position{line: 2800, col: 32, offset: 86972},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2800, col: 37, offset: 86977},
								expr: &seqExpr{
									pos: position{line: 2800, col: 38, offset: 86978},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 2800, col: 38, offset: 86978},
											name: "EVAL_CONCAT",
										},
										&ruleRefExpr{
											pos:  position{line: 2800, col: 50, offset: 86990},
											name: "ConcatAtom",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2800, col: 63, offset: 87003},
							expr: &choiceExpr{
								pos: position{line: 2800, col: 65, offset: 87005},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 2800, col: 65, offset: 87005},
										name: "OpPlus",
									},
									&ruleRefExpr{
										pos:  position{line: 2800, col: 74, offset: 87014},
										name: "OpMinus",
									},
									&ruleRefExpr{
										pos:  position{line: 2800, col: 84, offset: 87024},
										name: "OpMul",
									},
									&ruleRefExpr{
										pos:  position{line: 2800, col: 92, offset: 87032},
										name: "OpDiv",
									},
									&litMatcher{
										pos:        position{line: 2800, col: 100, offset: 87040},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcatAtom",
			pos:  position{line: 2818, col: 1, offset: 87446},
			expr: &choiceExpr{
				pos: position{line: 2818, col: 15, offset: 87460},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2818, col: 15, offset: 87460},
						run: (*parser).callonConcatAtom2,
						expr: &labeledExpr{
							pos:   position{line: 2818, col: 15, offset: 87460},
							label: "text",
							expr: &ruleRefExpr{
								pos:  position{line: 2818, col: 20, offset: 87465},
								name: "TextExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2827, col: 3, offset: 87629},
						run: (*parser).callonConcatAtom5,
						expr: &labeledExpr{
							pos:   position{line: 2827, col: 3, offset: 87629},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 2827, col: 7, offset: 87633},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2835, col: 3, offset: 87772},
						run: (*parser).callonConcatAtom8,
						expr: &labeledExpr{
							pos:   position{line: 2835, col: 3, offset: 87772},
							label: "number",
							expr: &ruleRefExpr{
								pos:  position{line: 2835, col: 10, offset: 87779},
								name: "NumberAsString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2843, col: 3, offset: 87918},
						run: (*parser).callonConcatAtom11,
						expr: &labeledExpr{
							pos:   position{line: 2843, col: 3, offset: 87918},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 2843, col: 9, offset: 87924},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExpr",
			pos:  position{line: 2853, col: 1, offset: 88093},
			expr: &actionExpr{
				pos: position{line: 2853, col: 16, offset: 88108},
				run: (*parser).callonNumericExpr1,
				expr: &seqExpr{
					pos: position{line: 2853, col: 16, offset: 88108},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2853, col: 16, offset: 88108},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 2853, col: 21, offset: 88113},
								name: "NumericExprLevel3",
							},
						},
						&notExpr{
							pos: position{line: 2853, col: 39, offset: 88131},
							expr: &choiceExpr{
								pos: position{line: 2853, col: 41, offset: 88133},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 2853, col: 41, offset: 88133},
										name: "EVAL_CONCAT",
									},
									&litMatcher{
										pos:        position{line: 2853, col: 55, offset: 88147},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel3",
			pos:  position{line: 2858, col: 1, offset: 88212},
			expr: &actionExpr{
				pos: position{line: 2858, col: 22, offset: 88233},
				run: (*parser).callonNumericExprLevel31,
				expr: &seqExpr{
					pos: position{line: 2858, col: 22, offset: 88233},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2858, col: 22, offset: 88233},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2858, col: 28, offset: 88239},
								name: "NumericExprLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 2858, col: 46, offset: 88257},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2858, col: 51, offset: 88262},
								expr: &seqExpr{
									pos: position{line: 2858, col: 52, offset: 88263},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 2858, col: 53, offset: 88264},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 2858, col: 53, offset: 88264},
													name: "OpPlus",
												},
												&ruleRefExpr{
													pos:  position{line: 2858, col: 62, offset: 88273},
													name: "OpMinus",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2858, col: 71, offset: 88282},
											name: "NumericExprLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel2",
			pos:  position{line: 2879, col: 1, offset: 88783},
			expr: &actionExpr{
				pos: position{line: 2879, col: 22, offset: 88804},
				run: (*parser).callonNumericExprLevel21,
				expr: &seqExpr{
					pos: position{line: 2879, col: 22, offset: 88804},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2879, col: 22, offset: 88804},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2879, col: 28, offset: 88810},
								name: "NumericExprLevel1",
							},
						},
						&labeledExpr{
							pos:   position{line: 2879, col: 46, offset: 88828},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2879, col: 51, offset: 88833},
								expr: &seqExpr{
									pos: position{line: 2879, col: 52, offset: 88834},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 2879, col: 53, offset: 88835},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 2879, col: 53, offset: 88835},
													name: "OpMul",
												},
												&ruleRefExpr{
													pos:  position{line: 2879, col: 61, offset: 88843},
													name: "OpDiv",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2879, col: 68, offset: 88850},
											name: "NumericExprLevel1",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NumericParamExpr",
			pos:  position{line: 2899, col: 1, offset: 89319},
			expr: &actionExpr{
				pos: position{line: 2899, col: 21, offset: 89339},
				run: (*parser).callonNumericParamExpr1,
				expr: &seqExpr{
					pos: position{line: 2899, col: 21, offset: 89339},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2899, col: 21, offset: 89339},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 2899, col: 27, offset: 89345},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 2899, col: 32, offset: 89350},
								name: "NumericExprLevel3",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel1",
			pos:  position{line: 2909, col: 1, offset: 89594},
			expr: &choiceExpr{
				pos: position{line: 2909, col: 22, offset: 89615},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2909, col: 22, offset: 89615},
						run: (*parser).callonNumericExprLevel12,
						expr: &seqExpr{
							pos: position{line: 2909, col: 22, offset: 89615},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2909, col: 22, offset: 89615},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2909, col: 30, offset: 89623},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2909, col: 35, offset: 89628},
										name: "NumericExprLevel3",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2909, col: 53, offset: 89646},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2912, col: 3, offset: 89681},
						run: (*parser).callonNumericExprLevel18,
						expr: &labeledExpr{
							pos:   position{line: 2912, col: 3, offset: 89681},
							label: "numericEvalExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 2912, col: 20, offset: 89698},
								name: "NumericEvalExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2915, col: 3, offset: 89752},
						run: (*parser).callonNumericExprLevel111,
						expr: &labeledExpr{
							pos:   position{line: 2915, col: 3, offset: 89752},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 2915, col: 9, offset: 89758},
								name: "EvalFieldToRead",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2925, col: 3, offset: 89977},
						run: (*parser).callonNumericExprLevel114,
						expr: &labeledExpr{
							pos:   position{line: 2925, col: 3, offset: 89977},
							label: "number",
							expr: &ruleRefExpr{
								pos:  position{line: 2925, col: 10, offset: 89984},
								name: "NumberAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericEvalExpr",
			pos:  position{line: 2938, col: 1, offset: 90362},
			expr: &choiceExpr{
				pos: position{line: 2938, col: 20, offset: 90381},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2938, col: 20, offset: 90381},
						run: (*parser).callonNumericEvalExpr2,
						expr: &seqExpr{
							pos: position{line: 2938, col: 21, offset: 90382},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2938, col: 21, offset: 90382},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2938, col: 29, offset: 90390},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2938, col: 29, offset: 90390},
												val:        "abs",
												ignoreCase: false,
												want:       "\"abs\"",
											},
											&litMatcher{
												pos:        position{line: 2938, col: 37, offset: 90398},
												val:        "ceil",
												ignoreCase: false,
												want:       "\"ceil\"",
											},
											&litMatcher{
												pos:        position{line: 2938, col: 46, offset: 90407},
												val:        "ceiling",
												ignoreCase: false,
												want:       "\"ceiling\"",
											},
											&litMatcher{
												pos:        position{line: 2938, col: 58, offset: 90419},
												val:        "sqrt",
												ignoreCase: false,
												want:       "\"sqrt\"",
											},
											&litMatcher{
												pos:        position{line: 2938, col: 67, offset: 90428},
												val:        "exact",
												ignoreCase: false,
												want:       "\"exact\"",
											},
											&litMatcher{
												pos:        position{line: 2938, col: 77, offset: 90438},
												val:        "exp",
												ignoreCase: false,
												want:       "\"exp\"",
											},
											&litMatcher{
												pos:        position{line: 2938, col: 85, offset: 90446},
												val:        "floor",
												ignoreCase: false,
												want:       "\"floor\"",
											},
											&litMatcher{
												pos:        position{line: 2938, col: 95, offset: 90456},
												val:        "ln",
												ignoreCase: false,
												want:       "\"ln\"",
											},
											&litMatcher{
												pos:        position{line: 2938, col: 102, offset: 90463},
												val:        "sigfig",
												ignoreCase: false,
												want:       "\"sigfig\"",
											},
											&litMatcher{
												pos:        position{line: 2938, col: 113, offset: 90474},
												val:        "acosh",
												ignoreCase: false,
												want:       "\"acosh\"",
											},
											&litMatcher{
												pos:        position{line: 2938, col: 123, offset: 90484},
												val:        "acos",
												ignoreCase: false,
												want:       "\"acos\"",
											},
											&litMatcher{
												pos:        position{line: 2938, col: 132, offset: 90493},
												val:        "asinh",
												ignoreCase: false,
												want:       "\"asinh\"",
											},
											&litMatcher{
												pos:        position{line: 2938, col: 142, offset: 90503},
												val:        "asin",
												ignoreCase: false,
												want:       "\"asin\"",
											},
											&litMatcher{
												pos:        position{line: 2938, col: 151, offset: 90512},
												val:        "atanh",
												ignoreCase: false,
												want:       "\"atanh\"",
											},
											&litMatcher{
												pos:        position{line: 2938, col: 161, offset: 90522},
												val:        "atan",
												ignoreCase: false,
												want:       "\"atan\"",
											},
											&litMatcher{
												pos:        position{line: 2938, col: 170, offset: 90531},
												val:        "cosh",
												ignoreCase: false,
												want:       "\"cosh\"",
											},
											&litMatcher{
												pos:        position{line: 2938, col: 179, offset: 90540},
												val:        "cos",
												ignoreCase: false,
												want:       "\"cos\"",
											},
											&litMatcher{
												pos:        position{line: 2938, col: 187, offset: 90548},
												val:        "sinh",
												ignoreCase: false,
												want:       "\"sinh\"",
											},
											&litMatcher{
												pos:        position{line: 2938, col: 196, offset: 90557},
												val:        "sin",
												ignoreCase: false,
												want:       "\"sin\"",
											},
											&litMatcher{
												pos:        position{line: 2938, col: 204, offset: 90565},
												val:        "tanh",
												ignoreCase: false,
												want:       "\"tanh\"",
											},
											&litMatcher{
												pos:        position{line: 2938, col: 213, offset: 90574},
												val:        "tan",
												ignoreCase: false,
												want:       "\"tan\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2938, col: 220, offset: 90581},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2938, col: 228, offset: 90589},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2938, col: 234, offset: 90595},
										name: "NumericExprLevel3",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2938, col: 253, offset: 90614},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2958, col: 3, offset: 91126},
						run: (*parser).callonNumericEvalExpr31,
						expr: &seqExpr{
							pos: position{line: 2958, col: 3, offset: 91126},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2958, col: 3, offset: 91126},
									label: "roundExpr",
									expr: &litMatcher{
										pos:        position{line: 2958, col: 13, offset: 91136},
										val:        "round",
										ignoreCase: false,
										want:       "\"round\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2958, col: 21, offset: 91144},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2958, col: 29, offset: 91152},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2958, col: 35, offset: 91158},
										name: "NumericExprLevel3",
									},
								},
								&labeledExpr{
									pos:   position{line: 2958, col: 54, offset: 91177},
									label: "roundPrecision",
									expr: &zeroOrOneExpr{
										pos: position{line: 2958, col: 69, offset: 91192},
										expr: &ruleRefExpr{
											pos:  position{line: 2958, col: 70, offset: 91193},
											name: "NumericParamExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2958, col: 89, offset: 91212},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2979, col: 3, offset: 91830},
						run: (*parser).callonNumericEvalExpr42,
						expr: &seqExpr{
							pos: position{line: 2979, col: 4, offset: 91831},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2979, col: 4, offset: 91831},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2979, col: 12, offset: 91839},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2979, col: 12, offset: 91839},
												val:        "now",
												ignoreCase: false,
												want:       "\"now\"",
											},
											&litMatcher{
												pos:        position{line: 2979, col: 20, offset: 91847},
												val:        "pi",
												ignoreCase: false,
												want:       "\"pi\"",
											},
											&litMatcher{
												pos:        position{line: 2979, col: 27, offset: 91854},
												val:        "random",
												ignoreCase: false,
												want:       "\"random\"",
											},
											&litMatcher{
												pos:        position{line: 2979, col: 38, offset: 91865},
												val:        "time",
												ignoreCase: false,
												want:       "\"time\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2979, col: 46, offset: 91873},
									name: "L_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2979, col: 54, offset: 91881},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2992, col: 3, offset: 92167},
						run: (*parser).callonNumericEvalExpr52,
						expr: &seqExpr{
							pos: position{line: 2992, col: 3, offset: 92167},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2992, col: 3, offset: 92167},
									val:        "tonumber",
									ignoreCase: false,
									want:       "\"tonumber\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2992, col: 14, offset: 92178},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2992, col: 22, offset: 92186},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2992, col: 33, offset: 92197},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2992, col: 44, offset: 92208},
									label: "baseExpr",
									expr: &zeroOrOneExpr{
										pos: position{line: 2992, col: 53, offset: 92217},
										expr: &seqExpr{
											pos: position{line: 2992, col: 54, offset: 92218},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2992, col: 54, offset: 92218},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2992, col: 60, offset: 92224},
													name: "NumericExprLevel3",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2992, col: 80, offset: 92244},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3020, col: 3, offset: 93086},
						run: (*parser).callonNumericEvalExpr64,
						expr: &seqExpr{
							pos: position{line: 3020, col: 3, offset: 93086},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 3020, col: 3, offset: 93086},
									label: "lenExpr",
									expr: &litMatcher{
										pos:        position{line: 3020, col: 12, offset: 93095},
										val:        "len",
										ignoreCase: false,
										want:       "\"len\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3020, col: 18, offset: 93101},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3020, col: 26, offset: 93109},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 3020, col: 31, offset: 93114},
										name: "LenExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3020, col: 39, offset: 93122},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3023, col: 3, offset: 93157},
						run: (*parser).callonNumericEvalExpr72,
						expr: &seqExpr{
							pos: position{line: 3023, col: 4, offset: 93158},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 3023, col: 4, offset: 93158},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 3023, col: 12, offset: 93166},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 3023, col: 12, offset: 93166},
												val:        "pow",
												ignoreCase: false,
												want:       "\"pow\"",
											},
											&litMatcher{
												pos:        position{line: 3023, col: 20, offset: 93174},
												val:        "atan2",
												ignoreCase: false,
												want:       "\"atan2\"",
											},
											&litMatcher{
												pos:        position{line: 3023, col: 30, offset: 93184},
												val:        "hypot",
												ignoreCase: false,
												want:       "\"hypot\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3023, col: 39, offset: 93193},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3023, col: 47, offset: 93201},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 3023, col: 53, offset: 93207},
										name: "NumericExprLevel3",
									},
								},
								&labeledExpr{
									pos:   position{line: 3023, col: 72, offset: 93226},
									label: "param",
									expr: &ruleRefExpr{
										pos:  position{line: 3023, col: 79, offset: 93233},
										name: "NumericParamExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3023, col: 97, offset: 93251},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3053, col: 3, offset: 94090},
						run: (*parser).callonNumericEvalExpr85,
						expr: &seqExpr{
							pos: position{line: 3053, col: 4, offset: 94091},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 3053, col: 4, offset: 94091},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 3053, col: 11, offset: 94098},
										val:        "log",
										ignoreCase: false,
										want:       "\"log\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3053, col: 17, offset: 94104},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3053, col: 25, offset: 94112},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 3053, col: 31, offset: 94118},
										name: "NumericExprLevel3",
									},
								},
								&labeledExpr{
									pos:   position{line: 3053, col: 50, offset: 94137},
									label: "param",
									expr: &zeroOrOneExpr{
										pos: position{line: 3053, col: 56, offset: 94143},
										expr: &ruleRefExpr{
											pos:  position{line: 3053, col: 57, offset: 94144},
											name: "NumericParamExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3053, col: 76, offset: 94163},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3082, col: 3, offset: 94936},
						run: (*parser).callonNumericEvalExpr96,
						expr: &seqExpr{
							pos: position{line: 3082, col: 3, offset: 94936},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 3082, col: 3, offset: 94936},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 3082, col: 11, offset: 94944},
										val:        "relative_time",
										ignoreCase: false,
										want:       "\"relative_time\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3082, col: 28, offset: 94961},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3082, col: 36, offset: 94969},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 3082, col: 42, offset: 94975},
										name: "NumericExprLevel3",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3082, col: 61, offset: 94994},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 3082, col: 67, offset: 95000},
									label: "specifier",
									expr: &ruleRefExpr{
										pos:  position{line: 3082, col: 77, offset: 95010},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3082, col: 88, offset: 95021},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LenExpr",
			pos:  position{line: 3095, col: 1, offset: 95398},
			expr: &choiceExpr{
				pos: position{line: 3095, col: 12, offset: 95409},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3095, col: 12, offset: 95409},
						run: (*parser).callonLenExpr2,
						expr: &seqExpr{
							pos: position{line: 3095, col: 12, offset: 95409},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 3095, col: 12, offset: 95409},
									label: "str",
									expr: &ruleRefExpr{
										pos:  position{line: 3095, col: 16, offset: 95413},
										name: "QuotedString",
									},
								},
								&notExpr{
									pos: position{line: 3095, col: 29, offset: 95426},
									expr: &ruleRefExpr{
										pos:  position{line: 3095, col: 31, offset: 95428},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3111, col: 3, offset: 95789},
						run: (*parser).callonLenExpr8,
						expr: &seqExpr{
							pos: position{line: 3111, col: 3, offset: 95789},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 3111, col: 3, offset: 95789},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3111, col: 9, offset: 95795},
										name: "EvalFieldToRead",
									},
								},
								&notExpr{
									pos: position{line: 3111, col: 25, offset: 95811},
									expr: &choiceExpr{
										pos: position{line: 3111, col: 27, offset: 95813},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 3111, col: 27, offset: 95813},
												name: "OpPlus",
											},
											&ruleRefExpr{
												pos:  position{line: 3111, col: 36, offset: 95822},
												name: "OpMinus",
											},
											&ruleRefExpr{
												pos:  position{line: 3111, col: 46, offset: 95832},
												name: "OpMul",
											},
											&ruleRefExpr{
												pos:  position{line: 3111, col: 54, offset: 95840},
												name: "OpDiv",
											},
											&ruleRefExpr{
												pos:  position{line: 3111, col: 62, offset: 95848},
												name: "EVAL_CONCAT",
											},
											&litMatcher{
												pos:        position{line: 3111, col: 76, offset: 95862},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOptionNull",
			pos:  position{line: 3128, col: 1, offset: 96213},
			expr: &actionExpr{
				pos: position{line: 3128, col: 19, offset: 96231},
				run: (*parser).callonHeadOptionNull1,
				expr: &seqExpr{
					pos: position{line: 3128, col: 19, offset: 96231},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3128, col: 19, offset: 96231},
							val:        "null",
							ignoreCase: false,
							want:       "\"null\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3128, col: 26, offset: 96238},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3128, col: 32, offset: 96244},
							label: "boolVal",
							expr: &ruleRefExpr{
								pos:  position{line: 3128, col: 40, offset: 96252},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOptionKeeplast",
			pos:  position{line: 3139, col: 1, offset: 96441},
			expr: &actionExpr{
				pos: position{line: 3139, col: 23, offset: 96463},
				run: (*parser).callonHeadOptionKeeplast1,
				expr: &seqExpr{
					pos: position{line: 3139, col: 23, offset: 96463},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3139, col: 23, offset: 96463},
							val:        "keeplast",
							ignoreCase: false,
							want:       "\"keeplast\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3139, col: 34, offset: 96474},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3139, col: 40, offset: 96480},
							label: "boolVal",
							expr: &ruleRefExpr{
								pos:  position{line: 3139, col: 48, offset: 96488},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOptionLimit",
			pos:  position{line: 3150, col: 1, offset: 96685},
			expr: &actionExpr{
				pos: position{line: 3150, col: 20, offset: 96704},
				run: (*parser).callonHeadOptionLimit1,
				expr: &seqExpr{
					pos: position{line: 3150, col: 20, offset: 96704},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3150, col: 20, offset: 96704},
							val:        "limit",
							ignoreCase: false,
							want:       "\"limit\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3150, col: 28, offset: 96712},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3150, col: 34, offset: 96718},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 3150, col: 43, offset: 96727},
								name: "IntegerAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOptionExpr",
			pos:  position{line: 3165, col: 1, offset: 97089},
			expr: &actionExpr{
				pos: position{line: 3165, col: 19, offset: 97107},
				run: (*parser).callonHeadOptionExpr1,
				expr: &labeledExpr{
					pos:   position{line: 3165, col: 19, offset: 97107},
					label: "boolExpr",
					expr: &ruleRefExpr{
						pos:  position{line: 3165, col: 28, offset: 97116},
						name: "BoolExpr",
					},
				},
			},
		},
		{
			name: "HeadOption",
			pos:  position{line: 3176, col: 1, offset: 97328},
			expr: &actionExpr{
				pos: position{line: 3176, col: 15, offset: 97342},
				run: (*parser).callonHeadOption1,
				expr: &labeledExpr{
					pos:   position{line: 3176, col: 15, offset: 97342},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 3176, col: 23, offset: 97350},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3176, col: 23, offset: 97350},
								name: "HeadOptionKeeplast",
							},
							&ruleRefExpr{
								pos:  position{line: 3176, col: 44, offset: 97371},
								name: "HeadOptionNull",
							},
							&ruleRefExpr{
								pos:  position{line: 3176, col: 61, offset: 97388},
								name: "HeadOptionLimit",
							},
							&ruleRefExpr{
								pos:  position{line: 3176, col: 79, offset: 97406},
								name: "HeadOptionExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOptionList",
			pos:  position{line: 3180, col: 1, offset: 97450},
			expr: &actionExpr{
				pos: position{line: 3180, col: 19, offset: 97468},
				run: (*parser).callonHeadOptionList1,
				expr: &seqExpr{
					pos: position{line: 3180, col: 19, offset: 97468},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3180, col: 19, offset: 97468},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 3180, col: 26, offset: 97475},
								name: "HeadOption",
							},
						},
						&labeledExpr{
							pos:   position{line: 3180, col: 37, offset: 97486},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3180, col: 43, offset: 97492},
								expr: &seqExpr{
									pos: position{line: 3180, col: 44, offset: 97493},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 3180, col: 44, offset: 97493},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 3180, col: 50, offset: 97499},
											name: "HeadOption",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HeadBlock",
			pos:  position{line: 3242, col: 1, offset: 99546},
			expr: &choiceExpr{
				pos: position{line: 3242, col: 14, offset: 99559},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3242, col: 14, offset: 99559},
						run: (*parser).callonHeadBlock2,
						expr: &seqExpr{
							pos: position{line: 3242, col: 14, offset: 99559},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 3242, col: 14, offset: 99559},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 3242, col: 19, offset: 99564},
									name: "CMD_HEAD",
								},
								&labeledExpr{
									pos:   position{line: 3242, col: 28, offset: 99573},
									label: "headExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3242, col: 37, offset: 99582},
										name: "HeadOptionList",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3252, col: 3, offset: 99853},
						run: (*parser).callonHeadBlock8,
						expr: &seqExpr{
							pos: position{line: 3252, col: 3, offset: 99853},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 3252, col: 3, offset: 99853},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 3252, col: 8, offset: 99858},
									name: "CMD_HEAD",
								},
								&labeledExpr{
									pos:   position{line: 3252, col: 17, offset: 99867},
									label: "intAsStr",
									expr: &ruleRefExpr{
										pos:  position{line: 3252, col: 26, offset: 99876},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3269, col: 3, offset: 100355},
						run: (*parser).callonHeadBlock14,
						expr: &seqExpr{
							pos: position{line: 3269, col: 3, offset: 100355},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 3269, col: 3, offset: 100355},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 3269, col: 8, offset: 100360},
									name: "CMD_HEAD_NO_SPACE",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TailBlock",
			pos:  position{line: 3283, col: 1, offset: 100791},
			expr: &choiceExpr{
				pos: position{line: 3283, col: 14, offset: 100804},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3283, col: 14, offset: 100804},
						run: (*parser).callonTailBlock2,
						expr: &seqExpr{
							pos: position{line: 3283, col: 14, offset: 100804},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 3283, col: 14, offset: 100804},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 3283, col: 19, offset: 100809},
									name: "CMD_TAIL",
								},
								&labeledExpr{
									pos:   position{line: 3283, col: 28, offset: 100818},
									label: "intAsStr",
									expr: &ruleRefExpr{
										pos:  position{line: 3283, col: 37, offset: 100827},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3303, col: 3, offset: 101376},
						run: (*parser).callonTailBlock8,
						expr: &seqExpr{
							pos: position{line: 3303, col: 3, offset: 101376},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 3303, col: 3, offset: 101376},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 3303, col: 8, offset: 101381},
									name: "CMD_TAIL_NO_SPACE",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggregationList",
			pos:  position{line: 3323, col: 1, offset: 101974},
			expr: &actionExpr{
				pos: position{line: 3323, col: 20, offset: 101993},
				run: (*parser).callonAggregationList1,
				expr: &seqExpr{
					pos: position{line: 3323, col: 20, offset: 101993},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3323, col: 20, offset: 101993},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 3323, col: 26, offset: 101999},
								name: "Aggregator",
							},
						},
						&labeledExpr{
							pos:   position{line: 3323, col: 37, offset: 102010},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3323, col: 42, offset: 102015},
								expr: &seqExpr{
									pos: position{line: 3323, col: 43, offset: 102016},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 3323, col: 44, offset: 102017},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 3323, col: 44, offset: 102017},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 3323, col: 52, offset: 102025},
													name: "SPACE",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 3323, col: 59, offset: 102032},
											name: "Aggregator",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Aggregator",
			pos:  position{line: 3340, col: 1, offset: 102535},
			expr: &actionExpr{
				pos: position{line: 3340, col: 15, offset: 102549},
				run: (*parser).callonAggregator1,
				expr: &seqExpr{
					pos: position{line: 3340, col: 15, offset: 102549},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3340, col: 15, offset: 102549},
							label: "aggFunc",
							expr: &ruleRefExpr{
								pos:  position{line: 3340, col: 23, offset: 102557},
								name: "AggFunction",
							},
						},
						&labeledExpr{
							pos:   position{line: 3340, col: 35, offset: 102569},
							label: "asField",
							expr: &zeroOrOneExpr{
								pos: position{line: 3340, col: 43, offset: 102577},
								expr: &ruleRefExpr{
									pos:  position{line: 3340, col: 43, offset: 102577},
									name: "AsField",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggFunction",
			pos:  position{line: 3356, col: 1, offset: 103418},
			expr: &actionExpr{
				pos: position{line: 3356, col: 16, offset: 103433},
				run: (*parser).callonAggFunction1,
				expr: &labeledExpr{
					pos:   position{line: 3356, col: 16, offset: 103433},
					label: "agg",
					expr: &choiceExpr{
						pos: position{line: 3356, col: 21, offset: 103438},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3356, col: 21, offset: 103438},
								name: "AggCount",
							},
							&ruleRefExpr{
								pos:  position{line: 3356, col: 32, offset: 103449},
								name: "AggDistinctCount",
							},
							&ruleRefExpr{
								pos:  position{line: 3356, col: 51, offset: 103468},
								name: "AggAvg",
							},
							&ruleRefExpr{
								pos:  position{line: 3356, col: 60, offset: 103477},
								name: "AggMin",
							},
							&ruleRefExpr{
								pos:  position{line: 3356, col: 69, offset: 103486},
								name: "AggMax",
							},
							&ruleRefExpr{
								pos:  position{line: 3356, col: 78, offset: 103495},
								name: "AggRange",
							},
							&ruleRefExpr{
								pos:  position{line: 3356, col: 89, offset: 103506},
								name: "AggSum",
							},
							&ruleRefExpr{
								pos:  position{line: 3356, col: 98, offset: 103515},
								name: "AggValues",
							},
							&ruleRefExpr{
								pos:  position{line: 3356, col: 110, offset: 103527},
								name: "AggEstdc",
							},
							&ruleRefExpr{
								pos:  position{line: 3356, col: 121, offset: 103538},
								name: "AggEstdcError",
							},
							&ruleRefExpr{
								pos:  position{line: 3356, col: 137, offset: 103554},
								name: "AggExactPerc",
							},
							&ruleRefExpr{
								pos:  position{line: 3356, col: 152, offset: 103569},
								name: "AggMedian",
							},
							&ruleRefExpr{
								pos:  position{line: 3356, col: 164, offset: 103581},
								name: "AggMode",
							},
							&ruleRefExpr{
								pos:  position{line: 3356, col: 174, offset: 103591},
								name: "AggPerc",
							},
							&ruleRefExpr{
								pos:  position{line: 3357, col: 1, offset: 103601},
								name: "AggStdev",
							},
							&ruleRefExpr{
								pos:  position{line: 3357, col: 12, offset: 103612},
								name: "AggStdevp",
							},
							&ruleRefExpr{
								pos:  position{line: 3357, col: 24, offset: 103624},
								name: "AggSumsq",
							},
							&ruleRefExpr{
								pos:  position{line: 3357, col: 35, offset: 103635},
								name: "AggUpperPerc",
							},
							&ruleRefExpr{
								pos:  position{line: 3357, col: 50, offset: 103650},
								name: "AggVar",
							},
							&ruleRefExpr{
								pos:  position{line: 3357, col: 59, offset: 103659},
								name: "AggVarp",
							},
							&ruleRefExpr{
								pos:  position{line: 3357, col: 69, offset: 103669},
								name: "AggFirst",
							},
							&ruleRefExpr{
								pos:  position{line: 3357, col: 80, offset: 103680},
								name: "AggLast",
							},
							&ruleRefExpr{
								pos:  position{line: 3357, col: 90, offset: 103690},
								name: "AggList",
							},
							&ruleRefExpr{
								pos:  position{line: 3357, col: 100, offset: 103700},
								name: "AggEarliest",
							},
							&ruleRefExpr{
								pos:  position{line: 3357, col: 114, offset: 103714},
								name: "AggEarliestTime",
							},
							&ruleRefExpr{
								pos:  position{line: 3357, col: 132, offset: 103732},
								name: "AggLatest",
							},
							&ruleRefExpr{
								pos:  position{line: 3357, col: 144, offset: 103744},
								name: "AggLatestTime",
							},
							&ruleRefExpr{
								pos:  position{line: 3357, col: 160, offset: 103760},
								name: "AggRate",
							},
						},
					},
				},
			},
		},
		{
			name: "AsField",
			pos:  position{line: 3361, col: 1, offset: 103794},
			expr: &actionExpr{
				pos: position{line: 3361, col: 12, offset: 103805},
				run: (*parser).callonAsField1,
				expr: &seqExpr{
					pos: position{line: 3361, col: 12, offset: 103805},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3361, col: 12, offset: 103805},
							name: "AS",
						},
						&labeledExpr{
							pos:   position{line: 3361, col: 15, offset: 103808},
							label: "field",
							expr: &choiceExpr{
								pos: position{line: 3361, col: 23, offset: 103816},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 3361, col: 23, offset: 103816},
										name: "FieldName",
									},
									&ruleRefExpr{
										pos:  position{line: 3361, col: 35, offset: 103828},
										name: "String",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggCount",
			pos:  position{line: 3375, col: 1, offset: 104157},
			expr: &choiceExpr{
				pos: position{line: 3375, col: 13, offset: 104169},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3375, col: 13, offset: 104169},
						run: (*parser).callonAggCount2,
						expr: &seqExpr{
							pos: position{line: 3375, col: 13, offset: 104169},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 3375, col: 14, offset: 104170},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 3375, col: 14, offset: 104170},
											val:        "count",
											ignoreCase: false,
											want:       "\"count\"",
										},
										&litMatcher{
											pos:        position{line: 3375, col: 24, offset: 104180},
											val:        "c",
											ignoreCase: false,
											want:       "\"c\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3375, col: 29, offset: 104185},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3375, col: 37, offset: 104193},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 3375, col: 44, offset: 104200},
									label: "boolExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3375, col: 53, offset: 104209},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3375, col: 62, offset: 104218},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3390, col: 3, offset: 104568},
						run: (*parser).callonAggCount12,
						expr: &seqExpr{
							pos: position{line: 3390, col: 3, offset: 104568},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 3390, col: 4, offset: 104569},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 3390, col: 4, offset: 104569},
											val:        "count",
											ignoreCase: false,
											want:       "\"count\"",
										},
										&litMatcher{
											pos:        position{line: 3390, col: 14, offset: 104579},
											val:        "c",
											ignoreCase: false,
											want:       "\"c\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3390, col: 19, offset: 104584},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3390, col: 27, offset: 104592},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3390, col: 33, offset: 104598},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3390, col: 43, offset: 104608},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3397, col: 5, offset: 104759},
						run: (*parser).callonAggCount21,
						expr: &choiceExpr{
							pos: position{line: 3397, col: 6, offset: 104760},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 3397, col: 6, offset: 104760},
									val:        "count",
									ignoreCase: false,
									want:       "\"count\"",
								},
								&litMatcher{
									pos:        position{line: 3397, col: 16, offset: 104770},
									val:        "c",
									ignoreCase: false,
									want:       "\"c\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggDistinctCount",
			pos:  position{line: 3406, col: 1, offset: 104906},
			expr: &choiceExpr{
				pos: position{line: 3406, col: 21, offset: 104926},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3406, col: 21, offset: 104926},
						run: (*parser).callonAggDistinctCount2,
						expr: &seqExpr{
							pos: position{line: 3406, col: 21, offset: 104926},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 3406, col: 22, offset: 104927},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 3406, col: 22, offset: 104927},
											val:        "distinct_count",
											ignoreCase: false,
											want:       "\"distinct_count\"",
										},
										&litMatcher{
											pos:        position{line: 3406, col: 41, offset: 104946},
											val:        "dc",
											ignoreCase: false,
											want:       "\"dc\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3406, col: 47, offset: 104952},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3406, col: 55, offset: 104960},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 3406, col: 62, offset: 104967},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3406, col: 72, offset: 104977},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3406, col: 82, offset: 104987},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3416, col: 3, offset: 105221},
						run: (*parser).callonAggDistinctCount12,
						expr: &seqExpr{
							pos: position{line: 3416, col: 3, offset: 105221},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 3416, col: 4, offset: 105222},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 3416, col: 4, offset: 105222},
											val:        "distinct_count",
											ignoreCase: false,
											want:       "\"distinct_count\"",
										},
										&litMatcher{
											pos:        position{line: 3416, col: 23, offset: 105241},
											val:        "dc",
											ignoreCase: false,
											want:       "\"dc\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3416, col: 29, offset: 105247},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3416, col: 37, offset: 105255},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3416, col: 43, offset: 105261},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3416, col: 53, offset: 105271},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAvg",
			pos:  position{line: 3425, col: 1, offset: 105427},
			expr: &choiceExpr{
				pos: position{line: 3425, col: 11, offset: 105437},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3425, col: 11, offset: 105437},
						run: (*parser).callonAggAvg2,
						expr: &seqExpr{
							pos: position{line: 3425, col: 11, offset: 105437},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3425, col: 11, offset: 105437},
									val:        "avg",
									ignoreCase: false,
									want:       "\"avg\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3425, col: 17, offset: 105443},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3425, col: 25, offset: 105451},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3425, col: 32, offset: 105458},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3425, col: 40, offset: 105466},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3425, col: 59, offset: 105485},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3425, col: 78, offset: 105504},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3425, col: 86, offset: 105512},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3440, col: 3, offset: 105870},
						run: (*parser).callonAggAvg12,
						expr: &seqExpr{
							pos: position{line: 3440, col: 3, offset: 105870},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3440, col: 3, offset: 105870},
									val:        "avg",
									ignoreCase: false,
									want:       "\"avg\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3440, col: 9, offset: 105876},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3440, col: 17, offset: 105884},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3440, col: 23, offset: 105890},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3440, col: 33, offset: 105900},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMin",
			pos:  position{line: 3449, col: 1, offset: 106048},
			expr: &choiceExpr{
				pos: position{line: 3449, col: 11, offset: 106058},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3449, col: 11, offset: 106058},
						run: (*parser).callonAggMin2,
						expr: &seqExpr{
							pos: position{line: 3449, col: 11, offset: 106058},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3449, col: 11, offset: 106058},
									val:        "min",
									ignoreCase: false,
									want:       "\"min\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3449, col: 17, offset: 106064},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3449, col: 25, offset: 106072},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3449, col: 32, offset: 106079},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3449, col: 40, offset: 106087},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3449, col: 59, offset: 106106},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3449, col: 78, offset: 106125},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3449, col: 86, offset: 106133},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3464, col: 3, offset: 106491},
						run: (*parser).callonAggMin12,
						expr: &seqExpr{
							pos: position{line: 3464, col: 3, offset: 106491},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3464, col: 3, offset: 106491},
									val:        "min",
									ignoreCase: false,
									want:       "\"min\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3464, col: 9, offset: 106497},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3464, col: 17, offset: 106505},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3464, col: 23, offset: 106511},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3464, col: 33, offset: 106521},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMax",
			pos:  position{line: 3473, col: 1, offset: 106669},
			expr: &choiceExpr{
				pos: position{line: 3473, col: 11, offset: 106679},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3473, col: 11, offset: 106679},
						run: (*parser).callonAggMax2,
						expr: &seqExpr{
							pos: position{line: 3473, col: 11, offset: 106679},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3473, col: 11, offset: 106679},
									val:        "max",
									ignoreCase: false,
									want:       "\"max\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3473, col: 17, offset: 106685},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3473, col: 25, offset: 106693},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3473, col: 32, offset: 106700},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3473, col: 41, offset: 106709},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3473, col: 60, offset: 106728},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3473, col: 79, offset: 106747},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3473, col: 87, offset: 106755},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3488, col: 3, offset: 107113},
						run: (*parser).callonAggMax12,
						expr: &seqExpr{
							pos: position{line: 3488, col: 3, offset: 107113},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3488, col: 3, offset: 107113},
									val:        "max",
									ignoreCase: false,
									want:       "\"max\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3488, col: 9, offset: 107119},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3488, col: 17, offset: 107127},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3488, col: 23, offset: 107133},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3488, col: 33, offset: 107143},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggRange",
			pos:  position{line: 3497, col: 1, offset: 107291},
			expr: &choiceExpr{
				pos: position{line: 3497, col: 13, offset: 107303},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3497, col: 13, offset: 107303},
						run: (*parser).callonAggRange2,
						expr: &seqExpr{
							pos: position{line: 3497, col: 13, offset: 107303},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3497, col: 13, offset: 107303},
									val:        "range",
									ignoreCase: false,
									want:       "\"range\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3497, col: 21, offset: 107311},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3497, col: 29, offset: 107319},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3497, col: 36, offset: 107326},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3497, col: 44, offset: 107334},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3497, col: 63, offset: 107353},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3497, col: 82, offset: 107372},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3497, col: 90, offset: 107380},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3512, col: 3, offset: 107740},
						run: (*parser).callonAggRange12,
						expr: &seqExpr{
							pos: position{line: 3512, col: 3, offset: 107740},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3512, col: 3, offset: 107740},
									val:        "range",
									ignoreCase: false,
									want:       "\"range\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3512, col: 11, offset: 107748},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3512, col: 19, offset: 107756},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3512, col: 25, offset: 107762},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3512, col: 35, offset: 107772},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggSum",
			pos:  position{line: 3521, col: 1, offset: 107922},
			expr: &choiceExpr{
				pos: position{line: 3521, col: 11, offset: 107932},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3521, col: 11, offset: 107932},
						run: (*parser).callonAggSum2,
						expr: &seqExpr{
							pos: position{line: 3521, col: 11, offset: 107932},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3521, col: 11, offset: 107932},
									val:        "sum",
									ignoreCase: false,
									want:       "\"sum\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3521, col: 17, offset: 107938},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3521, col: 25, offset: 107946},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3521, col: 32, offset: 107953},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3521, col: 40, offset: 107961},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3521, col: 59, offset: 107980},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3521, col: 78, offset: 107999},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3521, col: 86, offset: 108007},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3536, col: 3, offset: 108365},
						run: (*parser).callonAggSum12,
						expr: &seqExpr{
							pos: position{line: 3536, col: 3, offset: 108365},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3536, col: 3, offset: 108365},
									val:        "sum",
									ignoreCase: false,
									want:       "\"sum\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3536, col: 9, offset: 108371},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3536, col: 17, offset: 108379},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3536, col: 23, offset: 108385},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3536, col: 33, offset: 108395},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggEstdc",
			pos:  position{line: 3546, col: 1, offset: 108583},
			expr: &choiceExpr{
				pos: position{line: 3546, col: 13, offset: 108595},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3546, col: 13, offset: 108595},
						run: (*parser).callonAggEstdc2,
						expr: &seqExpr{
							pos: position{line: 3546, col: 13, offset: 108595},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3546, col: 13, offset: 108595},
									val:        "estdc",
									ignoreCase: false,
									want:       "\"estdc\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3546, col: 21, offset: 108603},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3546, col: 29, offset: 108611},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3546, col: 36, offset: 108618},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3546, col: 44, offset: 108626},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3546, col: 63, offset: 108645},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3546, col: 82, offset: 108664},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3546, col: 90, offset: 108672},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3561, col: 3, offset: 109032},
						run: (*parser).callonAggEstdc12,
						expr: &seqExpr{
							pos: position{line: 3561, col: 3, offset: 109032},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3561, col: 3, offset: 109032},
									val:        "estdc",
									ignoreCase: false,
									want:       "\"estdc\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3561, col: 11, offset: 109040},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3561, col: 19, offset: 109048},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3561, col: 25, offset: 109054},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3561, col: 35, offset: 109064},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggEstdcError",
			pos:  position{line: 3571, col: 1, offset: 109254},
			expr: &choiceExpr{
				pos: position{line: 3571, col: 18, offset: 109271},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3571, col: 18, offset: 109271},
						run: (*parser).callonAggEstdcError2,
						expr: &seqExpr{
							pos: position{line: 3571, col: 18, offset: 109271},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3571, col: 18, offset: 109271},
									val:        "estdc_error",
									ignoreCase: false,
									want:       "\"estdc_error\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3571, col: 32, offset: 109285},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3571, col: 40, offset: 109293},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3571, col: 47, offset: 109300},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3571, col: 55, offset: 109308},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3571, col: 74, offset: 109327},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3571, col: 93, offset: 109346},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3571, col: 101, offset: 109354},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3586, col: 3, offset: 109719},
						run: (*parser).callonAggEstdcError12,
						expr: &seqExpr{
							pos: position{line: 3586, col: 3, offset: 109719},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3586, col: 3, offset: 109719},
									val:        "estdc_error",
									ignoreCase: false,
									want:       "\"estdc_error\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3586, col: 17, offset: 109733},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3586, col: 25, offset: 109741},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3586, col: 31, offset: 109747},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3586, col: 41, offset: 109757},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggExactPerc",
			pos:  position{line: 3596, col: 1, offset: 109952},
			expr: &choiceExpr{
				pos: position{line: 3596, col: 17, offset: 109968},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3596, col: 17, offset: 109968},
						run: (*parser).callonAggExactPerc2,
						expr: &seqExpr{
							pos: position{line: 3596, col: 17, offset: 109968},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3596, col: 17, offset: 109968},
									val:        "exactperc",
									ignoreCase: false,
									want:       "\"exactperc\"",
								},
								&labeledExpr{
									pos:   position{line: 3596, col: 29, offset: 109980},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 3596, col: 37, offset: 109988},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 3596, col: 37, offset: 109988},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 3596, col: 53, offset: 110004},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3596, col: 70, offset: 110021},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3596, col: 78, offset: 110029},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3596, col: 85, offset: 110036},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3596, col: 93, offset: 110044},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3596, col: 112, offset: 110063},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3596, col: 131, offset: 110082},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3596, col: 139, offset: 110090},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3612, col: 3, offset: 110486},
						run: (*parser).callonAggExactPerc16,
						expr: &seqExpr{
							pos: position{line: 3612, col: 3, offset: 110486},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3612, col: 3, offset: 110486},
									val:        "exactperc",
									ignoreCase: false,
									want:       "\"exactperc\"",
								},
								&labeledExpr{
									pos:   position{line: 3612, col: 15, offset: 110498},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 3612, col: 23, offset: 110506},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 3612, col: 23, offset: 110506},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 3612, col: 39, offset: 110522},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3612, col: 56, offset: 110539},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3612, col: 64, offset: 110547},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3612, col: 70, offset: 110553},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3612, col: 80, offset: 110563},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggPerc",
			pos:  position{line: 3623, col: 1, offset: 110789},
			expr: &choiceExpr{
				pos: position{line: 3623, col: 12, offset: 110800},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3623, col: 12, offset: 110800},
						run: (*parser).callonAggPerc2,
						expr: &seqExpr{
							pos: position{line: 3623, col: 12, offset: 110800},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3623, col: 12, offset: 110800},
									val:        "perc",
									ignoreCase: false,
									want:       "\"perc\"",
								},
								&labeledExpr{
									pos:   position{line: 3623, col: 19, offset: 110807},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 3623, col: 27, offset: 110815},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 3623, col: 27, offset: 110815},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 3623, col: 43, offset: 110831},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3623, col: 60, offset: 110848},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3623, col: 68, offset: 110856},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3623, col: 75, offset: 110863},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3623, col: 83, offset: 110871},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3623, col: 102, offset: 110890},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3623, col: 121, offset: 110909},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3623, col: 129, offset: 110917},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3639, col: 3, offset: 111308},
						run: (*parser).callonAggPerc16,
						expr: &seqExpr{
							pos: position{line: 3639, col: 3, offset: 111308},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3639, col: 3, offset: 111308},
									val:        "perc",
									ignoreCase: false,
									want:       "\"perc\"",
								},
								&labeledExpr{
									pos:   position{line: 3639, col: 10, offset: 111315},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 3639, col: 18, offset: 111323},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 3639, col: 18, offset: 111323},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 3639, col: 34, offset: 111339},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3639, col: 51, offset: 111356},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3639, col: 59, offset: 111364},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3639, col: 65, offset: 111370},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3639, col: 75, offset: 111380},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggUpperPerc",
			pos:  position{line: 3650, col: 1, offset: 111601},
			expr: &choiceExpr{
				pos: position{line: 3650, col: 17, offset: 111617},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3650, col: 17, offset: 111617},
						run: (*parser).callonAggUpperPerc2,
						expr: &seqExpr{
							pos: position{line: 3650, col: 17, offset: 111617},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3650, col: 17, offset: 111617},
									val:        "upperperc",
									ignoreCase: false,
									want:       "\"upperperc\"",
								},
								&labeledExpr{
									pos:   position{line: 3650, col: 29, offset: 111629},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 3650, col: 37, offset: 111637},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 3650, col: 37, offset: 111637},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 3650, col: 53, offset: 111653},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3650, col: 70, offset: 111670},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3650, col: 78, offset: 111678},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3650, col: 85, offset: 111685},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3650, col: 93, offset: 111693},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3650, col: 112, offset: 111712},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3650, col: 131, offset: 111731},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3650, col: 139, offset: 111739},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3666, col: 3, offset: 112135},
						run: (*parser).callonAggUpperPerc16,
						expr: &seqExpr{
							pos: position{line: 3666, col: 3, offset: 112135},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3666, col: 3, offset: 112135},
									val:        "upperperc",
									ignoreCase: false,
									want:       "\"upperperc\"",
								},
								&labeledExpr{
									pos:   position{line: 3666, col: 15, offset: 112147},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 3666, col: 23, offset: 112155},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 3666, col: 23, offset: 112155},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 3666, col: 39, offset: 112171},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3666, col: 56, offset: 112188},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3666, col: 64, offset: 112196},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3666, col: 70, offset: 112202},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3666, col: 80, offset: 112212},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMedian",
			pos:  position{line: 3677, col: 1, offset: 112438},
			expr: &choiceExpr{
				pos: position{line: 3677, col: 14, offset: 112451},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3677, col: 14, offset: 112451},
						run: (*parser).callonAggMedian2,
						expr: &seqExpr{
							pos: position{line: 3677, col: 14, offset: 112451},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3677, col: 14, offset: 112451},
									val:        "median",
									ignoreCase: false,
									want:       "\"median\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3677, col: 23, offset: 112460},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3677, col: 31, offset: 112468},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3677, col: 38, offset: 112475},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3677, col: 46, offset: 112483},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3677, col: 65, offset: 112502},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3677, col: 84, offset: 112521},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3677, col: 92, offset: 112529},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3692, col: 3, offset: 112890},
						run: (*parser).callonAggMedian12,
						expr: &seqExpr{
							pos: position{line: 3692, col: 3, offset: 112890},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3692, col: 3, offset: 112890},
									val:        "median",
									ignoreCase: false,
									want:       "\"median\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3692, col: 12, offset: 112899},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3692, col: 20, offset: 112907},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3692, col: 26, offset: 112913},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3692, col: 36, offset: 112923},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMode",
			pos:  position{line: 3702, col: 1, offset: 113114},
			expr: &choiceExpr{
				pos: position{line: 3702, col: 12, offset: 113125},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3702, col: 12, offset: 113125},
						run: (*parser).callonAggMode2,
						expr: &seqExpr{
							pos: position{line: 3702, col: 12, offset: 113125},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3702, col: 12, offset: 113125},
									val:        "mode",
									ignoreCase: false,
									want:       "\"mode\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3702, col: 19, offset: 113132},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3702, col: 27, offset: 113140},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3702, col: 34, offset: 113147},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3702, col: 42, offset: 113155},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3702, col: 61, offset: 113174},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3702, col: 80, offset: 113193},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3702, col: 88, offset: 113201},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3717, col: 3, offset: 113560},
						run: (*parser).callonAggMode12,
						expr: &seqExpr{
							pos: position{line: 3717, col: 3, offset: 113560},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3717, col: 3, offset: 113560},
									val:        "mode",
									ignoreCase: false,
									want:       "\"mode\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3717, col: 10, offset: 113567},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3717, col: 18, offset: 113575},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3717, col: 24, offset: 113581},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3717, col: 34, offset: 113591},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggStdev",
			pos:  position{line: 3727, col: 1, offset: 113780},
			expr: &choiceExpr{
				pos: position{line: 3727, col: 13, offset: 113792},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3727, col: 13, offset: 113792},
						run: (*parser).callonAggStdev2,
						expr: &seqExpr{
							pos: position{line: 3727, col: 13, offset: 113792},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3727, col: 13, offset: 113792},
									val:        "stdev",
									ignoreCase: false,
									want:       "\"stdev\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3727, col: 21, offset: 113800},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3727, col: 29, offset: 113808},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3727, col: 36, offset: 113815},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3727, col: 44, offset: 113823},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3727, col: 63, offset: 113842},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3727, col: 82, offset: 113861},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3727, col: 90, offset: 113869},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3742, col: 3, offset: 114229},
						run: (*parser).callonAggStdev12,
						expr: &seqExpr{
							pos: position{line: 3742, col: 3, offset: 114229},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3742, col: 3, offset: 114229},
									val:        "stdev",
									ignoreCase: false,
									want:       "\"stdev\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3742, col: 11, offset: 114237},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3742, col: 19, offset: 114245},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3742, col: 25, offset: 114251},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3742, col: 35, offset: 114261},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggStdevp",
			pos:  position{line: 3752, col: 1, offset: 114451},
			expr: &choiceExpr{
				pos: position{line: 3752, col: 14, offset: 114464},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3752, col: 14, offset: 114464},
						run: (*parser).callonAggStdevp2,
						expr: &seqExpr{
							pos: position{line: 3752, col: 14, offset: 114464},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3752, col: 14, offset: 114464},
									val:        "stdevp",
									ignoreCase: false,
									want:       "\"stdevp\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3752, col: 23, offset: 114473},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3752, col: 31, offset: 114481},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3752, col: 38, offset: 114488},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3752, col: 46, offset: 114496},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3752, col: 65, offset: 114515},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3752, col: 84, offset: 114534},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3752, col: 92, offset: 114542},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3767, col: 3, offset: 114903},
						run: (*parser).callonAggStdevp12,
						expr: &seqExpr{
							pos: position{line: 3767, col: 3, offset: 114903},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3767, col: 3, offset: 114903},
									val:        "stdevp",
									ignoreCase: false,
									want:       "\"stdevp\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3767, col: 12, offset: 114912},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3767, col: 20, offset: 114920},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3767, col: 26, offset: 114926},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3767, col: 36, offset: 114936},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggSumsq",
			pos:  position{line: 3777, col: 1, offset: 115127},
			expr: &choiceExpr{
				pos: position{line: 3777, col: 13, offset: 115139},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3777, col: 13, offset: 115139},
						run: (*parser).callonAggSumsq2,
						expr: &seqExpr{
							pos: position{line: 3777, col: 13, offset: 115139},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3777, col: 13, offset: 115139},
									val:        "sumsq",
									ignoreCase: false,
									want:       "\"sumsq\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3777, col: 21, offset: 115147},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3777, col: 29, offset: 115155},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3777, col: 36, offset: 115162},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3777, col: 44, offset: 115170},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3777, col: 63, offset: 115189},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3777, col: 82, offset: 115208},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3777, col: 90, offset: 115216},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3792, col: 3, offset: 115576},
						run: (*parser).callonAggSumsq12,
						expr: &seqExpr{
							pos: position{line: 3792, col: 3, offset: 115576},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3792, col: 3, offset: 115576},
									val:        "sumsq",
									ignoreCase: false,
									want:       "\"sumsq\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3792, col: 11, offset: 115584},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3792, col: 19, offset: 115592},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3792, col: 25, offset: 115598},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3792, col: 35, offset: 115608},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggVar",
			pos:  position{line: 3802, col: 1, offset: 115798},
			expr: &choiceExpr{
				pos: position{line: 3802, col: 11, offset: 115808},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3802, col: 11, offset: 115808},
						run: (*parser).callonAggVar2,
						expr: &seqExpr{
							pos: position{line: 3802, col: 11, offset: 115808},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3802, col: 11, offset: 115808},
									val:        "var",
									ignoreCase: false,
									want:       "\"var\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3802, col: 17, offset: 115814},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3802, col: 25, offset: 115822},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3802, col: 32, offset: 115829},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3802, col: 40, offset: 115837},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3802, col: 59, offset: 115856},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3802, col: 78, offset: 115875},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3802, col: 86, offset: 115883},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3817, col: 3, offset: 116241},
						run: (*parser).callonAggVar12,
						expr: &seqExpr{
							pos: position{line: 3817, col: 3, offset: 116241},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3817, col: 3, offset: 116241},
									val:        "var",
									ignoreCase: false,
									want:       "\"var\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3817, col: 9, offset: 116247},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3817, col: 17, offset: 116255},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3817, col: 23, offset: 116261},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3817, col: 33, offset: 116271},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggVarp",
			pos:  position{line: 3827, col: 1, offset: 116459},
			expr: &choiceExpr{
				pos: position{line: 3827, col: 12, offset: 116470},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3827, col: 12, offset: 116470},
						run: (*parser).callonAggVarp2,
						expr: &seqExpr{
							pos: position{line: 3827, col: 12, offset: 116470},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3827, col: 12, offset: 116470},
									val:        "varp",
									ignoreCase: false,
									want:       "\"varp\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3827, col: 19, offset: 116477},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3827, col: 27, offset: 116485},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3827, col: 34, offset: 116492},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3827, col: 42, offset: 116500},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3827, col: 61, offset: 116519},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3827, col: 80, offset: 116538},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3827, col: 88, offset: 116546},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3842, col: 3, offset: 116905},
						run: (*parser).callonAggVarp12,
						expr: &seqExpr{
							pos: position{line: 3842, col: 3, offset: 116905},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3842, col: 3, offset: 116905},
									val:        "varp",
									ignoreCase: false,
									want:       "\"varp\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3842, col: 10, offset: 116912},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3842, col: 18, offset: 116920},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3842, col: 24, offset: 116926},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3842, col: 34, offset: 116936},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggFirst",
			pos:  position{line: 3852, col: 1, offset: 117125},
			expr: &choiceExpr{
				pos: position{line: 3852, col: 13, offset: 117137},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3852, col: 13, offset: 117137},
						run: (*parser).callonAggFirst2,
						expr: &seqExpr{
							pos: position{line: 3852, col: 13, offset: 117137},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3852, col: 13, offset: 117137},
									val:        "first",
									ignoreCase: false,
									want:       "\"first\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3852, col: 21, offset: 117145},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3852, col: 29, offset: 117153},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3852, col: 36, offset: 117160},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3852, col: 44, offset: 117168},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3852, col: 63, offset: 117187},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3852, col: 82, offset: 117206},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3852, col: 90, offset: 117214},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3867, col: 3, offset: 117574},
						run: (*parser).callonAggFirst12,
						expr: &seqExpr{
							pos: position{line: 3867, col: 3, offset: 117574},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3867, col: 3, offset: 117574},
									val:        "first",
									ignoreCase: false,
									want:       "\"first\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3867, col: 11, offset: 117582},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3867, col: 19, offset: 117590},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3867, col: 25, offset: 117596},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3867, col: 35, offset: 117606},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggLast",
			pos:  position{line: 3877, col: 1, offset: 117796},
			expr: &choiceExpr{
				pos: position{line: 3877, col: 12, offset: 117807},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3877, col: 12, offset: 117807},
						run: (*parser).callonAggLast2,
						expr: &seqExpr{
							pos: position{line: 3877, col: 12, offset: 117807},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3877, col: 12, offset: 117807},
									val:        "last",
									ignoreCase: false,
									want:       "\"last\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3877, col: 19, offset: 117814},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3877, col: 27, offset: 117822},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3877, col: 34, offset: 117829},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3877, col: 42, offset: 117837},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3877, col: 61, offset: 117856},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3877, col: 80, offset: 117875},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3877, col: 88, offset: 117883},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3892, col: 3, offset: 118242},
						run: (*parser).callonAggLast12,
						expr: &seqExpr{
							pos: position{line: 3892, col: 3, offset: 118242},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3892, col: 3, offset: 118242},
									val:        "last",
									ignoreCase: false,
									want:       "\"last\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3892, col: 10, offset: 118249},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3892, col: 18, offset: 118257},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3892, col: 24, offset: 118263},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3892, col: 34, offset: 118273},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggList",
			pos:  position{line: 3902, col: 1, offset: 118462},
			expr: &choiceExpr{
				pos: position{line: 3902, col: 12, offset: 118473},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3902, col: 12, offset: 118473},
						run: (*parser).callonAggList2,
						expr: &seqExpr{
							pos: position{line: 3902, col: 12, offset: 118473},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3902, col: 12, offset: 118473},
									val:        "list",
									ignoreCase: false,
									want:       "\"list\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3902, col: 19, offset: 118480},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3902, col: 27, offset: 118488},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 3902, col: 34, offset: 118495},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3902, col: 44, offset: 118505},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3902, col: 54, offset: 118515},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3912, col: 3, offset: 118742},
						run: (*parser).callonAggList10,
						expr: &seqExpr{
							pos: position{line: 3912, col: 3, offset: 118742},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3912, col: 3, offset: 118742},
									val:        "list",
									ignoreCase: false,
									want:       "\"list\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3912, col: 10, offset: 118749},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3912, col: 18, offset: 118757},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3912, col: 24, offset: 118763},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3912, col: 34, offset: 118773},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggEarliest",
			pos:  position{line: 3922, col: 1, offset: 118962},
			expr: &choiceExpr{
				pos: position{line: 3922, col: 16, offset: 118977},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3922, col: 16, offset: 118977},
						run: (*parser).callonAggEarliest2,
						expr: &seqExpr{
							pos: position{line: 3922, col: 16, offset: 118977},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3922, col: 16, offset: 118977},
									val:        "earliest",
									ignoreCase: false,
									want:       "\"earliest\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3922, col: 27, offset: 118988},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3922, col: 35, offset: 118996},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3922, col: 42, offset: 119003},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3922, col: 50, offset: 119011},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3922, col: 69, offset: 119030},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3922, col: 88, offset: 119049},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3922, col: 96, offset: 119057},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3937, col: 3, offset: 119420},
						run: (*parser).callonAggEarliest12,
						expr: &seqExpr{
							pos: position{line: 3937, col: 3, offset: 119420},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3937, col: 3, offset: 119420},
									val:        "earliest",
									ignoreCase: false,
									want:       "\"earliest\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3937, col: 14, offset: 119431},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3937, col: 22, offset: 119439},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3937, col: 28, offset: 119445},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3937, col: 38, offset: 119455},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggEarliestTime",
			pos:  position{line: 3947, col: 1, offset: 119648},
			expr: &choiceExpr{
				pos: position{line: 3947, col: 20, offset: 119667},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3947, col: 20, offset: 119667},
						run: (*parser).callonAggEarliestTime2,
						expr: &seqExpr{
							pos: position{line: 3947, col: 20, offset: 119667},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3947, col: 20, offset: 119667},
									val:        "earliest_time",
									ignoreCase: false,
									want:       "\"earliest_time\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3947, col: 36, offset: 119683},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3947, col: 44, offset: 119691},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3947, col: 51, offset: 119698},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3947, col: 59, offset: 119706},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3947, col: 78, offset: 119725},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3947, col: 97, offset: 119744},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3947, col: 105, offset: 119752},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3962, col: 3, offset: 120119},
						run: (*parser).callonAggEarliestTime12,
						expr: &seqExpr{
							pos: position{line: 3962, col: 3, offset: 120119},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3962, col: 3, offset: 120119},
									val:        "earliest_time",
									ignoreCase: false,
									want:       "\"earliest_time\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3962, col: 19, offset: 120135},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3962, col: 27, offset: 120143},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3962, col: 33, offset: 120149},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3962, col: 43, offset: 120159},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggLatest",
			pos:  position{line: 3972, col: 1, offset: 120356},
			expr: &choiceExpr{
				pos: position{line: 3972, col: 14, offset: 120369},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3972, col: 14, offset: 120369},
						run: (*parser).callonAggLatest2,
						expr: &seqExpr{
							pos: position{line: 3972, col: 14, offset: 120369},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3972, col: 14, offset: 120369},
									val:        "latest",
									ignoreCase: false,
									want:       "\"latest\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3972, col: 23, offset: 120378},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3972, col: 31, offset: 120386},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3972, col: 38, offset: 120393},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3972, col: 46, offset: 120401},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3972, col: 65, offset: 120420},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3972, col: 84, offset: 120439},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3972, col: 92, offset: 120447},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3987, col: 3, offset: 120808},
						run: (*parser).callonAggLatest12,
						expr: &seqExpr{
							pos: position{line: 3987, col: 3, offset: 120808},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3987, col: 3, offset: 120808},
									val:        "latest",
									ignoreCase: false,
									want:       "\"latest\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3987, col: 12, offset: 120817},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3987, col: 20, offset: 120825},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3987, col: 26, offset: 120831},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3987, col: 36, offset: 120841},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggLatestTime",
			pos:  position{line: 3997, col: 1, offset: 121032},
			expr: &choiceExpr{
				pos: position{line: 3997, col: 18, offset: 121049},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3997, col: 18, offset: 121049},
						run: (*parser).callonAggLatestTime2,
						expr: &seqExpr{
							pos: position{line: 3997, col: 18, offset: 121049},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3997, col: 18, offset: 121049},
									val:        "latest_time",
									ignoreCase: false,
									want:       "\"latest_time\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3997, col: 32, offset: 121063},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3997, col: 40, offset: 121071},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3997, col: 47, offset: 121078},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3997, col: 55, offset: 121086},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3997, col: 74, offset: 121105},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3997, col: 93, offset: 121124},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3997, col: 101, offset: 121132},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 4012, col: 3, offset: 121497},
						run: (*parser).callonAggLatestTime12,
						expr: &seqExpr{
							pos: position{line: 4012, col: 3, offset: 121497},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4012, col: 3, offset: 121497},
									val:        "latest_time",
									ignoreCase: false,
									want:       "\"latest_time\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4012, col: 17, offset: 121511},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 4012, col: 25, offset: 121519},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 4012, col: 31, offset: 121525},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 4012, col: 41, offset: 121535},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggRate",
			pos:  position{line: 4022, col: 1, offset: 121730},
			expr: &choiceExpr{
				pos: position{line: 4022, col: 12, offset: 121741},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 4022, col: 12, offset: 121741},
						run: (*parser).callonAggRate2,
						expr: &seqExpr{
							pos: position{line: 4022, col: 12, offset: 121741},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4022, col: 12, offset: 121741},
									val:        "rate",
									ignoreCase: false,
									want:       "\"rate\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4022, col: 19, offset: 121748},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 4022, col: 27, offset: 121756},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4022, col: 34, offset: 121763},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 4022, col: 42, offset: 121771},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 4022, col: 61, offset: 121790},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 4022, col: 80, offset: 121809},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 4022, col: 88, offset: 121817},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 4037, col: 3, offset: 122181},
						run: (*parser).callonAggRate12,
						expr: &seqExpr{
							pos: position{line: 4037, col: 3, offset: 122181},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4037, col: 3, offset: 122181},
									val:        "rate",
									ignoreCase: false,
									want:       "\"rate\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4037, col: 10, offset: 122188},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 4037, col: 18, offset: 122196},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 4037, col: 24, offset: 122202},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 4037, col: 34, offset: 122212},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggValues",
			pos:  position{line: 4046, col: 1, offset: 122366},
			expr: &choiceExpr{
				pos: position{line: 4046, col: 14, offset: 122379},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 4046, col: 14, offset: 122379},
						run: (*parser).callonAggValues2,
						expr: &seqExpr{
							pos: position{line: 4046, col: 14, offset: 122379},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4046, col: 14, offset: 122379},
									val:        "values",
									ignoreCase: false,
									want:       "\"values\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4046, col: 23, offset: 122388},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 4046, col: 31, offset: 122396},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 4046, col: 38, offset: 122403},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 4046, col: 48, offset: 122413},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 4046, col: 58, offset: 122423},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 4056, col: 3, offset: 122652},
						run: (*parser).callonAggValues10,
						expr: &seqExpr{
							pos: position{line: 4056, col: 3, offset: 122652},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4056, col: 3, offset: 122652},
									val:        "values",
									ignoreCase: false,
									want:       "\"values\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4056, col: 12, offset: 122661},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 4056, col: 20, offset: 122669},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 4056, col: 26, offset: 122675},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 4056, col: 36, offset: 122685},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldWithNumberValue",
			pos:  position{line: 4065, col: 1, offset: 122836},
			expr: &actionExpr{
				pos: position{line: 4065, col: 25, offset: 122860},
				run: (*parser).callonFieldWithNumberValue1,
				expr: &labeledExpr{
					pos:   position{line: 4065, col: 25, offset: 122860},
					label: "keyValuePair",
					expr: &choiceExpr{
						pos: position{line: 4065, col: 39, offset: 122874},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4065, col: 39, offset: 122874},
								name: "NamedFieldWithNumberValue",
							},
							&ruleRefExpr{
								pos:  position{line: 4065, col: 67, offset: 122902},
								name: "UnnamedFieldWithNumberValue",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedFieldWithNumberValue",
			pos:  position{line: 4069, col: 1, offset: 122965},
			expr: &actionExpr{
				pos: position{line: 4069, col: 30, offset: 122994},
				run: (*parser).callonNamedFieldWithNumberValue1,
				expr: &seqExpr{
					pos: position{line: 4069, col: 30, offset: 122994},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4069, col: 30, offset: 122994},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 4069, col: 34, offset: 122998},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 4069, col: 44, offset: 123008},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 4069, col: 48, offset: 123012},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 4069, col: 48, offset: 123012},
										name: "EqualityOperator",
									},
									&ruleRefExpr{
										pos:  position{line: 4069, col: 67, offset: 123031},
										name: "InequalityOperator",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 4069, col: 87, offset: 123051},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 4069, col: 93, offset: 123057},
								name: "Number",
							},
						},
					},
				},
			},
		},
		{
			name: "UnnamedFieldWithNumberValue",
			pos:  position{line: 4082, col: 1, offset: 123291},
			expr: &actionExpr{
				pos: position{line: 4082, col: 32, offset: 123322},
				run: (*parser).callonUnnamedFieldWithNumberValue1,
				expr: &labeledExpr{
					pos:   position{line: 4082, col: 32, offset: 123322},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 4082, col: 38, offset: 123328},
						name: "Number",
					},
				},
			},
		},
		{
			name: "FieldWithBooleanValue",
			pos:  position{line: 4095, col: 1, offset: 123545},
			expr: &actionExpr{
				pos: position{line: 4095, col: 26, offset: 123570},
				run: (*parser).callonFieldWithBooleanValue1,
				expr: &seqExpr{
					pos: position{line: 4095, col: 26, offset: 123570},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4095, col: 26, offset: 123570},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 4095, col: 30, offset: 123574},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 4095, col: 40, offset: 123584},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 4095, col: 43, offset: 123587},
								name: "EqualityOperator",
							},
						},
						&labeledExpr{
							pos:   position{line: 4095, col: 60, offset: 123604},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 4095, col: 66, offset: 123610},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldWithStringValue",
			pos:  position{line: 4108, col: 1, offset: 123845},
			expr: &actionExpr{
				pos: position{line: 4108, col: 25, offset: 123869},
				run: (*parser).callonFieldWithStringValue1,
				expr: &labeledExpr{
					pos:   position{line: 4108, col: 25, offset: 123869},
					label: "keyValuePair",
					expr: &choiceExpr{
						pos: position{line: 4108, col: 39, offset: 123883},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4108, col: 39, offset: 123883},
								name: "NamedFieldWithStringValue",
							},
							&ruleRefExpr{
								pos:  position{line: 4108, col: 67, offset: 123911},
								name: "UnnamedFieldWithStringValue",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedFieldWithStringValue",
			pos:  position{line: 4112, col: 1, offset: 123974},
			expr: &actionExpr{
				pos: position{line: 4112, col: 30, offset: 124003},
				run: (*parser).callonNamedFieldWithStringValue1,
				expr: &seqExpr{
					pos: position{line: 4112, col: 30, offset: 124003},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4112, col: 30, offset: 124003},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 4112, col: 34, offset: 124007},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 4112, col: 44, offset: 124017},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 4112, col: 47, offset: 124020},
								name: "EqualityOperator",
							},
						},
						&labeledExpr{
							pos:   position{line: 4112, col: 64, offset: 124037},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 4112, col: 70, offset: 124043},
								name: "String",
							},
						},
					},
				},
			},
		},
		{
			name: "UnnamedFieldWithStringValue",
			pos:  position{line: 4124, col: 1, offset: 124276},
			expr: &actionExpr{
				pos: position{line: 4124, col: 32, offset: 124307},
				run: (*parser).callonUnnamedFieldWithStringValue1,
				expr: &labeledExpr{
					pos:   position{line: 4124, col: 32, offset: 124307},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 4124, col: 38, offset: 124313},
						name: "String",
					},
				},
			},
		},
		{
			name: "FieldNameList",
			pos:  position{line: 4138, col: 1, offset: 124644},
			expr: &actionExpr{
				pos: position{line: 4138, col: 18, offset: 124661},
				run: (*parser).callonFieldNameList1,
				expr: &seqExpr{
					pos: position{line: 4138, col: 18, offset: 124661},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4138, col: 18, offset: 124661},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 4138, col: 24, offset: 124667},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 4138, col: 34, offset: 124677},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 4138, col: 39, offset: 124682},
								expr: &seqExpr{
									pos: position{line: 4138, col: 40, offset: 124683},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 4138, col: 40, offset: 124683},
											name: "COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 4138, col: 46, offset: 124689},
											name: "FieldName",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeModifiers",
			pos:  position{line: 4155, col: 1, offset: 125184},
			expr: &choiceExpr{
				pos: position{line: 4155, col: 18, offset: 125201},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 4155, col: 18, offset: 125201},
						name: "EarliestAndLatest",
					},
					&ruleRefExpr{
						pos:  position{line: 4155, col: 38, offset: 125221},
						name: "EarliestOnly",
					},
				},
			},
		},
		{
			name: "EarliestAndLatest",
			pos:  position{line: 4157, col: 1, offset: 125235},
			expr: &actionExpr{
				pos: position{line: 4157, col: 22, offset: 125256},
				run: (*parser).callonEarliestAndLatest1,
				expr: &seqExpr{
					pos: position{line: 4157, col: 22, offset: 125256},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4157, col: 22, offset: 125256},
							name: "CMD_EARLIEST",
						},
						&ruleRefExpr{
							pos:  position{line: 4157, col: 35, offset: 125269},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4157, col: 41, offset: 125275},
							label: "earliestTime",
							expr: &choiceExpr{
								pos: position{line: 4157, col: 55, offset: 125289},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 4157, col: 55, offset: 125289},
										name: "AbsoluteTimestamp",
									},
									&ruleRefExpr{
										pos:  position{line: 4157, col: 75, offset: 125309},
										name: "RelativeTimestamp",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4157, col: 94, offset: 125328},
							name: "SPACE",
						},
						&ruleRefExpr{
							pos:  position{line: 4157, col: 100, offset: 125334},
							name: "CMD_LATEST",
						},
						&ruleRefExpr{
							pos:  position{line: 4157, col: 111, offset: 125345},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4157, col: 117, offset: 125351},
							label: "latestTime",
							expr: &choiceExpr{
								pos: position{line: 4157, col: 129, offset: 125363},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 4157, col: 129, offset: 125363},
										name: "AbsoluteTimestamp",
									},
									&ruleRefExpr{
										pos:  position{line: 4157, col: 149, offset: 125383},
										name: "RelativeTimestamp",
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 4157, col: 168, offset: 125402},
							expr: &anyMatcher{
								line: 4157, col: 169, offset: 125403,
							},
						},
					},
				},
			},
		},
		{
			name: "EarliestOnly",
			pos:  position{line: 4188, col: 1, offset: 126135},
			expr: &actionExpr{
				pos: position{line: 4188, col: 17, offset: 126151},
				run: (*parser).callonEarliestOnly1,
				expr: &seqExpr{
					pos: position{line: 4188, col: 17, offset: 126151},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4188, col: 17, offset: 126151},
							name: "CMD_EARLIEST",
						},
						&ruleRefExpr{
							pos:  position{line: 4188, col: 30, offset: 126164},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4188, col: 36, offset: 126170},
							label: "earliestTime",
							expr: &choiceExpr{
								pos: position{line: 4188, col: 50, offset: 126184},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 4188, col: 50, offset: 126184},
										name: "AbsoluteTimestamp",
									},
									&ruleRefExpr{
										pos:  position{line: 4188, col: 70, offset: 126204},
										name: "RelativeTimestamp",
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 4188, col: 89, offset: 126223},
							expr: &anyMatcher{
								line: 4188, col: 90, offset: 126224,
							},
						},
					},
				},
			},
		},
		{
			name: "RelIntegerAsString",
			pos:  position{line: 4211, col: 1, offset: 126735},
			expr: &actionExpr{
				pos: position{line: 4211, col: 23, offset: 126757},
				run: (*parser).callonRelIntegerAsString1,
				expr: &seqExpr{
					pos: position{line: 4211, col: 23, offset: 126757},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 4211, col: 23, offset: 126757},
							val:        "[-+]",
							chars:      []rune{'-', '+'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 4211, col: 27, offset: 126761},
							expr: &charClassMatcher{
								pos:        position{line: 4211, col: 27, offset: 126761},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "WeekSnap",
			pos:  position{line: 4215, col: 1, offset: 126804},
			expr: &actionExpr{
				pos: position{line: 4215, col: 13, offset: 126816},
				run: (*parser).callonWeekSnap1,
				expr: &seqExpr{
					pos: position{line: 4215, col: 14, offset: 126817},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4215, col: 14, offset: 126817},
							val:        "w",
							ignoreCase: false,
							want:       "\"w\"",
						},
						&charClassMatcher{
							pos:        position{line: 4215, col: 17, offset: 126820},
							val:        "[0-7]",
							ranges:     []rune{'0', '7'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "RelTimeUnit",
			pos:  position{line: 4219, col: 1, offset: 126863},
			expr: &actionExpr{
				pos: position{line: 4219, col: 16, offset: 126878},
				run: (*parser).callonRelTimeUnit1,
				expr: &labeledExpr{
					pos:   position{line: 4219, col: 16, offset: 126878},
					label: "timeUnit",
					expr: &ruleRefExpr{
						pos:  position{line: 4219, col: 26, offset: 126888},
						name: "AllTimeScale",
					},
				},
			},
		},
		{
			name: "Snap",
			pos:  position{line: 4226, col: 1, offset: 127112},
			expr: &actionExpr{
				pos: position{line: 4226, col: 9, offset: 127120},
				run: (*parser).callonSnap1,
				expr: &seqExpr{
					pos: position{line: 4226, col: 9, offset: 127120},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4226, col: 9, offset: 127120},
							val:        "@",
							ignoreCase: false,
							want:       "\"@\"",
						},
						&labeledExpr{
							pos:   position{line: 4226, col: 13, offset: 127124},
							label: "snap",
							expr: &choiceExpr{
								pos: position{line: 4226, col: 19, offset: 127130},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 4226, col: 19, offset: 127130},
										name: "WeekSnap",
									},
									&ruleRefExpr{
										pos:  position{line: 4226, col: 30, offset: 127141},
										name: "RelTimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Offset",
			pos:  position{line: 4230, col: 1, offset: 127189},
			expr: &actionExpr{
				pos: position{line: 4230, col: 11, offset: 127199},
				run: (*parser).callonOffset1,
				expr: &seqExpr{
					pos: position{line: 4230, col: 11, offset: 127199},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4230, col: 11, offset: 127199},
							label: "off",
							expr: &ruleRefExpr{
								pos:  position{line: 4230, col: 16, offset: 127204},
								name: "RelIntegerAsString",
							},
						},
						&labeledExpr{
							pos:   position{line: 4230, col: 36, offset: 127224},
							label: "tuOff",
							expr: &ruleRefExpr{
								pos:  position{line: 4230, col: 43, offset: 127231},
								name: "RelTimeUnit",
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeTimestamp",
			pos:  position{line: 4261, col: 1, offset: 128116},
			expr: &actionExpr{
				pos: position{line: 4261, col: 22, offset: 128137},
				run: (*parser).callonRelativeTimestamp1,
				expr: &seqExpr{
					pos: position{line: 4261, col: 22, offset: 128137},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4261, col: 22, offset: 128137},
							label: "defaultTime",
							expr: &zeroOrOneExpr{
								pos: position{line: 4261, col: 34, offset: 128149},
								expr: &choiceExpr{
									pos: position{line: 4261, col: 35, offset: 128150},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 4261, col: 35, offset: 128150},
											val:        "now",
											ignoreCase: false,
											want:       "\"now\"",
										},
										&litMatcher{
											pos:        position{line: 4261, col: 43, offset: 128158},
											val:        "1",
											ignoreCase: false,
											want:       "\"1\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 4261, col: 49, offset: 128164},
							label: "offset",
							expr: &zeroOrOneExpr{
								pos: position{line: 4261, col: 56, offset: 128171},
								expr: &ruleRefExpr{
									pos:  position{line: 4261, col: 57, offset: 128172},
									name: "Offset",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 4261, col: 66, offset: 128181},
							label: "snapParam",
							expr: &zeroOrOneExpr{
								pos: position{line: 4261, col: 76, offset: 128191},
								expr: &ruleRefExpr{
									pos:  position{line: 4261, col: 77, offset: 128192},
									name: "Snap",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AbsoluteTimestamp",
			pos:  position{line: 4305, col: 1, offset: 129372},
			expr: &actionExpr{
				pos: position{line: 4305, col: 22, offset: 129393},
				run: (*parser).callonAbsoluteTimestamp1,
				expr: &seqExpr{
					pos: position{line: 4305, col: 22, offset: 129393},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 4305, col: 22, offset: 129393},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 4305, col: 27, offset: 129398},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 4305, col: 33, offset: 129404},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&charClassMatcher{
							pos:        position{line: 4305, col: 37, offset: 129408},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 4305, col: 42, offset: 129413},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 4305, col: 48, offset: 129419},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&charClassMatcher{
							pos:        position{line: 4305, col: 52, offset: 129423},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 4305, col: 57, offset: 129428},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 4305, col: 62, offset: 129433},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 4305, col: 67, offset: 129438},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 4305, col: 73, offset: 129444},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&charClassMatcher{
							pos:        position{line: 4305, col: 77, offset: 129448},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 4305, col: 82, offset: 129453},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 4305, col: 88, offset: 129459},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&charClassMatcher{
							pos:        position{line: 4305, col: 92, offset: 129463},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 4305, col: 97, offset: 129468},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 4305, col: 103, offset: 129474},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&charClassMatcher{
							pos:        position{line: 4305, col: 107, offset: 129478},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 4305, col: 112, offset: 129483},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 4315, col: 1, offset: 129879},
			expr: &actionExpr{
				pos: position{line: 4315, col: 14, offset: 129892},
				run: (*parser).callonFieldName1,
				expr: &seqExpr{
					pos: position{line: 4315, col: 14, offset: 129892},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 4315, col: 14, offset: 129892},
							val:        "[a-zA-Z0-9:*]",
							chars:      []rune{':', '*'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 4315, col: 27, offset: 129905},
							expr: &charClassMatcher{
								pos:        position{line: 4315, col: 27, offset: 129905},
								val:        "[a-zA-Z0-9:_.*]",
								chars:      []rune{':', '_', '.', '*'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "FieldNameStartWith_",
			pos:  position{line: 4319, col: 1, offset: 129958},
			expr: &actionExpr{
				pos: position{line: 4319, col: 24, offset: 129981},
				run: (*parser).callonFieldNameStartWith_1,
				expr: &seqExpr{
					pos: position{line: 4319, col: 24, offset: 129981},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 4319, col: 24, offset: 129981},
							val:        "[a-zA-Z0-9:_.*]",
							chars:      []rune{':', '_', '.', '*'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 4319, col: 39, offset: 129996},
							expr: &charClassMatcher{
								pos:        position{line: 4319, col: 39, offset: 129996},
								val:        "[a-zA-Z0-9:_.*]",
								chars:      []rune{':', '_', '.', '*'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "String",
			pos:  position{line: 4323, col: 1, offset: 130049},
			expr: &actionExpr{
				pos: position{line: 4323, col: 11, offset: 130059},
				run: (*parser).callonString1,
				expr: &labeledExpr{
					pos:   position{line: 4323, col: 11, offset: 130059},
					label: "str",
					expr: &choiceExpr{
						pos: position{line: 4323, col: 16, offset: 130064},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4323, col: 16, offset: 130064},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 4323, col: 31, offset: 130079},
								name: "UnquotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 4327, col: 1, offset: 130120},
			expr: &actionExpr{
				pos: position{line: 4327, col: 17, offset: 130136},
				run: (*parser).callonQuotedString1,
				expr: &seqExpr{
					pos: position{line: 4327, col: 17, offset: 130136},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4327, col: 17, offset: 130136},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 4327, col: 21, offset: 130140},
							expr: &charClassMatcher{
								pos:        position{line: 4327, col: 21, offset: 130140},
								val:        "[^\"]",
								chars:      []rune{'"'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 4327, col: 27, offset: 130146},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UnquotedString",
			pos:  position{line: 4332, col: 1, offset: 130257},
			expr: &actionExpr{
				pos: position{line: 4332, col: 19, offset: 130275},
				run: (*parser).callonUnquotedString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 4332, col: 19, offset: 130275},
					expr: &choiceExpr{
						pos: position{line: 4332, col: 20, offset: 130276},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 4332, col: 20, offset: 130276},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&seqExpr{
								pos: position{line: 4332, col: 27, offset: 130283},
								exprs: []any{
									&notExpr{
										pos: position{line: 4332, col: 27, offset: 130283},
										expr: &choiceExpr{
											pos: position{line: 4332, col: 29, offset: 130285},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 4332, col: 29, offset: 130285},
													name: "MAJOR_BREAK",
												},
												&litMatcher{
													pos:        position{line: 4332, col: 43, offset: 130299},
													val:        "|",
													ignoreCase: false,
													want:       "\"|\"",
												},
												&ruleRefExpr{
													pos:  position{line: 4332, col: 49, offset: 130305},
													name: "EOF",
												},
											},
										},
									},
									&anyMatcher{
										line: 4332, col: 54, offset: 130310,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AllowedChar",
			pos:  position{line: 4339, col: 1, offset: 130425},
			expr: &choiceExpr{
				pos: position{line: 4339, col: 16, offset: 130440},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 4339, col: 16, offset: 130440},
						val:        "[a-zA-Z0-9:_{}@.]",
						chars:      []rune{':', '_', '{', '}', '@', '.'},
						ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&seqExpr{
						pos: position{line: 4339, col: 37, offset: 130461},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 4339, col: 37, offset: 130461},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 4339, col: 41, offset: 130465},
								expr: &charClassMatcher{
									pos:        position{line: 4339, col: 41, offset: 130465},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&litMatcher{
								pos:        position{line: 4339, col: 48, offset: 130472},
								val:        "}",
								ignoreCase: false,
								want:       "\"}\"",
							},
						},
					},
				},
			},
		},
		{
			name: "UnquotedStringWithTemplateWildCard",
			pos:  position{line: 4341, col: 1, offset: 130478},
			expr: &actionExpr{
				pos: position{line: 4341, col: 39, offset: 130516},
				run: (*parser).callonUnquotedStringWithTemplateWildCard1,
				expr: &oneOrMoreExpr{
					pos: position{line: 4341, col: 39, offset: 130516},
					expr: &choiceExpr{
						pos: position{line: 4341, col: 40, offset: 130517},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4341, col: 40, offset: 130517},
								name: "AllowedChar",
							},
							&seqExpr{
								pos: position{line: 4341, col: 54, offset: 130531},
								exprs: []any{
									&notExpr{
										pos: position{line: 4341, col: 54, offset: 130531},
										expr: &choiceExpr{
											pos: position{line: 4341, col: 56, offset: 130533},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 4341, col: 56, offset: 130533},
													name: "MAJOR_BREAK",
												},
												&litMatcher{
													pos:        position{line: 4341, col: 70, offset: 130547},
													val:        "|",
													ignoreCase: false,
													want:       "\"|\"",
												},
												&ruleRefExpr{
													pos:  position{line: 4341, col: 76, offset: 130553},
													name: "EOF",
												},
											},
										},
									},
									&anyMatcher{
										line: 4341, col: 81, offset: 130558,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Boolean",
			pos:  position{line: 4345, col: 1, offset: 130598},
			expr: &actionExpr{
				pos: position{line: 4345, col: 12, offset: 130609},
				run: (*parser).callonBoolean1,
				expr: &choiceExpr{
					pos: position{line: 4345, col: 13, offset: 130610},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4345, col: 13, offset: 130610},
							val:        "true",
							ignoreCase: false,
							want:       "\"true\"",
						},
						&litMatcher{
							pos:        position{line: 4345, col: 22, offset: 130619},
							val:        "false",
							ignoreCase: false,
							want:       "\"false\"",
						},
					},
				},
			},
		},
		{
			name: "RenamePattern",
			pos:  position{line: 4351, col: 1, offset: 130773},
			expr: &actionExpr{
				pos: position{line: 4351, col: 18, offset: 130790},
				run: (*parser).callonRenamePattern1,
				expr: &oneOrMoreExpr{
					pos: position{line: 4351, col: 18, offset: 130790},
					expr: &charClassMatcher{
						pos:        position{line: 4351, col: 18, offset: 130790},
						val:        "[a-zA-Z0-9_*]",
						chars:      []rune{'_', '*'},
						ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 4355, col: 1, offset: 130841},
			expr: &actionExpr{
				pos: position{line: 4355, col: 11, offset: 130851},
				run: (*parser).callonNumber1,
				expr: &labeledExpr{
					pos:   position{line: 4355, col: 11, offset: 130851},
					label: "number",
					expr: &ruleRefExpr{
						pos:  position{line: 4355, col: 18, offset: 130858},
						name: "NumberAsString",
					},
				},
			},
		},
		{
			name: "NumberAsString",
			pos:  position{line: 4361, col: 1, offset: 131047},
			expr: &actionExpr{
				pos: position{line: 4361, col: 19, offset: 131065},
				run: (*parser).callonNumberAsString1,
				expr: &seqExpr{
					pos: position{line: 4361, col: 19, offset: 131065},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4361, col: 19, offset: 131065},
							label: "number",
							expr: &choiceExpr{
								pos: position{line: 4361, col: 27, offset: 131073},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 4361, col: 27, offset: 131073},
										name: "FloatAsString",
									},
									&ruleRefExpr{
										pos:  position{line: 4361, col: 43, offset: 131089},
										name: "IntegerAsString",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 4361, col: 60, offset: 131106},
							expr: &choiceExpr{
								pos: position{line: 4361, col: 62, offset: 131108},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 4361, col: 62, offset: 131108},
										name: "SPACE",
									},
									&litMatcher{
										pos:        position{line: 4361, col: 70, offset: 131116},
										val:        "|",
										ignoreCase: false,
										want:       "\"|\"",
									},
									&litMatcher{
										pos:        position{line: 4361, col: 76, offset: 131122},
										val:        ")",
										ignoreCase: false,
										want:       "\")\"",
									},
									&litMatcher{
										pos:        position{line: 4361, col: 82, offset: 131128},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&ruleRefExpr{
										pos:  position{line: 4361, col: 88, offset: 131134},
										name: "EOF",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FloatAsString",
			pos:  position{line: 4367, col: 1, offset: 131263},
			expr: &actionExpr{
				pos: position{line: 4367, col: 18, offset: 131280},
				run: (*parser).callonFloatAsString1,
				expr: &seqExpr{
					pos: position{line: 4367, col: 18, offset: 131280},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 4367, col: 18, offset: 131280},
							expr: &charClassMatcher{
								pos:        position{line: 4367, col: 18, offset: 131280},
								val:        "[-+]",
								chars:      []rune{'-', '+'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 4367, col: 24, offset: 131286},
							expr: &charClassMatcher{
								pos:        position{line: 4367, col: 24, offset: 131286},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 4367, col: 31, offset: 131293},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 4367, col: 35, offset: 131297},
							expr: &charClassMatcher{
								pos:        position{line: 4367, col: 35, offset: 131297},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "IntegerAsString",
			pos:  position{line: 4372, col: 1, offset: 131392},
			expr: &actionExpr{
				pos: position{line: 4372, col: 20, offset: 131411},
				run: (*parser).callonIntegerAsString1,
				expr: &seqExpr{
					pos: position{line: 4372, col: 20, offset: 131411},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 4372, col: 20, offset: 131411},
							expr: &charClassMatcher{
								pos:        position{line: 4372, col: 20, offset: 131411},
								val:        "[-+]",
								chars:      []rune{'-', '+'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 4372, col: 26, offset: 131417},
							expr: &charClassMatcher{
								pos:        position{line: 4372, col: 26, offset: 131417},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PositiveIntegerAsString",
			pos:  position{line: 4376, col: 1, offset: 131460},
			expr: &actionExpr{
				pos: position{line: 4376, col: 28, offset: 131487},
				run: (*parser).callonPositiveIntegerAsString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 4376, col: 28, offset: 131487},
					expr: &charClassMatcher{
						pos:        position{line: 4376, col: 28, offset: 131487},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 4380, col: 1, offset: 131530},
			expr: &actionExpr{
				pos: position{line: 4380, col: 21, offset: 131550},
				run: (*parser).callonEqualityOperator1,
				expr: &seqExpr{
					pos: position{line: 4380, col: 21, offset: 131550},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4380, col: 21, offset: 131550},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4380, col: 36, offset: 131565},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 4380, col: 40, offset: 131569},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 4380, col: 40, offset: 131569},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
									&litMatcher{
										pos:        position{line: 4380, col: 46, offset: 131575},
										val:        "!=",
										ignoreCase: false,
										want:       "\"!=\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4380, col: 52, offset: 131581},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "InequalityOperator",
			pos:  position{line: 4388, col: 1, offset: 131762},
			expr: &actionExpr{
				pos: position{line: 4388, col: 23, offset: 131784},
				run: (*parser).callonInequalityOperator1,
				expr: &seqExpr{
					pos: position{line: 4388, col: 23, offset: 131784},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4388, col: 23, offset: 131784},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4388, col: 38, offset: 131799},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 4388, col: 42, offset: 131803},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 4388, col: 42, offset: 131803},
										val:        "<=",
										ignoreCase: false,
										want:       "\"<=\"",
									},
									&litMatcher{
										pos:        position{line: 4388, col: 49, offset: 131810},
										val:        "<",
										ignoreCase: false,
										want:       "\"<\"",
									},
									&litMatcher{
										pos:        position{line: 4388, col: 55, offset: 131816},
										val:        ">=",
										ignoreCase: false,
										want:       "\">=\"",
									},
									&litMatcher{
										pos:        position{line: 4388, col: 62, offset: 131823},
										val:        ">",
										ignoreCase: false,
										want:       "\">\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4388, col: 67, offset: 131828},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "EqualityOrInequality",
			pos:  position{line: 4396, col: 1, offset: 132011},
			expr: &choiceExpr{
				pos: position{line: 4396, col: 25, offset: 132035},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 4396, col: 25, offset: 132035},
						run: (*parser).callonEqualityOrInequality2,
						expr: &labeledExpr{
							pos:   position{line: 4396, col: 25, offset: 132035},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 4396, col: 28, offset: 132038},
								name: "EqualityOperator",
							},
						},
					},
					&actionExpr{
						pos: position{line: 4399, col: 3, offset: 132080},
						run: (*parser).callonEqualityOrInequality5,
						expr: &labeledExpr{
							pos:   position{line: 4399, col: 3, offset: 132080},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 4399, col: 6, offset: 132083},
								name: "InequalityOperator",
							},
						},
					},
				},
			},
		},
		{
			name: "OpPlus",
			pos:  position{line: 4403, col: 1, offset: 132126},
			expr: &actionExpr{
				pos: position{line: 4403, col: 11, offset: 132136},
				run: (*parser).callonOpPlus1,
				expr: &seqExpr{
					pos: position{line: 4403, col: 11, offset: 132136},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4403, col: 11, offset: 132136},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 4403, col: 26, offset: 132151},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4403, col: 30, offset: 132155},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpMinus",
			pos:  position{line: 4407, col: 1, offset: 132195},
			expr: &actionExpr{
				pos: position{line: 4407, col: 12, offset: 132206},
				run: (*parser).callonOpMinus1,
				expr: &seqExpr{
					pos: position{line: 4407, col: 12, offset: 132206},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4407, col: 12, offset: 132206},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 4407, col: 27, offset: 132221},
							val:        "-",
							ignoreCase: false,
							want:       "\"-\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4407, col: 31, offset: 132225},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpMul",
			pos:  position{line: 4411, col: 1, offset: 132265},
			expr: &actionExpr{
				pos: position{line: 4411, col: 10, offset: 132274},
				run: (*parser).callonOpMul1,
				expr: &seqExpr{
					pos: position{line: 4411, col: 10, offset: 132274},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4411, col: 10, offset: 132274},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 4411, col: 25, offset: 132289},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4411, col: 29, offset: 132293},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpDiv",
			pos:  position{line: 4415, col: 1, offset: 132333},
			expr: &actionExpr{
				pos: position{line: 4415, col: 10, offset: 132342},
				run: (*parser).callonOpDiv1,
				expr: &seqExpr{
					pos: position{line: 4415, col: 10, offset: 132342},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4415, col: 10, offset: 132342},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 4415, col: 25, offset: 132357},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4415, col: 29, offset: 132361},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "Second",
			pos:  position{line: 4420, col: 1, offset: 132425},
			expr: &actionExpr{
				pos: position{line: 4420, col: 11, offset: 132435},
				run: (*parser).callonSecond1,
				expr: &choiceExpr{
					pos: position{line: 4420, col: 12, offset: 132436},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4420, col: 12, offset: 132436},
							val:        "seconds",
							ignoreCase: false,
							want:       "\"seconds\"",
						},
						&litMatcher{
							pos:        position{line: 4420, col: 24, offset: 132448},
							val:        "second",
							ignoreCase: false,
							want:       "\"second\"",
						},
						&litMatcher{
							pos:        position{line: 4420, col: 35, offset: 132459},
							val:        "secs",
							ignoreCase: false,
							want:       "\"secs\"",
						},
						&litMatcher{
							pos:        position{line: 4420, col: 44, offset: 132468},
							val:        "sec",
							ignoreCase: false,
							want:       "\"sec\"",
						},
						&litMatcher{
							pos:        position{line: 4420, col: 52, offset: 132476},
							val:        "s",
							ignoreCase: false,
							want:       "\"s\"",
						},
					},
				},
			},
		},
		{
			name: "Minute",
			pos:  position{line: 4424, col: 1, offset: 132517},
			expr: &actionExpr{
				pos: position{line: 4424, col: 11, offset: 132527},
				run: (*parser).callonMinute1,
				expr: &choiceExpr{
					pos: position{line: 4424, col: 12, offset: 132528},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4424, col: 12, offset: 132528},
							val:        "minutes",
							ignoreCase: false,
							want:       "\"minutes\"",
						},
						&litMatcher{
							pos:        position{line: 4424, col: 24, offset: 132540},
							val:        "minute",
							ignoreCase: false,
							want:       "\"minute\"",
						},
						&litMatcher{
							pos:        position{line: 4424, col: 35, offset: 132551},
							val:        "mins",
							ignoreCase: false,
							want:       "\"mins\"",
						},
						&litMatcher{
							pos:        position{line: 4424, col: 44, offset: 132560},
							val:        "min",
							ignoreCase: false,
							want:       "\"min\"",
						},
						&litMatcher{
							pos:        position{line: 4424, col: 52, offset: 132568},
							val:        "m",
							ignoreCase: false,
							want:       "\"m\"",
						},
					},
				},
			},
		},
		{
			name: "Hour",
			pos:  position{line: 4428, col: 1, offset: 132609},
			expr: &actionExpr{
				pos: position{line: 4428, col: 9, offset: 132617},
				run: (*parser).callonHour1,
				expr: &choiceExpr{
					pos: position{line: 4428, col: 10, offset: 132618},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4428, col: 10, offset: 132618},
							val:        "hours",
							ignoreCase: false,
							want:       "\"hours\"",
						},
						&litMatcher{
							pos:        position{line: 4428, col: 20, offset: 132628},
							val:        "hour",
							ignoreCase: false,
							want:       "\"hour\"",
						},
						&litMatcher{
							pos:        position{line: 4428, col: 29, offset: 132637},
							val:        "hrs",
							ignoreCase: false,
							want:       "\"hrs\"",
						},
						&litMatcher{
							pos:        position{line: 4428, col: 37, offset: 132645},
							val:        "hr",
							ignoreCase: false,
							want:       "\"hr\"",
						},
						&litMatcher{
							pos:        position{line: 4428, col: 44, offset: 132652},
							val:        "h",
							ignoreCase: false,
							want:       "\"h\"",
						},
					},
				},
			},
		},
		{
			name: "Day",
			pos:  position{line: 4432, col: 1, offset: 132691},
			expr: &actionExpr{
				pos: position{line: 4432, col: 8, offset: 132698},
				run: (*parser).callonDay1,
				expr: &choiceExpr{
					pos: position{line: 4432, col: 9, offset: 132699},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4432, col: 9, offset: 132699},
							val:        "days",
							ignoreCase: false,
							want:       "\"days\"",
						},
						&litMatcher{
							pos:        position{line: 4432, col: 18, offset: 132708},
							val:        "day",
							ignoreCase: false,
							want:       "\"day\"",
						},
						&litMatcher{
							pos:        position{line: 4432, col: 26, offset: 132716},
							val:        "d",
							ignoreCase: false,
							want:       "\"d\"",
						},
					},
				},
			},
		},
		{
			name: "Week",
			pos:  position{line: 4436, col: 1, offset: 132754},
			expr: &actionExpr{
				pos: position{line: 4436, col: 9, offset: 132762},
				run: (*parser).callonWeek1,
				expr: &choiceExpr{
					pos: position{line: 4436, col: 10, offset: 132763},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4436, col: 10, offset: 132763},
							val:        "weeks",
							ignoreCase: false,
							want:       "\"weeks\"",
						},
						&litMatcher{
							pos:        position{line: 4436, col: 20, offset: 132773},
							val:        "week",
							ignoreCase: false,
							want:       "\"week\"",
						},
						&litMatcher{
							pos:        position{line: 4436, col: 29, offset: 132782},
							val:        "w",
							ignoreCase: false,
							want:       "\"w\"",
						},
					},
				},
			},
		},
		{
			name: "Month",
			pos:  position{line: 4440, col: 1, offset: 132821},
			expr: &actionExpr{
				pos: position{line: 4440, col: 10, offset: 132830},
				run: (*parser).callonMonth1,
				expr: &choiceExpr{
					pos: position{line: 4440, col: 11, offset: 132831},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4440, col: 11, offset: 132831},
							val:        "months",
							ignoreCase: false,
							want:       "\"months\"",
						},
						&litMatcher{
							pos:        position{line: 4440, col: 22, offset: 132842},
							val:        "month",
							ignoreCase: false,
							want:       "\"month\"",
						},
						&litMatcher{
							pos:        position{line: 4440, col: 32, offset: 132852},
							val:        "mon",
							ignoreCase: false,
							want:       "\"mon\"",
						},
					},
				},
			},
		},
		{
			name: "Quarter",
			pos:  position{line: 4444, col: 1, offset: 132894},
			expr: &actionExpr{
				pos: position{line: 4444, col: 12, offset: 132905},
				run: (*parser).callonQuarter1,
				expr: &choiceExpr{
					pos: position{line: 4444, col: 13, offset: 132906},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4444, col: 13, offset: 132906},
							val:        "quarters",
							ignoreCase: false,
							want:       "\"quarters\"",
						},
						&litMatcher{
							pos:        position{line: 4444, col: 26, offset: 132919},
							val:        "quarter",
							ignoreCase: false,
							want:       "\"quarter\"",
						},
						&litMatcher{
							pos:        position{line: 4444, col: 38, offset: 132931},
							val:        "qtrs",
							ignoreCase: false,
							want:       "\"qtrs\"",
						},
						&litMatcher{
							pos:        position{line: 4444, col: 47, offset: 132940},
							val:        "qtr",
							ignoreCase: false,
							want:       "\"qtr\"",
						},
						&litMatcher{
							pos:        position{line: 4444, col: 55, offset: 132948},
							val:        "q",
							ignoreCase: false,
							want:       "\"q\"",
						},
					},
				},
			},
		},
		{
			name: "Year",
			pos:  position{line: 4448, col: 1, offset: 132990},
			expr: &actionExpr{
				pos: position{line: 4448, col: 9, offset: 132998},
				run: (*parser).callonYear1,
				expr: &choiceExpr{
					pos: position{line: 4448, col: 10, offset: 132999},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4448, col: 10, offset: 132999},
							val:        "years",
							ignoreCase: false,
							want:       "\"years\"",
						},
						&litMatcher{
							pos:        position{line: 4448, col: 20, offset: 133009},
							val:        "year",
							ignoreCase: false,
							want:       "\"year\"",
						},
						&litMatcher{
							pos:        position{line: 4448, col: 29, offset: 133018},
							val:        "yrs",
							ignoreCase: false,
							want:       "\"yrs\"",
						},
						&litMatcher{
							pos:        position{line: 4448, col: 37, offset: 133026},
							val:        "yr",
							ignoreCase: false,
							want:       "\"yr\"",
						},
						&litMatcher{
							pos:        position{line: 4448, col: 44, offset: 133033},
							val:        "y",
							ignoreCase: false,
							want:       "\"y\"",
						},
					},
				},
			},
		},
		{
			name: "Subseconds",
			pos:  position{line: 4453, col: 1, offset: 133164},
			expr: &actionExpr{
				pos: position{line: 4453, col: 15, offset: 133178},
				run: (*parser).callonSubseconds1,
				expr: &choiceExpr{
					pos: position{line: 4453, col: 16, offset: 133179},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4453, col: 16, offset: 133179},
							val:        "us",
							ignoreCase: false,
							want:       "\"us\"",
						},
						&litMatcher{
							pos:        position{line: 4453, col: 23, offset: 133186},
							val:        "ms",
							ignoreCase: false,
							want:       "\"ms\"",
						},
						&litMatcher{
							pos:        position{line: 4453, col: 30, offset: 133193},
							val:        "cs",
							ignoreCase: false,
							want:       "\"cs\"",
						},
						&litMatcher{
							pos:        position{line: 4453, col: 37, offset: 133200},
							val:        "ds",
							ignoreCase: false,
							want:       "\"ds\"",
						},
					},
				},
			},
		},
		{
			name: "TransactionBlock",
			pos:  position{line: 4462, col: 1, offset: 133423},
			expr: &actionExpr{
				pos: position{line: 4462, col: 21, offset: 133443},
				run: (*parser).callonTransactionBlock1,
				expr: &seqExpr{
					pos: position{line: 4462, col: 21, offset: 133443},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4462, col: 21, offset: 133443},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 4462, col: 26, offset: 133448},
							name: "CMD_TRANSACTION",
						},
						&labeledExpr{
							pos:   position{line: 4462, col: 42, offset: 133464},
							label: "txnOptions",
							expr: &ruleRefExpr{
								pos:  position{line: 4462, col: 53, offset: 133475},
								name: "TransactionOptions",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionOptions",
			pos:  position{line: 4471, col: 1, offset: 133781},
			expr: &actionExpr{
				pos: position{line: 4471, col: 23, offset: 133803},
				run: (*parser).callonTransactionOptions1,
				expr: &labeledExpr{
					pos:   position{line: 4471, col: 23, offset: 133803},
					label: "txnOptions",
					expr: &zeroOrOneExpr{
						pos: position{line: 4471, col: 34, offset: 133814},
						expr: &ruleRefExpr{
							pos:  position{line: 4471, col: 34, offset: 133814},
							name: "TransactionDefinitionOptionsList",
						},
					},
				},
			},
		},
		{
			name: "TransactionDefinitionOptionsList",
			pos:  position{line: 4486, col: 1, offset: 134205},
			expr: &actionExpr{
				pos: position{line: 4486, col: 37, offset: 134241},
				run: (*parser).callonTransactionDefinitionOptionsList1,
				expr: &seqExpr{
					pos: position{line: 4486, col: 37, offset: 134241},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4486, col: 37, offset: 134241},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 4486, col: 43, offset: 134247},
								name: "TransactionDefinitionOption",
							},
						},
						&labeledExpr{
							pos:   position{line: 4486, col: 71, offset: 134275},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 4486, col: 76, offset: 134280},
								expr: &seqExpr{
									pos: position{line: 4486, col: 77, offset: 134281},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 4486, col: 77, offset: 134281},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 4486, col: 83, offset: 134287},
											name: "TransactionDefinitionOption",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionDefinitionOption",
			pos:  position{line: 4521, col: 1, offset: 135276},
			expr: &actionExpr{
				pos: position{line: 4521, col: 32, offset: 135307},
				run: (*parser).callonTransactionDefinitionOption1,
				expr: &labeledExpr{
					pos:   position{line: 4521, col: 32, offset: 135307},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 4521, col: 40, offset: 135315},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4521, col: 40, offset: 135315},
								name: "SpaceSeparatedFieldNameList",
							},
							&ruleRefExpr{
								pos:  position{line: 4521, col: 70, offset: 135345},
								name: "StartsWithOption",
							},
							&ruleRefExpr{
								pos:  position{line: 4521, col: 89, offset: 135364},
								name: "EndsWithOption",
							},
						},
					},
				},
			},
		},
		{
			name: "SpaceSeparatedFieldNameList",
			pos:  position{line: 4527, col: 1, offset: 135510},
			expr: &actionExpr{
				pos: position{line: 4527, col: 32, offset: 135541},
				run: (*parser).callonSpaceSeparatedFieldNameList1,
				expr: &seqExpr{
					pos: position{line: 4527, col: 32, offset: 135541},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4527, col: 32, offset: 135541},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 4527, col: 38, offset: 135547},
								name: "FieldName",
							},
						},
						&notExpr{
							pos: position{line: 4527, col: 48, offset: 135557},
							expr: &ruleRefExpr{
								pos:  position{line: 4527, col: 50, offset: 135559},
								name: "EQUAL",
							},
						},
						&labeledExpr{
							pos:   position{line: 4527, col: 57, offset: 135566},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 4527, col: 62, offset: 135571},
								expr: &seqExpr{
									pos: position{line: 4527, col: 63, offset: 135572},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 4527, col: 63, offset: 135572},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 4527, col: 69, offset: 135578},
											name: "FieldName",
										},
										&notExpr{
											pos: position{line: 4527, col: 79, offset: 135588},
											expr: &ruleRefExpr{
												pos:  position{line: 4527, col: 81, offset: 135590},
												name: "EQUAL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StartsWithOption",
			pos:  position{line: 4545, col: 1, offset: 136014},
			expr: &actionExpr{
				pos: position{line: 4545, col: 21, offset: 136034},
				run: (*parser).callonStartsWithOption1,
				expr: &seqExpr{
					pos: position{line: 4545, col: 21, offset: 136034},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4545, col: 21, offset: 136034},
							val:        "startswith",
							ignoreCase: false,
							want:       "\"startswith\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4545, col: 34, offset: 136047},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4545, col: 40, offset: 136053},
							label: "strExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 4545, col: 48, offset: 136061},
								name: "TransactionFilterString",
							},
						},
					},
				},
			},
		},
		{
			name: "EndsWithOption",
			pos:  position{line: 4555, col: 1, offset: 136299},
			expr: &actionExpr{
				pos: position{line: 4555, col: 19, offset: 136317},
				run: (*parser).callonEndsWithOption1,
				expr: &seqExpr{
					pos: position{line: 4555, col: 19, offset: 136317},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4555, col: 19, offset: 136317},
							val:        "endswith",
							ignoreCase: false,
							want:       "\"endswith\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4555, col: 30, offset: 136328},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4555, col: 36, offset: 136334},
							label: "strExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 4555, col: 44, offset: 136342},
								name: "TransactionFilterString",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionFilterString",
			pos:  position{line: 4566, col: 1, offset: 136611},
			expr: &actionExpr{
				pos: position{line: 4566, col: 28, offset: 136638},
				run: (*parser).callonTransactionFilterString1,
				expr: &labeledExpr{
					pos:   position{line: 4566, col: 28, offset: 136638},
					label: "strExpr",
					expr: &choiceExpr{
						pos: position{line: 4566, col: 37, offset: 136647},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4566, col: 37, offset: 136647},
								name: "TransactionQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 4566, col: 63, offset: 136673},
								name: "TransactionEval",
							},
							&ruleRefExpr{
								pos:  position{line: 4566, col: 81, offset: 136691},
								name: "TransactionSearch",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionQuotedString",
			pos:  position{line: 4570, col: 1, offset: 136739},
			expr: &actionExpr{
				pos: position{line: 4570, col: 28, offset: 136766},
				run: (*parser).callonTransactionQuotedString1,
				expr: &labeledExpr{
					pos:   position{line: 4570, col: 28, offset: 136766},
					label: "str",
					expr: &choiceExpr{
						pos: position{line: 4570, col: 33, offset: 136771},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4570, col: 33, offset: 136771},
								name: "TransactionQuotedStringValue",
							},
							&ruleRefExpr{
								pos:  position{line: 4570, col: 64, offset: 136802},
								name: "TransactionQuotedStringSearchExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionQuotedStringSearchExpr",
			pos:  position{line: 4574, col: 1, offset: 136862},
			expr: &actionExpr{
				pos: position{line: 4574, col: 38, offset: 136899},
				run: (*parser).callonTransactionQuotedStringSearchExpr1,
				expr: &seqExpr{
					pos: position{line: 4574, col: 38, offset: 136899},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4574, col: 38, offset: 136899},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 4574, col: 42, offset: 136903},
							label: "searchClause",
							expr: &ruleRefExpr{
								pos:  position{line: 4574, col: 55, offset: 136916},
								name: "ClauseLevel4",
							},
						},
						&litMatcher{
							pos:        position{line: 4574, col: 68, offset: 136929},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedStringNoOp",
			pos:  position{line: 4582, col: 1, offset: 137068},
			expr: &actionExpr{
				pos: position{line: 4582, col: 21, offset: 137088},
				run: (*parser).callonQuotedStringNoOp1,
				expr: &seqExpr{
					pos: position{line: 4582, col: 21, offset: 137088},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4582, col: 21, offset: 137088},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 4582, col: 25, offset: 137092},
							expr: &charClassMatcher{
								pos:        position{line: 4582, col: 25, offset: 137092},
								val:        "[^\" !(OR / AND)]",
								chars:      []rune{'"', ' ', '!', '(', 'O', 'R', ' ', '/', ' ', 'A', 'N', 'D', ')'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 4582, col: 44, offset: 137111},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "TransactionQuotedStringValue",
			pos:  position{line: 4587, col: 1, offset: 137222},
			expr: &actionExpr{
				pos: position{line: 4587, col: 33, offset: 137254},
				run: (*parser).callonTransactionQuotedStringValue1,
				expr: &labeledExpr{
					pos:   position{line: 4587, col: 33, offset: 137254},
					label: "str",
					expr: &ruleRefExpr{
						pos:  position{line: 4587, col: 37, offset: 137258},
						name: "QuotedStringNoOp",
					},
				},
			},
		},
		{
			name: "TransactionSearch",
			pos:  position{line: 4595, col: 1, offset: 137413},
			expr: &actionExpr{
				pos: position{line: 4595, col: 22, offset: 137434},
				run: (*parser).callonTransactionSearch1,
				expr: &labeledExpr{
					pos:   position{line: 4595, col: 22, offset: 137434},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 4595, col: 27, offset: 137439},
						name: "ClauseLevel1",
					},
				},
			},
		},
		{
			name: "TransactionEval",
			pos:  position{line: 4605, col: 1, offset: 137611},
			expr: &actionExpr{
				pos: position{line: 4605, col: 20, offset: 137630},
				run: (*parser).callonTransactionEval1,
				expr: &seqExpr{
					pos: position{line: 4605, col: 20, offset: 137630},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4605, col: 20, offset: 137630},
							val:        "eval",
							ignoreCase: false,
							want:       "\"eval\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4605, col: 27, offset: 137637},
							name: "EMPTY_OR_SPACE",
						},
						&ruleRefExpr{
							pos:  position{line: 4605, col: 42, offset: 137652},
							name: "L_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 4605, col: 50, offset: 137660},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 4605, col: 60, offset: 137670},
								name: "BoolExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4605, col: 69, offset: 137679},
							name: "R_PAREN",
						},
					},
				},
			},
		},
		{
			name: "MultiValueBlock",
			pos:  position{line: 4615, col: 1, offset: 137982},
			expr: &actionExpr{
				pos: position{line: 4615, col: 20, offset: 138001},
				run: (*parser).callonMultiValueBlock1,
				expr: &seqExpr{
					pos: position{line: 4615, col: 20, offset: 138001},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4615, col: 20, offset: 138001},
							name: "PIPE",
						},
						&labeledExpr{
							pos:   position{line: 4615, col: 25, offset: 138006},
							label: "mvQueryAggNode",
							expr: &ruleRefExpr{
								pos:  position{line: 4615, col: 42, offset: 138023},
								name: "MakeMVBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "MakeMVBlock",
			pos:  position{line: 4619, col: 1, offset: 138072},
			expr: &actionExpr{
				pos: position{line: 4619, col: 16, offset: 138087},
				run: (*parser).callonMakeMVBlock1,
				expr: &seqExpr{
					pos: position{line: 4619, col: 16, offset: 138087},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4619, col: 16, offset: 138087},
							name: "CMD_MAKEMV",
						},
						&ruleRefExpr{
							pos:  position{line: 4619, col: 27, offset: 138098},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4619, col: 33, offset: 138104},
							label: "mvColOptionExpr",
							expr: &zeroOrOneExpr{
								pos: position{line: 4619, col: 50, offset: 138121},
								expr: &ruleRefExpr{
									pos:  position{line: 4619, col: 50, offset: 138121},
									name: "MVBlockOptionsList",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4619, col: 70, offset: 138141},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4619, col: 85, offset: 138156},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 4619, col: 91, offset: 138162},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "MVBlockOptionsList",
			pos:  position{line: 4647, col: 1, offset: 138902},
			expr: &actionExpr{
				pos: position{line: 4647, col: 23, offset: 138924},
				run: (*parser).callonMVBlockOptionsList1,
				expr: &seqExpr{
					pos: position{line: 4647, col: 23, offset: 138924},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4647, col: 23, offset: 138924},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 4647, col: 31, offset: 138932},
								name: "MVBlockOption",
							},
						},
						&labeledExpr{
							pos:   position{line: 4647, col: 46, offset: 138947},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 4647, col: 52, offset: 138953},
								expr: &seqExpr{
									pos: position{line: 4647, col: 53, offset: 138954},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 4647, col: 53, offset: 138954},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 4647, col: 59, offset: 138960},
											name: "MVBlockOption",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MVBlockOption",
			pos:  position{line: 4681, col: 1, offset: 140016},
			expr: &actionExpr{
				pos: position{line: 4681, col: 18, offset: 140033},
				run: (*parser).callonMVBlockOption1,
				expr: &labeledExpr{
					pos:   position{line: 4681, col: 18, offset: 140033},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 4681, col: 27, offset: 140042},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4681, col: 27, offset: 140042},
								name: "DelimOption",
							},
							&ruleRefExpr{
								pos:  position{line: 4681, col: 41, offset: 140056},
								name: "AllowEmptyOption",
							},
							&ruleRefExpr{
								pos:  position{line: 4681, col: 60, offset: 140075},
								name: "SetSvOption",
							},
						},
					},
				},
			},
		},
		{
			name: "DelimOption",
			pos:  position{line: 4685, col: 1, offset: 140116},
			expr: &actionExpr{
				pos: position{line: 4685, col: 16, offset: 140131},
				run: (*parser).callonDelimOption1,
				expr: &labeledExpr{
					pos:   position{line: 4685, col: 16, offset: 140131},
					label: "delimExpr",
					expr: &choiceExpr{
						pos: position{line: 4685, col: 28, offset: 140143},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4685, col: 28, offset: 140143},
								name: "StringDelimiter",
							},
							&ruleRefExpr{
								pos:  position{line: 4685, col: 46, offset: 140161},
								name: "RegexDelimiter",
							},
						},
					},
				},
			},
		},
		{
			name: "StringDelimiter",
			pos:  position{line: 4689, col: 1, offset: 140208},
			expr: &actionExpr{
				pos: position{line: 4689, col: 20, offset: 140227},
				run: (*parser).callonStringDelimiter1,
				expr: &seqExpr{
					pos: position{line: 4689, col: 20, offset: 140227},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4689, col: 20, offset: 140227},
							val:        "delim",
							ignoreCase: false,
							want:       "\"delim\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4689, col: 28, offset: 140235},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4689, col: 34, offset: 140241},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 4689, col: 38, offset: 140245},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexDelimiter",
			pos:  position{line: 4700, col: 1, offset: 140496},
			expr: &actionExpr{
				pos: position{line: 4700, col: 19, offset: 140514},
				run: (*parser).callonRegexDelimiter1,
				expr: &seqExpr{
					pos: position{line: 4700, col: 19, offset: 140514},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4700, col: 19, offset: 140514},
							val:        "tokenizer",
							ignoreCase: false,
							want:       "\"tokenizer\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4700, col: 31, offset: 140526},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4700, col: 37, offset: 140532},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 4700, col: 41, offset: 140536},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "AllowEmptyOption",
			pos:  position{line: 4718, col: 1, offset: 141007},
			expr: &actionExpr{
				pos: position{line: 4718, col: 21, offset: 141027},
				run: (*parser).callonAllowEmptyOption1,
				expr: &seqExpr{
					pos: position{line: 4718, col: 21, offset: 141027},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4718, col: 21, offset: 141027},
							val:        "allowempty",
							ignoreCase: false,
							want:       "\"allowempty\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4718, col: 34, offset: 141040},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4718, col: 40, offset: 141046},
							label: "boolVal",
							expr: &ruleRefExpr{
								pos:  position{line: 4718, col: 48, offset: 141054},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "SetSvOption",
			pos:  position{line: 4730, col: 1, offset: 141294},
			expr: &actionExpr{
				pos: position{line: 4730, col: 16, offset: 141309},
				run: (*parser).callonSetSvOption1,
				expr: &seqExpr{
					pos: position{line: 4730, col: 16, offset: 141309},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4730, col: 16, offset: 141309},
							val:        "setsv",
							ignoreCase: false,
							want:       "\"setsv\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4730, col: 24, offset: 141317},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4730, col: 30, offset: 141323},
							label: "boolVal",
							expr: &ruleRefExpr{
								pos:  position{line: 4730, col: 38, offset: 141331},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "SPathBlock",
			pos:  position{line: 4742, col: 1, offset: 141596},
			expr: &actionExpr{
				pos: position{line: 4742, col: 15, offset: 141610},
				run: (*parser).callonSPathBlock1,
				expr: &seqExpr{
					pos: position{line: 4742, col: 15, offset: 141610},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4742, col: 15, offset: 141610},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 4742, col: 20, offset: 141615},
							name: "CMD_SPATH",
						},
						&labeledExpr{
							pos:   position{line: 4742, col: 30, offset: 141625},
							label: "spathExpr",
							expr: &zeroOrOneExpr{
								pos: position{line: 4742, col: 40, offset: 141635},
								expr: &ruleRefExpr{
									pos:  position{line: 4742, col: 40, offset: 141635},
									name: "SPathArgumentsList",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SPathArgumentsList",
			pos:  position{line: 4749, col: 1, offset: 141761},
			expr: &actionExpr{
				pos: position{line: 4749, col: 23, offset: 141783},
				run: (*parser).callonSPathArgumentsList1,
				expr: &seqExpr{
					pos: position{line: 4749, col: 23, offset: 141783},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4749, col: 23, offset: 141783},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4749, col: 29, offset: 141789},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 4749, col: 35, offset: 141795},
								name: "SPathArgument",
							},
						},
						&labeledExpr{
							pos:   position{line: 4749, col: 49, offset: 141809},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 4749, col: 54, offset: 141814},
								expr: &seqExpr{
									pos: position{line: 4749, col: 55, offset: 141815},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 4749, col: 55, offset: 141815},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 4749, col: 61, offset: 141821},
											name: "SPathArgument",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SPathArgument",
			pos:  position{line: 4781, col: 1, offset: 142714},
			expr: &actionExpr{
				pos: position{line: 4781, col: 18, offset: 142731},
				run: (*parser).callonSPathArgument1,
				expr: &labeledExpr{
					pos:   position{line: 4781, col: 18, offset: 142731},
					label: "arg",
					expr: &choiceExpr{
						pos: position{line: 4781, col: 23, offset: 142736},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4781, col: 23, offset: 142736},
								name: "InputField",
							},
							&ruleRefExpr{
								pos:  position{line: 4781, col: 36, offset: 142749},
								name: "OutputField",
							},
							&ruleRefExpr{
								pos:  position{line: 4781, col: 50, offset: 142763},
								name: "PathField",
							},
						},
					},
				},
			},
		},
		{
			name: "InputField",
			pos:  position{line: 4785, col: 1, offset: 142799},
			expr: &actionExpr{
				pos: position{line: 4785, col: 15, offset: 142813},
				run: (*parser).callonInputField1,
				expr: &seqExpr{
					pos: position{line: 4785, col: 15, offset: 142813},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4785, col: 15, offset: 142813},
							val:        "input",
							ignoreCase: false,
							want:       "\"input\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4785, col: 23, offset: 142821},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4785, col: 29, offset: 142827},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 4785, col: 35, offset: 142833},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "OutputField",
			pos:  position{line: 4788, col: 1, offset: 142889},
			expr: &actionExpr{
				pos: position{line: 4788, col: 16, offset: 142904},
				run: (*parser).callonOutputField1,
				expr: &seqExpr{
					pos: position{line: 4788, col: 16, offset: 142904},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4788, col: 16, offset: 142904},
							val:        "output",
							ignoreCase: false,
							want:       "\"output\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4788, col: 25, offset: 142913},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4788, col: 31, offset: 142919},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 4788, col: 37, offset: 142925},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "PathField",
			pos:  position{line: 4791, col: 1, offset: 142982},
			expr: &actionExpr{
				pos: position{line: 4791, col: 14, offset: 142995},
				run: (*parser).callonPathField1,
				expr: &choiceExpr{
					pos: position{line: 4791, col: 15, offset: 142996},
					alternatives: []any{
						&seqExpr{
							pos: position{line: 4791, col: 15, offset: 142996},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4791, col: 15, offset: 142996},
									val:        "path",
									ignoreCase: false,
									want:       "\"path\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4791, col: 22, offset: 143003},
									name: "EQUAL",
								},
								&ruleRefExpr{
									pos:  position{line: 4791, col: 28, offset: 143009},
									name: "SPathFieldString",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4791, col: 47, offset: 143028},
							name: "SPathFieldString",
						},
					},
				},
			},
		},
		{
			name: "SPathFieldString",
			pos:  position{line: 4803, col: 1, offset: 143440},
			expr: &choiceExpr{
				pos: position{line: 4803, col: 21, offset: 143460},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 4803, col: 21, offset: 143460},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 4803, col: 36, offset: 143475},
						name: "UnquotedStringWithTemplateWildCard",
					},
				},
			},
		},
		{
			name: "FormatBlock",
			pos:  position{line: 4806, col: 1, offset: 143548},
			expr: &actionExpr{
				pos: position{line: 4806, col: 16, offset: 143563},
				run: (*parser).callonFormatBlock1,
				expr: &seqExpr{
					pos: position{line: 4806, col: 16, offset: 143563},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4806, col: 16, offset: 143563},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 4806, col: 21, offset: 143568},
							name: "CMD_FORMAT",
						},
						&labeledExpr{
							pos:   position{line: 4806, col: 32, offset: 143579},
							label: "formatArgExpr",
							expr: &zeroOrOneExpr{
								pos: position{line: 4806, col: 46, offset: 143593},
								expr: &ruleRefExpr{
									pos:  position{line: 4806, col: 46, offset: 143593},
									name: "FormatArgumentsList",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FormatArgumentsList",
			pos:  position{line: 4828, col: 1, offset: 144202},
			expr: &actionExpr{
				pos: position{line: 4828, col: 24, offset: 144225},
				run: (*parser).callonFormatArgumentsList1,
				expr: &seqExpr{
					pos: position{line: 4828, col: 24, offset: 144225},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4828, col: 24, offset: 144225},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4828, col: 30, offset: 144231},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 4828, col: 37, offset: 144238},
								name: "FormatArgument",
							},
						},
						&labeledExpr{
							pos:   position{line: 4828, col: 52, offset: 144253},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 4828, col: 57, offset: 144258},
								expr: &seqExpr{
									pos: position{line: 4828, col: 58, offset: 144259},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 4828, col: 58, offset: 144259},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 4828, col: 64, offset: 144265},
											name: "FormatArgument",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FormatArgument",
			pos:  position{line: 4862, col: 1, offset: 145454},
			expr: &actionExpr{
				pos: position{line: 4862, col: 19, offset: 145472},
				run: (*parser).callonFormatArgument1,
				expr: &labeledExpr{
					pos:   position{line: 4862, col: 19, offset: 145472},
					label: "argExpr",
					expr: &choiceExpr{
						pos: position{line: 4862, col: 28, offset: 145481},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4862, col: 28, offset: 145481},
								name: "FormatSeparator",
							},
							&ruleRefExpr{
								pos:  position{line: 4862, col: 46, offset: 145499},
								name: "FormatMaxResults",
							},
							&ruleRefExpr{
								pos:  position{line: 4862, col: 65, offset: 145518},
								name: "FormatEmptyStr",
							},
							&ruleRefExpr{
								pos:  position{line: 4862, col: 82, offset: 145535},
								name: "FormatRowColOptions",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatSeparator",
			pos:  position{line: 4866, col: 1, offset: 145585},
			expr: &actionExpr{
				pos: position{line: 4866, col: 20, offset: 145604},
				run: (*parser).callonFormatSeparator1,
				expr: &seqExpr{
					pos: position{line: 4866, col: 20, offset: 145604},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4866, col: 20, offset: 145604},
							val:        "mvsep",
							ignoreCase: false,
							want:       "\"mvsep\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4866, col: 28, offset: 145612},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4866, col: 34, offset: 145618},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 4866, col: 38, offset: 145622},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatMaxResults",
			pos:  position{line: 4875, col: 1, offset: 145834},
			expr: &actionExpr{
				pos: position{line: 4875, col: 21, offset: 145854},
				run: (*parser).callonFormatMaxResults1,
				expr: &seqExpr{
					pos: position{line: 4875, col: 21, offset: 145854},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4875, col: 21, offset: 145854},
							val:        "maxresults",
							ignoreCase: false,
							want:       "\"maxresults\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4875, col: 34, offset: 145867},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4875, col: 40, offset: 145873},
							label: "numStr",
							expr: &ruleRefExpr{
								pos:  position{line: 4875, col: 47, offset: 145880},
								name: "IntegerAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatEmptyStr",
			pos:  position{line: 4888, col: 1, offset: 146286},
			expr: &actionExpr{
				pos: position{line: 4888, col: 19, offset: 146304},
				run: (*parser).callonFormatEmptyStr1,
				expr: &seqExpr{
					pos: position{line: 4888, col: 19, offset: 146304},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4888, col: 19, offset: 146304},
							val:        "emptystr",
							ignoreCase: false,
							want:       "\"emptystr\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4888, col: 30, offset: 146315},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4888, col: 36, offset: 146321},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 4888, col: 40, offset: 146325},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatRowColOptions",
			pos:  position{line: 4897, col: 1, offset: 146540},
			expr: &actionExpr{
				pos: position{line: 4897, col: 24, offset: 146563},
				run: (*parser).callonFormatRowColOptions1,
				expr: &seqExpr{
					pos: position{line: 4897, col: 24, offset: 146563},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4897, col: 24, offset: 146563},
							label: "rowPrefix",
							expr: &ruleRefExpr{
								pos:  position{line: 4897, col: 34, offset: 146573},
								name: "QuotedString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4897, col: 47, offset: 146586},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4897, col: 53, offset: 146592},
							label: "colPrefix",
							expr: &ruleRefExpr{
								pos:  position{line: 4897, col: 63, offset: 146602},
								name: "QuotedString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4897, col: 76, offset: 146615},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4897, col: 82, offset: 146621},
							label: "colSeparator",
							expr: &ruleRefExpr{
								pos:  position{line: 4897, col: 95, offset: 146634},
								name: "QuotedString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4897, col: 108, offset: 146647},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4897, col: 114, offset: 146653},
							label: "colEnd",
							expr: &ruleRefExpr{
								pos:  position{line: 4897, col: 121, offset: 146660},
								name: "QuotedString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4897, col: 134, offset: 146673},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4897, col: 140, offset: 146679},
							label: "rowSeparator",
							expr: &ruleRefExpr{
								pos:  position{line: 4897, col: 153, offset: 146692},
								name: "QuotedString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4897, col: 166, offset: 146705},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4897, col: 172, offset: 146711},
							label: "rowEnd",
							expr: &ruleRefExpr{
								pos:  position{line: 4897, col: 179, offset: 146718},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "EventCountBlock",
			pos:  position{line: 4915, col: 1, offset: 147294},
			expr: &actionExpr{
				pos: position{line: 4915, col: 20, offset: 147313},
				run: (*parser).callonEventCountBlock1,
				expr: &seqExpr{
					pos: position{line: 4915, col: 20, offset: 147313},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4915, col: 20, offset: 147313},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 4915, col: 25, offset: 147318},
							name: "CMD_EVENTCOUNT",
						},
						&labeledExpr{
							pos:   position{line: 4915, col: 40, offset: 147333},
							label: "eventCountExpr",
							expr: &zeroOrOneExpr{
								pos: position{line: 4915, col: 55, offset: 147348},
								expr: &ruleRefExpr{
									pos:  position{line: 4915, col: 55, offset: 147348},
									name: "EventCountArgumentsList",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EventCountArgumentsList",
			pos:  position{line: 4922, col: 1, offset: 147501},
			expr: &actionExpr{
				pos: position{line: 4922, col: 28, offset: 147528},
				run: (*parser).callonEventCountArgumentsList1,
				expr: &seqExpr{
					pos: position{line: 4922, col: 28, offset: 147528},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4922, col: 28, offset: 147528},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4922, col: 34, offset: 147534},
							label: "first",
							expr: &zeroOrOneExpr{
								pos: position{line: 4922, col: 40, offset: 147540},
								expr: &ruleRefExpr{
									pos:  position{line: 4922, col: 40, offset: 147540},
									name: "EventCountArgument",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 4922, col: 60, offset: 147560},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 4922, col: 65, offset: 147565},
								expr: &seqExpr{
									pos: position{line: 4922, col: 66, offset: 147566},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 4922, col: 66, offset: 147566},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 4922, col: 72, offset: 147572},
											name: "EventCountArgument",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EventCountArgument",
			pos:  position{line: 4978, col: 1, offset: 149449},
			expr: &actionExpr{
				pos: position{line: 4978, col: 23, offset: 149471},
				run: (*parser).callonEventCountArgument1,
				expr: &labeledExpr{
					pos:   position{line: 4978, col: 23, offset: 149471},
					label: "arg",
					expr: &choiceExpr{
						pos: position{line: 4978, col: 28, offset: 149476},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4978, col: 28, offset: 149476},
								name: "IndexField",
							},
							&ruleRefExpr{
								pos:  position{line: 4978, col: 41, offset: 149489},
								name: "SummarizeField",
							},
							&ruleRefExpr{
								pos:  position{line: 4978, col: 58, offset: 149506},
								name: "ReportSizeField",
							},
							&ruleRefExpr{
								pos:  position{line: 4978, col: 76, offset: 149524},
								name: "ListVixField",
							},
						},
					},
				},
			},
		},
		{
			name: "IndexField",
			pos:  position{line: 4982, col: 1, offset: 149563},
			expr: &actionExpr{
				pos: position{line: 4982, col: 15, offset: 149577},
				run: (*parser).callonIndexField1,
				expr: &seqExpr{
					pos: position{line: 4982, col: 15, offset: 149577},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4982, col: 15, offset: 149577},
							val:        "index",
							ignoreCase: false,
							want:       "\"index\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4982, col: 23, offset: 149585},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4982, col: 29, offset: 149591},
							label: "index",
							expr: &ruleRefExpr{
								pos:  position{line: 4982, col: 35, offset: 149597},
								name: "IndexName",
							},
						},
					},
				},
			},
		},
		{
			name: "SummarizeField",
			pos:  position{line: 4985, col: 1, offset: 149653},
			expr: &actionExpr{
				pos: position{line: 4985, col: 19, offset: 149671},
				run: (*parser).callonSummarizeField1,
				expr: &seqExpr{
					pos: position{line: 4985, col: 19, offset: 149671},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4985, col: 19, offset: 149671},
							val:        "summarize",
							ignoreCase: false,
							want:       "\"summarize\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4985, col: 31, offset: 149683},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4985, col: 37, offset: 149689},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 4985, col: 43, offset: 149695},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "ReportSizeField",
			pos:  position{line: 4988, col: 1, offset: 149771},
			expr: &actionExpr{
				pos: position{line: 4988, col: 20, offset: 149790},
				run: (*parser).callonReportSizeField1,
				expr: &seqExpr{
					pos: position{line: 4988, col: 20, offset: 149790},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4988, col: 20, offset: 149790},
							val:        "report_size",
							ignoreCase: false,
							want:       "\"report_size\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4988, col: 34, offset: 149804},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4988, col: 40, offset: 149810},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 4988, col: 46, offset: 149816},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "ListVixField",
			pos:  position{line: 4991, col: 1, offset: 149894},
			expr: &actionExpr{
				pos: position{line: 4991, col: 17, offset: 149910},
				run: (*parser).callonListVixField1,
				expr: &seqExpr{
					pos: position{line: 4991, col: 17, offset: 149910},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4991, col: 17, offset: 149910},
							val:        "list_vix",
							ignoreCase: false,
							want:       "\"list_vix\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4991, col: 28, offset: 149921},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4991, col: 34, offset: 149927},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 4991, col: 40, offset: 149933},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "IndexName",
			pos:  position{line: 4995, col: 1, offset: 150009},
			expr: &actionExpr{
				pos: position{line: 4995, col: 14, offset: 150022},
				run: (*parser).callonIndexName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 4995, col: 14, offset: 150022},
					expr: &seqExpr{
						pos: position{line: 4995, col: 15, offset: 150023},
						exprs: []any{
							&notExpr{
								pos: position{line: 4995, col: 15, offset: 150023},
								expr: &ruleRefExpr{
									pos:  position{line: 4995, col: 16, offset: 150024},
									name: "SPACE",
								},
							},
							&anyMatcher{
								line: 4995, col: 22, offset: 150030,
							},
						},
					},
				},
			},
		},
		{
			name: "ALLCMD",
			pos:  position{line: 5000, col: 1, offset: 150096},
			expr: &choiceExpr{
				pos: position{line: 5000, col: 12, offset: 150107},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 5000, col: 12, offset: 150107},
						name: "CMD_REGEX",
					},
					&ruleRefExpr{
						pos:  position{line: 5000, col: 24, offset: 150119},
						name: "CMD_STATS",
					},
					&ruleRefExpr{
						pos:  position{line: 5000, col: 36, offset: 150131},
						name: "CMD_FIELDS",
					},
					&ruleRefExpr{
						pos:  position{line: 5000, col: 49, offset: 150144},
						name: "CMD_WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 5000, col: 61, offset: 150156},
						name: "CMD_HEAD_NO_SPACE",
					},
					&ruleRefExpr{
						pos:  position{line: 5000, col: 81, offset: 150176},
						name: "CMD_HEAD",
					},
					&ruleRefExpr{
						pos:  position{line: 5000, col: 92, offset: 150187},
						name: "CMD_TAIL_NO_SPACE",
					},
					&ruleRefExpr{
						pos:  position{line: 5000, col: 112, offset: 150207},
						name: "CMD_TAIL",
					},
					&ruleRefExpr{
						pos:  position{line: 5000, col: 123, offset: 150218},
						name: "CMD_EVAL",
					},
					&ruleRefExpr{
						pos:  position{line: 5000, col: 134, offset: 150229},
						name: "CMD_REX",
					},
					&ruleRefExpr{
						pos:  position{line: 5000, col: 144, offset: 150239},
						name: "CMD_TOP",
					},
					&ruleRefExpr{
						pos:  position{line: 5000, col: 154, offset: 150249},
						name: "CMD_RARE",
					},
					&ruleRefExpr{
						pos:  position{line: 5000, col: 165, offset: 150260},
						name: "CMD_RENAME",
					},
					&ruleRefExpr{
						pos:  position{line: 5000, col: 178, offset: 150273},
						name: "CMD_TIMECHART",
					},
					&ruleRefExpr{
						pos:  position{line: 5000, col: 194, offset: 150289},
						name: "CMD_TRANSACTION",
					},
					&ruleRefExpr{
						pos:  position{line: 5000, col: 212, offset: 150307},
						name: "CMD_DEDUP",
					},
					&ruleRefExpr{
						pos:  position{line: 5000, col: 224, offset: 150319},
						name: "CMD_SORT",
					},
					&ruleRefExpr{
						pos:  position{line: 5000, col: 235, offset: 150330},
						name: "CMD_MAKEMV",
					},
					&ruleRefExpr{
						pos:  position{line: 5000, col: 248, offset: 150343},
						name: "CMD_SPATH",
					},
					&ruleRefExpr{
						pos:  position{line: 5000, col: 260, offset: 150355},
						name: "CMD_FORMAT",
					},
					&ruleRefExpr{
						pos:  position{line: 5000, col: 273, offset: 150368},
						name: "CMD_EARLIEST",
					},
					&ruleRefExpr{
						pos:  position{line: 5000, col: 288, offset: 150383},
						name: "CMD_LATEST",
					},
					&ruleRefExpr{
						pos:  position{line: 5000, col: 301, offset: 150396},
						name: "CMD_EVENTCOUNT",
					},
					&ruleRefExpr{
						pos:  position{line: 5000, col: 318, offset: 150413},
						name: "CMD_BIN",
					},
					&ruleRefExpr{
						pos:  position{line: 5000, col: 328, offset: 150423},
						name: "CMD_STREAMSTATS",
					},
				},
			},
		},
		{
			name: "CMD_SEARCH",
			pos:  position{line: 5001, col: 1, offset: 150440},
			expr: &seqExpr{
				pos: position{line: 5001, col: 15, offset: 150454},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5001, col: 15, offset: 150454},
						val:        "search",
						ignoreCase: false,
						want:       "\"search\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5001, col: 24, offset: 150463},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_REGEX",
			pos:  position{line: 5002, col: 1, offset: 150469},
			expr: &seqExpr{
				pos: position{line: 5002, col: 14, offset: 150482},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5002, col: 14, offset: 150482},
						val:        "regex",
						ignoreCase: false,
						want:       "\"regex\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5002, col: 22, offset: 150490},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_STATS",
			pos:  position{line: 5003, col: 1, offset: 150496},
			expr: &seqExpr{
				pos: position{line: 5003, col: 14, offset: 150509},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5003, col: 14, offset: 150509},
						val:        "stats",
						ignoreCase: false,
						want:       "\"stats\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5003, col: 22, offset: 150517},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_STREAMSTATS",
			pos:  position{line: 5004, col: 1, offset: 150523},
			expr: &seqExpr{
				pos: position{line: 5004, col: 20, offset: 150542},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5004, col: 20, offset: 150542},
						val:        "streamstats",
						ignoreCase: false,
						want:       "\"streamstats\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5004, col: 34, offset: 150556},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_FIELDS",
			pos:  position{line: 5005, col: 1, offset: 150562},
			expr: &seqExpr{
				pos: position{line: 5005, col: 15, offset: 150576},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5005, col: 15, offset: 150576},
						val:        "fields",
						ignoreCase: false,
						want:       "\"fields\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5005, col: 24, offset: 150585},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_WHERE",
			pos:  position{line: 5006, col: 1, offset: 150591},
			expr: &seqExpr{
				pos: position{line: 5006, col: 14, offset: 150604},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5006, col: 14, offset: 150604},
						val:        "where",
						ignoreCase: false,
						want:       "\"where\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5006, col: 22, offset: 150612},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_HEAD_NO_SPACE",
			pos:  position{line: 5007, col: 1, offset: 150618},
			expr: &litMatcher{
				pos:        position{line: 5007, col: 22, offset: 150639},
				val:        "head",
				ignoreCase: false,
				want:       "\"head\"",
			},
		},
		{
			name: "CMD_HEAD",
			pos:  position{line: 5008, col: 1, offset: 150646},
			expr: &seqExpr{
				pos: position{line: 5008, col: 13, offset: 150658},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 5008, col: 13, offset: 150658},
						name: "CMD_HEAD_NO_SPACE",
					},
					&ruleRefExpr{
						pos:  position{line: 5008, col: 31, offset: 150676},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_TAIL_NO_SPACE",
			pos:  position{line: 5009, col: 1, offset: 150682},
			expr: &litMatcher{
				pos:        position{line: 5009, col: 22, offset: 150703},
				val:        "tail",
				ignoreCase: false,
				want:       "\"tail\"",
			},
		},
		{
			name: "CMD_TAIL",
			pos:  position{line: 5010, col: 1, offset: 150710},
			expr: &seqExpr{
				pos: position{line: 5010, col: 13, offset: 150722},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 5010, col: 13, offset: 150722},
						name: "CMD_TAIL_NO_SPACE",
					},
					&ruleRefExpr{
						pos:  position{line: 5010, col: 31, offset: 150740},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_EVAL",
			pos:  position{line: 5011, col: 1, offset: 150746},
			expr: &seqExpr{
				pos: position{line: 5011, col: 13, offset: 150758},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5011, col: 13, offset: 150758},
						val:        "eval",
						ignoreCase: false,
						want:       "\"eval\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5011, col: 20, offset: 150765},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_REX",
			pos:  position{line: 5012, col: 1, offset: 150771},
			expr: &seqExpr{
				pos: position{line: 5012, col: 12, offset: 150782},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5012, col: 12, offset: 150782},
						val:        "rex",
						ignoreCase: false,
						want:       "\"rex\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5012, col: 18, offset: 150788},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_SORT",
			pos:  position{line: 5013, col: 1, offset: 150794},
			expr: &seqExpr{
				pos: position{line: 5013, col: 13, offset: 150806},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5013, col: 13, offset: 150806},
						val:        "sort",
						ignoreCase: false,
						want:       "\"sort\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5013, col: 20, offset: 150813},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_TOP",
			pos:  position{line: 5014, col: 1, offset: 150819},
			expr: &litMatcher{
				pos:        position{line: 5014, col: 12, offset: 150830},
				val:        "top",
				ignoreCase: false,
				want:       "\"top\"",
			},
		},
		{
			name: "CMD_RARE",
			pos:  position{line: 5015, col: 1, offset: 150836},
			expr: &litMatcher{
				pos:        position{line: 5015, col: 13, offset: 150848},
				val:        "rare",
				ignoreCase: false,
				want:       "\"rare\"",
			},
		},
		{
			name: "CMD_RENAME",
			pos:  position{line: 5016, col: 1, offset: 150855},
			expr: &seqExpr{
				pos: position{line: 5016, col: 15, offset: 150869},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5016, col: 15, offset: 150869},
						val:        "rename",
						ignoreCase: false,
						want:       "\"rename\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5016, col: 24, offset: 150878},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_TIMECHART",
			pos:  position{line: 5017, col: 1, offset: 150884},
			expr: &seqExpr{
				pos: position{line: 5017, col: 18, offset: 150901},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5017, col: 18, offset: 150901},
						val:        "timechart",
						ignoreCase: false,
						want:       "\"timechart\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5017, col: 30, offset: 150913},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_BIN",
			pos:  position{line: 5018, col: 1, offset: 150919},
			expr: &seqExpr{
				pos: position{line: 5018, col: 12, offset: 150930},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5018, col: 12, offset: 150930},
						val:        "bin",
						ignoreCase: false,
						want:       "\"bin\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5018, col: 18, offset: 150936},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_SPAN",
			pos:  position{line: 5019, col: 1, offset: 150942},
			expr: &litMatcher{
				pos:        position{line: 5019, col: 13, offset: 150954},
				val:        "span",
				ignoreCase: false,
				want:       "\"span\"",
			},
		},
		{
			name: "CMD_TRANSACTION",
			pos:  position{line: 5020, col: 1, offset: 150961},
			expr: &seqExpr{
				pos: position{line: 5020, col: 20, offset: 150980},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5020, col: 20, offset: 150980},
						val:        "transaction",
						ignoreCase: false,
						want:       "\"transaction\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5020, col: 34, offset: 150994},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_DEDUP",
			pos:  position{line: 5021, col: 1, offset: 151000},
			expr: &litMatcher{
				pos:        position{line: 5021, col: 14, offset: 151013},
				val:        "dedup",
				ignoreCase: false,
				want:       "\"dedup\"",
			},
		},
		{
			name: "CMD_DEDUP_SORTBY",
			pos:  position{line: 5022, col: 1, offset: 151021},
			expr: &seqExpr{
				pos: position{line: 5022, col: 21, offset: 151041},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 5022, col: 21, offset: 151041},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 5022, col: 27, offset: 151047},
						val:        "sortby",
						ignoreCase: false,
						want:       "\"sortby\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5022, col: 36, offset: 151056},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_MAKEMV",
			pos:  position{line: 5023, col: 1, offset: 151062},
			expr: &litMatcher{
				pos:        position{line: 5023, col: 15, offset: 151076},
				val:        "makemv",
				ignoreCase: false,
				want:       "\"makemv\"",
			},
		},
		{
			name: "CMD_SPATH",
			pos:  position{line: 5024, col: 1, offset: 151085},
			expr: &litMatcher{
				pos:        position{line: 5024, col: 14, offset: 151098},
				val:        "spath",
				ignoreCase: false,
				want:       "\"spath\"",
			},
		},
		{
			name: "CMD_FORMAT",
			pos:  position{line: 5025, col: 1, offset: 151106},
			expr: &litMatcher{
				pos:        position{line: 5025, col: 15, offset: 151120},
				val:        "format",
				ignoreCase: false,
				want:       "\"format\"",
			},
		},
		{
			name: "CMD_EARLIEST",
			pos:  position{line: 5026, col: 1, offset: 151129},
			expr: &litMatcher{
				pos:        position{line: 5026, col: 17, offset: 151145},
				val:        "earliest",
				ignoreCase: false,
				want:       "\"earliest\"",
			},
		},
		{
			name: "CMD_LATEST",
			pos:  position{line: 5027, col: 1, offset: 151156},
			expr: &litMatcher{
				pos:        position{line: 5027, col: 15, offset: 151170},
				val:        "latest",
				ignoreCase: false,
				want:       "\"latest\"",
			},
		},
		{
			name: "CMD_EVENTCOUNT",
			pos:  position{line: 5028, col: 1, offset: 151179},
			expr: &litMatcher{
				pos:        position{line: 5028, col: 19, offset: 151197},
				val:        "eventcount",
				ignoreCase: false,
				want:       "\"eventcount\"",
			},
		},
		{
			name: "EVAL_CONCAT",
			pos:  position{line: 5029, col: 1, offset: 151210},
			expr: &seqExpr{
				pos: position{line: 5029, col: 16, offset: 151225},
				exprs: []any{
					&zeroOrOneExpr{
						pos: position{line: 5029, col: 16, offset: 151225},
						expr: &ruleRefExpr{
							pos:  position{line: 5029, col: 16, offset: 151225},
							name: "SPACE",
						},
					},
					&litMatcher{
						pos:        position{line: 5029, col: 23, offset: 151232},
						val:        ".",
						ignoreCase: false,
						want:       "\".\"",
					},
					&zeroOrOneExpr{
						pos: position{line: 5029, col: 27, offset: 151236},
						expr: &ruleRefExpr{
							pos:  position{line: 5029, col: 27, offset: 151236},
							name: "SPACE",
						},
					},
				},
			},
		},
		{
			name: "MAJOR_BREAK",
			pos:  position{line: 5032, col: 1, offset: 151347},
			expr: &choiceExpr{
				pos: position{line: 5032, col: 16, offset: 151362},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 5032, col: 16, offset: 151362},
						val:        "[[\\]<>(){}|!;,'\"*\\n\\r \\t&?+]",
						chars:      []rune{'[', ']', '<', '>', '(', ')', '{', '}', '|', '!', ';', ',', '\'', '"', '*', '\n', '\r', ' ', '\t', '&', '?', '+'},
						ignoreCase: false,
						inverted:   false,
					},
					&litMatcher{
						pos:        position{line: 5032, col: 47, offset: 151393},
						val:        "%21",
						ignoreCase: false,
						want:       "\"%21\"",
					},
					&litMatcher{
						pos:        position{line: 5032, col: 55, offset: 151401},
						val:        "%26",
						ignoreCase: false,
						want:       "\"%26\"",
					},
					&litMatcher{
						pos:        position{line: 5033, col: 16, offset: 151424},
						val:        "%2526",
						ignoreCase: false,
						want:       "\"%2526\"",
					},
					&litMatcher{
						pos:        position{line: 5033, col: 26, offset: 151434},
						val:        "%3B",
						ignoreCase: false,
						want:       "\"%3B\"",
					},
					&litMatcher{
						pos:        position{line: 5033, col: 34, offset: 151442},
						val:        "%7C",
						ignoreCase: false,
						want:       "\"%7C\"",
					},
					&litMatcher{
						pos:        position{line: 5033, col: 42, offset: 151450},
						val:        "%20",
						ignoreCase: false,
						want:       "\"%20\"",
					},
					&litMatcher{
						pos:        position{line: 5033, col: 50, offset: 151458},
						val:        "%2B",
						ignoreCase: false,
						want:       "\"%2B\"",
					},
					&litMatcher{
						pos:        position{line: 5033, col: 58, offset: 151466},
						val:        "%3D",
						ignoreCase: false,
						want:       "\"%3D\"",
					},
					&litMatcher{
						pos:        position{line: 5033, col: 66, offset: 151474},
						val:        "--",
						ignoreCase: false,
						want:       "\"--\"",
					},
					&litMatcher{
						pos:        position{line: 5034, col: 16, offset: 151496},
						val:        "%2520",
						ignoreCase: false,
						want:       "\"%2520\"",
					},
					&litMatcher{
						pos:        position{line: 5034, col: 26, offset: 151506},
						val:        "%5D",
						ignoreCase: false,
						want:       "\"%5D\"",
					},
					&litMatcher{
						pos:        position{line: 5034, col: 34, offset: 151514},
						val:        "%5B",
						ignoreCase: false,
						want:       "\"%5B\"",
					},
					&litMatcher{
						pos:        position{line: 5034, col: 42, offset: 151522},
						val:        "%3A",
						ignoreCase: false,
						want:       "\"%3A\"",
					},
					&litMatcher{
						pos:        position{line: 5034, col: 50, offset: 151530},
						val:        "%0A",
						ignoreCase: false,
						want:       "\"%0A\"",
					},
					&litMatcher{
						pos:        position{line: 5034, col: 58, offset: 151538},
						val:        "%2C",
						ignoreCase: false,
						want:       "\"%2C\"",
					},
					&litMatcher{
						pos:        position{line: 5034, col: 66, offset: 151546},
						val:        "%28",
						ignoreCase: false,
						want:       "\"%28\"",
					},
					&litMatcher{
						pos:        position{line: 5034, col: 74, offset: 151554},
						val:        "%29",
						ignoreCase: false,
						want:       "\"%29\"",
					},
				},
			},
		},
		{
			name: "MINOR_BREAK",
			pos:  position{line: 5035, col: 1, offset: 151560},
			expr: &choiceExpr{
				pos: position{line: 5035, col: 16, offset: 151575},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 5035, col: 16, offset: 151575},
						val:        "[/:=@.$#%_]",
						chars:      []rune{'/', ':', '=', '@', '.', '$', '#', '%', '_'},
						ignoreCase: false,
						inverted:   false,
					},
					&litMatcher{
						pos:        position{line: 5035, col: 30, offset: 151589},
						val:        "-",
						ignoreCase: false,
						want:       "\"-\"",
					},
					&litMatcher{
						pos:        position{line: 5035, col: 36, offset: 151595},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "NOT",
			pos:  position{line: 5039, col: 1, offset: 151751},
			expr: &seqExpr{
				pos: position{line: 5039, col: 8, offset: 151758},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5039, col: 8, offset: 151758},
						val:        "NOT",
						ignoreCase: false,
						want:       "\"NOT\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5039, col: 14, offset: 151764},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "OR",
			pos:  position{line: 5040, col: 1, offset: 151770},
			expr: &seqExpr{
				pos: position{line: 5040, col: 7, offset: 151776},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 5040, col: 7, offset: 151776},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 5040, col: 13, offset: 151782},
						val:        "OR",
						ignoreCase: false,
						want:       "\"OR\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5040, col: 18, offset: 151787},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "AND",
			pos:  position{line: 5041, col: 1, offset: 151793},
			expr: &seqExpr{
				pos: position{line: 5041, col: 8, offset: 151800},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 5041, col: 8, offset: 151800},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 5041, col: 14, offset: 151806},
						val:        "AND",
						ignoreCase: false,
						want:       "\"AND\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5041, col: 20, offset: 151812},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "PIPE",
			pos:  position{line: 5042, col: 1, offset: 151818},
			expr: &seqExpr{
				pos: position{line: 5042, col: 9, offset: 151826},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 5042, col: 9, offset: 151826},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 5042, col: 24, offset: 151841},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5042, col: 28, offset: 151845},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 5043, col: 1, offset: 151860},
			expr: &seqExpr{
				pos: position{line: 5043, col: 7, offset: 151866},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 5043, col: 7, offset: 151866},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 5043, col: 13, offset: 151872},
						val:        "as",
						ignoreCase: true,
						want:       "\"AS\"i",
					},
					&ruleRefExpr{
						pos:  position{line: 5043, col: 19, offset: 151878},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 5044, col: 1, offset: 151904},
			expr: &seqExpr{
				pos: position{line: 5044, col: 7, offset: 151910},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 5044, col: 7, offset: 151910},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 5044, col: 13, offset: 151916},
						val:        "by",
						ignoreCase: true,
						want:       "\"BY\"i",
					},
					&ruleRefExpr{
						pos:  position{line: 5044, col: 19, offset: 151922},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "EQUAL",
			pos:  position{line: 5046, col: 1, offset: 151949},
			expr: &seqExpr{
				pos: position{line: 5046, col: 10, offset: 151958},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 5046, col: 10, offset: 151958},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 5046, col: 25, offset: 151973},
						val:        "=",
						ignoreCase: false,
						want:       "\"=\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5046, col: 29, offset: 151977},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "COMMA",
			pos:  position{line: 5047, col: 1, offset: 151992},
			expr: &seqExpr{
				pos: position{line: 5047, col: 10, offset: 152001},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 5047, col: 10, offset: 152001},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 5047, col: 25, offset: 152016},
						val:        ",",
						ignoreCase: false,
						want:       "\",\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5047, col: 29, offset: 152020},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "L_PAREN",
			pos:  position{line: 5048, col: 1, offset: 152035},
			expr: &seqExpr{
				pos: position{line: 5048, col: 12, offset: 152046},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5048, col: 12, offset: 152046},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&ruleRefExpr{
						pos:  position{line: 5048, col: 16, offset: 152050},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "R_PAREN",
			pos:  position{line: 5049, col: 1, offset: 152065},
			expr: &seqExpr{
				pos: position{line: 5049, col: 12, offset: 152076},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 5049, col: 12, offset: 152076},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 5049, col: 27, offset: 152091},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 5051, col: 1, offset: 152096},
			expr: &notExpr{
				pos: position{line: 5051, col: 8, offset: 152103},
				expr: &anyMatcher{
					line: 5051, col: 9, offset: 152104,
				},
			},
		},
		{
			name: "WHITESPACE",
			pos:  position{line: 5052, col: 1, offset: 152106},
			expr: &choiceExpr{
				pos: position{line: 5052, col: 15, offset: 152120},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 5052, col: 15, offset: 152120},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&litMatcher{
						pos:        position{line: 5052, col: 21, offset: 152126},
						val:        "\t",
						ignoreCase: false,
						want:       "\"\\t\"",
					},
					&litMatcher{
						pos:        position{line: 5052, col: 28, offset: 152133},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
					&litMatcher{
						pos:        position{line: 5052, col: 35, offset: 152140},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
				},
			},
		},
		{
			name: "SPACE",
			pos:  position{line: 5053, col: 1, offset: 152145},
			expr: &choiceExpr{
				pos: position{line: 5053, col: 10, offset: 152154},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 5053, col: 11, offset: 152155},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 5053, col: 11, offset: 152155},
								expr: &ruleRefExpr{
									pos:  position{line: 5053, col: 11, offset: 152155},
									name: "WHITESPACE",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 5053, col: 23, offset: 152167},
								name: "COMMENT",
							},
							&zeroOrOneExpr{
								pos: position{line: 5053, col: 31, offset: 152175},
								expr: &ruleRefExpr{
									pos:  position{line: 5053, col: 31, offset: 152175},
									name: "WHITESPACE",
								},
							},
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 5053, col: 46, offset: 152190},
						expr: &ruleRefExpr{
							pos:  position{line: 5053, col: 46, offset: 152190},
							name: "WHITESPACE",
						},
					},
				},
			},
		},
		{
			name: "COMMENT",
			pos:  position{line: 5054, col: 1, offset: 152202},
			expr: &seqExpr{
				pos: position{line: 5054, col: 12, offset: 152213},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 5054, col: 12, offset: 152213},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 5054, col: 18, offset: 152219},
						expr: &seqExpr{
							pos: position{line: 5054, col: 19, offset: 152220},
							exprs: []any{
								&notExpr{
									pos: position{line: 5054, col: 19, offset: 152220},
									expr: &litMatcher{
										pos:        position{line: 5054, col: 21, offset: 152222},
										val:        "```",
										ignoreCase: false,
										want:       "\"```\"",
									},
								},
								&anyMatcher{
									line: 5054, col: 28, offset: 152229,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 5054, col: 32, offset: 152233},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
				},
			},
		},
		{
			name: "EMPTY_OR_SPACE",
			pos:  position{line: 5055, col: 1, offset: 152239},
			expr: &choiceExpr{
				pos: position{line: 5055, col: 20, offset: 152258},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 5055, col: 20, offset: 152258},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 5055, col: 28, offset: 152266},
						val:        "",
						ignoreCase: false,
						want:       "\"\"",
					},
				},
			},
		},
		{
			name: "SPACE_OR_COMMA",
			pos:  position{line: 5056, col: 1, offset: 152269},
			expr: &choiceExpr{
				pos: position{line: 5056, col: 19, offset: 152287},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 5056, col: 19, offset: 152287},
						name: "COMMA",
					},
					&ruleRefExpr{
						pos:  position{line: 5056, col: 27, offset: 152295},
						name: "SPACE",
					},
				},
			},
		},
	},
}

func (c *current) onStart1(initialSearch, filterBlocks, queryAggBlocks any) (any, error) {
	var q ast.QueryStruct
	q.SearchFilter = initialSearch.(*ast.Node)

	// Join the InitialSearchBlock with the FilterBlocks with AND nodes. For a
	// search like "A | B | C | D" we should generate the node structure below
	// so that when we run the search it evaluates A first.
	//
	//      AND
	//     /   \
	//    A     AND
	//         /   \
	//        B     AND
	//             /   \
	//            C     D

	filterBlocksSlice := filterBlocks.([]any)
	switch len(filterBlocksSlice) {
	case 0:
		q.SearchFilter = initialSearch.(*ast.Node)
	case 1:
		q.SearchFilter = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     initialSearch.(*ast.Node),
			Right:    filterBlocksSlice[0].(*ast.Node),
		}
	default: // len > 1
		// Iterate backwards so we build the node structure mentioned above.
		root := filterBlocksSlice[len(filterBlocksSlice)-1].(*ast.Node)
		for i := len(filterBlocksSlice) - 2; i > -1; i-- {
			newRoot := &ast.Node{
				NodeType: ast.NodeAnd,
				Left:     filterBlocksSlice[i].(*ast.Node),
				Right:    root,
			}

			root = newRoot
		}

		q.SearchFilter = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     initialSearch.(*ast.Node),
			Right:    root,
		}
	}

	if queryAggBlocks != nil {
		queryAggSlice := queryAggBlocks.([]any)

		if len(queryAggSlice) > 0 {
			// Chain together all QueryAggergators.
			q.PipeCommands = queryAggSlice[0].(*structs.QueryAggregators)

			// Go to the end of the first chain.
			curQueryAgg := q.PipeCommands
			for ; curQueryAgg.Next != nil; curQueryAgg = curQueryAgg.Next {
			}

			// Link the remaining chains.
			for i := range queryAggSlice[1:] {
				queryAgg := queryAggSlice[i+1].(*structs.QueryAggregators)
				curQueryAgg.Next = queryAgg

				// Go to the end of this chain.
				for ; curQueryAgg.Next != nil; curQueryAgg = curQueryAgg.Next {
				}
			}
		}
	}

	return q, nil
}

func (p *parser) callonStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStart1(stack["initialSearch"], stack["filterBlocks"], stack["queryAggBlocks"])
}

func (c *current) onInitialSearchBlock1(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonInitialSearchBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialSearchBlock1(stack["clause"])
}

func (c *current) onSearchBlock1(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonSearchBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBlock1(stack["clause"])
}

func (c *current) onFilterBlock1(block any) (any, error) {
	return block, nil
}

func (p *parser) callonFilterBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterBlock1(stack["block"])
}

func (c *current) onQueryAggergatorBlock1(block any) (any, error) {
	queryAgg := block.(*structs.QueryAggregators)
	return queryAgg, nil
}

func (p *parser) callonQueryAggergatorBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQueryAggergatorBlock1(stack["block"])
}

func (c *current) onFieldSelectBlock1(op, fields any) (any, error) {
	columnsRequest := &structs.ColumnsRequest{}
	if op == nil || string(op.([]byte)) == "+" {
		columnsRequest.IncludeColumns = fields.([]string)
	} else {
		columnsRequest.ExcludeColumns = fields.([]string)
	}

	queryAggregator := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			OutputColumns: columnsRequest,
		},
	}

	return queryAggregator, nil
}

func (p *parser) callonFieldSelectBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldSelectBlock1(stack["op"], stack["fields"])
}

func (c *current) onCommonAggregatorBlock1(aggs, byFields any) (any, error) {
	aggNode := &structs.QueryAggregators{}

	// Extract the MeasureAggregators and check if any of the aggregation fields
	// need to be renamed.
	aggsSlice := aggs.([]*aggregator)
	measureAggs := make([]*structs.MeasureAggregator, len(aggsSlice))
	columnsRequest := &structs.ColumnsRequest{}
	columnsRequest.RenameAggregationColumns = make(map[string]string, 0)

	for i, agg := range aggsSlice {
		measureAggs[i] = agg.measureAgg

		if agg.renameOutputField {
			columnsRequest.RenameAggregationColumns[measureAggs[i].String()] = agg.outputFieldNewName
		}
	}

	// If any agg field was renamed, make a QueryAggregators for all the renames.
	if len(columnsRequest.RenameAggregationColumns) > 0 {
		renameNode := &structs.QueryAggregators{
			PipeCommandType: structs.OutputTransformType,
			OutputTransforms: &structs.OutputTransforms{
				OutputColumns: columnsRequest,
			},
		}

		aggNode.Next = renameNode
	}

	if byFields == nil {
		aggNode.PipeCommandType = structs.MeasureAggsType
		aggNode.MeasureOperations = measureAggs
	} else {
		aggNode.PipeCommandType = structs.GroupByType
		aggNode.GroupByRequest = &structs.GroupByRequest{
			MeasureOperations: measureAggs,
			GroupByColumns:    byFields.([]string),
		}
		aggNode.BucketLimit = query.MAX_GRP_BUCKS
	}

	return aggNode, nil
}

func (p *parser) callonCommonAggregatorBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommonAggregatorBlock1(stack["aggs"], stack["byFields"])
}

func (c *current) onAggregatorBlock1(aggs, options any) (any, error) {
	aggNode := aggs.(*structs.QueryAggregators)

	if options != nil {
		aggNode.StatsOptions = options.(*structs.StatsOptions)
	} else {
		aggNode.StatsOptions = initializeStatsOptions()
	}

	return aggNode, nil
}

func (p *parser) callonAggregatorBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregatorBlock1(stack["aggs"], stack["options"])
}

func (c *current) onStatsOptions1(option any) (any, error) {
	//Default value
	options := initializeStatsOptions()

	optionSlice := option.([]any)
	for _, opt := range optionSlice {
		optArr := opt.([]string)
		// Check for matching option types
		switch optArr[0] {
		case "dedup_splitvals":
			dedupSplitvalsBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatsBlock: Options: invalid param for dedup_splitvals option, param: %v, err: %v", optArr[1], err)
			}
			options.DedupSplitvals = dedupSplitvalsBool
		case "partitions":
			pVal, err := strconv.ParseUint(optArr[1], 10, 64)
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatsBlock: Options: invalid param for partitions option, param: %v, err: %v", optArr[1], err)
			}
			options.Partitions = pVal
		case "allnum":
			allnumBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatsBlock: Options: invalid param for allnum option, param: %v, err: %v", optArr[1], err)
			}
			options.Allnum = allnumBool
		case "delim":
			options.Delim = optArr[1]
		default:
			return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: invalid option: %v", optArr[0])
		}
	}

	return options, nil
}

func (p *parser) callonStatsOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatsOptions1(stack["option"])
}

func (c *current) onStatsOption1(optionCMD, str any) (any, error) {
	optionArr := []string{optionCMD.(string), str.(string)}
	return optionArr, nil
}

func (p *parser) callonStatsOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatsOption1(stack["optionCMD"], stack["str"])
}

func (c *current) onStatsOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: StatsOptionCMD: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonStatsOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatsOptionCMD1(stack["option"])
}

func (c *current) onGroupbyBlock1(fields any) (any, error) {
	// Wildcard fields are not allowed. See https://docs.splunk.com/Documentation/Splunk/9.1.0/SearchReference/Stats
	for _, field := range fields.([]string) {
		if strings.Contains(field, "*") {
			return nil, errors.New("BY clause cannot contain fields with wildcards")
		}
	}

	return fields, nil
}

func (p *parser) callonGroupbyBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupbyBlock1(stack["fields"])
}

func (c *current) onStreamStatsOptionResetOnChange1(boolVal any) (any, error) {
	ssOption := &structs.StreamStatsOptions{
		ResetOnChange: boolVal.(bool),
	}
	ssOptionArg := &StreamStatsOptionArgs{
		argOption:          "reset_on_change",
		streamStatsOptions: ssOption,
	}

	return ssOptionArg, nil
}

func (p *parser) callonStreamStatsOptionResetOnChange1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStreamStatsOptionResetOnChange1(stack["boolVal"])
}

func (c *current) onStreamStatsOptionCurrent1(boolVal any) (any, error) {
	ssOption := &structs.StreamStatsOptions{
		Current: boolVal.(bool),
	}
	ssOptionArg := &StreamStatsOptionArgs{
		argOption:          "current",
		streamStatsOptions: ssOption,
	}

	return ssOptionArg, nil
}

func (p *parser) callonStreamStatsOptionCurrent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStreamStatsOptionCurrent1(stack["boolVal"])
}

func (c *current) onStreamStatsOptionGlobal1(boolVal any) (any, error) {
	// TODO: Verify if needed, in splunk it does nothing as of now based on experiments.
	ssOption := &structs.StreamStatsOptions{
		Global: boolVal.(bool),
	}
	ssOptionArg := &StreamStatsOptionArgs{
		argOption:          "global",
		streamStatsOptions: ssOption,
	}

	return ssOptionArg, nil
}

func (p *parser) callonStreamStatsOptionGlobal1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStreamStatsOptionGlobal1(stack["boolVal"])
}

func (c *current) onStreamStatsOptionAllNum1(boolVal any) (any, error) {
	// TODO: Verify if needed, in splunk it does nothing as of now based on experiments.
	ssOption := &structs.StreamStatsOptions{
		AllNum: boolVal.(bool),
	}
	ssOptionArg := &StreamStatsOptionArgs{
		argOption:          "allnum",
		streamStatsOptions: ssOption,
	}

	return ssOptionArg, nil
}

func (p *parser) callonStreamStatsOptionAllNum1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStreamStatsOptionAllNum1(stack["boolVal"])
}

func (c *current) onStreamStatsOptionWindow1(windowSize any) (any, error) {
	window, err := strconv.ParseUint(windowSize.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Invalid window size: %v, must be a positive integer", windowSize.(string))
	}
	if window > 10000 {
		return nil, fmt.Errorf("Spl peg: Invalid window size: %v, must be less than or equal to 10000", window)
	}
	ssOption := &structs.StreamStatsOptions{
		Window: window,
	}
	ssOptionArg := &StreamStatsOptionArgs{
		argOption:          "window",
		streamStatsOptions: ssOption,
	}

	return ssOptionArg, nil
}

func (p *parser) callonStreamStatsOptionWindow1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStreamStatsOptionWindow1(stack["windowSize"])
}

func (c *current) onStreamStatsOptionResetBefore1(boolExpr any) (any, error) {
	ssOption := &structs.StreamStatsOptions{
		ResetBefore: boolExpr.(*structs.BoolExpr),
	}
	ssOptionArg := &StreamStatsOptionArgs{
		argOption:          "reset_before",
		streamStatsOptions: ssOption,
	}

	return ssOptionArg, nil
}

func (p *parser) callonStreamStatsOptionResetBefore1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStreamStatsOptionResetBefore1(stack["boolExpr"])
}

func (c *current) onStreamStatsOptionResetAfter1(boolExpr any) (any, error) {
	ssOption := &structs.StreamStatsOptions{
		ResetAfter: boolExpr.(*structs.BoolExpr),
	}
	ssOptionArg := &StreamStatsOptionArgs{
		argOption:          "reset_after",
		streamStatsOptions: ssOption,
	}

	return ssOptionArg, nil
}

func (p *parser) callonStreamStatsOptionResetAfter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStreamStatsOptionResetAfter1(stack["boolExpr"])
}

func (c *current) onStreamStatsOptionTimeWindow1(spanLength any) (any, error) {
	spanLen := spanLength.(*structs.BinSpanLength)
	if spanLen.TimeScale == utils.TMInvalid {
		return nil, fmt.Errorf("Invalid Syntax, time_window option cannot be used without time scale")
	}
	ssOption := &structs.StreamStatsOptions{
		TimeWindow: spanLen,
	}
	ssOptionArg := &StreamStatsOptionArgs{
		argOption:          "time_window",
		streamStatsOptions: ssOption,
	}

	return ssOptionArg, nil
}

func (p *parser) callonStreamStatsOptionTimeWindow1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStreamStatsOptionTimeWindow1(stack["spanLength"])
}

func (c *current) onStreamStatsOption1(ssOption any) (any, error) {
	return ssOption, nil
}

func (p *parser) callonStreamStatsOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStreamStatsOption1(stack["ssOption"])
}

func (c *current) onStreamStatsOptionList1(first, rest any) (any, error) {
	restSlice := rest.([]any)
	optionWasSpecified := make(map[string]bool)

	numOptions := 1 + len(restSlice)

	ssOption := initializeStreamStatsOptions()

	for i := 0; i < numOptions; i++ {
		var ssOptArg *StreamStatsOptionArgs
		if i == 0 {
			ssOptArg = first.(*StreamStatsOptionArgs)
		} else {
			separator := restSlice[i-1].([]any)
			ssOptArg = separator[1].(*StreamStatsOptionArgs)
		}

		argOption := ssOptArg.argOption
		val, exist := optionWasSpecified[argOption]
		if exist && val {
			return nil, fmt.Errorf("Invalid Syntax, option: %v is already specified", argOption)
		}
		optionWasSpecified[argOption] = true

		switch argOption {
		case "reset_on_change":
			ssOption.ResetOnChange = ssOptArg.streamStatsOptions.ResetOnChange
		case "current":
			ssOption.Current = ssOptArg.streamStatsOptions.Current
		case "global":
			ssOption.Global = ssOptArg.streamStatsOptions.Global
		case "allnum":
			ssOption.AllNum = ssOptArg.streamStatsOptions.AllNum
		case "window":
			ssOption.Window = ssOptArg.streamStatsOptions.Window
		case "time_window":
			ssOption.TimeWindow = ssOptArg.streamStatsOptions.TimeWindow
		case "reset_before":
			ssOption.ResetBefore = ssOptArg.streamStatsOptions.ResetBefore
		case "reset_after":
			ssOption.ResetAfter = ssOptArg.streamStatsOptions.ResetAfter
		default:
			return nil, fmt.Errorf("Not a Valid Streamstats Command Option: %v", argOption)
		}
	}

	return ssOption, nil
}

func (p *parser) callonStreamStatsOptionList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStreamStatsOptionList1(stack["first"], stack["rest"])
}

func (c *current) onStreamStatsBlock2(ssOptionList, aggs any) (any, error) {
	aggNode := aggs.(*structs.QueryAggregators)

	aggNode.StreamStatsOptions = ssOptionList.(*structs.StreamStatsOptions)

	return aggNode, nil
}

func (p *parser) callonStreamStatsBlock2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStreamStatsBlock2(stack["ssOptionList"], stack["aggs"])
}

func (c *current) onStreamStatsBlock11(aggs any) (any, error) {
	aggNode := aggs.(*structs.QueryAggregators)

	aggNode.StreamStatsOptions = initializeStreamStatsOptions()

	return aggNode, nil
}

func (p *parser) callonStreamStatsBlock11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStreamStatsBlock11(stack["aggs"])
}

func (c *current) onRegexBlock1(keyAndOp, str any) (any, error) {
	var key, op string
	if keyAndOp == nil {
		key = "*"
		op = "="
	} else {
		keyAndOpSlice := keyAndOp.([]any)
		key = keyAndOpSlice[0].(string)
		op = keyAndOpSlice[1].(string)
	}

	// Remove the quotation marks.
	regex := str.(string)
	regex = regex[1 : len(regex)-1]

	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:           op,
			Field:        key,
			Values:       regex,
			ValueIsRegex: true,
		},
	}

	return node, nil
}

func (p *parser) callonRegexBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexBlock1(stack["keyAndOp"], stack["str"])
}

func (c *current) onClauseLevel41(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*ast.Node)
	for _, v := range rest.([]any) {
		parts := v.([]any) // This will be [(AND / SPACE), ClauseLevel3].
		cur = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     cur,
			Right:    parts[1].(*ast.Node),
		}
	}

	return cur, nil
}

func (p *parser) callonClauseLevel41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel41(stack["first"], stack["rest"])
}

func (c *current) onClauseLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*ast.Node)
	for _, v := range rest.([]any) {
		parts := v.([]any) // This will be [OR, ClauseLevel2].
		cur = &ast.Node{
			NodeType: ast.NodeOr,
			Left:     cur,
			Right:    parts[1].(*ast.Node),
		}
	}

	return cur, nil
}

func (p *parser) callonClauseLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel31(stack["first"], stack["rest"])
}

func (c *current) onClauseLevel22(notList, first any) (any, error) {
	// There's an issue with how queries with AST Not nodes are run, so use
	// De Morgan's law to manipulate the expression.
	node := first.(*ast.Node)
	numNots := len(notList.([]any))

	if numNots%2 == 1 {
		deMorgansLaw(node)
	}

	return node, nil
}

func (p *parser) callonClauseLevel22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel22(stack["notList"], stack["first"])
}

func (c *current) onClauseLevel29(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonClauseLevel29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel29(stack["clause"])
}

func (c *current) onClauseLevel12(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonClauseLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel12(stack["clause"])
}

func (c *current) onClauseLevel18(term any) (any, error) {
	return term, nil
}

func (p *parser) callonClauseLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel18(stack["term"])
}

func (c *current) onSearchTerm1(term any) (any, error) {
	return term, nil
}

func (p *parser) callonSearchTerm1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchTerm1(stack["term"])
}

func (c *current) onTimechartBlock1(tcArgs, limitExpr any) (any, error) {
	aggNode := &structs.QueryAggregators{}

	columnsRequest := &structs.ColumnsRequest{}
	columnsRequest.RenameAggregationColumns = make(map[string]string, 0)
	measureAggs := make([]*structs.MeasureAggregator, 0)

	timechartExpr := &structs.TimechartExpr{}
	byField := ""

	if tcArgs == nil {
		return nil, fmt.Errorf("spl peg: timechart: either single-agg or eval-expression by split-by-clause is required")
	}

	timechartArgs := tcArgs.(*TimechartArgs)

	// TODO: Should add || timechartArgs.evalExpr == nil
	if timechartArgs.singleAggExpr == nil {
		return nil, fmt.Errorf("spl peg: timechart: either single-agg or eval-expression by split-by-clause is required")
	}

	var bOptions *structs.BinOptions

	if timechartArgs.tcOptions != nil {
		if timechartArgs.tcOptions.BinOptions != nil {
			bOptions = timechartArgs.tcOptions.BinOptions
		}
	}

	if timechartArgs.singleAggExpr != nil {
		singleAgg := &structs.SingleAgg{}
		aggTemp := timechartArgs.singleAggExpr

		for i, agg := range aggTemp.aggregators {
			measureAggs = append(measureAggs, agg.measureAgg)

			if agg.renameOutputField {
				measureAggs[i].StrEnc = agg.outputFieldNewName
			}
		}

		singleAgg.MeasureOperations = measureAggs
		timechartExpr.SingleAgg = singleAgg

		if aggTemp.SplitByClause != nil {
			byField = aggTemp.SplitByClause.Field
		}
	}

	// TODO: if timechartArgs.evalExpr != nil {}

	aggNode.PipeCommandType = structs.GroupByType
	aggNode.GroupByRequest = &structs.GroupByRequest{
		MeasureOperations: measureAggs,
		GroupByColumns:    []string{"timestamp"},
	}
	aggNode.BucketLimit = query.MAX_GRP_BUCKS

	if bOptions == nil {
		bOptions = &structs.BinOptions{
			SpanOptions: &structs.SpanOptions{
				DefaultSettings: true,
				SpanLength: &structs.SpanLength{
					Num:       1,
					TimeScalr: utils.TMMinute,
				},
			},
		}
	}

	var limitExprTmp *structs.LimitExpr
	if limitExpr != nil {
		limitExprTmp = limitExpr.(*structs.LimitExpr)
		if len(measureAggs) > 1 {
			limitExprTmp.LimitScoreMode = structs.LSMByFreq
		}
	}

	timeBucket := aggregations.InitTimeBucket(bOptions.SpanOptions.SpanLength.Num, bOptions.SpanOptions.SpanLength.TimeScalr, byField, limitExprTmp, len(measureAggs))
	aggNode.TimeHistogram = timeBucket

	return aggNode, nil
}

func (p *parser) callonTimechartBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimechartBlock1(stack["tcArgs"], stack["limitExpr"])
}

func (c *current) onTimechartArgumentsList1(first, rest any) (any, error) {
	restSlice := rest.([]any)
	timechartArgs := &TimechartArgs{}

	numArgs := 1 + len(restSlice)

	for i := 0; i < numArgs; i++ {

		var numArg interface{}

		if i == 0 {
			numArg = first
		} else {
			numArg = restSlice[i-1].([]any)[1]
		}

		switch numArg.(type) {
		case *singleAggTemp:
			timechartArgs.singleAggExpr = numArg.(*singleAggTemp)
		case *structs.TcOptions:
			timechartArgs.tcOptions = numArg.(*structs.TcOptions)
		default:
			return nil, fmt.Errorf("Spl peg: Timechart: invalid timechart argument: %v", numArg)
		}
	}

	return timechartArgs, nil
}

func (p *parser) callonTimechartArgumentsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimechartArgumentsList1(stack["first"], stack["rest"])
}

func (c *current) onTimechartArgument1(tcArg any) (any, error) {
	return tcArg, nil
}

func (p *parser) callonTimechartArgument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimechartArgument1(stack["tcArg"])
}

func (c *current) onSingleAggExpr1(aggs, splitByClause any) (any, error) {
	singleAggExpr := &singleAggTemp{
		aggregators: aggs.([]*aggregator),
	}

	if splitByClause != nil {
		singleAggExpr.SplitByClause = splitByClause.(*structs.SplitByClause)
	}

	return singleAggExpr, nil
}

func (p *parser) callonSingleAggExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleAggExpr1(stack["aggs"], stack["splitByClause"])
}

func (c *current) onSplitByClause1(field any) (any, error) {
	splitByClause := &structs.SplitByClause{
		Field: field.(string),
	}

	return splitByClause, nil
}

func (p *parser) callonSplitByClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSplitByClause1(stack["field"])
}

func (c *current) onTcOptions1(option any) (any, error) {
	//Default value
	tcOptions := &structs.TcOptions{
		UseNull:  true,
		UseOther: true,
		NullStr:  "null",
		OtherStr: "other",
	}
	switch option.(type) {
	case *structs.BinOptions:
		tcOptions.BinOptions = option.(*structs.BinOptions)
	case [][]string:
		optionSlice := option.([]any)
		for _, opt := range optionSlice {
			optArr := opt.([]string)
			switch optArr[0] {
			case "usenull":
				useNullBool, err := strconv.ParseBool(optArr[1])
				if err != nil {
					return nil, fmt.Errorf("Spl peg: Timechart: TcOptions: %v", err)
				}
				tcOptions.UseNull = useNullBool
			case "useother":
				useOtherBool, err := strconv.ParseBool(optArr[1])
				if err != nil {
					return nil, fmt.Errorf("Spl peg: Timechart: TcOptions: %v", err)
				}
				tcOptions.UseOther = useOtherBool
			case "nullstr":
				tcOptions.OtherStr = optArr[1]
			case "otherstr":
				tcOptions.OtherStr = optArr[1]
			default:
				return nil, fmt.Errorf("Spl peg: Timechart: TcOptions: invalid option: %v", optArr[0])
			}
		}
	default:
		return nil, fmt.Errorf("Spl peg: Timechart: Invalid tcOptions %v", option)
	}
	return tcOptions, nil
}

func (p *parser) callonTcOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTcOptions1(stack["option"])
}

func (c *current) onTcOption1(tcOptionCMD, val any) (any, error) {
	tcOptionArr := []string{tcOptionCMD.(string), val.(string)}
	return tcOptionArr, nil
}

func (p *parser) callonTcOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTcOption1(stack["tcOptionCMD"], stack["val"])
}

func (c *current) onTcOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Timechart: TcOptionCMD: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonTcOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTcOptionCMD1(stack["option"])
}

func (c *current) onAllTimeScale1(timeUnit any) (any, error) {
	return timeUnit, nil
}

func (p *parser) callonAllTimeScale1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAllTimeScale1(stack["timeUnit"])
}

func (c *current) onBinSpanLenOption1(number, timeScale any) (any, error) {
	if timeScale != nil {
		num, err := strconv.ParseInt(number.(string), 10, 64)
		if err != nil {
			return nil, fmt.Errorf("BinSpanLenOption: Invalid Number: %v is not an integer, err: %v", number.(string), err)
		}
		if num <= 0 {
			return nil, fmt.Errorf("BinSpanLenOption: Invalid span %v, span value must be greater than 0", num)
		}

		switch timeScale.(utils.TimeUnit) {
		case utils.TMDecisecond:
			if 10%num != 0 || num >= 10 {
				return nil, fmt.Errorf("BinSpanLenOption: Invalid span for decisecond %v, span value must be less than 1 second and 1 second must be evenly divisble by span", num)
			}
		case utils.TMCentisecond:
			if 100%num != 0 || num >= 100 {
				return nil, fmt.Errorf("BinSpanLenOption: Invalid span for centisecond %v, span value must be less than 1 second and 1 second must be evenly divisble by span", num)
			}
		case utils.TMMillisecond:
			if 1000%num != 0 || num >= 1000 {
				return nil, fmt.Errorf("BinSpanLenOption: Invalid span for millisecond %v, span value must be less than 1 second and 1 second must be evenly divisble by span", num)
			}
		case utils.TMMicrosecond:
			return nil, fmt.Errorf("BinSpanLenOption: Invalid span microsecond is not supported!")
		case utils.TMMonth:
			if num > 12 || 12%num != 0 {
				return nil, fmt.Errorf("BinSpanLenOption: Invalid span for month %v, span value must be less or equal to 1 year and 1 year must be evenly divisble by span", num)
			}
		case utils.TMQuarter:
			if num > 4 || 4%num != 0 {
				return nil, fmt.Errorf("BinSpanLenOption: Invalid span for quarter %v, span value must be less or equal to 1 year and 1 year must be evenly divisble by span", num)
			}
		}

		spanLength := &structs.BinSpanLength{
			Num:       float64(num),
			TimeScale: timeScale.(utils.TimeUnit),
		}

		return spanLength, nil
	}

	num, err := strconv.ParseFloat(number.(string), 64)
	if err != nil {
		return nil, fmt.Errorf("BinSpanLenOption: Invalid Number: %v is not a numerical value, err: %v", number.(string), err)
	}
	if num <= 0.0 {
		return nil, fmt.Errorf("BinSpanLenOption: Invalid span %v, span value must be greater than 0", num)
	}

	spanLength := &structs.BinSpanLength{
		Num:       num,
		TimeScale: utils.TMInvalid,
	}

	return spanLength, nil
}

func (p *parser) callonBinSpanLenOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinSpanLenOption1(stack["number"], stack["timeScale"])
}

func (c *current) onBinOptionMinSpan1(spanLength any) (any, error) {

	binOptionArgs := &BinOptionArgs{
		argOption: "minspan",
		binOptions: &structs.BinCmdOptions{
			MinSpan: spanLength.(*structs.BinSpanLength),
		},
	}
	return binOptionArgs, nil
}

func (p *parser) callonBinOptionMinSpan1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptionMinSpan1(stack["spanLength"])
}

func (c *current) onBinOptionMaxBins1(intAsStr any) (any, error) {
	numBins, err := strconv.ParseUint(intAsStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid limit (%v): %v", intAsStr.(string), err)
	}
	if numBins < 2 || numBins > 50000 {
		return nil, fmt.Errorf("Invalid number of bins %v: must be between 2 and 50000", numBins)
	}
	binOptionArgs := &BinOptionArgs{
		argOption: "bins",
		binOptions: &structs.BinCmdOptions{
			MaxBins: numBins,
		},
	}
	return binOptionArgs, nil
}

func (p *parser) callonBinOptionMaxBins1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptionMaxBins1(stack["intAsStr"])
}

func (c *current) onBinOptionAlignTime2(utcEpoch any) (any, error) {
	epoch, err := strconv.ParseUint(utcEpoch.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Invalid utc epoch value: %v for align time", utcEpoch.(string))
	}
	binOptionArgs := &BinOptionArgs{
		argOption: "aligntime",
		binOptions: &structs.BinCmdOptions{
			AlignTime: &epoch,
		},
	}

	return binOptionArgs, nil
}

func (p *parser) callonBinOptionAlignTime2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptionAlignTime2(stack["utcEpoch"])
}

func (c *current) onBinOptionAlignTime8(timestamp any) (any, error) {
	var epoch uint64 = 0
	var err error
	relTimeModifier := timestamp.(ast.TimeModifier)
	epochVal, err := CalculateRelativeTime(relTimeModifier, time.Now())
	epoch = uint64(epochVal)
	if err != nil {
		return nil, err
	}

	binOptionArgs := &BinOptionArgs{
		argOption: "aligntime",
		binOptions: &structs.BinCmdOptions{
			AlignTime: &epoch,
		},
	}

	return binOptionArgs, nil
}

func (p *parser) callonBinOptionAlignTime8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptionAlignTime8(stack["timestamp"])
}

func (c *current) onBinOptionStart1(number any) (any, error) {
	start, err := strconv.ParseFloat(number.(string), 64)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Cannot convert %v to float", number.(string))
	}
	binOptionArgs := &BinOptionArgs{
		argOption: "start",
		binOptions: &structs.BinCmdOptions{
			Start: &start,
		},
	}

	return binOptionArgs, nil
}

func (p *parser) callonBinOptionStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptionStart1(stack["number"])
}

func (c *current) onBinOptionEnd1(number any) (any, error) {
	end, err := strconv.ParseFloat(number.(string), 64)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Cannot convert %v to float", number.(string))
	}
	binOptionArgs := &BinOptionArgs{
		argOption: "end",
		binOptions: &structs.BinCmdOptions{
			End: &end,
		},
	}

	return binOptionArgs, nil
}

func (p *parser) callonBinOptionEnd1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptionEnd1(stack["number"])
}

func (c *current) onBinOptionSpan2(num1, num2 any) (any, error) {
	var coeff float64 = 1.0
	var base float64 = 10.0
	var err error

	if num2 != nil {
		base, err = strconv.ParseFloat(num2.(string), 64)
		if err != nil {
			return nil, fmt.Errorf("Spl peg: Invalid base in log span, %v cannot be converted to floar, err: %v", num2.(string), err)
		}
		if base <= 1.0 {
			return nil, fmt.Errorf("Spl peg: Invalid base in log span, base must be greater than 1")
		}
	}

	if num1 != nil {
		coeff, err = strconv.ParseFloat(num1.(string), 64)
		if err != nil {
			return nil, fmt.Errorf("Spl peg: Invalid coefficient in log span, %v cannot be converted to float, err: %v", num1.(string), err)
		}
		if coeff < 1.0 {
			return nil, fmt.Errorf("Spl peg: Invalid coefficient in log span, coefficient must be greater than or equal to 1")
		}
		if coeff >= base {
			return nil, fmt.Errorf("Spl peg: Invalid coefficient in log span, coefficient must be less than base")
		}
	}

	logSpan := &structs.LogSpan{
		Coefficient: coeff,
		Base:        base,
	}
	spanOptions := &structs.BinSpanOptions{
		LogSpan: logSpan,
	}
	binOptionArgs := &BinOptionArgs{
		argOption: "span",
		binOptions: &structs.BinCmdOptions{
			BinSpanOptions: spanOptions,
		},
	}
	return binOptionArgs, nil
}

func (p *parser) callonBinOptionSpan2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptionSpan2(stack["num1"], stack["num2"])
}

func (c *current) onBinOptionSpan17(spanLen any) (any, error) {

	spanOptions := &structs.BinSpanOptions{
		BinSpanLength: spanLen.(*structs.BinSpanLength),
	}

	binOptionArgs := &BinOptionArgs{
		argOption: "span",
		binOptions: &structs.BinCmdOptions{
			BinSpanOptions: spanOptions,
		},
	}
	return binOptionArgs, nil
}

func (p *parser) callonBinOptionSpan17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptionSpan17(stack["spanLen"])
}

func (c *current) onBinCmdOption1(option any) (any, error) {
	return option, nil
}

func (p *parser) callonBinCmdOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinCmdOption1(stack["option"])
}

func (c *current) onBinCmdOptionsList1(first, rest any) (any, error) {
	restSlice := rest.([]any)
	optionWasSpecified := make(map[string]bool)

	numOptions := 1 + len(restSlice)

	binCmdOption := &structs.BinCmdOptions{}

	for i := 0; i < numOptions; i++ {
		var binOptArg *BinOptionArgs
		if i == 0 {
			binOptArg = first.(*BinOptionArgs)
		} else {
			separator := restSlice[i-1].([]any)
			binOptArg = separator[1].(*BinOptionArgs)
		}

		argOption := binOptArg.argOption
		val, exist := optionWasSpecified[argOption]
		if exist && val {
			return nil, fmt.Errorf("Invalid Syntax, option: %v is already specified", argOption)
		}
		optionWasSpecified[argOption] = true

		switch argOption {
		case "minspan":
			binCmdOption.MinSpan = binOptArg.binOptions.MinSpan
		case "span":
			binCmdOption.BinSpanOptions = binOptArg.binOptions.BinSpanOptions
		case "bins":
			binCmdOption.MaxBins = binOptArg.binOptions.MaxBins
		case "start":
			binCmdOption.Start = binOptArg.binOptions.Start
		case "end":
			binCmdOption.End = binOptArg.binOptions.End
		case "aligntime":
			binCmdOption.AlignTime = binOptArg.binOptions.AlignTime
		default:
			return nil, fmt.Errorf("Not a Valid Bin Command Option: %v", argOption)
		}
	}

	return binCmdOption, nil
}

func (p *parser) callonBinCmdOptionsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinCmdOptionsList1(stack["first"], stack["rest"])
}

func (c *current) onBinBlock2(binCmdOption, field, newFieldName any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		NewColName: field.(string),
	}
	if newFieldName != nil {
		letColReq.NewColName = newFieldName.(string)
	}

	letColReq.BinRequest = binCmdOption.(*structs.BinCmdOptions)
	if letColReq.BinRequest.MaxBins == 0 {
		letColReq.BinRequest.MaxBins = 100
	}
	letColReq.BinRequest.Field = field.(string)

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return queryAgg, nil
}

func (p *parser) callonBinBlock2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinBlock2(stack["binCmdOption"], stack["field"], stack["newFieldName"])
}

func (c *current) onBinBlock14(field, newFieldName any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		NewColName: field.(string),
	}
	if newFieldName != nil {
		letColReq.NewColName = newFieldName.(string)
	}

	binCmdOption := &structs.BinCmdOptions{
		MaxBins: 100,
	}

	letColReq.BinRequest = binCmdOption
	letColReq.BinRequest.Field = field.(string)

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return queryAgg, nil
}

func (p *parser) callonBinBlock14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinBlock14(stack["field"], stack["newFieldName"])
}

func (c *current) onBinOptions1(spanOptions any) (any, error) {
	binOptions := &structs.BinOptions{
		SpanOptions: spanOptions.(*structs.SpanOptions),
	}
	return binOptions, nil
}

func (p *parser) callonBinOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptions1(stack["spanOptions"])
}

func (c *current) onSpanOptions1(spanLength any) (any, error) {
	spanOptions := &structs.SpanOptions{
		SpanLength: spanLength.(*structs.SpanLength),
	}
	return spanOptions, nil
}

func (p *parser) callonSpanOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpanOptions1(stack["spanLength"])
}

func (c *current) onSpanLength1(intAsStr, timeScale any) (any, error) {
	if timeScale.(utils.TimeUnit) == utils.TMYear {
		return nil, fmt.Errorf("SpanLength: Invalid time unit, year is not supported")
	}
	num, err := strconv.Atoi(intAsStr.(string))
	if err != nil {
		return nil, fmt.Errorf("SpanLength: Invalid num (%v): %v", intAsStr.(string), err)
	}

	spanLength := &structs.SpanLength{
		Num:       num,
		TimeScalr: timeScale.(utils.TimeUnit),
	}
	return spanLength, nil
}

func (p *parser) callonSpanLength1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpanLength1(stack["intAsStr"], stack["timeScale"])
}

func (c *current) onLimitExpr1(sortBy, intAsStr any) (any, error) {
	num, err := strconv.Atoi(intAsStr.(string))
	if err != nil {
		return nil, fmt.Errorf("SpanLength: Invalid num (%v): %v", intAsStr.(string), err)
	}

	limitExpr := &structs.LimitExpr{
		IsTop: true, // Default Value
		Num:   num,
	}

	if sortBy != nil {
		sortByStr, err := transferUint8ToString(sortBy)
		if err != nil {
			return nil, fmt.Errorf("Spl peg: Timechart: %v", err)
		}
		if sortByStr == "bottom" {
			limitExpr.IsTop = false
		}
	}

	return limitExpr, nil
}

func (p *parser) callonLimitExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitExpr1(stack["sortBy"], stack["intAsStr"])
}

func (c *current) onStatisticBlock1(statisticExpr any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		StatisticColRequest: statisticExpr.(*structs.StatisticExpr),
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	measureAgg := &structs.MeasureAggregator{
		MeasureCol:  "*",
		MeasureFunc: utils.Count,
	}

	measureOperations := make([]*structs.MeasureAggregator, 1)
	measureOperations[0] = measureAgg

	groupByColumns := append(statisticExpr.(*structs.StatisticExpr).FieldList, statisticExpr.(*structs.StatisticExpr).ByClause...)

	aggNode := &structs.QueryAggregators{}
	aggNode.Next = root
	aggNode.PipeCommandType = structs.GroupByType
	aggNode.GroupByRequest = &structs.GroupByRequest{
		MeasureOperations: measureOperations,
		GroupByColumns:    groupByColumns,
	}

	return aggNode, nil
}

func (p *parser) callonStatisticBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticBlock1(stack["statisticExpr"])
}

func (c *current) onStatisticExpr1(cmd, limit, fieldList, byClause, options any) (any, error) {

	statisticExpr := &structs.StatisticExpr{
		FieldList: fieldList.([]interface{})[1].([]string),
	}

	statisticCmd, err := transferUint8ToString(cmd)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: StatisticExpr: %v", err)
	}

	if statisticCmd == "top" {
		statisticExpr.StatisticFunctionMode = structs.SFMTop
	} else {
		statisticExpr.StatisticFunctionMode = structs.SFMRare
	}

	if limit != nil {
		statisticExpr.Limit = limit.(string)
	}

	if options != nil {
		statisticExpr.StatisticOptions = options.(*structs.StatisticOptions)
	} else {
		statisticExpr.StatisticOptions = &structs.StatisticOptions{
			ShowCount:    true,
			CountField:   "count",
			ShowPerc:     true,
			PercentField: "percent",
			UseOther:     false,
			OtherStr:     "Other",
		}
	}

	if byClause != nil {
		statisticExpr.ByClause = byClause.([]string)
	}

	return statisticExpr, nil
}

func (p *parser) callonStatisticExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticExpr1(stack["cmd"], stack["limit"], stack["fieldList"], stack["byClause"], stack["options"])
}

func (c *current) onStatisticLimit2(number any) (any, error) {
	return number.(string), nil
}

func (p *parser) callonStatisticLimit2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticLimit2(stack["number"])
}

func (c *current) onStatisticLimit7(limit any) (any, error) {
	return limit.(string), nil
}

func (p *parser) callonStatisticLimit7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticLimit7(stack["limit"])
}

func (c *current) onStatisticOptions1(option any) (any, error) {
	//Default value
	options := &structs.StatisticOptions{
		ShowCount:    true,
		CountField:   "count",
		ShowPerc:     true,
		PercentField: "percent",
		UseOther:     false,
		OtherStr:     "other",
	}

	optionSlice := option.([]any)
	for _, opt := range optionSlice {
		optArr := opt.([]string)
		// Check for matching option types
		switch optArr[0] {
		case "showcount":
			showCountBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.ShowCount = showCountBool
		case "countfield":
			options.CountField = optArr[1]
		case "showperc":
			showPercBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.ShowPerc = showPercBool
		case "percentfield":
			options.PercentField = optArr[1]
		case "useother":
			useOtherBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.UseOther = useOtherBool
		case "otherstr":
			options.OtherStr = optArr[1]
		default:
			return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: invalid option")
		}
	}

	return options, nil
}

func (p *parser) callonStatisticOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticOptions1(stack["option"])
}

func (c *current) onStatisticOption1(optionCMD, field any) (any, error) {
	optionArr := []string{optionCMD.(string), field.(string)}
	return optionArr, nil
}

func (p *parser) callonStatisticOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticOption1(stack["optionCMD"], stack["field"])
}

func (c *current) onStatisticOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: StatisticExpr: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonStatisticOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticOptionCMD1(stack["option"])
}

func (c *current) onByClause2(fieldList any) (any, error) {
	return fieldList.([]string), nil
}

func (p *parser) callonByClause2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByClause2(stack["fieldList"])
}

func (c *current) onByClause7(groupByBlock any) (any, error) {
	return groupByBlock.([]string), nil
}

func (p *parser) callonByClause7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByClause7(stack["groupByBlock"])
}

func (c *current) onDedupBlock1(dedupExpr any) (any, error) {

	letColReq := &structs.LetColumnsRequest{
		DedupColRequest: dedupExpr.(*structs.DedupExpr),
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonDedupBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupBlock1(stack["dedupExpr"])
}

func (c *current) onDedupExpr1(limitArr, options1, fieldList, options2, sortByClause any) (any, error) {
	dedupExpr := &structs.DedupExpr{
		FieldList:         fieldList.([]string),
		Limit:             1,
		DedupCombinations: make(map[string]map[int][]structs.SortValue, 0),
		DedupRecords:      make(map[string]map[string]interface{}, 0),
	}

	if limitArr != nil {
		limitStr := limitArr.([]interface{})[1].(string)
		limit, err := strconv.ParseUint(limitStr, 10, 64)
		if err != nil || limit == 0 {
			return nil, fmt.Errorf("Invalid limit (%v): %v", limitStr, err)
		}
		dedupExpr.Limit = limit
	}

	dedupExpr.DedupOptions = &structs.DedupOptions{
		Consecutive: false,
		KeepEmpty:   false,
		KeepEvents:  false,
	}

	if options1 != nil {
		dedupExpr.DedupOptions = options1.(*structs.DedupOptions)
	}
	if options2 != nil {
		options := options2.(*structs.DedupOptions)

		if options.Consecutive {
			dedupExpr.DedupOptions.Consecutive = options.Consecutive
		}
		if options.KeepEmpty {
			dedupExpr.DedupOptions.KeepEmpty = options.KeepEmpty
		}
		if options.KeepEvents {
			dedupExpr.DedupOptions.KeepEvents = options.KeepEvents
		}
	}

	if sortByClause != nil {
		dedupExpr.DedupSortEles = sortByClause.([]*structs.SortElement)

		// Make the DedupSortAscending from the DedupSortEles.
		dedupExpr.DedupSortAscending = make([]int, len(dedupExpr.DedupSortEles))
		for i, ele := range dedupExpr.DedupSortEles {
			if ele.SortByAsc {
				dedupExpr.DedupSortAscending[i] = 1
			} else {
				dedupExpr.DedupSortAscending[i] = -1
			}
		}
	}

	return dedupExpr, nil
}

func (p *parser) callonDedupExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupExpr1(stack["limitArr"], stack["options1"], stack["fieldList"], stack["options2"], stack["sortByClause"])
}

func (c *current) onDedupFieldName1(field any) (any, error) {
	return field, nil
}

func (p *parser) callonDedupFieldName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupFieldName1(stack["field"])
}

func (c *current) onDedupFieldList1(first, rest any) (any, error) {
	// Convert `rest` to a slice. Each element of the slice will be a 2-element
	// slice where the first element is " " and the second is a FieldName.
	restSlice := rest.([]any)

	numFieldNames := 1 + len(restSlice)
	fields := make([]string, numFieldNames)
	fields[0] = first.(string)

	for i := 1; i < numFieldNames; i++ {
		separatorAndField := restSlice[i-1].([]any)
		fields[i] = separatorAndField[1].(string)
	}

	return fields, nil
}

func (p *parser) callonDedupFieldList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupFieldList1(stack["first"], stack["rest"])
}

func (c *current) onDedupOptions1(option any) (any, error) {
	//Default value
	options := &structs.DedupOptions{
		Consecutive: false,
		KeepEmpty:   false,
		KeepEvents:  false,
	}

	optionSlice := option.([]any)
	for _, opt := range optionSlice {
		optArr := opt.([]string)
		// Check for matching option types
		switch optArr[0] {
		case "consecutive":
			consecutiveBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: DedupBlock: Options: %v", err)
			}
			options.Consecutive = consecutiveBool
		case "keepempty":
			keepEmptyBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: DedupBlock: Options: %v", err)
			}
			options.KeepEmpty = keepEmptyBool
		case "keepevents":
			keepEventsBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: DedupBlock: Options: %v", err)
			}
			options.KeepEvents = keepEventsBool
		default:
			return nil, fmt.Errorf("Spl peg: DedupBlock: Options: invalid option")
		}
	}

	return options, nil
}

func (p *parser) callonDedupOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupOptions1(stack["option"])
}

func (c *current) onDedupOption1(optionCMD, field any) (any, error) {
	optionArr := []string{optionCMD.(string), field.(string)}
	return optionArr, nil
}

func (p *parser) callonDedupOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupOption1(stack["optionCMD"], stack["field"])
}

func (c *current) onDedupOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: DedupExpr: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonDedupOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupOptionCMD1(stack["option"])
}

func (c *current) onDedupSortByClause1(dedupSortEles any) (any, error) {
	return dedupSortEles, nil
}

func (p *parser) callonDedupSortByClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupSortByClause1(stack["dedupSortEles"])
}

func (c *current) onSortElements1(first, rest any) (any, error) {
	restSlice := rest.([]any)

	length := 1 + len(restSlice)
	sortEles := make([]*structs.SortElement, length)
	sortEles[0] = first.(*structs.SortElement)

	for i := 1; i < length; i++ {
		elements := restSlice[i-1].([]any)
		sortEles[i] = elements[1].(*structs.SortElement)
	}

	return sortEles, nil
}

func (p *parser) callonSortElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortElements1(stack["first"], stack["rest"])
}

func (c *current) onSingleSortElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSingleSortElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleSortElement1(stack["element"])
}

func (c *current) onSingleSortElementWithoutCast1(sortBySymbol, field any) (any, error) {
	sortByAsc := true

	symbol := sortBySymbol.([]byte)
	if len(symbol) > 0 && symbol[0] == '-' {
		sortByAsc = false
	}

	return &structs.SortElement{
		SortByAsc: sortByAsc,
		Op:        "",
		Field:     field.(string),
	}, nil
}

func (p *parser) callonSingleSortElementWithoutCast1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleSortElementWithoutCast1(stack["sortBySymbol"], stack["field"])
}

func (c *current) onSingleSortElementWithCast1(sortBySymbol, op, field any) (any, error) {
	sortByAsc := true

	symbol := sortBySymbol.([]byte)
	if len(symbol) > 0 && symbol[0] == '-' {
		sortByAsc = false
	}

	opStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: singleSortElementWithCast: %v", err)
	}

	return &structs.SortElement{
		SortByAsc: sortByAsc,
		Op:        opStr,
		Field:     field.(string),
	}, nil
}

func (p *parser) callonSingleSortElementWithCast1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleSortElementWithCast1(stack["sortBySymbol"], stack["op"], stack["field"])
}

func (c *current) onRenameBlock1(renameExpr any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		RenameColRequest: renameExpr.(*structs.RenameExpr),
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonRenameBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameBlock1(stack["renameExpr"])
}

func (c *current) onRenameExpr2(originalPattern, newPattern any) (any, error) {
	renameExpr := &structs.RenameExpr{
		RenameExprMode:  structs.REMPhrase,
		OriginalPattern: originalPattern.(string),
		NewPattern:      removeQuotes(newPattern),
	}

	return renameExpr, nil
}

func (p *parser) callonRenameExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameExpr2(stack["originalPattern"], stack["newPattern"])
}

func (c *current) onRenameExpr9(originalPattern, newPattern any) (any, error) {
	isRegex, err := isRegexRename(originalPattern.(string), newPattern.(string))
	if err != nil {
		return nil, fmt.Errorf("Spl peg: RenameExpr: %v", err)
	}

	var renameExprMode structs.RenameExprMode
	if isRegex {
		renameExprMode = structs.REMRegex
	} else {
		renameExprMode = structs.REMOverride
	}

	renameExpr := &structs.RenameExpr{
		RenameExprMode:  renameExprMode,
		OriginalPattern: originalPattern.(string),
		NewPattern:      newPattern.(string),
	}

	return renameExpr, nil
}

func (p *parser) callonRenameExpr9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameExpr9(stack["originalPattern"], stack["newPattern"])
}

func (c *current) onRexBlock1(field, str any) (any, error) {
	pattern := removeQuotes(str)
	rexColNames, err := getRexColNames(pattern)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: RexBlock: %v", err)
	}
	rexExpr := &structs.RexExpr{
		FieldName:   field.(string),
		Pattern:     transferPCREToRE2(pattern),
		RexColNames: rexColNames,
	}

	letColReq := &structs.LetColumnsRequest{
		RexColRequest: rexExpr,
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonRexBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRexBlock1(stack["field"], stack["str"])
}

func (c *current) onSortBlock1(limit, sortByEles any) (any, error) {

	sortExpr := &structs.SortExpr{
		SortEles:    sortByEles.([]*structs.SortElement),
		SortRecords: make(map[string]map[string]interface{}, 0),
		Limit:       10000,
	}

	if limit != nil {
		sortExpr.Limit = limit.(uint64)
	}

	ascendingArr := make([]int, len(sortExpr.SortEles))
	for i, ele := range sortExpr.SortEles {
		if ele.SortByAsc {
			ascendingArr[i] = 1
		} else {
			ascendingArr[i] = -1
		}
	}

	sortExpr.SortAscending = ascendingArr

	letColReq := &structs.LetColumnsRequest{
		SortColRequest: sortExpr,
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonSortBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortBlock1(stack["limit"], stack["sortByEles"])
}

func (c *current) onSortLimit1(intAsStr any) (any, error) {
	limit, err := strconv.ParseUint(intAsStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid limit (%v): %v", intAsStr.(string), err)
	}

	if limit == 0 {
		limit = math.MaxUint64
	}

	return limit, nil
}

func (p *parser) callonSortLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortLimit1(stack["intAsStr"])
}

func (c *current) onEvalBlock1(first, rest any) (any, error) {
	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: first.(*structs.LetColumnsRequest),
		},
	}

	leafQueryAgg := root
	restSlice := rest.([]any)
	for i := range restSlice {
		CommaSpaceAndEval := restSlice[i].([]any)
		nextQueryAgg := &structs.QueryAggregators{
			PipeCommandType: structs.OutputTransformType,
			OutputTransforms: &structs.OutputTransforms{
				LetColumns: CommaSpaceAndEval[1].(*structs.LetColumnsRequest),
			},
		}

		leafQueryAgg.Next = nextQueryAgg
		leafQueryAgg = leafQueryAgg.Next
	}

	return root, nil
}

func (p *parser) callonEvalBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalBlock1(stack["first"], stack["rest"])
}

func (c *current) onSingleEval1(field, expr any) (any, error) {
	fieldStr := field.(string)
	if strings.Contains(fieldStr, "*") {
		return nil, fmt.Errorf("New fields must not contain wildcards; invalid field: %v", field)
	}

	letColumnsRequest := expr.(*structs.LetColumnsRequest)
	letColumnsRequest.NewColName = fieldStr

	return letColumnsRequest, nil
}

func (p *parser) callonSingleEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleEval1(stack["field"], stack["expr"])
}

func (c *current) onEvalExpression1(value any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		ValueColRequest: value.(*structs.ValueExpr),
	}

	return letColReq, nil
}

func (p *parser) callonEvalExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalExpression1(stack["value"])
}

func (c *current) onConditionExpr2(condition, trueValue, falseValue any) (any, error) {

	node := &structs.ConditionExpr{
		Op:         "if",
		BoolExpr:   condition.(*structs.BoolExpr),
		TrueValue:  trueValue.(*structs.ValueExpr),
		FalseValue: falseValue.(*structs.ValueExpr),
	}

	return node, nil
}

func (p *parser) callonConditionExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr2(stack["condition"], stack["trueValue"], stack["falseValue"])
}

func (c *current) onConditionExpr15(opName, pair, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: ConditionExpr: %v", err)
	}
	pairs := make([]*structs.ConditionValuePair, 1)
	pairs[0] = pair.(*structs.ConditionValuePair)

	if rest != nil {
		restSlice := rest.([]any)
		for i := range restSlice {
			ele := restSlice[i].([]any)
			pairs = append(pairs, ele[1].(*structs.ConditionValuePair))
		}
	}

	node := &structs.ConditionExpr{
		Op:                  opNameStr,
		ConditionValuePairs: pairs,
	}

	return node, nil
}

func (p *parser) callonConditionExpr15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr15(stack["opName"], stack["pair"], stack["rest"])
}

func (c *current) onConditionExpr30(valueExpr, rest any) (any, error) {
	restSlice := rest.([]any)
	valueList := make([]*structs.ValueExpr, 1+len(restSlice))
	valueList[0] = valueExpr.(*structs.ValueExpr)

	for i := range restSlice {
		valueAtom := restSlice[i].([]any)
		valueList[i+1] = valueAtom[1].(*structs.ValueExpr)
	}

	node := &structs.ConditionExpr{
		Op:        "coalesce",
		ValueList: valueList,
	}

	return node, nil
}

func (p *parser) callonConditionExpr30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr30(stack["valueExpr"], stack["rest"])
}

func (c *current) onConditionExpr42(leftValue, rightValue any) (any, error) {
	valueList := make([]*structs.ValueExpr, 2)
	valueList[0] = leftValue.(*structs.ValueExpr)
	valueList[1] = rightValue.(*structs.ValueExpr)

	node := &structs.ConditionExpr{
		Op:        "nullif",
		ValueList: valueList,
	}

	return node, nil
}

func (p *parser) callonConditionExpr42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr42(stack["leftValue"], stack["rightValue"])
}

func (c *current) onConditionValuePair1(condition, value any) (any, error) {
	conditionValuePair := &structs.ConditionValuePair{
		Condition: condition.(*structs.BoolExpr),
		Value:     value.(*structs.ValueExpr),
	}
	return conditionValuePair, nil
}

func (p *parser) callonConditionValuePair1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionValuePair1(stack["condition"], stack["value"])
}

func (c *current) onTextExpr2(opName, stringExpr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:          opNameStr,
		Param:       stringExpr.(*structs.StringExpr),
		StrToRemove: "",
	}
	return node, nil
}

func (p *parser) callonTextExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr2(stack["opName"], stack["stringExpr"])
}

func (c *current) onTextExpr16(opName, firstVal, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	if rest == nil {
		return firstVal, nil
	}
	restSlice := rest.([]any)
	values := make([]*structs.StringExpr, 1+len(restSlice))
	values[0] = firstVal.(*structs.StringExpr)

	for i := range restSlice {
		stringAtom := restSlice[i].([]any)
		values[i+1] = stringAtom[1].(*structs.StringExpr)
	}
	node := &structs.TextExpr{
		Op:        opNameStr,
		ValueList: values,
	}
	return node, nil
}

func (p *parser) callonTextExpr16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr16(stack["opName"], stack["firstVal"], stack["rest"])
}

func (c *current) onTextExpr33(opName, stringExpr, delim any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:        opNameStr,
		Param:     stringExpr.(*structs.StringExpr),
		Delimiter: delim.(*structs.StringExpr),
	}
	return node, nil
}

func (p *parser) callonTextExpr33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr33(stack["opName"], stack["stringExpr"], stack["delim"])
}

func (c *current) onTextExpr46(opName, stringExpr, startIndex, lengthParam any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	var lengthConverted *structs.NumericExpr
	if lengthParam != nil {
		lengthSlice, ok := lengthParam.([]interface{})
		if ok && len(lengthSlice) > 1 {
			length, ok := lengthSlice[1].(*structs.NumericExpr)
			if ok {
				lengthConverted = length
			} else {
				return nil, fmt.Errorf("Spl peg: TextExpr: Unable to assert length as *structs.NumericExpr")
			}
		}
	}
	node := &structs.TextExpr{
		Op:         opNameStr,
		Param:      stringExpr.(*structs.StringExpr),
		StartIndex: startIndex.(*structs.NumericExpr),
		LengthExpr: lengthConverted,
	}
	return node, nil
}

func (p *parser) callonTextExpr46() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr46(stack["opName"], stack["stringExpr"], stack["startIndex"], stack["lengthParam"])
}

func (c *current) onTextExpr62(value, format any) (any, error) {
	var formatExpr *structs.StringExpr
	if format != nil {
		formatSlice := format.([]interface{})
		formatExpr, _ = formatSlice[1].(*structs.StringExpr)
	}
	return &structs.TextExpr{
		IsTerminal: false,
		Op:         "tostring",
		Val:        value.(*structs.ValueExpr),
		Param:      formatExpr,
	}, nil
}

func (p *parser) callonTextExpr62() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr62(stack["value"], stack["format"])
}

func (c *current) onTextExpr74(opName, expr, strToRemoveExpr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}

	strToRemove := " \t"
	if strToRemoveExpr != nil {
		strToRemove = strToRemoveExpr.(string)
	}

	node := &structs.TextExpr{
		Op:          opNameStr,
		Param:       expr.(*structs.StringExpr),
		StrToRemove: removeQuotes(strToRemove),
	}

	return node, nil
}

func (p *parser) callonTextExpr74() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr74(stack["opName"], stack["expr"], stack["strToRemoveExpr"])
}

func (c *current) onTextExpr88(inputField, path any) (any, error) {
	pathExpr := path.(*SPathFieldExpr)
	return &structs.TextExpr{
		Op: "spath",
		SPathExpr: &structs.SPathExpr{
			InputColName:    inputField.(string),
			Path:            pathExpr.PathValue,
			IsPathFieldName: pathExpr.IsPathFieldName,
		},
	}, nil
}

func (p *parser) callonTextExpr88() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr88(stack["inputField"], stack["path"])
}

func (c *current) onTextExpr100(mask, ip any) (any, error) {
	return &structs.TextExpr{
		Op:    "ipmask",
		Val:   ip.(*structs.ValueExpr),
		Param: mask.(*structs.StringExpr),
	}, nil
}

func (p *parser) callonTextExpr100() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr100(stack["mask"], stack["ip"])
}

func (c *current) onTextExpr110(obj, key, value any) (any, error) {
	stringExpr := &structs.StringExpr{
		StringExprMode: structs.SEMRawStringList,
		StringList:     []string{key.(string), value.(string)},
	}
	return &structs.TextExpr{
		Op:    "object_to_array",
		Val:   obj.(*structs.ValueExpr),
		Param: stringExpr,
	}, nil
}

func (p *parser) callonTextExpr110() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr110(stack["obj"], stack["key"], stack["value"])
}

func (c *current) onTextExpr123(format, rest any) (any, error) {
	textExpr := &structs.TextExpr{
		Op:    "printf",
		Param: format.(*structs.StringExpr),
	}
	if rest != nil {
		restSlice := rest.([]any)
		valueList := make([]*structs.StringExpr, len(restSlice))

		for i := range restSlice {
			valueAtom := restSlice[i].([]any)
			valueList[i] = valueAtom[1].(*structs.StringExpr)
		}
		textExpr.ValueList = valueList
	}

	return textExpr, nil
}

func (p *parser) callonTextExpr123() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr123(stack["format"], stack["rest"])
}

func (c *current) onTextExpr135(containInternalFields any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMRawString,
		RawString:      "true", // default value
	}

	if containInternalFields != nil {
		restSlice := containInternalFields.([]any)
		containInternalFieldsStr, err := transferUint8ToString(restSlice[0])
		if err != nil {
			return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
		}
		if containInternalFieldsStr == "false" {
			expr.RawString = "false"
		}
	}

	return &structs.TextExpr{
		Op:    "tojson",
		Param: expr,
	}, nil
}

func (p *parser) callonTextExpr135() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr135(stack["containInternalFields"])
}

func (c *current) onTextExpr147(opName, condition any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: Failed to recognize operator: %v, err= %v", opName, err)
	}

	node := &structs.TextExpr{
		Op:        opNameStr,
		Condition: condition.(*structs.BoolExpr),
	}

	return node, nil
}

func (p *parser) callonTextExpr147() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr147(stack["opName"], stack["condition"])
}

func (c *current) onTextExpr155(opName, stringExpr, startIndex, endIndex any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:         opNameStr,
		Param:      stringExpr.(*structs.StringExpr),
		StartIndex: startIndex.(*structs.NumericExpr),
	}
	if endIndex != nil {
		node.EndIndex = endIndex.(*structs.NumericExpr)
	}

	return node, nil
}

func (p *parser) callonTextExpr155() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr155(stack["opName"], stack["stringExpr"], stack["startIndex"], stack["endIndex"])
}

func (c *current) onTextExpr169(opName, stringExpr, expr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:    opNameStr,
		Val:   expr.(*structs.ValueExpr),
		Param: stringExpr.(*structs.StringExpr),
	}

	return node, nil
}

func (p *parser) callonTextExpr169() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr169(stack["opName"], stack["stringExpr"], stack["expr"])
}

func (c *current) onTextExpr180(opName, startIndex, endIndex, stringExpr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:         opNameStr,
		StartIndex: startIndex.(*structs.NumericExpr),
		EndIndex:   endIndex.(*structs.NumericExpr),
	}
	if stringExpr != nil {
		node.Param = stringExpr.(*structs.StringExpr)
	}

	return node, nil
}

func (p *parser) callonTextExpr180() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr180(stack["opName"], stack["startIndex"], stack["endIndex"], stack["stringExpr"])
}

func (c *current) onTextExpr195(opName, mvLeft, mvRight, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	values := make([]*structs.StringExpr, 2)
	values[0] = mvLeft.(*structs.StringExpr)
	values[1] = mvRight.(*structs.StringExpr)

	node := &structs.TextExpr{
		Op:        opNameStr,
		ValueList: values,
	}

	if rest != nil {
		restSlice := rest.([]any)
		node.Delimiter = restSlice[1].(*structs.StringExpr)
	}

	return node, nil
}

func (p *parser) callonTextExpr195() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr195(stack["opName"], stack["mvLeft"], stack["mvRight"], stack["rest"])
}

func (c *current) onTextExpr211(opName, stringExpr, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}

	node := &structs.TextExpr{
		Op:         opNameStr,
		Param:      stringExpr.(*structs.StringExpr),
		InferTypes: false, // default value
	}

	if rest != nil {
		restSlice := rest.([]any)
		inferTypes, err := transferUint8ToString(restSlice[1])
		if err != nil {
			return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
		}
		if inferTypes == "true" {
			node.InferTypes = true
		}
	}

	return node, nil
}

func (p *parser) callonTextExpr211() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr211(stack["opName"], stack["stringExpr"], stack["rest"])
}

func (c *current) onTextExpr227(field, threshold, match, delims any) (any, error) {
	textExpr := &structs.TextExpr{
		Op: "cluster",
	}

	cluster := &structs.Cluster{
		Field:     field.(string),
		Threshold: 0.8,
		Match:     "termlist",
	}

	if threshold != nil {
		slice := threshold.([]interface{})
		thresholdStr := slice[2].(string)
		val, err := strconv.ParseFloat(thresholdStr, 64)
		if err != nil {
			return nil, fmt.Errorf("Spl peg: TextExpr: invalid threshold: %v", thresholdStr)
		}
		cluster.Threshold = val
	}

	if match != nil {
		slice := match.([]interface{})
		matchStr, err := transferUint8ToString(slice[2])
		if err != nil {
			return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
		}
		cluster.Match = matchStr
	}

	if delims != nil {
		slice := delims.([]interface{})
		delimsStr := slice[2].(string)
		cluster.Delims = delimsStr
	}

	textExpr.Cluster = cluster

	return textExpr, nil
}

func (p *parser) callonTextExpr227() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr227(stack["field"], stack["threshold"], stack["match"], stack["delims"])
}

func (c *current) onTextExpr255(filter any) (any, error) {
	textExpr := &structs.TextExpr{
		Op: "getfields",
	}

	if filter != nil {
		textExpr.Param = filter.(*structs.StringExpr)
	}

	return textExpr, nil
}

func (p *parser) callonTextExpr255() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr255(stack["filter"])
}

func (c *current) onTextExpr263(valueExpr any) (any, error) {
	return &structs.TextExpr{
		Op:  "typeof",
		Val: valueExpr.(*structs.ValueExpr),
	}, nil
}

func (p *parser) callonTextExpr263() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr263(stack["valueExpr"])
}

func (c *current) onTextExpr270(val, regex, replacement any) (any, error) {
	return &structs.TextExpr{
		Op:        "replace",
		Val:       val.(*structs.ValueExpr),
		ValueList: []*structs.StringExpr{regex.(*structs.StringExpr), replacement.(*structs.StringExpr)},
	}, nil
}

func (p *parser) callonTextExpr270() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr270(stack["val"], stack["regex"], stack["replacement"])
}

func (c *current) onTextExpr283(val, format any) (any, error) {
	return &structs.TextExpr{
		Op:    "strftime",
		Val:   val.(*structs.ValueExpr),
		Param: format.(*structs.StringExpr),
	}, nil
}

func (p *parser) callonTextExpr283() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr283(stack["val"], stack["format"])
}

func (c *current) onTextExpr293(val, format any) (any, error) {
	return &structs.TextExpr{
		Op:    "strptime",
		Val:   val.(*structs.ValueExpr),
		Param: format.(*structs.StringExpr),
	}, nil
}

func (p *parser) callonTextExpr293() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr293(stack["val"], stack["format"])
}

func (c *current) onQuotedPathString1(str any) (any, error) {
	return &SPathFieldExpr{
		PathValue:       removeQuotes(str),
		IsPathFieldName: false,
	}, nil
}

func (p *parser) callonQuotedPathString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedPathString1(stack["str"])
}

func (c *current) onUnquotedPathValue1(str any) (any, error) {
	return &SPathFieldExpr{
		PathValue:       removeQuotes(str),
		IsPathFieldName: true,
	}, nil
}

func (p *parser) callonUnquotedPathValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedPathValue1(stack["str"])
}

func (c *current) onStrToRemoveExpr1(strToRemove any) (any, error) {
	return strToRemove, nil
}

func (p *parser) callonStrToRemoveExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStrToRemoveExpr1(stack["strToRemove"])
}

func (c *current) onEvalFieldToRead2() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEvalFieldToRead2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalFieldToRead2()
}

func (c *current) onEvalFieldToRead8(field any) (any, error) {
	return field, nil
}

func (p *parser) callonEvalFieldToRead8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalFieldToRead8(stack["field"])
}

func (c *current) onWhereBlock1(condition any) (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			FilterRows: condition.(*structs.BoolExpr),
		},
	}

	return queryAgg, nil
}

func (p *parser) callonWhereBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereBlock1(stack["condition"])
}

func (c *current) onBoolExpr1(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonBoolExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExpr1(stack["expr"])
}

func (c *current) onBoolExprLevel41(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.BoolExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.BoolExpr{
			IsTerminal: false,
			BoolOp:     structs.BoolOpOr,
			LeftBool:   cur,
			RightBool:  opAndClause[1].(*structs.BoolExpr),
		}
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel41(stack["first"], stack["rest"])
}

func (c *current) onBoolExprLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.BoolExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.BoolExpr{
			IsTerminal: false,
			BoolOp:     structs.BoolOpAnd,
			LeftBool:   cur,
			RightBool:  opAndClause[1].(*structs.BoolExpr),
		}
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel31(stack["first"], stack["rest"])
}

func (c *current) onBoolExprLevel22(first any) (any, error) {
	cur := &structs.BoolExpr{
		IsTerminal: false,
		BoolOp:     structs.BoolOpNot,
		LeftBool:   first.(*structs.BoolExpr),
		RightBool:  nil,
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel22(stack["first"])
}

func (c *current) onBoolExprLevel29(first any) (any, error) {
	return first, nil
}

func (p *parser) callonBoolExprLevel29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel29(stack["first"])
}

func (c *current) onBoolExprLevel12(first any) (any, error) {
	return first, nil
}

func (p *parser) callonBoolExprLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel12(stack["first"])
}

func (c *current) onBoolExprLevel18(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonBoolExprLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel18(stack["expr"])
}

func (c *current) onEvalComparisonExpr2(op, value any) (any, error) {
	opNameStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: BoolExpr: %v", err)
	}
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  value.(*structs.ValueExpr),
		RightValue: nil,
		ValueOp:    opNameStr,
	}

	if opNameStr == "searchmatch" {
		valExpr := value.(*structs.ValueExpr)
		if valExpr.StringExpr == nil {
			return nil, fmt.Errorf("Spl peg: Searchmatch should only have string values as argument")
		}

		fieldsList, err := SearchMatchGetFields(valExpr.StringExpr.RawString)
		if err != nil {
			return nil, err
		}

		valExpr.StringExpr.StringExprMode = structs.SEMFieldList
		valExpr.StringExpr.FieldList = fieldsList
		expr.LeftValue = valExpr
	}

	return expr, nil
}

func (p *parser) callonEvalComparisonExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalComparisonExpr2(stack["op"], stack["value"])
}

func (c *current) onEvalComparisonExpr17(opName, leftValue, rightValue any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: BoolExpr: %v", err)
	}
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  leftValue.(*structs.ValueExpr),
		RightValue: rightValue.(*structs.ValueExpr),
		ValueOp:    opNameStr,
	}
	return expr, nil
}

func (p *parser) callonEvalComparisonExpr17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalComparisonExpr17(stack["opName"], stack["leftValue"], stack["rightValue"])
}

func (c *current) onEvalComparisonExpr32(left, valueToJudge, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ValueExpr, 1+len(restSlice))
	slice[0] = valueToJudge.(*structs.ValueExpr)

	for i := range restSlice {
		valueAtom := restSlice[i].([]any)
		slice[i+1] = valueAtom[1].(*structs.ValueExpr)
	}

	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  left.(*structs.ValueExpr),
		ValueList:  slice,
		ValueOp:    "in",
	}
	return expr, nil
}

func (p *parser) callonEvalComparisonExpr32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalComparisonExpr32(stack["left"], stack["valueToJudge"], stack["rest"])
}

func (c *current) onEvalComparisonExpr47(valueToJudge, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ValueExpr, len(restSlice))

	for i := range restSlice {
		valueAtom := restSlice[i].([]any)
		slice[i] = valueAtom[1].(*structs.ValueExpr)
	}

	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  valueToJudge.(*structs.ValueExpr),
		ValueList:  slice,
		ValueOp:    "in",
	}
	return expr, nil
}

func (p *parser) callonEvalComparisonExpr47() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalComparisonExpr47(stack["valueToJudge"], stack["rest"])
}

func (c *current) onBoolComparisonExpr1(left, op, right any) (any, error) {
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  left.(*structs.ValueExpr),
		RightValue: right.(*structs.ValueExpr),
		ValueOp:    op.(string),
	}

	return expr, nil
}

func (p *parser) callonBoolComparisonExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolComparisonExpr1(stack["left"], stack["op"], stack["right"])
}

func (c *current) onValueExpr2(condition any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMConditionExpr,
		ConditionExpr: condition.(*structs.ConditionExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr2(stack["condition"])
}

func (c *current) onValueExpr5(condition any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMConditionExpr,
		ConditionExpr: condition.(*structs.ConditionExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr5(stack["condition"])
}

func (c *current) onValueExpr11(numeric any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMNumericExpr,
		NumericExpr:   numeric.(*structs.NumericExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr11(stack["numeric"])
}

func (c *current) onValueExpr14(str any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMStringExpr,
		StringExpr:    str.(*structs.StringExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr14(stack["str"])
}

func (c *current) onValueExpr17(str any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMStringExpr,
		StringExpr:    str.(*structs.StringExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr17(stack["str"])
}

func (c *current) onValueExpr23(boolean any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolean.(*structs.BoolExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr23(stack["boolean"])
}

func (c *current) onStringExpr2(text any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMTextExpr,
		TextExpr:       text.(*structs.TextExpr),
	}

	return expr, nil
}

func (p *parser) callonStringExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr2(stack["text"])
}

func (c *current) onStringExpr8(str any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMRawString,
		RawString:      removeQuotes(str),
	}

	return expr, nil
}

func (p *parser) callonStringExpr8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr8(stack["str"])
}

func (c *current) onStringExpr14(field any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMField,
		FieldName:      field.(string),
	}

	return expr, nil
}

func (p *parser) callonStringExpr14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr14(stack["field"])
}

func (c *current) onStringExpr26(concat any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMConcatExpr,
		ConcatExpr:     concat.(*structs.ConcatExpr),
	}

	return expr, nil
}

func (p *parser) callonStringExpr26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr26(stack["concat"])
}

func (c *current) onConcatExpr1(first, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ConcatAtom, 1+len(restSlice))
	slice[0] = first.(*structs.ConcatAtom)

	for i := range restSlice {
		concatAndAtom := restSlice[i].([]any)
		slice[i+1] = concatAndAtom[1].(*structs.ConcatAtom)
	}

	expr := &structs.ConcatExpr{
		Atoms: slice,
	}

	return expr, nil
}

func (p *parser) callonConcatExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatExpr1(stack["first"], stack["rest"])
}

func (c *current) onConcatAtom2(text any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField:  false,
		Value:    "",
		TextExpr: text.(*structs.TextExpr),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom2(stack["text"])
}

func (c *current) onConcatAtom5(str any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: false,
		Value:   removeQuotes(str),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom5(stack["str"])
}

func (c *current) onConcatAtom8(number any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: false,
		Value:   number.(string),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom8(stack["number"])
}

func (c *current) onConcatAtom11(field any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: true,
		Value:   field.(string),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom11(stack["field"])
}

func (c *current) onNumericExpr1(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExpr1(stack["expr"])
}

func (c *current) onNumericExprLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.NumericExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.NumericExpr{
			IsTerminal:      false,
			Op:              opAndClause[0].(string),
			Left:            cur,
			Right:           opAndClause[1].(*structs.NumericExpr),
			NumericExprMode: structs.NEMNumericExpr,
		}
	}

	return cur, nil
}

func (p *parser) callonNumericExprLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel31(stack["first"], stack["rest"])
}

func (c *current) onNumericExprLevel21(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.NumericExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.NumericExpr{
			IsTerminal:      false,
			Op:              opAndClause[0].(string),
			Left:            cur,
			Right:           opAndClause[1].(*structs.NumericExpr),
			NumericExprMode: structs.NEMNumericExpr,
		}
	}

	return cur, nil
}

func (p *parser) callonNumericExprLevel21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel21(stack["first"], stack["rest"])
}

func (c *current) onNumericParamExpr1(expr any) (any, error) {
	rightNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	return rightNumericExpr, nil
}

func (p *parser) callonNumericParamExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericParamExpr1(stack["expr"])
}

func (c *current) onNumericExprLevel12(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericExprLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel12(stack["expr"])
}

func (c *current) onNumericExprLevel18(numericEvalExpr any) (any, error) {
	return numericEvalExpr, nil
}

func (p *parser) callonNumericExprLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel18(stack["numericEvalExpr"])
}

func (c *current) onNumericExprLevel111(field any) (any, error) {
	expr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    true,
		Value:           field.(string),
		NumericExprMode: structs.NEMNumberField,
	}

	return expr, nil
}

func (p *parser) callonNumericExprLevel111() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel111(stack["field"])
}

func (c *current) onNumericExprLevel114(number any) (any, error) {
	expr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    false,
		Value:           number.(string),
		NumericExprMode: structs.NEMNumber,
	}

	return expr, nil
}

func (p *parser) callonNumericExprLevel114() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel114(stack["number"])
}

func (c *current) onNumericEvalExpr2(opName, expr any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)
	node, err := createNumericExpr(opNameStr, leftNumericExpr, nil, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr2(stack["opName"], stack["expr"])
}

func (c *current) onNumericEvalExpr31(roundExpr, expr, roundPrecision any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	var rightNumericExpr *structs.NumericExpr
	if roundPrecision != nil {
		rightNumericExpr, ok = roundPrecision.(*structs.NumericExpr)
		if !ok {
			return nil, fmt.Errorf("Failed to assert roundPrecision as *structs.NumericExpr")
		}
	}

	node, err := createNumericExpr("round", leftNumericExpr, rightNumericExpr, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr31(stack["roundExpr"], stack["expr"], stack["roundPrecision"])
}

func (c *current) onNumericEvalExpr42(opName any) (any, error) {
	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)
	return &structs.NumericExpr{
		IsTerminal: true,
		Op:         opNameStr,
	}, nil
}

func (p *parser) callonNumericEvalExpr42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr42(stack["opName"])
}

func (c *current) onNumericEvalExpr52(stringExpr, baseExpr any) (any, error) {
	stringExprConverted, ok := stringExpr.(*structs.StringExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert stringExpr as *structs.StringExpr")
	}

	var baseExprConverted *structs.NumericExpr
	if baseExpr != nil {
		baseSlice, ok := baseExpr.([]interface{})
		if ok && len(baseSlice) > 1 {
			if base, ok := baseSlice[1].(*structs.NumericExpr); ok {
				baseExprConverted = base
			} else {
				return nil, fmt.Errorf("Failed to assert base as *structs.NumericExpr")
			}
		}
	}

	node := &structs.NumericExpr{
		IsTerminal:      false,
		Op:              "tonumber",
		Left:            nil,
		Right:           baseExprConverted,
		Val:             stringExprConverted,
		NumericExprMode: structs.NEMNumericExpr,
	}
	return node, nil
}

func (p *parser) callonNumericEvalExpr52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr52(stack["stringExpr"], stack["baseExpr"])
}

func (c *current) onNumericEvalExpr64(lenExpr, expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericEvalExpr64() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr64(stack["lenExpr"], stack["expr"])
}

func (c *current) onNumericEvalExpr72(opName, expr, param any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)

	var rightNumericExpr *structs.NumericExpr
	if param == nil {
		return nil, fmt.Errorf("Function: %v 's param can not be nil", opNameStr)
	}
	rightNumericExpr, ok = param.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert param as *structs.NumericExpr")
	}

	node, err := createNumericExpr(opNameStr, leftNumericExpr, rightNumericExpr, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr72() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr72(stack["opName"], stack["expr"], stack["param"])
}

func (c *current) onNumericEvalExpr85(opName, expr, param any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)

	var rightNumericExpr *structs.NumericExpr
	if param != nil {
		rightNumericExpr, ok = param.(*structs.NumericExpr)
		if !ok {
			return nil, fmt.Errorf("Failed to assert param as *structs.NumericExpr")
		}
	}

	node, err := createNumericExpr(opNameStr, leftNumericExpr, rightNumericExpr, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr85() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr85(stack["opName"], stack["expr"], stack["param"])
}

func (c *current) onNumericEvalExpr96(opName, expr, specifier any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: NumericExpr: %v", err)
	}
	node, err := createNumericExpr(opNameStr, expr.(*structs.NumericExpr), nil, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}
	node.Val = specifier.(*structs.StringExpr)
	return node, nil
}

func (p *parser) callonNumericEvalExpr96() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr96(stack["opName"], stack["expr"], stack["specifier"])
}

func (c *current) onLenExpr2(str any) (any, error) {

	leftNumericExpr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    false,
		Value:           str.(string),
		NumericExprMode: structs.NEMLenString,
	}

	node, err := createNumericExpr("len", leftNumericExpr, nil, structs.NEMLenString)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonLenExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLenExpr2(stack["str"])
}

func (c *current) onLenExpr8(field any) (any, error) {

	leftNumericExpr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    true,
		Value:           field.(string),
		NumericExprMode: structs.NEMLenField,
	}

	node, err := createNumericExpr("len", leftNumericExpr, nil, structs.NEMLenField)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonLenExpr8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLenExpr8(stack["field"])
}

func (c *current) onHeadOptionNull1(boolVal any) (any, error) {
	optionArg := &HeadOptionArgs{
		argOption: "null",
		headExpr: &structs.HeadExpr{
			Null: boolVal.(bool),
		},
	}

	return optionArg, nil
}

func (p *parser) callonHeadOptionNull1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOptionNull1(stack["boolVal"])
}

func (c *current) onHeadOptionKeeplast1(boolVal any) (any, error) {
	optionArg := &HeadOptionArgs{
		argOption: "keeplast",
		headExpr: &structs.HeadExpr{
			Keeplast: boolVal.(bool),
		},
	}

	return optionArg, nil
}

func (p *parser) callonHeadOptionKeeplast1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOptionKeeplast1(stack["boolVal"])
}

func (c *current) onHeadOptionLimit1(intAsStr any) (any, error) {
	limit, err := strconv.ParseUint(intAsStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid limit (%v): %v", intAsStr.(string), err)
	}
	optionArg := &HeadOptionArgs{
		argOption: "limit",
		headExpr: &structs.HeadExpr{
			MaxRows: limit,
		},
	}

	return optionArg, nil
}

func (p *parser) callonHeadOptionLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOptionLimit1(stack["intAsStr"])
}

func (c *current) onHeadOptionExpr1(boolExpr any) (any, error) {
	optionArg := &HeadOptionArgs{
		argOption: "boolexpr",
		headExpr: &structs.HeadExpr{
			BoolExpr: boolExpr.(*structs.BoolExpr),
		},
	}

	return optionArg, nil
}

func (p *parser) callonHeadOptionExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOptionExpr1(stack["boolExpr"])
}

func (c *current) onHeadOption1(option any) (any, error) {
	return option, nil
}

func (p *parser) callonHeadOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOption1(stack["option"])
}

func (c *current) onHeadOptionList1(first, rest any) (any, error) {
	restSlice := rest.([]any)
	optionWasSpecified := make(map[string]bool)
	optionWasSpecified["null"] = false
	optionWasSpecified["keeplast"] = false
	optionWasSpecified["boolexpr"] = false
	optionWasSpecified["limit"] = false

	numOptions := 1 + len(restSlice)

	headExpr := &structs.HeadExpr{}

	for i := 0; i < numOptions; i++ {
		var headOptArg *HeadOptionArgs
		if i == 0 {
			headOptArg = first.(*HeadOptionArgs)
		} else {
			separator := restSlice[i-1].([]any)
			headOptArg = separator[1].(*HeadOptionArgs)
		}

		argOption := headOptArg.argOption
		val, exist := optionWasSpecified[argOption]
		if !exist {
			return nil, fmt.Errorf("Not a Valid HeadOption: %v", argOption)
		}
		if val {
			return nil, fmt.Errorf("Invalid Syntax, option: %v is already specified", argOption)
		}
		optionWasSpecified[argOption] = true

		switch argOption {
		case "null":
			headExpr.Null = headOptArg.headExpr.Null
		case "keeplast":
			headExpr.Keeplast = headOptArg.headExpr.Keeplast
		case "limit":
			headExpr.MaxRows = headOptArg.headExpr.MaxRows
		case "boolexpr":
			headExpr.BoolExpr = headOptArg.headExpr.BoolExpr
		default:
			return nil, fmt.Errorf("Not a Valid HeadOption: %v", argOption)
		}
	}

	isBoolExpr, _ := optionWasSpecified["boolexpr"]
	if !isBoolExpr {
		isNull, _ := optionWasSpecified["null"]
		if isNull {
			return nil, fmt.Errorf("Invalid Syntax, null option can only be present with condition boolean expression")
		}
		isKeeplast, _ := optionWasSpecified["keeplast"]
		if isKeeplast {
			return nil, fmt.Errorf("Invalid Syntax, keeplast option can only be present with condition boolean expression")
		}
	}

	return headExpr, nil
}

func (p *parser) callonHeadOptionList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOptionList1(stack["first"], stack["rest"])
}

func (c *current) onHeadBlock2(headExpr any) (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			HeadRequest: headExpr.(*structs.HeadExpr),
		},
	}

	return queryAgg, nil
}

func (p *parser) callonHeadBlock2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadBlock2(stack["headExpr"])
}

func (c *current) onHeadBlock8(intAsStr any) (any, error) {
	limit, err := strconv.ParseUint(intAsStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid limit (%v): %v", intAsStr.(string), err)
	}

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			HeadRequest: &structs.HeadExpr{
				MaxRows: limit,
			},
		},
	}

	return queryAgg, nil
}

func (p *parser) callonHeadBlock8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadBlock8(stack["intAsStr"])
}

func (c *current) onHeadBlock14() (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			HeadRequest: &structs.HeadExpr{
				MaxRows: uint64(10), // From https://docs.splunk.com/Documentation/Splunk/9.1.0/SearchReference/Head
			},
		},
	}

	return queryAgg, nil
}

func (p *parser) callonHeadBlock14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadBlock14()
}

func (c *current) onTailBlock2(intAsStr any) (any, error) {
	limit, err := strconv.ParseUint(intAsStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid limit (%v): %v", intAsStr.(string), err)
	}

	tExpr := &structs.TailExpr{
		TailRecords: make(map[string]map[string]interface{}, 0),
		TailRows:    limit,
	}

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			TailRequest: tExpr,
		},
	}

	return queryAgg, nil
}

func (p *parser) callonTailBlock2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailBlock2(stack["intAsStr"])
}

func (c *current) onTailBlock8() (any, error) {

	tExpr := &structs.TailExpr{
		TailRecords: make(map[string]map[string]interface{}, 0),
		TailRows:    uint64(10), // From https://docs.splunk.com/Documentation/SplunkCloud/9.1.2308/SearchReference/Tail
	}

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			TailRequest: tExpr,
		},
	}

	return queryAgg, nil
}

func (p *parser) callonTailBlock8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailBlock8()
}

func (c *current) onAggregationList1(first, rest any) (any, error) {
	// Convert `rest` to a slice. Each element of the slice will be a 2-element
	// slice where the first element is ", " and the second is an Aggregator.
	restSlice := rest.([]any)

	numAggs := 1 + len(restSlice)
	aggsSlice := make([]*aggregator, numAggs)
	aggsSlice[0] = first.(*aggregator)

	for i := 1; i < numAggs; i++ {
		separatorAndAgg := restSlice[i-1].([]any)
		aggsSlice[i] = separatorAndAgg[1].(*aggregator)
	}

	return aggsSlice, nil
}

func (p *parser) callonAggregationList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregationList1(stack["first"], stack["rest"])
}

func (c *current) onAggregator1(aggFunc, asField any) (any, error) {
	agg := &aggregator{}
	agg.measureAgg = aggFunc.(*structs.MeasureAggregator)

	if asField != nil {
		agg.renameOutputField = true
		agg.outputFieldNewName = asField.(string)
	}

	return agg, nil
}

func (p *parser) callonAggregator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregator1(stack["aggFunc"], stack["asField"])
}

func (c *current) onAggFunction1(agg any) (any, error) {
	return agg, nil
}

func (p *parser) callonAggFunction1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggFunction1(stack["agg"])
}

func (c *current) onAsField1(field any) (any, error) {
	fieldStr := field.(string)

	if strings.Contains(fieldStr, "*") {
		return nil, errors.New("The field specified in `AS` cannot contain wildcards")
	}

	if fieldStr[0] == '"' && fieldStr[len(fieldStr)-1] == '"' {
		fieldStr = fieldStr[1 : len(fieldStr)-1]
	}

	return fieldStr, nil
}

func (p *parser) callonAsField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsField1(stack["field"])
}

func (c *current) onAggCount2(boolExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Count,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggCount2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggCount2(stack["boolExpr"])
}

func (c *current) onAggCount12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Count,
	}

	return agg, nil
}

func (p *parser) callonAggCount12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggCount12(stack["field"])
}

func (c *current) onAggCount21() (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  "*",
		MeasureFunc: utils.Count,
	}

	return agg, nil
}

func (p *parser) callonAggCount21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggCount21()
}

func (c *current) onAggDistinctCount2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Cardinality,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggDistinctCount2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggDistinctCount2(stack["valueExpr"])
}

func (c *current) onAggDistinctCount12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Cardinality,
	}

	return agg, nil
}

func (p *parser) callonAggDistinctCount12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggDistinctCount12(stack["field"])
}

func (c *current) onAggAvg2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Avg,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggAvg2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAvg2(stack["boolComparisonExpr"])
}

func (c *current) onAggAvg12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Avg,
	}

	return agg, nil
}

func (p *parser) callonAggAvg12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAvg12(stack["field"])
}

func (c *current) onAggMin2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Min,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggMin2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMin2(stack["boolComparisonExpr"])
}

func (c *current) onAggMin12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Min,
	}

	return agg, nil
}

func (p *parser) callonAggMin12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMin12(stack["field"])
}

func (c *current) onAggMax2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Max,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggMax2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMax2(stack["boolComparisonExpr"])
}

func (c *current) onAggMax12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Max,
	}

	return agg, nil
}

func (p *parser) callonAggMax12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMax12(stack["field"])
}

func (c *current) onAggRange2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Range,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggRange2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRange2(stack["boolComparisonExpr"])
}

func (c *current) onAggRange12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Range,
	}

	return agg, nil
}

func (p *parser) callonAggRange12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRange12(stack["field"])
}

func (c *current) onAggSum2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Sum,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggSum2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSum2(stack["boolComparisonExpr"])
}

func (c *current) onAggSum12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Sum,
	}

	return agg, nil
}

func (p *parser) callonAggSum12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSum12(stack["field"])
}

func (c *current) onAggEstdc2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Estdc,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggEstdc2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEstdc2(stack["boolComparisonExpr"])
}

func (c *current) onAggEstdc12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Estdc,
	}

	return agg, nil
}

func (p *parser) callonAggEstdc12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEstdc12(stack["field"])
}

func (c *current) onAggEstdcError2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.EstdcError,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggEstdcError2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEstdcError2(stack["boolComparisonExpr"])
}

func (c *current) onAggEstdcError12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.EstdcError,
	}

	return agg, nil
}

func (p *parser) callonAggEstdcError12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEstdcError12(stack["field"])
}

func (c *current) onAggExactPerc2(numStr, boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.ExactPerc,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
		Param:           numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggExactPerc2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggExactPerc2(stack["numStr"], stack["boolComparisonExpr"])
}

func (c *current) onAggExactPerc16(numStr, field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.ExactPerc,
		Param:       numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggExactPerc16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggExactPerc16(stack["numStr"], stack["field"])
}

func (c *current) onAggPerc2(numStr, boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Perc,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
		Param:           numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggPerc2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggPerc2(stack["numStr"], stack["boolComparisonExpr"])
}

func (c *current) onAggPerc16(numStr, field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Perc,
		Param:       numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggPerc16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggPerc16(stack["numStr"], stack["field"])
}

func (c *current) onAggUpperPerc2(numStr, boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.UpperPerc,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
		Param:           numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggUpperPerc2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggUpperPerc2(stack["numStr"], stack["boolComparisonExpr"])
}

func (c *current) onAggUpperPerc16(numStr, field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.UpperPerc,
		Param:       numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggUpperPerc16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggUpperPerc16(stack["numStr"], stack["field"])
}

func (c *current) onAggMedian2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Median,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggMedian2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMedian2(stack["boolComparisonExpr"])
}

func (c *current) onAggMedian12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Median,
	}

	return agg, nil
}

func (p *parser) callonAggMedian12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMedian12(stack["field"])
}

func (c *current) onAggMode2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Mode,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggMode2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMode2(stack["boolComparisonExpr"])
}

func (c *current) onAggMode12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Mode,
	}

	return agg, nil
}

func (p *parser) callonAggMode12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMode12(stack["field"])
}

func (c *current) onAggStdev2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Stdev,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggStdev2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggStdev2(stack["boolComparisonExpr"])
}

func (c *current) onAggStdev12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Stdev,
	}

	return agg, nil
}

func (p *parser) callonAggStdev12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggStdev12(stack["field"])
}

func (c *current) onAggStdevp2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Stdevp,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggStdevp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggStdevp2(stack["boolComparisonExpr"])
}

func (c *current) onAggStdevp12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Stdevp,
	}

	return agg, nil
}

func (p *parser) callonAggStdevp12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggStdevp12(stack["field"])
}

func (c *current) onAggSumsq2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Sumsq,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggSumsq2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSumsq2(stack["boolComparisonExpr"])
}

func (c *current) onAggSumsq12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Sumsq,
	}

	return agg, nil
}

func (p *parser) callonAggSumsq12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSumsq12(stack["field"])
}

func (c *current) onAggVar2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Var,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggVar2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggVar2(stack["boolComparisonExpr"])
}

func (c *current) onAggVar12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Var,
	}

	return agg, nil
}

func (p *parser) callonAggVar12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggVar12(stack["field"])
}

func (c *current) onAggVarp2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Varp,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggVarp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggVarp2(stack["boolComparisonExpr"])
}

func (c *current) onAggVarp12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Varp,
	}

	return agg, nil
}

func (p *parser) callonAggVarp12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggVarp12(stack["field"])
}

func (c *current) onAggFirst2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.First,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggFirst2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggFirst2(stack["boolComparisonExpr"])
}

func (c *current) onAggFirst12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.First,
	}

	return agg, nil
}

func (p *parser) callonAggFirst12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggFirst12(stack["field"])
}

func (c *current) onAggLast2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Last,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggLast2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLast2(stack["boolComparisonExpr"])
}

func (c *current) onAggLast12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Last,
	}

	return agg, nil
}

func (p *parser) callonAggLast12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLast12(stack["field"])
}

func (c *current) onAggList2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.List,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggList2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggList2(stack["valueExpr"])
}

func (c *current) onAggList10(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.List,
	}

	return agg, nil
}

func (p *parser) callonAggList10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggList10(stack["field"])
}

func (c *current) onAggEarliest2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Earliest,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggEarliest2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEarliest2(stack["boolComparisonExpr"])
}

func (c *current) onAggEarliest12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Earliest,
	}

	return agg, nil
}

func (p *parser) callonAggEarliest12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEarliest12(stack["field"])
}

func (c *current) onAggEarliestTime2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.EarliestTime,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggEarliestTime2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEarliestTime2(stack["boolComparisonExpr"])
}

func (c *current) onAggEarliestTime12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.EarliestTime,
	}

	return agg, nil
}

func (p *parser) callonAggEarliestTime12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEarliestTime12(stack["field"])
}

func (c *current) onAggLatest2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Latest,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggLatest2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLatest2(stack["boolComparisonExpr"])
}

func (c *current) onAggLatest12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Latest,
	}

	return agg, nil
}

func (p *parser) callonAggLatest12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLatest12(stack["field"])
}

func (c *current) onAggLatestTime2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.LatestTime,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggLatestTime2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLatestTime2(stack["boolComparisonExpr"])
}

func (c *current) onAggLatestTime12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.LatestTime,
	}

	return agg, nil
}

func (p *parser) callonAggLatestTime12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLatestTime12(stack["field"])
}

func (c *current) onAggRate2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.StatsRate,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggRate2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRate2(stack["boolComparisonExpr"])
}

func (c *current) onAggRate12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.StatsRate,
	}

	return agg, nil
}

func (p *parser) callonAggRate12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRate12(stack["field"])
}

func (c *current) onAggValues2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Values,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggValues2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggValues2(stack["valueExpr"])
}

func (c *current) onAggValues10(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Values,
	}

	return agg, nil
}

func (p *parser) callonAggValues10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggValues10(stack["field"])
}

func (c *current) onFieldWithNumberValue1(keyValuePair any) (any, error) {
	return keyValuePair, nil
}

func (p *parser) callonFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithNumberValue1(stack["keyValuePair"])
}

func (c *current) onNamedFieldWithNumberValue1(key, op, value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     op.(string),
			Field:  key.(string),
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonNamedFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedFieldWithNumberValue1(stack["key"], stack["op"], stack["value"])
}

func (c *current) onUnnamedFieldWithNumberValue1(value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     "=",
			Field:  "*",
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonUnnamedFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnnamedFieldWithNumberValue1(stack["value"])
}

func (c *current) onFieldWithBooleanValue1(key, op, value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     op.(string),
			Field:  key.(string),
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonFieldWithBooleanValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithBooleanValue1(stack["key"], stack["op"], stack["value"])
}

func (c *current) onFieldWithStringValue1(keyValuePair any) (any, error) {
	return keyValuePair, nil
}

func (p *parser) callonFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithStringValue1(stack["keyValuePair"])
}

func (c *current) onNamedFieldWithStringValue1(key, op, value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     op.(string),
			Field:  key.(string),
			Values: value,
		},
	}
	return node, nil
}

func (p *parser) callonNamedFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedFieldWithStringValue1(stack["key"], stack["op"], stack["value"])
}

func (c *current) onUnnamedFieldWithStringValue1(value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     "=",
			Field:  "*",
			Values: value,
		},
	}
	return node, nil
}

func (p *parser) callonUnnamedFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnnamedFieldWithStringValue1(stack["value"])
}

func (c *current) onFieldNameList1(first, rest any) (any, error) {
	// Convert `rest` to a slice. Each element of the slice will be a 2-element
	// slice where the first element is ", " and the second is a FieldName.
	restSlice := rest.([]any)

	numFieldNames := 1 + len(restSlice)
	fields := make([]string, numFieldNames)
	fields[0] = first.(string)

	for i := 1; i < numFieldNames; i++ {
		separatorAndField := restSlice[i-1].([]any)
		fields[i] = separatorAndField[1].(string)
	}

	return fields, nil
}

func (p *parser) callonFieldNameList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldNameList1(stack["first"], stack["rest"])
}

func (c *current) onEarliestAndLatest1(earliestTime, latestTime any) (any, error) {
	var startEpoch int64 = 0
	var endEpoch int64 = 0
	var err error

	earliestTimeModifier := earliestTime.(ast.TimeModifier)
	latestTimeModifier := latestTime.(ast.TimeModifier)

	currTime := time.Now()
	startEpoch, err = CalculateRelativeTime(earliestTimeModifier, currTime)
	if err != nil {
		return nil, err
	}

	endEpoch, err = CalculateRelativeTime(latestTimeModifier, currTime)
	if err != nil {
		return nil, err
	}

	// Create AST node
	node := &ast.Node{
		NodeType: ast.TimeModifierNode,
		TimeModifiers: &ast.TimeModifiers{
			StartEpoch: uint64(startEpoch),
			EndEpoch:   uint64(endEpoch),
		},
	}

	return node, nil
}

func (p *parser) callonEarliestAndLatest1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEarliestAndLatest1(stack["earliestTime"], stack["latestTime"])
}

func (c *current) onEarliestOnly1(earliestTime any) (any, error) {
	var startEpoch int64 = 0
	var err error

	earliestTimeModifier := earliestTime.(ast.TimeModifier)

	startEpoch, err = CalculateRelativeTime(earliestTimeModifier, time.Now())
	if err != nil {
		return nil, err
	}

	// Create AST node
	node := &ast.Node{
		NodeType: ast.TimeModifierNode,
		TimeModifiers: &ast.TimeModifiers{
			StartEpoch: uint64(startEpoch),
			EndEpoch:   uint64(time.Now().UnixMilli()),
		},
	}

	return node, nil
}

func (p *parser) callonEarliestOnly1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEarliestOnly1(stack["earliestTime"])
}

func (c *current) onRelIntegerAsString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonRelIntegerAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelIntegerAsString1()
}

func (c *current) onWeekSnap1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonWeekSnap1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeekSnap1()
}

func (c *current) onRelTimeUnit1(timeUnit any) (any, error) {
	if utils.IsSubseconds(timeUnit.(utils.TimeUnit)) {
		return nil, fmt.Errorf("Relative Time Format does not support subseconds")
	}
	return strconv.Itoa(int(timeUnit.(utils.TimeUnit))), nil
}

func (p *parser) callonRelTimeUnit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelTimeUnit1(stack["timeUnit"])
}

func (c *current) onSnap1(snap any) (any, error) {
	return snap.(string), nil
}

func (p *parser) callonSnap1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSnap1(stack["snap"])
}

func (c *current) onOffset1(off, tuOff any) (any, error) {
	var offsetNum int64 = 0
	var err error
	offStr := off.(string)
	if offStr == "+" {
		offsetNum = 1
	} else if offStr == "-" {
		offsetNum = -1
	} else {
		offsetNum, err = strconv.ParseInt(offStr, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("Invalid Relative Time Format time unit value: (%v): , err: %v", offStr, err)
		}
	}

	timeUnit, err := strconv.Atoi(tuOff.(string))
	if err != nil {
		return nil, fmt.Errorf("Invalid Time Unit value: (%v), err: %v", tuOff.(string), err)
	}

	relTimeOffset := ast.RelativeTimeOffset{
		Offset:   offsetNum,
		TimeUnit: utils.TimeUnit(timeUnit),
	}

	return relTimeOffset, nil
}

func (p *parser) callonOffset1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOffset1(stack["off"], stack["tuOff"])
}

func (c *current) onRelativeTimestamp1(defaultTime, offset, snapParam any) (any, error) {

	if defaultTime != nil {
		if offset != nil || snapParam != nil {
			return nil, fmt.Errorf("Invalid Relative timestamp cannot combine default with offset or snap")
		}
		defTime, err := transferUint8ToString(defaultTime)
		if err != nil {
			return nil, fmt.Errorf("Spl peg: Relative timestamp for default time, err: %v", err)
		}

		timeModifier := ast.TimeModifier{
			AbsoluteTime: defTime,
		}

		return timeModifier, nil
	}

	if offset == nil && snapParam == nil {
		return nil, fmt.Errorf("Invalid Relative Time Format: Need either offset or snap param")
	}

	relTimeOffset := ast.RelativeTimeOffset{}
	snap := ""
	if snapParam != nil {
		snap = snapParam.(string)
	}

	if offset != nil {
		relTimeOffset.Offset = offset.(ast.RelativeTimeOffset).Offset
		relTimeOffset.TimeUnit = offset.(ast.RelativeTimeOffset).TimeUnit
	}

	timeModifier := ast.TimeModifier{
		RelativeTime: ast.RelativeTimeModifier{
			RelativeTimeOffset: relTimeOffset,
			Snap:               snap,
		},
	}

	return timeModifier, nil
}

func (p *parser) callonRelativeTimestamp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeTimestamp1(stack["defaultTime"], stack["offset"], stack["snapParam"])
}

func (c *current) onAbsoluteTimestamp1() (any, error) {
	relTimeModifier := ast.TimeModifier{
		AbsoluteTime: string(c.text),
	}
	return relTimeModifier, nil
}

func (p *parser) callonAbsoluteTimestamp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAbsoluteTimestamp1()
}

func (c *current) onFieldName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFieldName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldName1()
}

func (c *current) onFieldNameStartWith_1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFieldNameStartWith_1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldNameStartWith_1()
}

func (c *current) onString1(str any) (any, error) {
	return str, nil
}

func (p *parser) callonString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onString1(stack["str"])
}

func (c *current) onQuotedString1() (any, error) {
	// The returned string has quotes as the first and last character.
	return string(c.text), nil
}

func (p *parser) callonQuotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString1()
}

func (c *current) onUnquotedString1() (any, error) {
	// Return the string wrapped in quotes.
	str := "\"" + string(c.text) + "\""
	return str, nil
}

func (p *parser) callonUnquotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedString1()
}

func (c *current) onUnquotedStringWithTemplateWildCard1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUnquotedStringWithTemplateWildCard1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedStringWithTemplateWildCard1()
}

func (c *current) onBoolean1() (any, error) {
	boolValue, _ := strconv.ParseBool(string(c.text))
	return boolValue, nil
}

func (p *parser) callonBoolean1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolean1()
}

func (c *current) onRenamePattern1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonRenamePattern1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenamePattern1()
}

func (c *current) onNumber1(number any) (any, error) {
	return json.Number(number.(string)), nil
}

func (p *parser) callonNumber1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1(stack["number"])
}

func (c *current) onNumberAsString1(number any) (any, error) {
	return number, nil
}

func (p *parser) callonNumberAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumberAsString1(stack["number"])
}

func (c *current) onFloatAsString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatAsString1()
}

func (c *current) onIntegerAsString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIntegerAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerAsString1()
}

func (c *current) onPositiveIntegerAsString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonPositiveIntegerAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositiveIntegerAsString1()
}

func (c *current) onEqualityOperator1(op any) (any, error) {
	opStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: EqualityOperator: %v", err)
	}
	return opStr, nil
}

func (p *parser) callonEqualityOperator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator1(stack["op"])
}

func (c *current) onInequalityOperator1(op any) (any, error) {
	opStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: InequalityOperator: %v", err)
	}
	return opStr, nil
}

func (p *parser) callonInequalityOperator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInequalityOperator1(stack["op"])
}

func (c *current) onEqualityOrInequality2(op any) (any, error) {
	return op, nil
}

func (p *parser) callonEqualityOrInequality2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOrInequality2(stack["op"])
}

func (c *current) onEqualityOrInequality5(op any) (any, error) {
	return op, nil
}

func (p *parser) callonEqualityOrInequality5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOrInequality5(stack["op"])
}

func (c *current) onOpPlus1() (any, error) {
	return "+", nil
}

func (p *parser) callonOpPlus1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpPlus1()
}

func (c *current) onOpMinus1() (any, error) {
	return "-", nil
}

func (p *parser) callonOpMinus1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpMinus1()
}

func (c *current) onOpMul1() (any, error) {
	return "*", nil
}

func (p *parser) callonOpMul1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpMul1()
}

func (c *current) onOpDiv1() (any, error) {
	return "/", nil
}

func (p *parser) callonOpDiv1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpDiv1()
}

func (c *current) onSecond1() (any, error) {
	return utils.TMSecond, nil
}

func (p *parser) callonSecond1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSecond1()
}

func (c *current) onMinute1() (any, error) {
	return utils.TMMinute, nil
}

func (p *parser) callonMinute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinute1()
}

func (c *current) onHour1() (any, error) {
	return utils.TMHour, nil
}

func (p *parser) callonHour1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHour1()
}

func (c *current) onDay1() (any, error) {
	return utils.TMDay, nil
}

func (p *parser) callonDay1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDay1()
}

func (c *current) onWeek1() (any, error) {
	return utils.TMWeek, nil
}

func (p *parser) callonWeek1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeek1()
}

func (c *current) onMonth1() (any, error) {
	return utils.TMMonth, nil
}

func (p *parser) callonMonth1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMonth1()
}

func (c *current) onQuarter1() (any, error) {
	return utils.TMQuarter, nil
}

func (p *parser) callonQuarter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuarter1()
}

func (c *current) onYear1() (any, error) {
	return utils.TMYear, nil
}

func (p *parser) callonYear1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYear1()
}

func (c *current) onSubseconds1() (any, error) {
	timeUnit, err := utils.ConvertSubseconds(string(c.text))
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Subseconds: %v", err)
	}
	return timeUnit, nil
}

func (p *parser) callonSubseconds1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubseconds1()
}

func (c *current) onTransactionBlock1(txnOptions any) (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType:      structs.TransactionType,
		TransactionArguments: txnOptions.(*structs.TransactionArguments),
	}
	return queryAgg, nil
}

func (p *parser) callonTransactionBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionBlock1(stack["txnOptions"])
}

func (c *current) onTransactionOptions1(txnOptions any) (any, error) {

	transactionRequest := &structs.TransactionArguments{}

	if txnOptions != nil {
		txnArgs := txnOptions.(*TxnArgs).arguments
		transactionRequest.Fields = txnArgs.Fields
		transactionRequest.StartsWith = txnArgs.StartsWith
		transactionRequest.EndsWith = txnArgs.EndsWith
	}

	return transactionRequest, nil
}

func (p *parser) callonTransactionOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionOptions1(stack["txnOptions"])
}

func (c *current) onTransactionDefinitionOptionsList1(first, rest any) (any, error) {

	restSlice := rest.([]any)
	txnArgs := &TxnArgs{
		argOption: "txn-definition",
		arguments: &structs.TransactionArguments{},
	}

	numArgs := 1 + len(restSlice)

	for i := 0; i < numArgs; i++ {
		var txnArg *TxnArgs
		if i == 0 {
			txnArg = first.(*TxnArgs)
		} else {
			separatorAndArg := restSlice[i-1].([]any)
			txnArg = separatorAndArg[1].(*TxnArgs)
		}
		argOption := txnArg.argOption

		switch argOption {
		case "fields":
			txnArgs.arguments.Fields = txnArg.arguments.Fields
		case "startswith":
			txnArgs.arguments.StartsWith = txnArg.arguments.StartsWith
		case "endswith":
			txnArgs.arguments.EndsWith = txnArg.arguments.EndsWith
		default:
			return nil, fmt.Errorf("Not a Valid Transaction Argument option")
		}
	}

	return txnArgs, nil
}

func (p *parser) callonTransactionDefinitionOptionsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionDefinitionOptionsList1(stack["first"], stack["rest"])
}

func (c *current) onTransactionDefinitionOption1(option any) (any, error) {
	return option, nil
}

func (p *parser) callonTransactionDefinitionOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionDefinitionOption1(stack["option"])
}

func (c *current) onSpaceSeparatedFieldNameList1(first, rest any) (any, error) {
	var fields []string
	fields = append(fields, first.(string))
	for _, r := range rest.([]any) {
		// Extracting the field name from the tuple (SPACE, FieldName)
		fields = append(fields, r.([]any)[1].(string))
	}

	txnArg := &TxnArgs{
		argOption: "fields",
		arguments: &structs.TransactionArguments{
			Fields: fields,
		},
	}

	return txnArg, nil
}

func (p *parser) callonSpaceSeparatedFieldNameList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpaceSeparatedFieldNameList1(stack["first"], stack["rest"])
}

func (c *current) onStartsWithOption1(strExpr any) (any, error) {
	txnArg := &TxnArgs{
		argOption: "startswith",
		arguments: &structs.TransactionArguments{
			StartsWith: strExpr.(*structs.FilterStringExpr),
		},
	}
	return txnArg, nil
}

func (p *parser) callonStartsWithOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStartsWithOption1(stack["strExpr"])
}

func (c *current) onEndsWithOption1(strExpr any) (any, error) {
	txnArg := &TxnArgs{
		argOption: "endswith",
		arguments: &structs.TransactionArguments{
			EndsWith: strExpr.(*structs.FilterStringExpr),
		},
	}
	return txnArg, nil
}

func (p *parser) callonEndsWithOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEndsWithOption1(stack["strExpr"])
}

func (c *current) onTransactionFilterString1(strExpr any) (any, error) {
	return strExpr, nil
}

func (p *parser) callonTransactionFilterString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionFilterString1(stack["strExpr"])
}

func (c *current) onTransactionQuotedString1(str any) (any, error) {
	return str, nil
}

func (p *parser) callonTransactionQuotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionQuotedString1(stack["str"])
}

func (c *current) onTransactionQuotedStringSearchExpr1(searchClause any) (any, error) {
	filterStrExpr := &structs.FilterStringExpr{
		SearchNode: searchClause.(*ast.Node),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionQuotedStringSearchExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionQuotedStringSearchExpr1(stack["searchClause"])
}

func (c *current) onQuotedStringNoOp1() (any, error) {
	// The returned string has quotes as the first and last character.
	return string(c.text), nil
}

func (p *parser) callonQuotedStringNoOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedStringNoOp1()
}

func (c *current) onTransactionQuotedStringValue1(str any) (any, error) {
	filterStrExpr := &structs.FilterStringExpr{
		StringValue: removeQuotes(str.(string)),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionQuotedStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionQuotedStringValue1(stack["str"])
}

func (c *current) onTransactionSearch1(expr any) (any, error) {

	filterStrExpr := &structs.FilterStringExpr{
		SearchNode: expr.(*ast.Node),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionSearch1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionSearch1(stack["expr"])
}

func (c *current) onTransactionEval1(condition any) (any, error) {
	filterStrExpr := &structs.FilterStringExpr{
		EvalBoolExpr: condition.(*structs.BoolExpr),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionEval1(stack["condition"])
}

func (c *current) onMultiValueBlock1(mvQueryAggNode any) (any, error) {
	return mvQueryAggNode, nil
}

func (p *parser) callonMultiValueBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiValueBlock1(stack["mvQueryAggNode"])
}

func (c *current) onMakeMVBlock1(mvColOptionExpr, field any) (any, error) {
	var mvColExpr *structs.MultiValueColLetRequest

	if mvColOptionExpr != nil {
		mvColExpr = mvColOptionExpr.(*structs.MultiValueColLetRequest)
	} else {
		mvColExpr = &structs.MultiValueColLetRequest{}
	}

	mvColExpr.Command = "makemv"
	mvColExpr.ColName = field.(string)

	if mvColExpr.DelimiterString == "" {
		mvColExpr.DelimiterString = " " // default single space
	}

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: &structs.LetColumnsRequest{
				MultiValueColRequest: mvColExpr,
			},
		},
	}

	return queryAgg, nil
}

func (p *parser) callonMakeMVBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMakeMVBlock1(stack["mvColOptionExpr"], stack["field"])
}

func (c *current) onMVBlockOptionsList1(first, rest any) (any, error) {
	restSlice := rest.([]any)

	numOptions := 1 + len(restSlice)

	mvColExpr := &structs.MultiValueColLetRequest{}

	for i := 0; i < numOptions; i++ {
		var currMvColExpr *MultiValueColOptionArgs
		if i == 0 {
			currMvColExpr = first.(*MultiValueColOptionArgs)
		} else {
			separator := restSlice[i-1].([]any)
			currMvColExpr = separator[1].(*MultiValueColOptionArgs)
		}

		argOption := currMvColExpr.argOption

		switch argOption {
		case "delimiter":
			mvColExpr.DelimiterString = currMvColExpr.mvColExpr.DelimiterString
			mvColExpr.IsRegex = currMvColExpr.mvColExpr.IsRegex
		case "allowempty":
			mvColExpr.AllowEmpty = currMvColExpr.mvColExpr.AllowEmpty
		case "setsv":
			mvColExpr.Setsv = currMvColExpr.mvColExpr.Setsv
		default:
			return nil, fmt.Errorf("Not a Valid MVBlockOption: %v", argOption)
		}
	}

	return mvColExpr, nil
}

func (p *parser) callonMVBlockOptionsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMVBlockOptionsList1(stack["first"], stack["rest"])
}

func (c *current) onMVBlockOption1(option any) (any, error) {
	return option, nil
}

func (p *parser) callonMVBlockOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMVBlockOption1(stack["option"])
}

func (c *current) onDelimOption1(delimExpr any) (any, error) {
	return delimExpr, nil
}

func (p *parser) callonDelimOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimOption1(stack["delimExpr"])
}

func (c *current) onStringDelimiter1(str any) (any, error) {
	mvColOptionArgs := &MultiValueColOptionArgs{
		argOption: "delimiter",
		mvColExpr: &structs.MultiValueColLetRequest{
			DelimiterString: removeQuotes(str),
		},
	}

	return mvColOptionArgs, nil
}

func (p *parser) callonStringDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringDelimiter1(stack["str"])
}

func (c *current) onRegexDelimiter1(str any) (any, error) {
	pattern := removeQuotes(str)
	_, err := regexp.Compile(pattern)
	if err != nil {
		return nil, fmt.Errorf("Error parsing tokenizer regular expression: %v. Error: %v", pattern, err)
	}

	mvColOptionArgs := &MultiValueColOptionArgs{
		argOption: "delimiter",
		mvColExpr: &structs.MultiValueColLetRequest{
			DelimiterString: pattern,
			IsRegex:         true,
		},
	}

	return mvColOptionArgs, nil
}

func (p *parser) callonRegexDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexDelimiter1(stack["str"])
}

func (c *current) onAllowEmptyOption1(boolVal any) (any, error) {

	mvColOptionArgs := &MultiValueColOptionArgs{
		argOption: "allowempty",
		mvColExpr: &structs.MultiValueColLetRequest{
			AllowEmpty: boolVal.(bool),
		},
	}

	return mvColOptionArgs, nil
}

func (p *parser) callonAllowEmptyOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAllowEmptyOption1(stack["boolVal"])
}

func (c *current) onSetSvOption1(boolVal any) (any, error) {
	mvColOptionArgs := &MultiValueColOptionArgs{
		argOption: "setsv",
		mvColExpr: &structs.MultiValueColLetRequest{
			Setsv: boolVal.(bool),
		},
	}

	return mvColOptionArgs, nil
}

func (p *parser) callonSetSvOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSetSvOption1(stack["boolVal"])
}

func (c *current) onSPathBlock1(spathExpr any) (any, error) {
	if spathExpr == nil {
		return createSPathExpr("", "", "")
	}
	return spathExpr, nil
}

func (p *parser) callonSPathBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSPathBlock1(stack["spathExpr"])
}

func (c *current) onSPathArgumentsList1(first, rest any) (any, error) {

	restSlice := rest.([]any)

	inputField, pathField, outputField := "", "", ""

	numArgs := 1 + len(restSlice)

	for i := 0; i < numArgs; i++ {
		var arg string
		if i == 0 {
			arg = first.(string)
		} else {
			separator := restSlice[i-1].([]any)
			arg = separator[1].(string)
		}

		switch {
		case strings.HasPrefix(arg, "input="):
			inputField = strings.TrimPrefix(arg, "input=")
		case strings.HasPrefix(arg, "output="):
			outputField = strings.TrimPrefix(arg, "output=")
		case strings.HasPrefix(arg, "path="):
			pathField = strings.TrimPrefix(arg, "path=")
		default:
			return nil, fmt.Errorf("SPathArguments: Invalid Spath Argument: %v", arg)
		}
	}

	return createSPathExpr(inputField, pathField, outputField)
}

func (p *parser) callonSPathArgumentsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSPathArgumentsList1(stack["first"], stack["rest"])
}

func (c *current) onSPathArgument1(arg any) (any, error) {
	return arg, nil
}

func (p *parser) callonSPathArgument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSPathArgument1(stack["arg"])
}

func (c *current) onInputField1(field any) (any, error) {
	return "input=" + field.(string), nil
}

func (p *parser) callonInputField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInputField1(stack["field"])
}

func (c *current) onOutputField1(field any) (any, error) {
	return "output=" + field.(string), nil
}

func (p *parser) callonOutputField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOutputField1(stack["field"])
}

func (c *current) onPathField1() (any, error) {
	pathField := string(c.text)
	if strings.HasPrefix(pathField, "path") {
		pathField = strings.TrimSpace(strings.TrimPrefix(pathField, "path="))
		pathField = strings.TrimSpace(strings.TrimPrefix(pathField, "path ="))
		if pathField != "" && pathField[0] == '"' {
			pathField = removeQuotes(pathField)
		}
	}
	return "path=" + pathField, nil
}

func (p *parser) callonPathField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPathField1()
}

func (c *current) onFormatBlock1(formatArgExpr any) (any, error) {
	var formatResultExpr *structs.FormatResultsRequest

	if formatArgExpr != nil {
		formatResultExpr = formatArgExpr.(*structs.FormatResultsRequest)
	} else {
		formatResultExpr = getDefaultFormatResultsExpr()
	}

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: &structs.LetColumnsRequest{
				NewColName:    "search",
				FormatResults: formatResultExpr,
			},
		},
	}

	return queryAgg, nil
}

func (p *parser) callonFormatBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatBlock1(stack["formatArgExpr"])
}

func (c *current) onFormatArgumentsList1(first, rest any) (any, error) {
	restSlice := rest.([]any)

	numOptions := 1 + len(restSlice)

	formatResultExpr := getDefaultFormatResultsExpr()

	for i := 0; i < numOptions; i++ {
		var currFormatExpr *FormatResultsRequestArguments

		if i == 0 {
			currFormatExpr = first.(*FormatResultsRequestArguments)
		} else {
			separator := restSlice[i-1].([]any)
			currFormatExpr = separator[1].(*FormatResultsRequestArguments)
		}

		switch currFormatExpr.argOption {
		case "mvsep":
			formatResultExpr.MVSeparator = currFormatExpr.formatResultExpr.MVSeparator
		case "maxresults":
			formatResultExpr.MaxResults = currFormatExpr.formatResultExpr.MaxResults
		case "emptystr":
			formatResultExpr.EmptyString = currFormatExpr.formatResultExpr.EmptyString
		case "rowColOptions":
			formatResultExpr.RowColOptions = currFormatExpr.formatResultExpr.RowColOptions
		default:
			return nil, fmt.Errorf("not a valid Format Result Argument: %v", currFormatExpr.argOption)
		}
	}

	return formatResultExpr, nil
}

func (p *parser) callonFormatArgumentsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArgumentsList1(stack["first"], stack["rest"])
}

func (c *current) onFormatArgument1(argExpr any) (any, error) {
	return argExpr, nil
}

func (p *parser) callonFormatArgument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArgument1(stack["argExpr"])
}

func (c *current) onFormatSeparator1(str any) (any, error) {
	return &FormatResultsRequestArguments{
		argOption: "mvsep",
		formatResultExpr: &structs.FormatResultsRequest{
			MVSeparator: removeQuotes(str),
		},
	}, nil
}

func (p *parser) callonFormatSeparator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatSeparator1(stack["str"])
}

func (c *current) onFormatMaxResults1(numStr any) (any, error) {
	num, err := strconv.ParseUint(numStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid Max results value is set for format: (%v): Error=%v", numStr.(string), err)
	}
	return &FormatResultsRequestArguments{
		argOption: "maxresults",
		formatResultExpr: &structs.FormatResultsRequest{
			MaxResults: num,
		},
	}, nil
}

func (p *parser) callonFormatMaxResults1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatMaxResults1(stack["numStr"])
}

func (c *current) onFormatEmptyStr1(str any) (any, error) {
	return &FormatResultsRequestArguments{
		argOption: "emptystr",
		formatResultExpr: &structs.FormatResultsRequest{
			EmptyString: removeQuotes(str),
		},
	}, nil
}

func (p *parser) callonFormatEmptyStr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatEmptyStr1(stack["str"])
}

func (c *current) onFormatRowColOptions1(rowPrefix, colPrefix, colSeparator, colEnd, rowSeparator, rowEnd any) (any, error) {
	rowColOptions := &structs.RowColOptions{
		RowPrefix:       removeQuotes(rowPrefix),
		ColumnPrefix:    removeQuotes(colPrefix),
		ColumnSeparator: removeQuotes(colSeparator),
		ColumnEnd:       removeQuotes(colEnd),
		RowSeparator:    removeQuotes(rowSeparator),
		RowEnd:          removeQuotes(rowEnd),
	}

	return &FormatResultsRequestArguments{
		argOption: "rowColOptions",
		formatResultExpr: &structs.FormatResultsRequest{
			RowColOptions: rowColOptions,
		},
	}, nil
}

func (p *parser) callonFormatRowColOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatRowColOptions1(stack["rowPrefix"], stack["colPrefix"], stack["colSeparator"], stack["colEnd"], stack["rowSeparator"], stack["rowEnd"])
}

func (c *current) onEventCountBlock1(eventCountExpr any) (any, error) {
	if eventCountExpr == nil {
		return createEventCountExpr([]string{"*"}, true, false, true)
	}
	return eventCountExpr, nil
}

func (p *parser) callonEventCountBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEventCountBlock1(stack["eventCountExpr"])
}

func (c *current) onEventCountArgumentsList1(first, rest any) (any, error) {

	restSlice := rest.([]any)

	indices := []string{}
	list_vix, report_size, summarize := true, false, true

	numArgs := 0
	if first != nil {
		numArgs++
	}
	numArgs += len(restSlice)

	for i := 0; i < numArgs; i++ {
		var arg string
		if i == 0 && first != nil {
			arg = first.(string)
		} else {
			separator := restSlice[i-1].([]any)
			arg = separator[1].(string)
		}

		switch {
		case strings.HasPrefix(arg, "index="):
			indices = append(indices, strings.TrimPrefix(arg, "index="))
		case strings.HasPrefix(arg, "list_vix="):
			var err error
			list_vix, err = strconv.ParseBool(strings.TrimPrefix(arg, "list_vix="))
			if err != nil {
				return nil, fmt.Errorf("EventCountArguments: Invalid value for list_vix: %v", err)
			}
		case strings.HasPrefix(arg, "report_size="):
			var err error
			report_size, err = strconv.ParseBool(strings.TrimPrefix(arg, "report_size="))
			if err != nil {
				return nil, fmt.Errorf("EventCountArguments: Invalid value for report_size: %v", err)
			}
		case strings.HasPrefix(arg, "summarize="):
			var err error
			summarize, err = strconv.ParseBool(strings.TrimPrefix(arg, "summarize="))
			if err != nil {
				return nil, fmt.Errorf("EventCountArguments: Invalid value for summarize: %v", err)
			}
		default:
			return nil, fmt.Errorf("EventCountArguments: Invalid EventCount Argument: %v", arg)
		}
	}

	// If no indices were provided, use the default value "*"
	if len(indices) == 0 {
		indices = append(indices, "*")
	}

	return createEventCountExpr(indices, list_vix, report_size, summarize)
}

func (p *parser) callonEventCountArgumentsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEventCountArgumentsList1(stack["first"], stack["rest"])
}

func (c *current) onEventCountArgument1(arg any) (any, error) {
	return arg, nil
}

func (p *parser) callonEventCountArgument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEventCountArgument1(stack["arg"])
}

func (c *current) onIndexField1(index any) (any, error) {
	return "index=" + index.(string), nil
}

func (p *parser) callonIndexField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexField1(stack["index"])
}

func (c *current) onSummarizeField1(field any) (any, error) {
	return "summarize=" + strconv.FormatBool(field.(bool)), nil
}

func (p *parser) callonSummarizeField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSummarizeField1(stack["field"])
}

func (c *current) onReportSizeField1(field any) (any, error) {
	return "report_size=" + strconv.FormatBool(field.(bool)), nil
}

func (p *parser) callonReportSizeField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReportSizeField1(stack["field"])
}

func (c *current) onListVixField1(field any) (any, error) {
	return "list_vix=" + strconv.FormatBool(field.(bool)), nil
}

func (p *parser) callonListVixField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListVixField1(stack["field"])
}

func (c *current) onIndexName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexName1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize {
		val, ok = p.parseRuleMemoize(rule)
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
