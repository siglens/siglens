// Code generated by pigeon; DO NOT EDIT.

// Copyright (c) 2021-2024 SigScalr, Inc.
//
// This file is part of SigLens Observability Solution
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

package spl

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/siglens/siglens/pkg/ast"
	"github.com/siglens/siglens/pkg/segment/aggregations"
	"github.com/siglens/siglens/pkg/segment/query"
	"github.com/siglens/siglens/pkg/segment/structs"
	"github.com/siglens/siglens/pkg/segment/utils"
	log "github.com/sirupsen/logrus"
)

func getParseError(err error) error {
	switch ev := err.(type) {
	case errList:
		if pe, ok := ev[0].(*parserError); ok {
			return &ast.ParseError{
				Inner:    pe.Inner,
				Line:     pe.pos.line,
				Column:   pe.pos.col,
				Offset:   pe.pos.offset,
				Prefix:   pe.prefix,
				Expected: pe.expected,
			}
		}
	}
	return err
}

// Remove the first and last character of the string
func removeQuotes(s any) string {
	str := s.(string)
	if len(str) < 3 {
		return ""
	}

	return str[1 : len(str)-1]
}

// Check if it rename fields with similar names using a wildcard
func isRegexRename(originalPattern, newPattern string) (bool, error) {
	oldWildcards := strings.Count(originalPattern, "*")
	newWildcards := strings.Count(newPattern, "*")

	if oldWildcards == 0 && newWildcards == 0 {
		return false, nil
	} else if oldWildcards > 0 && oldWildcards == newWildcards {
		return true, nil
	} else {
		return false, errors.New("Patterns do not match")
	}
}

func deMorgansLaw(node *ast.Node) {
	switch node.NodeType {
	case ast.NodeTerminal:
		switch node.Comparison.Op {
		case "=":
			node.Comparison.Op = "!="
		case "!=":
			node.Comparison.Op = "="
		case ">":
			node.Comparison.Op = "<="
		case "<":
			node.Comparison.Op = ">="
		case ">=":
			node.Comparison.Op = "<"
		case "<=":
			node.Comparison.Op = ">"
		default:
			log.Errorf("deMorgansLaw: unexpected node comparison op: %v", node.Comparison.Op)
		}
	case ast.NodeAnd:
		node.NodeType = ast.NodeOr
		deMorgansLaw(node.Left)
		deMorgansLaw(node.Right)
	case ast.NodeOr:
		node.NodeType = ast.NodeAnd
		deMorgansLaw(node.Left)
		deMorgansLaw(node.Right)
	default:
		log.Errorf("deMorgansLaw: unexpected NodeType: %v", node.NodeType)
	}
}

// Generate NumericExpr struct for eval functions
func createNumericExpr(op string, leftNumericExpr *structs.NumericExpr, rightNumericExpr *structs.NumericExpr, numericExprMode structs.NumericExprMode) (*structs.NumericExpr, error) {
	if leftNumericExpr == nil {
		return nil, fmt.Errorf("expr cannot be nil")
	}

	return &structs.NumericExpr{
		IsTerminal:      false,
		Op:              op,
		Left:            leftNumericExpr,
		Right:           rightNumericExpr,
		NumericExprMode: numericExprMode,
	}, nil
}

func transferUint8ToString(opName interface{}) (string, error) {
	strData, ok := opName.([]byte)
	if !ok {
		return "", fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)
	return opNameStr, nil
}

func transferPCREToRE2(pattern string) string {
	pattern = strings.Replace(pattern, "(?<", "(?P<", -1)
	return pattern
}

func getRexColNames(pattern string) ([]string, error) {
	re, err := regexp.Compile(`\?<(?P<GroupName>[a-zA-Z0-9_]+)>`)
	if err != nil {
		return nil, fmt.Errorf("getRexColNames: There are some errors in the pattern: %v", err)
	}
	matches := re.FindAllStringSubmatch(pattern, -1)

	var rexColNames []string
	for _, match := range matches {
		rexColNames = append(rexColNames, match[1])
	}

	return rexColNames, nil
}

func initializeStatsOptions() *structs.StatsOptions {
	return &structs.StatsOptions{
		Delim:          " ",
		Partitions:     1,
		DedupSplitvals: false,
		Allnum:         false,
	}
}

type aggregator struct {
	measureAgg         *structs.MeasureAggregator
	renameOutputField  bool
	outputFieldNewName string
}

type singleAggTemp struct {
	aggregators   []*aggregator
	SplitByClause *structs.SplitByClause
}

type TxnArgs struct {
	argOption string
	arguments *structs.TransactionArguments
}

type TimechartArgs struct {
	singleAggExpr *singleAggTemp
	// Todo: Add eval clause expr.
	tcOptions *structs.TcOptions
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Start",
			pos:  position{line: 183, col: 1, offset: 5165},
			expr: &actionExpr{
				pos: position{line: 183, col: 10, offset: 5174},
				run: (*parser).callonStart1,
				expr: &seqExpr{
					pos: position{line: 183, col: 10, offset: 5174},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 183, col: 10, offset: 5174},
							expr: &ruleRefExpr{
								pos:  position{line: 183, col: 10, offset: 5174},
								name: "SPACE",
							},
						},
						&labeledExpr{
							pos:   position{line: 183, col: 17, offset: 5181},
							label: "initialSearch",
							expr: &ruleRefExpr{
								pos:  position{line: 183, col: 32, offset: 5196},
								name: "InitialSearchBlock",
							},
						},
						&labeledExpr{
							pos:   position{line: 183, col: 52, offset: 5216},
							label: "filterBlocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 183, col: 65, offset: 5229},
								expr: &ruleRefExpr{
									pos:  position{line: 183, col: 66, offset: 5230},
									name: "FilterBlock",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 183, col: 80, offset: 5244},
							label: "queryAggBlocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 183, col: 95, offset: 5259},
								expr: &ruleRefExpr{
									pos:  position{line: 183, col: 96, offset: 5260},
									name: "QueryAggergatorBlock",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 183, col: 119, offset: 5283},
							expr: &ruleRefExpr{
								pos:  position{line: 183, col: 119, offset: 5283},
								name: "SPACE",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 183, col: 126, offset: 5290},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "InitialSearchBlock",
			pos:  position{line: 254, col: 1, offset: 7491},
			expr: &actionExpr{
				pos: position{line: 254, col: 23, offset: 7513},
				run: (*parser).callonInitialSearchBlock1,
				expr: &seqExpr{
					pos: position{line: 254, col: 23, offset: 7513},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 254, col: 23, offset: 7513},
							expr: &ruleRefExpr{
								pos:  position{line: 254, col: 23, offset: 7513},
								name: "CMD_SEARCH",
							},
						},
						&labeledExpr{
							pos:   position{line: 254, col: 35, offset: 7525},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 254, col: 42, offset: 7532},
								name: "ClauseLevel4",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBlock",
			pos:  position{line: 258, col: 1, offset: 7573},
			expr: &actionExpr{
				pos: position{line: 258, col: 16, offset: 7588},
				run: (*parser).callonSearchBlock1,
				expr: &seqExpr{
					pos: position{line: 258, col: 16, offset: 7588},
					exprs: []any{
						&notExpr{
							pos: position{line: 258, col: 16, offset: 7588},
							expr: &ruleRefExpr{
								pos:  position{line: 258, col: 18, offset: 7590},
								name: "ALLCMD",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 258, col: 26, offset: 7598},
							expr: &ruleRefExpr{
								pos:  position{line: 258, col: 26, offset: 7598},
								name: "CMD_SEARCH",
							},
						},
						&labeledExpr{
							pos:   position{line: 258, col: 38, offset: 7610},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 258, col: 45, offset: 7617},
								name: "ClauseLevel4",
							},
						},
					},
				},
			},
		},
		{
			name: "FilterBlock",
			pos:  position{line: 262, col: 1, offset: 7658},
			expr: &actionExpr{
				pos: position{line: 262, col: 16, offset: 7673},
				run: (*parser).callonFilterBlock1,
				expr: &seqExpr{
					pos: position{line: 262, col: 16, offset: 7673},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 262, col: 16, offset: 7673},
							name: "PIPE",
						},
						&labeledExpr{
							pos:   position{line: 262, col: 21, offset: 7678},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 262, col: 28, offset: 7685},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 262, col: 28, offset: 7685},
										name: "SearchBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 262, col: 42, offset: 7699},
										name: "RegexBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QueryAggergatorBlock",
			pos:  position{line: 267, col: 1, offset: 7775},
			expr: &actionExpr{
				pos: position{line: 267, col: 25, offset: 7799},
				run: (*parser).callonQueryAggergatorBlock1,
				expr: &labeledExpr{
					pos:   position{line: 267, col: 25, offset: 7799},
					label: "block",
					expr: &choiceExpr{
						pos: position{line: 267, col: 32, offset: 7806},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 267, col: 32, offset: 7806},
								name: "FieldSelectBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 267, col: 51, offset: 7825},
								name: "AggregatorBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 267, col: 69, offset: 7843},
								name: "EvalBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 267, col: 81, offset: 7855},
								name: "WhereBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 267, col: 94, offset: 7868},
								name: "HeadBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 267, col: 106, offset: 7880},
								name: "RexBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 267, col: 117, offset: 7891},
								name: "StatisticBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 267, col: 134, offset: 7908},
								name: "RenameBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 267, col: 148, offset: 7922},
								name: "TimechartBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 267, col: 165, offset: 7939},
								name: "TransactionBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 267, col: 184, offset: 7958},
								name: "DedupBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 267, col: 197, offset: 7971},
								name: "SortBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldSelectBlock",
			pos:  position{line: 272, col: 1, offset: 8062},
			expr: &actionExpr{
				pos: position{line: 272, col: 21, offset: 8082},
				run: (*parser).callonFieldSelectBlock1,
				expr: &seqExpr{
					pos: position{line: 272, col: 21, offset: 8082},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 272, col: 21, offset: 8082},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 272, col: 26, offset: 8087},
							name: "CMD_FIELDS",
						},
						&labeledExpr{
							pos:   position{line: 272, col: 37, offset: 8098},
							label: "op",
							expr: &zeroOrOneExpr{
								pos: position{line: 272, col: 40, offset: 8101},
								expr: &choiceExpr{
									pos: position{line: 272, col: 41, offset: 8102},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 272, col: 41, offset: 8102},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
										&litMatcher{
											pos:        position{line: 272, col: 47, offset: 8108},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 272, col: 53, offset: 8114},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 272, col: 68, offset: 8129},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 272, col: 75, offset: 8136},
								name: "FieldNameList",
							},
						},
					},
				},
			},
		},
		{
			name: "AggregatorBlock",
			pos:  position{line: 290, col: 1, offset: 8640},
			expr: &actionExpr{
				pos: position{line: 290, col: 20, offset: 8659},
				run: (*parser).callonAggregatorBlock1,
				expr: &seqExpr{
					pos: position{line: 290, col: 20, offset: 8659},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 290, col: 20, offset: 8659},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 290, col: 25, offset: 8664},
							name: "CMD_STATS",
						},
						&labeledExpr{
							pos:   position{line: 290, col: 35, offset: 8674},
							label: "aggs",
							expr: &ruleRefExpr{
								pos:  position{line: 290, col: 40, offset: 8679},
								name: "AggregationList",
							},
						},
						&labeledExpr{
							pos:   position{line: 290, col: 56, offset: 8695},
							label: "byFields",
							expr: &zeroOrOneExpr{
								pos: position{line: 290, col: 65, offset: 8704},
								expr: &ruleRefExpr{
									pos:  position{line: 290, col: 66, offset: 8705},
									name: "GroupbyBlock",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 290, col: 81, offset: 8720},
							label: "options",
							expr: &zeroOrOneExpr{
								pos: position{line: 290, col: 89, offset: 8728},
								expr: &ruleRefExpr{
									pos:  position{line: 290, col: 90, offset: 8729},
									name: "StatsOptions",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatsOptions",
			pos:  position{line: 343, col: 1, offset: 10463},
			expr: &actionExpr{
				pos: position{line: 343, col: 17, offset: 10479},
				run: (*parser).callonStatsOptions1,
				expr: &labeledExpr{
					pos:   position{line: 343, col: 17, offset: 10479},
					label: "option",
					expr: &zeroOrMoreExpr{
						pos: position{line: 343, col: 24, offset: 10486},
						expr: &ruleRefExpr{
							pos:  position{line: 343, col: 25, offset: 10487},
							name: "StatsOption",
						},
					},
				},
			},
		},
		{
			name: "StatsOption",
			pos:  position{line: 381, col: 1, offset: 11928},
			expr: &actionExpr{
				pos: position{line: 381, col: 16, offset: 11943},
				run: (*parser).callonStatsOption1,
				expr: &seqExpr{
					pos: position{line: 381, col: 16, offset: 11943},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 381, col: 16, offset: 11943},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 381, col: 22, offset: 11949},
							label: "optionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 381, col: 32, offset: 11959},
								name: "StatsOptionCMD",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 381, col: 47, offset: 11974},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 381, col: 53, offset: 11980},
							label: "str",
							expr: &choiceExpr{
								pos: position{line: 381, col: 58, offset: 11985},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 381, col: 58, offset: 11985},
										name: "IntegerAsString",
									},
									&ruleRefExpr{
										pos:  position{line: 381, col: 76, offset: 12003},
										name: "EvalFieldToRead",
									},
									&ruleRefExpr{
										pos:  position{line: 381, col: 94, offset: 12021},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatsOptionCMD",
			pos:  position{line: 386, col: 1, offset: 12126},
			expr: &actionExpr{
				pos: position{line: 386, col: 19, offset: 12144},
				run: (*parser).callonStatsOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 386, col: 19, offset: 12144},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 386, col: 27, offset: 12152},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 386, col: 27, offset: 12152},
								val:        "allnum",
								ignoreCase: false,
								want:       "\"allnum\"",
							},
							&litMatcher{
								pos:        position{line: 386, col: 38, offset: 12163},
								val:        "dedup_splitvals",
								ignoreCase: false,
								want:       "\"dedup_splitvals\"",
							},
							&litMatcher{
								pos:        position{line: 386, col: 58, offset: 12183},
								val:        "delim",
								ignoreCase: false,
								want:       "\"delim\"",
							},
							&litMatcher{
								pos:        position{line: 386, col: 68, offset: 12193},
								val:        "partitions",
								ignoreCase: false,
								want:       "\"partitions\"",
							},
						},
					},
				},
			},
		},
		{
			name: "GroupbyBlock",
			pos:  position{line: 394, col: 1, offset: 12383},
			expr: &actionExpr{
				pos: position{line: 394, col: 17, offset: 12399},
				run: (*parser).callonGroupbyBlock1,
				expr: &seqExpr{
					pos: position{line: 394, col: 17, offset: 12399},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 394, col: 17, offset: 12399},
							name: "BY",
						},
						&labeledExpr{
							pos:   position{line: 394, col: 20, offset: 12402},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 394, col: 27, offset: 12409},
								name: "FieldNameList",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexBlock",
			pos:  position{line: 405, col: 1, offset: 12758},
			expr: &actionExpr{
				pos: position{line: 405, col: 15, offset: 12772},
				run: (*parser).callonRegexBlock1,
				expr: &seqExpr{
					pos: position{line: 405, col: 15, offset: 12772},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 405, col: 15, offset: 12772},
							name: "CMD_REGEX",
						},
						&labeledExpr{
							pos:   position{line: 405, col: 25, offset: 12782},
							label: "keyAndOp",
							expr: &zeroOrOneExpr{
								pos: position{line: 405, col: 34, offset: 12791},
								expr: &seqExpr{
									pos: position{line: 405, col: 35, offset: 12792},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 405, col: 35, offset: 12792},
											name: "FieldName",
										},
										&ruleRefExpr{
											pos:  position{line: 405, col: 45, offset: 12802},
											name: "EqualityOperator",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 405, col: 64, offset: 12821},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 405, col: 68, offset: 12825},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel4",
			pos:  position{line: 433, col: 1, offset: 13404},
			expr: &actionExpr{
				pos: position{line: 433, col: 17, offset: 13420},
				run: (*parser).callonClauseLevel41,
				expr: &seqExpr{
					pos: position{line: 433, col: 17, offset: 13420},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 433, col: 17, offset: 13420},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 433, col: 23, offset: 13426},
								name: "ClauseLevel3",
							},
						},
						&labeledExpr{
							pos:   position{line: 433, col: 36, offset: 13439},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 433, col: 41, offset: 13444},
								expr: &seqExpr{
									pos: position{line: 433, col: 42, offset: 13445},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 433, col: 43, offset: 13446},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 433, col: 43, offset: 13446},
													name: "AND",
												},
												&ruleRefExpr{
													pos:  position{line: 433, col: 49, offset: 13452},
													name: "SPACE",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 433, col: 56, offset: 13459},
											name: "ClauseLevel3",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel3",
			pos:  position{line: 451, col: 1, offset: 13836},
			expr: &actionExpr{
				pos: position{line: 451, col: 17, offset: 13852},
				run: (*parser).callonClauseLevel31,
				expr: &seqExpr{
					pos: position{line: 451, col: 17, offset: 13852},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 451, col: 17, offset: 13852},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 451, col: 23, offset: 13858},
								name: "ClauseLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 451, col: 36, offset: 13871},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 451, col: 41, offset: 13876},
								expr: &seqExpr{
									pos: position{line: 451, col: 42, offset: 13877},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 451, col: 42, offset: 13877},
											name: "OR",
										},
										&ruleRefExpr{
											pos:  position{line: 451, col: 45, offset: 13880},
											name: "ClauseLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel2",
			pos:  position{line: 469, col: 1, offset: 14245},
			expr: &choiceExpr{
				pos: position{line: 469, col: 17, offset: 14261},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 469, col: 17, offset: 14261},
						run: (*parser).callonClauseLevel22,
						expr: &seqExpr{
							pos: position{line: 469, col: 17, offset: 14261},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 469, col: 17, offset: 14261},
									label: "notList",
									expr: &oneOrMoreExpr{
										pos: position{line: 469, col: 25, offset: 14269},
										expr: &ruleRefExpr{
											pos:  position{line: 469, col: 25, offset: 14269},
											name: "NOT",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 469, col: 30, offset: 14274},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 469, col: 36, offset: 14280},
										name: "ClauseLevel1",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 480, col: 5, offset: 14576},
						run: (*parser).callonClauseLevel29,
						expr: &labeledExpr{
							pos:   position{line: 480, col: 5, offset: 14576},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 480, col: 12, offset: 14583},
								name: "ClauseLevel1",
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel1",
			pos:  position{line: 484, col: 1, offset: 14624},
			expr: &choiceExpr{
				pos: position{line: 484, col: 17, offset: 14640},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 484, col: 17, offset: 14640},
						run: (*parser).callonClauseLevel12,
						expr: &seqExpr{
							pos: position{line: 484, col: 17, offset: 14640},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 484, col: 17, offset: 14640},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 484, col: 25, offset: 14648},
									label: "clause",
									expr: &ruleRefExpr{
										pos:  position{line: 484, col: 32, offset: 14655},
										name: "ClauseLevel4",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 484, col: 45, offset: 14668},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 486, col: 5, offset: 14705},
						run: (*parser).callonClauseLevel18,
						expr: &labeledExpr{
							pos:   position{line: 486, col: 5, offset: 14705},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 10, offset: 14710},
								name: "SearchTerm",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchTerm",
			pos:  position{line: 492, col: 1, offset: 14868},
			expr: &actionExpr{
				pos: position{line: 492, col: 15, offset: 14882},
				run: (*parser).callonSearchTerm1,
				expr: &labeledExpr{
					pos:   position{line: 492, col: 15, offset: 14882},
					label: "term",
					expr: &choiceExpr{
						pos: position{line: 492, col: 21, offset: 14888},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 492, col: 21, offset: 14888},
								name: "FieldWithNumberValue",
							},
							&ruleRefExpr{
								pos:  position{line: 492, col: 44, offset: 14911},
								name: "FieldWithBooleanValue",
							},
							&ruleRefExpr{
								pos:  position{line: 492, col: 68, offset: 14935},
								name: "FieldWithStringValue",
							},
						},
					},
				},
			},
		},
		{
			name: "TimechartBlock",
			pos:  position{line: 497, col: 1, offset: 15076},
			expr: &actionExpr{
				pos: position{line: 497, col: 19, offset: 15094},
				run: (*parser).callonTimechartBlock1,
				expr: &seqExpr{
					pos: position{line: 497, col: 19, offset: 15094},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 497, col: 19, offset: 15094},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 497, col: 24, offset: 15099},
							name: "CMD_TIMECHART",
						},
						&labeledExpr{
							pos:   position{line: 497, col: 38, offset: 15113},
							label: "tcArgs",
							expr: &ruleRefExpr{
								pos:  position{line: 497, col: 45, offset: 15120},
								name: "TimechartArgumentsList",
							},
						},
						&labeledExpr{
							pos:   position{line: 497, col: 68, offset: 15143},
							label: "limitExpr",
							expr: &zeroOrOneExpr{
								pos: position{line: 497, col: 78, offset: 15153},
								expr: &ruleRefExpr{
									pos:  position{line: 497, col: 79, offset: 15154},
									name: "LimitExpr",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimechartArgumentsList",
			pos:  position{line: 585, col: 1, offset: 17897},
			expr: &actionExpr{
				pos: position{line: 585, col: 27, offset: 17923},
				run: (*parser).callonTimechartArgumentsList1,
				expr: &seqExpr{
					pos: position{line: 585, col: 27, offset: 17923},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 585, col: 27, offset: 17923},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 585, col: 33, offset: 17929},
								name: "TimechartArgument",
							},
						},
						&labeledExpr{
							pos:   position{line: 585, col: 51, offset: 17947},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 585, col: 56, offset: 17952},
								expr: &seqExpr{
									pos: position{line: 585, col: 57, offset: 17953},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 585, col: 57, offset: 17953},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 585, col: 63, offset: 17959},
											name: "TimechartArgument",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimechartArgument",
			pos:  position{line: 614, col: 1, offset: 18693},
			expr: &actionExpr{
				pos: position{line: 614, col: 22, offset: 18714},
				run: (*parser).callonTimechartArgument1,
				expr: &labeledExpr{
					pos:   position{line: 614, col: 22, offset: 18714},
					label: "tcArg",
					expr: &choiceExpr{
						pos: position{line: 614, col: 29, offset: 18721},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 614, col: 29, offset: 18721},
								name: "SingleAggExpr",
							},
							&ruleRefExpr{
								pos:  position{line: 614, col: 45, offset: 18737},
								name: "TcOptions",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleAggExpr",
			pos:  position{line: 618, col: 1, offset: 18775},
			expr: &actionExpr{
				pos: position{line: 618, col: 18, offset: 18792},
				run: (*parser).callonSingleAggExpr1,
				expr: &seqExpr{
					pos: position{line: 618, col: 18, offset: 18792},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 618, col: 18, offset: 18792},
							label: "aggs",
							expr: &ruleRefExpr{
								pos:  position{line: 618, col: 23, offset: 18797},
								name: "AggregationList",
							},
						},
						&labeledExpr{
							pos:   position{line: 618, col: 39, offset: 18813},
							label: "splitByClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 618, col: 53, offset: 18827},
								expr: &ruleRefExpr{
									pos:  position{line: 618, col: 53, offset: 18827},
									name: "SplitByClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SplitByClause",
			pos:  position{line: 632, col: 1, offset: 19166},
			expr: &actionExpr{
				pos: position{line: 632, col: 18, offset: 19183},
				run: (*parser).callonSplitByClause1,
				expr: &seqExpr{
					pos: position{line: 632, col: 18, offset: 19183},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 632, col: 18, offset: 19183},
							name: "BY",
						},
						&labeledExpr{
							pos:   position{line: 632, col: 21, offset: 19186},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 632, col: 27, offset: 19192},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "TcOptions",
			pos:  position{line: 640, col: 1, offset: 19321},
			expr: &actionExpr{
				pos: position{line: 640, col: 14, offset: 19334},
				run: (*parser).callonTcOptions1,
				expr: &labeledExpr{
					pos:   position{line: 640, col: 14, offset: 19334},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 640, col: 22, offset: 19342},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 640, col: 22, offset: 19342},
								name: "BinOptions",
							},
							&oneOrMoreExpr{
								pos: position{line: 640, col: 35, offset: 19355},
								expr: &ruleRefExpr{
									pos:  position{line: 640, col: 36, offset: 19356},
									name: "TcOption",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TcOption",
			pos:  position{line: 682, col: 1, offset: 20876},
			expr: &actionExpr{
				pos: position{line: 682, col: 13, offset: 20888},
				run: (*parser).callonTcOption1,
				expr: &seqExpr{
					pos: position{line: 682, col: 13, offset: 20888},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 682, col: 13, offset: 20888},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 682, col: 19, offset: 20894},
							label: "tcOptionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 682, col: 31, offset: 20906},
								name: "TcOptionCMD",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 682, col: 43, offset: 20918},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 682, col: 49, offset: 20924},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 682, col: 53, offset: 20928},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "TcOptionCMD",
			pos:  position{line: 687, col: 1, offset: 21041},
			expr: &actionExpr{
				pos: position{line: 687, col: 16, offset: 21056},
				run: (*parser).callonTcOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 687, col: 16, offset: 21056},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 687, col: 24, offset: 21064},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 687, col: 24, offset: 21064},
								val:        "usenull",
								ignoreCase: false,
								want:       "\"usenull\"",
							},
							&litMatcher{
								pos:        position{line: 687, col: 36, offset: 21076},
								val:        "useother",
								ignoreCase: false,
								want:       "\"useother\"",
							},
							&litMatcher{
								pos:        position{line: 687, col: 49, offset: 21089},
								val:        "nullstr",
								ignoreCase: false,
								want:       "\"nullstr\"",
							},
							&litMatcher{
								pos:        position{line: 687, col: 61, offset: 21101},
								val:        "otherstr",
								ignoreCase: false,
								want:       "\"otherstr\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BinOptions",
			pos:  position{line: 696, col: 1, offset: 21450},
			expr: &actionExpr{
				pos: position{line: 696, col: 15, offset: 21464},
				run: (*parser).callonBinOptions1,
				expr: &labeledExpr{
					pos:   position{line: 696, col: 15, offset: 21464},
					label: "spanOptions",
					expr: &ruleRefExpr{
						pos:  position{line: 696, col: 27, offset: 21476},
						name: "SpanOptions",
					},
				},
			},
		},
		{
			name: "SpanOptions",
			pos:  position{line: 704, col: 1, offset: 21701},
			expr: &actionExpr{
				pos: position{line: 704, col: 16, offset: 21716},
				run: (*parser).callonSpanOptions1,
				expr: &seqExpr{
					pos: position{line: 704, col: 16, offset: 21716},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 704, col: 16, offset: 21716},
							name: "CMD_SPAN",
						},
						&ruleRefExpr{
							pos:  position{line: 704, col: 25, offset: 21725},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 704, col: 31, offset: 21731},
							label: "spanLength",
							expr: &ruleRefExpr{
								pos:  position{line: 704, col: 42, offset: 21742},
								name: "SpanLength",
							},
						},
					},
				},
			},
		},
		{
			name: "SpanLength",
			pos:  position{line: 711, col: 1, offset: 21888},
			expr: &actionExpr{
				pos: position{line: 711, col: 15, offset: 21902},
				run: (*parser).callonSpanLength1,
				expr: &seqExpr{
					pos: position{line: 711, col: 15, offset: 21902},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 711, col: 15, offset: 21902},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 711, col: 24, offset: 21911},
								name: "IntegerAsString",
							},
						},
						&labeledExpr{
							pos:   position{line: 711, col: 40, offset: 21927},
							label: "timeScale",
							expr: &ruleRefExpr{
								pos:  position{line: 711, col: 50, offset: 21937},
								name: "TimeScale",
							},
						},
					},
				},
			},
		},
		{
			name: "TimeScale",
			pos:  position{line: 724, col: 1, offset: 22255},
			expr: &actionExpr{
				pos: position{line: 724, col: 14, offset: 22268},
				run: (*parser).callonTimeScale1,
				expr: &labeledExpr{
					pos:   position{line: 724, col: 14, offset: 22268},
					label: "timeUnit",
					expr: &choiceExpr{
						pos: position{line: 724, col: 24, offset: 22278},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 724, col: 24, offset: 22278},
								name: "Second",
							},
							&ruleRefExpr{
								pos:  position{line: 724, col: 33, offset: 22287},
								name: "Minute",
							},
							&ruleRefExpr{
								pos:  position{line: 724, col: 42, offset: 22296},
								name: "Hour",
							},
							&ruleRefExpr{
								pos:  position{line: 724, col: 49, offset: 22303},
								name: "Day",
							},
							&ruleRefExpr{
								pos:  position{line: 724, col: 54, offset: 22308},
								name: "Week",
							},
							&ruleRefExpr{
								pos:  position{line: 724, col: 61, offset: 22315},
								name: "Month",
							},
							&ruleRefExpr{
								pos:  position{line: 724, col: 69, offset: 22323},
								name: "Quarter",
							},
							&ruleRefExpr{
								pos:  position{line: 724, col: 78, offset: 22332},
								name: "Subseconds",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitExpr",
			pos:  position{line: 729, col: 1, offset: 22454},
			expr: &actionExpr{
				pos: position{line: 729, col: 14, offset: 22467},
				run: (*parser).callonLimitExpr1,
				expr: &seqExpr{
					pos: position{line: 729, col: 14, offset: 22467},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 729, col: 14, offset: 22467},
							name: "SPACE",
						},
						&litMatcher{
							pos:        position{line: 729, col: 20, offset: 22473},
							val:        "limit",
							ignoreCase: false,
							want:       "\"limit\"",
						},
						&ruleRefExpr{
							pos:  position{line: 729, col: 28, offset: 22481},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 729, col: 34, offset: 22487},
							label: "sortBy",
							expr: &zeroOrOneExpr{
								pos: position{line: 729, col: 41, offset: 22494},
								expr: &choiceExpr{
									pos: position{line: 729, col: 42, offset: 22495},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 729, col: 42, offset: 22495},
											val:        "top",
											ignoreCase: false,
											want:       "\"top\"",
										},
										&litMatcher{
											pos:        position{line: 729, col: 50, offset: 22503},
											val:        "bottom",
											ignoreCase: false,
											want:       "\"bottom\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 729, col: 61, offset: 22514},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 729, col: 76, offset: 22529},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 729, col: 86, offset: 22539},
								name: "IntegerAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticBlock",
			pos:  position{line: 753, col: 1, offset: 23120},
			expr: &actionExpr{
				pos: position{line: 753, col: 19, offset: 23138},
				run: (*parser).callonStatisticBlock1,
				expr: &seqExpr{
					pos: position{line: 753, col: 19, offset: 23138},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 753, col: 19, offset: 23138},
							name: "PIPE",
						},
						&labeledExpr{
							pos:   position{line: 753, col: 24, offset: 23143},
							label: "statisticExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 753, col: 38, offset: 23157},
								name: "StatisticExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticExpr",
			pos:  position{line: 786, col: 1, offset: 24135},
			expr: &actionExpr{
				pos: position{line: 786, col: 18, offset: 24152},
				run: (*parser).callonStatisticExpr1,
				expr: &seqExpr{
					pos: position{line: 786, col: 18, offset: 24152},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 786, col: 18, offset: 24152},
							label: "cmd",
							expr: &choiceExpr{
								pos: position{line: 786, col: 23, offset: 24157},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 786, col: 23, offset: 24157},
										name: "CMD_TOP",
									},
									&ruleRefExpr{
										pos:  position{line: 786, col: 33, offset: 24167},
										name: "CMD_RARE",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 786, col: 43, offset: 24177},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 786, col: 49, offset: 24183},
								expr: &ruleRefExpr{
									pos:  position{line: 786, col: 50, offset: 24184},
									name: "StatisticLimit",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 786, col: 67, offset: 24201},
							label: "fieldList",
							expr: &seqExpr{
								pos: position{line: 786, col: 78, offset: 24212},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 786, col: 78, offset: 24212},
										name: "SPACE",
									},
									&ruleRefExpr{
										pos:  position{line: 786, col: 84, offset: 24218},
										name: "FieldNameList",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 786, col: 99, offset: 24233},
							label: "byClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 786, col: 108, offset: 24242},
								expr: &ruleRefExpr{
									pos:  position{line: 786, col: 109, offset: 24243},
									name: "ByClause",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 786, col: 120, offset: 24254},
							label: "options",
							expr: &zeroOrOneExpr{
								pos: position{line: 786, col: 128, offset: 24262},
								expr: &ruleRefExpr{
									pos:  position{line: 786, col: 129, offset: 24263},
									name: "StatisticOptions",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticLimit",
			pos:  position{line: 828, col: 1, offset: 25348},
			expr: &choiceExpr{
				pos: position{line: 828, col: 19, offset: 25366},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 828, col: 19, offset: 25366},
						run: (*parser).callonStatisticLimit2,
						expr: &seqExpr{
							pos: position{line: 828, col: 19, offset: 25366},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 828, col: 19, offset: 25366},
									name: "SPACE",
								},
								&labeledExpr{
									pos:   position{line: 828, col: 25, offset: 25372},
									label: "number",
									expr: &ruleRefExpr{
										pos:  position{line: 828, col: 32, offset: 25379},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 831, col: 3, offset: 25433},
						run: (*parser).callonStatisticLimit7,
						expr: &seqExpr{
							pos: position{line: 831, col: 3, offset: 25433},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 831, col: 3, offset: 25433},
									name: "SPACE",
								},
								&litMatcher{
									pos:        position{line: 831, col: 9, offset: 25439},
									val:        "limit",
									ignoreCase: false,
									want:       "\"limit\"",
								},
								&ruleRefExpr{
									pos:  position{line: 831, col: 17, offset: 25447},
									name: "EQUAL",
								},
								&labeledExpr{
									pos:   position{line: 831, col: 23, offset: 25453},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 831, col: 30, offset: 25460},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticOptions",
			pos:  position{line: 836, col: 1, offset: 25558},
			expr: &actionExpr{
				pos: position{line: 836, col: 21, offset: 25578},
				run: (*parser).callonStatisticOptions1,
				expr: &labeledExpr{
					pos:   position{line: 836, col: 21, offset: 25578},
					label: "option",
					expr: &zeroOrMoreExpr{
						pos: position{line: 836, col: 28, offset: 25585},
						expr: &ruleRefExpr{
							pos:  position{line: 836, col: 29, offset: 25586},
							name: "StatisticOption",
						},
					},
				},
			},
		},
		{
			name: "StatisticOption",
			pos:  position{line: 885, col: 1, offset: 27148},
			expr: &actionExpr{
				pos: position{line: 885, col: 20, offset: 27167},
				run: (*parser).callonStatisticOption1,
				expr: &seqExpr{
					pos: position{line: 885, col: 20, offset: 27167},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 885, col: 20, offset: 27167},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 885, col: 26, offset: 27173},
							label: "optionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 885, col: 36, offset: 27183},
								name: "StatisticOptionCMD",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 885, col: 55, offset: 27202},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 885, col: 61, offset: 27208},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 885, col: 67, offset: 27214},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticOptionCMD",
			pos:  position{line: 890, col: 1, offset: 27323},
			expr: &actionExpr{
				pos: position{line: 890, col: 23, offset: 27345},
				run: (*parser).callonStatisticOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 890, col: 23, offset: 27345},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 890, col: 31, offset: 27353},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 890, col: 31, offset: 27353},
								val:        "countfield",
								ignoreCase: false,
								want:       "\"countfield\"",
							},
							&litMatcher{
								pos:        position{line: 890, col: 46, offset: 27368},
								val:        "showcount",
								ignoreCase: false,
								want:       "\"showcount\"",
							},
							&litMatcher{
								pos:        position{line: 890, col: 60, offset: 27382},
								val:        "otherstr",
								ignoreCase: false,
								want:       "\"otherstr\"",
							},
							&litMatcher{
								pos:        position{line: 890, col: 73, offset: 27395},
								val:        "useother",
								ignoreCase: false,
								want:       "\"useother\"",
							},
							&litMatcher{
								pos:        position{line: 890, col: 85, offset: 27407},
								val:        "percentfield",
								ignoreCase: false,
								want:       "\"percentfield\"",
							},
							&litMatcher{
								pos:        position{line: 890, col: 102, offset: 27424},
								val:        "showperc",
								ignoreCase: false,
								want:       "\"showperc\"",
							},
						},
					},
				},
			},
		},
		{
			name: "ByClause",
			pos:  position{line: 898, col: 1, offset: 27611},
			expr: &choiceExpr{
				pos: position{line: 898, col: 13, offset: 27623},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 898, col: 13, offset: 27623},
						run: (*parser).callonByClause2,
						expr: &seqExpr{
							pos: position{line: 898, col: 13, offset: 27623},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 898, col: 13, offset: 27623},
									name: "BY",
								},
								&labeledExpr{
									pos:   position{line: 898, col: 16, offset: 27626},
									label: "fieldList",
									expr: &ruleRefExpr{
										pos:  position{line: 898, col: 26, offset: 27636},
										name: "FieldNameList",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 901, col: 3, offset: 27693},
						run: (*parser).callonByClause7,
						expr: &labeledExpr{
							pos:   position{line: 901, col: 3, offset: 27693},
							label: "groupByBlock",
							expr: &ruleRefExpr{
								pos:  position{line: 901, col: 16, offset: 27706},
								name: "GroupbyBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupBlock",
			pos:  position{line: 905, col: 1, offset: 27764},
			expr: &actionExpr{
				pos: position{line: 905, col: 15, offset: 27778},
				run: (*parser).callonDedupBlock1,
				expr: &seqExpr{
					pos: position{line: 905, col: 15, offset: 27778},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 905, col: 15, offset: 27778},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 905, col: 20, offset: 27783},
							name: "CMD_DEDUP",
						},
						&labeledExpr{
							pos:   position{line: 905, col: 30, offset: 27793},
							label: "dedupExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 905, col: 40, offset: 27803},
								name: "DedupExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupExpr",
			pos:  position{line: 925, col: 1, offset: 28371},
			expr: &actionExpr{
				pos: position{line: 925, col: 14, offset: 28384},
				run: (*parser).callonDedupExpr1,
				expr: &seqExpr{
					pos: position{line: 925, col: 14, offset: 28384},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 925, col: 14, offset: 28384},
							label: "limitArr",
							expr: &zeroOrOneExpr{
								pos: position{line: 925, col: 23, offset: 28393},
								expr: &seqExpr{
									pos: position{line: 925, col: 24, offset: 28394},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 925, col: 24, offset: 28394},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 925, col: 30, offset: 28400},
											name: "IntegerAsString",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 925, col: 48, offset: 28418},
							label: "options1",
							expr: &zeroOrOneExpr{
								pos: position{line: 925, col: 57, offset: 28427},
								expr: &ruleRefExpr{
									pos:  position{line: 925, col: 58, offset: 28428},
									name: "DedupOptions",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 925, col: 73, offset: 28443},
							label: "fieldList",
							expr: &zeroOrOneExpr{
								pos: position{line: 925, col: 83, offset: 28453},
								expr: &ruleRefExpr{
									pos:  position{line: 925, col: 84, offset: 28454},
									name: "DedupFieldList",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 925, col: 101, offset: 28471},
							label: "options2",
							expr: &zeroOrOneExpr{
								pos: position{line: 925, col: 110, offset: 28480},
								expr: &ruleRefExpr{
									pos:  position{line: 925, col: 111, offset: 28481},
									name: "DedupOptions",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 925, col: 126, offset: 28496},
							label: "sortByClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 925, col: 139, offset: 28509},
								expr: &ruleRefExpr{
									pos:  position{line: 925, col: 140, offset: 28510},
									name: "DedupSortByClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DedupFieldName",
			pos:  position{line: 982, col: 1, offset: 30248},
			expr: &actionExpr{
				pos: position{line: 982, col: 19, offset: 30266},
				run: (*parser).callonDedupFieldName1,
				expr: &seqExpr{
					pos: position{line: 982, col: 19, offset: 30266},
					exprs: []any{
						&notExpr{
							pos: position{line: 982, col: 19, offset: 30266},
							expr: &litMatcher{
								pos:        position{line: 982, col: 21, offset: 30268},
								val:        "sortby",
								ignoreCase: false,
								want:       "\"sortby\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 982, col: 31, offset: 30278},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 982, col: 37, offset: 30284},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupFieldList",
			pos:  position{line: 986, col: 1, offset: 30321},
			expr: &actionExpr{
				pos: position{line: 986, col: 19, offset: 30339},
				run: (*parser).callonDedupFieldList1,
				expr: &seqExpr{
					pos: position{line: 986, col: 19, offset: 30339},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 986, col: 19, offset: 30339},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 986, col: 25, offset: 30345},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 986, col: 31, offset: 30351},
								name: "DedupFieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 986, col: 46, offset: 30366},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 986, col: 51, offset: 30371},
								expr: &seqExpr{
									pos: position{line: 986, col: 52, offset: 30372},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 986, col: 52, offset: 30372},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 986, col: 58, offset: 30378},
											name: "DedupFieldName",
										},
										&notExpr{
											pos: position{line: 986, col: 73, offset: 30393},
											expr: &ruleRefExpr{
												pos:  position{line: 986, col: 74, offset: 30394},
												name: "EQUAL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DedupOptions",
			pos:  position{line: 1004, col: 1, offset: 30922},
			expr: &actionExpr{
				pos: position{line: 1004, col: 17, offset: 30938},
				run: (*parser).callonDedupOptions1,
				expr: &labeledExpr{
					pos:   position{line: 1004, col: 17, offset: 30938},
					label: "option",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1004, col: 24, offset: 30945},
						expr: &ruleRefExpr{
							pos:  position{line: 1004, col: 25, offset: 30946},
							name: "DedupOption",
						},
					},
				},
			},
		},
		{
			name: "DedupOption",
			pos:  position{line: 1044, col: 1, offset: 32212},
			expr: &actionExpr{
				pos: position{line: 1044, col: 16, offset: 32227},
				run: (*parser).callonDedupOption1,
				expr: &seqExpr{
					pos: position{line: 1044, col: 16, offset: 32227},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1044, col: 16, offset: 32227},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 1044, col: 22, offset: 32233},
							label: "optionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 1044, col: 32, offset: 32243},
								name: "DedupOptionCMD",
							},
						},
						&litMatcher{
							pos:        position{line: 1044, col: 47, offset: 32258},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 1044, col: 51, offset: 32262},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1044, col: 57, offset: 32268},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupOptionCMD",
			pos:  position{line: 1049, col: 1, offset: 32377},
			expr: &actionExpr{
				pos: position{line: 1049, col: 19, offset: 32395},
				run: (*parser).callonDedupOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 1049, col: 19, offset: 32395},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 1049, col: 27, offset: 32403},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 1049, col: 27, offset: 32403},
								val:        "consecutive",
								ignoreCase: false,
								want:       "\"consecutive\"",
							},
							&litMatcher{
								pos:        position{line: 1049, col: 43, offset: 32419},
								val:        "keepempty",
								ignoreCase: false,
								want:       "\"keepempty\"",
							},
							&litMatcher{
								pos:        position{line: 1049, col: 57, offset: 32433},
								val:        "keepevents",
								ignoreCase: false,
								want:       "\"keepevents\"",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupSortByClause",
			pos:  position{line: 1057, col: 1, offset: 32618},
			expr: &actionExpr{
				pos: position{line: 1057, col: 22, offset: 32639},
				run: (*parser).callonDedupSortByClause1,
				expr: &seqExpr{
					pos: position{line: 1057, col: 22, offset: 32639},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1057, col: 22, offset: 32639},
							name: "CMD_DEDUP_SORTBY",
						},
						&labeledExpr{
							pos:   position{line: 1057, col: 39, offset: 32656},
							label: "dedupSortEles",
							expr: &ruleRefExpr{
								pos:  position{line: 1057, col: 53, offset: 32670},
								name: "SortElements",
							},
						},
					},
				},
			},
		},
		{
			name: "SortElements",
			pos:  position{line: 1062, col: 1, offset: 32778},
			expr: &actionExpr{
				pos: position{line: 1062, col: 17, offset: 32794},
				run: (*parser).callonSortElements1,
				expr: &seqExpr{
					pos: position{line: 1062, col: 17, offset: 32794},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1062, col: 17, offset: 32794},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1062, col: 23, offset: 32800},
								name: "SingleSortElement",
							},
						},
						&labeledExpr{
							pos:   position{line: 1062, col: 41, offset: 32818},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1062, col: 46, offset: 32823},
								expr: &seqExpr{
									pos: position{line: 1062, col: 47, offset: 32824},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1062, col: 47, offset: 32824},
											name: "SPACE_OR_COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 1062, col: 62, offset: 32839},
											name: "SingleSortElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleSortElement",
			pos:  position{line: 1077, col: 1, offset: 33197},
			expr: &actionExpr{
				pos: position{line: 1077, col: 22, offset: 33218},
				run: (*parser).callonSingleSortElement1,
				expr: &labeledExpr{
					pos:   position{line: 1077, col: 22, offset: 33218},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1077, col: 31, offset: 33227},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1077, col: 31, offset: 33227},
								name: "SingleSortElementWithCast",
							},
							&ruleRefExpr{
								pos:  position{line: 1077, col: 59, offset: 33255},
								name: "SingleSortElementWithoutCast",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleSortElementWithoutCast",
			pos:  position{line: 1081, col: 1, offset: 33314},
			expr: &actionExpr{
				pos: position{line: 1081, col: 33, offset: 33346},
				run: (*parser).callonSingleSortElementWithoutCast1,
				expr: &seqExpr{
					pos: position{line: 1081, col: 33, offset: 33346},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1081, col: 33, offset: 33346},
							label: "sortBySymbol",
							expr: &choiceExpr{
								pos: position{line: 1081, col: 47, offset: 33360},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 1081, col: 47, offset: 33360},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&litMatcher{
										pos:        position{line: 1081, col: 53, offset: 33366},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
									&litMatcher{
										pos:        position{line: 1081, col: 59, offset: 33372},
										val:        "",
										ignoreCase: false,
										want:       "\"\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1081, col: 63, offset: 33376},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1081, col: 69, offset: 33382},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleSortElementWithCast",
			pos:  position{line: 1096, col: 1, offset: 33657},
			expr: &actionExpr{
				pos: position{line: 1096, col: 30, offset: 33686},
				run: (*parser).callonSingleSortElementWithCast1,
				expr: &seqExpr{
					pos: position{line: 1096, col: 30, offset: 33686},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1096, col: 30, offset: 33686},
							label: "sortBySymbol",
							expr: &choiceExpr{
								pos: position{line: 1096, col: 44, offset: 33700},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 1096, col: 44, offset: 33700},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&litMatcher{
										pos:        position{line: 1096, col: 50, offset: 33706},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
									&litMatcher{
										pos:        position{line: 1096, col: 56, offset: 33712},
										val:        "",
										ignoreCase: false,
										want:       "\"\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1096, col: 60, offset: 33716},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 1096, col: 64, offset: 33720},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 1096, col: 64, offset: 33720},
										val:        "auto",
										ignoreCase: false,
										want:       "\"auto\"",
									},
									&litMatcher{
										pos:        position{line: 1096, col: 73, offset: 33729},
										val:        "str",
										ignoreCase: false,
										want:       "\"str\"",
									},
									&litMatcher{
										pos:        position{line: 1096, col: 81, offset: 33737},
										val:        "ip",
										ignoreCase: false,
										want:       "\"ip\"",
									},
									&litMatcher{
										pos:        position{line: 1096, col: 88, offset: 33744},
										val:        "num",
										ignoreCase: false,
										want:       "\"num\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1096, col: 95, offset: 33751},
							name: "L_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 1096, col: 103, offset: 33759},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1096, col: 109, offset: 33765},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1096, col: 119, offset: 33775},
							name: "R_PAREN",
						},
					},
				},
			},
		},
		{
			name: "RenameBlock",
			pos:  position{line: 1116, col: 1, offset: 34200},
			expr: &actionExpr{
				pos: position{line: 1116, col: 16, offset: 34215},
				run: (*parser).callonRenameBlock1,
				expr: &seqExpr{
					pos: position{line: 1116, col: 16, offset: 34215},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1116, col: 16, offset: 34215},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1116, col: 21, offset: 34220},
							name: "CMD_RENAME",
						},
						&labeledExpr{
							pos:   position{line: 1116, col: 32, offset: 34231},
							label: "renameExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 1116, col: 43, offset: 34242},
								name: "RenameExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameExpr",
			pos:  position{line: 1132, col: 1, offset: 34617},
			expr: &choiceExpr{
				pos: position{line: 1132, col: 15, offset: 34631},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1132, col: 15, offset: 34631},
						run: (*parser).callonRenameExpr2,
						expr: &seqExpr{
							pos: position{line: 1132, col: 15, offset: 34631},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1132, col: 15, offset: 34631},
									label: "originalPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1132, col: 31, offset: 34647},
										name: "RenamePattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1132, col: 45, offset: 34661},
									name: "AS",
								},
								&labeledExpr{
									pos:   position{line: 1132, col: 48, offset: 34664},
									label: "newPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1132, col: 59, offset: 34675},
										name: "QuotedString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1143, col: 3, offset: 34994},
						run: (*parser).callonRenameExpr9,
						expr: &seqExpr{
							pos: position{line: 1143, col: 3, offset: 34994},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1143, col: 3, offset: 34994},
									label: "originalPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1143, col: 19, offset: 35010},
										name: "RenamePattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1143, col: 33, offset: 35024},
									name: "AS",
								},
								&labeledExpr{
									pos:   position{line: 1143, col: 36, offset: 35027},
									label: "newPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1143, col: 47, offset: 35038},
										name: "RenamePattern",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RexBlock",
			pos:  position{line: 1165, col: 1, offset: 35604},
			expr: &actionExpr{
				pos: position{line: 1165, col: 13, offset: 35616},
				run: (*parser).callonRexBlock1,
				expr: &seqExpr{
					pos: position{line: 1165, col: 13, offset: 35616},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1165, col: 13, offset: 35616},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1165, col: 18, offset: 35621},
							name: "CMD_REX",
						},
						&litMatcher{
							pos:        position{line: 1165, col: 26, offset: 35629},
							val:        "field",
							ignoreCase: false,
							want:       "\"field\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1165, col: 34, offset: 35637},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1165, col: 40, offset: 35643},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1165, col: 46, offset: 35649},
								name: "EvalFieldToRead",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1165, col: 62, offset: 35665},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 1165, col: 68, offset: 35671},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 1165, col: 72, offset: 35675},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "SortBlock",
			pos:  position{line: 1193, col: 1, offset: 36378},
			expr: &actionExpr{
				pos: position{line: 1193, col: 14, offset: 36391},
				run: (*parser).callonSortBlock1,
				expr: &seqExpr{
					pos: position{line: 1193, col: 14, offset: 36391},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1193, col: 14, offset: 36391},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1193, col: 19, offset: 36396},
							name: "CMD_SORT",
						},
						&labeledExpr{
							pos:   position{line: 1193, col: 28, offset: 36405},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 1193, col: 34, offset: 36411},
								expr: &ruleRefExpr{
									pos:  position{line: 1193, col: 35, offset: 36412},
									name: "SortLimit",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1193, col: 47, offset: 36424},
							label: "sortByEles",
							expr: &ruleRefExpr{
								pos:  position{line: 1193, col: 58, offset: 36435},
								name: "SortElements",
							},
						},
					},
				},
			},
		},
		{
			name: "SortLimit",
			pos:  position{line: 1230, col: 1, offset: 37286},
			expr: &actionExpr{
				pos: position{line: 1230, col: 14, offset: 37299},
				run: (*parser).callonSortLimit1,
				expr: &seqExpr{
					pos: position{line: 1230, col: 14, offset: 37299},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 1230, col: 14, offset: 37299},
							expr: &seqExpr{
								pos: position{line: 1230, col: 15, offset: 37300},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1230, col: 15, offset: 37300},
										val:        "limit",
										ignoreCase: false,
										want:       "\"limit\"",
									},
									&ruleRefExpr{
										pos:  position{line: 1230, col: 23, offset: 37308},
										name: "EQUAL",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1230, col: 31, offset: 37316},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 1230, col: 40, offset: 37325},
								name: "IntegerAsString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1230, col: 56, offset: 37341},
							name: "SPACE",
						},
					},
				},
			},
		},
		{
			name: "EvalBlock",
			pos:  position{line: 1244, col: 1, offset: 37640},
			expr: &actionExpr{
				pos: position{line: 1244, col: 14, offset: 37653},
				run: (*parser).callonEvalBlock1,
				expr: &seqExpr{
					pos: position{line: 1244, col: 14, offset: 37653},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1244, col: 14, offset: 37653},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1244, col: 19, offset: 37658},
							name: "CMD_EVAL",
						},
						&labeledExpr{
							pos:   position{line: 1244, col: 28, offset: 37667},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1244, col: 34, offset: 37673},
								name: "SingleEval",
							},
						},
						&labeledExpr{
							pos:   position{line: 1244, col: 45, offset: 37684},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1244, col: 50, offset: 37689},
								expr: &seqExpr{
									pos: position{line: 1244, col: 51, offset: 37690},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1244, col: 51, offset: 37690},
											name: "COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 1244, col: 57, offset: 37696},
											name: "SingleEval",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleEval",
			pos:  position{line: 1271, col: 1, offset: 38497},
			expr: &actionExpr{
				pos: position{line: 1271, col: 15, offset: 38511},
				run: (*parser).callonSingleEval1,
				expr: &seqExpr{
					pos: position{line: 1271, col: 15, offset: 38511},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1271, col: 15, offset: 38511},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1271, col: 21, offset: 38517},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1271, col: 31, offset: 38527},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1271, col: 37, offset: 38533},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 1271, col: 42, offset: 38538},
								name: "EvalExpression",
							},
						},
					},
				},
			},
		},
		{
			name: "EvalExpression",
			pos:  position{line: 1284, col: 1, offset: 38939},
			expr: &actionExpr{
				pos: position{line: 1284, col: 19, offset: 38957},
				run: (*parser).callonEvalExpression1,
				expr: &labeledExpr{
					pos:   position{line: 1284, col: 19, offset: 38957},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 1284, col: 25, offset: 38963},
						name: "ValueExpr",
					},
				},
			},
		},
		{
			name: "ConditionExpr",
			pos:  position{line: 1292, col: 1, offset: 39110},
			expr: &actionExpr{
				pos: position{line: 1292, col: 18, offset: 39127},
				run: (*parser).callonConditionExpr1,
				expr: &seqExpr{
					pos: position{line: 1292, col: 18, offset: 39127},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1292, col: 18, offset: 39127},
							val:        "if",
							ignoreCase: false,
							want:       "\"if\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1292, col: 23, offset: 39132},
							name: "L_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 1292, col: 31, offset: 39140},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 1292, col: 41, offset: 39150},
								name: "BoolExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1292, col: 50, offset: 39159},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 1292, col: 56, offset: 39165},
							label: "trueValue",
							expr: &ruleRefExpr{
								pos:  position{line: 1292, col: 66, offset: 39175},
								name: "ValueExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1292, col: 76, offset: 39185},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 1292, col: 82, offset: 39191},
							label: "falseValue",
							expr: &ruleRefExpr{
								pos:  position{line: 1292, col: 93, offset: 39202},
								name: "ValueExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1292, col: 103, offset: 39212},
							name: "R_PAREN",
						},
					},
				},
			},
		},
		{
			name: "TextExpr",
			pos:  position{line: 1305, col: 1, offset: 39617},
			expr: &choiceExpr{
				pos: position{line: 1305, col: 13, offset: 39629},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1305, col: 13, offset: 39629},
						run: (*parser).callonTextExpr2,
						expr: &seqExpr{
							pos: position{line: 1305, col: 14, offset: 39630},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1305, col: 14, offset: 39630},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1305, col: 22, offset: 39638},
										val:        "lower",
										ignoreCase: false,
										want:       "\"lower\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1305, col: 31, offset: 39647},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1305, col: 39, offset: 39655},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1305, col: 50, offset: 39666},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1305, col: 61, offset: 39677},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1318, col: 3, offset: 39988},
						run: (*parser).callonTextExpr10,
						expr: &seqExpr{
							pos: position{line: 1318, col: 4, offset: 39989},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1318, col: 4, offset: 39989},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1318, col: 12, offset: 39997},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1318, col: 12, offset: 39997},
												val:        "max",
												ignoreCase: false,
												want:       "\"max\"",
											},
											&litMatcher{
												pos:        position{line: 1318, col: 20, offset: 40005},
												val:        "min",
												ignoreCase: false,
												want:       "\"min\"",
											},
											&litMatcher{
												pos:        position{line: 1318, col: 28, offset: 40013},
												val:        "mvappend",
												ignoreCase: false,
												want:       "\"mvappend\"",
											},
											&litMatcher{
												pos:        position{line: 1318, col: 41, offset: 40026},
												val:        "mvfind",
												ignoreCase: false,
												want:       "\"mvfind\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1318, col: 51, offset: 40036},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1318, col: 59, offset: 40044},
									label: "firstVal",
									expr: &ruleRefExpr{
										pos:  position{line: 1318, col: 68, offset: 40053},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1318, col: 79, offset: 40064},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1318, col: 84, offset: 40069},
										expr: &seqExpr{
											pos: position{line: 1318, col: 85, offset: 40070},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1318, col: 85, offset: 40070},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1318, col: 91, offset: 40076},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1318, col: 104, offset: 40089},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1340, col: 3, offset: 40689},
						run: (*parser).callonTextExpr27,
						expr: &seqExpr{
							pos: position{line: 1340, col: 4, offset: 40690},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1340, col: 4, offset: 40690},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1340, col: 12, offset: 40698},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1340, col: 12, offset: 40698},
												val:        "urldecode",
												ignoreCase: false,
												want:       "\"urldecode\"",
											},
											&litMatcher{
												pos:        position{line: 1340, col: 26, offset: 40712},
												val:        "mvcount",
												ignoreCase: false,
												want:       "\"mvcount\"",
											},
											&litMatcher{
												pos:        position{line: 1340, col: 38, offset: 40724},
												val:        "mvdedup",
												ignoreCase: false,
												want:       "\"mvdedup\"",
											},
											&litMatcher{
												pos:        position{line: 1340, col: 50, offset: 40736},
												val:        "mvsort",
												ignoreCase: false,
												want:       "\"mvsort\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1340, col: 60, offset: 40746},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1340, col: 68, offset: 40754},
									label: "url",
									expr: &ruleRefExpr{
										pos:  position{line: 1340, col: 72, offset: 40758},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1340, col: 83, offset: 40769},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1352, col: 3, offset: 41076},
						run: (*parser).callonTextExpr39,
						expr: &seqExpr{
							pos: position{line: 1352, col: 4, offset: 41077},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1352, col: 4, offset: 41077},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1352, col: 12, offset: 41085},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1352, col: 12, offset: 41085},
												val:        "split",
												ignoreCase: false,
												want:       "\"split\"",
											},
											&litMatcher{
												pos:        position{line: 1352, col: 22, offset: 41095},
												val:        "mvjoin",
												ignoreCase: false,
												want:       "\"mvjoin\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1352, col: 32, offset: 41105},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1352, col: 40, offset: 41113},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1352, col: 51, offset: 41124},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1352, col: 62, offset: 41135},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1352, col: 68, offset: 41141},
									label: "delim",
									expr: &ruleRefExpr{
										pos:  position{line: 1352, col: 74, offset: 41147},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1352, col: 85, offset: 41158},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1364, col: 3, offset: 41491},
						run: (*parser).callonTextExpr52,
						expr: &seqExpr{
							pos: position{line: 1364, col: 4, offset: 41492},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1364, col: 4, offset: 41492},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1364, col: 12, offset: 41500},
										val:        "substr",
										ignoreCase: false,
										want:       "\"substr\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1364, col: 22, offset: 41510},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1364, col: 30, offset: 41518},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1364, col: 41, offset: 41529},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1364, col: 52, offset: 41540},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1364, col: 58, offset: 41546},
									label: "startIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 1364, col: 69, offset: 41557},
										name: "NumericExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1364, col: 81, offset: 41569},
									label: "lengthParam",
									expr: &zeroOrOneExpr{
										pos: position{line: 1364, col: 93, offset: 41581},
										expr: &seqExpr{
											pos: position{line: 1364, col: 94, offset: 41582},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1364, col: 94, offset: 41582},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1364, col: 100, offset: 41588},
													name: "NumericExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1364, col: 114, offset: 41602},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1389, col: 3, offset: 42432},
						run: (*parser).callonTextExpr68,
						expr: &seqExpr{
							pos: position{line: 1389, col: 3, offset: 42432},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1389, col: 3, offset: 42432},
									val:        "tostring",
									ignoreCase: false,
									want:       "\"tostring\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1389, col: 14, offset: 42443},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1389, col: 22, offset: 42451},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 1389, col: 28, offset: 42457},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1389, col: 38, offset: 42467},
									label: "format",
									expr: &zeroOrOneExpr{
										pos: position{line: 1389, col: 45, offset: 42474},
										expr: &seqExpr{
											pos: position{line: 1389, col: 46, offset: 42475},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1389, col: 46, offset: 42475},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1389, col: 52, offset: 42481},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1389, col: 66, offset: 42495},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1402, col: 3, offset: 42864},
						run: (*parser).callonTextExpr80,
						expr: &seqExpr{
							pos: position{line: 1402, col: 4, offset: 42865},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1402, col: 4, offset: 42865},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1402, col: 12, offset: 42873},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1402, col: 12, offset: 42873},
												val:        "ltrim",
												ignoreCase: false,
												want:       "\"ltrim\"",
											},
											&litMatcher{
												pos:        position{line: 1402, col: 22, offset: 42883},
												val:        "rtrim",
												ignoreCase: false,
												want:       "\"rtrim\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1402, col: 31, offset: 42892},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1402, col: 39, offset: 42900},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1402, col: 45, offset: 42906},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1402, col: 57, offset: 42918},
									label: "strToRemoveExpr",
									expr: &zeroOrOneExpr{
										pos: position{line: 1402, col: 73, offset: 42934},
										expr: &ruleRefExpr{
											pos:  position{line: 1402, col: 74, offset: 42935},
											name: "StrToRemoveExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1402, col: 92, offset: 42953},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1421, col: 3, offset: 43393},
						run: (*parser).callonTextExpr93,
						expr: &seqExpr{
							pos: position{line: 1421, col: 4, offset: 43394},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1421, col: 4, offset: 43394},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1421, col: 12, offset: 43402},
										val:        "mvfilter",
										ignoreCase: false,
										want:       "\"mvfilter\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1421, col: 24, offset: 43414},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1421, col: 32, offset: 43422},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 1421, col: 42, offset: 43432},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1421, col: 51, offset: 43441},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1434, col: 3, offset: 43776},
						run: (*parser).callonTextExpr101,
						expr: &seqExpr{
							pos: position{line: 1434, col: 4, offset: 43777},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1434, col: 4, offset: 43777},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1434, col: 12, offset: 43785},
										val:        "mvindex",
										ignoreCase: false,
										want:       "\"mvindex\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1434, col: 23, offset: 43796},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1434, col: 31, offset: 43804},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1434, col: 42, offset: 43815},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1434, col: 53, offset: 43826},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1434, col: 59, offset: 43832},
									label: "startIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 1434, col: 70, offset: 43843},
										name: "NumericExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1434, col: 82, offset: 43855},
									label: "endIndex",
									expr: &zeroOrOneExpr{
										pos: position{line: 1434, col: 91, offset: 43864},
										expr: &ruleRefExpr{
											pos:  position{line: 1434, col: 92, offset: 43865},
											name: "NumericParamExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1434, col: 111, offset: 43884},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1450, col: 3, offset: 44312},
						run: (*parser).callonTextExpr115,
						expr: &seqExpr{
							pos: position{line: 1450, col: 4, offset: 44313},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1450, col: 4, offset: 44313},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1450, col: 12, offset: 44321},
										val:        "mvmap",
										ignoreCase: false,
										want:       "\"mvmap\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1450, col: 21, offset: 44330},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1450, col: 29, offset: 44338},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1450, col: 40, offset: 44349},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1450, col: 51, offset: 44360},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1450, col: 57, offset: 44366},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1450, col: 62, offset: 44371},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1450, col: 72, offset: 44381},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1463, col: 3, offset: 44707},
						run: (*parser).callonTextExpr126,
						expr: &seqExpr{
							pos: position{line: 1463, col: 4, offset: 44708},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1463, col: 4, offset: 44708},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1463, col: 12, offset: 44716},
										val:        "mvrange",
										ignoreCase: false,
										want:       "\"mvrange\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1463, col: 23, offset: 44727},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1463, col: 31, offset: 44735},
									label: "startIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 1463, col: 42, offset: 44746},
										name: "NumericExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1463, col: 54, offset: 44758},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1463, col: 60, offset: 44764},
									label: "endIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 1463, col: 69, offset: 44773},
										name: "NumericExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1463, col: 81, offset: 44785},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1463, col: 87, offset: 44791},
									label: "stringExpr",
									expr: &zeroOrOneExpr{
										pos: position{line: 1463, col: 98, offset: 44802},
										expr: &ruleRefExpr{
											pos:  position{line: 1463, col: 99, offset: 44803},
											name: "StringExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1463, col: 112, offset: 44816},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1479, col: 3, offset: 45246},
						run: (*parser).callonTextExpr141,
						expr: &seqExpr{
							pos: position{line: 1479, col: 4, offset: 45247},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1479, col: 4, offset: 45247},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1479, col: 12, offset: 45255},
										val:        "mvzip",
										ignoreCase: false,
										want:       "\"mvzip\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1479, col: 21, offset: 45264},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1479, col: 29, offset: 45272},
									label: "mvLeft",
									expr: &ruleRefExpr{
										pos:  position{line: 1479, col: 36, offset: 45279},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1479, col: 47, offset: 45290},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1479, col: 53, offset: 45296},
									label: "mvRight",
									expr: &ruleRefExpr{
										pos:  position{line: 1479, col: 61, offset: 45304},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1479, col: 72, offset: 45315},
									label: "rest",
									expr: &zeroOrOneExpr{
										pos: position{line: 1479, col: 77, offset: 45320},
										expr: &seqExpr{
											pos: position{line: 1479, col: 78, offset: 45321},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1479, col: 78, offset: 45321},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1479, col: 84, offset: 45327},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1479, col: 97, offset: 45340},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1500, col: 3, offset: 45864},
						run: (*parser).callonTextExpr157,
						expr: &seqExpr{
							pos: position{line: 1500, col: 4, offset: 45865},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1500, col: 4, offset: 45865},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1500, col: 12, offset: 45873},
										val:        "mv_to_json_array",
										ignoreCase: false,
										want:       "\"mv_to_json_array\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1500, col: 32, offset: 45893},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1500, col: 40, offset: 45901},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1500, col: 51, offset: 45912},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1500, col: 62, offset: 45923},
									label: "rest",
									expr: &zeroOrOneExpr{
										pos: position{line: 1500, col: 67, offset: 45928},
										expr: &seqExpr{
											pos: position{line: 1500, col: 68, offset: 45929},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1500, col: 68, offset: 45929},
													name: "COMMA",
												},
												&choiceExpr{
													pos: position{line: 1500, col: 75, offset: 45936},
													alternatives: []any{
														&litMatcher{
															pos:        position{line: 1500, col: 75, offset: 45936},
															val:        "true",
															ignoreCase: false,
															want:       "\"true\"",
														},
														&litMatcher{
															pos:        position{line: 1500, col: 84, offset: 45945},
															val:        "false",
															ignoreCase: false,
															want:       "\"false\"",
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1500, col: 93, offset: 45954},
													val:        "()",
													ignoreCase: false,
													want:       "\"()\"",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1500, col: 100, offset: 45961},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StrToRemoveExpr",
			pos:  position{line: 1526, col: 1, offset: 46595},
			expr: &actionExpr{
				pos: position{line: 1526, col: 20, offset: 46614},
				run: (*parser).callonStrToRemoveExpr1,
				expr: &seqExpr{
					pos: position{line: 1526, col: 20, offset: 46614},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1526, col: 20, offset: 46614},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 1526, col: 26, offset: 46620},
							label: "strToRemove",
							expr: &ruleRefExpr{
								pos:  position{line: 1526, col: 38, offset: 46632},
								name: "String",
							},
						},
					},
				},
			},
		},
		{
			name: "EvalFieldToRead",
			pos:  position{line: 1532, col: 1, offset: 46817},
			expr: &choiceExpr{
				pos: position{line: 1532, col: 20, offset: 46836},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1532, col: 20, offset: 46836},
						run: (*parser).callonEvalFieldToRead2,
						expr: &seqExpr{
							pos: position{line: 1532, col: 20, offset: 46836},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 1532, col: 20, offset: 46836},
									expr: &charClassMatcher{
										pos:        position{line: 1532, col: 20, offset: 46836},
										val:        "[a-zA-Z_]",
										chars:      []rune{'_'},
										ranges:     []rune{'a', 'z', 'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&notExpr{
									pos: position{line: 1532, col: 31, offset: 46847},
									expr: &litMatcher{
										pos:        position{line: 1532, col: 33, offset: 46849},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1535, col: 3, offset: 46891},
						run: (*parser).callonEvalFieldToRead8,
						expr: &seqExpr{
							pos: position{line: 1535, col: 3, offset: 46891},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1535, col: 3, offset: 46891},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&labeledExpr{
									pos:   position{line: 1535, col: 7, offset: 46895},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1535, col: 13, offset: 46901},
										name: "FieldName",
									},
								},
								&litMatcher{
									pos:        position{line: 1535, col: 23, offset: 46911},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "WhereBlock",
			pos:  position{line: 1540, col: 1, offset: 46979},
			expr: &actionExpr{
				pos: position{line: 1540, col: 15, offset: 46993},
				run: (*parser).callonWhereBlock1,
				expr: &seqExpr{
					pos: position{line: 1540, col: 15, offset: 46993},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1540, col: 15, offset: 46993},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1540, col: 20, offset: 46998},
							name: "CMD_WHERE",
						},
						&labeledExpr{
							pos:   position{line: 1540, col: 30, offset: 47008},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 1540, col: 40, offset: 47018},
								name: "BoolExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExpr",
			pos:  position{line: 1552, col: 1, offset: 47311},
			expr: &actionExpr{
				pos: position{line: 1552, col: 13, offset: 47323},
				run: (*parser).callonBoolExpr1,
				expr: &labeledExpr{
					pos:   position{line: 1552, col: 13, offset: 47323},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 1552, col: 18, offset: 47328},
						name: "BoolExprLevel4",
					},
				},
			},
		},
		{
			name: "BoolExprLevel4",
			pos:  position{line: 1557, col: 1, offset: 47398},
			expr: &actionExpr{
				pos: position{line: 1557, col: 19, offset: 47416},
				run: (*parser).callonBoolExprLevel41,
				expr: &seqExpr{
					pos: position{line: 1557, col: 19, offset: 47416},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1557, col: 19, offset: 47416},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1557, col: 25, offset: 47422},
								name: "BoolExprLevel3",
							},
						},
						&labeledExpr{
							pos:   position{line: 1557, col: 40, offset: 47437},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1557, col: 45, offset: 47442},
								expr: &seqExpr{
									pos: position{line: 1557, col: 46, offset: 47443},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1557, col: 46, offset: 47443},
											name: "OR",
										},
										&ruleRefExpr{
											pos:  position{line: 1557, col: 49, offset: 47446},
											name: "BoolExprLevel3",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel3",
			pos:  position{line: 1577, col: 1, offset: 47884},
			expr: &actionExpr{
				pos: position{line: 1577, col: 19, offset: 47902},
				run: (*parser).callonBoolExprLevel31,
				expr: &seqExpr{
					pos: position{line: 1577, col: 19, offset: 47902},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1577, col: 19, offset: 47902},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1577, col: 25, offset: 47908},
								name: "BoolExprLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 1577, col: 40, offset: 47923},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1577, col: 45, offset: 47928},
								expr: &seqExpr{
									pos: position{line: 1577, col: 46, offset: 47929},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1577, col: 46, offset: 47929},
											name: "AND",
										},
										&ruleRefExpr{
											pos:  position{line: 1577, col: 50, offset: 47933},
											name: "BoolExprLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel2",
			pos:  position{line: 1597, col: 1, offset: 48372},
			expr: &choiceExpr{
				pos: position{line: 1597, col: 19, offset: 48390},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1597, col: 19, offset: 48390},
						run: (*parser).callonBoolExprLevel22,
						expr: &seqExpr{
							pos: position{line: 1597, col: 19, offset: 48390},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1597, col: 19, offset: 48390},
									name: "NOT",
								},
								&ruleRefExpr{
									pos:  position{line: 1597, col: 23, offset: 48394},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1597, col: 31, offset: 48402},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 1597, col: 37, offset: 48408},
										name: "BoolExprLevel1",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1597, col: 52, offset: 48423},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1607, col: 3, offset: 48626},
						run: (*parser).callonBoolExprLevel29,
						expr: &labeledExpr{
							pos:   position{line: 1607, col: 3, offset: 48626},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1607, col: 9, offset: 48632},
								name: "BoolExprLevel1",
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel1",
			pos:  position{line: 1612, col: 1, offset: 48703},
			expr: &choiceExpr{
				pos: position{line: 1612, col: 19, offset: 48721},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1612, col: 19, offset: 48721},
						run: (*parser).callonBoolExprLevel12,
						expr: &seqExpr{
							pos: position{line: 1612, col: 19, offset: 48721},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1612, col: 19, offset: 48721},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1612, col: 27, offset: 48729},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 1612, col: 33, offset: 48735},
										name: "BoolExprLevel4",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1612, col: 48, offset: 48750},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1615, col: 3, offset: 48786},
						run: (*parser).callonBoolExprLevel18,
						expr: &seqExpr{
							pos: position{line: 1615, col: 4, offset: 48787},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1615, col: 4, offset: 48787},
									label: "op",
									expr: &choiceExpr{
										pos: position{line: 1615, col: 8, offset: 48791},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1615, col: 8, offset: 48791},
												val:        "isbool",
												ignoreCase: false,
												want:       "\"isbool\"",
											},
											&litMatcher{
												pos:        position{line: 1615, col: 19, offset: 48802},
												val:        "isint",
												ignoreCase: false,
												want:       "\"isint\"",
											},
											&litMatcher{
												pos:        position{line: 1615, col: 29, offset: 48812},
												val:        "isstr",
												ignoreCase: false,
												want:       "\"isstr\"",
											},
											&litMatcher{
												pos:        position{line: 1615, col: 39, offset: 48822},
												val:        "isnull",
												ignoreCase: false,
												want:       "\"isnull\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1615, col: 49, offset: 48832},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1615, col: 57, offset: 48840},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 1615, col: 63, offset: 48846},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1615, col: 73, offset: 48856},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1628, col: 3, offset: 49192},
						run: (*parser).callonBoolExprLevel120,
						expr: &labeledExpr{
							pos:   position{line: 1628, col: 3, offset: 49192},
							label: "likeExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 1628, col: 13, offset: 49202},
								name: "LikeExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "LikeExpr",
			pos:  position{line: 1631, col: 1, offset: 49240},
			expr: &choiceExpr{
				pos: position{line: 1631, col: 13, offset: 49252},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1631, col: 13, offset: 49252},
						run: (*parser).callonLikeExpr2,
						expr: &seqExpr{
							pos: position{line: 1631, col: 13, offset: 49252},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1631, col: 13, offset: 49252},
									label: "left",
									expr: &ruleRefExpr{
										pos:  position{line: 1631, col: 18, offset: 49257},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1631, col: 28, offset: 49267},
									name: "SPACE",
								},
								&litMatcher{
									pos:        position{line: 1631, col: 34, offset: 49273},
									val:        "LIKE",
									ignoreCase: false,
									want:       "\"LIKE\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1631, col: 41, offset: 49280},
									name: "SPACE",
								},
								&labeledExpr{
									pos:   position{line: 1631, col: 47, offset: 49286},
									label: "right",
									expr: &ruleRefExpr{
										pos:  position{line: 1631, col: 53, offset: 49292},
										name: "ValueExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1640, col: 3, offset: 49512},
						run: (*parser).callonLikeExpr11,
						expr: &seqExpr{
							pos: position{line: 1640, col: 3, offset: 49512},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1640, col: 3, offset: 49512},
									val:        "like",
									ignoreCase: false,
									want:       "\"like\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1640, col: 10, offset: 49519},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1640, col: 18, offset: 49527},
									label: "stringr",
									expr: &ruleRefExpr{
										pos:  position{line: 1640, col: 26, offset: 49535},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1640, col: 36, offset: 49545},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1640, col: 42, offset: 49551},
									label: "pattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1640, col: 50, offset: 49559},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1640, col: 60, offset: 49569},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1649, col: 3, offset: 49800},
						run: (*parser).callonLikeExpr21,
						expr: &seqExpr{
							pos: position{line: 1649, col: 3, offset: 49800},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1649, col: 3, offset: 49800},
									val:        "match",
									ignoreCase: false,
									want:       "\"match\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1649, col: 11, offset: 49808},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1649, col: 19, offset: 49816},
									label: "stringVal",
									expr: &ruleRefExpr{
										pos:  position{line: 1649, col: 29, offset: 49826},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1649, col: 39, offset: 49836},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1649, col: 45, offset: 49842},
									label: "pattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1649, col: 53, offset: 49850},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1649, col: 63, offset: 49860},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1658, col: 3, offset: 50094},
						run: (*parser).callonLikeExpr31,
						expr: &seqExpr{
							pos: position{line: 1658, col: 3, offset: 50094},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1658, col: 3, offset: 50094},
									val:        "cidrmatch",
									ignoreCase: false,
									want:       "\"cidrmatch\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1658, col: 15, offset: 50106},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1658, col: 23, offset: 50114},
									label: "cidr",
									expr: &ruleRefExpr{
										pos:  position{line: 1658, col: 28, offset: 50119},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1658, col: 38, offset: 50129},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1658, col: 44, offset: 50135},
									label: "ip",
									expr: &ruleRefExpr{
										pos:  position{line: 1658, col: 47, offset: 50138},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1658, col: 57, offset: 50148},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1667, col: 3, offset: 50368},
						run: (*parser).callonLikeExpr41,
						expr: &labeledExpr{
							pos:   position{line: 1667, col: 3, offset: 50368},
							label: "inExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 1667, col: 11, offset: 50376},
								name: "InExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1670, col: 3, offset: 50412},
						run: (*parser).callonLikeExpr44,
						expr: &labeledExpr{
							pos:   position{line: 1670, col: 3, offset: 50412},
							label: "boolComparisonExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 1670, col: 22, offset: 50431},
								name: "BoolComparisonExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "BoolComparisonExpr",
			pos:  position{line: 1674, col: 1, offset: 50490},
			expr: &actionExpr{
				pos: position{line: 1674, col: 23, offset: 50512},
				run: (*parser).callonBoolComparisonExpr1,
				expr: &seqExpr{
					pos: position{line: 1674, col: 23, offset: 50512},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1674, col: 23, offset: 50512},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 1674, col: 28, offset: 50517},
								name: "ValueExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 1674, col: 38, offset: 50527},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 1674, col: 41, offset: 50530},
								name: "EqualityOrInequality",
							},
						},
						&labeledExpr{
							pos:   position{line: 1674, col: 62, offset: 50551},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 1674, col: 68, offset: 50557},
								name: "ValueExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "InExpr",
			pos:  position{line: 1686, col: 1, offset: 50783},
			expr: &choiceExpr{
				pos: position{line: 1686, col: 11, offset: 50793},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1686, col: 11, offset: 50793},
						run: (*parser).callonInExpr2,
						expr: &seqExpr{
							pos: position{line: 1686, col: 11, offset: 50793},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1686, col: 11, offset: 50793},
									label: "left",
									expr: &ruleRefExpr{
										pos:  position{line: 1686, col: 16, offset: 50798},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1686, col: 26, offset: 50808},
									name: "SPACE",
								},
								&litMatcher{
									pos:        position{line: 1686, col: 32, offset: 50814},
									val:        "in",
									ignoreCase: false,
									want:       "\"in\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1686, col: 37, offset: 50819},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1686, col: 45, offset: 50827},
									label: "valueToJudge",
									expr: &ruleRefExpr{
										pos:  position{line: 1686, col: 58, offset: 50840},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1686, col: 68, offset: 50850},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1686, col: 73, offset: 50855},
										expr: &seqExpr{
											pos: position{line: 1686, col: 74, offset: 50856},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1686, col: 74, offset: 50856},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1686, col: 80, offset: 50862},
													name: "ValueExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1686, col: 92, offset: 50874},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1705, col: 3, offset: 51425},
						run: (*parser).callonInExpr17,
						expr: &seqExpr{
							pos: position{line: 1705, col: 3, offset: 51425},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1705, col: 3, offset: 51425},
									val:        "in",
									ignoreCase: false,
									want:       "\"in\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1705, col: 8, offset: 51430},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1705, col: 16, offset: 51438},
									label: "valueToJudge",
									expr: &ruleRefExpr{
										pos:  position{line: 1705, col: 29, offset: 51451},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1705, col: 39, offset: 51461},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1705, col: 44, offset: 51466},
										expr: &seqExpr{
											pos: position{line: 1705, col: 45, offset: 51467},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1705, col: 45, offset: 51467},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1705, col: 51, offset: 51473},
													name: "ValueExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1705, col: 63, offset: 51485},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ValueExpr",
			pos:  position{line: 1730, col: 1, offset: 52275},
			expr: &choiceExpr{
				pos: position{line: 1730, col: 14, offset: 52288},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1730, col: 14, offset: 52288},
						run: (*parser).callonValueExpr2,
						expr: &labeledExpr{
							pos:   position{line: 1730, col: 14, offset: 52288},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 1730, col: 24, offset: 52298},
								name: "ConditionExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1739, col: 3, offset: 52488},
						run: (*parser).callonValueExpr5,
						expr: &seqExpr{
							pos: position{line: 1739, col: 3, offset: 52488},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1739, col: 3, offset: 52488},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1739, col: 12, offset: 52497},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 1739, col: 22, offset: 52507},
										name: "ConditionExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1739, col: 37, offset: 52522},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1748, col: 3, offset: 52706},
						run: (*parser).callonValueExpr11,
						expr: &labeledExpr{
							pos:   position{line: 1748, col: 3, offset: 52706},
							label: "numeric",
							expr: &ruleRefExpr{
								pos:  position{line: 1748, col: 11, offset: 52714},
								name: "NumericExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1757, col: 3, offset: 52894},
						run: (*parser).callonValueExpr14,
						expr: &labeledExpr{
							pos:   position{line: 1757, col: 3, offset: 52894},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 1757, col: 7, offset: 52898},
								name: "StringExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1766, col: 3, offset: 53070},
						run: (*parser).callonValueExpr17,
						expr: &seqExpr{
							pos: position{line: 1766, col: 3, offset: 53070},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1766, col: 3, offset: 53070},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1766, col: 12, offset: 53079},
									label: "str",
									expr: &ruleRefExpr{
										pos:  position{line: 1766, col: 16, offset: 53083},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1766, col: 28, offset: 53095},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1775, col: 3, offset: 53264},
						run: (*parser).callonValueExpr23,
						expr: &seqExpr{
							pos: position{line: 1775, col: 3, offset: 53264},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1775, col: 3, offset: 53264},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1775, col: 11, offset: 53272},
									label: "boolean",
									expr: &ruleRefExpr{
										pos:  position{line: 1775, col: 19, offset: 53280},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1775, col: 28, offset: 53289},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StringExpr",
			pos:  position{line: 1785, col: 1, offset: 53460},
			expr: &choiceExpr{
				pos: position{line: 1785, col: 15, offset: 53474},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1785, col: 15, offset: 53474},
						run: (*parser).callonStringExpr2,
						expr: &seqExpr{
							pos: position{line: 1785, col: 15, offset: 53474},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1785, col: 15, offset: 53474},
									label: "text",
									expr: &ruleRefExpr{
										pos:  position{line: 1785, col: 20, offset: 53479},
										name: "TextExpr",
									},
								},
								&notExpr{
									pos: position{line: 1785, col: 29, offset: 53488},
									expr: &ruleRefExpr{
										pos:  position{line: 1785, col: 31, offset: 53490},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1793, col: 3, offset: 53660},
						run: (*parser).callonStringExpr8,
						expr: &seqExpr{
							pos: position{line: 1793, col: 3, offset: 53660},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1793, col: 3, offset: 53660},
									label: "str",
									expr: &ruleRefExpr{
										pos:  position{line: 1793, col: 7, offset: 53664},
										name: "QuotedString",
									},
								},
								&notExpr{
									pos: position{line: 1793, col: 20, offset: 53677},
									expr: &ruleRefExpr{
										pos:  position{line: 1793, col: 22, offset: 53679},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1801, col: 3, offset: 53844},
						run: (*parser).callonStringExpr14,
						expr: &seqExpr{
							pos: position{line: 1801, col: 3, offset: 53844},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1801, col: 3, offset: 53844},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1801, col: 9, offset: 53850},
										name: "EvalFieldToRead",
									},
								},
								&notExpr{
									pos: position{line: 1801, col: 25, offset: 53866},
									expr: &choiceExpr{
										pos: position{line: 1801, col: 27, offset: 53868},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 1801, col: 27, offset: 53868},
												name: "OpPlus",
											},
											&ruleRefExpr{
												pos:  position{line: 1801, col: 36, offset: 53877},
												name: "OpMinus",
											},
											&ruleRefExpr{
												pos:  position{line: 1801, col: 46, offset: 53887},
												name: "OpMul",
											},
											&ruleRefExpr{
												pos:  position{line: 1801, col: 54, offset: 53895},
												name: "OpDiv",
											},
											&ruleRefExpr{
												pos:  position{line: 1801, col: 62, offset: 53903},
												name: "EVAL_CONCAT",
											},
											&litMatcher{
												pos:        position{line: 1801, col: 76, offset: 53917},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1809, col: 3, offset: 54067},
						run: (*parser).callonStringExpr26,
						expr: &labeledExpr{
							pos:   position{line: 1809, col: 3, offset: 54067},
							label: "concat",
							expr: &ruleRefExpr{
								pos:  position{line: 1809, col: 10, offset: 54074},
								name: "ConcatExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "ConcatExpr",
			pos:  position{line: 1819, col: 1, offset: 54280},
			expr: &actionExpr{
				pos: position{line: 1819, col: 15, offset: 54294},
				run: (*parser).callonConcatExpr1,
				expr: &seqExpr{
					pos: position{line: 1819, col: 15, offset: 54294},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1819, col: 15, offset: 54294},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1819, col: 21, offset: 54300},
								name: "ConcatAtom",
							},
						},
						&labeledExpr{
							pos:   position{line: 1819, col: 32, offset: 54311},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1819, col: 37, offset: 54316},
								expr: &seqExpr{
									pos: position{line: 1819, col: 38, offset: 54317},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1819, col: 38, offset: 54317},
											name: "EVAL_CONCAT",
										},
										&ruleRefExpr{
											pos:  position{line: 1819, col: 50, offset: 54329},
											name: "ConcatAtom",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 1819, col: 63, offset: 54342},
							expr: &choiceExpr{
								pos: position{line: 1819, col: 65, offset: 54344},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1819, col: 65, offset: 54344},
										name: "OpPlus",
									},
									&ruleRefExpr{
										pos:  position{line: 1819, col: 74, offset: 54353},
										name: "OpMinus",
									},
									&ruleRefExpr{
										pos:  position{line: 1819, col: 84, offset: 54363},
										name: "OpMul",
									},
									&ruleRefExpr{
										pos:  position{line: 1819, col: 92, offset: 54371},
										name: "OpDiv",
									},
									&litMatcher{
										pos:        position{line: 1819, col: 100, offset: 54379},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcatAtom",
			pos:  position{line: 1837, col: 1, offset: 54785},
			expr: &choiceExpr{
				pos: position{line: 1837, col: 15, offset: 54799},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1837, col: 15, offset: 54799},
						run: (*parser).callonConcatAtom2,
						expr: &labeledExpr{
							pos:   position{line: 1837, col: 15, offset: 54799},
							label: "text",
							expr: &ruleRefExpr{
								pos:  position{line: 1837, col: 20, offset: 54804},
								name: "TextExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1846, col: 3, offset: 54968},
						run: (*parser).callonConcatAtom5,
						expr: &labeledExpr{
							pos:   position{line: 1846, col: 3, offset: 54968},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 1846, col: 7, offset: 54972},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1854, col: 3, offset: 55111},
						run: (*parser).callonConcatAtom8,
						expr: &labeledExpr{
							pos:   position{line: 1854, col: 3, offset: 55111},
							label: "number",
							expr: &ruleRefExpr{
								pos:  position{line: 1854, col: 10, offset: 55118},
								name: "NumberAsString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1862, col: 3, offset: 55257},
						run: (*parser).callonConcatAtom11,
						expr: &labeledExpr{
							pos:   position{line: 1862, col: 3, offset: 55257},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1862, col: 9, offset: 55263},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExpr",
			pos:  position{line: 1872, col: 1, offset: 55432},
			expr: &actionExpr{
				pos: position{line: 1872, col: 16, offset: 55447},
				run: (*parser).callonNumericExpr1,
				expr: &seqExpr{
					pos: position{line: 1872, col: 16, offset: 55447},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1872, col: 16, offset: 55447},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 1872, col: 21, offset: 55452},
								name: "NumericExprLevel3",
							},
						},
						&notExpr{
							pos: position{line: 1872, col: 39, offset: 55470},
							expr: &choiceExpr{
								pos: position{line: 1872, col: 41, offset: 55472},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1872, col: 41, offset: 55472},
										name: "EVAL_CONCAT",
									},
									&litMatcher{
										pos:        position{line: 1872, col: 55, offset: 55486},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel3",
			pos:  position{line: 1877, col: 1, offset: 55551},
			expr: &actionExpr{
				pos: position{line: 1877, col: 22, offset: 55572},
				run: (*parser).callonNumericExprLevel31,
				expr: &seqExpr{
					pos: position{line: 1877, col: 22, offset: 55572},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1877, col: 22, offset: 55572},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1877, col: 28, offset: 55578},
								name: "NumericExprLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 1877, col: 46, offset: 55596},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1877, col: 51, offset: 55601},
								expr: &seqExpr{
									pos: position{line: 1877, col: 52, offset: 55602},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 1877, col: 53, offset: 55603},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 1877, col: 53, offset: 55603},
													name: "OpPlus",
												},
												&ruleRefExpr{
													pos:  position{line: 1877, col: 62, offset: 55612},
													name: "OpMinus",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1877, col: 71, offset: 55621},
											name: "NumericExprLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel2",
			pos:  position{line: 1898, col: 1, offset: 56122},
			expr: &actionExpr{
				pos: position{line: 1898, col: 22, offset: 56143},
				run: (*parser).callonNumericExprLevel21,
				expr: &seqExpr{
					pos: position{line: 1898, col: 22, offset: 56143},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1898, col: 22, offset: 56143},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1898, col: 28, offset: 56149},
								name: "NumericExprLevel1",
							},
						},
						&labeledExpr{
							pos:   position{line: 1898, col: 46, offset: 56167},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1898, col: 51, offset: 56172},
								expr: &seqExpr{
									pos: position{line: 1898, col: 52, offset: 56173},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 1898, col: 53, offset: 56174},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 1898, col: 53, offset: 56174},
													name: "OpMul",
												},
												&ruleRefExpr{
													pos:  position{line: 1898, col: 61, offset: 56182},
													name: "OpDiv",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1898, col: 68, offset: 56189},
											name: "NumericExprLevel1",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NumericParamExpr",
			pos:  position{line: 1918, col: 1, offset: 56658},
			expr: &actionExpr{
				pos: position{line: 1918, col: 21, offset: 56678},
				run: (*parser).callonNumericParamExpr1,
				expr: &seqExpr{
					pos: position{line: 1918, col: 21, offset: 56678},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1918, col: 21, offset: 56678},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 1918, col: 27, offset: 56684},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 1918, col: 32, offset: 56689},
								name: "NumericExprLevel3",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel1",
			pos:  position{line: 1928, col: 1, offset: 56933},
			expr: &choiceExpr{
				pos: position{line: 1928, col: 22, offset: 56954},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1928, col: 22, offset: 56954},
						run: (*parser).callonNumericExprLevel12,
						expr: &seqExpr{
							pos: position{line: 1928, col: 22, offset: 56954},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1928, col: 22, offset: 56954},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1928, col: 30, offset: 56962},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1928, col: 35, offset: 56967},
										name: "NumericExprLevel3",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1928, col: 53, offset: 56985},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1931, col: 3, offset: 57020},
						run: (*parser).callonNumericExprLevel18,
						expr: &labeledExpr{
							pos:   position{line: 1931, col: 3, offset: 57020},
							label: "numericEvalExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 1931, col: 20, offset: 57037},
								name: "NumericEvalExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1934, col: 3, offset: 57091},
						run: (*parser).callonNumericExprLevel111,
						expr: &labeledExpr{
							pos:   position{line: 1934, col: 3, offset: 57091},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1934, col: 9, offset: 57097},
								name: "EvalFieldToRead",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1944, col: 3, offset: 57316},
						run: (*parser).callonNumericExprLevel114,
						expr: &labeledExpr{
							pos:   position{line: 1944, col: 3, offset: 57316},
							label: "number",
							expr: &ruleRefExpr{
								pos:  position{line: 1944, col: 10, offset: 57323},
								name: "NumberAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericEvalExpr",
			pos:  position{line: 1957, col: 1, offset: 57670},
			expr: &choiceExpr{
				pos: position{line: 1957, col: 20, offset: 57689},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1957, col: 20, offset: 57689},
						run: (*parser).callonNumericEvalExpr2,
						expr: &seqExpr{
							pos: position{line: 1957, col: 21, offset: 57690},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1957, col: 21, offset: 57690},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1957, col: 29, offset: 57698},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1957, col: 29, offset: 57698},
												val:        "abs",
												ignoreCase: false,
												want:       "\"abs\"",
											},
											&litMatcher{
												pos:        position{line: 1957, col: 37, offset: 57706},
												val:        "ceil",
												ignoreCase: false,
												want:       "\"ceil\"",
											},
											&litMatcher{
												pos:        position{line: 1957, col: 46, offset: 57715},
												val:        "ceiling",
												ignoreCase: false,
												want:       "\"ceiling\"",
											},
											&litMatcher{
												pos:        position{line: 1957, col: 58, offset: 57727},
												val:        "sqrt",
												ignoreCase: false,
												want:       "\"sqrt\"",
											},
											&litMatcher{
												pos:        position{line: 1957, col: 66, offset: 57735},
												val:        "exact",
												ignoreCase: false,
												want:       "\"exact\"",
											},
											&litMatcher{
												pos:        position{line: 1957, col: 75, offset: 57744},
												val:        "exp",
												ignoreCase: false,
												want:       "\"exp\"",
											},
											&litMatcher{
												pos:        position{line: 1957, col: 83, offset: 57752},
												val:        "floor",
												ignoreCase: false,
												want:       "\"floor\"",
											},
											&litMatcher{
												pos:        position{line: 1957, col: 93, offset: 57762},
												val:        "ln",
												ignoreCase: false,
												want:       "\"ln\"",
											},
											&litMatcher{
												pos:        position{line: 1957, col: 100, offset: 57769},
												val:        "sigfig",
												ignoreCase: false,
												want:       "\"sigfig\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1957, col: 110, offset: 57779},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1957, col: 118, offset: 57787},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1957, col: 124, offset: 57793},
										name: "NumericExprLevel3",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1957, col: 143, offset: 57812},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1977, col: 3, offset: 58324},
						run: (*parser).callonNumericEvalExpr19,
						expr: &seqExpr{
							pos: position{line: 1977, col: 3, offset: 58324},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1977, col: 3, offset: 58324},
									label: "roundExpr",
									expr: &litMatcher{
										pos:        position{line: 1977, col: 13, offset: 58334},
										val:        "round",
										ignoreCase: false,
										want:       "\"round\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1977, col: 21, offset: 58342},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1977, col: 29, offset: 58350},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1977, col: 35, offset: 58356},
										name: "NumericExprLevel3",
									},
								},
								&labeledExpr{
									pos:   position{line: 1977, col: 54, offset: 58375},
									label: "roundPrecision",
									expr: &zeroOrOneExpr{
										pos: position{line: 1977, col: 69, offset: 58390},
										expr: &ruleRefExpr{
											pos:  position{line: 1977, col: 70, offset: 58391},
											name: "NumericParamExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1977, col: 89, offset: 58410},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1998, col: 3, offset: 59028},
						run: (*parser).callonNumericEvalExpr30,
						expr: &seqExpr{
							pos: position{line: 1998, col: 4, offset: 59029},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1998, col: 4, offset: 59029},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1998, col: 12, offset: 59037},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1998, col: 12, offset: 59037},
												val:        "now",
												ignoreCase: false,
												want:       "\"now\"",
											},
											&litMatcher{
												pos:        position{line: 1998, col: 20, offset: 59045},
												val:        "pi",
												ignoreCase: false,
												want:       "\"pi\"",
											},
											&litMatcher{
												pos:        position{line: 1998, col: 27, offset: 59052},
												val:        "random",
												ignoreCase: false,
												want:       "\"random\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1998, col: 37, offset: 59062},
									name: "L_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 1998, col: 45, offset: 59070},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2011, col: 3, offset: 59356},
						run: (*parser).callonNumericEvalExpr39,
						expr: &seqExpr{
							pos: position{line: 2011, col: 3, offset: 59356},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2011, col: 3, offset: 59356},
									val:        "tonumber",
									ignoreCase: false,
									want:       "\"tonumber\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2011, col: 14, offset: 59367},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2011, col: 22, offset: 59375},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2011, col: 33, offset: 59386},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2011, col: 44, offset: 59397},
									label: "baseExpr",
									expr: &zeroOrOneExpr{
										pos: position{line: 2011, col: 53, offset: 59406},
										expr: &seqExpr{
											pos: position{line: 2011, col: 54, offset: 59407},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2011, col: 54, offset: 59407},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2011, col: 60, offset: 59413},
													name: "NumericExprLevel3",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2011, col: 80, offset: 59433},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2039, col: 3, offset: 60275},
						run: (*parser).callonNumericEvalExpr51,
						expr: &seqExpr{
							pos: position{line: 2039, col: 3, offset: 60275},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2039, col: 3, offset: 60275},
									label: "lenExpr",
									expr: &litMatcher{
										pos:        position{line: 2039, col: 12, offset: 60284},
										val:        "len",
										ignoreCase: false,
										want:       "\"len\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2039, col: 18, offset: 60290},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2039, col: 26, offset: 60298},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2039, col: 31, offset: 60303},
										name: "LenExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2039, col: 39, offset: 60311},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2042, col: 3, offset: 60346},
						run: (*parser).callonNumericEvalExpr59,
						expr: &seqExpr{
							pos: position{line: 2042, col: 4, offset: 60347},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2042, col: 4, offset: 60347},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2042, col: 12, offset: 60355},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2042, col: 12, offset: 60355},
												val:        "log",
												ignoreCase: false,
												want:       "\"log\"",
											},
											&litMatcher{
												pos:        position{line: 2042, col: 20, offset: 60363},
												val:        "pow",
												ignoreCase: false,
												want:       "\"pow\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2042, col: 27, offset: 60370},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2042, col: 35, offset: 60378},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2042, col: 41, offset: 60384},
										name: "NumericExprLevel3",
									},
								},
								&labeledExpr{
									pos:   position{line: 2042, col: 60, offset: 60403},
									label: "param",
									expr: &ruleRefExpr{
										pos:  position{line: 2042, col: 67, offset: 60410},
										name: "NumericParamExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2042, col: 85, offset: 60428},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LenExpr",
			pos:  position{line: 2073, col: 1, offset: 61266},
			expr: &choiceExpr{
				pos: position{line: 2073, col: 12, offset: 61277},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2073, col: 12, offset: 61277},
						run: (*parser).callonLenExpr2,
						expr: &seqExpr{
							pos: position{line: 2073, col: 12, offset: 61277},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2073, col: 12, offset: 61277},
									label: "str",
									expr: &ruleRefExpr{
										pos:  position{line: 2073, col: 16, offset: 61281},
										name: "QuotedString",
									},
								},
								&notExpr{
									pos: position{line: 2073, col: 29, offset: 61294},
									expr: &ruleRefExpr{
										pos:  position{line: 2073, col: 31, offset: 61296},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2089, col: 3, offset: 61657},
						run: (*parser).callonLenExpr8,
						expr: &seqExpr{
							pos: position{line: 2089, col: 3, offset: 61657},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2089, col: 3, offset: 61657},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2089, col: 9, offset: 61663},
										name: "EvalFieldToRead",
									},
								},
								&notExpr{
									pos: position{line: 2089, col: 25, offset: 61679},
									expr: &choiceExpr{
										pos: position{line: 2089, col: 27, offset: 61681},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2089, col: 27, offset: 61681},
												name: "OpPlus",
											},
											&ruleRefExpr{
												pos:  position{line: 2089, col: 36, offset: 61690},
												name: "OpMinus",
											},
											&ruleRefExpr{
												pos:  position{line: 2089, col: 46, offset: 61700},
												name: "OpMul",
											},
											&ruleRefExpr{
												pos:  position{line: 2089, col: 54, offset: 61708},
												name: "OpDiv",
											},
											&ruleRefExpr{
												pos:  position{line: 2089, col: 62, offset: 61716},
												name: "EVAL_CONCAT",
											},
											&litMatcher{
												pos:        position{line: 2089, col: 76, offset: 61730},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HeadBlock",
			pos:  position{line: 2107, col: 1, offset: 62118},
			expr: &choiceExpr{
				pos: position{line: 2107, col: 14, offset: 62131},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2107, col: 14, offset: 62131},
						run: (*parser).callonHeadBlock2,
						expr: &seqExpr{
							pos: position{line: 2107, col: 14, offset: 62131},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2107, col: 14, offset: 62131},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 2107, col: 19, offset: 62136},
									name: "CMD_HEAD",
								},
								&zeroOrOneExpr{
									pos: position{line: 2107, col: 28, offset: 62145},
									expr: &seqExpr{
										pos: position{line: 2107, col: 29, offset: 62146},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 2107, col: 29, offset: 62146},
												val:        "limit",
												ignoreCase: false,
												want:       "\"limit\"",
											},
											&ruleRefExpr{
												pos:  position{line: 2107, col: 37, offset: 62154},
												name: "EQUAL",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2107, col: 45, offset: 62162},
									label: "intAsStr",
									expr: &ruleRefExpr{
										pos:  position{line: 2107, col: 54, offset: 62171},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2122, col: 3, offset: 62587},
						run: (*parser).callonHeadBlock12,
						expr: &seqExpr{
							pos: position{line: 2122, col: 3, offset: 62587},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2122, col: 3, offset: 62587},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 2122, col: 8, offset: 62592},
									name: "CMD_HEAD_NO_SPACE",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggregationList",
			pos:  position{line: 2135, col: 1, offset: 63042},
			expr: &actionExpr{
				pos: position{line: 2135, col: 20, offset: 63061},
				run: (*parser).callonAggregationList1,
				expr: &seqExpr{
					pos: position{line: 2135, col: 20, offset: 63061},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2135, col: 20, offset: 63061},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2135, col: 26, offset: 63067},
								name: "Aggregator",
							},
						},
						&labeledExpr{
							pos:   position{line: 2135, col: 37, offset: 63078},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2135, col: 42, offset: 63083},
								expr: &seqExpr{
									pos: position{line: 2135, col: 43, offset: 63084},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 2135, col: 44, offset: 63085},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 2135, col: 44, offset: 63085},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2135, col: 52, offset: 63093},
													name: "SPACE",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2135, col: 59, offset: 63100},
											name: "Aggregator",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Aggregator",
			pos:  position{line: 2152, col: 1, offset: 63603},
			expr: &actionExpr{
				pos: position{line: 2152, col: 15, offset: 63617},
				run: (*parser).callonAggregator1,
				expr: &seqExpr{
					pos: position{line: 2152, col: 15, offset: 63617},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2152, col: 15, offset: 63617},
							label: "aggFunc",
							expr: &ruleRefExpr{
								pos:  position{line: 2152, col: 23, offset: 63625},
								name: "AggFunction",
							},
						},
						&labeledExpr{
							pos:   position{line: 2152, col: 35, offset: 63637},
							label: "asField",
							expr: &zeroOrOneExpr{
								pos: position{line: 2152, col: 43, offset: 63645},
								expr: &ruleRefExpr{
									pos:  position{line: 2152, col: 43, offset: 63645},
									name: "AsField",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggFunction",
			pos:  position{line: 2168, col: 1, offset: 64486},
			expr: &actionExpr{
				pos: position{line: 2168, col: 16, offset: 64501},
				run: (*parser).callonAggFunction1,
				expr: &labeledExpr{
					pos:   position{line: 2168, col: 16, offset: 64501},
					label: "agg",
					expr: &choiceExpr{
						pos: position{line: 2168, col: 21, offset: 64506},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 2168, col: 21, offset: 64506},
								name: "AggCount",
							},
							&ruleRefExpr{
								pos:  position{line: 2168, col: 32, offset: 64517},
								name: "AggDistinctCount",
							},
							&ruleRefExpr{
								pos:  position{line: 2168, col: 51, offset: 64536},
								name: "AggAvg",
							},
							&ruleRefExpr{
								pos:  position{line: 2168, col: 60, offset: 64545},
								name: "AggMin",
							},
							&ruleRefExpr{
								pos:  position{line: 2168, col: 69, offset: 64554},
								name: "AggMax",
							},
							&ruleRefExpr{
								pos:  position{line: 2168, col: 78, offset: 64563},
								name: "AggRange",
							},
							&ruleRefExpr{
								pos:  position{line: 2168, col: 89, offset: 64574},
								name: "AggSum",
							},
							&ruleRefExpr{
								pos:  position{line: 2168, col: 98, offset: 64583},
								name: "AggValues",
							},
							&ruleRefExpr{
								pos:  position{line: 2168, col: 110, offset: 64595},
								name: "AggEstdc",
							},
							&ruleRefExpr{
								pos:  position{line: 2168, col: 121, offset: 64606},
								name: "AggEstdcError",
							},
							&ruleRefExpr{
								pos:  position{line: 2168, col: 137, offset: 64622},
								name: "AggExactPerc",
							},
							&ruleRefExpr{
								pos:  position{line: 2168, col: 152, offset: 64637},
								name: "AggMedian",
							},
							&ruleRefExpr{
								pos:  position{line: 2168, col: 164, offset: 64649},
								name: "AggMode",
							},
							&ruleRefExpr{
								pos:  position{line: 2168, col: 174, offset: 64659},
								name: "AggPerc",
							},
							&ruleRefExpr{
								pos:  position{line: 2169, col: 1, offset: 64669},
								name: "AggStdev",
							},
							&ruleRefExpr{
								pos:  position{line: 2169, col: 12, offset: 64680},
								name: "AggStdevp",
							},
							&ruleRefExpr{
								pos:  position{line: 2169, col: 24, offset: 64692},
								name: "AggSumsq",
							},
							&ruleRefExpr{
								pos:  position{line: 2169, col: 35, offset: 64703},
								name: "AggUpperPerc",
							},
							&ruleRefExpr{
								pos:  position{line: 2169, col: 50, offset: 64718},
								name: "AggVar",
							},
							&ruleRefExpr{
								pos:  position{line: 2169, col: 59, offset: 64727},
								name: "AggVarp",
							},
							&ruleRefExpr{
								pos:  position{line: 2169, col: 69, offset: 64737},
								name: "AggFirst",
							},
							&ruleRefExpr{
								pos:  position{line: 2169, col: 80, offset: 64748},
								name: "AggLast",
							},
							&ruleRefExpr{
								pos:  position{line: 2169, col: 90, offset: 64758},
								name: "AggList",
							},
							&ruleRefExpr{
								pos:  position{line: 2169, col: 100, offset: 64768},
								name: "AggEarliest",
							},
							&ruleRefExpr{
								pos:  position{line: 2169, col: 114, offset: 64782},
								name: "AggEarliestTime",
							},
							&ruleRefExpr{
								pos:  position{line: 2169, col: 132, offset: 64800},
								name: "AggLatest",
							},
							&ruleRefExpr{
								pos:  position{line: 2169, col: 144, offset: 64812},
								name: "AggLatestTime",
							},
							&ruleRefExpr{
								pos:  position{line: 2169, col: 160, offset: 64828},
								name: "AggRate",
							},
						},
					},
				},
			},
		},
		{
			name: "AsField",
			pos:  position{line: 2173, col: 1, offset: 64862},
			expr: &actionExpr{
				pos: position{line: 2173, col: 12, offset: 64873},
				run: (*parser).callonAsField1,
				expr: &seqExpr{
					pos: position{line: 2173, col: 12, offset: 64873},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2173, col: 12, offset: 64873},
							name: "AS",
						},
						&labeledExpr{
							pos:   position{line: 2173, col: 15, offset: 64876},
							label: "field",
							expr: &choiceExpr{
								pos: position{line: 2173, col: 23, offset: 64884},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 2173, col: 23, offset: 64884},
										name: "FieldName",
									},
									&ruleRefExpr{
										pos:  position{line: 2173, col: 35, offset: 64896},
										name: "String",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggCount",
			pos:  position{line: 2187, col: 1, offset: 65225},
			expr: &choiceExpr{
				pos: position{line: 2187, col: 13, offset: 65237},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2187, col: 13, offset: 65237},
						run: (*parser).callonAggCount2,
						expr: &seqExpr{
							pos: position{line: 2187, col: 13, offset: 65237},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 2187, col: 14, offset: 65238},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 2187, col: 14, offset: 65238},
											val:        "count",
											ignoreCase: false,
											want:       "\"count\"",
										},
										&litMatcher{
											pos:        position{line: 2187, col: 24, offset: 65248},
											val:        "c",
											ignoreCase: false,
											want:       "\"c\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2187, col: 29, offset: 65253},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2187, col: 37, offset: 65261},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 2187, col: 44, offset: 65268},
									label: "boolExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2187, col: 53, offset: 65277},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2187, col: 62, offset: 65286},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2202, col: 3, offset: 65636},
						run: (*parser).callonAggCount12,
						expr: &seqExpr{
							pos: position{line: 2202, col: 3, offset: 65636},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 2202, col: 4, offset: 65637},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 2202, col: 4, offset: 65637},
											val:        "count",
											ignoreCase: false,
											want:       "\"count\"",
										},
										&litMatcher{
											pos:        position{line: 2202, col: 14, offset: 65647},
											val:        "c",
											ignoreCase: false,
											want:       "\"c\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2202, col: 19, offset: 65652},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2202, col: 27, offset: 65660},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2202, col: 33, offset: 65666},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2202, col: 43, offset: 65676},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2209, col: 5, offset: 65827},
						run: (*parser).callonAggCount21,
						expr: &choiceExpr{
							pos: position{line: 2209, col: 6, offset: 65828},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 2209, col: 6, offset: 65828},
									val:        "count",
									ignoreCase: false,
									want:       "\"count\"",
								},
								&litMatcher{
									pos:        position{line: 2209, col: 16, offset: 65838},
									val:        "c",
									ignoreCase: false,
									want:       "\"c\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggDistinctCount",
			pos:  position{line: 2218, col: 1, offset: 65974},
			expr: &choiceExpr{
				pos: position{line: 2218, col: 21, offset: 65994},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2218, col: 21, offset: 65994},
						run: (*parser).callonAggDistinctCount2,
						expr: &seqExpr{
							pos: position{line: 2218, col: 21, offset: 65994},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 2218, col: 22, offset: 65995},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 2218, col: 22, offset: 65995},
											val:        "distinct_count",
											ignoreCase: false,
											want:       "\"distinct_count\"",
										},
										&litMatcher{
											pos:        position{line: 2218, col: 41, offset: 66014},
											val:        "dc",
											ignoreCase: false,
											want:       "\"dc\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2218, col: 47, offset: 66020},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2218, col: 55, offset: 66028},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 2218, col: 62, offset: 66035},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2218, col: 72, offset: 66045},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2218, col: 82, offset: 66055},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2228, col: 3, offset: 66289},
						run: (*parser).callonAggDistinctCount12,
						expr: &seqExpr{
							pos: position{line: 2228, col: 3, offset: 66289},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 2228, col: 4, offset: 66290},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 2228, col: 4, offset: 66290},
											val:        "distinct_count",
											ignoreCase: false,
											want:       "\"distinct_count\"",
										},
										&litMatcher{
											pos:        position{line: 2228, col: 23, offset: 66309},
											val:        "dc",
											ignoreCase: false,
											want:       "\"dc\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2228, col: 29, offset: 66315},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2228, col: 37, offset: 66323},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2228, col: 43, offset: 66329},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2228, col: 53, offset: 66339},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAvg",
			pos:  position{line: 2237, col: 1, offset: 66495},
			expr: &choiceExpr{
				pos: position{line: 2237, col: 11, offset: 66505},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2237, col: 11, offset: 66505},
						run: (*parser).callonAggAvg2,
						expr: &seqExpr{
							pos: position{line: 2237, col: 11, offset: 66505},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2237, col: 11, offset: 66505},
									val:        "avg",
									ignoreCase: false,
									want:       "\"avg\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2237, col: 17, offset: 66511},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2237, col: 25, offset: 66519},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2237, col: 32, offset: 66526},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2237, col: 40, offset: 66534},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2237, col: 59, offset: 66553},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2237, col: 78, offset: 66572},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2237, col: 86, offset: 66580},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2252, col: 3, offset: 66938},
						run: (*parser).callonAggAvg12,
						expr: &seqExpr{
							pos: position{line: 2252, col: 3, offset: 66938},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2252, col: 3, offset: 66938},
									val:        "avg",
									ignoreCase: false,
									want:       "\"avg\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2252, col: 9, offset: 66944},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2252, col: 17, offset: 66952},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2252, col: 23, offset: 66958},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2252, col: 33, offset: 66968},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMin",
			pos:  position{line: 2261, col: 1, offset: 67116},
			expr: &choiceExpr{
				pos: position{line: 2261, col: 11, offset: 67126},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2261, col: 11, offset: 67126},
						run: (*parser).callonAggMin2,
						expr: &seqExpr{
							pos: position{line: 2261, col: 11, offset: 67126},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2261, col: 11, offset: 67126},
									val:        "min",
									ignoreCase: false,
									want:       "\"min\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2261, col: 17, offset: 67132},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2261, col: 25, offset: 67140},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2261, col: 32, offset: 67147},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2261, col: 40, offset: 67155},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2261, col: 59, offset: 67174},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2261, col: 78, offset: 67193},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2261, col: 86, offset: 67201},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2276, col: 3, offset: 67559},
						run: (*parser).callonAggMin12,
						expr: &seqExpr{
							pos: position{line: 2276, col: 3, offset: 67559},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2276, col: 3, offset: 67559},
									val:        "min",
									ignoreCase: false,
									want:       "\"min\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2276, col: 9, offset: 67565},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2276, col: 17, offset: 67573},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2276, col: 23, offset: 67579},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2276, col: 33, offset: 67589},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMax",
			pos:  position{line: 2285, col: 1, offset: 67737},
			expr: &choiceExpr{
				pos: position{line: 2285, col: 11, offset: 67747},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2285, col: 11, offset: 67747},
						run: (*parser).callonAggMax2,
						expr: &seqExpr{
							pos: position{line: 2285, col: 11, offset: 67747},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2285, col: 11, offset: 67747},
									val:        "max",
									ignoreCase: false,
									want:       "\"max\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2285, col: 17, offset: 67753},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2285, col: 25, offset: 67761},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2285, col: 32, offset: 67768},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2285, col: 41, offset: 67777},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2285, col: 60, offset: 67796},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2285, col: 79, offset: 67815},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2285, col: 87, offset: 67823},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2300, col: 3, offset: 68181},
						run: (*parser).callonAggMax12,
						expr: &seqExpr{
							pos: position{line: 2300, col: 3, offset: 68181},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2300, col: 3, offset: 68181},
									val:        "max",
									ignoreCase: false,
									want:       "\"max\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2300, col: 9, offset: 68187},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2300, col: 17, offset: 68195},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2300, col: 23, offset: 68201},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2300, col: 33, offset: 68211},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggRange",
			pos:  position{line: 2309, col: 1, offset: 68359},
			expr: &choiceExpr{
				pos: position{line: 2309, col: 13, offset: 68371},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2309, col: 13, offset: 68371},
						run: (*parser).callonAggRange2,
						expr: &seqExpr{
							pos: position{line: 2309, col: 13, offset: 68371},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2309, col: 13, offset: 68371},
									val:        "range",
									ignoreCase: false,
									want:       "\"range\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2309, col: 21, offset: 68379},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2309, col: 29, offset: 68387},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2309, col: 36, offset: 68394},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2309, col: 44, offset: 68402},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2309, col: 63, offset: 68421},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2309, col: 82, offset: 68440},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2309, col: 90, offset: 68448},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2324, col: 3, offset: 68808},
						run: (*parser).callonAggRange12,
						expr: &seqExpr{
							pos: position{line: 2324, col: 3, offset: 68808},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2324, col: 3, offset: 68808},
									val:        "range",
									ignoreCase: false,
									want:       "\"range\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2324, col: 11, offset: 68816},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2324, col: 19, offset: 68824},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2324, col: 25, offset: 68830},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2324, col: 35, offset: 68840},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggSum",
			pos:  position{line: 2333, col: 1, offset: 68990},
			expr: &choiceExpr{
				pos: position{line: 2333, col: 11, offset: 69000},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2333, col: 11, offset: 69000},
						run: (*parser).callonAggSum2,
						expr: &seqExpr{
							pos: position{line: 2333, col: 11, offset: 69000},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2333, col: 11, offset: 69000},
									val:        "sum",
									ignoreCase: false,
									want:       "\"sum\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2333, col: 17, offset: 69006},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2333, col: 25, offset: 69014},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2333, col: 32, offset: 69021},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2333, col: 40, offset: 69029},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2333, col: 59, offset: 69048},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2333, col: 78, offset: 69067},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2333, col: 86, offset: 69075},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2348, col: 3, offset: 69433},
						run: (*parser).callonAggSum12,
						expr: &seqExpr{
							pos: position{line: 2348, col: 3, offset: 69433},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2348, col: 3, offset: 69433},
									val:        "sum",
									ignoreCase: false,
									want:       "\"sum\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2348, col: 9, offset: 69439},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2348, col: 17, offset: 69447},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2348, col: 23, offset: 69453},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2348, col: 33, offset: 69463},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggEstdc",
			pos:  position{line: 2358, col: 1, offset: 69651},
			expr: &choiceExpr{
				pos: position{line: 2358, col: 13, offset: 69663},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2358, col: 13, offset: 69663},
						run: (*parser).callonAggEstdc2,
						expr: &seqExpr{
							pos: position{line: 2358, col: 13, offset: 69663},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2358, col: 13, offset: 69663},
									val:        "estdc",
									ignoreCase: false,
									want:       "\"estdc\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2358, col: 21, offset: 69671},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2358, col: 29, offset: 69679},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2358, col: 36, offset: 69686},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2358, col: 44, offset: 69694},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2358, col: 63, offset: 69713},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2358, col: 82, offset: 69732},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2358, col: 90, offset: 69740},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2373, col: 3, offset: 70100},
						run: (*parser).callonAggEstdc12,
						expr: &seqExpr{
							pos: position{line: 2373, col: 3, offset: 70100},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2373, col: 3, offset: 70100},
									val:        "estdc",
									ignoreCase: false,
									want:       "\"estdc\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2373, col: 11, offset: 70108},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2373, col: 19, offset: 70116},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2373, col: 25, offset: 70122},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2373, col: 35, offset: 70132},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggEstdcError",
			pos:  position{line: 2383, col: 1, offset: 70322},
			expr: &choiceExpr{
				pos: position{line: 2383, col: 18, offset: 70339},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2383, col: 18, offset: 70339},
						run: (*parser).callonAggEstdcError2,
						expr: &seqExpr{
							pos: position{line: 2383, col: 18, offset: 70339},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2383, col: 18, offset: 70339},
									val:        "estdc_error",
									ignoreCase: false,
									want:       "\"estdc_error\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2383, col: 32, offset: 70353},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2383, col: 40, offset: 70361},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2383, col: 47, offset: 70368},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2383, col: 55, offset: 70376},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2383, col: 74, offset: 70395},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2383, col: 93, offset: 70414},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2383, col: 101, offset: 70422},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2398, col: 3, offset: 70787},
						run: (*parser).callonAggEstdcError12,
						expr: &seqExpr{
							pos: position{line: 2398, col: 3, offset: 70787},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2398, col: 3, offset: 70787},
									val:        "estdc_error",
									ignoreCase: false,
									want:       "\"estdc_error\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2398, col: 17, offset: 70801},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2398, col: 25, offset: 70809},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2398, col: 31, offset: 70815},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2398, col: 41, offset: 70825},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggExactPerc",
			pos:  position{line: 2408, col: 1, offset: 71020},
			expr: &choiceExpr{
				pos: position{line: 2408, col: 17, offset: 71036},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2408, col: 17, offset: 71036},
						run: (*parser).callonAggExactPerc2,
						expr: &seqExpr{
							pos: position{line: 2408, col: 17, offset: 71036},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2408, col: 17, offset: 71036},
									val:        "exactperc",
									ignoreCase: false,
									want:       "\"exactperc\"",
								},
								&labeledExpr{
									pos:   position{line: 2408, col: 29, offset: 71048},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 2408, col: 37, offset: 71056},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2408, col: 37, offset: 71056},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 2408, col: 53, offset: 71072},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2408, col: 70, offset: 71089},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2408, col: 78, offset: 71097},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2408, col: 85, offset: 71104},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2408, col: 93, offset: 71112},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2408, col: 112, offset: 71131},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2408, col: 131, offset: 71150},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2408, col: 139, offset: 71158},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2424, col: 3, offset: 71554},
						run: (*parser).callonAggExactPerc16,
						expr: &seqExpr{
							pos: position{line: 2424, col: 3, offset: 71554},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2424, col: 3, offset: 71554},
									val:        "exactperc",
									ignoreCase: false,
									want:       "\"exactperc\"",
								},
								&labeledExpr{
									pos:   position{line: 2424, col: 15, offset: 71566},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 2424, col: 23, offset: 71574},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2424, col: 23, offset: 71574},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 2424, col: 39, offset: 71590},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2424, col: 56, offset: 71607},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2424, col: 64, offset: 71615},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2424, col: 70, offset: 71621},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2424, col: 80, offset: 71631},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggPerc",
			pos:  position{line: 2435, col: 1, offset: 71857},
			expr: &choiceExpr{
				pos: position{line: 2435, col: 12, offset: 71868},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2435, col: 12, offset: 71868},
						run: (*parser).callonAggPerc2,
						expr: &seqExpr{
							pos: position{line: 2435, col: 12, offset: 71868},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2435, col: 12, offset: 71868},
									val:        "perc",
									ignoreCase: false,
									want:       "\"perc\"",
								},
								&labeledExpr{
									pos:   position{line: 2435, col: 19, offset: 71875},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 2435, col: 27, offset: 71883},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2435, col: 27, offset: 71883},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 2435, col: 43, offset: 71899},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2435, col: 60, offset: 71916},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2435, col: 68, offset: 71924},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2435, col: 75, offset: 71931},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2435, col: 83, offset: 71939},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2435, col: 102, offset: 71958},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2435, col: 121, offset: 71977},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2435, col: 129, offset: 71985},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2451, col: 3, offset: 72376},
						run: (*parser).callonAggPerc16,
						expr: &seqExpr{
							pos: position{line: 2451, col: 3, offset: 72376},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2451, col: 3, offset: 72376},
									val:        "perc",
									ignoreCase: false,
									want:       "\"perc\"",
								},
								&labeledExpr{
									pos:   position{line: 2451, col: 10, offset: 72383},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 2451, col: 18, offset: 72391},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2451, col: 18, offset: 72391},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 2451, col: 34, offset: 72407},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2451, col: 51, offset: 72424},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2451, col: 59, offset: 72432},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2451, col: 65, offset: 72438},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2451, col: 75, offset: 72448},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggUpperPerc",
			pos:  position{line: 2462, col: 1, offset: 72669},
			expr: &choiceExpr{
				pos: position{line: 2462, col: 17, offset: 72685},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2462, col: 17, offset: 72685},
						run: (*parser).callonAggUpperPerc2,
						expr: &seqExpr{
							pos: position{line: 2462, col: 17, offset: 72685},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2462, col: 17, offset: 72685},
									val:        "upperperc",
									ignoreCase: false,
									want:       "\"upperperc\"",
								},
								&labeledExpr{
									pos:   position{line: 2462, col: 29, offset: 72697},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 2462, col: 37, offset: 72705},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2462, col: 37, offset: 72705},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 2462, col: 53, offset: 72721},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2462, col: 70, offset: 72738},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2462, col: 78, offset: 72746},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2462, col: 85, offset: 72753},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2462, col: 93, offset: 72761},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2462, col: 112, offset: 72780},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2462, col: 131, offset: 72799},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2462, col: 139, offset: 72807},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2478, col: 3, offset: 73203},
						run: (*parser).callonAggUpperPerc16,
						expr: &seqExpr{
							pos: position{line: 2478, col: 3, offset: 73203},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2478, col: 3, offset: 73203},
									val:        "upperperc",
									ignoreCase: false,
									want:       "\"upperperc\"",
								},
								&labeledExpr{
									pos:   position{line: 2478, col: 15, offset: 73215},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 2478, col: 23, offset: 73223},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2478, col: 23, offset: 73223},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 2478, col: 39, offset: 73239},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2478, col: 56, offset: 73256},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2478, col: 64, offset: 73264},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2478, col: 70, offset: 73270},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2478, col: 80, offset: 73280},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMedian",
			pos:  position{line: 2489, col: 1, offset: 73506},
			expr: &choiceExpr{
				pos: position{line: 2489, col: 14, offset: 73519},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2489, col: 14, offset: 73519},
						run: (*parser).callonAggMedian2,
						expr: &seqExpr{
							pos: position{line: 2489, col: 14, offset: 73519},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2489, col: 14, offset: 73519},
									val:        "median",
									ignoreCase: false,
									want:       "\"median\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2489, col: 23, offset: 73528},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2489, col: 31, offset: 73536},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2489, col: 38, offset: 73543},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2489, col: 46, offset: 73551},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2489, col: 65, offset: 73570},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2489, col: 84, offset: 73589},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2489, col: 92, offset: 73597},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2504, col: 3, offset: 73958},
						run: (*parser).callonAggMedian12,
						expr: &seqExpr{
							pos: position{line: 2504, col: 3, offset: 73958},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2504, col: 3, offset: 73958},
									val:        "median",
									ignoreCase: false,
									want:       "\"median\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2504, col: 12, offset: 73967},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2504, col: 20, offset: 73975},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2504, col: 26, offset: 73981},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2504, col: 36, offset: 73991},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMode",
			pos:  position{line: 2514, col: 1, offset: 74182},
			expr: &choiceExpr{
				pos: position{line: 2514, col: 12, offset: 74193},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2514, col: 12, offset: 74193},
						run: (*parser).callonAggMode2,
						expr: &seqExpr{
							pos: position{line: 2514, col: 12, offset: 74193},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2514, col: 12, offset: 74193},
									val:        "mode",
									ignoreCase: false,
									want:       "\"mode\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2514, col: 19, offset: 74200},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2514, col: 27, offset: 74208},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2514, col: 34, offset: 74215},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2514, col: 42, offset: 74223},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2514, col: 61, offset: 74242},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2514, col: 80, offset: 74261},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2514, col: 88, offset: 74269},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2529, col: 3, offset: 74628},
						run: (*parser).callonAggMode12,
						expr: &seqExpr{
							pos: position{line: 2529, col: 3, offset: 74628},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2529, col: 3, offset: 74628},
									val:        "mode",
									ignoreCase: false,
									want:       "\"mode\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2529, col: 10, offset: 74635},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2529, col: 18, offset: 74643},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2529, col: 24, offset: 74649},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2529, col: 34, offset: 74659},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggStdev",
			pos:  position{line: 2539, col: 1, offset: 74848},
			expr: &choiceExpr{
				pos: position{line: 2539, col: 13, offset: 74860},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2539, col: 13, offset: 74860},
						run: (*parser).callonAggStdev2,
						expr: &seqExpr{
							pos: position{line: 2539, col: 13, offset: 74860},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2539, col: 13, offset: 74860},
									val:        "stdev",
									ignoreCase: false,
									want:       "\"stdev\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2539, col: 21, offset: 74868},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2539, col: 29, offset: 74876},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2539, col: 36, offset: 74883},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2539, col: 44, offset: 74891},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2539, col: 63, offset: 74910},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2539, col: 82, offset: 74929},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2539, col: 90, offset: 74937},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2554, col: 3, offset: 75297},
						run: (*parser).callonAggStdev12,
						expr: &seqExpr{
							pos: position{line: 2554, col: 3, offset: 75297},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2554, col: 3, offset: 75297},
									val:        "stdev",
									ignoreCase: false,
									want:       "\"stdev\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2554, col: 11, offset: 75305},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2554, col: 19, offset: 75313},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2554, col: 25, offset: 75319},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2554, col: 35, offset: 75329},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggStdevp",
			pos:  position{line: 2564, col: 1, offset: 75519},
			expr: &choiceExpr{
				pos: position{line: 2564, col: 14, offset: 75532},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2564, col: 14, offset: 75532},
						run: (*parser).callonAggStdevp2,
						expr: &seqExpr{
							pos: position{line: 2564, col: 14, offset: 75532},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2564, col: 14, offset: 75532},
									val:        "stdevp",
									ignoreCase: false,
									want:       "\"stdevp\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2564, col: 23, offset: 75541},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2564, col: 31, offset: 75549},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2564, col: 38, offset: 75556},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2564, col: 46, offset: 75564},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2564, col: 65, offset: 75583},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2564, col: 84, offset: 75602},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2564, col: 92, offset: 75610},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2579, col: 3, offset: 75971},
						run: (*parser).callonAggStdevp12,
						expr: &seqExpr{
							pos: position{line: 2579, col: 3, offset: 75971},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2579, col: 3, offset: 75971},
									val:        "stdevp",
									ignoreCase: false,
									want:       "\"stdevp\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2579, col: 12, offset: 75980},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2579, col: 20, offset: 75988},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2579, col: 26, offset: 75994},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2579, col: 36, offset: 76004},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggSumsq",
			pos:  position{line: 2589, col: 1, offset: 76195},
			expr: &choiceExpr{
				pos: position{line: 2589, col: 13, offset: 76207},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2589, col: 13, offset: 76207},
						run: (*parser).callonAggSumsq2,
						expr: &seqExpr{
							pos: position{line: 2589, col: 13, offset: 76207},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2589, col: 13, offset: 76207},
									val:        "sumsq",
									ignoreCase: false,
									want:       "\"sumsq\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2589, col: 21, offset: 76215},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2589, col: 29, offset: 76223},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2589, col: 36, offset: 76230},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2589, col: 44, offset: 76238},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2589, col: 63, offset: 76257},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2589, col: 82, offset: 76276},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2589, col: 90, offset: 76284},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2604, col: 3, offset: 76644},
						run: (*parser).callonAggSumsq12,
						expr: &seqExpr{
							pos: position{line: 2604, col: 3, offset: 76644},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2604, col: 3, offset: 76644},
									val:        "sumsq",
									ignoreCase: false,
									want:       "\"sumsq\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2604, col: 11, offset: 76652},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2604, col: 19, offset: 76660},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2604, col: 25, offset: 76666},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2604, col: 35, offset: 76676},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggVar",
			pos:  position{line: 2614, col: 1, offset: 76866},
			expr: &choiceExpr{
				pos: position{line: 2614, col: 11, offset: 76876},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2614, col: 11, offset: 76876},
						run: (*parser).callonAggVar2,
						expr: &seqExpr{
							pos: position{line: 2614, col: 11, offset: 76876},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2614, col: 11, offset: 76876},
									val:        "var",
									ignoreCase: false,
									want:       "\"var\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2614, col: 17, offset: 76882},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2614, col: 25, offset: 76890},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2614, col: 32, offset: 76897},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2614, col: 40, offset: 76905},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2614, col: 59, offset: 76924},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2614, col: 78, offset: 76943},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2614, col: 86, offset: 76951},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2629, col: 3, offset: 77309},
						run: (*parser).callonAggVar12,
						expr: &seqExpr{
							pos: position{line: 2629, col: 3, offset: 77309},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2629, col: 3, offset: 77309},
									val:        "var",
									ignoreCase: false,
									want:       "\"var\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2629, col: 9, offset: 77315},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2629, col: 17, offset: 77323},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2629, col: 23, offset: 77329},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2629, col: 33, offset: 77339},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggVarp",
			pos:  position{line: 2639, col: 1, offset: 77527},
			expr: &choiceExpr{
				pos: position{line: 2639, col: 12, offset: 77538},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2639, col: 12, offset: 77538},
						run: (*parser).callonAggVarp2,
						expr: &seqExpr{
							pos: position{line: 2639, col: 12, offset: 77538},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2639, col: 12, offset: 77538},
									val:        "varp",
									ignoreCase: false,
									want:       "\"varp\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2639, col: 19, offset: 77545},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2639, col: 27, offset: 77553},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2639, col: 34, offset: 77560},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2639, col: 42, offset: 77568},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2639, col: 61, offset: 77587},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2639, col: 80, offset: 77606},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2639, col: 88, offset: 77614},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2654, col: 3, offset: 77973},
						run: (*parser).callonAggVarp12,
						expr: &seqExpr{
							pos: position{line: 2654, col: 3, offset: 77973},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2654, col: 3, offset: 77973},
									val:        "varp",
									ignoreCase: false,
									want:       "\"varp\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2654, col: 10, offset: 77980},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2654, col: 18, offset: 77988},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2654, col: 24, offset: 77994},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2654, col: 34, offset: 78004},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggFirst",
			pos:  position{line: 2664, col: 1, offset: 78193},
			expr: &choiceExpr{
				pos: position{line: 2664, col: 13, offset: 78205},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2664, col: 13, offset: 78205},
						run: (*parser).callonAggFirst2,
						expr: &seqExpr{
							pos: position{line: 2664, col: 13, offset: 78205},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2664, col: 13, offset: 78205},
									val:        "first",
									ignoreCase: false,
									want:       "\"first\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2664, col: 21, offset: 78213},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2664, col: 29, offset: 78221},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2664, col: 36, offset: 78228},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2664, col: 44, offset: 78236},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2664, col: 63, offset: 78255},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2664, col: 82, offset: 78274},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2664, col: 90, offset: 78282},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2679, col: 3, offset: 78642},
						run: (*parser).callonAggFirst12,
						expr: &seqExpr{
							pos: position{line: 2679, col: 3, offset: 78642},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2679, col: 3, offset: 78642},
									val:        "first",
									ignoreCase: false,
									want:       "\"first\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2679, col: 11, offset: 78650},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2679, col: 19, offset: 78658},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2679, col: 25, offset: 78664},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2679, col: 35, offset: 78674},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggLast",
			pos:  position{line: 2689, col: 1, offset: 78864},
			expr: &choiceExpr{
				pos: position{line: 2689, col: 12, offset: 78875},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2689, col: 12, offset: 78875},
						run: (*parser).callonAggLast2,
						expr: &seqExpr{
							pos: position{line: 2689, col: 12, offset: 78875},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2689, col: 12, offset: 78875},
									val:        "last",
									ignoreCase: false,
									want:       "\"last\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2689, col: 19, offset: 78882},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2689, col: 27, offset: 78890},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2689, col: 34, offset: 78897},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2689, col: 42, offset: 78905},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2689, col: 61, offset: 78924},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2689, col: 80, offset: 78943},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2689, col: 88, offset: 78951},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2704, col: 3, offset: 79310},
						run: (*parser).callonAggLast12,
						expr: &seqExpr{
							pos: position{line: 2704, col: 3, offset: 79310},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2704, col: 3, offset: 79310},
									val:        "last",
									ignoreCase: false,
									want:       "\"last\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2704, col: 10, offset: 79317},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2704, col: 18, offset: 79325},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2704, col: 24, offset: 79331},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2704, col: 34, offset: 79341},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggList",
			pos:  position{line: 2714, col: 1, offset: 79530},
			expr: &choiceExpr{
				pos: position{line: 2714, col: 12, offset: 79541},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2714, col: 12, offset: 79541},
						run: (*parser).callonAggList2,
						expr: &seqExpr{
							pos: position{line: 2714, col: 12, offset: 79541},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2714, col: 12, offset: 79541},
									val:        "list",
									ignoreCase: false,
									want:       "\"list\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2714, col: 19, offset: 79548},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2714, col: 27, offset: 79556},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 2714, col: 34, offset: 79563},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2714, col: 44, offset: 79573},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2714, col: 54, offset: 79583},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2724, col: 3, offset: 79810},
						run: (*parser).callonAggList10,
						expr: &seqExpr{
							pos: position{line: 2724, col: 3, offset: 79810},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2724, col: 3, offset: 79810},
									val:        "list",
									ignoreCase: false,
									want:       "\"list\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2724, col: 10, offset: 79817},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2724, col: 18, offset: 79825},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2724, col: 24, offset: 79831},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2724, col: 34, offset: 79841},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggEarliest",
			pos:  position{line: 2734, col: 1, offset: 80030},
			expr: &choiceExpr{
				pos: position{line: 2734, col: 16, offset: 80045},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2734, col: 16, offset: 80045},
						run: (*parser).callonAggEarliest2,
						expr: &seqExpr{
							pos: position{line: 2734, col: 16, offset: 80045},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2734, col: 16, offset: 80045},
									val:        "earliest",
									ignoreCase: false,
									want:       "\"earliest\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2734, col: 27, offset: 80056},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2734, col: 35, offset: 80064},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2734, col: 42, offset: 80071},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2734, col: 50, offset: 80079},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2734, col: 69, offset: 80098},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2734, col: 88, offset: 80117},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2734, col: 96, offset: 80125},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2749, col: 3, offset: 80488},
						run: (*parser).callonAggEarliest12,
						expr: &seqExpr{
							pos: position{line: 2749, col: 3, offset: 80488},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2749, col: 3, offset: 80488},
									val:        "earliest",
									ignoreCase: false,
									want:       "\"earliest\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2749, col: 14, offset: 80499},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2749, col: 22, offset: 80507},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2749, col: 28, offset: 80513},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2749, col: 38, offset: 80523},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggEarliestTime",
			pos:  position{line: 2759, col: 1, offset: 80716},
			expr: &choiceExpr{
				pos: position{line: 2759, col: 20, offset: 80735},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2759, col: 20, offset: 80735},
						run: (*parser).callonAggEarliestTime2,
						expr: &seqExpr{
							pos: position{line: 2759, col: 20, offset: 80735},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2759, col: 20, offset: 80735},
									val:        "earliest_time",
									ignoreCase: false,
									want:       "\"earliest_time\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2759, col: 36, offset: 80751},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2759, col: 44, offset: 80759},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2759, col: 51, offset: 80766},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2759, col: 59, offset: 80774},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2759, col: 78, offset: 80793},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2759, col: 97, offset: 80812},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2759, col: 105, offset: 80820},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2774, col: 3, offset: 81187},
						run: (*parser).callonAggEarliestTime12,
						expr: &seqExpr{
							pos: position{line: 2774, col: 3, offset: 81187},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2774, col: 3, offset: 81187},
									val:        "earliest_time",
									ignoreCase: false,
									want:       "\"earliest_time\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2774, col: 19, offset: 81203},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2774, col: 27, offset: 81211},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2774, col: 33, offset: 81217},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2774, col: 43, offset: 81227},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggLatest",
			pos:  position{line: 2784, col: 1, offset: 81424},
			expr: &choiceExpr{
				pos: position{line: 2784, col: 14, offset: 81437},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2784, col: 14, offset: 81437},
						run: (*parser).callonAggLatest2,
						expr: &seqExpr{
							pos: position{line: 2784, col: 14, offset: 81437},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2784, col: 14, offset: 81437},
									val:        "latest",
									ignoreCase: false,
									want:       "\"latest\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2784, col: 23, offset: 81446},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2784, col: 31, offset: 81454},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2784, col: 38, offset: 81461},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2784, col: 46, offset: 81469},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2784, col: 65, offset: 81488},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2784, col: 84, offset: 81507},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2784, col: 92, offset: 81515},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2799, col: 3, offset: 81876},
						run: (*parser).callonAggLatest12,
						expr: &seqExpr{
							pos: position{line: 2799, col: 3, offset: 81876},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2799, col: 3, offset: 81876},
									val:        "latest",
									ignoreCase: false,
									want:       "\"latest\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2799, col: 12, offset: 81885},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2799, col: 20, offset: 81893},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2799, col: 26, offset: 81899},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2799, col: 36, offset: 81909},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggLatestTime",
			pos:  position{line: 2809, col: 1, offset: 82100},
			expr: &choiceExpr{
				pos: position{line: 2809, col: 18, offset: 82117},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2809, col: 18, offset: 82117},
						run: (*parser).callonAggLatestTime2,
						expr: &seqExpr{
							pos: position{line: 2809, col: 18, offset: 82117},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2809, col: 18, offset: 82117},
									val:        "latest_time",
									ignoreCase: false,
									want:       "\"latest_time\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2809, col: 32, offset: 82131},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2809, col: 40, offset: 82139},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2809, col: 47, offset: 82146},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2809, col: 55, offset: 82154},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2809, col: 74, offset: 82173},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2809, col: 93, offset: 82192},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2809, col: 101, offset: 82200},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2824, col: 3, offset: 82565},
						run: (*parser).callonAggLatestTime12,
						expr: &seqExpr{
							pos: position{line: 2824, col: 3, offset: 82565},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2824, col: 3, offset: 82565},
									val:        "latest_time",
									ignoreCase: false,
									want:       "\"latest_time\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2824, col: 17, offset: 82579},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2824, col: 25, offset: 82587},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2824, col: 31, offset: 82593},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2824, col: 41, offset: 82603},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggRate",
			pos:  position{line: 2834, col: 1, offset: 82798},
			expr: &choiceExpr{
				pos: position{line: 2834, col: 12, offset: 82809},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2834, col: 12, offset: 82809},
						run: (*parser).callonAggRate2,
						expr: &seqExpr{
							pos: position{line: 2834, col: 12, offset: 82809},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2834, col: 12, offset: 82809},
									val:        "rate",
									ignoreCase: false,
									want:       "\"rate\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2834, col: 19, offset: 82816},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2834, col: 27, offset: 82824},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2834, col: 34, offset: 82831},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2834, col: 42, offset: 82839},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2834, col: 61, offset: 82858},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2834, col: 80, offset: 82877},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2834, col: 88, offset: 82885},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2849, col: 3, offset: 83249},
						run: (*parser).callonAggRate12,
						expr: &seqExpr{
							pos: position{line: 2849, col: 3, offset: 83249},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2849, col: 3, offset: 83249},
									val:        "rate",
									ignoreCase: false,
									want:       "\"rate\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2849, col: 10, offset: 83256},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2849, col: 18, offset: 83264},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2849, col: 24, offset: 83270},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2849, col: 34, offset: 83280},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggValues",
			pos:  position{line: 2858, col: 1, offset: 83434},
			expr: &choiceExpr{
				pos: position{line: 2858, col: 14, offset: 83447},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2858, col: 14, offset: 83447},
						run: (*parser).callonAggValues2,
						expr: &seqExpr{
							pos: position{line: 2858, col: 14, offset: 83447},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2858, col: 14, offset: 83447},
									val:        "values",
									ignoreCase: false,
									want:       "\"values\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2858, col: 23, offset: 83456},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 2858, col: 31, offset: 83464},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 2858, col: 38, offset: 83471},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2858, col: 48, offset: 83481},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2858, col: 58, offset: 83491},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2868, col: 3, offset: 83720},
						run: (*parser).callonAggValues10,
						expr: &seqExpr{
							pos: position{line: 2868, col: 3, offset: 83720},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2868, col: 3, offset: 83720},
									val:        "values",
									ignoreCase: false,
									want:       "\"values\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2868, col: 12, offset: 83729},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2868, col: 20, offset: 83737},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2868, col: 26, offset: 83743},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2868, col: 36, offset: 83753},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldWithNumberValue",
			pos:  position{line: 2877, col: 1, offset: 83904},
			expr: &actionExpr{
				pos: position{line: 2877, col: 25, offset: 83928},
				run: (*parser).callonFieldWithNumberValue1,
				expr: &labeledExpr{
					pos:   position{line: 2877, col: 25, offset: 83928},
					label: "keyValuePair",
					expr: &choiceExpr{
						pos: position{line: 2877, col: 39, offset: 83942},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 2877, col: 39, offset: 83942},
								name: "NamedFieldWithNumberValue",
							},
							&ruleRefExpr{
								pos:  position{line: 2877, col: 67, offset: 83970},
								name: "UnnamedFieldWithNumberValue",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedFieldWithNumberValue",
			pos:  position{line: 2881, col: 1, offset: 84033},
			expr: &actionExpr{
				pos: position{line: 2881, col: 30, offset: 84062},
				run: (*parser).callonNamedFieldWithNumberValue1,
				expr: &seqExpr{
					pos: position{line: 2881, col: 30, offset: 84062},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2881, col: 30, offset: 84062},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 2881, col: 34, offset: 84066},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 2881, col: 44, offset: 84076},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 2881, col: 48, offset: 84080},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 2881, col: 48, offset: 84080},
										name: "EqualityOperator",
									},
									&ruleRefExpr{
										pos:  position{line: 2881, col: 67, offset: 84099},
										name: "InequalityOperator",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2881, col: 87, offset: 84119},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 2881, col: 93, offset: 84125},
								name: "Number",
							},
						},
					},
				},
			},
		},
		{
			name: "UnnamedFieldWithNumberValue",
			pos:  position{line: 2894, col: 1, offset: 84359},
			expr: &actionExpr{
				pos: position{line: 2894, col: 32, offset: 84390},
				run: (*parser).callonUnnamedFieldWithNumberValue1,
				expr: &labeledExpr{
					pos:   position{line: 2894, col: 32, offset: 84390},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 2894, col: 38, offset: 84396},
						name: "Number",
					},
				},
			},
		},
		{
			name: "FieldWithBooleanValue",
			pos:  position{line: 2907, col: 1, offset: 84613},
			expr: &actionExpr{
				pos: position{line: 2907, col: 26, offset: 84638},
				run: (*parser).callonFieldWithBooleanValue1,
				expr: &seqExpr{
					pos: position{line: 2907, col: 26, offset: 84638},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2907, col: 26, offset: 84638},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 2907, col: 30, offset: 84642},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 2907, col: 40, offset: 84652},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 2907, col: 43, offset: 84655},
								name: "EqualityOperator",
							},
						},
						&labeledExpr{
							pos:   position{line: 2907, col: 60, offset: 84672},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 2907, col: 66, offset: 84678},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldWithStringValue",
			pos:  position{line: 2920, col: 1, offset: 84913},
			expr: &actionExpr{
				pos: position{line: 2920, col: 25, offset: 84937},
				run: (*parser).callonFieldWithStringValue1,
				expr: &labeledExpr{
					pos:   position{line: 2920, col: 25, offset: 84937},
					label: "keyValuePair",
					expr: &choiceExpr{
						pos: position{line: 2920, col: 39, offset: 84951},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 2920, col: 39, offset: 84951},
								name: "NamedFieldWithStringValue",
							},
							&ruleRefExpr{
								pos:  position{line: 2920, col: 67, offset: 84979},
								name: "UnnamedFieldWithStringValue",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedFieldWithStringValue",
			pos:  position{line: 2924, col: 1, offset: 85042},
			expr: &actionExpr{
				pos: position{line: 2924, col: 30, offset: 85071},
				run: (*parser).callonNamedFieldWithStringValue1,
				expr: &seqExpr{
					pos: position{line: 2924, col: 30, offset: 85071},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2924, col: 30, offset: 85071},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 2924, col: 34, offset: 85075},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 2924, col: 44, offset: 85085},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 2924, col: 47, offset: 85088},
								name: "EqualityOperator",
							},
						},
						&labeledExpr{
							pos:   position{line: 2924, col: 64, offset: 85105},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 2924, col: 70, offset: 85111},
								name: "String",
							},
						},
					},
				},
			},
		},
		{
			name: "UnnamedFieldWithStringValue",
			pos:  position{line: 2936, col: 1, offset: 85344},
			expr: &actionExpr{
				pos: position{line: 2936, col: 32, offset: 85375},
				run: (*parser).callonUnnamedFieldWithStringValue1,
				expr: &labeledExpr{
					pos:   position{line: 2936, col: 32, offset: 85375},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 2936, col: 38, offset: 85381},
						name: "String",
					},
				},
			},
		},
		{
			name: "FieldNameList",
			pos:  position{line: 2950, col: 1, offset: 85712},
			expr: &actionExpr{
				pos: position{line: 2950, col: 18, offset: 85729},
				run: (*parser).callonFieldNameList1,
				expr: &seqExpr{
					pos: position{line: 2950, col: 18, offset: 85729},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2950, col: 18, offset: 85729},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2950, col: 24, offset: 85735},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 2950, col: 34, offset: 85745},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2950, col: 39, offset: 85750},
								expr: &seqExpr{
									pos: position{line: 2950, col: 40, offset: 85751},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 2950, col: 40, offset: 85751},
											name: "COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 2950, col: 46, offset: 85757},
											name: "FieldName",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 2970, col: 1, offset: 86520},
			expr: &actionExpr{
				pos: position{line: 2970, col: 14, offset: 86533},
				run: (*parser).callonFieldName1,
				expr: &seqExpr{
					pos: position{line: 2970, col: 14, offset: 86533},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 2970, col: 14, offset: 86533},
							val:        "[a-zA-Z0-9:*]",
							chars:      []rune{':', '*'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 2970, col: 27, offset: 86546},
							expr: &charClassMatcher{
								pos:        position{line: 2970, col: 27, offset: 86546},
								val:        "[a-zA-Z0-9:_.*]",
								chars:      []rune{':', '_', '.', '*'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "String",
			pos:  position{line: 2974, col: 1, offset: 86599},
			expr: &actionExpr{
				pos: position{line: 2974, col: 11, offset: 86609},
				run: (*parser).callonString1,
				expr: &labeledExpr{
					pos:   position{line: 2974, col: 11, offset: 86609},
					label: "str",
					expr: &choiceExpr{
						pos: position{line: 2974, col: 16, offset: 86614},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 2974, col: 16, offset: 86614},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 2974, col: 31, offset: 86629},
								name: "UnquotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 2978, col: 1, offset: 86670},
			expr: &actionExpr{
				pos: position{line: 2978, col: 17, offset: 86686},
				run: (*parser).callonQuotedString1,
				expr: &seqExpr{
					pos: position{line: 2978, col: 17, offset: 86686},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 2978, col: 17, offset: 86686},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2978, col: 21, offset: 86690},
							expr: &charClassMatcher{
								pos:        position{line: 2978, col: 21, offset: 86690},
								val:        "[^\"]",
								chars:      []rune{'"'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 2978, col: 27, offset: 86696},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "Boolean",
			pos:  position{line: 2983, col: 1, offset: 86807},
			expr: &actionExpr{
				pos: position{line: 2983, col: 12, offset: 86818},
				run: (*parser).callonBoolean1,
				expr: &choiceExpr{
					pos: position{line: 2983, col: 13, offset: 86819},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 2983, col: 13, offset: 86819},
							val:        "true",
							ignoreCase: false,
							want:       "\"true\"",
						},
						&litMatcher{
							pos:        position{line: 2983, col: 22, offset: 86828},
							val:        "false",
							ignoreCase: false,
							want:       "\"false\"",
						},
					},
				},
			},
		},
		{
			name: "UnquotedString",
			pos:  position{line: 2988, col: 1, offset: 86922},
			expr: &actionExpr{
				pos: position{line: 2988, col: 19, offset: 86940},
				run: (*parser).callonUnquotedString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2988, col: 19, offset: 86940},
					expr: &choiceExpr{
						pos: position{line: 2988, col: 20, offset: 86941},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 2988, col: 20, offset: 86941},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&seqExpr{
								pos: position{line: 2988, col: 27, offset: 86948},
								exprs: []any{
									&notExpr{
										pos: position{line: 2988, col: 27, offset: 86948},
										expr: &choiceExpr{
											pos: position{line: 2988, col: 29, offset: 86950},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 2988, col: 29, offset: 86950},
													name: "MAJOR_BREAK",
												},
												&litMatcher{
													pos:        position{line: 2988, col: 43, offset: 86964},
													val:        "|",
													ignoreCase: false,
													want:       "\"|\"",
												},
												&ruleRefExpr{
													pos:  position{line: 2988, col: 49, offset: 86970},
													name: "EOF",
												},
											},
										},
									},
									&anyMatcher{
										line: 2988, col: 54, offset: 86975,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RenamePattern",
			pos:  position{line: 2995, col: 1, offset: 87149},
			expr: &actionExpr{
				pos: position{line: 2995, col: 18, offset: 87166},
				run: (*parser).callonRenamePattern1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2995, col: 18, offset: 87166},
					expr: &charClassMatcher{
						pos:        position{line: 2995, col: 18, offset: 87166},
						val:        "[a-zA-Z0-9_*]",
						chars:      []rune{'_', '*'},
						ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 2999, col: 1, offset: 87217},
			expr: &actionExpr{
				pos: position{line: 2999, col: 11, offset: 87227},
				run: (*parser).callonNumber1,
				expr: &labeledExpr{
					pos:   position{line: 2999, col: 11, offset: 87227},
					label: "number",
					expr: &ruleRefExpr{
						pos:  position{line: 2999, col: 18, offset: 87234},
						name: "NumberAsString",
					},
				},
			},
		},
		{
			name: "NumberAsString",
			pos:  position{line: 3005, col: 1, offset: 87423},
			expr: &actionExpr{
				pos: position{line: 3005, col: 19, offset: 87441},
				run: (*parser).callonNumberAsString1,
				expr: &seqExpr{
					pos: position{line: 3005, col: 19, offset: 87441},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3005, col: 19, offset: 87441},
							label: "number",
							expr: &choiceExpr{
								pos: position{line: 3005, col: 27, offset: 87449},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 3005, col: 27, offset: 87449},
										name: "FloatAsString",
									},
									&ruleRefExpr{
										pos:  position{line: 3005, col: 43, offset: 87465},
										name: "IntegerAsString",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 3005, col: 60, offset: 87482},
							expr: &choiceExpr{
								pos: position{line: 3005, col: 62, offset: 87484},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 3005, col: 62, offset: 87484},
										name: "SPACE",
									},
									&litMatcher{
										pos:        position{line: 3005, col: 70, offset: 87492},
										val:        "|",
										ignoreCase: false,
										want:       "\"|\"",
									},
									&litMatcher{
										pos:        position{line: 3005, col: 76, offset: 87498},
										val:        ")",
										ignoreCase: false,
										want:       "\")\"",
									},
									&litMatcher{
										pos:        position{line: 3005, col: 82, offset: 87504},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&ruleRefExpr{
										pos:  position{line: 3005, col: 88, offset: 87510},
										name: "EOF",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FloatAsString",
			pos:  position{line: 3011, col: 1, offset: 87639},
			expr: &actionExpr{
				pos: position{line: 3011, col: 18, offset: 87656},
				run: (*parser).callonFloatAsString1,
				expr: &seqExpr{
					pos: position{line: 3011, col: 18, offset: 87656},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 3011, col: 18, offset: 87656},
							expr: &charClassMatcher{
								pos:        position{line: 3011, col: 18, offset: 87656},
								val:        "[-+]",
								chars:      []rune{'-', '+'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 3011, col: 24, offset: 87662},
							expr: &charClassMatcher{
								pos:        position{line: 3011, col: 24, offset: 87662},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 3011, col: 31, offset: 87669},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 3011, col: 35, offset: 87673},
							expr: &charClassMatcher{
								pos:        position{line: 3011, col: 35, offset: 87673},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "IntegerAsString",
			pos:  position{line: 3016, col: 1, offset: 87768},
			expr: &actionExpr{
				pos: position{line: 3016, col: 20, offset: 87787},
				run: (*parser).callonIntegerAsString1,
				expr: &seqExpr{
					pos: position{line: 3016, col: 20, offset: 87787},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 3016, col: 20, offset: 87787},
							expr: &charClassMatcher{
								pos:        position{line: 3016, col: 20, offset: 87787},
								val:        "[-+]",
								chars:      []rune{'-', '+'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 3016, col: 26, offset: 87793},
							expr: &charClassMatcher{
								pos:        position{line: 3016, col: 26, offset: 87793},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 3020, col: 1, offset: 87836},
			expr: &actionExpr{
				pos: position{line: 3020, col: 21, offset: 87856},
				run: (*parser).callonEqualityOperator1,
				expr: &seqExpr{
					pos: position{line: 3020, col: 21, offset: 87856},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3020, col: 21, offset: 87856},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 3020, col: 36, offset: 87871},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 3020, col: 40, offset: 87875},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 3020, col: 40, offset: 87875},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
									&litMatcher{
										pos:        position{line: 3020, col: 46, offset: 87881},
										val:        "!=",
										ignoreCase: false,
										want:       "\"!=\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 3020, col: 52, offset: 87887},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "InequalityOperator",
			pos:  position{line: 3028, col: 1, offset: 88068},
			expr: &actionExpr{
				pos: position{line: 3028, col: 23, offset: 88090},
				run: (*parser).callonInequalityOperator1,
				expr: &seqExpr{
					pos: position{line: 3028, col: 23, offset: 88090},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3028, col: 23, offset: 88090},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 3028, col: 38, offset: 88105},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 3028, col: 42, offset: 88109},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 3028, col: 42, offset: 88109},
										val:        "<=",
										ignoreCase: false,
										want:       "\"<=\"",
									},
									&litMatcher{
										pos:        position{line: 3028, col: 49, offset: 88116},
										val:        "<",
										ignoreCase: false,
										want:       "\"<\"",
									},
									&litMatcher{
										pos:        position{line: 3028, col: 55, offset: 88122},
										val:        ">=",
										ignoreCase: false,
										want:       "\">=\"",
									},
									&litMatcher{
										pos:        position{line: 3028, col: 62, offset: 88129},
										val:        ">",
										ignoreCase: false,
										want:       "\">\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 3028, col: 67, offset: 88134},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "EqualityOrInequality",
			pos:  position{line: 3036, col: 1, offset: 88317},
			expr: &choiceExpr{
				pos: position{line: 3036, col: 25, offset: 88341},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3036, col: 25, offset: 88341},
						run: (*parser).callonEqualityOrInequality2,
						expr: &labeledExpr{
							pos:   position{line: 3036, col: 25, offset: 88341},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 3036, col: 28, offset: 88344},
								name: "EqualityOperator",
							},
						},
					},
					&actionExpr{
						pos: position{line: 3039, col: 3, offset: 88386},
						run: (*parser).callonEqualityOrInequality5,
						expr: &labeledExpr{
							pos:   position{line: 3039, col: 3, offset: 88386},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 3039, col: 6, offset: 88389},
								name: "InequalityOperator",
							},
						},
					},
				},
			},
		},
		{
			name: "OpPlus",
			pos:  position{line: 3043, col: 1, offset: 88432},
			expr: &actionExpr{
				pos: position{line: 3043, col: 11, offset: 88442},
				run: (*parser).callonOpPlus1,
				expr: &seqExpr{
					pos: position{line: 3043, col: 11, offset: 88442},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3043, col: 11, offset: 88442},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 3043, col: 26, offset: 88457},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3043, col: 30, offset: 88461},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpMinus",
			pos:  position{line: 3047, col: 1, offset: 88501},
			expr: &actionExpr{
				pos: position{line: 3047, col: 12, offset: 88512},
				run: (*parser).callonOpMinus1,
				expr: &seqExpr{
					pos: position{line: 3047, col: 12, offset: 88512},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3047, col: 12, offset: 88512},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 3047, col: 27, offset: 88527},
							val:        "-",
							ignoreCase: false,
							want:       "\"-\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3047, col: 31, offset: 88531},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpMul",
			pos:  position{line: 3051, col: 1, offset: 88571},
			expr: &actionExpr{
				pos: position{line: 3051, col: 10, offset: 88580},
				run: (*parser).callonOpMul1,
				expr: &seqExpr{
					pos: position{line: 3051, col: 10, offset: 88580},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3051, col: 10, offset: 88580},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 3051, col: 25, offset: 88595},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3051, col: 29, offset: 88599},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpDiv",
			pos:  position{line: 3055, col: 1, offset: 88639},
			expr: &actionExpr{
				pos: position{line: 3055, col: 10, offset: 88648},
				run: (*parser).callonOpDiv1,
				expr: &seqExpr{
					pos: position{line: 3055, col: 10, offset: 88648},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3055, col: 10, offset: 88648},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 3055, col: 25, offset: 88663},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3055, col: 29, offset: 88667},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "Second",
			pos:  position{line: 3060, col: 1, offset: 88731},
			expr: &actionExpr{
				pos: position{line: 3060, col: 11, offset: 88741},
				run: (*parser).callonSecond1,
				expr: &choiceExpr{
					pos: position{line: 3060, col: 12, offset: 88742},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3060, col: 12, offset: 88742},
							val:        "seconds",
							ignoreCase: false,
							want:       "\"seconds\"",
						},
						&litMatcher{
							pos:        position{line: 3060, col: 24, offset: 88754},
							val:        "second",
							ignoreCase: false,
							want:       "\"second\"",
						},
						&litMatcher{
							pos:        position{line: 3060, col: 35, offset: 88765},
							val:        "secs",
							ignoreCase: false,
							want:       "\"secs\"",
						},
						&litMatcher{
							pos:        position{line: 3060, col: 44, offset: 88774},
							val:        "sec",
							ignoreCase: false,
							want:       "\"sec\"",
						},
						&litMatcher{
							pos:        position{line: 3060, col: 52, offset: 88782},
							val:        "s",
							ignoreCase: false,
							want:       "\"s\"",
						},
					},
				},
			},
		},
		{
			name: "Minute",
			pos:  position{line: 3064, col: 1, offset: 88823},
			expr: &actionExpr{
				pos: position{line: 3064, col: 11, offset: 88833},
				run: (*parser).callonMinute1,
				expr: &choiceExpr{
					pos: position{line: 3064, col: 12, offset: 88834},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3064, col: 12, offset: 88834},
							val:        "minutes",
							ignoreCase: false,
							want:       "\"minutes\"",
						},
						&litMatcher{
							pos:        position{line: 3064, col: 24, offset: 88846},
							val:        "minute",
							ignoreCase: false,
							want:       "\"minute\"",
						},
						&litMatcher{
							pos:        position{line: 3064, col: 35, offset: 88857},
							val:        "mins",
							ignoreCase: false,
							want:       "\"mins\"",
						},
						&litMatcher{
							pos:        position{line: 3064, col: 44, offset: 88866},
							val:        "min",
							ignoreCase: false,
							want:       "\"min\"",
						},
						&litMatcher{
							pos:        position{line: 3064, col: 52, offset: 88874},
							val:        "m",
							ignoreCase: false,
							want:       "\"m\"",
						},
					},
				},
			},
		},
		{
			name: "Hour",
			pos:  position{line: 3068, col: 1, offset: 88915},
			expr: &actionExpr{
				pos: position{line: 3068, col: 9, offset: 88923},
				run: (*parser).callonHour1,
				expr: &choiceExpr{
					pos: position{line: 3068, col: 10, offset: 88924},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3068, col: 10, offset: 88924},
							val:        "hours",
							ignoreCase: false,
							want:       "\"hours\"",
						},
						&litMatcher{
							pos:        position{line: 3068, col: 20, offset: 88934},
							val:        "hour",
							ignoreCase: false,
							want:       "\"hour\"",
						},
						&litMatcher{
							pos:        position{line: 3068, col: 29, offset: 88943},
							val:        "hrs",
							ignoreCase: false,
							want:       "\"hrs\"",
						},
						&litMatcher{
							pos:        position{line: 3068, col: 37, offset: 88951},
							val:        "hr",
							ignoreCase: false,
							want:       "\"hr\"",
						},
						&litMatcher{
							pos:        position{line: 3068, col: 44, offset: 88958},
							val:        "h",
							ignoreCase: false,
							want:       "\"h\"",
						},
					},
				},
			},
		},
		{
			name: "Day",
			pos:  position{line: 3072, col: 1, offset: 88997},
			expr: &actionExpr{
				pos: position{line: 3072, col: 8, offset: 89004},
				run: (*parser).callonDay1,
				expr: &choiceExpr{
					pos: position{line: 3072, col: 9, offset: 89005},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3072, col: 9, offset: 89005},
							val:        "days",
							ignoreCase: false,
							want:       "\"days\"",
						},
						&litMatcher{
							pos:        position{line: 3072, col: 18, offset: 89014},
							val:        "day",
							ignoreCase: false,
							want:       "\"day\"",
						},
						&litMatcher{
							pos:        position{line: 3072, col: 26, offset: 89022},
							val:        "d",
							ignoreCase: false,
							want:       "\"d\"",
						},
					},
				},
			},
		},
		{
			name: "Week",
			pos:  position{line: 3076, col: 1, offset: 89060},
			expr: &actionExpr{
				pos: position{line: 3076, col: 9, offset: 89068},
				run: (*parser).callonWeek1,
				expr: &choiceExpr{
					pos: position{line: 3076, col: 10, offset: 89069},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3076, col: 10, offset: 89069},
							val:        "weeks",
							ignoreCase: false,
							want:       "\"weeks\"",
						},
						&litMatcher{
							pos:        position{line: 3076, col: 20, offset: 89079},
							val:        "week",
							ignoreCase: false,
							want:       "\"week\"",
						},
						&litMatcher{
							pos:        position{line: 3076, col: 29, offset: 89088},
							val:        "w",
							ignoreCase: false,
							want:       "\"w\"",
						},
					},
				},
			},
		},
		{
			name: "Month",
			pos:  position{line: 3080, col: 1, offset: 89127},
			expr: &actionExpr{
				pos: position{line: 3080, col: 10, offset: 89136},
				run: (*parser).callonMonth1,
				expr: &choiceExpr{
					pos: position{line: 3080, col: 11, offset: 89137},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3080, col: 11, offset: 89137},
							val:        "months",
							ignoreCase: false,
							want:       "\"months\"",
						},
						&litMatcher{
							pos:        position{line: 3080, col: 22, offset: 89148},
							val:        "month",
							ignoreCase: false,
							want:       "\"month\"",
						},
						&litMatcher{
							pos:        position{line: 3080, col: 32, offset: 89158},
							val:        "mon",
							ignoreCase: false,
							want:       "\"mon\"",
						},
					},
				},
			},
		},
		{
			name: "Quarter",
			pos:  position{line: 3084, col: 1, offset: 89200},
			expr: &actionExpr{
				pos: position{line: 3084, col: 12, offset: 89211},
				run: (*parser).callonQuarter1,
				expr: &choiceExpr{
					pos: position{line: 3084, col: 13, offset: 89212},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3084, col: 13, offset: 89212},
							val:        "quarters",
							ignoreCase: false,
							want:       "\"quarters\"",
						},
						&litMatcher{
							pos:        position{line: 3084, col: 26, offset: 89225},
							val:        "quarter",
							ignoreCase: false,
							want:       "\"quarter\"",
						},
						&litMatcher{
							pos:        position{line: 3084, col: 38, offset: 89237},
							val:        "qtrs",
							ignoreCase: false,
							want:       "\"qtrs\"",
						},
						&litMatcher{
							pos:        position{line: 3084, col: 47, offset: 89246},
							val:        "qtr",
							ignoreCase: false,
							want:       "\"qtr\"",
						},
						&litMatcher{
							pos:        position{line: 3084, col: 55, offset: 89254},
							val:        "q",
							ignoreCase: false,
							want:       "\"q\"",
						},
					},
				},
			},
		},
		{
			name: "Subseconds",
			pos:  position{line: 3089, col: 1, offset: 89388},
			expr: &actionExpr{
				pos: position{line: 3089, col: 15, offset: 89402},
				run: (*parser).callonSubseconds1,
				expr: &choiceExpr{
					pos: position{line: 3089, col: 16, offset: 89403},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 3089, col: 16, offset: 89403},
							val:        "us",
							ignoreCase: false,
							want:       "\"us\"",
						},
						&litMatcher{
							pos:        position{line: 3089, col: 23, offset: 89410},
							val:        "ms",
							ignoreCase: false,
							want:       "\"ms\"",
						},
						&litMatcher{
							pos:        position{line: 3089, col: 30, offset: 89417},
							val:        "cs",
							ignoreCase: false,
							want:       "\"cs\"",
						},
						&litMatcher{
							pos:        position{line: 3089, col: 37, offset: 89424},
							val:        "ds",
							ignoreCase: false,
							want:       "\"ds\"",
						},
					},
				},
			},
		},
		{
			name: "TransactionBlock",
			pos:  position{line: 3098, col: 1, offset: 89647},
			expr: &actionExpr{
				pos: position{line: 3098, col: 21, offset: 89667},
				run: (*parser).callonTransactionBlock1,
				expr: &seqExpr{
					pos: position{line: 3098, col: 21, offset: 89667},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3098, col: 21, offset: 89667},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 3098, col: 26, offset: 89672},
							name: "CMD_TRANSACTION",
						},
						&labeledExpr{
							pos:   position{line: 3098, col: 42, offset: 89688},
							label: "txnOptions",
							expr: &ruleRefExpr{
								pos:  position{line: 3098, col: 53, offset: 89699},
								name: "TransactionOptions",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionOptions",
			pos:  position{line: 3107, col: 1, offset: 90005},
			expr: &actionExpr{
				pos: position{line: 3107, col: 23, offset: 90027},
				run: (*parser).callonTransactionOptions1,
				expr: &labeledExpr{
					pos:   position{line: 3107, col: 23, offset: 90027},
					label: "txnOptions",
					expr: &zeroOrOneExpr{
						pos: position{line: 3107, col: 34, offset: 90038},
						expr: &ruleRefExpr{
							pos:  position{line: 3107, col: 34, offset: 90038},
							name: "TransactionDefinitionOptionsList",
						},
					},
				},
			},
		},
		{
			name: "TransactionDefinitionOptionsList",
			pos:  position{line: 3122, col: 1, offset: 90429},
			expr: &actionExpr{
				pos: position{line: 3122, col: 37, offset: 90465},
				run: (*parser).callonTransactionDefinitionOptionsList1,
				expr: &seqExpr{
					pos: position{line: 3122, col: 37, offset: 90465},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3122, col: 37, offset: 90465},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 3122, col: 43, offset: 90471},
								name: "TransactionDefinitionOption",
							},
						},
						&labeledExpr{
							pos:   position{line: 3122, col: 71, offset: 90499},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3122, col: 76, offset: 90504},
								expr: &seqExpr{
									pos: position{line: 3122, col: 77, offset: 90505},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 3122, col: 77, offset: 90505},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 3122, col: 83, offset: 90511},
											name: "TransactionDefinitionOption",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionDefinitionOption",
			pos:  position{line: 3157, col: 1, offset: 91500},
			expr: &actionExpr{
				pos: position{line: 3157, col: 32, offset: 91531},
				run: (*parser).callonTransactionDefinitionOption1,
				expr: &labeledExpr{
					pos:   position{line: 3157, col: 32, offset: 91531},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 3157, col: 40, offset: 91539},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3157, col: 40, offset: 91539},
								name: "SpaceSeparatedFieldNameList",
							},
							&ruleRefExpr{
								pos:  position{line: 3157, col: 70, offset: 91569},
								name: "StartsWithOption",
							},
							&ruleRefExpr{
								pos:  position{line: 3157, col: 89, offset: 91588},
								name: "EndsWithOption",
							},
						},
					},
				},
			},
		},
		{
			name: "SpaceSeparatedFieldNameList",
			pos:  position{line: 3163, col: 1, offset: 91734},
			expr: &actionExpr{
				pos: position{line: 3163, col: 32, offset: 91765},
				run: (*parser).callonSpaceSeparatedFieldNameList1,
				expr: &seqExpr{
					pos: position{line: 3163, col: 32, offset: 91765},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3163, col: 32, offset: 91765},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 3163, col: 38, offset: 91771},
								name: "FieldName",
							},
						},
						&notExpr{
							pos: position{line: 3163, col: 48, offset: 91781},
							expr: &ruleRefExpr{
								pos:  position{line: 3163, col: 50, offset: 91783},
								name: "EQUAL",
							},
						},
						&labeledExpr{
							pos:   position{line: 3163, col: 57, offset: 91790},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3163, col: 62, offset: 91795},
								expr: &seqExpr{
									pos: position{line: 3163, col: 63, offset: 91796},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 3163, col: 63, offset: 91796},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 3163, col: 69, offset: 91802},
											name: "FieldName",
										},
										&notExpr{
											pos: position{line: 3163, col: 79, offset: 91812},
											expr: &ruleRefExpr{
												pos:  position{line: 3163, col: 81, offset: 91814},
												name: "EQUAL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StartsWithOption",
			pos:  position{line: 3181, col: 1, offset: 92238},
			expr: &actionExpr{
				pos: position{line: 3181, col: 21, offset: 92258},
				run: (*parser).callonStartsWithOption1,
				expr: &seqExpr{
					pos: position{line: 3181, col: 21, offset: 92258},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3181, col: 21, offset: 92258},
							val:        "startswith",
							ignoreCase: false,
							want:       "\"startswith\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3181, col: 34, offset: 92271},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3181, col: 40, offset: 92277},
							label: "strExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 3181, col: 48, offset: 92285},
								name: "TransactionFilterString",
							},
						},
					},
				},
			},
		},
		{
			name: "EndsWithOption",
			pos:  position{line: 3191, col: 1, offset: 92523},
			expr: &actionExpr{
				pos: position{line: 3191, col: 19, offset: 92541},
				run: (*parser).callonEndsWithOption1,
				expr: &seqExpr{
					pos: position{line: 3191, col: 19, offset: 92541},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3191, col: 19, offset: 92541},
							val:        "endswith",
							ignoreCase: false,
							want:       "\"endswith\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3191, col: 30, offset: 92552},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3191, col: 36, offset: 92558},
							label: "strExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 3191, col: 44, offset: 92566},
								name: "TransactionFilterString",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionFilterString",
			pos:  position{line: 3202, col: 1, offset: 92835},
			expr: &actionExpr{
				pos: position{line: 3202, col: 28, offset: 92862},
				run: (*parser).callonTransactionFilterString1,
				expr: &labeledExpr{
					pos:   position{line: 3202, col: 28, offset: 92862},
					label: "strExpr",
					expr: &choiceExpr{
						pos: position{line: 3202, col: 37, offset: 92871},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3202, col: 37, offset: 92871},
								name: "TransactionQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 3202, col: 63, offset: 92897},
								name: "TransactionEval",
							},
							&ruleRefExpr{
								pos:  position{line: 3202, col: 81, offset: 92915},
								name: "TransactionSearch",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionQuotedString",
			pos:  position{line: 3206, col: 1, offset: 92963},
			expr: &actionExpr{
				pos: position{line: 3206, col: 28, offset: 92990},
				run: (*parser).callonTransactionQuotedString1,
				expr: &labeledExpr{
					pos:   position{line: 3206, col: 28, offset: 92990},
					label: "str",
					expr: &choiceExpr{
						pos: position{line: 3206, col: 33, offset: 92995},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3206, col: 33, offset: 92995},
								name: "TransactionQuotedStringValue",
							},
							&ruleRefExpr{
								pos:  position{line: 3206, col: 64, offset: 93026},
								name: "TransactionQuotedStringSearchExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionQuotedStringSearchExpr",
			pos:  position{line: 3210, col: 1, offset: 93086},
			expr: &actionExpr{
				pos: position{line: 3210, col: 38, offset: 93123},
				run: (*parser).callonTransactionQuotedStringSearchExpr1,
				expr: &seqExpr{
					pos: position{line: 3210, col: 38, offset: 93123},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3210, col: 38, offset: 93123},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 3210, col: 42, offset: 93127},
							label: "searchClause",
							expr: &ruleRefExpr{
								pos:  position{line: 3210, col: 55, offset: 93140},
								name: "ClauseLevel4",
							},
						},
						&litMatcher{
							pos:        position{line: 3210, col: 68, offset: 93153},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedStringNoOp",
			pos:  position{line: 3218, col: 1, offset: 93292},
			expr: &actionExpr{
				pos: position{line: 3218, col: 21, offset: 93312},
				run: (*parser).callonQuotedStringNoOp1,
				expr: &seqExpr{
					pos: position{line: 3218, col: 21, offset: 93312},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3218, col: 21, offset: 93312},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 3218, col: 25, offset: 93316},
							expr: &charClassMatcher{
								pos:        position{line: 3218, col: 25, offset: 93316},
								val:        "[^\" !(OR / AND)]",
								chars:      []rune{'"', ' ', '!', '(', 'O', 'R', ' ', '/', ' ', 'A', 'N', 'D', ')'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 3218, col: 44, offset: 93335},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "TransactionQuotedStringValue",
			pos:  position{line: 3223, col: 1, offset: 93446},
			expr: &actionExpr{
				pos: position{line: 3223, col: 33, offset: 93478},
				run: (*parser).callonTransactionQuotedStringValue1,
				expr: &labeledExpr{
					pos:   position{line: 3223, col: 33, offset: 93478},
					label: "str",
					expr: &ruleRefExpr{
						pos:  position{line: 3223, col: 37, offset: 93482},
						name: "QuotedStringNoOp",
					},
				},
			},
		},
		{
			name: "TransactionSearch",
			pos:  position{line: 3231, col: 1, offset: 93637},
			expr: &actionExpr{
				pos: position{line: 3231, col: 22, offset: 93658},
				run: (*parser).callonTransactionSearch1,
				expr: &labeledExpr{
					pos:   position{line: 3231, col: 22, offset: 93658},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 3231, col: 27, offset: 93663},
						name: "ClauseLevel1",
					},
				},
			},
		},
		{
			name: "TransactionEval",
			pos:  position{line: 3241, col: 1, offset: 93835},
			expr: &actionExpr{
				pos: position{line: 3241, col: 20, offset: 93854},
				run: (*parser).callonTransactionEval1,
				expr: &seqExpr{
					pos: position{line: 3241, col: 20, offset: 93854},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 3241, col: 20, offset: 93854},
							val:        "eval",
							ignoreCase: false,
							want:       "\"eval\"",
						},
						&ruleRefExpr{
							pos:  position{line: 3241, col: 27, offset: 93861},
							name: "EMPTY_OR_SPACE",
						},
						&ruleRefExpr{
							pos:  position{line: 3241, col: 42, offset: 93876},
							name: "L_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 3241, col: 50, offset: 93884},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 3241, col: 60, offset: 93894},
								name: "BoolExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 3241, col: 69, offset: 93903},
							name: "R_PAREN",
						},
					},
				},
			},
		},
		{
			name: "ALLCMD",
			pos:  position{line: 3251, col: 1, offset: 94084},
			expr: &choiceExpr{
				pos: position{line: 3251, col: 12, offset: 94095},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 3251, col: 12, offset: 94095},
						name: "CMD_REGEX",
					},
					&ruleRefExpr{
						pos:  position{line: 3251, col: 24, offset: 94107},
						name: "CMD_STATS",
					},
					&ruleRefExpr{
						pos:  position{line: 3251, col: 36, offset: 94119},
						name: "CMD_FIELDS",
					},
					&ruleRefExpr{
						pos:  position{line: 3251, col: 49, offset: 94132},
						name: "CMD_WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 3251, col: 61, offset: 94144},
						name: "CMD_HEAD_NO_SPACE",
					},
					&ruleRefExpr{
						pos:  position{line: 3251, col: 81, offset: 94164},
						name: "CMD_HEAD",
					},
					&ruleRefExpr{
						pos:  position{line: 3251, col: 92, offset: 94175},
						name: "CMD_EVAL",
					},
					&ruleRefExpr{
						pos:  position{line: 3251, col: 103, offset: 94186},
						name: "CMD_REX",
					},
					&ruleRefExpr{
						pos:  position{line: 3251, col: 113, offset: 94196},
						name: "CMD_TOP",
					},
					&ruleRefExpr{
						pos:  position{line: 3251, col: 123, offset: 94206},
						name: "CMD_RARE",
					},
					&ruleRefExpr{
						pos:  position{line: 3251, col: 134, offset: 94217},
						name: "CMD_RENAME",
					},
					&ruleRefExpr{
						pos:  position{line: 3251, col: 147, offset: 94230},
						name: "CMD_TIMECHART",
					},
					&ruleRefExpr{
						pos:  position{line: 3251, col: 163, offset: 94246},
						name: "CMD_TRANSACTION",
					},
					&ruleRefExpr{
						pos:  position{line: 3251, col: 181, offset: 94264},
						name: "CMD_DEDUP",
					},
					&ruleRefExpr{
						pos:  position{line: 3251, col: 193, offset: 94276},
						name: "CMD_SORT",
					},
				},
			},
		},
		{
			name: "CMD_SEARCH",
			pos:  position{line: 3252, col: 1, offset: 94286},
			expr: &seqExpr{
				pos: position{line: 3252, col: 15, offset: 94300},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3252, col: 15, offset: 94300},
						val:        "search",
						ignoreCase: false,
						want:       "\"search\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3252, col: 24, offset: 94309},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_REGEX",
			pos:  position{line: 3253, col: 1, offset: 94315},
			expr: &seqExpr{
				pos: position{line: 3253, col: 14, offset: 94328},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3253, col: 14, offset: 94328},
						val:        "regex",
						ignoreCase: false,
						want:       "\"regex\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3253, col: 22, offset: 94336},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_STATS",
			pos:  position{line: 3254, col: 1, offset: 94342},
			expr: &seqExpr{
				pos: position{line: 3254, col: 14, offset: 94355},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3254, col: 14, offset: 94355},
						val:        "stats",
						ignoreCase: false,
						want:       "\"stats\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3254, col: 22, offset: 94363},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_FIELDS",
			pos:  position{line: 3255, col: 1, offset: 94369},
			expr: &seqExpr{
				pos: position{line: 3255, col: 15, offset: 94383},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3255, col: 15, offset: 94383},
						val:        "fields",
						ignoreCase: false,
						want:       "\"fields\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3255, col: 24, offset: 94392},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_WHERE",
			pos:  position{line: 3256, col: 1, offset: 94398},
			expr: &seqExpr{
				pos: position{line: 3256, col: 14, offset: 94411},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3256, col: 14, offset: 94411},
						val:        "where",
						ignoreCase: false,
						want:       "\"where\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3256, col: 22, offset: 94419},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_HEAD_NO_SPACE",
			pos:  position{line: 3257, col: 1, offset: 94425},
			expr: &litMatcher{
				pos:        position{line: 3257, col: 22, offset: 94446},
				val:        "head",
				ignoreCase: false,
				want:       "\"head\"",
			},
		},
		{
			name: "CMD_HEAD",
			pos:  position{line: 3258, col: 1, offset: 94453},
			expr: &seqExpr{
				pos: position{line: 3258, col: 13, offset: 94465},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3258, col: 13, offset: 94465},
						name: "CMD_HEAD_NO_SPACE",
					},
					&ruleRefExpr{
						pos:  position{line: 3258, col: 31, offset: 94483},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_EVAL",
			pos:  position{line: 3259, col: 1, offset: 94489},
			expr: &seqExpr{
				pos: position{line: 3259, col: 13, offset: 94501},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3259, col: 13, offset: 94501},
						val:        "eval",
						ignoreCase: false,
						want:       "\"eval\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3259, col: 20, offset: 94508},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_REX",
			pos:  position{line: 3260, col: 1, offset: 94514},
			expr: &seqExpr{
				pos: position{line: 3260, col: 12, offset: 94525},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3260, col: 12, offset: 94525},
						val:        "rex",
						ignoreCase: false,
						want:       "\"rex\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3260, col: 18, offset: 94531},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_SORT",
			pos:  position{line: 3261, col: 1, offset: 94537},
			expr: &seqExpr{
				pos: position{line: 3261, col: 13, offset: 94549},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3261, col: 13, offset: 94549},
						val:        "sort",
						ignoreCase: false,
						want:       "\"sort\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3261, col: 20, offset: 94556},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_TOP",
			pos:  position{line: 3262, col: 1, offset: 94562},
			expr: &litMatcher{
				pos:        position{line: 3262, col: 12, offset: 94573},
				val:        "top",
				ignoreCase: false,
				want:       "\"top\"",
			},
		},
		{
			name: "CMD_RARE",
			pos:  position{line: 3263, col: 1, offset: 94579},
			expr: &litMatcher{
				pos:        position{line: 3263, col: 13, offset: 94591},
				val:        "rare",
				ignoreCase: false,
				want:       "\"rare\"",
			},
		},
		{
			name: "CMD_RENAME",
			pos:  position{line: 3264, col: 1, offset: 94598},
			expr: &seqExpr{
				pos: position{line: 3264, col: 15, offset: 94612},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3264, col: 15, offset: 94612},
						val:        "rename",
						ignoreCase: false,
						want:       "\"rename\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3264, col: 24, offset: 94621},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_TIMECHART",
			pos:  position{line: 3265, col: 1, offset: 94627},
			expr: &seqExpr{
				pos: position{line: 3265, col: 18, offset: 94644},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3265, col: 18, offset: 94644},
						val:        "timechart",
						ignoreCase: false,
						want:       "\"timechart\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3265, col: 30, offset: 94656},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_SPAN",
			pos:  position{line: 3266, col: 1, offset: 94662},
			expr: &litMatcher{
				pos:        position{line: 3266, col: 13, offset: 94674},
				val:        "span",
				ignoreCase: false,
				want:       "\"span\"",
			},
		},
		{
			name: "CMD_TRANSACTION",
			pos:  position{line: 3267, col: 1, offset: 94681},
			expr: &seqExpr{
				pos: position{line: 3267, col: 20, offset: 94700},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3267, col: 20, offset: 94700},
						val:        "transaction",
						ignoreCase: false,
						want:       "\"transaction\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3267, col: 34, offset: 94714},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_DEDUP",
			pos:  position{line: 3268, col: 1, offset: 94720},
			expr: &litMatcher{
				pos:        position{line: 3268, col: 14, offset: 94733},
				val:        "dedup",
				ignoreCase: false,
				want:       "\"dedup\"",
			},
		},
		{
			name: "CMD_DEDUP_SORTBY",
			pos:  position{line: 3269, col: 1, offset: 94741},
			expr: &seqExpr{
				pos: position{line: 3269, col: 21, offset: 94761},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3269, col: 21, offset: 94761},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 3269, col: 27, offset: 94767},
						val:        "sortby",
						ignoreCase: false,
						want:       "\"sortby\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3269, col: 36, offset: 94776},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "EVAL_CONCAT",
			pos:  position{line: 3270, col: 1, offset: 94782},
			expr: &seqExpr{
				pos: position{line: 3270, col: 16, offset: 94797},
				exprs: []any{
					&zeroOrOneExpr{
						pos: position{line: 3270, col: 16, offset: 94797},
						expr: &ruleRefExpr{
							pos:  position{line: 3270, col: 16, offset: 94797},
							name: "SPACE",
						},
					},
					&litMatcher{
						pos:        position{line: 3270, col: 23, offset: 94804},
						val:        ".",
						ignoreCase: false,
						want:       "\".\"",
					},
					&zeroOrOneExpr{
						pos: position{line: 3270, col: 27, offset: 94808},
						expr: &ruleRefExpr{
							pos:  position{line: 3270, col: 27, offset: 94808},
							name: "SPACE",
						},
					},
				},
			},
		},
		{
			name: "MAJOR_BREAK",
			pos:  position{line: 3273, col: 1, offset: 94919},
			expr: &choiceExpr{
				pos: position{line: 3273, col: 16, offset: 94934},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 3273, col: 16, offset: 94934},
						val:        "[[\\]<>(){}|!;,'\"*\\n\\r \\t&?+]",
						chars:      []rune{'[', ']', '<', '>', '(', ')', '{', '}', '|', '!', ';', ',', '\'', '"', '*', '\n', '\r', ' ', '\t', '&', '?', '+'},
						ignoreCase: false,
						inverted:   false,
					},
					&litMatcher{
						pos:        position{line: 3273, col: 47, offset: 94965},
						val:        "%21",
						ignoreCase: false,
						want:       "\"%21\"",
					},
					&litMatcher{
						pos:        position{line: 3273, col: 55, offset: 94973},
						val:        "%26",
						ignoreCase: false,
						want:       "\"%26\"",
					},
					&litMatcher{
						pos:        position{line: 3274, col: 16, offset: 94996},
						val:        "%2526",
						ignoreCase: false,
						want:       "\"%2526\"",
					},
					&litMatcher{
						pos:        position{line: 3274, col: 26, offset: 95006},
						val:        "%3B",
						ignoreCase: false,
						want:       "\"%3B\"",
					},
					&litMatcher{
						pos:        position{line: 3274, col: 34, offset: 95014},
						val:        "%7C",
						ignoreCase: false,
						want:       "\"%7C\"",
					},
					&litMatcher{
						pos:        position{line: 3274, col: 42, offset: 95022},
						val:        "%20",
						ignoreCase: false,
						want:       "\"%20\"",
					},
					&litMatcher{
						pos:        position{line: 3274, col: 50, offset: 95030},
						val:        "%2B",
						ignoreCase: false,
						want:       "\"%2B\"",
					},
					&litMatcher{
						pos:        position{line: 3274, col: 58, offset: 95038},
						val:        "%3D",
						ignoreCase: false,
						want:       "\"%3D\"",
					},
					&litMatcher{
						pos:        position{line: 3274, col: 66, offset: 95046},
						val:        "--",
						ignoreCase: false,
						want:       "\"--\"",
					},
					&litMatcher{
						pos:        position{line: 3275, col: 16, offset: 95068},
						val:        "%2520",
						ignoreCase: false,
						want:       "\"%2520\"",
					},
					&litMatcher{
						pos:        position{line: 3275, col: 26, offset: 95078},
						val:        "%5D",
						ignoreCase: false,
						want:       "\"%5D\"",
					},
					&litMatcher{
						pos:        position{line: 3275, col: 34, offset: 95086},
						val:        "%5B",
						ignoreCase: false,
						want:       "\"%5B\"",
					},
					&litMatcher{
						pos:        position{line: 3275, col: 42, offset: 95094},
						val:        "%3A",
						ignoreCase: false,
						want:       "\"%3A\"",
					},
					&litMatcher{
						pos:        position{line: 3275, col: 50, offset: 95102},
						val:        "%0A",
						ignoreCase: false,
						want:       "\"%0A\"",
					},
					&litMatcher{
						pos:        position{line: 3275, col: 58, offset: 95110},
						val:        "%2C",
						ignoreCase: false,
						want:       "\"%2C\"",
					},
					&litMatcher{
						pos:        position{line: 3275, col: 66, offset: 95118},
						val:        "%28",
						ignoreCase: false,
						want:       "\"%28\"",
					},
					&litMatcher{
						pos:        position{line: 3275, col: 74, offset: 95126},
						val:        "%29",
						ignoreCase: false,
						want:       "\"%29\"",
					},
				},
			},
		},
		{
			name: "MINOR_BREAK",
			pos:  position{line: 3276, col: 1, offset: 95132},
			expr: &choiceExpr{
				pos: position{line: 3276, col: 16, offset: 95147},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 3276, col: 16, offset: 95147},
						val:        "[/:=@.$#%_]",
						chars:      []rune{'/', ':', '=', '@', '.', '$', '#', '%', '_'},
						ignoreCase: false,
						inverted:   false,
					},
					&litMatcher{
						pos:        position{line: 3276, col: 30, offset: 95161},
						val:        "-",
						ignoreCase: false,
						want:       "\"-\"",
					},
					&litMatcher{
						pos:        position{line: 3276, col: 36, offset: 95167},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "NOT",
			pos:  position{line: 3280, col: 1, offset: 95323},
			expr: &seqExpr{
				pos: position{line: 3280, col: 8, offset: 95330},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3280, col: 8, offset: 95330},
						val:        "NOT",
						ignoreCase: false,
						want:       "\"NOT\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3280, col: 14, offset: 95336},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "OR",
			pos:  position{line: 3281, col: 1, offset: 95342},
			expr: &seqExpr{
				pos: position{line: 3281, col: 7, offset: 95348},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3281, col: 7, offset: 95348},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 3281, col: 13, offset: 95354},
						val:        "OR",
						ignoreCase: false,
						want:       "\"OR\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3281, col: 18, offset: 95359},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "AND",
			pos:  position{line: 3282, col: 1, offset: 95365},
			expr: &seqExpr{
				pos: position{line: 3282, col: 8, offset: 95372},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3282, col: 8, offset: 95372},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 3282, col: 14, offset: 95378},
						val:        "AND",
						ignoreCase: false,
						want:       "\"AND\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3282, col: 20, offset: 95384},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "PIPE",
			pos:  position{line: 3283, col: 1, offset: 95390},
			expr: &seqExpr{
				pos: position{line: 3283, col: 9, offset: 95398},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3283, col: 9, offset: 95398},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 3283, col: 24, offset: 95413},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3283, col: 28, offset: 95417},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 3284, col: 1, offset: 95432},
			expr: &seqExpr{
				pos: position{line: 3284, col: 7, offset: 95438},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3284, col: 7, offset: 95438},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 3284, col: 13, offset: 95444},
						val:        "as",
						ignoreCase: true,
						want:       "\"AS\"i",
					},
					&ruleRefExpr{
						pos:  position{line: 3284, col: 19, offset: 95450},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 3285, col: 1, offset: 95476},
			expr: &seqExpr{
				pos: position{line: 3285, col: 7, offset: 95482},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3285, col: 7, offset: 95482},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 3285, col: 13, offset: 95488},
						val:        "by",
						ignoreCase: true,
						want:       "\"BY\"i",
					},
					&ruleRefExpr{
						pos:  position{line: 3285, col: 19, offset: 95494},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "EQUAL",
			pos:  position{line: 3287, col: 1, offset: 95521},
			expr: &seqExpr{
				pos: position{line: 3287, col: 10, offset: 95530},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3287, col: 10, offset: 95530},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 3287, col: 25, offset: 95545},
						val:        "=",
						ignoreCase: false,
						want:       "\"=\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3287, col: 29, offset: 95549},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "COMMA",
			pos:  position{line: 3288, col: 1, offset: 95564},
			expr: &seqExpr{
				pos: position{line: 3288, col: 10, offset: 95573},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3288, col: 10, offset: 95573},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 3288, col: 25, offset: 95588},
						val:        ",",
						ignoreCase: false,
						want:       "\",\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3288, col: 29, offset: 95592},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "L_PAREN",
			pos:  position{line: 3289, col: 1, offset: 95607},
			expr: &seqExpr{
				pos: position{line: 3289, col: 12, offset: 95618},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3289, col: 12, offset: 95618},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&ruleRefExpr{
						pos:  position{line: 3289, col: 16, offset: 95622},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "R_PAREN",
			pos:  position{line: 3290, col: 1, offset: 95637},
			expr: &seqExpr{
				pos: position{line: 3290, col: 12, offset: 95648},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 3290, col: 12, offset: 95648},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 3290, col: 27, offset: 95663},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 3292, col: 1, offset: 95668},
			expr: &notExpr{
				pos: position{line: 3292, col: 8, offset: 95675},
				expr: &anyMatcher{
					line: 3292, col: 9, offset: 95676,
				},
			},
		},
		{
			name: "WHITESPACE",
			pos:  position{line: 3293, col: 1, offset: 95678},
			expr: &choiceExpr{
				pos: position{line: 3293, col: 15, offset: 95692},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 3293, col: 15, offset: 95692},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&litMatcher{
						pos:        position{line: 3293, col: 21, offset: 95698},
						val:        "\t",
						ignoreCase: false,
						want:       "\"\\t\"",
					},
					&litMatcher{
						pos:        position{line: 3293, col: 28, offset: 95705},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
					&litMatcher{
						pos:        position{line: 3293, col: 35, offset: 95712},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
				},
			},
		},
		{
			name: "SPACE",
			pos:  position{line: 3294, col: 1, offset: 95717},
			expr: &choiceExpr{
				pos: position{line: 3294, col: 10, offset: 95726},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 3294, col: 11, offset: 95727},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 3294, col: 11, offset: 95727},
								expr: &ruleRefExpr{
									pos:  position{line: 3294, col: 11, offset: 95727},
									name: "WHITESPACE",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 3294, col: 23, offset: 95739},
								name: "COMMENT",
							},
							&zeroOrOneExpr{
								pos: position{line: 3294, col: 31, offset: 95747},
								expr: &ruleRefExpr{
									pos:  position{line: 3294, col: 31, offset: 95747},
									name: "WHITESPACE",
								},
							},
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 3294, col: 46, offset: 95762},
						expr: &ruleRefExpr{
							pos:  position{line: 3294, col: 46, offset: 95762},
							name: "WHITESPACE",
						},
					},
				},
			},
		},
		{
			name: "COMMENT",
			pos:  position{line: 3295, col: 1, offset: 95774},
			expr: &seqExpr{
				pos: position{line: 3295, col: 12, offset: 95785},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 3295, col: 12, offset: 95785},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 3295, col: 18, offset: 95791},
						expr: &seqExpr{
							pos: position{line: 3295, col: 19, offset: 95792},
							exprs: []any{
								&notExpr{
									pos: position{line: 3295, col: 19, offset: 95792},
									expr: &litMatcher{
										pos:        position{line: 3295, col: 21, offset: 95794},
										val:        "```",
										ignoreCase: false,
										want:       "\"```\"",
									},
								},
								&anyMatcher{
									line: 3295, col: 28, offset: 95801,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 3295, col: 32, offset: 95805},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
				},
			},
		},
		{
			name: "EMPTY_OR_SPACE",
			pos:  position{line: 3296, col: 1, offset: 95811},
			expr: &choiceExpr{
				pos: position{line: 3296, col: 20, offset: 95830},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 3296, col: 20, offset: 95830},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 3296, col: 28, offset: 95838},
						val:        "",
						ignoreCase: false,
						want:       "\"\"",
					},
				},
			},
		},
		{
			name: "SPACE_OR_COMMA",
			pos:  position{line: 3297, col: 1, offset: 95841},
			expr: &choiceExpr{
				pos: position{line: 3297, col: 19, offset: 95859},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 3297, col: 19, offset: 95859},
						name: "COMMA",
					},
					&ruleRefExpr{
						pos:  position{line: 3297, col: 27, offset: 95867},
						name: "SPACE",
					},
				},
			},
		},
	},
}

func (c *current) onStart1(initialSearch, filterBlocks, queryAggBlocks any) (any, error) {
	var q ast.QueryStruct
	q.SearchFilter = initialSearch.(*ast.Node)

	// Join the InitialSearchBlock with the FilterBlocks with AND nodes. For a
	// search like "A | B | C | D" we should generate the node structure below
	// so that when we run the search it evaluates A first.
	//
	//      AND
	//     /   \
	//    A     AND
	//         /   \
	//        B     AND
	//             /   \
	//            C     D

	filterBlocksSlice := filterBlocks.([]any)
	switch len(filterBlocksSlice) {
	case 0:
		q.SearchFilter = initialSearch.(*ast.Node)
	case 1:
		q.SearchFilter = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     initialSearch.(*ast.Node),
			Right:    filterBlocksSlice[0].(*ast.Node),
		}
	default: // len > 1
		// Iterate backwards so we build the node structure mentioned above.
		root := filterBlocksSlice[len(filterBlocksSlice)-1].(*ast.Node)
		for i := len(filterBlocksSlice) - 2; i > -1; i-- {
			newRoot := &ast.Node{
				NodeType: ast.NodeAnd,
				Left:     filterBlocksSlice[i].(*ast.Node),
				Right:    root,
			}

			root = newRoot
		}

		q.SearchFilter = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     initialSearch.(*ast.Node),
			Right:    root,
		}
	}

	if queryAggBlocks != nil {
		queryAggSlice := queryAggBlocks.([]any)

		if len(queryAggSlice) > 0 {
			// Chain together all QueryAggergators.
			q.PipeCommands = queryAggSlice[0].(*structs.QueryAggregators)

			// Go to the end of the first chain.
			curQueryAgg := q.PipeCommands
			for ; curQueryAgg.Next != nil; curQueryAgg = curQueryAgg.Next {
			}

			// Link the remaining chains.
			for i := range queryAggSlice[1:] {
				queryAgg := queryAggSlice[i+1].(*structs.QueryAggregators)
				curQueryAgg.Next = queryAgg

				// Go to the end of this chain.
				for ; curQueryAgg.Next != nil; curQueryAgg = curQueryAgg.Next {
				}
			}
		}
	}

	return q, nil
}

func (p *parser) callonStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStart1(stack["initialSearch"], stack["filterBlocks"], stack["queryAggBlocks"])
}

func (c *current) onInitialSearchBlock1(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonInitialSearchBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialSearchBlock1(stack["clause"])
}

func (c *current) onSearchBlock1(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonSearchBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBlock1(stack["clause"])
}

func (c *current) onFilterBlock1(block any) (any, error) {
	return block, nil
}

func (p *parser) callonFilterBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterBlock1(stack["block"])
}

func (c *current) onQueryAggergatorBlock1(block any) (any, error) {
	queryAgg := block.(*structs.QueryAggregators)
	return queryAgg, nil
}

func (p *parser) callonQueryAggergatorBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQueryAggergatorBlock1(stack["block"])
}

func (c *current) onFieldSelectBlock1(op, fields any) (any, error) {
	columnsRequest := &structs.ColumnsRequest{}
	if op == nil || string(op.([]byte)) == "+" {
		columnsRequest.IncludeColumns = fields.([]string)
	} else {
		columnsRequest.ExcludeColumns = fields.([]string)
	}

	queryAggregator := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			OutputColumns: columnsRequest,
		},
	}

	return queryAggregator, nil
}

func (p *parser) callonFieldSelectBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldSelectBlock1(stack["op"], stack["fields"])
}

func (c *current) onAggregatorBlock1(aggs, byFields, options any) (any, error) {
	aggNode := &structs.QueryAggregators{}

	// Extract the MeasureAggregators and check if any of the aggregation fields
	// need to be renamed.
	aggsSlice := aggs.([]*aggregator)
	measureAggs := make([]*structs.MeasureAggregator, len(aggsSlice))
	columnsRequest := &structs.ColumnsRequest{}
	columnsRequest.RenameAggregationColumns = make(map[string]string, 0)

	for i, agg := range aggsSlice {
		measureAggs[i] = agg.measureAgg

		if agg.renameOutputField {
			columnsRequest.RenameAggregationColumns[measureAggs[i].String()] = agg.outputFieldNewName
		}
	}

	// If any agg field was renamed, make a QueryAggregators for all the renames.
	if len(columnsRequest.RenameAggregationColumns) > 0 {
		renameNode := &structs.QueryAggregators{
			PipeCommandType: structs.OutputTransformType,
			OutputTransforms: &structs.OutputTransforms{
				OutputColumns: columnsRequest,
			},
		}

		aggNode.Next = renameNode
	}

	if byFields == nil {
		aggNode.PipeCommandType = structs.MeasureAggsType
		aggNode.MeasureOperations = measureAggs
	} else {
		aggNode.PipeCommandType = structs.GroupByType
		aggNode.GroupByRequest = &structs.GroupByRequest{
			MeasureOperations: measureAggs,
			GroupByColumns:    byFields.([]string),
		}
		aggNode.BucketLimit = query.MAX_GRP_BUCKS
	}

	if options != nil {
		aggNode.StatsOptions = options.(*structs.StatsOptions)
	} else {
		aggNode.StatsOptions = initializeStatsOptions()
	}

	return aggNode, nil
}

func (p *parser) callonAggregatorBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregatorBlock1(stack["aggs"], stack["byFields"], stack["options"])
}

func (c *current) onStatsOptions1(option any) (any, error) {
	//Default value
	options := initializeStatsOptions()

	optionSlice := option.([]any)
	for _, opt := range optionSlice {
		optArr := opt.([]string)
		// Check for matching option types
		switch optArr[0] {
		case "dedup_splitvals":
			dedupSplitvalsBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatsBlock: Options: invalid param for dedup_splitvals option, param: %v, err: %v", optArr[1], err)
			}
			options.DedupSplitvals = dedupSplitvalsBool
		case "partitions":
			pVal, err := strconv.ParseUint(optArr[1], 10, 64)
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatsBlock: Options: invalid param for partitions option, param: %v, err: %v", optArr[1], err)
			}
			options.Partitions = pVal
		case "allnum":
			allnumBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatsBlock: Options: invalid param for allnum option, param: %v, err: %v", optArr[1], err)
			}
			options.Allnum = allnumBool
		case "delim":
			options.Delim = optArr[1]
		default:
			return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: invalid option: %v", optArr[0])
		}
	}

	return options, nil
}

func (p *parser) callonStatsOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatsOptions1(stack["option"])
}

func (c *current) onStatsOption1(optionCMD, str any) (any, error) {
	optionArr := []string{optionCMD.(string), str.(string)}
	return optionArr, nil
}

func (p *parser) callonStatsOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatsOption1(stack["optionCMD"], stack["str"])
}

func (c *current) onStatsOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: StatsOptionCMD: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonStatsOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatsOptionCMD1(stack["option"])
}

func (c *current) onGroupbyBlock1(fields any) (any, error) {
	// Wildcard fields are not allowed. See https://docs.splunk.com/Documentation/Splunk/9.1.0/SearchReference/Stats
	for _, field := range fields.([]string) {
		if strings.Contains(field, "*") {
			return nil, errors.New("BY clause cannot contain fields with wildcards")
		}
	}

	return fields, nil
}

func (p *parser) callonGroupbyBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupbyBlock1(stack["fields"])
}

func (c *current) onRegexBlock1(keyAndOp, str any) (any, error) {
	var key, op string
	if keyAndOp == nil {
		key = "*"
		op = "="
	} else {
		keyAndOpSlice := keyAndOp.([]any)
		key = keyAndOpSlice[0].(string)
		op = keyAndOpSlice[1].(string)
	}

	// Remove the quotation marks.
	regex := str.(string)
	regex = regex[1 : len(regex)-1]

	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:           op,
			Field:        key,
			Values:       regex,
			ValueIsRegex: true,
		},
	}

	return node, nil
}

func (p *parser) callonRegexBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexBlock1(stack["keyAndOp"], stack["str"])
}

func (c *current) onClauseLevel41(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*ast.Node)
	for _, v := range rest.([]any) {
		parts := v.([]any) // This will be [(AND / SPACE), ClauseLevel3].
		cur = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     cur,
			Right:    parts[1].(*ast.Node),
		}
	}

	return cur, nil
}

func (p *parser) callonClauseLevel41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel41(stack["first"], stack["rest"])
}

func (c *current) onClauseLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*ast.Node)
	for _, v := range rest.([]any) {
		parts := v.([]any) // This will be [OR, ClauseLevel2].
		cur = &ast.Node{
			NodeType: ast.NodeOr,
			Left:     cur,
			Right:    parts[1].(*ast.Node),
		}
	}

	return cur, nil
}

func (p *parser) callonClauseLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel31(stack["first"], stack["rest"])
}

func (c *current) onClauseLevel22(notList, first any) (any, error) {
	// There's an issue with how queries with AST Not nodes are run, so use
	// De Morgan's law to manipulate the expression.
	node := first.(*ast.Node)
	numNots := len(notList.([]any))

	if numNots%2 == 1 {
		deMorgansLaw(node)
	}

	return node, nil
}

func (p *parser) callonClauseLevel22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel22(stack["notList"], stack["first"])
}

func (c *current) onClauseLevel29(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonClauseLevel29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel29(stack["clause"])
}

func (c *current) onClauseLevel12(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonClauseLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel12(stack["clause"])
}

func (c *current) onClauseLevel18(term any) (any, error) {
	return term, nil
}

func (p *parser) callonClauseLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel18(stack["term"])
}

func (c *current) onSearchTerm1(term any) (any, error) {
	return term, nil
}

func (p *parser) callonSearchTerm1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchTerm1(stack["term"])
}

func (c *current) onTimechartBlock1(tcArgs, limitExpr any) (any, error) {
	aggNode := &structs.QueryAggregators{}

	columnsRequest := &structs.ColumnsRequest{}
	columnsRequest.RenameAggregationColumns = make(map[string]string, 0)
	measureAggs := make([]*structs.MeasureAggregator, 0)

	timechartExpr := &structs.TimechartExpr{}
	byField := ""

	if tcArgs == nil {
		return nil, fmt.Errorf("spl peg: timechart: either single-agg or eval-expression by split-by-clause is required")
	}

	timechartArgs := tcArgs.(*TimechartArgs)

	// Todo: Should add || timechartArgs.evalExpr == nil
	if timechartArgs.singleAggExpr == nil {
		return nil, fmt.Errorf("spl peg: timechart: either single-agg or eval-expression by split-by-clause is required")
	}

	var bOptions *structs.BinOptions

	if timechartArgs.tcOptions != nil {
		if timechartArgs.tcOptions.BinOptions != nil {
			bOptions = timechartArgs.tcOptions.BinOptions
		}
	}

	if timechartArgs.singleAggExpr != nil {
		singleAgg := &structs.SingleAgg{}
		aggTemp := timechartArgs.singleAggExpr

		for i, agg := range aggTemp.aggregators {
			measureAggs = append(measureAggs, agg.measureAgg)

			if agg.renameOutputField {
				measureAggs[i].StrEnc = agg.outputFieldNewName
			}
		}

		singleAgg.MeasureOperations = measureAggs
		timechartExpr.SingleAgg = singleAgg

		if aggTemp.SplitByClause != nil {
			byField = aggTemp.SplitByClause.Field
		}
	}

	// TODO: if timechartArgs.evalExpr != nil {}

	aggNode.PipeCommandType = structs.GroupByType
	aggNode.GroupByRequest = &structs.GroupByRequest{
		MeasureOperations: measureAggs,
		GroupByColumns:    []string{"timestamp"},
	}
	aggNode.BucketLimit = query.MAX_GRP_BUCKS

	if bOptions == nil {
		bOptions = &structs.BinOptions{
			SpanOptions: &structs.SpanOptions{
				DefaultSettings: true,
				SpanLength: &structs.SpanLength{
					Num:       1,
					TimeScalr: utils.TMMinute,
				},
			},
		}
	}

	var limitExprTmp *structs.LimitExpr
	if limitExpr != nil {
		limitExprTmp = limitExpr.(*structs.LimitExpr)
		if len(measureAggs) > 1 {
			limitExprTmp.LimitScoreMode = structs.LSMByFreq
		}
	}

	timeBucket := aggregations.InitTimeBucket(bOptions.SpanOptions.SpanLength.Num, bOptions.SpanOptions.SpanLength.TimeScalr, byField, limitExprTmp, len(measureAggs))
	aggNode.TimeHistogram = timeBucket

	return aggNode, nil
}

func (p *parser) callonTimechartBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimechartBlock1(stack["tcArgs"], stack["limitExpr"])
}

func (c *current) onTimechartArgumentsList1(first, rest any) (any, error) {
	restSlice := rest.([]any)
	timechartArgs := &TimechartArgs{}

	numArgs := 1 + len(restSlice)

	for i := 0; i < numArgs; i++ {

		var numArg interface{}

		if i == 0 {
			numArg = first
		} else {
			numArg = restSlice[i-1].([]any)[1]
		}

		switch numArg.(type) {
		case *singleAggTemp:
			timechartArgs.singleAggExpr = numArg.(*singleAggTemp)
		case *structs.TcOptions:
			timechartArgs.tcOptions = numArg.(*structs.TcOptions)
		default:
			return nil, fmt.Errorf("Spl peg: Timechart: invalid timechart argument: %v", numArg)
		}
	}

	return timechartArgs, nil
}

func (p *parser) callonTimechartArgumentsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimechartArgumentsList1(stack["first"], stack["rest"])
}

func (c *current) onTimechartArgument1(tcArg any) (any, error) {
	return tcArg, nil
}

func (p *parser) callonTimechartArgument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimechartArgument1(stack["tcArg"])
}

func (c *current) onSingleAggExpr1(aggs, splitByClause any) (any, error) {
	singleAggExpr := &singleAggTemp{
		aggregators: aggs.([]*aggregator),
	}

	if splitByClause != nil {
		singleAggExpr.SplitByClause = splitByClause.(*structs.SplitByClause)
	}

	return singleAggExpr, nil
}

func (p *parser) callonSingleAggExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleAggExpr1(stack["aggs"], stack["splitByClause"])
}

func (c *current) onSplitByClause1(field any) (any, error) {
	splitByClause := &structs.SplitByClause{
		Field: field.(string),
	}

	return splitByClause, nil
}

func (p *parser) callonSplitByClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSplitByClause1(stack["field"])
}

func (c *current) onTcOptions1(option any) (any, error) {
	//Default value
	tcOptions := &structs.TcOptions{
		UseNull:  true,
		UseOther: true,
		NullStr:  "null",
		OtherStr: "other",
	}
	switch option.(type) {
	case *structs.BinOptions:
		tcOptions.BinOptions = option.(*structs.BinOptions)
	case [][]string:
		optionSlice := option.([]any)
		for _, opt := range optionSlice {
			optArr := opt.([]string)
			switch optArr[0] {
			case "usenull":
				useNullBool, err := strconv.ParseBool(optArr[1])
				if err != nil {
					return nil, fmt.Errorf("Spl peg: Timechart: TcOptions: %v", err)
				}
				tcOptions.UseNull = useNullBool
			case "useother":
				useOtherBool, err := strconv.ParseBool(optArr[1])
				if err != nil {
					return nil, fmt.Errorf("Spl peg: Timechart: TcOptions: %v", err)
				}
				tcOptions.UseOther = useOtherBool
			case "nullstr":
				tcOptions.OtherStr = optArr[1]
			case "otherstr":
				tcOptions.OtherStr = optArr[1]
			default:
				return nil, fmt.Errorf("Spl peg: Timechart: TcOptions: invalid option: %v", optArr[0])
			}
		}
	default:
		return nil, fmt.Errorf("Spl peg: Timechart: Invalid tcOptions %v", option)
	}
	return tcOptions, nil
}

func (p *parser) callonTcOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTcOptions1(stack["option"])
}

func (c *current) onTcOption1(tcOptionCMD, val any) (any, error) {
	tcOptionArr := []string{tcOptionCMD.(string), val.(string)}
	return tcOptionArr, nil
}

func (p *parser) callonTcOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTcOption1(stack["tcOptionCMD"], stack["val"])
}

func (c *current) onTcOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Timechart: TcOptionCMD: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonTcOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTcOptionCMD1(stack["option"])
}

func (c *current) onBinOptions1(spanOptions any) (any, error) {
	binOptions := &structs.BinOptions{
		SpanOptions: spanOptions.(*structs.SpanOptions),
	}
	return binOptions, nil
}

func (p *parser) callonBinOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptions1(stack["spanOptions"])
}

func (c *current) onSpanOptions1(spanLength any) (any, error) {
	spanOptions := &structs.SpanOptions{
		SpanLength: spanLength.(*structs.SpanLength),
	}
	return spanOptions, nil
}

func (p *parser) callonSpanOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpanOptions1(stack["spanLength"])
}

func (c *current) onSpanLength1(intAsStr, timeScale any) (any, error) {
	num, err := strconv.Atoi(intAsStr.(string))
	if err != nil {
		return nil, fmt.Errorf("SpanLength: Invalid num (%v): %v", intAsStr.(string), err)
	}

	spanLength := &structs.SpanLength{
		Num:       num,
		TimeScalr: timeScale.(utils.TimeUnit),
	}
	return spanLength, nil
}

func (p *parser) callonSpanLength1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpanLength1(stack["intAsStr"], stack["timeScale"])
}

func (c *current) onTimeScale1(timeUnit any) (any, error) {
	return timeUnit, nil
}

func (p *parser) callonTimeScale1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimeScale1(stack["timeUnit"])
}

func (c *current) onLimitExpr1(sortBy, intAsStr any) (any, error) {
	num, err := strconv.Atoi(intAsStr.(string))
	if err != nil {
		return nil, fmt.Errorf("SpanLength: Invalid num (%v): %v", intAsStr.(string), err)
	}

	limitExpr := &structs.LimitExpr{
		IsTop: true, // Default Value
		Num:   num,
	}

	if sortBy != nil {
		sortByStr, err := transferUint8ToString(sortBy)
		if err != nil {
			return nil, fmt.Errorf("Spl peg: Timechart: %v", err)
		}
		if sortByStr == "bottom" {
			limitExpr.IsTop = false
		}
	}

	return limitExpr, nil
}

func (p *parser) callonLimitExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitExpr1(stack["sortBy"], stack["intAsStr"])
}

func (c *current) onStatisticBlock1(statisticExpr any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		StatisticColRequest: statisticExpr.(*structs.StatisticExpr),
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	measureAgg := &structs.MeasureAggregator{
		MeasureCol:  "*",
		MeasureFunc: utils.Count,
	}

	measureOperations := make([]*structs.MeasureAggregator, 1)
	measureOperations[0] = measureAgg

	groupByColumns := append(statisticExpr.(*structs.StatisticExpr).FieldList, statisticExpr.(*structs.StatisticExpr).ByClause...)

	aggNode := &structs.QueryAggregators{}
	aggNode.Next = root
	aggNode.PipeCommandType = structs.GroupByType
	aggNode.GroupByRequest = &structs.GroupByRequest{
		MeasureOperations: measureOperations,
		GroupByColumns:    groupByColumns,
	}

	return aggNode, nil
}

func (p *parser) callonStatisticBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticBlock1(stack["statisticExpr"])
}

func (c *current) onStatisticExpr1(cmd, limit, fieldList, byClause, options any) (any, error) {

	statisticExpr := &structs.StatisticExpr{
		FieldList: fieldList.([]interface{})[1].([]string),
	}

	statisticCmd, err := transferUint8ToString(cmd)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: StatisticExpr: %v", err)
	}

	if statisticCmd == "top" {
		statisticExpr.StatisticFunctionMode = structs.SFMTop
	} else {
		statisticExpr.StatisticFunctionMode = structs.SFMRare
	}

	if limit != nil {
		statisticExpr.Limit = limit.(string)
	}

	if options != nil {
		statisticExpr.StatisticOptions = options.(*structs.StatisticOptions)
	} else {
		statisticExpr.StatisticOptions = &structs.StatisticOptions{
			ShowCount:    true,
			CountField:   "count",
			ShowPerc:     true,
			PercentField: "percent",
			UseOther:     false,
			OtherStr:     "Other",
		}
	}

	if byClause != nil {
		statisticExpr.ByClause = byClause.([]string)
	}

	return statisticExpr, nil
}

func (p *parser) callonStatisticExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticExpr1(stack["cmd"], stack["limit"], stack["fieldList"], stack["byClause"], stack["options"])
}

func (c *current) onStatisticLimit2(number any) (any, error) {
	return number.(string), nil
}

func (p *parser) callonStatisticLimit2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticLimit2(stack["number"])
}

func (c *current) onStatisticLimit7(limit any) (any, error) {
	return limit.(string), nil
}

func (p *parser) callonStatisticLimit7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticLimit7(stack["limit"])
}

func (c *current) onStatisticOptions1(option any) (any, error) {
	//Default value
	options := &structs.StatisticOptions{
		ShowCount:    true,
		CountField:   "count",
		ShowPerc:     true,
		PercentField: "percent",
		UseOther:     false,
		OtherStr:     "other",
	}

	optionSlice := option.([]any)
	for _, opt := range optionSlice {
		optArr := opt.([]string)
		// Check for matching option types
		switch optArr[0] {
		case "showcount":
			showCountBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.ShowCount = showCountBool
		case "countfield":
			options.CountField = optArr[1]
		case "showperc":
			showPercBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.ShowPerc = showPercBool
		case "percentfield":
			options.PercentField = optArr[1]
		case "useother":
			useOtherBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.UseOther = useOtherBool
		case "otherstr":
			options.OtherStr = optArr[1]
		default:
			return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: invalid option")
		}
	}

	return options, nil
}

func (p *parser) callonStatisticOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticOptions1(stack["option"])
}

func (c *current) onStatisticOption1(optionCMD, field any) (any, error) {
	optionArr := []string{optionCMD.(string), field.(string)}
	return optionArr, nil
}

func (p *parser) callonStatisticOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticOption1(stack["optionCMD"], stack["field"])
}

func (c *current) onStatisticOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: StatisticExpr: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonStatisticOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticOptionCMD1(stack["option"])
}

func (c *current) onByClause2(fieldList any) (any, error) {
	return fieldList.([]string), nil
}

func (p *parser) callonByClause2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByClause2(stack["fieldList"])
}

func (c *current) onByClause7(groupByBlock any) (any, error) {
	return groupByBlock.([]string), nil
}

func (p *parser) callonByClause7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByClause7(stack["groupByBlock"])
}

func (c *current) onDedupBlock1(dedupExpr any) (any, error) {

	letColReq := &structs.LetColumnsRequest{
		DedupColRequest: dedupExpr.(*structs.DedupExpr),
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonDedupBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupBlock1(stack["dedupExpr"])
}

func (c *current) onDedupExpr1(limitArr, options1, fieldList, options2, sortByClause any) (any, error) {
	dedupExpr := &structs.DedupExpr{
		FieldList:         fieldList.([]string),
		Limit:             1,
		DedupCombinations: make(map[string]map[int][]structs.SortValue, 0),
		DedupRecords:      make(map[string]map[string]interface{}, 0),
	}

	if limitArr != nil {
		limitStr := limitArr.([]interface{})[1].(string)
		limit, err := strconv.ParseUint(limitStr, 10, 64)
		if err != nil || limit == 0 {
			return nil, fmt.Errorf("Invalid limit (%v): %v", limitStr, err)
		}
		dedupExpr.Limit = limit
	}

	dedupExpr.DedupOptions = &structs.DedupOptions{
		Consecutive: false,
		KeepEmpty:   false,
		KeepEvents:  false,
	}

	if options1 != nil {
		dedupExpr.DedupOptions = options1.(*structs.DedupOptions)
	}
	if options2 != nil {
		options := options2.(*structs.DedupOptions)

		if options.Consecutive {
			dedupExpr.DedupOptions.Consecutive = options.Consecutive
		}
		if options.KeepEmpty {
			dedupExpr.DedupOptions.KeepEmpty = options.KeepEmpty
		}
		if options.KeepEvents {
			dedupExpr.DedupOptions.KeepEvents = options.KeepEvents
		}
	}

	if sortByClause != nil {
		dedupExpr.DedupSortEles = sortByClause.([]*structs.SortElement)

		// Make the DedupSortAscending from the DedupSortEles.
		dedupExpr.DedupSortAscending = make([]int, len(dedupExpr.DedupSortEles))
		for i, ele := range dedupExpr.DedupSortEles {
			if ele.SortByAsc {
				dedupExpr.DedupSortAscending[i] = 1
			} else {
				dedupExpr.DedupSortAscending[i] = -1
			}
		}
	}

	return dedupExpr, nil
}

func (p *parser) callonDedupExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupExpr1(stack["limitArr"], stack["options1"], stack["fieldList"], stack["options2"], stack["sortByClause"])
}

func (c *current) onDedupFieldName1(field any) (any, error) {
	return field, nil
}

func (p *parser) callonDedupFieldName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupFieldName1(stack["field"])
}

func (c *current) onDedupFieldList1(first, rest any) (any, error) {
	// Convert `rest` to a slice. Each element of the slice will be a 2-element
	// slice where the first element is " " and the second is a FieldName.
	restSlice := rest.([]any)

	numFieldNames := 1 + len(restSlice)
	fields := make([]string, numFieldNames)
	fields[0] = first.(string)

	for i := 1; i < numFieldNames; i++ {
		separatorAndField := restSlice[i-1].([]any)
		fields[i] = separatorAndField[1].(string)
	}

	return fields, nil
}

func (p *parser) callonDedupFieldList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupFieldList1(stack["first"], stack["rest"])
}

func (c *current) onDedupOptions1(option any) (any, error) {
	//Default value
	options := &structs.DedupOptions{
		Consecutive: false,
		KeepEmpty:   false,
		KeepEvents:  false,
	}

	optionSlice := option.([]any)
	for _, opt := range optionSlice {
		optArr := opt.([]string)
		// Check for matching option types
		switch optArr[0] {
		case "consecutive":
			consecutiveBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: DedupBlock: Options: %v", err)
			}
			options.Consecutive = consecutiveBool
		case "keepempty":
			keepEmptyBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: DedupBlock: Options: %v", err)
			}
			options.KeepEmpty = keepEmptyBool
		case "keepevents":
			keepEventsBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: DedupBlock: Options: %v", err)
			}
			options.KeepEvents = keepEventsBool
		default:
			return nil, fmt.Errorf("Spl peg: DedupBlock: Options: invalid option")
		}
	}

	return options, nil
}

func (p *parser) callonDedupOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupOptions1(stack["option"])
}

func (c *current) onDedupOption1(optionCMD, field any) (any, error) {
	optionArr := []string{optionCMD.(string), field.(string)}
	return optionArr, nil
}

func (p *parser) callonDedupOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupOption1(stack["optionCMD"], stack["field"])
}

func (c *current) onDedupOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: DedupExpr: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonDedupOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupOptionCMD1(stack["option"])
}

func (c *current) onDedupSortByClause1(dedupSortEles any) (any, error) {
	return dedupSortEles, nil
}

func (p *parser) callonDedupSortByClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupSortByClause1(stack["dedupSortEles"])
}

func (c *current) onSortElements1(first, rest any) (any, error) {
	restSlice := rest.([]any)

	length := 1 + len(restSlice)
	sortEles := make([]*structs.SortElement, length)
	sortEles[0] = first.(*structs.SortElement)

	for i := 1; i < length; i++ {
		elements := restSlice[i-1].([]any)
		sortEles[i] = elements[1].(*structs.SortElement)
	}

	return sortEles, nil
}

func (p *parser) callonSortElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortElements1(stack["first"], stack["rest"])
}

func (c *current) onSingleSortElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSingleSortElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleSortElement1(stack["element"])
}

func (c *current) onSingleSortElementWithoutCast1(sortBySymbol, field any) (any, error) {
	sortByAsc := true

	symbol := sortBySymbol.([]byte)
	if len(symbol) > 0 && symbol[0] == '-' {
		sortByAsc = false
	}

	return &structs.SortElement{
		SortByAsc: sortByAsc,
		Op:        "",
		Field:     field.(string),
	}, nil
}

func (p *parser) callonSingleSortElementWithoutCast1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleSortElementWithoutCast1(stack["sortBySymbol"], stack["field"])
}

func (c *current) onSingleSortElementWithCast1(sortBySymbol, op, field any) (any, error) {
	sortByAsc := true

	symbol := sortBySymbol.([]byte)
	if len(symbol) > 0 && symbol[0] == '-' {
		sortByAsc = false
	}

	opStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: singleSortElementWithCast: %v", err)
	}

	return &structs.SortElement{
		SortByAsc: sortByAsc,
		Op:        opStr,
		Field:     field.(string),
	}, nil
}

func (p *parser) callonSingleSortElementWithCast1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleSortElementWithCast1(stack["sortBySymbol"], stack["op"], stack["field"])
}

func (c *current) onRenameBlock1(renameExpr any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		RenameColRequest: renameExpr.(*structs.RenameExpr),
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonRenameBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameBlock1(stack["renameExpr"])
}

func (c *current) onRenameExpr2(originalPattern, newPattern any) (any, error) {
	renameExpr := &structs.RenameExpr{
		RenameExprMode:  structs.REMPhrase,
		OriginalPattern: originalPattern.(string),
		NewPattern:      removeQuotes(newPattern),
	}

	return renameExpr, nil
}

func (p *parser) callonRenameExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameExpr2(stack["originalPattern"], stack["newPattern"])
}

func (c *current) onRenameExpr9(originalPattern, newPattern any) (any, error) {
	isRegex, err := isRegexRename(originalPattern.(string), newPattern.(string))
	if err != nil {
		return nil, fmt.Errorf("Spl peg: RenameExpr: %v", err)
	}

	var renameExprMode structs.RenameExprMode
	if isRegex {
		renameExprMode = structs.REMRegex
	} else {
		renameExprMode = structs.REMOverride
	}

	renameExpr := &structs.RenameExpr{
		RenameExprMode:  renameExprMode,
		OriginalPattern: originalPattern.(string),
		NewPattern:      newPattern.(string),
	}

	return renameExpr, nil
}

func (p *parser) callonRenameExpr9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameExpr9(stack["originalPattern"], stack["newPattern"])
}

func (c *current) onRexBlock1(field, str any) (any, error) {
	pattern := removeQuotes(str)
	rexColNames, err := getRexColNames(pattern)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: RexBlock: %v", err)
	}
	rexExpr := &structs.RexExpr{
		FieldName:   field.(string),
		Pattern:     transferPCREToRE2(pattern),
		RexColNames: rexColNames,
	}

	letColReq := &structs.LetColumnsRequest{
		RexColRequest: rexExpr,
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonRexBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRexBlock1(stack["field"], stack["str"])
}

func (c *current) onSortBlock1(limit, sortByEles any) (any, error) {

	sortExpr := &structs.SortExpr{
		SortEles:    sortByEles.([]*structs.SortElement),
		SortRecords: make(map[string]map[string]interface{}, 0),
		Limit:       10000,
	}

	if limit != nil {
		sortExpr.Limit = limit.(uint64)
	}

	ascendingArr := make([]int, len(sortExpr.SortEles))
	for i, ele := range sortExpr.SortEles {
		if ele.SortByAsc {
			ascendingArr[i] = 1
		} else {
			ascendingArr[i] = -1
		}
	}

	sortExpr.SortAscending = ascendingArr

	letColReq := &structs.LetColumnsRequest{
		SortColRequest: sortExpr,
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonSortBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortBlock1(stack["limit"], stack["sortByEles"])
}

func (c *current) onSortLimit1(intAsStr any) (any, error) {
	limit, err := strconv.ParseUint(intAsStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid limit (%v): %v", intAsStr.(string), err)
	}

	if limit == 0 {
		limit = math.MaxUint64
	}

	return limit, nil
}

func (p *parser) callonSortLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortLimit1(stack["intAsStr"])
}

func (c *current) onEvalBlock1(first, rest any) (any, error) {
	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: first.(*structs.LetColumnsRequest),
		},
	}

	leafQueryAgg := root
	restSlice := rest.([]any)
	for i := range restSlice {
		CommaSpaceAndEval := restSlice[i].([]any)
		nextQueryAgg := &structs.QueryAggregators{
			PipeCommandType: structs.OutputTransformType,
			OutputTransforms: &structs.OutputTransforms{
				LetColumns: CommaSpaceAndEval[1].(*structs.LetColumnsRequest),
			},
		}

		leafQueryAgg.Next = nextQueryAgg
		leafQueryAgg = leafQueryAgg.Next
	}

	return root, nil
}

func (p *parser) callonEvalBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalBlock1(stack["first"], stack["rest"])
}

func (c *current) onSingleEval1(field, expr any) (any, error) {
	fieldStr := field.(string)
	if strings.Contains(fieldStr, "*") {
		return nil, fmt.Errorf("New fields must not contain wildcards; invalid field: %v", field)
	}

	letColumnsRequest := expr.(*structs.LetColumnsRequest)
	letColumnsRequest.NewColName = fieldStr

	return letColumnsRequest, nil
}

func (p *parser) callonSingleEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleEval1(stack["field"], stack["expr"])
}

func (c *current) onEvalExpression1(value any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		ValueColRequest: value.(*structs.ValueExpr),
	}

	return letColReq, nil
}

func (p *parser) callonEvalExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalExpression1(stack["value"])
}

func (c *current) onConditionExpr1(condition, trueValue, falseValue any) (any, error) {

	node := &structs.ConditionExpr{
		Op:         "if",
		BoolExpr:   condition.(*structs.BoolExpr),
		TrueValue:  trueValue.(*structs.ValueExpr),
		FalseValue: falseValue.(*structs.ValueExpr),
	}

	return node, nil
}

func (p *parser) callonConditionExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr1(stack["condition"], stack["trueValue"], stack["falseValue"])
}

func (c *current) onTextExpr2(opName, stringExpr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:          opNameStr,
		Value:       stringExpr.(*structs.StringExpr),
		StrToRemove: "",
	}

	return node, nil
}

func (p *parser) callonTextExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr2(stack["opName"], stack["stringExpr"])
}

func (c *current) onTextExpr10(opName, firstVal, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	if rest == nil {
		return firstVal, nil
	}
	restSlice := rest.([]any)
	values := make([]*structs.StringExpr, 1+len(restSlice))
	values[0] = firstVal.(*structs.StringExpr)

	for i := range restSlice {
		stringAtom := restSlice[i].([]any)
		values[i+1] = stringAtom[1].(*structs.StringExpr)
	}
	node := &structs.TextExpr{
		Op:        opNameStr,
		ValueList: values,
	}
	return node, nil
}

func (p *parser) callonTextExpr10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr10(stack["opName"], stack["firstVal"], stack["rest"])
}

func (c *current) onTextExpr27(opName, url any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:          opNameStr,
		Value:       url.(*structs.StringExpr),
		StrToRemove: "",
	}
	return node, nil
}

func (p *parser) callonTextExpr27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr27(stack["opName"], stack["url"])
}

func (c *current) onTextExpr39(opName, stringExpr, delim any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:        opNameStr,
		Value:     stringExpr.(*structs.StringExpr),
		Delimiter: delim.(*structs.StringExpr),
	}
	return node, nil
}

func (p *parser) callonTextExpr39() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr39(stack["opName"], stack["stringExpr"], stack["delim"])
}

func (c *current) onTextExpr52(opName, stringExpr, startIndex, lengthParam any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	var lengthConverted *structs.NumericExpr
	if lengthParam != nil {
		lengthSlice, ok := lengthParam.([]interface{})
		if ok && len(lengthSlice) > 1 {
			length, ok := lengthSlice[1].(*structs.NumericExpr)
			if ok {
				lengthConverted = length
			} else {
				return nil, fmt.Errorf("Spl peg: TextExpr: Unable to assert length as *structs.NumericExpr")
			}
		}
	}
	node := &structs.TextExpr{
		Op:         opNameStr,
		Value:      stringExpr.(*structs.StringExpr),
		StartIndex: startIndex.(*structs.NumericExpr),
		LengthExpr: lengthConverted,
	}
	return node, nil
}

func (p *parser) callonTextExpr52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr52(stack["opName"], stack["stringExpr"], stack["startIndex"], stack["lengthParam"])
}

func (c *current) onTextExpr68(value, format any) (any, error) {
	var formatExpr *structs.StringExpr
	if format != nil {
		formatSlice := format.([]interface{})
		formatExpr, _ = formatSlice[1].(*structs.StringExpr)
	}
	return &structs.TextExpr{
		IsTerminal: false,
		Op:         "tostring",
		Val:        value.(*structs.ValueExpr),
		Format:     formatExpr,
	}, nil
}

func (p *parser) callonTextExpr68() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr68(stack["value"], stack["format"])
}

func (c *current) onTextExpr80(opName, expr, strToRemoveExpr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}

	strToRemove := " \t"
	if strToRemoveExpr != nil {
		strToRemove = strToRemoveExpr.(string)
	}

	node := &structs.TextExpr{
		Op:          opNameStr,
		Value:       expr.(*structs.StringExpr),
		StrToRemove: removeQuotes(strToRemove),
	}

	return node, nil
}

func (p *parser) callonTextExpr80() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr80(stack["opName"], stack["expr"], stack["strToRemoveExpr"])
}

func (c *current) onTextExpr93(opName, condition any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: Failed to recognize operator: %v, err= %v", opName, err)
	}

	node := &structs.TextExpr{
		Op:        opNameStr,
		Condition: condition.(*structs.BoolExpr),
	}

	return node, nil
}

func (p *parser) callonTextExpr93() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr93(stack["opName"], stack["condition"])
}

func (c *current) onTextExpr101(opName, stringExpr, startIndex, endIndex any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:         opNameStr,
		Value:      stringExpr.(*structs.StringExpr),
		StartIndex: startIndex.(*structs.NumericExpr),
	}
	if endIndex != nil {
		node.EndIndex = endIndex.(*structs.NumericExpr)
	}

	return node, nil
}

func (p *parser) callonTextExpr101() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr101(stack["opName"], stack["stringExpr"], stack["startIndex"], stack["endIndex"])
}

func (c *current) onTextExpr115(opName, stringExpr, expr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:    opNameStr,
		Val:   expr.(*structs.ValueExpr),
		Value: stringExpr.(*structs.StringExpr),
	}

	return node, nil
}

func (p *parser) callonTextExpr115() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr115(stack["opName"], stack["stringExpr"], stack["expr"])
}

func (c *current) onTextExpr126(opName, startIndex, endIndex, stringExpr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:         opNameStr,
		StartIndex: startIndex.(*structs.NumericExpr),
		EndIndex:   endIndex.(*structs.NumericExpr),
	}
	if stringExpr != nil {
		node.Value = stringExpr.(*structs.StringExpr)
	}

	return node, nil
}

func (p *parser) callonTextExpr126() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr126(stack["opName"], stack["startIndex"], stack["endIndex"], stack["stringExpr"])
}

func (c *current) onTextExpr141(opName, mvLeft, mvRight, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	values := make([]*structs.StringExpr, 2)
	values[0] = mvLeft.(*structs.StringExpr)
	values[1] = mvRight.(*structs.StringExpr)

	node := &structs.TextExpr{
		Op:        opNameStr,
		ValueList: values,
	}

	if rest != nil {
		restSlice := rest.([]any)
		node.Delimiter = restSlice[1].(*structs.StringExpr)
	}

	return node, nil
}

func (p *parser) callonTextExpr141() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr141(stack["opName"], stack["mvLeft"], stack["mvRight"], stack["rest"])
}

func (c *current) onTextExpr157(opName, stringExpr, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}

	node := &structs.TextExpr{
		Op:         opNameStr,
		Value:      stringExpr.(*structs.StringExpr),
		InferTypes: false, // default value
	}

	if rest != nil {
		restSlice := rest.([]any)
		inferTypes, err := transferUint8ToString(restSlice[1])
		if err != nil {
			return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
		}
		if inferTypes == "true" {
			node.InferTypes = true
		}
	}

	return node, nil
}

func (p *parser) callonTextExpr157() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr157(stack["opName"], stack["stringExpr"], stack["rest"])
}

func (c *current) onStrToRemoveExpr1(strToRemove any) (any, error) {
	return strToRemove, nil
}

func (p *parser) callonStrToRemoveExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStrToRemoveExpr1(stack["strToRemove"])
}

func (c *current) onEvalFieldToRead2() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEvalFieldToRead2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalFieldToRead2()
}

func (c *current) onEvalFieldToRead8(field any) (any, error) {
	return field, nil
}

func (p *parser) callonEvalFieldToRead8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalFieldToRead8(stack["field"])
}

func (c *current) onWhereBlock1(condition any) (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			FilterRows: condition.(*structs.BoolExpr),
		},
	}

	return queryAgg, nil
}

func (p *parser) callonWhereBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereBlock1(stack["condition"])
}

func (c *current) onBoolExpr1(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonBoolExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExpr1(stack["expr"])
}

func (c *current) onBoolExprLevel41(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.BoolExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.BoolExpr{
			IsTerminal: false,
			BoolOp:     structs.BoolOpOr,
			LeftBool:   cur,
			RightBool:  opAndClause[1].(*structs.BoolExpr),
		}
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel41(stack["first"], stack["rest"])
}

func (c *current) onBoolExprLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.BoolExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.BoolExpr{
			IsTerminal: false,
			BoolOp:     structs.BoolOpAnd,
			LeftBool:   cur,
			RightBool:  opAndClause[1].(*structs.BoolExpr),
		}
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel31(stack["first"], stack["rest"])
}

func (c *current) onBoolExprLevel22(first any) (any, error) {
	cur := &structs.BoolExpr{
		IsTerminal: false,
		BoolOp:     structs.BoolOpNot,
		LeftBool:   first.(*structs.BoolExpr),
		RightBool:  nil,
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel22(stack["first"])
}

func (c *current) onBoolExprLevel29(first any) (any, error) {
	return first, nil
}

func (p *parser) callonBoolExprLevel29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel29(stack["first"])
}

func (c *current) onBoolExprLevel12(first any) (any, error) {
	return first, nil
}

func (p *parser) callonBoolExprLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel12(stack["first"])
}

func (c *current) onBoolExprLevel18(op, value any) (any, error) {
	opNameStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: BoolExpr: %v", err)
	}
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  value.(*structs.ValueExpr),
		RightValue: nil,
		ValueOp:    opNameStr,
	}
	return expr, nil
}

func (p *parser) callonBoolExprLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel18(stack["op"], stack["value"])
}

func (c *current) onBoolExprLevel120(likeExpr any) (any, error) {
	return likeExpr, nil
}

func (p *parser) callonBoolExprLevel120() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel120(stack["likeExpr"])
}

func (c *current) onLikeExpr2(left, right any) (any, error) {
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  left.(*structs.ValueExpr),
		RightValue: right.(*structs.ValueExpr),
		ValueOp:    "like",
	}
	return expr, nil
}

func (p *parser) callonLikeExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLikeExpr2(stack["left"], stack["right"])
}

func (c *current) onLikeExpr11(stringr, pattern any) (any, error) {
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  stringr.(*structs.ValueExpr),
		RightValue: pattern.(*structs.ValueExpr),
		ValueOp:    "like",
	}
	return expr, nil

}

func (p *parser) callonLikeExpr11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLikeExpr11(stack["stringr"], stack["pattern"])
}

func (c *current) onLikeExpr21(stringVal, pattern any) (any, error) {
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  stringVal.(*structs.ValueExpr),
		RightValue: pattern.(*structs.ValueExpr),
		ValueOp:    "match",
	}
	return expr, nil

}

func (p *parser) callonLikeExpr21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLikeExpr21(stack["stringVal"], stack["pattern"])
}

func (c *current) onLikeExpr31(cidr, ip any) (any, error) {
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  cidr.(*structs.ValueExpr),
		RightValue: ip.(*structs.ValueExpr),
		ValueOp:    "cidrmatch",
	}
	return expr, nil
}

func (p *parser) callonLikeExpr31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLikeExpr31(stack["cidr"], stack["ip"])
}

func (c *current) onLikeExpr41(inExpr any) (any, error) {
	return inExpr, nil
}

func (p *parser) callonLikeExpr41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLikeExpr41(stack["inExpr"])
}

func (c *current) onLikeExpr44(boolComparisonExpr any) (any, error) {
	return boolComparisonExpr, nil
}

func (p *parser) callonLikeExpr44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLikeExpr44(stack["boolComparisonExpr"])
}

func (c *current) onBoolComparisonExpr1(left, op, right any) (any, error) {
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  left.(*structs.ValueExpr),
		RightValue: right.(*structs.ValueExpr),
		ValueOp:    op.(string),
	}

	return expr, nil
}

func (p *parser) callonBoolComparisonExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolComparisonExpr1(stack["left"], stack["op"], stack["right"])
}

func (c *current) onInExpr2(left, valueToJudge, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ValueExpr, 1+len(restSlice))
	slice[0] = valueToJudge.(*structs.ValueExpr)

	for i := range restSlice {
		valueAtom := restSlice[i].([]any)
		slice[i+1] = valueAtom[1].(*structs.ValueExpr)
	}

	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  left.(*structs.ValueExpr),
		ValueList:  slice,
		ValueOp:    "in",
	}
	return expr, nil
}

func (p *parser) callonInExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInExpr2(stack["left"], stack["valueToJudge"], stack["rest"])
}

func (c *current) onInExpr17(valueToJudge, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ValueExpr, len(restSlice))

	for i := range restSlice {
		valueAtom := restSlice[i].([]any)
		slice[i] = valueAtom[1].(*structs.ValueExpr)
	}

	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  valueToJudge.(*structs.ValueExpr),
		ValueList:  slice,
		ValueOp:    "in",
	}
	return expr, nil
}

func (p *parser) callonInExpr17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInExpr17(stack["valueToJudge"], stack["rest"])
}

func (c *current) onValueExpr2(condition any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMConditionExpr,
		ConditionExpr: condition.(*structs.ConditionExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr2(stack["condition"])
}

func (c *current) onValueExpr5(condition any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMConditionExpr,
		ConditionExpr: condition.(*structs.ConditionExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr5(stack["condition"])
}

func (c *current) onValueExpr11(numeric any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMNumericExpr,
		NumericExpr:   numeric.(*structs.NumericExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr11(stack["numeric"])
}

func (c *current) onValueExpr14(str any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMStringExpr,
		StringExpr:    str.(*structs.StringExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr14(stack["str"])
}

func (c *current) onValueExpr17(str any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMStringExpr,
		StringExpr:    str.(*structs.StringExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr17(stack["str"])
}

func (c *current) onValueExpr23(boolean any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolean.(*structs.BoolExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr23(stack["boolean"])
}

func (c *current) onStringExpr2(text any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMTextExpr,
		TextExpr:       text.(*structs.TextExpr),
	}

	return expr, nil
}

func (p *parser) callonStringExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr2(stack["text"])
}

func (c *current) onStringExpr8(str any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMRawString,
		RawString:      removeQuotes(str),
	}

	return expr, nil
}

func (p *parser) callonStringExpr8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr8(stack["str"])
}

func (c *current) onStringExpr14(field any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMField,
		FieldName:      field.(string),
	}

	return expr, nil
}

func (p *parser) callonStringExpr14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr14(stack["field"])
}

func (c *current) onStringExpr26(concat any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMConcatExpr,
		ConcatExpr:     concat.(*structs.ConcatExpr),
	}

	return expr, nil
}

func (p *parser) callonStringExpr26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr26(stack["concat"])
}

func (c *current) onConcatExpr1(first, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ConcatAtom, 1+len(restSlice))
	slice[0] = first.(*structs.ConcatAtom)

	for i := range restSlice {
		concatAndAtom := restSlice[i].([]any)
		slice[i+1] = concatAndAtom[1].(*structs.ConcatAtom)
	}

	expr := &structs.ConcatExpr{
		Atoms: slice,
	}

	return expr, nil
}

func (p *parser) callonConcatExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatExpr1(stack["first"], stack["rest"])
}

func (c *current) onConcatAtom2(text any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField:  false,
		Value:    "",
		TextExpr: text.(*structs.TextExpr),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom2(stack["text"])
}

func (c *current) onConcatAtom5(str any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: false,
		Value:   removeQuotes(str),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom5(stack["str"])
}

func (c *current) onConcatAtom8(number any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: false,
		Value:   number.(string),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom8(stack["number"])
}

func (c *current) onConcatAtom11(field any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: true,
		Value:   field.(string),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom11(stack["field"])
}

func (c *current) onNumericExpr1(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExpr1(stack["expr"])
}

func (c *current) onNumericExprLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.NumericExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.NumericExpr{
			IsTerminal:      false,
			Op:              opAndClause[0].(string),
			Left:            cur,
			Right:           opAndClause[1].(*structs.NumericExpr),
			NumericExprMode: structs.NEMNumericExpr,
		}
	}

	return cur, nil
}

func (p *parser) callonNumericExprLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel31(stack["first"], stack["rest"])
}

func (c *current) onNumericExprLevel21(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.NumericExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.NumericExpr{
			IsTerminal:      false,
			Op:              opAndClause[0].(string),
			Left:            cur,
			Right:           opAndClause[1].(*structs.NumericExpr),
			NumericExprMode: structs.NEMNumericExpr,
		}
	}

	return cur, nil
}

func (p *parser) callonNumericExprLevel21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel21(stack["first"], stack["rest"])
}

func (c *current) onNumericParamExpr1(expr any) (any, error) {
	rightNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	return rightNumericExpr, nil
}

func (p *parser) callonNumericParamExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericParamExpr1(stack["expr"])
}

func (c *current) onNumericExprLevel12(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericExprLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel12(stack["expr"])
}

func (c *current) onNumericExprLevel18(numericEvalExpr any) (any, error) {
	return numericEvalExpr, nil
}

func (p *parser) callonNumericExprLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel18(stack["numericEvalExpr"])
}

func (c *current) onNumericExprLevel111(field any) (any, error) {
	expr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    true,
		Value:           field.(string),
		NumericExprMode: structs.NEMNumberField,
	}

	return expr, nil
}

func (p *parser) callonNumericExprLevel111() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel111(stack["field"])
}

func (c *current) onNumericExprLevel114(number any) (any, error) {
	expr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    false,
		Value:           number.(string),
		NumericExprMode: structs.NEMNumber,
	}

	return expr, nil
}

func (p *parser) callonNumericExprLevel114() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel114(stack["number"])
}

func (c *current) onNumericEvalExpr2(opName, expr any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)
	node, err := createNumericExpr(opNameStr, leftNumericExpr, nil, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr2(stack["opName"], stack["expr"])
}

func (c *current) onNumericEvalExpr19(roundExpr, expr, roundPrecision any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	var rightNumericExpr *structs.NumericExpr
	if roundPrecision != nil {
		rightNumericExpr, ok = roundPrecision.(*structs.NumericExpr)
		if !ok {
			return nil, fmt.Errorf("Failed to assert roundPrecision as *structs.NumericExpr")
		}
	}

	node, err := createNumericExpr("round", leftNumericExpr, rightNumericExpr, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr19() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr19(stack["roundExpr"], stack["expr"], stack["roundPrecision"])
}

func (c *current) onNumericEvalExpr30(opName any) (any, error) {
	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)
	return &structs.NumericExpr{
		IsTerminal: true,
		Op:         opNameStr,
	}, nil
}

func (p *parser) callonNumericEvalExpr30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr30(stack["opName"])
}

func (c *current) onNumericEvalExpr39(stringExpr, baseExpr any) (any, error) {
	stringExprConverted, ok := stringExpr.(*structs.StringExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert stringExpr as *structs.StringExpr")
	}

	var baseExprConverted *structs.NumericExpr
	if baseExpr != nil {
		baseSlice, ok := baseExpr.([]interface{})
		if ok && len(baseSlice) > 1 {
			if base, ok := baseSlice[1].(*structs.NumericExpr); ok {
				baseExprConverted = base
			} else {
				return nil, fmt.Errorf("Failed to assert base as *structs.NumericExpr")
			}
		}
	}

	node := &structs.NumericExpr{
		IsTerminal:      false,
		Op:              "tonumber",
		Left:            nil,
		Right:           baseExprConverted,
		Val:             stringExprConverted,
		NumericExprMode: structs.NEMNumericExpr,
	}
	return node, nil
}

func (p *parser) callonNumericEvalExpr39() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr39(stack["stringExpr"], stack["baseExpr"])
}

func (c *current) onNumericEvalExpr51(lenExpr, expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericEvalExpr51() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr51(stack["lenExpr"], stack["expr"])
}

func (c *current) onNumericEvalExpr59(opName, expr, param any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)

	var rightNumericExpr *structs.NumericExpr
	if param == nil {
		return nil, fmt.Errorf("Function: %v 's param can not be nil", opNameStr)
	}
	rightNumericExpr, ok = param.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert param as *structs.NumericExpr")
	}

	node, err := createNumericExpr(opNameStr, leftNumericExpr, rightNumericExpr, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr59() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr59(stack["opName"], stack["expr"], stack["param"])
}

func (c *current) onLenExpr2(str any) (any, error) {

	leftNumericExpr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    false,
		Value:           str.(string),
		NumericExprMode: structs.NEMLenString,
	}

	node, err := createNumericExpr("len", leftNumericExpr, nil, structs.NEMLenString)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonLenExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLenExpr2(stack["str"])
}

func (c *current) onLenExpr8(field any) (any, error) {

	leftNumericExpr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    true,
		Value:           field.(string),
		NumericExprMode: structs.NEMLenField,
	}

	node, err := createNumericExpr("len", leftNumericExpr, nil, structs.NEMLenField)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonLenExpr8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLenExpr8(stack["field"])
}

func (c *current) onHeadBlock2(intAsStr any) (any, error) {
	limit, err := strconv.ParseUint(intAsStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid limit (%v): %v", intAsStr.(string), err)
	}

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			MaxRows: limit,
		},
	}

	return queryAgg, nil
}

func (p *parser) callonHeadBlock2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadBlock2(stack["intAsStr"])
}

func (c *current) onHeadBlock12() (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			MaxRows: uint64(10), // From https://docs.splunk.com/Documentation/Splunk/9.1.0/SearchReference/Head
		},
	}

	return queryAgg, nil
}

func (p *parser) callonHeadBlock12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadBlock12()
}

func (c *current) onAggregationList1(first, rest any) (any, error) {
	// Convert `rest` to a slice. Each element of the slice will be a 2-element
	// slice where the first element is ", " and the second is an Aggregator.
	restSlice := rest.([]any)

	numAggs := 1 + len(restSlice)
	aggsSlice := make([]*aggregator, numAggs)
	aggsSlice[0] = first.(*aggregator)

	for i := 1; i < numAggs; i++ {
		separatorAndAgg := restSlice[i-1].([]any)
		aggsSlice[i] = separatorAndAgg[1].(*aggregator)
	}

	return aggsSlice, nil
}

func (p *parser) callonAggregationList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregationList1(stack["first"], stack["rest"])
}

func (c *current) onAggregator1(aggFunc, asField any) (any, error) {
	agg := &aggregator{}
	agg.measureAgg = aggFunc.(*structs.MeasureAggregator)

	if asField != nil {
		agg.renameOutputField = true
		agg.outputFieldNewName = asField.(string)
	}

	return agg, nil
}

func (p *parser) callonAggregator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregator1(stack["aggFunc"], stack["asField"])
}

func (c *current) onAggFunction1(agg any) (any, error) {
	return agg, nil
}

func (p *parser) callonAggFunction1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggFunction1(stack["agg"])
}

func (c *current) onAsField1(field any) (any, error) {
	fieldStr := field.(string)

	if strings.Contains(fieldStr, "*") {
		return nil, errors.New("The field specified in `AS` cannot contain wildcards")
	}

	if fieldStr[0] == '"' && fieldStr[len(fieldStr)-1] == '"' {
		fieldStr = fieldStr[1 : len(fieldStr)-1]
	}

	return fieldStr, nil
}

func (p *parser) callonAsField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsField1(stack["field"])
}

func (c *current) onAggCount2(boolExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Count,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggCount2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggCount2(stack["boolExpr"])
}

func (c *current) onAggCount12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Count,
	}

	return agg, nil
}

func (p *parser) callonAggCount12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggCount12(stack["field"])
}

func (c *current) onAggCount21() (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  "*",
		MeasureFunc: utils.Count,
	}

	return agg, nil
}

func (p *parser) callonAggCount21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggCount21()
}

func (c *current) onAggDistinctCount2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Cardinality,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggDistinctCount2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggDistinctCount2(stack["valueExpr"])
}

func (c *current) onAggDistinctCount12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Cardinality,
	}

	return agg, nil
}

func (p *parser) callonAggDistinctCount12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggDistinctCount12(stack["field"])
}

func (c *current) onAggAvg2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Avg,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggAvg2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAvg2(stack["boolComparisonExpr"])
}

func (c *current) onAggAvg12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Avg,
	}

	return agg, nil
}

func (p *parser) callonAggAvg12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAvg12(stack["field"])
}

func (c *current) onAggMin2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Min,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggMin2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMin2(stack["boolComparisonExpr"])
}

func (c *current) onAggMin12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Min,
	}

	return agg, nil
}

func (p *parser) callonAggMin12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMin12(stack["field"])
}

func (c *current) onAggMax2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Max,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggMax2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMax2(stack["boolComparisonExpr"])
}

func (c *current) onAggMax12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Max,
	}

	return agg, nil
}

func (p *parser) callonAggMax12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMax12(stack["field"])
}

func (c *current) onAggRange2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Range,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggRange2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRange2(stack["boolComparisonExpr"])
}

func (c *current) onAggRange12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Range,
	}

	return agg, nil
}

func (p *parser) callonAggRange12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRange12(stack["field"])
}

func (c *current) onAggSum2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Sum,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggSum2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSum2(stack["boolComparisonExpr"])
}

func (c *current) onAggSum12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Sum,
	}

	return agg, nil
}

func (p *parser) callonAggSum12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSum12(stack["field"])
}

func (c *current) onAggEstdc2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Estdc,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggEstdc2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEstdc2(stack["boolComparisonExpr"])
}

func (c *current) onAggEstdc12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Estdc,
	}

	return agg, nil
}

func (p *parser) callonAggEstdc12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEstdc12(stack["field"])
}

func (c *current) onAggEstdcError2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.EstdcError,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggEstdcError2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEstdcError2(stack["boolComparisonExpr"])
}

func (c *current) onAggEstdcError12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.EstdcError,
	}

	return agg, nil
}

func (p *parser) callonAggEstdcError12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEstdcError12(stack["field"])
}

func (c *current) onAggExactPerc2(numStr, boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.ExactPerc,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
		Param:           numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggExactPerc2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggExactPerc2(stack["numStr"], stack["boolComparisonExpr"])
}

func (c *current) onAggExactPerc16(numStr, field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.ExactPerc,
		Param:       numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggExactPerc16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggExactPerc16(stack["numStr"], stack["field"])
}

func (c *current) onAggPerc2(numStr, boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Perc,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
		Param:           numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggPerc2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggPerc2(stack["numStr"], stack["boolComparisonExpr"])
}

func (c *current) onAggPerc16(numStr, field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Perc,
		Param:       numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggPerc16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggPerc16(stack["numStr"], stack["field"])
}

func (c *current) onAggUpperPerc2(numStr, boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.UpperPerc,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
		Param:           numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggUpperPerc2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggUpperPerc2(stack["numStr"], stack["boolComparisonExpr"])
}

func (c *current) onAggUpperPerc16(numStr, field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.UpperPerc,
		Param:       numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggUpperPerc16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggUpperPerc16(stack["numStr"], stack["field"])
}

func (c *current) onAggMedian2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Median,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggMedian2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMedian2(stack["boolComparisonExpr"])
}

func (c *current) onAggMedian12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Median,
	}

	return agg, nil
}

func (p *parser) callonAggMedian12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMedian12(stack["field"])
}

func (c *current) onAggMode2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Mode,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggMode2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMode2(stack["boolComparisonExpr"])
}

func (c *current) onAggMode12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Mode,
	}

	return agg, nil
}

func (p *parser) callonAggMode12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMode12(stack["field"])
}

func (c *current) onAggStdev2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Stdev,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggStdev2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggStdev2(stack["boolComparisonExpr"])
}

func (c *current) onAggStdev12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Stdev,
	}

	return agg, nil
}

func (p *parser) callonAggStdev12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggStdev12(stack["field"])
}

func (c *current) onAggStdevp2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Stdevp,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggStdevp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggStdevp2(stack["boolComparisonExpr"])
}

func (c *current) onAggStdevp12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Stdevp,
	}

	return agg, nil
}

func (p *parser) callonAggStdevp12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggStdevp12(stack["field"])
}

func (c *current) onAggSumsq2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Sumsq,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggSumsq2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSumsq2(stack["boolComparisonExpr"])
}

func (c *current) onAggSumsq12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Sumsq,
	}

	return agg, nil
}

func (p *parser) callonAggSumsq12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSumsq12(stack["field"])
}

func (c *current) onAggVar2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Var,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggVar2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggVar2(stack["boolComparisonExpr"])
}

func (c *current) onAggVar12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Var,
	}

	return agg, nil
}

func (p *parser) callonAggVar12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggVar12(stack["field"])
}

func (c *current) onAggVarp2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Varp,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggVarp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggVarp2(stack["boolComparisonExpr"])
}

func (c *current) onAggVarp12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Varp,
	}

	return agg, nil
}

func (p *parser) callonAggVarp12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggVarp12(stack["field"])
}

func (c *current) onAggFirst2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.First,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggFirst2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggFirst2(stack["boolComparisonExpr"])
}

func (c *current) onAggFirst12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.First,
	}

	return agg, nil
}

func (p *parser) callonAggFirst12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggFirst12(stack["field"])
}

func (c *current) onAggLast2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Last,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggLast2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLast2(stack["boolComparisonExpr"])
}

func (c *current) onAggLast12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Last,
	}

	return agg, nil
}

func (p *parser) callonAggLast12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLast12(stack["field"])
}

func (c *current) onAggList2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.List,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggList2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggList2(stack["valueExpr"])
}

func (c *current) onAggList10(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.List,
	}

	return agg, nil
}

func (p *parser) callonAggList10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggList10(stack["field"])
}

func (c *current) onAggEarliest2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Earliest,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggEarliest2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEarliest2(stack["boolComparisonExpr"])
}

func (c *current) onAggEarliest12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Earliest,
	}

	return agg, nil
}

func (p *parser) callonAggEarliest12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEarliest12(stack["field"])
}

func (c *current) onAggEarliestTime2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.EarliestTime,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggEarliestTime2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEarliestTime2(stack["boolComparisonExpr"])
}

func (c *current) onAggEarliestTime12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.EarliestTime,
	}

	return agg, nil
}

func (p *parser) callonAggEarliestTime12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEarliestTime12(stack["field"])
}

func (c *current) onAggLatest2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Latest,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggLatest2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLatest2(stack["boolComparisonExpr"])
}

func (c *current) onAggLatest12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Latest,
	}

	return agg, nil
}

func (p *parser) callonAggLatest12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLatest12(stack["field"])
}

func (c *current) onAggLatestTime2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.LatestTime,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggLatestTime2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLatestTime2(stack["boolComparisonExpr"])
}

func (c *current) onAggLatestTime12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.LatestTime,
	}

	return agg, nil
}

func (p *parser) callonAggLatestTime12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLatestTime12(stack["field"])
}

func (c *current) onAggRate2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.StatsRate,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggRate2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRate2(stack["boolComparisonExpr"])
}

func (c *current) onAggRate12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.StatsRate,
	}

	return agg, nil
}

func (p *parser) callonAggRate12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRate12(stack["field"])
}

func (c *current) onAggValues2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Values,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggValues2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggValues2(stack["valueExpr"])
}

func (c *current) onAggValues10(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Values,
	}

	return agg, nil
}

func (p *parser) callonAggValues10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggValues10(stack["field"])
}

func (c *current) onFieldWithNumberValue1(keyValuePair any) (any, error) {
	return keyValuePair, nil
}

func (p *parser) callonFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithNumberValue1(stack["keyValuePair"])
}

func (c *current) onNamedFieldWithNumberValue1(key, op, value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     op.(string),
			Field:  key.(string),
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonNamedFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedFieldWithNumberValue1(stack["key"], stack["op"], stack["value"])
}

func (c *current) onUnnamedFieldWithNumberValue1(value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     "=",
			Field:  "*",
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonUnnamedFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnnamedFieldWithNumberValue1(stack["value"])
}

func (c *current) onFieldWithBooleanValue1(key, op, value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     op.(string),
			Field:  key.(string),
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonFieldWithBooleanValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithBooleanValue1(stack["key"], stack["op"], stack["value"])
}

func (c *current) onFieldWithStringValue1(keyValuePair any) (any, error) {
	return keyValuePair, nil
}

func (p *parser) callonFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithStringValue1(stack["keyValuePair"])
}

func (c *current) onNamedFieldWithStringValue1(key, op, value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     op.(string),
			Field:  key.(string),
			Values: value,
		},
	}
	return node, nil
}

func (p *parser) callonNamedFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedFieldWithStringValue1(stack["key"], stack["op"], stack["value"])
}

func (c *current) onUnnamedFieldWithStringValue1(value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     "=",
			Field:  "*",
			Values: value,
		},
	}
	return node, nil
}

func (p *parser) callonUnnamedFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnnamedFieldWithStringValue1(stack["value"])
}

func (c *current) onFieldNameList1(first, rest any) (any, error) {
	// Convert `rest` to a slice. Each element of the slice will be a 2-element
	// slice where the first element is ", " and the second is a FieldName.
	restSlice := rest.([]any)

	numFieldNames := 1 + len(restSlice)
	fields := make([]string, numFieldNames)
	fields[0] = first.(string)

	for i := 1; i < numFieldNames; i++ {
		separatorAndField := restSlice[i-1].([]any)
		fields[i] = separatorAndField[1].(string)
	}

	return fields, nil
}

func (p *parser) callonFieldNameList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldNameList1(stack["first"], stack["rest"])
}

func (c *current) onFieldName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFieldName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldName1()
}

func (c *current) onString1(str any) (any, error) {
	return str, nil
}

func (p *parser) callonString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onString1(stack["str"])
}

func (c *current) onQuotedString1() (any, error) {
	// The returned string has quotes as the first and last character.
	return string(c.text), nil
}

func (p *parser) callonQuotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString1()
}

func (c *current) onBoolean1() (any, error) {
	boolValue, _ := strconv.ParseBool(string(c.text))
	return boolValue, nil
}

func (p *parser) callonBoolean1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolean1()
}

func (c *current) onUnquotedString1() (any, error) {
	// Return the string wrapped in quotes.
	str := "\"" + string(c.text) + "\""
	return str, nil
}

func (p *parser) callonUnquotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedString1()
}

func (c *current) onRenamePattern1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonRenamePattern1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenamePattern1()
}

func (c *current) onNumber1(number any) (any, error) {
	return json.Number(number.(string)), nil
}

func (p *parser) callonNumber1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1(stack["number"])
}

func (c *current) onNumberAsString1(number any) (any, error) {
	return number, nil
}

func (p *parser) callonNumberAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumberAsString1(stack["number"])
}

func (c *current) onFloatAsString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatAsString1()
}

func (c *current) onIntegerAsString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIntegerAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerAsString1()
}

func (c *current) onEqualityOperator1(op any) (any, error) {
	opStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: EqualityOperator: %v", err)
	}
	return opStr, nil
}

func (p *parser) callonEqualityOperator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator1(stack["op"])
}

func (c *current) onInequalityOperator1(op any) (any, error) {
	opStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: InequalityOperator: %v", err)
	}
	return opStr, nil
}

func (p *parser) callonInequalityOperator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInequalityOperator1(stack["op"])
}

func (c *current) onEqualityOrInequality2(op any) (any, error) {
	return op, nil
}

func (p *parser) callonEqualityOrInequality2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOrInequality2(stack["op"])
}

func (c *current) onEqualityOrInequality5(op any) (any, error) {
	return op, nil
}

func (p *parser) callonEqualityOrInequality5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOrInequality5(stack["op"])
}

func (c *current) onOpPlus1() (any, error) {
	return "+", nil
}

func (p *parser) callonOpPlus1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpPlus1()
}

func (c *current) onOpMinus1() (any, error) {
	return "-", nil
}

func (p *parser) callonOpMinus1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpMinus1()
}

func (c *current) onOpMul1() (any, error) {
	return "*", nil
}

func (p *parser) callonOpMul1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpMul1()
}

func (c *current) onOpDiv1() (any, error) {
	return "/", nil
}

func (p *parser) callonOpDiv1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpDiv1()
}

func (c *current) onSecond1() (any, error) {
	return utils.TMSecond, nil
}

func (p *parser) callonSecond1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSecond1()
}

func (c *current) onMinute1() (any, error) {
	return utils.TMMinute, nil
}

func (p *parser) callonMinute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinute1()
}

func (c *current) onHour1() (any, error) {
	return utils.TMHour, nil
}

func (p *parser) callonHour1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHour1()
}

func (c *current) onDay1() (any, error) {
	return utils.TMDay, nil
}

func (p *parser) callonDay1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDay1()
}

func (c *current) onWeek1() (any, error) {
	return utils.TMWeek, nil
}

func (p *parser) callonWeek1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeek1()
}

func (c *current) onMonth1() (any, error) {
	return utils.TMMonth, nil
}

func (p *parser) callonMonth1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMonth1()
}

func (c *current) onQuarter1() (any, error) {
	return utils.TMQuarter, nil
}

func (p *parser) callonQuarter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuarter1()
}

func (c *current) onSubseconds1() (any, error) {
	timeUnit, err := utils.ConvertSubseconds(string(c.text))
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Subseconds: %v", err)
	}
	return timeUnit, nil
}

func (p *parser) callonSubseconds1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubseconds1()
}

func (c *current) onTransactionBlock1(txnOptions any) (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType:      structs.TransactionType,
		TransactionArguments: txnOptions.(*structs.TransactionArguments),
	}
	return queryAgg, nil
}

func (p *parser) callonTransactionBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionBlock1(stack["txnOptions"])
}

func (c *current) onTransactionOptions1(txnOptions any) (any, error) {

	transactionRequest := &structs.TransactionArguments{}

	if txnOptions != nil {
		txnArgs := txnOptions.(*TxnArgs).arguments
		transactionRequest.Fields = txnArgs.Fields
		transactionRequest.StartsWith = txnArgs.StartsWith
		transactionRequest.EndsWith = txnArgs.EndsWith
	}

	return transactionRequest, nil
}

func (p *parser) callonTransactionOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionOptions1(stack["txnOptions"])
}

func (c *current) onTransactionDefinitionOptionsList1(first, rest any) (any, error) {

	restSlice := rest.([]any)
	txnArgs := &TxnArgs{
		argOption: "txn-definition",
		arguments: &structs.TransactionArguments{},
	}

	numArgs := 1 + len(restSlice)

	for i := 0; i < numArgs; i++ {
		var txnArg *TxnArgs
		if i == 0 {
			txnArg = first.(*TxnArgs)
		} else {
			separatorAndArg := restSlice[i-1].([]any)
			txnArg = separatorAndArg[1].(*TxnArgs)
		}
		argOption := txnArg.argOption

		switch argOption {
		case "fields":
			txnArgs.arguments.Fields = txnArg.arguments.Fields
		case "startswith":
			txnArgs.arguments.StartsWith = txnArg.arguments.StartsWith
		case "endswith":
			txnArgs.arguments.EndsWith = txnArg.arguments.EndsWith
		default:
			return nil, fmt.Errorf("Not a Valid Transaction Argument option")
		}
	}

	return txnArgs, nil
}

func (p *parser) callonTransactionDefinitionOptionsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionDefinitionOptionsList1(stack["first"], stack["rest"])
}

func (c *current) onTransactionDefinitionOption1(option any) (any, error) {
	return option, nil
}

func (p *parser) callonTransactionDefinitionOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionDefinitionOption1(stack["option"])
}

func (c *current) onSpaceSeparatedFieldNameList1(first, rest any) (any, error) {
	var fields []string
	fields = append(fields, first.(string))
	for _, r := range rest.([]any) {
		// Extracting the field name from the tuple (SPACE, FieldName)
		fields = append(fields, r.([]any)[1].(string))
	}

	txnArg := &TxnArgs{
		argOption: "fields",
		arguments: &structs.TransactionArguments{
			Fields: fields,
		},
	}

	return txnArg, nil
}

func (p *parser) callonSpaceSeparatedFieldNameList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpaceSeparatedFieldNameList1(stack["first"], stack["rest"])
}

func (c *current) onStartsWithOption1(strExpr any) (any, error) {
	txnArg := &TxnArgs{
		argOption: "startswith",
		arguments: &structs.TransactionArguments{
			StartsWith: strExpr.(*structs.FilterStringExpr),
		},
	}
	return txnArg, nil
}

func (p *parser) callonStartsWithOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStartsWithOption1(stack["strExpr"])
}

func (c *current) onEndsWithOption1(strExpr any) (any, error) {
	txnArg := &TxnArgs{
		argOption: "endswith",
		arguments: &structs.TransactionArguments{
			EndsWith: strExpr.(*structs.FilterStringExpr),
		},
	}
	return txnArg, nil
}

func (p *parser) callonEndsWithOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEndsWithOption1(stack["strExpr"])
}

func (c *current) onTransactionFilterString1(strExpr any) (any, error) {
	return strExpr, nil
}

func (p *parser) callonTransactionFilterString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionFilterString1(stack["strExpr"])
}

func (c *current) onTransactionQuotedString1(str any) (any, error) {
	return str, nil
}

func (p *parser) callonTransactionQuotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionQuotedString1(stack["str"])
}

func (c *current) onTransactionQuotedStringSearchExpr1(searchClause any) (any, error) {
	filterStrExpr := &structs.FilterStringExpr{
		SearchNode: searchClause.(*ast.Node),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionQuotedStringSearchExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionQuotedStringSearchExpr1(stack["searchClause"])
}

func (c *current) onQuotedStringNoOp1() (any, error) {
	// The returned string has quotes as the first and last character.
	return string(c.text), nil
}

func (p *parser) callonQuotedStringNoOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedStringNoOp1()
}

func (c *current) onTransactionQuotedStringValue1(str any) (any, error) {
	filterStrExpr := &structs.FilterStringExpr{
		StringValue: removeQuotes(str.(string)),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionQuotedStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionQuotedStringValue1(stack["str"])
}

func (c *current) onTransactionSearch1(expr any) (any, error) {

	filterStrExpr := &structs.FilterStringExpr{
		SearchNode: expr.(*ast.Node),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionSearch1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionSearch1(stack["expr"])
}

func (c *current) onTransactionEval1(condition any) (any, error) {
	filterStrExpr := &structs.FilterStringExpr{
		EvalBoolExpr: condition.(*structs.BoolExpr),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionEval1(stack["condition"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize {
		val, ok = p.parseRuleMemoize(rule)
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
