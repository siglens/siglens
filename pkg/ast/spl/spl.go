// Code generated by pigeon; DO NOT EDIT.

package spl

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/siglens/siglens/pkg/ast"
	"github.com/siglens/siglens/pkg/segment/aggregations"
	"github.com/siglens/siglens/pkg/segment/query"
	"github.com/siglens/siglens/pkg/segment/structs"
	"github.com/siglens/siglens/pkg/segment/utils"
	log "github.com/sirupsen/logrus"
)

func getParseError(err error) error {
	switch ev := err.(type) {
	case errList:
		if pe, ok := ev[0].(*parserError); ok {
			return &ast.ParseError{
				Inner:    pe.Inner,
				Line:     pe.pos.line,
				Column:   pe.pos.col,
				Offset:   pe.pos.offset,
				Prefix:   pe.prefix,
				Expected: pe.expected,
			}
		}
	}
	return err
}

// Remove the first and last character of the string
func removeQuotes(s any) string {
	str := s.(string)
	if len(str) < 3 {
		return ""
	}

	return str[1 : len(str)-1]
}

// Check if it rename fields with similar names using a wildcard
func isRegexRename(originalPattern, newPattern string) (bool, error) {
	oldWildcards := strings.Count(originalPattern, "*")
	newWildcards := strings.Count(newPattern, "*")

	if oldWildcards == 0 && newWildcards == 0 {
		return false, nil
	} else if oldWildcards > 0 && oldWildcards == newWildcards {
		return true, nil
	} else {
		return false, errors.New("Patterns do not match")
	}
}

func deMorgansLaw(node *ast.Node) {
	switch node.NodeType {
	case ast.NodeTerminal:
		switch node.Comparison.Op {
		case "=":
			node.Comparison.Op = "!="
		case "!=":
			node.Comparison.Op = "="
		case ">":
			node.Comparison.Op = "<="
		case "<":
			node.Comparison.Op = ">="
		case ">=":
			node.Comparison.Op = "<"
		case "<=":
			node.Comparison.Op = ">"
		default:
			log.Errorf("deMorgansLaw: unexpected node comparison op: %v", node.Comparison.Op)
		}
	case ast.NodeAnd:
		node.NodeType = ast.NodeOr
		deMorgansLaw(node.Left)
		deMorgansLaw(node.Right)
	case ast.NodeOr:
		node.NodeType = ast.NodeAnd
		deMorgansLaw(node.Left)
		deMorgansLaw(node.Right)
	default:
		log.Errorf("deMorgansLaw: unexpected NodeType: %v", node.NodeType)
	}
}

// Generate NumericExpr struct for eval functions
func createNumericExpr(op string, leftNumericExpr *structs.NumericExpr, rightNumericExpr *structs.NumericExpr, numericExprMode structs.NumericExprMode) (*structs.NumericExpr, error) {
	if leftNumericExpr == nil {
		return nil, fmt.Errorf("expr cannot be nil")
	}

	return &structs.NumericExpr{
		IsTerminal:      false,
		Op:              op,
		Left:            leftNumericExpr,
		Right:           rightNumericExpr,
		NumericExprMode: numericExprMode,
	}, nil
}

func transferUint8ToString(opName interface{}) (string, error) {
	strData, ok := opName.([]byte)
	if !ok {
		return "", fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)
	return opNameStr, nil
}

func transferPCREToRE2(pattern string) string {
	pattern = strings.Replace(pattern, "(?<", "(?P<", -1)
	return pattern
}

func getRexColNames(pattern string) ([]string, error) {
	re, err := regexp.Compile(`\?<(?P<GroupName>[a-zA-Z0-9_]+)>`)
	if err != nil {
		return nil, fmt.Errorf("getRexColNames: There are some errors in the pattern: %v", err)
	}
	matches := re.FindAllStringSubmatch(pattern, -1)

	var rexColNames []string
	for _, match := range matches {
		rexColNames = append(rexColNames, match[1])
	}

	return rexColNames, nil
}

type aggregator struct {
	measureAgg         *structs.MeasureAggregator
	renameOutputField  bool
	outputFieldNewName string
}

type singleAggTemp struct {
	aggregators   []*aggregator
	SplitByClause *structs.SplitByClause
}

type TxnArgs struct {
	argOption string
	arguments *structs.TransactionArguments
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Start",
			pos:  position{line: 151, col: 1, offset: 4063},
			expr: &actionExpr{
				pos: position{line: 151, col: 10, offset: 4072},
				run: (*parser).callonStart1,
				expr: &seqExpr{
					pos: position{line: 151, col: 10, offset: 4072},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 151, col: 10, offset: 4072},
							expr: &ruleRefExpr{
								pos:  position{line: 151, col: 10, offset: 4072},
								name: "SPACE",
							},
						},
						&labeledExpr{
							pos:   position{line: 151, col: 17, offset: 4079},
							label: "initialSearch",
							expr: &ruleRefExpr{
								pos:  position{line: 151, col: 32, offset: 4094},
								name: "InitialSearchBlock",
							},
						},
						&labeledExpr{
							pos:   position{line: 151, col: 52, offset: 4114},
							label: "filterBlocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 151, col: 65, offset: 4127},
								expr: &ruleRefExpr{
									pos:  position{line: 151, col: 66, offset: 4128},
									name: "FilterBlock",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 151, col: 80, offset: 4142},
							label: "queryAggBlocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 151, col: 95, offset: 4157},
								expr: &ruleRefExpr{
									pos:  position{line: 151, col: 96, offset: 4158},
									name: "QueryAggergatorBlock",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 151, col: 119, offset: 4181},
							expr: &ruleRefExpr{
								pos:  position{line: 151, col: 119, offset: 4181},
								name: "SPACE",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 151, col: 126, offset: 4188},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "InitialSearchBlock",
			pos:  position{line: 222, col: 1, offset: 6389},
			expr: &actionExpr{
				pos: position{line: 222, col: 23, offset: 6411},
				run: (*parser).callonInitialSearchBlock1,
				expr: &seqExpr{
					pos: position{line: 222, col: 23, offset: 6411},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 222, col: 23, offset: 6411},
							expr: &ruleRefExpr{
								pos:  position{line: 222, col: 23, offset: 6411},
								name: "CMD_SEARCH",
							},
						},
						&labeledExpr{
							pos:   position{line: 222, col: 35, offset: 6423},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 222, col: 42, offset: 6430},
								name: "ClauseLevel4",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBlock",
			pos:  position{line: 226, col: 1, offset: 6471},
			expr: &actionExpr{
				pos: position{line: 226, col: 16, offset: 6486},
				run: (*parser).callonSearchBlock1,
				expr: &seqExpr{
					pos: position{line: 226, col: 16, offset: 6486},
					exprs: []any{
						&notExpr{
							pos: position{line: 226, col: 16, offset: 6486},
							expr: &ruleRefExpr{
								pos:  position{line: 226, col: 18, offset: 6488},
								name: "ALLCMD",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 226, col: 26, offset: 6496},
							expr: &ruleRefExpr{
								pos:  position{line: 226, col: 26, offset: 6496},
								name: "CMD_SEARCH",
							},
						},
						&labeledExpr{
							pos:   position{line: 226, col: 38, offset: 6508},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 226, col: 45, offset: 6515},
								name: "ClauseLevel4",
							},
						},
					},
				},
			},
		},
		{
			name: "FilterBlock",
			pos:  position{line: 230, col: 1, offset: 6556},
			expr: &actionExpr{
				pos: position{line: 230, col: 16, offset: 6571},
				run: (*parser).callonFilterBlock1,
				expr: &seqExpr{
					pos: position{line: 230, col: 16, offset: 6571},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 230, col: 16, offset: 6571},
							name: "PIPE",
						},
						&labeledExpr{
							pos:   position{line: 230, col: 21, offset: 6576},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 230, col: 28, offset: 6583},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 230, col: 28, offset: 6583},
										name: "SearchBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 230, col: 42, offset: 6597},
										name: "RegexBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QueryAggergatorBlock",
			pos:  position{line: 235, col: 1, offset: 6673},
			expr: &actionExpr{
				pos: position{line: 235, col: 25, offset: 6697},
				run: (*parser).callonQueryAggergatorBlock1,
				expr: &labeledExpr{
					pos:   position{line: 235, col: 25, offset: 6697},
					label: "block",
					expr: &choiceExpr{
						pos: position{line: 235, col: 32, offset: 6704},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 235, col: 32, offset: 6704},
								name: "FieldSelectBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 235, col: 51, offset: 6723},
								name: "AggregatorBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 235, col: 69, offset: 6741},
								name: "EvalBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 235, col: 81, offset: 6753},
								name: "WhereBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 235, col: 94, offset: 6766},
								name: "HeadBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 235, col: 106, offset: 6778},
								name: "RexBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 235, col: 117, offset: 6789},
								name: "StatisticBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 235, col: 134, offset: 6806},
								name: "RenameBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 235, col: 148, offset: 6820},
								name: "TimechartBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 235, col: 165, offset: 6837},
								name: "TransactionBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 235, col: 184, offset: 6856},
								name: "DedupBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldSelectBlock",
			pos:  position{line: 240, col: 1, offset: 6948},
			expr: &actionExpr{
				pos: position{line: 240, col: 21, offset: 6968},
				run: (*parser).callonFieldSelectBlock1,
				expr: &seqExpr{
					pos: position{line: 240, col: 21, offset: 6968},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 240, col: 21, offset: 6968},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 240, col: 26, offset: 6973},
							name: "CMD_FIELDS",
						},
						&labeledExpr{
							pos:   position{line: 240, col: 37, offset: 6984},
							label: "op",
							expr: &zeroOrOneExpr{
								pos: position{line: 240, col: 40, offset: 6987},
								expr: &choiceExpr{
									pos: position{line: 240, col: 41, offset: 6988},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 240, col: 41, offset: 6988},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
										&litMatcher{
											pos:        position{line: 240, col: 47, offset: 6994},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 240, col: 53, offset: 7000},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 240, col: 68, offset: 7015},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 240, col: 75, offset: 7022},
								name: "FieldNameList",
							},
						},
					},
				},
			},
		},
		{
			name: "AggregatorBlock",
			pos:  position{line: 258, col: 1, offset: 7526},
			expr: &actionExpr{
				pos: position{line: 258, col: 20, offset: 7545},
				run: (*parser).callonAggregatorBlock1,
				expr: &seqExpr{
					pos: position{line: 258, col: 20, offset: 7545},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 258, col: 20, offset: 7545},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 258, col: 25, offset: 7550},
							name: "CMD_STATS",
						},
						&labeledExpr{
							pos:   position{line: 258, col: 35, offset: 7560},
							label: "aggs",
							expr: &ruleRefExpr{
								pos:  position{line: 258, col: 40, offset: 7565},
								name: "AggregationList",
							},
						},
						&labeledExpr{
							pos:   position{line: 258, col: 56, offset: 7581},
							label: "byFields",
							expr: &zeroOrOneExpr{
								pos: position{line: 258, col: 65, offset: 7590},
								expr: &ruleRefExpr{
									pos:  position{line: 258, col: 66, offset: 7591},
									name: "GroupbyBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GroupbyBlock",
			pos:  position{line: 303, col: 1, offset: 9085},
			expr: &actionExpr{
				pos: position{line: 303, col: 17, offset: 9101},
				run: (*parser).callonGroupbyBlock1,
				expr: &seqExpr{
					pos: position{line: 303, col: 17, offset: 9101},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 303, col: 17, offset: 9101},
							name: "BY",
						},
						&labeledExpr{
							pos:   position{line: 303, col: 20, offset: 9104},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 303, col: 27, offset: 9111},
								name: "FieldNameList",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexBlock",
			pos:  position{line: 314, col: 1, offset: 9460},
			expr: &actionExpr{
				pos: position{line: 314, col: 15, offset: 9474},
				run: (*parser).callonRegexBlock1,
				expr: &seqExpr{
					pos: position{line: 314, col: 15, offset: 9474},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 314, col: 15, offset: 9474},
							name: "CMD_REGEX",
						},
						&labeledExpr{
							pos:   position{line: 314, col: 25, offset: 9484},
							label: "keyAndOp",
							expr: &zeroOrOneExpr{
								pos: position{line: 314, col: 34, offset: 9493},
								expr: &seqExpr{
									pos: position{line: 314, col: 35, offset: 9494},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 314, col: 35, offset: 9494},
											name: "FieldName",
										},
										&ruleRefExpr{
											pos:  position{line: 314, col: 45, offset: 9504},
											name: "EqualityOperator",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 314, col: 64, offset: 9523},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 314, col: 68, offset: 9527},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel4",
			pos:  position{line: 342, col: 1, offset: 10106},
			expr: &actionExpr{
				pos: position{line: 342, col: 17, offset: 10122},
				run: (*parser).callonClauseLevel41,
				expr: &seqExpr{
					pos: position{line: 342, col: 17, offset: 10122},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 342, col: 17, offset: 10122},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 342, col: 23, offset: 10128},
								name: "ClauseLevel3",
							},
						},
						&labeledExpr{
							pos:   position{line: 342, col: 36, offset: 10141},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 342, col: 41, offset: 10146},
								expr: &seqExpr{
									pos: position{line: 342, col: 42, offset: 10147},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 342, col: 43, offset: 10148},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 342, col: 43, offset: 10148},
													name: "AND",
												},
												&ruleRefExpr{
													pos:  position{line: 342, col: 49, offset: 10154},
													name: "SPACE",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 342, col: 56, offset: 10161},
											name: "ClauseLevel3",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel3",
			pos:  position{line: 360, col: 1, offset: 10538},
			expr: &actionExpr{
				pos: position{line: 360, col: 17, offset: 10554},
				run: (*parser).callonClauseLevel31,
				expr: &seqExpr{
					pos: position{line: 360, col: 17, offset: 10554},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 360, col: 17, offset: 10554},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 360, col: 23, offset: 10560},
								name: "ClauseLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 360, col: 36, offset: 10573},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 360, col: 41, offset: 10578},
								expr: &seqExpr{
									pos: position{line: 360, col: 42, offset: 10579},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 360, col: 42, offset: 10579},
											name: "OR",
										},
										&ruleRefExpr{
											pos:  position{line: 360, col: 45, offset: 10582},
											name: "ClauseLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel2",
			pos:  position{line: 378, col: 1, offset: 10947},
			expr: &choiceExpr{
				pos: position{line: 378, col: 17, offset: 10963},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 378, col: 17, offset: 10963},
						run: (*parser).callonClauseLevel22,
						expr: &seqExpr{
							pos: position{line: 378, col: 17, offset: 10963},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 378, col: 17, offset: 10963},
									label: "notList",
									expr: &oneOrMoreExpr{
										pos: position{line: 378, col: 25, offset: 10971},
										expr: &ruleRefExpr{
											pos:  position{line: 378, col: 25, offset: 10971},
											name: "NOT",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 378, col: 30, offset: 10976},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 378, col: 36, offset: 10982},
										name: "ClauseLevel1",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 389, col: 5, offset: 11278},
						run: (*parser).callonClauseLevel29,
						expr: &labeledExpr{
							pos:   position{line: 389, col: 5, offset: 11278},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 389, col: 12, offset: 11285},
								name: "ClauseLevel1",
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel1",
			pos:  position{line: 393, col: 1, offset: 11326},
			expr: &choiceExpr{
				pos: position{line: 393, col: 17, offset: 11342},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 393, col: 17, offset: 11342},
						run: (*parser).callonClauseLevel12,
						expr: &seqExpr{
							pos: position{line: 393, col: 17, offset: 11342},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 393, col: 17, offset: 11342},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 393, col: 25, offset: 11350},
									label: "clause",
									expr: &ruleRefExpr{
										pos:  position{line: 393, col: 32, offset: 11357},
										name: "ClauseLevel4",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 393, col: 45, offset: 11370},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 395, col: 5, offset: 11407},
						run: (*parser).callonClauseLevel18,
						expr: &labeledExpr{
							pos:   position{line: 395, col: 5, offset: 11407},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 395, col: 10, offset: 11412},
								name: "SearchTerm",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchTerm",
			pos:  position{line: 401, col: 1, offset: 11570},
			expr: &actionExpr{
				pos: position{line: 401, col: 15, offset: 11584},
				run: (*parser).callonSearchTerm1,
				expr: &labeledExpr{
					pos:   position{line: 401, col: 15, offset: 11584},
					label: "term",
					expr: &choiceExpr{
						pos: position{line: 401, col: 21, offset: 11590},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 401, col: 21, offset: 11590},
								name: "FieldWithNumberValue",
							},
							&ruleRefExpr{
								pos:  position{line: 401, col: 44, offset: 11613},
								name: "FieldWithBooleanValue",
							},
							&ruleRefExpr{
								pos:  position{line: 401, col: 68, offset: 11637},
								name: "FieldWithStringValue",
							},
						},
					},
				},
			},
		},
		{
			name: "TimechartBlock",
			pos:  position{line: 406, col: 1, offset: 11778},
			expr: &actionExpr{
				pos: position{line: 406, col: 19, offset: 11796},
				run: (*parser).callonTimechartBlock1,
				expr: &seqExpr{
					pos: position{line: 406, col: 19, offset: 11796},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 406, col: 19, offset: 11796},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 406, col: 24, offset: 11801},
							name: "CMD_TIMECHART",
						},
						&labeledExpr{
							pos:   position{line: 406, col: 38, offset: 11815},
							label: "binOptions",
							expr: &zeroOrOneExpr{
								pos: position{line: 406, col: 49, offset: 11826},
								expr: &ruleRefExpr{
									pos:  position{line: 406, col: 50, offset: 11827},
									name: "BinOptions",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 406, col: 63, offset: 11840},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 406, col: 69, offset: 11846},
								name: "SingleAggExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 406, col: 84, offset: 11861},
							label: "limitExpr",
							expr: &zeroOrOneExpr{
								pos: position{line: 406, col: 94, offset: 11871},
								expr: &ruleRefExpr{
									pos:  position{line: 406, col: 95, offset: 11872},
									name: "LimitExpr",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleAggExpr",
			pos:  position{line: 467, col: 1, offset: 13912},
			expr: &actionExpr{
				pos: position{line: 467, col: 18, offset: 13929},
				run: (*parser).callonSingleAggExpr1,
				expr: &seqExpr{
					pos: position{line: 467, col: 18, offset: 13929},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 467, col: 18, offset: 13929},
							label: "aggs",
							expr: &ruleRefExpr{
								pos:  position{line: 467, col: 23, offset: 13934},
								name: "AggregationList",
							},
						},
						&labeledExpr{
							pos:   position{line: 467, col: 39, offset: 13950},
							label: "splitByClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 467, col: 53, offset: 13964},
								expr: &ruleRefExpr{
									pos:  position{line: 467, col: 54, offset: 13965},
									name: "SplitByClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SplitByClause",
			pos:  position{line: 481, col: 1, offset: 14305},
			expr: &actionExpr{
				pos: position{line: 481, col: 18, offset: 14322},
				run: (*parser).callonSplitByClause1,
				expr: &seqExpr{
					pos: position{line: 481, col: 18, offset: 14322},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 481, col: 18, offset: 14322},
							name: "BY",
						},
						&labeledExpr{
							pos:   position{line: 481, col: 21, offset: 14325},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 481, col: 27, offset: 14331},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 481, col: 37, offset: 14341},
							label: "tcOptions",
							expr: &zeroOrOneExpr{
								pos: position{line: 481, col: 47, offset: 14351},
								expr: &ruleRefExpr{
									pos:  position{line: 481, col: 48, offset: 14352},
									name: "TcOptions",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TcOptions",
			pos:  position{line: 492, col: 1, offset: 14580},
			expr: &actionExpr{
				pos: position{line: 492, col: 14, offset: 14593},
				run: (*parser).callonTcOptions1,
				expr: &seqExpr{
					pos: position{line: 492, col: 14, offset: 14593},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 492, col: 14, offset: 14593},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 492, col: 20, offset: 14599},
							label: "option",
							expr: &choiceExpr{
								pos: position{line: 492, col: 28, offset: 14607},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 492, col: 28, offset: 14607},
										name: "BinOptions",
									},
									&oneOrMoreExpr{
										pos: position{line: 492, col: 41, offset: 14620},
										expr: &ruleRefExpr{
											pos:  position{line: 492, col: 42, offset: 14621},
											name: "TcOption",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TcOption",
			pos:  position{line: 534, col: 1, offset: 16141},
			expr: &actionExpr{
				pos: position{line: 534, col: 13, offset: 16153},
				run: (*parser).callonTcOption1,
				expr: &seqExpr{
					pos: position{line: 534, col: 13, offset: 16153},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 534, col: 13, offset: 16153},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 534, col: 19, offset: 16159},
							label: "tcOptionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 534, col: 31, offset: 16171},
								name: "TcOptionCMD",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 534, col: 43, offset: 16183},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 534, col: 49, offset: 16189},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 534, col: 53, offset: 16193},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "TcOptionCMD",
			pos:  position{line: 539, col: 1, offset: 16306},
			expr: &actionExpr{
				pos: position{line: 539, col: 16, offset: 16321},
				run: (*parser).callonTcOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 539, col: 16, offset: 16321},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 539, col: 24, offset: 16329},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 539, col: 24, offset: 16329},
								val:        "usenull",
								ignoreCase: false,
								want:       "\"usenull\"",
							},
							&litMatcher{
								pos:        position{line: 539, col: 36, offset: 16341},
								val:        "useother",
								ignoreCase: false,
								want:       "\"useother\"",
							},
							&litMatcher{
								pos:        position{line: 539, col: 49, offset: 16354},
								val:        "nullstr",
								ignoreCase: false,
								want:       "\"nullstr\"",
							},
							&litMatcher{
								pos:        position{line: 539, col: 61, offset: 16366},
								val:        "otherstr",
								ignoreCase: false,
								want:       "\"otherstr\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BinOptions",
			pos:  position{line: 548, col: 1, offset: 16715},
			expr: &actionExpr{
				pos: position{line: 548, col: 15, offset: 16729},
				run: (*parser).callonBinOptions1,
				expr: &labeledExpr{
					pos:   position{line: 548, col: 15, offset: 16729},
					label: "spanOptions",
					expr: &ruleRefExpr{
						pos:  position{line: 548, col: 27, offset: 16741},
						name: "SpanOptions",
					},
				},
			},
		},
		{
			name: "SpanOptions",
			pos:  position{line: 556, col: 1, offset: 16966},
			expr: &actionExpr{
				pos: position{line: 556, col: 16, offset: 16981},
				run: (*parser).callonSpanOptions1,
				expr: &seqExpr{
					pos: position{line: 556, col: 16, offset: 16981},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 556, col: 16, offset: 16981},
							name: "CMD_SPAN",
						},
						&ruleRefExpr{
							pos:  position{line: 556, col: 25, offset: 16990},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 556, col: 31, offset: 16996},
							label: "spanLength",
							expr: &ruleRefExpr{
								pos:  position{line: 556, col: 42, offset: 17007},
								name: "SpanLength",
							},
						},
					},
				},
			},
		},
		{
			name: "SpanLength",
			pos:  position{line: 563, col: 1, offset: 17153},
			expr: &actionExpr{
				pos: position{line: 563, col: 15, offset: 17167},
				run: (*parser).callonSpanLength1,
				expr: &seqExpr{
					pos: position{line: 563, col: 15, offset: 17167},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 563, col: 15, offset: 17167},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 563, col: 24, offset: 17176},
								name: "IntegerAsString",
							},
						},
						&labeledExpr{
							pos:   position{line: 563, col: 40, offset: 17192},
							label: "timeScale",
							expr: &ruleRefExpr{
								pos:  position{line: 563, col: 50, offset: 17202},
								name: "TimeScale",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 563, col: 60, offset: 17212},
							name: "SPACE",
						},
					},
				},
			},
		},
		{
			name: "TimeScale",
			pos:  position{line: 576, col: 1, offset: 17526},
			expr: &actionExpr{
				pos: position{line: 576, col: 14, offset: 17539},
				run: (*parser).callonTimeScale1,
				expr: &labeledExpr{
					pos:   position{line: 576, col: 14, offset: 17539},
					label: "timeUnit",
					expr: &choiceExpr{
						pos: position{line: 576, col: 24, offset: 17549},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 576, col: 24, offset: 17549},
								name: "Second",
							},
							&ruleRefExpr{
								pos:  position{line: 576, col: 33, offset: 17558},
								name: "Minute",
							},
							&ruleRefExpr{
								pos:  position{line: 576, col: 42, offset: 17567},
								name: "Hour",
							},
							&ruleRefExpr{
								pos:  position{line: 576, col: 49, offset: 17574},
								name: "Day",
							},
							&ruleRefExpr{
								pos:  position{line: 576, col: 54, offset: 17579},
								name: "Week",
							},
							&ruleRefExpr{
								pos:  position{line: 576, col: 61, offset: 17586},
								name: "Month",
							},
							&ruleRefExpr{
								pos:  position{line: 576, col: 69, offset: 17594},
								name: "Quarter",
							},
							&ruleRefExpr{
								pos:  position{line: 576, col: 78, offset: 17603},
								name: "Subseconds",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitExpr",
			pos:  position{line: 581, col: 1, offset: 17725},
			expr: &actionExpr{
				pos: position{line: 581, col: 14, offset: 17738},
				run: (*parser).callonLimitExpr1,
				expr: &seqExpr{
					pos: position{line: 581, col: 14, offset: 17738},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 581, col: 14, offset: 17738},
							name: "SPACE",
						},
						&litMatcher{
							pos:        position{line: 581, col: 20, offset: 17744},
							val:        "limit",
							ignoreCase: false,
							want:       "\"limit\"",
						},
						&ruleRefExpr{
							pos:  position{line: 581, col: 28, offset: 17752},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 581, col: 34, offset: 17758},
							label: "sortBy",
							expr: &zeroOrOneExpr{
								pos: position{line: 581, col: 41, offset: 17765},
								expr: &choiceExpr{
									pos: position{line: 581, col: 42, offset: 17766},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 581, col: 42, offset: 17766},
											val:        "top",
											ignoreCase: false,
											want:       "\"top\"",
										},
										&litMatcher{
											pos:        position{line: 581, col: 50, offset: 17774},
											val:        "bottom",
											ignoreCase: false,
											want:       "\"bottom\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 581, col: 61, offset: 17785},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 581, col: 76, offset: 17800},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 581, col: 86, offset: 17810},
								name: "IntegerAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticBlock",
			pos:  position{line: 605, col: 1, offset: 18391},
			expr: &actionExpr{
				pos: position{line: 605, col: 19, offset: 18409},
				run: (*parser).callonStatisticBlock1,
				expr: &seqExpr{
					pos: position{line: 605, col: 19, offset: 18409},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 605, col: 19, offset: 18409},
							name: "PIPE",
						},
						&labeledExpr{
							pos:   position{line: 605, col: 24, offset: 18414},
							label: "statisticExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 605, col: 38, offset: 18428},
								name: "StatisticExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticExpr",
			pos:  position{line: 638, col: 1, offset: 19406},
			expr: &actionExpr{
				pos: position{line: 638, col: 18, offset: 19423},
				run: (*parser).callonStatisticExpr1,
				expr: &seqExpr{
					pos: position{line: 638, col: 18, offset: 19423},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 638, col: 18, offset: 19423},
							label: "cmd",
							expr: &choiceExpr{
								pos: position{line: 638, col: 23, offset: 19428},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 638, col: 23, offset: 19428},
										name: "CMD_TOP",
									},
									&ruleRefExpr{
										pos:  position{line: 638, col: 33, offset: 19438},
										name: "CMD_RARE",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 638, col: 43, offset: 19448},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 638, col: 49, offset: 19454},
								expr: &ruleRefExpr{
									pos:  position{line: 638, col: 50, offset: 19455},
									name: "StatisticLimit",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 638, col: 67, offset: 19472},
							label: "fieldList",
							expr: &seqExpr{
								pos: position{line: 638, col: 78, offset: 19483},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 638, col: 78, offset: 19483},
										name: "SPACE",
									},
									&ruleRefExpr{
										pos:  position{line: 638, col: 84, offset: 19489},
										name: "FieldNameList",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 638, col: 99, offset: 19504},
							label: "byClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 638, col: 108, offset: 19513},
								expr: &ruleRefExpr{
									pos:  position{line: 638, col: 109, offset: 19514},
									name: "ByClause",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 638, col: 120, offset: 19525},
							label: "options",
							expr: &zeroOrOneExpr{
								pos: position{line: 638, col: 128, offset: 19533},
								expr: &ruleRefExpr{
									pos:  position{line: 638, col: 129, offset: 19534},
									name: "StatisticOptions",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticLimit",
			pos:  position{line: 680, col: 1, offset: 20619},
			expr: &choiceExpr{
				pos: position{line: 680, col: 19, offset: 20637},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 680, col: 19, offset: 20637},
						run: (*parser).callonStatisticLimit2,
						expr: &seqExpr{
							pos: position{line: 680, col: 19, offset: 20637},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 680, col: 19, offset: 20637},
									name: "SPACE",
								},
								&labeledExpr{
									pos:   position{line: 680, col: 25, offset: 20643},
									label: "number",
									expr: &ruleRefExpr{
										pos:  position{line: 680, col: 32, offset: 20650},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 683, col: 3, offset: 20704},
						run: (*parser).callonStatisticLimit7,
						expr: &seqExpr{
							pos: position{line: 683, col: 3, offset: 20704},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 683, col: 3, offset: 20704},
									name: "SPACE",
								},
								&litMatcher{
									pos:        position{line: 683, col: 9, offset: 20710},
									val:        "limit",
									ignoreCase: false,
									want:       "\"limit\"",
								},
								&ruleRefExpr{
									pos:  position{line: 683, col: 17, offset: 20718},
									name: "EQUAL",
								},
								&labeledExpr{
									pos:   position{line: 683, col: 23, offset: 20724},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 683, col: 30, offset: 20731},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticOptions",
			pos:  position{line: 688, col: 1, offset: 20829},
			expr: &actionExpr{
				pos: position{line: 688, col: 21, offset: 20849},
				run: (*parser).callonStatisticOptions1,
				expr: &labeledExpr{
					pos:   position{line: 688, col: 21, offset: 20849},
					label: "option",
					expr: &zeroOrMoreExpr{
						pos: position{line: 688, col: 28, offset: 20856},
						expr: &ruleRefExpr{
							pos:  position{line: 688, col: 29, offset: 20857},
							name: "StatisticOption",
						},
					},
				},
			},
		},
		{
			name: "StatisticOption",
			pos:  position{line: 737, col: 1, offset: 22419},
			expr: &actionExpr{
				pos: position{line: 737, col: 20, offset: 22438},
				run: (*parser).callonStatisticOption1,
				expr: &seqExpr{
					pos: position{line: 737, col: 20, offset: 22438},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 737, col: 20, offset: 22438},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 737, col: 26, offset: 22444},
							label: "optionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 737, col: 36, offset: 22454},
								name: "StatisticOptionCMD",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 737, col: 55, offset: 22473},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 737, col: 61, offset: 22479},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 737, col: 67, offset: 22485},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticOptionCMD",
			pos:  position{line: 742, col: 1, offset: 22594},
			expr: &actionExpr{
				pos: position{line: 742, col: 23, offset: 22616},
				run: (*parser).callonStatisticOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 742, col: 23, offset: 22616},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 742, col: 31, offset: 22624},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 742, col: 31, offset: 22624},
								val:        "countfield",
								ignoreCase: false,
								want:       "\"countfield\"",
							},
							&litMatcher{
								pos:        position{line: 742, col: 46, offset: 22639},
								val:        "showcount",
								ignoreCase: false,
								want:       "\"showcount\"",
							},
							&litMatcher{
								pos:        position{line: 742, col: 60, offset: 22653},
								val:        "otherstr",
								ignoreCase: false,
								want:       "\"otherstr\"",
							},
							&litMatcher{
								pos:        position{line: 742, col: 73, offset: 22666},
								val:        "useother",
								ignoreCase: false,
								want:       "\"useother\"",
							},
							&litMatcher{
								pos:        position{line: 742, col: 85, offset: 22678},
								val:        "percentfield",
								ignoreCase: false,
								want:       "\"percentfield\"",
							},
							&litMatcher{
								pos:        position{line: 742, col: 102, offset: 22695},
								val:        "showperc",
								ignoreCase: false,
								want:       "\"showperc\"",
							},
						},
					},
				},
			},
		},
		{
			name: "ByClause",
			pos:  position{line: 750, col: 1, offset: 22882},
			expr: &choiceExpr{
				pos: position{line: 750, col: 13, offset: 22894},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 750, col: 13, offset: 22894},
						run: (*parser).callonByClause2,
						expr: &seqExpr{
							pos: position{line: 750, col: 13, offset: 22894},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 750, col: 13, offset: 22894},
									name: "BY",
								},
								&labeledExpr{
									pos:   position{line: 750, col: 16, offset: 22897},
									label: "fieldList",
									expr: &ruleRefExpr{
										pos:  position{line: 750, col: 26, offset: 22907},
										name: "FieldNameList",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 753, col: 3, offset: 22964},
						run: (*parser).callonByClause7,
						expr: &labeledExpr{
							pos:   position{line: 753, col: 3, offset: 22964},
							label: "groupByBlock",
							expr: &ruleRefExpr{
								pos:  position{line: 753, col: 16, offset: 22977},
								name: "GroupbyBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupBlock",
			pos:  position{line: 757, col: 1, offset: 23035},
			expr: &actionExpr{
				pos: position{line: 757, col: 15, offset: 23049},
				run: (*parser).callonDedupBlock1,
				expr: &seqExpr{
					pos: position{line: 757, col: 15, offset: 23049},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 757, col: 15, offset: 23049},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 757, col: 20, offset: 23054},
							name: "CMD_DEDUP",
						},
						&labeledExpr{
							pos:   position{line: 757, col: 30, offset: 23064},
							label: "dedupExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 757, col: 40, offset: 23074},
								name: "DedupExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupExpr",
			pos:  position{line: 777, col: 1, offset: 23642},
			expr: &actionExpr{
				pos: position{line: 777, col: 14, offset: 23655},
				run: (*parser).callonDedupExpr1,
				expr: &seqExpr{
					pos: position{line: 777, col: 14, offset: 23655},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 777, col: 14, offset: 23655},
							label: "limitArr",
							expr: &zeroOrOneExpr{
								pos: position{line: 777, col: 23, offset: 23664},
								expr: &seqExpr{
									pos: position{line: 777, col: 24, offset: 23665},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 777, col: 24, offset: 23665},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 777, col: 30, offset: 23671},
											name: "IntegerAsString",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 777, col: 48, offset: 23689},
							label: "options1",
							expr: &zeroOrOneExpr{
								pos: position{line: 777, col: 57, offset: 23698},
								expr: &ruleRefExpr{
									pos:  position{line: 777, col: 58, offset: 23699},
									name: "DedupOptions",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 777, col: 73, offset: 23714},
							label: "fieldList",
							expr: &zeroOrOneExpr{
								pos: position{line: 777, col: 83, offset: 23724},
								expr: &ruleRefExpr{
									pos:  position{line: 777, col: 84, offset: 23725},
									name: "DedupFieldList",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 777, col: 101, offset: 23742},
							label: "options2",
							expr: &zeroOrOneExpr{
								pos: position{line: 777, col: 110, offset: 23751},
								expr: &ruleRefExpr{
									pos:  position{line: 777, col: 111, offset: 23752},
									name: "DedupOptions",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 777, col: 126, offset: 23767},
							label: "sortByClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 777, col: 139, offset: 23780},
								expr: &ruleRefExpr{
									pos:  position{line: 777, col: 140, offset: 23781},
									name: "DedupSortByClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DedupFieldName",
			pos:  position{line: 823, col: 1, offset: 25054},
			expr: &actionExpr{
				pos: position{line: 823, col: 19, offset: 25072},
				run: (*parser).callonDedupFieldName1,
				expr: &seqExpr{
					pos: position{line: 823, col: 19, offset: 25072},
					exprs: []any{
						&notExpr{
							pos: position{line: 823, col: 19, offset: 25072},
							expr: &litMatcher{
								pos:        position{line: 823, col: 21, offset: 25074},
								val:        "sortby",
								ignoreCase: false,
								want:       "\"sortby\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 823, col: 31, offset: 25084},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 823, col: 37, offset: 25090},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupFieldList",
			pos:  position{line: 827, col: 1, offset: 25127},
			expr: &actionExpr{
				pos: position{line: 827, col: 19, offset: 25145},
				run: (*parser).callonDedupFieldList1,
				expr: &seqExpr{
					pos: position{line: 827, col: 19, offset: 25145},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 827, col: 19, offset: 25145},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 827, col: 25, offset: 25151},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 827, col: 31, offset: 25157},
								name: "DedupFieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 827, col: 46, offset: 25172},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 827, col: 51, offset: 25177},
								expr: &seqExpr{
									pos: position{line: 827, col: 52, offset: 25178},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 827, col: 52, offset: 25178},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 827, col: 58, offset: 25184},
											name: "DedupFieldName",
										},
										&notExpr{
											pos: position{line: 827, col: 73, offset: 25199},
											expr: &ruleRefExpr{
												pos:  position{line: 827, col: 74, offset: 25200},
												name: "EQUAL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DedupOptions",
			pos:  position{line: 845, col: 1, offset: 25728},
			expr: &actionExpr{
				pos: position{line: 845, col: 17, offset: 25744},
				run: (*parser).callonDedupOptions1,
				expr: &labeledExpr{
					pos:   position{line: 845, col: 17, offset: 25744},
					label: "option",
					expr: &zeroOrMoreExpr{
						pos: position{line: 845, col: 24, offset: 25751},
						expr: &ruleRefExpr{
							pos:  position{line: 845, col: 25, offset: 25752},
							name: "DedupOption",
						},
					},
				},
			},
		},
		{
			name: "DedupOption",
			pos:  position{line: 885, col: 1, offset: 27018},
			expr: &actionExpr{
				pos: position{line: 885, col: 16, offset: 27033},
				run: (*parser).callonDedupOption1,
				expr: &seqExpr{
					pos: position{line: 885, col: 16, offset: 27033},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 885, col: 16, offset: 27033},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 885, col: 22, offset: 27039},
							label: "optionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 885, col: 32, offset: 27049},
								name: "DedupOptionCMD",
							},
						},
						&litMatcher{
							pos:        position{line: 885, col: 47, offset: 27064},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 885, col: 51, offset: 27068},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 885, col: 57, offset: 27074},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupOptionCMD",
			pos:  position{line: 890, col: 1, offset: 27183},
			expr: &actionExpr{
				pos: position{line: 890, col: 19, offset: 27201},
				run: (*parser).callonDedupOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 890, col: 19, offset: 27201},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 890, col: 27, offset: 27209},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 890, col: 27, offset: 27209},
								val:        "consecutive",
								ignoreCase: false,
								want:       "\"consecutive\"",
							},
							&litMatcher{
								pos:        position{line: 890, col: 43, offset: 27225},
								val:        "keepempty",
								ignoreCase: false,
								want:       "\"keepempty\"",
							},
							&litMatcher{
								pos:        position{line: 890, col: 57, offset: 27239},
								val:        "keepevents",
								ignoreCase: false,
								want:       "\"keepevents\"",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupSortByClause",
			pos:  position{line: 898, col: 1, offset: 27424},
			expr: &actionExpr{
				pos: position{line: 898, col: 22, offset: 27445},
				run: (*parser).callonDedupSortByClause1,
				expr: &seqExpr{
					pos: position{line: 898, col: 22, offset: 27445},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 898, col: 22, offset: 27445},
							name: "CMD_DEDUP_SORTBY",
						},
						&labeledExpr{
							pos:   position{line: 898, col: 39, offset: 27462},
							label: "dedupSortEles",
							expr: &ruleRefExpr{
								pos:  position{line: 898, col: 53, offset: 27476},
								name: "DedupSortElements",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupSortElements",
			pos:  position{line: 903, col: 1, offset: 27589},
			expr: &actionExpr{
				pos: position{line: 903, col: 22, offset: 27610},
				run: (*parser).callonDedupSortElements1,
				expr: &seqExpr{
					pos: position{line: 903, col: 22, offset: 27610},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 903, col: 22, offset: 27610},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 903, col: 28, offset: 27616},
								name: "DedupSingleSortElement",
							},
						},
						&labeledExpr{
							pos:   position{line: 903, col: 51, offset: 27639},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 903, col: 56, offset: 27644},
								expr: &seqExpr{
									pos: position{line: 903, col: 57, offset: 27645},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 903, col: 57, offset: 27645},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 903, col: 63, offset: 27651},
											name: "DedupSingleSortElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DedupSingleSortElement",
			pos:  position{line: 918, col: 1, offset: 28049},
			expr: &actionExpr{
				pos: position{line: 918, col: 27, offset: 28075},
				run: (*parser).callonDedupSingleSortElement1,
				expr: &seqExpr{
					pos: position{line: 918, col: 27, offset: 28075},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 918, col: 27, offset: 28075},
							label: "sortBySymbol",
							expr: &choiceExpr{
								pos: position{line: 918, col: 41, offset: 28089},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 918, col: 41, offset: 28089},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&litMatcher{
										pos:        position{line: 918, col: 47, offset: 28095},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 918, col: 52, offset: 28100},
							label: "op",
							expr: &zeroOrOneExpr{
								pos: position{line: 918, col: 55, offset: 28103},
								expr: &choiceExpr{
									pos: position{line: 918, col: 56, offset: 28104},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 918, col: 56, offset: 28104},
											val:        "",
											ignoreCase: false,
											want:       "\"\"",
										},
										&litMatcher{
											pos:        position{line: 918, col: 61, offset: 28109},
											val:        "auto",
											ignoreCase: false,
											want:       "\"auto\"",
										},
										&litMatcher{
											pos:        position{line: 918, col: 70, offset: 28118},
											val:        "str",
											ignoreCase: false,
											want:       "\"str\"",
										},
										&litMatcher{
											pos:        position{line: 918, col: 78, offset: 28126},
											val:        "ip",
											ignoreCase: false,
											want:       "\"ip\"",
										},
										&litMatcher{
											pos:        position{line: 918, col: 85, offset: 28133},
											val:        "num",
											ignoreCase: false,
											want:       "\"num\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 918, col: 93, offset: 28141},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 918, col: 99, offset: 28147},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameBlock",
			pos:  position{line: 938, col: 1, offset: 28557},
			expr: &actionExpr{
				pos: position{line: 938, col: 16, offset: 28572},
				run: (*parser).callonRenameBlock1,
				expr: &seqExpr{
					pos: position{line: 938, col: 16, offset: 28572},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 938, col: 16, offset: 28572},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 938, col: 21, offset: 28577},
							name: "CMD_RENAME",
						},
						&labeledExpr{
							pos:   position{line: 938, col: 32, offset: 28588},
							label: "renameExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 938, col: 43, offset: 28599},
								name: "RenameExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameExpr",
			pos:  position{line: 954, col: 1, offset: 28974},
			expr: &choiceExpr{
				pos: position{line: 954, col: 15, offset: 28988},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 954, col: 15, offset: 28988},
						run: (*parser).callonRenameExpr2,
						expr: &seqExpr{
							pos: position{line: 954, col: 15, offset: 28988},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 954, col: 15, offset: 28988},
									label: "originalPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 954, col: 31, offset: 29004},
										name: "RenamePattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 954, col: 45, offset: 29018},
									name: "AS",
								},
								&labeledExpr{
									pos:   position{line: 954, col: 48, offset: 29021},
									label: "newPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 954, col: 59, offset: 29032},
										name: "QuotedString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 965, col: 3, offset: 29351},
						run: (*parser).callonRenameExpr9,
						expr: &seqExpr{
							pos: position{line: 965, col: 3, offset: 29351},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 965, col: 3, offset: 29351},
									label: "originalPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 965, col: 19, offset: 29367},
										name: "RenamePattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 965, col: 33, offset: 29381},
									name: "AS",
								},
								&labeledExpr{
									pos:   position{line: 965, col: 36, offset: 29384},
									label: "newPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 965, col: 47, offset: 29395},
										name: "RenamePattern",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RexBlock",
			pos:  position{line: 987, col: 1, offset: 29961},
			expr: &actionExpr{
				pos: position{line: 987, col: 13, offset: 29973},
				run: (*parser).callonRexBlock1,
				expr: &seqExpr{
					pos: position{line: 987, col: 13, offset: 29973},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 987, col: 13, offset: 29973},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 987, col: 18, offset: 29978},
							name: "CMD_REX",
						},
						&litMatcher{
							pos:        position{line: 987, col: 26, offset: 29986},
							val:        "field",
							ignoreCase: false,
							want:       "\"field\"",
						},
						&ruleRefExpr{
							pos:  position{line: 987, col: 34, offset: 29994},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 987, col: 40, offset: 30000},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 987, col: 46, offset: 30006},
								name: "EvalFieldToRead",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 987, col: 62, offset: 30022},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 987, col: 68, offset: 30028},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 987, col: 72, offset: 30032},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "EvalBlock",
			pos:  position{line: 1014, col: 1, offset: 30717},
			expr: &actionExpr{
				pos: position{line: 1014, col: 14, offset: 30730},
				run: (*parser).callonEvalBlock1,
				expr: &seqExpr{
					pos: position{line: 1014, col: 14, offset: 30730},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1014, col: 14, offset: 30730},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1014, col: 19, offset: 30735},
							name: "CMD_EVAL",
						},
						&labeledExpr{
							pos:   position{line: 1014, col: 28, offset: 30744},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1014, col: 34, offset: 30750},
								name: "SingleEval",
							},
						},
						&labeledExpr{
							pos:   position{line: 1014, col: 45, offset: 30761},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1014, col: 50, offset: 30766},
								expr: &seqExpr{
									pos: position{line: 1014, col: 51, offset: 30767},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1014, col: 51, offset: 30767},
											name: "COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 1014, col: 57, offset: 30773},
											name: "SingleEval",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleEval",
			pos:  position{line: 1041, col: 1, offset: 31574},
			expr: &actionExpr{
				pos: position{line: 1041, col: 15, offset: 31588},
				run: (*parser).callonSingleEval1,
				expr: &seqExpr{
					pos: position{line: 1041, col: 15, offset: 31588},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1041, col: 15, offset: 31588},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1041, col: 21, offset: 31594},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1041, col: 31, offset: 31604},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1041, col: 37, offset: 31610},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 1041, col: 42, offset: 31615},
								name: "EvalExpression",
							},
						},
					},
				},
			},
		},
		{
			name: "EvalExpression",
			pos:  position{line: 1054, col: 1, offset: 32016},
			expr: &actionExpr{
				pos: position{line: 1054, col: 19, offset: 32034},
				run: (*parser).callonEvalExpression1,
				expr: &labeledExpr{
					pos:   position{line: 1054, col: 19, offset: 32034},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 1054, col: 25, offset: 32040},
						name: "ValueExpr",
					},
				},
			},
		},
		{
			name: "ConditionExpr",
			pos:  position{line: 1062, col: 1, offset: 32187},
			expr: &actionExpr{
				pos: position{line: 1062, col: 18, offset: 32204},
				run: (*parser).callonConditionExpr1,
				expr: &seqExpr{
					pos: position{line: 1062, col: 18, offset: 32204},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1062, col: 18, offset: 32204},
							val:        "if",
							ignoreCase: false,
							want:       "\"if\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1062, col: 23, offset: 32209},
							name: "L_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 1062, col: 31, offset: 32217},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 1062, col: 41, offset: 32227},
								name: "BoolExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1062, col: 50, offset: 32236},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 1062, col: 56, offset: 32242},
							label: "trueValue",
							expr: &ruleRefExpr{
								pos:  position{line: 1062, col: 66, offset: 32252},
								name: "ValueExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1062, col: 76, offset: 32262},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 1062, col: 82, offset: 32268},
							label: "falseValue",
							expr: &ruleRefExpr{
								pos:  position{line: 1062, col: 93, offset: 32279},
								name: "ValueExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1062, col: 103, offset: 32289},
							name: "R_PAREN",
						},
					},
				},
			},
		},
		{
			name: "TextExpr",
			pos:  position{line: 1074, col: 1, offset: 32539},
			expr: &choiceExpr{
				pos: position{line: 1074, col: 13, offset: 32551},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1074, col: 13, offset: 32551},
						run: (*parser).callonTextExpr2,
						expr: &seqExpr{
							pos: position{line: 1074, col: 14, offset: 32552},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1074, col: 14, offset: 32552},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1074, col: 22, offset: 32560},
										val:        "lower",
										ignoreCase: false,
										want:       "\"lower\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1074, col: 31, offset: 32569},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1074, col: 39, offset: 32577},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1074, col: 50, offset: 32588},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1074, col: 61, offset: 32599},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1088, col: 3, offset: 32911},
						run: (*parser).callonTextExpr10,
						expr: &seqExpr{
							pos: position{line: 1088, col: 4, offset: 32912},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1088, col: 4, offset: 32912},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1088, col: 12, offset: 32920},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1088, col: 12, offset: 32920},
												val:        "max",
												ignoreCase: false,
												want:       "\"max\"",
											},
											&litMatcher{
												pos:        position{line: 1088, col: 20, offset: 32928},
												val:        "min",
												ignoreCase: false,
												want:       "\"min\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1088, col: 27, offset: 32935},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1088, col: 35, offset: 32943},
									label: "firstVal",
									expr: &ruleRefExpr{
										pos:  position{line: 1088, col: 44, offset: 32952},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1088, col: 55, offset: 32963},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1088, col: 60, offset: 32968},
										expr: &seqExpr{
											pos: position{line: 1088, col: 61, offset: 32969},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1088, col: 61, offset: 32969},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1088, col: 67, offset: 32975},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1088, col: 80, offset: 32988},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1111, col: 3, offset: 33679},
						run: (*parser).callonTextExpr25,
						expr: &seqExpr{
							pos: position{line: 1111, col: 4, offset: 33680},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1111, col: 4, offset: 33680},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1111, col: 12, offset: 33688},
										val:        "urldecode",
										ignoreCase: false,
										want:       "\"urldecode\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1111, col: 25, offset: 33701},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1111, col: 33, offset: 33709},
									label: "url",
									expr: &ruleRefExpr{
										pos:  position{line: 1111, col: 37, offset: 33713},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1111, col: 48, offset: 33724},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1123, col: 3, offset: 34063},
						run: (*parser).callonTextExpr33,
						expr: &seqExpr{
							pos: position{line: 1123, col: 4, offset: 34064},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1123, col: 4, offset: 34064},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1123, col: 12, offset: 34072},
										val:        "split",
										ignoreCase: false,
										want:       "\"split\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1123, col: 21, offset: 34081},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1123, col: 29, offset: 34089},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1123, col: 40, offset: 34100},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1123, col: 51, offset: 34111},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1123, col: 57, offset: 34117},
									label: "delim",
									expr: &ruleRefExpr{
										pos:  position{line: 1123, col: 63, offset: 34123},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1123, col: 74, offset: 34134},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1135, col: 3, offset: 34467},
						run: (*parser).callonTextExpr44,
						expr: &seqExpr{
							pos: position{line: 1135, col: 4, offset: 34468},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1135, col: 4, offset: 34468},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1135, col: 12, offset: 34476},
										val:        "substr",
										ignoreCase: false,
										want:       "\"substr\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1135, col: 22, offset: 34486},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1135, col: 30, offset: 34494},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1135, col: 41, offset: 34505},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1135, col: 52, offset: 34516},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1135, col: 58, offset: 34522},
									label: "startIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 1135, col: 69, offset: 34533},
										name: "NumericExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1135, col: 81, offset: 34545},
									label: "lengthParam",
									expr: &zeroOrOneExpr{
										pos: position{line: 1135, col: 93, offset: 34557},
										expr: &seqExpr{
											pos: position{line: 1135, col: 94, offset: 34558},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1135, col: 94, offset: 34558},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1135, col: 100, offset: 34564},
													name: "NumericExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1135, col: 114, offset: 34578},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1168, col: 3, offset: 35755},
						run: (*parser).callonTextExpr60,
						expr: &seqExpr{
							pos: position{line: 1168, col: 3, offset: 35755},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1168, col: 3, offset: 35755},
									val:        "tostring",
									ignoreCase: false,
									want:       "\"tostring\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1168, col: 14, offset: 35766},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1168, col: 22, offset: 35774},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 1168, col: 28, offset: 35780},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1168, col: 38, offset: 35790},
									label: "format",
									expr: &zeroOrOneExpr{
										pos: position{line: 1168, col: 45, offset: 35797},
										expr: &seqExpr{
											pos: position{line: 1168, col: 46, offset: 35798},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1168, col: 46, offset: 35798},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1168, col: 52, offset: 35804},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1168, col: 66, offset: 35818},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1181, col: 3, offset: 36187},
						run: (*parser).callonTextExpr72,
						expr: &seqExpr{
							pos: position{line: 1181, col: 4, offset: 36188},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1181, col: 4, offset: 36188},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1181, col: 12, offset: 36196},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1181, col: 12, offset: 36196},
												val:        "ltrim",
												ignoreCase: false,
												want:       "\"ltrim\"",
											},
											&litMatcher{
												pos:        position{line: 1181, col: 22, offset: 36206},
												val:        "rtrim",
												ignoreCase: false,
												want:       "\"rtrim\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1181, col: 31, offset: 36215},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1181, col: 39, offset: 36223},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1181, col: 45, offset: 36229},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1181, col: 57, offset: 36241},
									label: "strToRemoveExpr",
									expr: &zeroOrOneExpr{
										pos: position{line: 1181, col: 73, offset: 36257},
										expr: &ruleRefExpr{
											pos:  position{line: 1181, col: 74, offset: 36258},
											name: "StrToRemoveExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1181, col: 92, offset: 36276},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StrToRemoveExpr",
			pos:  position{line: 1206, col: 1, offset: 36875},
			expr: &actionExpr{
				pos: position{line: 1206, col: 20, offset: 36894},
				run: (*parser).callonStrToRemoveExpr1,
				expr: &seqExpr{
					pos: position{line: 1206, col: 20, offset: 36894},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1206, col: 20, offset: 36894},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 1206, col: 26, offset: 36900},
							label: "strToRemove",
							expr: &ruleRefExpr{
								pos:  position{line: 1206, col: 38, offset: 36912},
								name: "String",
							},
						},
					},
				},
			},
		},
		{
			name: "EvalFieldToRead",
			pos:  position{line: 1212, col: 1, offset: 37097},
			expr: &choiceExpr{
				pos: position{line: 1212, col: 20, offset: 37116},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1212, col: 20, offset: 37116},
						run: (*parser).callonEvalFieldToRead2,
						expr: &seqExpr{
							pos: position{line: 1212, col: 20, offset: 37116},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 1212, col: 20, offset: 37116},
									expr: &charClassMatcher{
										pos:        position{line: 1212, col: 20, offset: 37116},
										val:        "[a-zA-Z_]",
										chars:      []rune{'_'},
										ranges:     []rune{'a', 'z', 'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&notExpr{
									pos: position{line: 1212, col: 31, offset: 37127},
									expr: &litMatcher{
										pos:        position{line: 1212, col: 33, offset: 37129},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1215, col: 3, offset: 37171},
						run: (*parser).callonEvalFieldToRead8,
						expr: &seqExpr{
							pos: position{line: 1215, col: 3, offset: 37171},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1215, col: 3, offset: 37171},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&labeledExpr{
									pos:   position{line: 1215, col: 7, offset: 37175},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1215, col: 13, offset: 37181},
										name: "FieldName",
									},
								},
								&litMatcher{
									pos:        position{line: 1215, col: 23, offset: 37191},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "WhereBlock",
			pos:  position{line: 1220, col: 1, offset: 37259},
			expr: &actionExpr{
				pos: position{line: 1220, col: 15, offset: 37273},
				run: (*parser).callonWhereBlock1,
				expr: &seqExpr{
					pos: position{line: 1220, col: 15, offset: 37273},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1220, col: 15, offset: 37273},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1220, col: 20, offset: 37278},
							name: "CMD_WHERE",
						},
						&labeledExpr{
							pos:   position{line: 1220, col: 30, offset: 37288},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 1220, col: 40, offset: 37298},
								name: "BoolExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExpr",
			pos:  position{line: 1232, col: 1, offset: 37591},
			expr: &actionExpr{
				pos: position{line: 1232, col: 13, offset: 37603},
				run: (*parser).callonBoolExpr1,
				expr: &labeledExpr{
					pos:   position{line: 1232, col: 13, offset: 37603},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 1232, col: 18, offset: 37608},
						name: "BoolExprLevel4",
					},
				},
			},
		},
		{
			name: "BoolExprLevel4",
			pos:  position{line: 1237, col: 1, offset: 37678},
			expr: &actionExpr{
				pos: position{line: 1237, col: 19, offset: 37696},
				run: (*parser).callonBoolExprLevel41,
				expr: &seqExpr{
					pos: position{line: 1237, col: 19, offset: 37696},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1237, col: 19, offset: 37696},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1237, col: 25, offset: 37702},
								name: "BoolExprLevel3",
							},
						},
						&labeledExpr{
							pos:   position{line: 1237, col: 40, offset: 37717},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1237, col: 45, offset: 37722},
								expr: &seqExpr{
									pos: position{line: 1237, col: 46, offset: 37723},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1237, col: 46, offset: 37723},
											name: "OR",
										},
										&ruleRefExpr{
											pos:  position{line: 1237, col: 49, offset: 37726},
											name: "BoolExprLevel3",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel3",
			pos:  position{line: 1257, col: 1, offset: 38164},
			expr: &actionExpr{
				pos: position{line: 1257, col: 19, offset: 38182},
				run: (*parser).callonBoolExprLevel31,
				expr: &seqExpr{
					pos: position{line: 1257, col: 19, offset: 38182},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1257, col: 19, offset: 38182},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1257, col: 25, offset: 38188},
								name: "BoolExprLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 1257, col: 40, offset: 38203},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1257, col: 45, offset: 38208},
								expr: &seqExpr{
									pos: position{line: 1257, col: 46, offset: 38209},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1257, col: 46, offset: 38209},
											name: "AND",
										},
										&ruleRefExpr{
											pos:  position{line: 1257, col: 50, offset: 38213},
											name: "BoolExprLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel2",
			pos:  position{line: 1277, col: 1, offset: 38652},
			expr: &choiceExpr{
				pos: position{line: 1277, col: 19, offset: 38670},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1277, col: 19, offset: 38670},
						run: (*parser).callonBoolExprLevel22,
						expr: &seqExpr{
							pos: position{line: 1277, col: 19, offset: 38670},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1277, col: 19, offset: 38670},
									name: "NOT",
								},
								&ruleRefExpr{
									pos:  position{line: 1277, col: 23, offset: 38674},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1277, col: 31, offset: 38682},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 1277, col: 37, offset: 38688},
										name: "BoolExprLevel1",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1277, col: 52, offset: 38703},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1287, col: 3, offset: 38906},
						run: (*parser).callonBoolExprLevel29,
						expr: &labeledExpr{
							pos:   position{line: 1287, col: 3, offset: 38906},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1287, col: 9, offset: 38912},
								name: "BoolExprLevel1",
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel1",
			pos:  position{line: 1292, col: 1, offset: 38983},
			expr: &choiceExpr{
				pos: position{line: 1292, col: 19, offset: 39001},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1292, col: 19, offset: 39001},
						run: (*parser).callonBoolExprLevel12,
						expr: &seqExpr{
							pos: position{line: 1292, col: 19, offset: 39001},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1292, col: 19, offset: 39001},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1292, col: 27, offset: 39009},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 1292, col: 33, offset: 39015},
										name: "BoolExprLevel4",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1292, col: 48, offset: 39030},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1295, col: 3, offset: 39066},
						run: (*parser).callonBoolExprLevel18,
						expr: &seqExpr{
							pos: position{line: 1295, col: 4, offset: 39067},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1295, col: 4, offset: 39067},
									label: "op",
									expr: &choiceExpr{
										pos: position{line: 1295, col: 8, offset: 39071},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1295, col: 8, offset: 39071},
												val:        "isbool",
												ignoreCase: false,
												want:       "\"isbool\"",
											},
											&litMatcher{
												pos:        position{line: 1295, col: 19, offset: 39082},
												val:        "isint",
												ignoreCase: false,
												want:       "\"isint\"",
											},
											&litMatcher{
												pos:        position{line: 1295, col: 29, offset: 39092},
												val:        "isstr",
												ignoreCase: false,
												want:       "\"isstr\"",
											},
											&litMatcher{
												pos:        position{line: 1295, col: 39, offset: 39102},
												val:        "isnull",
												ignoreCase: false,
												want:       "\"isnull\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1295, col: 49, offset: 39112},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1295, col: 57, offset: 39120},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 1295, col: 63, offset: 39126},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1295, col: 73, offset: 39136},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1308, col: 3, offset: 39472},
						run: (*parser).callonBoolExprLevel120,
						expr: &labeledExpr{
							pos:   position{line: 1308, col: 3, offset: 39472},
							label: "likeExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 1308, col: 13, offset: 39482},
								name: "LikeExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "LikeExpr",
			pos:  position{line: 1311, col: 1, offset: 39520},
			expr: &choiceExpr{
				pos: position{line: 1311, col: 13, offset: 39532},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1311, col: 13, offset: 39532},
						run: (*parser).callonLikeExpr2,
						expr: &seqExpr{
							pos: position{line: 1311, col: 13, offset: 39532},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1311, col: 13, offset: 39532},
									label: "left",
									expr: &ruleRefExpr{
										pos:  position{line: 1311, col: 18, offset: 39537},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1311, col: 28, offset: 39547},
									name: "SPACE",
								},
								&litMatcher{
									pos:        position{line: 1311, col: 34, offset: 39553},
									val:        "LIKE",
									ignoreCase: false,
									want:       "\"LIKE\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1311, col: 41, offset: 39560},
									name: "SPACE",
								},
								&labeledExpr{
									pos:   position{line: 1311, col: 47, offset: 39566},
									label: "right",
									expr: &ruleRefExpr{
										pos:  position{line: 1311, col: 53, offset: 39572},
										name: "ValueExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1320, col: 3, offset: 39792},
						run: (*parser).callonLikeExpr11,
						expr: &seqExpr{
							pos: position{line: 1320, col: 3, offset: 39792},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1320, col: 3, offset: 39792},
									val:        "like",
									ignoreCase: false,
									want:       "\"like\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1320, col: 10, offset: 39799},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1320, col: 18, offset: 39807},
									label: "stringr",
									expr: &ruleRefExpr{
										pos:  position{line: 1320, col: 26, offset: 39815},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1320, col: 36, offset: 39825},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1320, col: 42, offset: 39831},
									label: "pattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1320, col: 50, offset: 39839},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1320, col: 60, offset: 39849},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1329, col: 3, offset: 40080},
						run: (*parser).callonLikeExpr21,
						expr: &seqExpr{
							pos: position{line: 1329, col: 3, offset: 40080},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1329, col: 3, offset: 40080},
									val:        "match",
									ignoreCase: false,
									want:       "\"match\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1329, col: 11, offset: 40088},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1329, col: 19, offset: 40096},
									label: "stringVal",
									expr: &ruleRefExpr{
										pos:  position{line: 1329, col: 29, offset: 40106},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1329, col: 39, offset: 40116},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1329, col: 45, offset: 40122},
									label: "pattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1329, col: 53, offset: 40130},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1329, col: 63, offset: 40140},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1338, col: 3, offset: 40374},
						run: (*parser).callonLikeExpr31,
						expr: &seqExpr{
							pos: position{line: 1338, col: 3, offset: 40374},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1338, col: 3, offset: 40374},
									val:        "cidrmatch",
									ignoreCase: false,
									want:       "\"cidrmatch\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1338, col: 15, offset: 40386},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1338, col: 23, offset: 40394},
									label: "cidr",
									expr: &ruleRefExpr{
										pos:  position{line: 1338, col: 28, offset: 40399},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1338, col: 38, offset: 40409},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1338, col: 44, offset: 40415},
									label: "ip",
									expr: &ruleRefExpr{
										pos:  position{line: 1338, col: 47, offset: 40418},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1338, col: 57, offset: 40428},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1347, col: 3, offset: 40648},
						run: (*parser).callonLikeExpr41,
						expr: &labeledExpr{
							pos:   position{line: 1347, col: 3, offset: 40648},
							label: "inExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 1347, col: 11, offset: 40656},
								name: "InExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1350, col: 3, offset: 40692},
						run: (*parser).callonLikeExpr44,
						expr: &labeledExpr{
							pos:   position{line: 1350, col: 3, offset: 40692},
							label: "boolComparisonExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 1350, col: 22, offset: 40711},
								name: "BoolComparisonExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "BoolComparisonExpr",
			pos:  position{line: 1354, col: 1, offset: 40770},
			expr: &actionExpr{
				pos: position{line: 1354, col: 23, offset: 40792},
				run: (*parser).callonBoolComparisonExpr1,
				expr: &seqExpr{
					pos: position{line: 1354, col: 23, offset: 40792},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1354, col: 23, offset: 40792},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 1354, col: 28, offset: 40797},
								name: "ValueExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 1354, col: 38, offset: 40807},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 1354, col: 41, offset: 40810},
								name: "EqualityOrInequality",
							},
						},
						&labeledExpr{
							pos:   position{line: 1354, col: 62, offset: 40831},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 1354, col: 68, offset: 40837},
								name: "ValueExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "InExpr",
			pos:  position{line: 1366, col: 1, offset: 41063},
			expr: &choiceExpr{
				pos: position{line: 1366, col: 11, offset: 41073},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1366, col: 11, offset: 41073},
						run: (*parser).callonInExpr2,
						expr: &seqExpr{
							pos: position{line: 1366, col: 11, offset: 41073},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1366, col: 11, offset: 41073},
									label: "left",
									expr: &ruleRefExpr{
										pos:  position{line: 1366, col: 16, offset: 41078},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1366, col: 26, offset: 41088},
									name: "SPACE",
								},
								&litMatcher{
									pos:        position{line: 1366, col: 32, offset: 41094},
									val:        "in",
									ignoreCase: false,
									want:       "\"in\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1366, col: 37, offset: 41099},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1366, col: 45, offset: 41107},
									label: "valueToJudge",
									expr: &ruleRefExpr{
										pos:  position{line: 1366, col: 58, offset: 41120},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1366, col: 68, offset: 41130},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1366, col: 73, offset: 41135},
										expr: &seqExpr{
											pos: position{line: 1366, col: 74, offset: 41136},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1366, col: 74, offset: 41136},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1366, col: 80, offset: 41142},
													name: "ValueExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1366, col: 92, offset: 41154},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1385, col: 3, offset: 41705},
						run: (*parser).callonInExpr17,
						expr: &seqExpr{
							pos: position{line: 1385, col: 3, offset: 41705},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1385, col: 3, offset: 41705},
									val:        "in",
									ignoreCase: false,
									want:       "\"in\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1385, col: 8, offset: 41710},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1385, col: 16, offset: 41718},
									label: "valueToJudge",
									expr: &ruleRefExpr{
										pos:  position{line: 1385, col: 29, offset: 41731},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1385, col: 39, offset: 41741},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1385, col: 44, offset: 41746},
										expr: &seqExpr{
											pos: position{line: 1385, col: 45, offset: 41747},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1385, col: 45, offset: 41747},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1385, col: 51, offset: 41753},
													name: "ValueExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1385, col: 63, offset: 41765},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ValueExpr",
			pos:  position{line: 1410, col: 1, offset: 42555},
			expr: &choiceExpr{
				pos: position{line: 1410, col: 14, offset: 42568},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1410, col: 14, offset: 42568},
						run: (*parser).callonValueExpr2,
						expr: &labeledExpr{
							pos:   position{line: 1410, col: 14, offset: 42568},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 1410, col: 24, offset: 42578},
								name: "ConditionExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1419, col: 3, offset: 42768},
						run: (*parser).callonValueExpr5,
						expr: &seqExpr{
							pos: position{line: 1419, col: 3, offset: 42768},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1419, col: 3, offset: 42768},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1419, col: 12, offset: 42777},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 1419, col: 22, offset: 42787},
										name: "ConditionExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1419, col: 37, offset: 42802},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1428, col: 3, offset: 42986},
						run: (*parser).callonValueExpr11,
						expr: &labeledExpr{
							pos:   position{line: 1428, col: 3, offset: 42986},
							label: "numeric",
							expr: &ruleRefExpr{
								pos:  position{line: 1428, col: 11, offset: 42994},
								name: "NumericExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1437, col: 3, offset: 43174},
						run: (*parser).callonValueExpr14,
						expr: &labeledExpr{
							pos:   position{line: 1437, col: 3, offset: 43174},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 1437, col: 7, offset: 43178},
								name: "StringExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1446, col: 3, offset: 43350},
						run: (*parser).callonValueExpr17,
						expr: &seqExpr{
							pos: position{line: 1446, col: 3, offset: 43350},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1446, col: 3, offset: 43350},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1446, col: 12, offset: 43359},
									label: "str",
									expr: &ruleRefExpr{
										pos:  position{line: 1446, col: 16, offset: 43363},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1446, col: 28, offset: 43375},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1455, col: 3, offset: 43544},
						run: (*parser).callonValueExpr23,
						expr: &seqExpr{
							pos: position{line: 1455, col: 3, offset: 43544},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1455, col: 3, offset: 43544},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1455, col: 11, offset: 43552},
									label: "boolean",
									expr: &ruleRefExpr{
										pos:  position{line: 1455, col: 19, offset: 43560},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1455, col: 28, offset: 43569},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StringExpr",
			pos:  position{line: 1465, col: 1, offset: 43740},
			expr: &choiceExpr{
				pos: position{line: 1465, col: 15, offset: 43754},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1465, col: 15, offset: 43754},
						run: (*parser).callonStringExpr2,
						expr: &seqExpr{
							pos: position{line: 1465, col: 15, offset: 43754},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1465, col: 15, offset: 43754},
									label: "text",
									expr: &ruleRefExpr{
										pos:  position{line: 1465, col: 20, offset: 43759},
										name: "TextExpr",
									},
								},
								&notExpr{
									pos: position{line: 1465, col: 29, offset: 43768},
									expr: &ruleRefExpr{
										pos:  position{line: 1465, col: 31, offset: 43770},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1473, col: 3, offset: 43940},
						run: (*parser).callonStringExpr8,
						expr: &seqExpr{
							pos: position{line: 1473, col: 3, offset: 43940},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1473, col: 3, offset: 43940},
									label: "str",
									expr: &ruleRefExpr{
										pos:  position{line: 1473, col: 7, offset: 43944},
										name: "QuotedString",
									},
								},
								&notExpr{
									pos: position{line: 1473, col: 20, offset: 43957},
									expr: &ruleRefExpr{
										pos:  position{line: 1473, col: 22, offset: 43959},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1481, col: 3, offset: 44124},
						run: (*parser).callonStringExpr14,
						expr: &seqExpr{
							pos: position{line: 1481, col: 3, offset: 44124},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1481, col: 3, offset: 44124},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1481, col: 9, offset: 44130},
										name: "EvalFieldToRead",
									},
								},
								&notExpr{
									pos: position{line: 1481, col: 25, offset: 44146},
									expr: &choiceExpr{
										pos: position{line: 1481, col: 27, offset: 44148},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 1481, col: 27, offset: 44148},
												name: "OpPlus",
											},
											&ruleRefExpr{
												pos:  position{line: 1481, col: 36, offset: 44157},
												name: "OpMinus",
											},
											&ruleRefExpr{
												pos:  position{line: 1481, col: 46, offset: 44167},
												name: "OpMul",
											},
											&ruleRefExpr{
												pos:  position{line: 1481, col: 54, offset: 44175},
												name: "OpDiv",
											},
											&ruleRefExpr{
												pos:  position{line: 1481, col: 62, offset: 44183},
												name: "EVAL_CONCAT",
											},
											&litMatcher{
												pos:        position{line: 1481, col: 76, offset: 44197},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1489, col: 3, offset: 44347},
						run: (*parser).callonStringExpr26,
						expr: &labeledExpr{
							pos:   position{line: 1489, col: 3, offset: 44347},
							label: "concat",
							expr: &ruleRefExpr{
								pos:  position{line: 1489, col: 10, offset: 44354},
								name: "ConcatExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "ConcatExpr",
			pos:  position{line: 1499, col: 1, offset: 44560},
			expr: &actionExpr{
				pos: position{line: 1499, col: 15, offset: 44574},
				run: (*parser).callonConcatExpr1,
				expr: &seqExpr{
					pos: position{line: 1499, col: 15, offset: 44574},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1499, col: 15, offset: 44574},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1499, col: 21, offset: 44580},
								name: "ConcatAtom",
							},
						},
						&labeledExpr{
							pos:   position{line: 1499, col: 32, offset: 44591},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1499, col: 37, offset: 44596},
								expr: &seqExpr{
									pos: position{line: 1499, col: 38, offset: 44597},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1499, col: 38, offset: 44597},
											name: "EVAL_CONCAT",
										},
										&ruleRefExpr{
											pos:  position{line: 1499, col: 50, offset: 44609},
											name: "ConcatAtom",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 1499, col: 63, offset: 44622},
							expr: &choiceExpr{
								pos: position{line: 1499, col: 65, offset: 44624},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1499, col: 65, offset: 44624},
										name: "OpPlus",
									},
									&ruleRefExpr{
										pos:  position{line: 1499, col: 74, offset: 44633},
										name: "OpMinus",
									},
									&ruleRefExpr{
										pos:  position{line: 1499, col: 84, offset: 44643},
										name: "OpMul",
									},
									&ruleRefExpr{
										pos:  position{line: 1499, col: 92, offset: 44651},
										name: "OpDiv",
									},
									&litMatcher{
										pos:        position{line: 1499, col: 100, offset: 44659},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcatAtom",
			pos:  position{line: 1517, col: 1, offset: 45065},
			expr: &choiceExpr{
				pos: position{line: 1517, col: 15, offset: 45079},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1517, col: 15, offset: 45079},
						run: (*parser).callonConcatAtom2,
						expr: &labeledExpr{
							pos:   position{line: 1517, col: 15, offset: 45079},
							label: "text",
							expr: &ruleRefExpr{
								pos:  position{line: 1517, col: 20, offset: 45084},
								name: "TextExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1526, col: 3, offset: 45248},
						run: (*parser).callonConcatAtom5,
						expr: &labeledExpr{
							pos:   position{line: 1526, col: 3, offset: 45248},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 1526, col: 7, offset: 45252},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1534, col: 3, offset: 45391},
						run: (*parser).callonConcatAtom8,
						expr: &labeledExpr{
							pos:   position{line: 1534, col: 3, offset: 45391},
							label: "number",
							expr: &ruleRefExpr{
								pos:  position{line: 1534, col: 10, offset: 45398},
								name: "NumberAsString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1542, col: 3, offset: 45537},
						run: (*parser).callonConcatAtom11,
						expr: &labeledExpr{
							pos:   position{line: 1542, col: 3, offset: 45537},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1542, col: 9, offset: 45543},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExpr",
			pos:  position{line: 1552, col: 1, offset: 45712},
			expr: &actionExpr{
				pos: position{line: 1552, col: 16, offset: 45727},
				run: (*parser).callonNumericExpr1,
				expr: &seqExpr{
					pos: position{line: 1552, col: 16, offset: 45727},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1552, col: 16, offset: 45727},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 1552, col: 21, offset: 45732},
								name: "NumericExprLevel3",
							},
						},
						&notExpr{
							pos: position{line: 1552, col: 39, offset: 45750},
							expr: &choiceExpr{
								pos: position{line: 1552, col: 41, offset: 45752},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1552, col: 41, offset: 45752},
										name: "EVAL_CONCAT",
									},
									&litMatcher{
										pos:        position{line: 1552, col: 55, offset: 45766},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel3",
			pos:  position{line: 1557, col: 1, offset: 45831},
			expr: &actionExpr{
				pos: position{line: 1557, col: 22, offset: 45852},
				run: (*parser).callonNumericExprLevel31,
				expr: &seqExpr{
					pos: position{line: 1557, col: 22, offset: 45852},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1557, col: 22, offset: 45852},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1557, col: 28, offset: 45858},
								name: "NumericExprLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 1557, col: 46, offset: 45876},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1557, col: 51, offset: 45881},
								expr: &seqExpr{
									pos: position{line: 1557, col: 52, offset: 45882},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 1557, col: 53, offset: 45883},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 1557, col: 53, offset: 45883},
													name: "OpPlus",
												},
												&ruleRefExpr{
													pos:  position{line: 1557, col: 62, offset: 45892},
													name: "OpMinus",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1557, col: 71, offset: 45901},
											name: "NumericExprLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel2",
			pos:  position{line: 1578, col: 1, offset: 46402},
			expr: &actionExpr{
				pos: position{line: 1578, col: 22, offset: 46423},
				run: (*parser).callonNumericExprLevel21,
				expr: &seqExpr{
					pos: position{line: 1578, col: 22, offset: 46423},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1578, col: 22, offset: 46423},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1578, col: 28, offset: 46429},
								name: "NumericExprLevel1",
							},
						},
						&labeledExpr{
							pos:   position{line: 1578, col: 46, offset: 46447},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1578, col: 51, offset: 46452},
								expr: &seqExpr{
									pos: position{line: 1578, col: 52, offset: 46453},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 1578, col: 53, offset: 46454},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 1578, col: 53, offset: 46454},
													name: "OpMul",
												},
												&ruleRefExpr{
													pos:  position{line: 1578, col: 61, offset: 46462},
													name: "OpDiv",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1578, col: 68, offset: 46469},
											name: "NumericExprLevel1",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RoundPrecisionExpr",
			pos:  position{line: 1598, col: 1, offset: 46938},
			expr: &actionExpr{
				pos: position{line: 1598, col: 23, offset: 46960},
				run: (*parser).callonRoundPrecisionExpr1,
				expr: &seqExpr{
					pos: position{line: 1598, col: 23, offset: 46960},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1598, col: 23, offset: 46960},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 1598, col: 29, offset: 46966},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 1598, col: 34, offset: 46971},
								name: "NumericExprLevel3",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel1",
			pos:  position{line: 1608, col: 1, offset: 47215},
			expr: &choiceExpr{
				pos: position{line: 1608, col: 22, offset: 47236},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1608, col: 22, offset: 47236},
						run: (*parser).callonNumericExprLevel12,
						expr: &seqExpr{
							pos: position{line: 1608, col: 22, offset: 47236},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1608, col: 22, offset: 47236},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1608, col: 30, offset: 47244},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1608, col: 35, offset: 47249},
										name: "NumericExprLevel3",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1608, col: 53, offset: 47267},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1611, col: 3, offset: 47302},
						run: (*parser).callonNumericExprLevel18,
						expr: &labeledExpr{
							pos:   position{line: 1611, col: 3, offset: 47302},
							label: "numericEvalExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 1611, col: 20, offset: 47319},
								name: "NumericEvalExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1614, col: 3, offset: 47373},
						run: (*parser).callonNumericExprLevel111,
						expr: &labeledExpr{
							pos:   position{line: 1614, col: 3, offset: 47373},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1614, col: 9, offset: 47379},
								name: "EvalFieldToRead",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1624, col: 3, offset: 47598},
						run: (*parser).callonNumericExprLevel114,
						expr: &labeledExpr{
							pos:   position{line: 1624, col: 3, offset: 47598},
							label: "number",
							expr: &ruleRefExpr{
								pos:  position{line: 1624, col: 10, offset: 47605},
								name: "NumberAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericEvalExpr",
			pos:  position{line: 1636, col: 1, offset: 47863},
			expr: &choiceExpr{
				pos: position{line: 1636, col: 20, offset: 47882},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1636, col: 20, offset: 47882},
						run: (*parser).callonNumericEvalExpr2,
						expr: &seqExpr{
							pos: position{line: 1636, col: 21, offset: 47883},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1636, col: 21, offset: 47883},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1636, col: 29, offset: 47891},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1636, col: 29, offset: 47891},
												val:        "abs",
												ignoreCase: false,
												want:       "\"abs\"",
											},
											&litMatcher{
												pos:        position{line: 1636, col: 37, offset: 47899},
												val:        "ceil",
												ignoreCase: false,
												want:       "\"ceil\"",
											},
											&litMatcher{
												pos:        position{line: 1636, col: 46, offset: 47908},
												val:        "sqrt",
												ignoreCase: false,
												want:       "\"sqrt\"",
											},
											&litMatcher{
												pos:        position{line: 1636, col: 54, offset: 47916},
												val:        "exact",
												ignoreCase: false,
												want:       "\"exact\"",
											},
											&litMatcher{
												pos:        position{line: 1636, col: 63, offset: 47925},
												val:        "exp",
												ignoreCase: false,
												want:       "\"exp\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1636, col: 70, offset: 47932},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1636, col: 78, offset: 47940},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1636, col: 84, offset: 47946},
										name: "NumericExprLevel3",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1636, col: 103, offset: 47965},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1656, col: 3, offset: 48477},
						run: (*parser).callonNumericEvalExpr15,
						expr: &seqExpr{
							pos: position{line: 1656, col: 3, offset: 48477},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1656, col: 3, offset: 48477},
									label: "roundExpr",
									expr: &litMatcher{
										pos:        position{line: 1656, col: 13, offset: 48487},
										val:        "round",
										ignoreCase: false,
										want:       "\"round\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1656, col: 21, offset: 48495},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1656, col: 29, offset: 48503},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1656, col: 35, offset: 48509},
										name: "NumericExprLevel3",
									},
								},
								&labeledExpr{
									pos:   position{line: 1656, col: 54, offset: 48528},
									label: "roundPrecision",
									expr: &zeroOrOneExpr{
										pos: position{line: 1656, col: 69, offset: 48543},
										expr: &ruleRefExpr{
											pos:  position{line: 1656, col: 70, offset: 48544},
											name: "RoundPrecisionExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1656, col: 91, offset: 48565},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1677, col: 3, offset: 49183},
						run: (*parser).callonNumericEvalExpr26,
						expr: &seqExpr{
							pos: position{line: 1677, col: 3, offset: 49183},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1677, col: 3, offset: 49183},
									val:        "now",
									ignoreCase: false,
									want:       "\"now\"",
								},
								&litMatcher{
									pos:        position{line: 1677, col: 9, offset: 49189},
									val:        "()",
									ignoreCase: false,
									want:       "\"()\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1683, col: 3, offset: 49297},
						run: (*parser).callonNumericEvalExpr30,
						expr: &seqExpr{
							pos: position{line: 1683, col: 3, offset: 49297},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1683, col: 3, offset: 49297},
									val:        "tonumber",
									ignoreCase: false,
									want:       "\"tonumber\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1683, col: 14, offset: 49308},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1683, col: 22, offset: 49316},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1683, col: 33, offset: 49327},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1683, col: 44, offset: 49338},
									label: "baseExpr",
									expr: &zeroOrOneExpr{
										pos: position{line: 1683, col: 53, offset: 49347},
										expr: &seqExpr{
											pos: position{line: 1683, col: 54, offset: 49348},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1683, col: 54, offset: 49348},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1683, col: 60, offset: 49354},
													name: "NumericExprLevel3",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1683, col: 80, offset: 49374},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1711, col: 3, offset: 50216},
						run: (*parser).callonNumericEvalExpr42,
						expr: &seqExpr{
							pos: position{line: 1711, col: 3, offset: 50216},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1711, col: 3, offset: 50216},
									label: "lenExpr",
									expr: &litMatcher{
										pos:        position{line: 1711, col: 12, offset: 50225},
										val:        "len",
										ignoreCase: false,
										want:       "\"len\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1711, col: 18, offset: 50231},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1711, col: 26, offset: 50239},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1711, col: 31, offset: 50244},
										name: "LenExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1711, col: 39, offset: 50252},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LenExpr",
			pos:  position{line: 1715, col: 1, offset: 50286},
			expr: &choiceExpr{
				pos: position{line: 1715, col: 12, offset: 50297},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1715, col: 12, offset: 50297},
						run: (*parser).callonLenExpr2,
						expr: &seqExpr{
							pos: position{line: 1715, col: 12, offset: 50297},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1715, col: 12, offset: 50297},
									label: "str",
									expr: &ruleRefExpr{
										pos:  position{line: 1715, col: 16, offset: 50301},
										name: "QuotedString",
									},
								},
								&notExpr{
									pos: position{line: 1715, col: 29, offset: 50314},
									expr: &ruleRefExpr{
										pos:  position{line: 1715, col: 31, offset: 50316},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1731, col: 3, offset: 50677},
						run: (*parser).callonLenExpr8,
						expr: &seqExpr{
							pos: position{line: 1731, col: 3, offset: 50677},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1731, col: 3, offset: 50677},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1731, col: 9, offset: 50683},
										name: "EvalFieldToRead",
									},
								},
								&notExpr{
									pos: position{line: 1731, col: 25, offset: 50699},
									expr: &choiceExpr{
										pos: position{line: 1731, col: 27, offset: 50701},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 1731, col: 27, offset: 50701},
												name: "OpPlus",
											},
											&ruleRefExpr{
												pos:  position{line: 1731, col: 36, offset: 50710},
												name: "OpMinus",
											},
											&ruleRefExpr{
												pos:  position{line: 1731, col: 46, offset: 50720},
												name: "OpMul",
											},
											&ruleRefExpr{
												pos:  position{line: 1731, col: 54, offset: 50728},
												name: "OpDiv",
											},
											&ruleRefExpr{
												pos:  position{line: 1731, col: 62, offset: 50736},
												name: "EVAL_CONCAT",
											},
											&litMatcher{
												pos:        position{line: 1731, col: 76, offset: 50750},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HeadBlock",
			pos:  position{line: 1749, col: 1, offset: 51138},
			expr: &choiceExpr{
				pos: position{line: 1749, col: 14, offset: 51151},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1749, col: 14, offset: 51151},
						run: (*parser).callonHeadBlock2,
						expr: &seqExpr{
							pos: position{line: 1749, col: 14, offset: 51151},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1749, col: 14, offset: 51151},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 1749, col: 19, offset: 51156},
									name: "CMD_HEAD",
								},
								&zeroOrOneExpr{
									pos: position{line: 1749, col: 28, offset: 51165},
									expr: &seqExpr{
										pos: position{line: 1749, col: 29, offset: 51166},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 1749, col: 29, offset: 51166},
												val:        "limit",
												ignoreCase: false,
												want:       "\"limit\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1749, col: 37, offset: 51174},
												name: "EQUAL",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1749, col: 45, offset: 51182},
									label: "intAsStr",
									expr: &ruleRefExpr{
										pos:  position{line: 1749, col: 54, offset: 51191},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1764, col: 3, offset: 51607},
						run: (*parser).callonHeadBlock12,
						expr: &seqExpr{
							pos: position{line: 1764, col: 3, offset: 51607},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1764, col: 3, offset: 51607},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 1764, col: 8, offset: 51612},
									name: "CMD_HEAD_NO_SPACE",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggregationList",
			pos:  position{line: 1777, col: 1, offset: 52062},
			expr: &actionExpr{
				pos: position{line: 1777, col: 20, offset: 52081},
				run: (*parser).callonAggregationList1,
				expr: &seqExpr{
					pos: position{line: 1777, col: 20, offset: 52081},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1777, col: 20, offset: 52081},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1777, col: 26, offset: 52087},
								name: "Aggregator",
							},
						},
						&labeledExpr{
							pos:   position{line: 1777, col: 37, offset: 52098},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1777, col: 42, offset: 52103},
								expr: &seqExpr{
									pos: position{line: 1777, col: 43, offset: 52104},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 1777, col: 44, offset: 52105},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 1777, col: 44, offset: 52105},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1777, col: 52, offset: 52113},
													name: "SPACE",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1777, col: 59, offset: 52120},
											name: "Aggregator",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Aggregator",
			pos:  position{line: 1794, col: 1, offset: 52623},
			expr: &actionExpr{
				pos: position{line: 1794, col: 15, offset: 52637},
				run: (*parser).callonAggregator1,
				expr: &seqExpr{
					pos: position{line: 1794, col: 15, offset: 52637},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1794, col: 15, offset: 52637},
							label: "aggFunc",
							expr: &ruleRefExpr{
								pos:  position{line: 1794, col: 23, offset: 52645},
								name: "AggFunction",
							},
						},
						&labeledExpr{
							pos:   position{line: 1794, col: 35, offset: 52657},
							label: "asField",
							expr: &zeroOrOneExpr{
								pos: position{line: 1794, col: 43, offset: 52665},
								expr: &ruleRefExpr{
									pos:  position{line: 1794, col: 43, offset: 52665},
									name: "AsField",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggFunction",
			pos:  position{line: 1810, col: 1, offset: 53506},
			expr: &actionExpr{
				pos: position{line: 1810, col: 16, offset: 53521},
				run: (*parser).callonAggFunction1,
				expr: &labeledExpr{
					pos:   position{line: 1810, col: 16, offset: 53521},
					label: "agg",
					expr: &choiceExpr{
						pos: position{line: 1810, col: 21, offset: 53526},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1810, col: 21, offset: 53526},
								name: "AggCount",
							},
							&ruleRefExpr{
								pos:  position{line: 1810, col: 32, offset: 53537},
								name: "AggDistinctCount",
							},
							&ruleRefExpr{
								pos:  position{line: 1810, col: 51, offset: 53556},
								name: "AggAvg",
							},
							&ruleRefExpr{
								pos:  position{line: 1810, col: 60, offset: 53565},
								name: "AggMin",
							},
							&ruleRefExpr{
								pos:  position{line: 1810, col: 69, offset: 53574},
								name: "AggMax",
							},
							&ruleRefExpr{
								pos:  position{line: 1810, col: 78, offset: 53583},
								name: "AggRange",
							},
							&ruleRefExpr{
								pos:  position{line: 1810, col: 89, offset: 53594},
								name: "AggSum",
							},
							&ruleRefExpr{
								pos:  position{line: 1810, col: 98, offset: 53603},
								name: "AggValues",
							},
						},
					},
				},
			},
		},
		{
			name: "AsField",
			pos:  position{line: 1814, col: 1, offset: 53639},
			expr: &actionExpr{
				pos: position{line: 1814, col: 12, offset: 53650},
				run: (*parser).callonAsField1,
				expr: &seqExpr{
					pos: position{line: 1814, col: 12, offset: 53650},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1814, col: 12, offset: 53650},
							name: "AS",
						},
						&labeledExpr{
							pos:   position{line: 1814, col: 15, offset: 53653},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1814, col: 21, offset: 53659},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "AggCount",
			pos:  position{line: 1824, col: 1, offset: 53866},
			expr: &choiceExpr{
				pos: position{line: 1824, col: 13, offset: 53878},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1824, col: 13, offset: 53878},
						run: (*parser).callonAggCount2,
						expr: &seqExpr{
							pos: position{line: 1824, col: 13, offset: 53878},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 1824, col: 14, offset: 53879},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 1824, col: 14, offset: 53879},
											val:        "count",
											ignoreCase: false,
											want:       "\"count\"",
										},
										&litMatcher{
											pos:        position{line: 1824, col: 24, offset: 53889},
											val:        "c",
											ignoreCase: false,
											want:       "\"c\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1824, col: 29, offset: 53894},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 1824, col: 37, offset: 53902},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 1824, col: 44, offset: 53909},
									label: "boolExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1824, col: 53, offset: 53918},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1824, col: 62, offset: 53927},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1839, col: 3, offset: 54277},
						run: (*parser).callonAggCount12,
						expr: &seqExpr{
							pos: position{line: 1839, col: 3, offset: 54277},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 1839, col: 4, offset: 54278},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 1839, col: 4, offset: 54278},
											val:        "count",
											ignoreCase: false,
											want:       "\"count\"",
										},
										&litMatcher{
											pos:        position{line: 1839, col: 14, offset: 54288},
											val:        "c",
											ignoreCase: false,
											want:       "\"c\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1839, col: 19, offset: 54293},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1839, col: 27, offset: 54301},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1839, col: 33, offset: 54307},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1839, col: 43, offset: 54317},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1846, col: 5, offset: 54468},
						run: (*parser).callonAggCount21,
						expr: &choiceExpr{
							pos: position{line: 1846, col: 6, offset: 54469},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 1846, col: 6, offset: 54469},
									val:        "count",
									ignoreCase: false,
									want:       "\"count\"",
								},
								&litMatcher{
									pos:        position{line: 1846, col: 16, offset: 54479},
									val:        "c",
									ignoreCase: false,
									want:       "\"c\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggDistinctCount",
			pos:  position{line: 1855, col: 1, offset: 54615},
			expr: &choiceExpr{
				pos: position{line: 1855, col: 21, offset: 54635},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1855, col: 21, offset: 54635},
						run: (*parser).callonAggDistinctCount2,
						expr: &seqExpr{
							pos: position{line: 1855, col: 21, offset: 54635},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 1855, col: 22, offset: 54636},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 1855, col: 22, offset: 54636},
											val:        "distinct_count",
											ignoreCase: false,
											want:       "\"distinct_count\"",
										},
										&litMatcher{
											pos:        position{line: 1855, col: 41, offset: 54655},
											val:        "dc",
											ignoreCase: false,
											want:       "\"dc\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1855, col: 47, offset: 54661},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 1855, col: 55, offset: 54669},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 1855, col: 62, offset: 54676},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1855, col: 72, offset: 54686},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1855, col: 82, offset: 54696},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1865, col: 3, offset: 54930},
						run: (*parser).callonAggDistinctCount12,
						expr: &seqExpr{
							pos: position{line: 1865, col: 3, offset: 54930},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 1865, col: 4, offset: 54931},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 1865, col: 4, offset: 54931},
											val:        "distinct_count",
											ignoreCase: false,
											want:       "\"distinct_count\"",
										},
										&litMatcher{
											pos:        position{line: 1865, col: 23, offset: 54950},
											val:        "dc",
											ignoreCase: false,
											want:       "\"dc\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1865, col: 29, offset: 54956},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1865, col: 37, offset: 54964},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1865, col: 43, offset: 54970},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1865, col: 53, offset: 54980},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAvg",
			pos:  position{line: 1874, col: 1, offset: 55136},
			expr: &choiceExpr{
				pos: position{line: 1874, col: 11, offset: 55146},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1874, col: 11, offset: 55146},
						run: (*parser).callonAggAvg2,
						expr: &seqExpr{
							pos: position{line: 1874, col: 11, offset: 55146},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1874, col: 11, offset: 55146},
									val:        "avg",
									ignoreCase: false,
									want:       "\"avg\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1874, col: 17, offset: 55152},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 1874, col: 25, offset: 55160},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1874, col: 32, offset: 55167},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1874, col: 40, offset: 55175},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1874, col: 59, offset: 55194},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1874, col: 78, offset: 55213},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 1874, col: 86, offset: 55221},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1889, col: 3, offset: 55579},
						run: (*parser).callonAggAvg12,
						expr: &seqExpr{
							pos: position{line: 1889, col: 3, offset: 55579},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1889, col: 3, offset: 55579},
									val:        "avg",
									ignoreCase: false,
									want:       "\"avg\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1889, col: 9, offset: 55585},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1889, col: 17, offset: 55593},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1889, col: 23, offset: 55599},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1889, col: 33, offset: 55609},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMin",
			pos:  position{line: 1898, col: 1, offset: 55757},
			expr: &choiceExpr{
				pos: position{line: 1898, col: 11, offset: 55767},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1898, col: 11, offset: 55767},
						run: (*parser).callonAggMin2,
						expr: &seqExpr{
							pos: position{line: 1898, col: 11, offset: 55767},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1898, col: 11, offset: 55767},
									val:        "min",
									ignoreCase: false,
									want:       "\"min\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1898, col: 17, offset: 55773},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 1898, col: 25, offset: 55781},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1898, col: 32, offset: 55788},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1898, col: 40, offset: 55796},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1898, col: 59, offset: 55815},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1898, col: 78, offset: 55834},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 1898, col: 86, offset: 55842},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1913, col: 3, offset: 56200},
						run: (*parser).callonAggMin12,
						expr: &seqExpr{
							pos: position{line: 1913, col: 3, offset: 56200},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1913, col: 3, offset: 56200},
									val:        "min",
									ignoreCase: false,
									want:       "\"min\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1913, col: 9, offset: 56206},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1913, col: 17, offset: 56214},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1913, col: 23, offset: 56220},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1913, col: 33, offset: 56230},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMax",
			pos:  position{line: 1922, col: 1, offset: 56378},
			expr: &choiceExpr{
				pos: position{line: 1922, col: 11, offset: 56388},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1922, col: 11, offset: 56388},
						run: (*parser).callonAggMax2,
						expr: &seqExpr{
							pos: position{line: 1922, col: 11, offset: 56388},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1922, col: 11, offset: 56388},
									val:        "max",
									ignoreCase: false,
									want:       "\"max\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1922, col: 17, offset: 56394},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 1922, col: 25, offset: 56402},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1922, col: 32, offset: 56409},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1922, col: 41, offset: 56418},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1922, col: 60, offset: 56437},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1922, col: 79, offset: 56456},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 1922, col: 87, offset: 56464},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1937, col: 3, offset: 56822},
						run: (*parser).callonAggMax12,
						expr: &seqExpr{
							pos: position{line: 1937, col: 3, offset: 56822},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1937, col: 3, offset: 56822},
									val:        "max",
									ignoreCase: false,
									want:       "\"max\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1937, col: 9, offset: 56828},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1937, col: 17, offset: 56836},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1937, col: 23, offset: 56842},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1937, col: 33, offset: 56852},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggRange",
			pos:  position{line: 1946, col: 1, offset: 57000},
			expr: &choiceExpr{
				pos: position{line: 1946, col: 13, offset: 57012},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1946, col: 13, offset: 57012},
						run: (*parser).callonAggRange2,
						expr: &seqExpr{
							pos: position{line: 1946, col: 13, offset: 57012},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1946, col: 13, offset: 57012},
									val:        "range",
									ignoreCase: false,
									want:       "\"range\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1946, col: 21, offset: 57020},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 1946, col: 29, offset: 57028},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1946, col: 36, offset: 57035},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1946, col: 44, offset: 57043},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1946, col: 63, offset: 57062},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1946, col: 82, offset: 57081},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 1946, col: 90, offset: 57089},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1961, col: 3, offset: 57449},
						run: (*parser).callonAggRange12,
						expr: &seqExpr{
							pos: position{line: 1961, col: 3, offset: 57449},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1961, col: 3, offset: 57449},
									val:        "range",
									ignoreCase: false,
									want:       "\"range\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1961, col: 11, offset: 57457},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1961, col: 19, offset: 57465},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1961, col: 25, offset: 57471},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1961, col: 35, offset: 57481},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggSum",
			pos:  position{line: 1970, col: 1, offset: 57631},
			expr: &choiceExpr{
				pos: position{line: 1970, col: 11, offset: 57641},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1970, col: 11, offset: 57641},
						run: (*parser).callonAggSum2,
						expr: &seqExpr{
							pos: position{line: 1970, col: 11, offset: 57641},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1970, col: 11, offset: 57641},
									val:        "sum",
									ignoreCase: false,
									want:       "\"sum\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1970, col: 17, offset: 57647},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 1970, col: 25, offset: 57655},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1970, col: 32, offset: 57662},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1970, col: 40, offset: 57670},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1970, col: 59, offset: 57689},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1970, col: 78, offset: 57708},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 1970, col: 86, offset: 57716},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1985, col: 3, offset: 58074},
						run: (*parser).callonAggSum12,
						expr: &seqExpr{
							pos: position{line: 1985, col: 3, offset: 58074},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1985, col: 3, offset: 58074},
									val:        "sum",
									ignoreCase: false,
									want:       "\"sum\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1985, col: 9, offset: 58080},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1985, col: 17, offset: 58088},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1985, col: 23, offset: 58094},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1985, col: 33, offset: 58104},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggValues",
			pos:  position{line: 1994, col: 1, offset: 58252},
			expr: &choiceExpr{
				pos: position{line: 1994, col: 14, offset: 58265},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1994, col: 14, offset: 58265},
						run: (*parser).callonAggValues2,
						expr: &seqExpr{
							pos: position{line: 1994, col: 14, offset: 58265},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1994, col: 14, offset: 58265},
									val:        "values",
									ignoreCase: false,
									want:       "\"values\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1994, col: 23, offset: 58274},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 1994, col: 31, offset: 58282},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 1994, col: 38, offset: 58289},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1994, col: 48, offset: 58299},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1994, col: 58, offset: 58309},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2004, col: 3, offset: 58538},
						run: (*parser).callonAggValues10,
						expr: &seqExpr{
							pos: position{line: 2004, col: 3, offset: 58538},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2004, col: 3, offset: 58538},
									val:        "values",
									ignoreCase: false,
									want:       "\"values\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2004, col: 12, offset: 58547},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2004, col: 20, offset: 58555},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2004, col: 26, offset: 58561},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2004, col: 36, offset: 58571},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldWithNumberValue",
			pos:  position{line: 2013, col: 1, offset: 58722},
			expr: &actionExpr{
				pos: position{line: 2013, col: 25, offset: 58746},
				run: (*parser).callonFieldWithNumberValue1,
				expr: &labeledExpr{
					pos:   position{line: 2013, col: 25, offset: 58746},
					label: "keyValuePair",
					expr: &choiceExpr{
						pos: position{line: 2013, col: 39, offset: 58760},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 2013, col: 39, offset: 58760},
								name: "NamedFieldWithNumberValue",
							},
							&ruleRefExpr{
								pos:  position{line: 2013, col: 67, offset: 58788},
								name: "UnnamedFieldWithNumberValue",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedFieldWithNumberValue",
			pos:  position{line: 2017, col: 1, offset: 58851},
			expr: &actionExpr{
				pos: position{line: 2017, col: 30, offset: 58880},
				run: (*parser).callonNamedFieldWithNumberValue1,
				expr: &seqExpr{
					pos: position{line: 2017, col: 30, offset: 58880},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2017, col: 30, offset: 58880},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 2017, col: 34, offset: 58884},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 2017, col: 44, offset: 58894},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 2017, col: 48, offset: 58898},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 2017, col: 48, offset: 58898},
										name: "EqualityOperator",
									},
									&ruleRefExpr{
										pos:  position{line: 2017, col: 67, offset: 58917},
										name: "InequalityOperator",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2017, col: 87, offset: 58937},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 2017, col: 93, offset: 58943},
								name: "Number",
							},
						},
					},
				},
			},
		},
		{
			name: "UnnamedFieldWithNumberValue",
			pos:  position{line: 2030, col: 1, offset: 59177},
			expr: &actionExpr{
				pos: position{line: 2030, col: 32, offset: 59208},
				run: (*parser).callonUnnamedFieldWithNumberValue1,
				expr: &labeledExpr{
					pos:   position{line: 2030, col: 32, offset: 59208},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 2030, col: 38, offset: 59214},
						name: "Number",
					},
				},
			},
		},
		{
			name: "FieldWithBooleanValue",
			pos:  position{line: 2043, col: 1, offset: 59431},
			expr: &actionExpr{
				pos: position{line: 2043, col: 26, offset: 59456},
				run: (*parser).callonFieldWithBooleanValue1,
				expr: &seqExpr{
					pos: position{line: 2043, col: 26, offset: 59456},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2043, col: 26, offset: 59456},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 2043, col: 30, offset: 59460},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 2043, col: 40, offset: 59470},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 2043, col: 43, offset: 59473},
								name: "EqualityOperator",
							},
						},
						&labeledExpr{
							pos:   position{line: 2043, col: 60, offset: 59490},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 2043, col: 66, offset: 59496},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldWithStringValue",
			pos:  position{line: 2056, col: 1, offset: 59731},
			expr: &actionExpr{
				pos: position{line: 2056, col: 25, offset: 59755},
				run: (*parser).callonFieldWithStringValue1,
				expr: &labeledExpr{
					pos:   position{line: 2056, col: 25, offset: 59755},
					label: "keyValuePair",
					expr: &choiceExpr{
						pos: position{line: 2056, col: 39, offset: 59769},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 2056, col: 39, offset: 59769},
								name: "NamedFieldWithStringValue",
							},
							&ruleRefExpr{
								pos:  position{line: 2056, col: 67, offset: 59797},
								name: "UnnamedFieldWithStringValue",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedFieldWithStringValue",
			pos:  position{line: 2060, col: 1, offset: 59860},
			expr: &actionExpr{
				pos: position{line: 2060, col: 30, offset: 59889},
				run: (*parser).callonNamedFieldWithStringValue1,
				expr: &seqExpr{
					pos: position{line: 2060, col: 30, offset: 59889},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2060, col: 30, offset: 59889},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 2060, col: 34, offset: 59893},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 2060, col: 44, offset: 59903},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 2060, col: 47, offset: 59906},
								name: "EqualityOperator",
							},
						},
						&labeledExpr{
							pos:   position{line: 2060, col: 64, offset: 59923},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 2060, col: 70, offset: 59929},
								name: "String",
							},
						},
					},
				},
			},
		},
		{
			name: "UnnamedFieldWithStringValue",
			pos:  position{line: 2072, col: 1, offset: 60162},
			expr: &actionExpr{
				pos: position{line: 2072, col: 32, offset: 60193},
				run: (*parser).callonUnnamedFieldWithStringValue1,
				expr: &labeledExpr{
					pos:   position{line: 2072, col: 32, offset: 60193},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 2072, col: 38, offset: 60199},
						name: "String",
					},
				},
			},
		},
		{
			name: "FieldNameList",
			pos:  position{line: 2086, col: 1, offset: 60530},
			expr: &actionExpr{
				pos: position{line: 2086, col: 18, offset: 60547},
				run: (*parser).callonFieldNameList1,
				expr: &seqExpr{
					pos: position{line: 2086, col: 18, offset: 60547},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2086, col: 18, offset: 60547},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2086, col: 24, offset: 60553},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 2086, col: 34, offset: 60563},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2086, col: 39, offset: 60568},
								expr: &seqExpr{
									pos: position{line: 2086, col: 40, offset: 60569},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 2086, col: 40, offset: 60569},
											name: "COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 2086, col: 46, offset: 60575},
											name: "FieldName",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 2106, col: 1, offset: 61338},
			expr: &actionExpr{
				pos: position{line: 2106, col: 14, offset: 61351},
				run: (*parser).callonFieldName1,
				expr: &seqExpr{
					pos: position{line: 2106, col: 14, offset: 61351},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 2106, col: 14, offset: 61351},
							val:        "[a-zA-Z0-9:*]",
							chars:      []rune{':', '*'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 2106, col: 27, offset: 61364},
							expr: &charClassMatcher{
								pos:        position{line: 2106, col: 27, offset: 61364},
								val:        "[a-zA-Z0-9:_.*]",
								chars:      []rune{':', '_', '.', '*'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "String",
			pos:  position{line: 2110, col: 1, offset: 61417},
			expr: &actionExpr{
				pos: position{line: 2110, col: 11, offset: 61427},
				run: (*parser).callonString1,
				expr: &labeledExpr{
					pos:   position{line: 2110, col: 11, offset: 61427},
					label: "str",
					expr: &choiceExpr{
						pos: position{line: 2110, col: 16, offset: 61432},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 2110, col: 16, offset: 61432},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 2110, col: 31, offset: 61447},
								name: "UnquotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 2114, col: 1, offset: 61488},
			expr: &actionExpr{
				pos: position{line: 2114, col: 17, offset: 61504},
				run: (*parser).callonQuotedString1,
				expr: &seqExpr{
					pos: position{line: 2114, col: 17, offset: 61504},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 2114, col: 17, offset: 61504},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2114, col: 21, offset: 61508},
							expr: &charClassMatcher{
								pos:        position{line: 2114, col: 21, offset: 61508},
								val:        "[^\"]",
								chars:      []rune{'"'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 2114, col: 27, offset: 61514},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "Boolean",
			pos:  position{line: 2119, col: 1, offset: 61625},
			expr: &actionExpr{
				pos: position{line: 2119, col: 12, offset: 61636},
				run: (*parser).callonBoolean1,
				expr: &choiceExpr{
					pos: position{line: 2119, col: 13, offset: 61637},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 2119, col: 13, offset: 61637},
							val:        "true",
							ignoreCase: false,
							want:       "\"true\"",
						},
						&litMatcher{
							pos:        position{line: 2119, col: 22, offset: 61646},
							val:        "false",
							ignoreCase: false,
							want:       "\"false\"",
						},
					},
				},
			},
		},
		{
			name: "UnquotedString",
			pos:  position{line: 2124, col: 1, offset: 61740},
			expr: &actionExpr{
				pos: position{line: 2124, col: 19, offset: 61758},
				run: (*parser).callonUnquotedString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2124, col: 19, offset: 61758},
					expr: &choiceExpr{
						pos: position{line: 2124, col: 20, offset: 61759},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 2124, col: 20, offset: 61759},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&seqExpr{
								pos: position{line: 2124, col: 27, offset: 61766},
								exprs: []any{
									&notExpr{
										pos: position{line: 2124, col: 27, offset: 61766},
										expr: &choiceExpr{
											pos: position{line: 2124, col: 29, offset: 61768},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 2124, col: 29, offset: 61768},
													name: "MAJOR_BREAK",
												},
												&ruleRefExpr{
													pos:  position{line: 2124, col: 43, offset: 61782},
													name: "EOF",
												},
											},
										},
									},
									&anyMatcher{
										line: 2124, col: 48, offset: 61787,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RenamePattern",
			pos:  position{line: 2131, col: 1, offset: 61961},
			expr: &actionExpr{
				pos: position{line: 2131, col: 18, offset: 61978},
				run: (*parser).callonRenamePattern1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2131, col: 18, offset: 61978},
					expr: &charClassMatcher{
						pos:        position{line: 2131, col: 18, offset: 61978},
						val:        "[a-zA-Z0-9_*]",
						chars:      []rune{'_', '*'},
						ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 2135, col: 1, offset: 62029},
			expr: &actionExpr{
				pos: position{line: 2135, col: 11, offset: 62039},
				run: (*parser).callonNumber1,
				expr: &labeledExpr{
					pos:   position{line: 2135, col: 11, offset: 62039},
					label: "number",
					expr: &ruleRefExpr{
						pos:  position{line: 2135, col: 18, offset: 62046},
						name: "NumberAsString",
					},
				},
			},
		},
		{
			name: "NumberAsString",
			pos:  position{line: 2141, col: 1, offset: 62235},
			expr: &actionExpr{
				pos: position{line: 2141, col: 19, offset: 62253},
				run: (*parser).callonNumberAsString1,
				expr: &seqExpr{
					pos: position{line: 2141, col: 19, offset: 62253},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2141, col: 19, offset: 62253},
							label: "number",
							expr: &choiceExpr{
								pos: position{line: 2141, col: 27, offset: 62261},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 2141, col: 27, offset: 62261},
										name: "FloatAsString",
									},
									&ruleRefExpr{
										pos:  position{line: 2141, col: 43, offset: 62277},
										name: "IntegerAsString",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 2141, col: 60, offset: 62294},
							expr: &choiceExpr{
								pos: position{line: 2141, col: 62, offset: 62296},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 2141, col: 62, offset: 62296},
										name: "SPACE",
									},
									&litMatcher{
										pos:        position{line: 2141, col: 70, offset: 62304},
										val:        ")",
										ignoreCase: false,
										want:       "\")\"",
									},
									&litMatcher{
										pos:        position{line: 2141, col: 76, offset: 62310},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&ruleRefExpr{
										pos:  position{line: 2141, col: 82, offset: 62316},
										name: "EOF",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FloatAsString",
			pos:  position{line: 2147, col: 1, offset: 62445},
			expr: &actionExpr{
				pos: position{line: 2147, col: 18, offset: 62462},
				run: (*parser).callonFloatAsString1,
				expr: &seqExpr{
					pos: position{line: 2147, col: 18, offset: 62462},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 2147, col: 18, offset: 62462},
							expr: &charClassMatcher{
								pos:        position{line: 2147, col: 18, offset: 62462},
								val:        "[-+]",
								chars:      []rune{'-', '+'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2147, col: 24, offset: 62468},
							expr: &charClassMatcher{
								pos:        position{line: 2147, col: 24, offset: 62468},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 2147, col: 31, offset: 62475},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 2147, col: 35, offset: 62479},
							expr: &charClassMatcher{
								pos:        position{line: 2147, col: 35, offset: 62479},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "IntegerAsString",
			pos:  position{line: 2152, col: 1, offset: 62574},
			expr: &actionExpr{
				pos: position{line: 2152, col: 20, offset: 62593},
				run: (*parser).callonIntegerAsString1,
				expr: &seqExpr{
					pos: position{line: 2152, col: 20, offset: 62593},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 2152, col: 20, offset: 62593},
							expr: &charClassMatcher{
								pos:        position{line: 2152, col: 20, offset: 62593},
								val:        "[-+]",
								chars:      []rune{'-', '+'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2152, col: 26, offset: 62599},
							expr: &charClassMatcher{
								pos:        position{line: 2152, col: 26, offset: 62599},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 2156, col: 1, offset: 62642},
			expr: &actionExpr{
				pos: position{line: 2156, col: 21, offset: 62662},
				run: (*parser).callonEqualityOperator1,
				expr: &seqExpr{
					pos: position{line: 2156, col: 21, offset: 62662},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2156, col: 21, offset: 62662},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 2156, col: 36, offset: 62677},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 2156, col: 40, offset: 62681},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 2156, col: 40, offset: 62681},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
									&litMatcher{
										pos:        position{line: 2156, col: 46, offset: 62687},
										val:        "!=",
										ignoreCase: false,
										want:       "\"!=\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2156, col: 52, offset: 62693},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "InequalityOperator",
			pos:  position{line: 2164, col: 1, offset: 62874},
			expr: &actionExpr{
				pos: position{line: 2164, col: 23, offset: 62896},
				run: (*parser).callonInequalityOperator1,
				expr: &seqExpr{
					pos: position{line: 2164, col: 23, offset: 62896},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2164, col: 23, offset: 62896},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 2164, col: 38, offset: 62911},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 2164, col: 42, offset: 62915},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 2164, col: 42, offset: 62915},
										val:        "<=",
										ignoreCase: false,
										want:       "\"<=\"",
									},
									&litMatcher{
										pos:        position{line: 2164, col: 49, offset: 62922},
										val:        "<",
										ignoreCase: false,
										want:       "\"<\"",
									},
									&litMatcher{
										pos:        position{line: 2164, col: 55, offset: 62928},
										val:        ">=",
										ignoreCase: false,
										want:       "\">=\"",
									},
									&litMatcher{
										pos:        position{line: 2164, col: 62, offset: 62935},
										val:        ">",
										ignoreCase: false,
										want:       "\">\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2164, col: 67, offset: 62940},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "EqualityOrInequality",
			pos:  position{line: 2172, col: 1, offset: 63123},
			expr: &choiceExpr{
				pos: position{line: 2172, col: 25, offset: 63147},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2172, col: 25, offset: 63147},
						run: (*parser).callonEqualityOrInequality2,
						expr: &labeledExpr{
							pos:   position{line: 2172, col: 25, offset: 63147},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 2172, col: 28, offset: 63150},
								name: "EqualityOperator",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2175, col: 3, offset: 63192},
						run: (*parser).callonEqualityOrInequality5,
						expr: &labeledExpr{
							pos:   position{line: 2175, col: 3, offset: 63192},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 2175, col: 6, offset: 63195},
								name: "InequalityOperator",
							},
						},
					},
				},
			},
		},
		{
			name: "OpPlus",
			pos:  position{line: 2179, col: 1, offset: 63238},
			expr: &actionExpr{
				pos: position{line: 2179, col: 11, offset: 63248},
				run: (*parser).callonOpPlus1,
				expr: &seqExpr{
					pos: position{line: 2179, col: 11, offset: 63248},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2179, col: 11, offset: 63248},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 2179, col: 26, offset: 63263},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&ruleRefExpr{
							pos:  position{line: 2179, col: 30, offset: 63267},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpMinus",
			pos:  position{line: 2183, col: 1, offset: 63307},
			expr: &actionExpr{
				pos: position{line: 2183, col: 12, offset: 63318},
				run: (*parser).callonOpMinus1,
				expr: &seqExpr{
					pos: position{line: 2183, col: 12, offset: 63318},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2183, col: 12, offset: 63318},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 2183, col: 27, offset: 63333},
							val:        "-",
							ignoreCase: false,
							want:       "\"-\"",
						},
						&ruleRefExpr{
							pos:  position{line: 2183, col: 31, offset: 63337},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpMul",
			pos:  position{line: 2187, col: 1, offset: 63377},
			expr: &actionExpr{
				pos: position{line: 2187, col: 10, offset: 63386},
				run: (*parser).callonOpMul1,
				expr: &seqExpr{
					pos: position{line: 2187, col: 10, offset: 63386},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2187, col: 10, offset: 63386},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 2187, col: 25, offset: 63401},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&ruleRefExpr{
							pos:  position{line: 2187, col: 29, offset: 63405},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpDiv",
			pos:  position{line: 2191, col: 1, offset: 63445},
			expr: &actionExpr{
				pos: position{line: 2191, col: 10, offset: 63454},
				run: (*parser).callonOpDiv1,
				expr: &seqExpr{
					pos: position{line: 2191, col: 10, offset: 63454},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2191, col: 10, offset: 63454},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 2191, col: 25, offset: 63469},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&ruleRefExpr{
							pos:  position{line: 2191, col: 29, offset: 63473},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "Second",
			pos:  position{line: 2196, col: 1, offset: 63537},
			expr: &actionExpr{
				pos: position{line: 2196, col: 11, offset: 63547},
				run: (*parser).callonSecond1,
				expr: &choiceExpr{
					pos: position{line: 2196, col: 12, offset: 63548},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 2196, col: 12, offset: 63548},
							val:        "seconds",
							ignoreCase: false,
							want:       "\"seconds\"",
						},
						&litMatcher{
							pos:        position{line: 2196, col: 24, offset: 63560},
							val:        "second",
							ignoreCase: false,
							want:       "\"second\"",
						},
						&litMatcher{
							pos:        position{line: 2196, col: 35, offset: 63571},
							val:        "secs",
							ignoreCase: false,
							want:       "\"secs\"",
						},
						&litMatcher{
							pos:        position{line: 2196, col: 44, offset: 63580},
							val:        "sec",
							ignoreCase: false,
							want:       "\"sec\"",
						},
						&litMatcher{
							pos:        position{line: 2196, col: 52, offset: 63588},
							val:        "s",
							ignoreCase: false,
							want:       "\"s\"",
						},
					},
				},
			},
		},
		{
			name: "Minute",
			pos:  position{line: 2200, col: 1, offset: 63629},
			expr: &actionExpr{
				pos: position{line: 2200, col: 11, offset: 63639},
				run: (*parser).callonMinute1,
				expr: &choiceExpr{
					pos: position{line: 2200, col: 12, offset: 63640},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 2200, col: 12, offset: 63640},
							val:        "minutes",
							ignoreCase: false,
							want:       "\"minutes\"",
						},
						&litMatcher{
							pos:        position{line: 2200, col: 24, offset: 63652},
							val:        "minute",
							ignoreCase: false,
							want:       "\"minute\"",
						},
						&litMatcher{
							pos:        position{line: 2200, col: 35, offset: 63663},
							val:        "mins",
							ignoreCase: false,
							want:       "\"mins\"",
						},
						&litMatcher{
							pos:        position{line: 2200, col: 44, offset: 63672},
							val:        "min",
							ignoreCase: false,
							want:       "\"min\"",
						},
						&litMatcher{
							pos:        position{line: 2200, col: 52, offset: 63680},
							val:        "m",
							ignoreCase: false,
							want:       "\"m\"",
						},
					},
				},
			},
		},
		{
			name: "Hour",
			pos:  position{line: 2204, col: 1, offset: 63721},
			expr: &actionExpr{
				pos: position{line: 2204, col: 9, offset: 63729},
				run: (*parser).callonHour1,
				expr: &choiceExpr{
					pos: position{line: 2204, col: 10, offset: 63730},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 2204, col: 10, offset: 63730},
							val:        "hours",
							ignoreCase: false,
							want:       "\"hours\"",
						},
						&litMatcher{
							pos:        position{line: 2204, col: 20, offset: 63740},
							val:        "hour",
							ignoreCase: false,
							want:       "\"hour\"",
						},
						&litMatcher{
							pos:        position{line: 2204, col: 29, offset: 63749},
							val:        "hrs",
							ignoreCase: false,
							want:       "\"hrs\"",
						},
						&litMatcher{
							pos:        position{line: 2204, col: 37, offset: 63757},
							val:        "hr",
							ignoreCase: false,
							want:       "\"hr\"",
						},
						&litMatcher{
							pos:        position{line: 2204, col: 44, offset: 63764},
							val:        "h",
							ignoreCase: false,
							want:       "\"h\"",
						},
					},
				},
			},
		},
		{
			name: "Day",
			pos:  position{line: 2208, col: 1, offset: 63803},
			expr: &actionExpr{
				pos: position{line: 2208, col: 8, offset: 63810},
				run: (*parser).callonDay1,
				expr: &choiceExpr{
					pos: position{line: 2208, col: 9, offset: 63811},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 2208, col: 9, offset: 63811},
							val:        "days",
							ignoreCase: false,
							want:       "\"days\"",
						},
						&litMatcher{
							pos:        position{line: 2208, col: 18, offset: 63820},
							val:        "day",
							ignoreCase: false,
							want:       "\"day\"",
						},
						&litMatcher{
							pos:        position{line: 2208, col: 26, offset: 63828},
							val:        "d",
							ignoreCase: false,
							want:       "\"d\"",
						},
					},
				},
			},
		},
		{
			name: "Week",
			pos:  position{line: 2212, col: 1, offset: 63866},
			expr: &actionExpr{
				pos: position{line: 2212, col: 9, offset: 63874},
				run: (*parser).callonWeek1,
				expr: &choiceExpr{
					pos: position{line: 2212, col: 10, offset: 63875},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 2212, col: 10, offset: 63875},
							val:        "weeks",
							ignoreCase: false,
							want:       "\"weeks\"",
						},
						&litMatcher{
							pos:        position{line: 2212, col: 20, offset: 63885},
							val:        "week",
							ignoreCase: false,
							want:       "\"week\"",
						},
						&litMatcher{
							pos:        position{line: 2212, col: 29, offset: 63894},
							val:        "w",
							ignoreCase: false,
							want:       "\"w\"",
						},
					},
				},
			},
		},
		{
			name: "Month",
			pos:  position{line: 2216, col: 1, offset: 63933},
			expr: &actionExpr{
				pos: position{line: 2216, col: 10, offset: 63942},
				run: (*parser).callonMonth1,
				expr: &choiceExpr{
					pos: position{line: 2216, col: 11, offset: 63943},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 2216, col: 11, offset: 63943},
							val:        "months",
							ignoreCase: false,
							want:       "\"months\"",
						},
						&litMatcher{
							pos:        position{line: 2216, col: 22, offset: 63954},
							val:        "month",
							ignoreCase: false,
							want:       "\"month\"",
						},
						&litMatcher{
							pos:        position{line: 2216, col: 32, offset: 63964},
							val:        "mon",
							ignoreCase: false,
							want:       "\"mon\"",
						},
					},
				},
			},
		},
		{
			name: "Quarter",
			pos:  position{line: 2220, col: 1, offset: 64006},
			expr: &actionExpr{
				pos: position{line: 2220, col: 12, offset: 64017},
				run: (*parser).callonQuarter1,
				expr: &choiceExpr{
					pos: position{line: 2220, col: 13, offset: 64018},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 2220, col: 13, offset: 64018},
							val:        "quarters",
							ignoreCase: false,
							want:       "\"quarters\"",
						},
						&litMatcher{
							pos:        position{line: 2220, col: 26, offset: 64031},
							val:        "quarter",
							ignoreCase: false,
							want:       "\"quarter\"",
						},
						&litMatcher{
							pos:        position{line: 2220, col: 38, offset: 64043},
							val:        "qtrs",
							ignoreCase: false,
							want:       "\"qtrs\"",
						},
						&litMatcher{
							pos:        position{line: 2220, col: 47, offset: 64052},
							val:        "qtr",
							ignoreCase: false,
							want:       "\"qtr\"",
						},
						&litMatcher{
							pos:        position{line: 2220, col: 55, offset: 64060},
							val:        "q",
							ignoreCase: false,
							want:       "\"q\"",
						},
					},
				},
			},
		},
		{
			name: "Subseconds",
			pos:  position{line: 2225, col: 1, offset: 64194},
			expr: &actionExpr{
				pos: position{line: 2225, col: 15, offset: 64208},
				run: (*parser).callonSubseconds1,
				expr: &choiceExpr{
					pos: position{line: 2225, col: 16, offset: 64209},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 2225, col: 16, offset: 64209},
							val:        "us",
							ignoreCase: false,
							want:       "\"us\"",
						},
						&litMatcher{
							pos:        position{line: 2225, col: 23, offset: 64216},
							val:        "ms",
							ignoreCase: false,
							want:       "\"ms\"",
						},
						&litMatcher{
							pos:        position{line: 2225, col: 30, offset: 64223},
							val:        "cs",
							ignoreCase: false,
							want:       "\"cs\"",
						},
						&litMatcher{
							pos:        position{line: 2225, col: 37, offset: 64230},
							val:        "ds",
							ignoreCase: false,
							want:       "\"ds\"",
						},
					},
				},
			},
		},
		{
			name: "TransactionBlock",
			pos:  position{line: 2234, col: 1, offset: 64453},
			expr: &actionExpr{
				pos: position{line: 2234, col: 21, offset: 64473},
				run: (*parser).callonTransactionBlock1,
				expr: &seqExpr{
					pos: position{line: 2234, col: 21, offset: 64473},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2234, col: 21, offset: 64473},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 2234, col: 26, offset: 64478},
							name: "CMD_TRANSACTION",
						},
						&labeledExpr{
							pos:   position{line: 2234, col: 42, offset: 64494},
							label: "txnOptions",
							expr: &ruleRefExpr{
								pos:  position{line: 2234, col: 53, offset: 64505},
								name: "TransactionOptions",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionOptions",
			pos:  position{line: 2243, col: 1, offset: 64811},
			expr: &actionExpr{
				pos: position{line: 2243, col: 23, offset: 64833},
				run: (*parser).callonTransactionOptions1,
				expr: &labeledExpr{
					pos:   position{line: 2243, col: 23, offset: 64833},
					label: "txnOptions",
					expr: &zeroOrOneExpr{
						pos: position{line: 2243, col: 34, offset: 64844},
						expr: &ruleRefExpr{
							pos:  position{line: 2243, col: 34, offset: 64844},
							name: "TransactionDefinitionOptionsList",
						},
					},
				},
			},
		},
		{
			name: "TransactionDefinitionOptionsList",
			pos:  position{line: 2258, col: 1, offset: 65235},
			expr: &actionExpr{
				pos: position{line: 2258, col: 37, offset: 65271},
				run: (*parser).callonTransactionDefinitionOptionsList1,
				expr: &seqExpr{
					pos: position{line: 2258, col: 37, offset: 65271},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2258, col: 37, offset: 65271},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2258, col: 43, offset: 65277},
								name: "TransactionDefinitionOption",
							},
						},
						&labeledExpr{
							pos:   position{line: 2258, col: 71, offset: 65305},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2258, col: 76, offset: 65310},
								expr: &seqExpr{
									pos: position{line: 2258, col: 77, offset: 65311},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 2258, col: 77, offset: 65311},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 2258, col: 83, offset: 65317},
											name: "TransactionDefinitionOption",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionDefinitionOption",
			pos:  position{line: 2293, col: 1, offset: 66306},
			expr: &actionExpr{
				pos: position{line: 2293, col: 32, offset: 66337},
				run: (*parser).callonTransactionDefinitionOption1,
				expr: &labeledExpr{
					pos:   position{line: 2293, col: 32, offset: 66337},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 2293, col: 40, offset: 66345},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 2293, col: 40, offset: 66345},
								name: "SpaceSeparatedFieldNameList",
							},
							&ruleRefExpr{
								pos:  position{line: 2293, col: 70, offset: 66375},
								name: "StartsWithOption",
							},
							&ruleRefExpr{
								pos:  position{line: 2293, col: 89, offset: 66394},
								name: "EndsWithOption",
							},
						},
					},
				},
			},
		},
		{
			name: "SpaceSeparatedFieldNameList",
			pos:  position{line: 2299, col: 1, offset: 66540},
			expr: &actionExpr{
				pos: position{line: 2299, col: 32, offset: 66571},
				run: (*parser).callonSpaceSeparatedFieldNameList1,
				expr: &seqExpr{
					pos: position{line: 2299, col: 32, offset: 66571},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2299, col: 32, offset: 66571},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2299, col: 38, offset: 66577},
								name: "FieldName",
							},
						},
						&notExpr{
							pos: position{line: 2299, col: 48, offset: 66587},
							expr: &ruleRefExpr{
								pos:  position{line: 2299, col: 50, offset: 66589},
								name: "EQUAL",
							},
						},
						&labeledExpr{
							pos:   position{line: 2299, col: 57, offset: 66596},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2299, col: 62, offset: 66601},
								expr: &seqExpr{
									pos: position{line: 2299, col: 63, offset: 66602},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 2299, col: 63, offset: 66602},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 2299, col: 69, offset: 66608},
											name: "FieldName",
										},
										&notExpr{
											pos: position{line: 2299, col: 79, offset: 66618},
											expr: &ruleRefExpr{
												pos:  position{line: 2299, col: 81, offset: 66620},
												name: "EQUAL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StartsWithOption",
			pos:  position{line: 2317, col: 1, offset: 67044},
			expr: &actionExpr{
				pos: position{line: 2317, col: 21, offset: 67064},
				run: (*parser).callonStartsWithOption1,
				expr: &seqExpr{
					pos: position{line: 2317, col: 21, offset: 67064},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 2317, col: 21, offset: 67064},
							val:        "startswith",
							ignoreCase: false,
							want:       "\"startswith\"",
						},
						&ruleRefExpr{
							pos:  position{line: 2317, col: 34, offset: 67077},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 2317, col: 40, offset: 67083},
							label: "strExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 2317, col: 48, offset: 67091},
								name: "TransactionFilterString",
							},
						},
					},
				},
			},
		},
		{
			name: "EndsWithOption",
			pos:  position{line: 2327, col: 1, offset: 67329},
			expr: &actionExpr{
				pos: position{line: 2327, col: 19, offset: 67347},
				run: (*parser).callonEndsWithOption1,
				expr: &seqExpr{
					pos: position{line: 2327, col: 19, offset: 67347},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 2327, col: 19, offset: 67347},
							val:        "endswith",
							ignoreCase: false,
							want:       "\"endswith\"",
						},
						&ruleRefExpr{
							pos:  position{line: 2327, col: 30, offset: 67358},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 2327, col: 36, offset: 67364},
							label: "strExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 2327, col: 44, offset: 67372},
								name: "TransactionFilterString",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionFilterString",
			pos:  position{line: 2338, col: 1, offset: 67641},
			expr: &actionExpr{
				pos: position{line: 2338, col: 28, offset: 67668},
				run: (*parser).callonTransactionFilterString1,
				expr: &labeledExpr{
					pos:   position{line: 2338, col: 28, offset: 67668},
					label: "strExpr",
					expr: &choiceExpr{
						pos: position{line: 2338, col: 37, offset: 67677},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 2338, col: 37, offset: 67677},
								name: "TransactionQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 2338, col: 63, offset: 67703},
								name: "TransactionEval",
							},
							&ruleRefExpr{
								pos:  position{line: 2338, col: 81, offset: 67721},
								name: "TransactionSearch",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionQuotedString",
			pos:  position{line: 2342, col: 1, offset: 67769},
			expr: &actionExpr{
				pos: position{line: 2342, col: 28, offset: 67796},
				run: (*parser).callonTransactionQuotedString1,
				expr: &labeledExpr{
					pos:   position{line: 2342, col: 28, offset: 67796},
					label: "str",
					expr: &choiceExpr{
						pos: position{line: 2342, col: 33, offset: 67801},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 2342, col: 33, offset: 67801},
								name: "TransactionQuotedStringValue",
							},
							&ruleRefExpr{
								pos:  position{line: 2342, col: 64, offset: 67832},
								name: "TransactionQuotedStringSearchExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionQuotedStringSearchExpr",
			pos:  position{line: 2346, col: 1, offset: 67892},
			expr: &actionExpr{
				pos: position{line: 2346, col: 38, offset: 67929},
				run: (*parser).callonTransactionQuotedStringSearchExpr1,
				expr: &seqExpr{
					pos: position{line: 2346, col: 38, offset: 67929},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 2346, col: 38, offset: 67929},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 2346, col: 42, offset: 67933},
							label: "searchClause",
							expr: &ruleRefExpr{
								pos:  position{line: 2346, col: 55, offset: 67946},
								name: "ClauseLevel4",
							},
						},
						&litMatcher{
							pos:        position{line: 2346, col: 68, offset: 67959},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedStringNoOp",
			pos:  position{line: 2354, col: 1, offset: 68098},
			expr: &actionExpr{
				pos: position{line: 2354, col: 21, offset: 68118},
				run: (*parser).callonQuotedStringNoOp1,
				expr: &seqExpr{
					pos: position{line: 2354, col: 21, offset: 68118},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 2354, col: 21, offset: 68118},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2354, col: 25, offset: 68122},
							expr: &charClassMatcher{
								pos:        position{line: 2354, col: 25, offset: 68122},
								val:        "[^\" !(OR / AND)]",
								chars:      []rune{'"', ' ', '!', '(', 'O', 'R', ' ', '/', ' ', 'A', 'N', 'D', ')'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 2354, col: 44, offset: 68141},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "TransactionQuotedStringValue",
			pos:  position{line: 2359, col: 1, offset: 68252},
			expr: &actionExpr{
				pos: position{line: 2359, col: 33, offset: 68284},
				run: (*parser).callonTransactionQuotedStringValue1,
				expr: &labeledExpr{
					pos:   position{line: 2359, col: 33, offset: 68284},
					label: "str",
					expr: &ruleRefExpr{
						pos:  position{line: 2359, col: 37, offset: 68288},
						name: "QuotedStringNoOp",
					},
				},
			},
		},
		{
			name: "TransactionSearch",
			pos:  position{line: 2367, col: 1, offset: 68443},
			expr: &actionExpr{
				pos: position{line: 2367, col: 22, offset: 68464},
				run: (*parser).callonTransactionSearch1,
				expr: &labeledExpr{
					pos:   position{line: 2367, col: 22, offset: 68464},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 2367, col: 27, offset: 68469},
						name: "ClauseLevel1",
					},
				},
			},
		},
		{
			name: "TransactionEval",
			pos:  position{line: 2377, col: 1, offset: 68634},
			expr: &actionExpr{
				pos: position{line: 2377, col: 20, offset: 68653},
				run: (*parser).callonTransactionEval1,
				expr: &seqExpr{
					pos: position{line: 2377, col: 20, offset: 68653},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 2377, col: 20, offset: 68653},
							val:        "eval",
							ignoreCase: false,
							want:       "\"eval\"",
						},
						&ruleRefExpr{
							pos:  position{line: 2377, col: 27, offset: 68660},
							name: "EMPTY_OR_SPACE",
						},
						&ruleRefExpr{
							pos:  position{line: 2377, col: 42, offset: 68675},
							name: "L_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 2377, col: 50, offset: 68683},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 2377, col: 60, offset: 68693},
								name: "BoolExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2377, col: 69, offset: 68702},
							name: "R_PAREN",
						},
					},
				},
			},
		},
		{
			name: "ALLCMD",
			pos:  position{line: 2387, col: 1, offset: 68883},
			expr: &choiceExpr{
				pos: position{line: 2387, col: 12, offset: 68894},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 2387, col: 12, offset: 68894},
						name: "CMD_REGEX",
					},
					&ruleRefExpr{
						pos:  position{line: 2387, col: 24, offset: 68906},
						name: "CMD_STATS",
					},
					&ruleRefExpr{
						pos:  position{line: 2387, col: 36, offset: 68918},
						name: "CMD_FIELDS",
					},
					&ruleRefExpr{
						pos:  position{line: 2387, col: 49, offset: 68931},
						name: "CMD_WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 2387, col: 61, offset: 68943},
						name: "CMD_HEAD_NO_SPACE",
					},
					&ruleRefExpr{
						pos:  position{line: 2387, col: 81, offset: 68963},
						name: "CMD_HEAD",
					},
					&ruleRefExpr{
						pos:  position{line: 2387, col: 92, offset: 68974},
						name: "CMD_EVAL",
					},
					&ruleRefExpr{
						pos:  position{line: 2387, col: 103, offset: 68985},
						name: "CMD_REX",
					},
					&ruleRefExpr{
						pos:  position{line: 2387, col: 113, offset: 68995},
						name: "CMD_TOP",
					},
					&ruleRefExpr{
						pos:  position{line: 2387, col: 123, offset: 69005},
						name: "CMD_RARE",
					},
					&ruleRefExpr{
						pos:  position{line: 2387, col: 134, offset: 69016},
						name: "CMD_RENAME",
					},
					&ruleRefExpr{
						pos:  position{line: 2387, col: 147, offset: 69029},
						name: "CMD_TIMECHART",
					},
					&ruleRefExpr{
						pos:  position{line: 2387, col: 163, offset: 69045},
						name: "CMD_TRANSACTION",
					},
					&ruleRefExpr{
						pos:  position{line: 2387, col: 181, offset: 69063},
						name: "CMD_DEDUP",
					},
				},
			},
		},
		{
			name: "CMD_SEARCH",
			pos:  position{line: 2388, col: 1, offset: 69074},
			expr: &seqExpr{
				pos: position{line: 2388, col: 15, offset: 69088},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2388, col: 15, offset: 69088},
						val:        "search",
						ignoreCase: false,
						want:       "\"search\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2388, col: 24, offset: 69097},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_REGEX",
			pos:  position{line: 2389, col: 1, offset: 69103},
			expr: &seqExpr{
				pos: position{line: 2389, col: 14, offset: 69116},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2389, col: 14, offset: 69116},
						val:        "regex",
						ignoreCase: false,
						want:       "\"regex\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2389, col: 22, offset: 69124},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_STATS",
			pos:  position{line: 2390, col: 1, offset: 69130},
			expr: &seqExpr{
				pos: position{line: 2390, col: 14, offset: 69143},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2390, col: 14, offset: 69143},
						val:        "stats",
						ignoreCase: false,
						want:       "\"stats\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2390, col: 22, offset: 69151},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_FIELDS",
			pos:  position{line: 2391, col: 1, offset: 69157},
			expr: &seqExpr{
				pos: position{line: 2391, col: 15, offset: 69171},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2391, col: 15, offset: 69171},
						val:        "fields",
						ignoreCase: false,
						want:       "\"fields\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2391, col: 24, offset: 69180},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_WHERE",
			pos:  position{line: 2392, col: 1, offset: 69186},
			expr: &seqExpr{
				pos: position{line: 2392, col: 14, offset: 69199},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2392, col: 14, offset: 69199},
						val:        "where",
						ignoreCase: false,
						want:       "\"where\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2392, col: 22, offset: 69207},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_HEAD_NO_SPACE",
			pos:  position{line: 2393, col: 1, offset: 69213},
			expr: &litMatcher{
				pos:        position{line: 2393, col: 22, offset: 69234},
				val:        "head",
				ignoreCase: false,
				want:       "\"head\"",
			},
		},
		{
			name: "CMD_HEAD",
			pos:  position{line: 2394, col: 1, offset: 69241},
			expr: &seqExpr{
				pos: position{line: 2394, col: 13, offset: 69253},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 2394, col: 13, offset: 69253},
						name: "CMD_HEAD_NO_SPACE",
					},
					&ruleRefExpr{
						pos:  position{line: 2394, col: 31, offset: 69271},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_EVAL",
			pos:  position{line: 2395, col: 1, offset: 69277},
			expr: &seqExpr{
				pos: position{line: 2395, col: 13, offset: 69289},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2395, col: 13, offset: 69289},
						val:        "eval",
						ignoreCase: false,
						want:       "\"eval\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2395, col: 20, offset: 69296},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_REX",
			pos:  position{line: 2396, col: 1, offset: 69302},
			expr: &seqExpr{
				pos: position{line: 2396, col: 12, offset: 69313},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2396, col: 12, offset: 69313},
						val:        "rex",
						ignoreCase: false,
						want:       "\"rex\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2396, col: 18, offset: 69319},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_TOP",
			pos:  position{line: 2397, col: 1, offset: 69325},
			expr: &litMatcher{
				pos:        position{line: 2397, col: 12, offset: 69336},
				val:        "top",
				ignoreCase: false,
				want:       "\"top\"",
			},
		},
		{
			name: "CMD_RARE",
			pos:  position{line: 2398, col: 1, offset: 69342},
			expr: &litMatcher{
				pos:        position{line: 2398, col: 13, offset: 69354},
				val:        "rare",
				ignoreCase: false,
				want:       "\"rare\"",
			},
		},
		{
			name: "CMD_RENAME",
			pos:  position{line: 2399, col: 1, offset: 69361},
			expr: &seqExpr{
				pos: position{line: 2399, col: 15, offset: 69375},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2399, col: 15, offset: 69375},
						val:        "rename",
						ignoreCase: false,
						want:       "\"rename\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2399, col: 24, offset: 69384},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_TIMECHART",
			pos:  position{line: 2400, col: 1, offset: 69390},
			expr: &seqExpr{
				pos: position{line: 2400, col: 18, offset: 69407},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2400, col: 18, offset: 69407},
						val:        "timechart",
						ignoreCase: false,
						want:       "\"timechart\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2400, col: 30, offset: 69419},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_SPAN",
			pos:  position{line: 2401, col: 1, offset: 69425},
			expr: &litMatcher{
				pos:        position{line: 2401, col: 13, offset: 69437},
				val:        "span",
				ignoreCase: false,
				want:       "\"span\"",
			},
		},
		{
			name: "CMD_TRANSACTION",
			pos:  position{line: 2402, col: 1, offset: 69444},
			expr: &seqExpr{
				pos: position{line: 2402, col: 20, offset: 69463},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2402, col: 20, offset: 69463},
						val:        "transaction",
						ignoreCase: false,
						want:       "\"transaction\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2402, col: 34, offset: 69477},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_DEDUP",
			pos:  position{line: 2403, col: 1, offset: 69483},
			expr: &litMatcher{
				pos:        position{line: 2403, col: 14, offset: 69496},
				val:        "dedup",
				ignoreCase: false,
				want:       "\"dedup\"",
			},
		},
		{
			name: "CMD_DEDUP_SORTBY",
			pos:  position{line: 2404, col: 1, offset: 69504},
			expr: &seqExpr{
				pos: position{line: 2404, col: 21, offset: 69524},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 2404, col: 21, offset: 69524},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 2404, col: 27, offset: 69530},
						val:        "sortby",
						ignoreCase: false,
						want:       "\"sortby\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2404, col: 36, offset: 69539},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "EVAL_CONCAT",
			pos:  position{line: 2405, col: 1, offset: 69545},
			expr: &seqExpr{
				pos: position{line: 2405, col: 16, offset: 69560},
				exprs: []any{
					&zeroOrOneExpr{
						pos: position{line: 2405, col: 16, offset: 69560},
						expr: &ruleRefExpr{
							pos:  position{line: 2405, col: 16, offset: 69560},
							name: "SPACE",
						},
					},
					&litMatcher{
						pos:        position{line: 2405, col: 23, offset: 69567},
						val:        ".",
						ignoreCase: false,
						want:       "\".\"",
					},
					&zeroOrOneExpr{
						pos: position{line: 2405, col: 27, offset: 69571},
						expr: &ruleRefExpr{
							pos:  position{line: 2405, col: 27, offset: 69571},
							name: "SPACE",
						},
					},
				},
			},
		},
		{
			name: "MAJOR_BREAK",
			pos:  position{line: 2408, col: 1, offset: 69682},
			expr: &choiceExpr{
				pos: position{line: 2408, col: 16, offset: 69697},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 2408, col: 16, offset: 69697},
						val:        "[[\\]<>(){}|!;,'\"*\\n\\r \\t&?+]",
						chars:      []rune{'[', ']', '<', '>', '(', ')', '{', '}', '|', '!', ';', ',', '\'', '"', '*', '\n', '\r', ' ', '\t', '&', '?', '+'},
						ignoreCase: false,
						inverted:   false,
					},
					&litMatcher{
						pos:        position{line: 2408, col: 47, offset: 69728},
						val:        "%21",
						ignoreCase: false,
						want:       "\"%21\"",
					},
					&litMatcher{
						pos:        position{line: 2408, col: 55, offset: 69736},
						val:        "%26",
						ignoreCase: false,
						want:       "\"%26\"",
					},
					&litMatcher{
						pos:        position{line: 2409, col: 16, offset: 69759},
						val:        "%2526",
						ignoreCase: false,
						want:       "\"%2526\"",
					},
					&litMatcher{
						pos:        position{line: 2409, col: 26, offset: 69769},
						val:        "%3B",
						ignoreCase: false,
						want:       "\"%3B\"",
					},
					&litMatcher{
						pos:        position{line: 2409, col: 34, offset: 69777},
						val:        "%7C",
						ignoreCase: false,
						want:       "\"%7C\"",
					},
					&litMatcher{
						pos:        position{line: 2409, col: 42, offset: 69785},
						val:        "%20",
						ignoreCase: false,
						want:       "\"%20\"",
					},
					&litMatcher{
						pos:        position{line: 2409, col: 50, offset: 69793},
						val:        "%2B",
						ignoreCase: false,
						want:       "\"%2B\"",
					},
					&litMatcher{
						pos:        position{line: 2409, col: 58, offset: 69801},
						val:        "%3D",
						ignoreCase: false,
						want:       "\"%3D\"",
					},
					&litMatcher{
						pos:        position{line: 2409, col: 66, offset: 69809},
						val:        "--",
						ignoreCase: false,
						want:       "\"--\"",
					},
					&litMatcher{
						pos:        position{line: 2410, col: 16, offset: 69831},
						val:        "%2520",
						ignoreCase: false,
						want:       "\"%2520\"",
					},
					&litMatcher{
						pos:        position{line: 2410, col: 26, offset: 69841},
						val:        "%5D",
						ignoreCase: false,
						want:       "\"%5D\"",
					},
					&litMatcher{
						pos:        position{line: 2410, col: 34, offset: 69849},
						val:        "%5B",
						ignoreCase: false,
						want:       "\"%5B\"",
					},
					&litMatcher{
						pos:        position{line: 2410, col: 42, offset: 69857},
						val:        "%3A",
						ignoreCase: false,
						want:       "\"%3A\"",
					},
					&litMatcher{
						pos:        position{line: 2410, col: 50, offset: 69865},
						val:        "%0A",
						ignoreCase: false,
						want:       "\"%0A\"",
					},
					&litMatcher{
						pos:        position{line: 2410, col: 58, offset: 69873},
						val:        "%2C",
						ignoreCase: false,
						want:       "\"%2C\"",
					},
					&litMatcher{
						pos:        position{line: 2410, col: 66, offset: 69881},
						val:        "%28",
						ignoreCase: false,
						want:       "\"%28\"",
					},
					&litMatcher{
						pos:        position{line: 2410, col: 74, offset: 69889},
						val:        "%29",
						ignoreCase: false,
						want:       "\"%29\"",
					},
				},
			},
		},
		{
			name: "MINOR_BREAK",
			pos:  position{line: 2411, col: 1, offset: 69895},
			expr: &choiceExpr{
				pos: position{line: 2411, col: 16, offset: 69910},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 2411, col: 16, offset: 69910},
						val:        "[/:=@.$#%_]",
						chars:      []rune{'/', ':', '=', '@', '.', '$', '#', '%', '_'},
						ignoreCase: false,
						inverted:   false,
					},
					&litMatcher{
						pos:        position{line: 2411, col: 30, offset: 69924},
						val:        "-",
						ignoreCase: false,
						want:       "\"-\"",
					},
					&litMatcher{
						pos:        position{line: 2411, col: 36, offset: 69930},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "NOT",
			pos:  position{line: 2415, col: 1, offset: 70086},
			expr: &seqExpr{
				pos: position{line: 2415, col: 8, offset: 70093},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2415, col: 8, offset: 70093},
						val:        "NOT",
						ignoreCase: false,
						want:       "\"NOT\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2415, col: 14, offset: 70099},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "OR",
			pos:  position{line: 2416, col: 1, offset: 70105},
			expr: &seqExpr{
				pos: position{line: 2416, col: 7, offset: 70111},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 2416, col: 7, offset: 70111},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 2416, col: 13, offset: 70117},
						val:        "OR",
						ignoreCase: false,
						want:       "\"OR\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2416, col: 18, offset: 70122},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "AND",
			pos:  position{line: 2417, col: 1, offset: 70128},
			expr: &seqExpr{
				pos: position{line: 2417, col: 8, offset: 70135},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 2417, col: 8, offset: 70135},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 2417, col: 14, offset: 70141},
						val:        "AND",
						ignoreCase: false,
						want:       "\"AND\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2417, col: 20, offset: 70147},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "PIPE",
			pos:  position{line: 2418, col: 1, offset: 70153},
			expr: &seqExpr{
				pos: position{line: 2418, col: 9, offset: 70161},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 2418, col: 9, offset: 70161},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 2418, col: 15, offset: 70167},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2418, col: 19, offset: 70171},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 2419, col: 1, offset: 70177},
			expr: &seqExpr{
				pos: position{line: 2419, col: 7, offset: 70183},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 2419, col: 7, offset: 70183},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 2419, col: 13, offset: 70189},
						val:        "as",
						ignoreCase: true,
						want:       "\"AS\"i",
					},
					&ruleRefExpr{
						pos:  position{line: 2419, col: 19, offset: 70195},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 2420, col: 1, offset: 70221},
			expr: &seqExpr{
				pos: position{line: 2420, col: 7, offset: 70227},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 2420, col: 7, offset: 70227},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 2420, col: 13, offset: 70233},
						val:        "by",
						ignoreCase: true,
						want:       "\"BY\"i",
					},
					&ruleRefExpr{
						pos:  position{line: 2420, col: 19, offset: 70239},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "EQUAL",
			pos:  position{line: 2422, col: 1, offset: 70266},
			expr: &seqExpr{
				pos: position{line: 2422, col: 10, offset: 70275},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 2422, col: 10, offset: 70275},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 2422, col: 25, offset: 70290},
						val:        "=",
						ignoreCase: false,
						want:       "\"=\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2422, col: 29, offset: 70294},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "COMMA",
			pos:  position{line: 2423, col: 1, offset: 70309},
			expr: &seqExpr{
				pos: position{line: 2423, col: 10, offset: 70318},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 2423, col: 10, offset: 70318},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 2423, col: 25, offset: 70333},
						val:        ",",
						ignoreCase: false,
						want:       "\",\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2423, col: 29, offset: 70337},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "L_PAREN",
			pos:  position{line: 2424, col: 1, offset: 70352},
			expr: &seqExpr{
				pos: position{line: 2424, col: 12, offset: 70363},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2424, col: 12, offset: 70363},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2424, col: 16, offset: 70367},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "R_PAREN",
			pos:  position{line: 2425, col: 1, offset: 70382},
			expr: &seqExpr{
				pos: position{line: 2425, col: 12, offset: 70393},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 2425, col: 12, offset: 70393},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 2425, col: 27, offset: 70408},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2427, col: 1, offset: 70413},
			expr: &notExpr{
				pos: position{line: 2427, col: 8, offset: 70420},
				expr: &anyMatcher{
					line: 2427, col: 9, offset: 70421,
				},
			},
		},
		{
			name: "SPACE",
			pos:  position{line: 2428, col: 1, offset: 70423},
			expr: &choiceExpr{
				pos: position{line: 2428, col: 10, offset: 70432},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 2428, col: 11, offset: 70433},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 2428, col: 11, offset: 70433},
								expr: &litMatcher{
									pos:        position{line: 2428, col: 11, offset: 70433},
									val:        " ",
									ignoreCase: false,
									want:       "\" \"",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 2428, col: 16, offset: 70438},
								name: "COMMENT",
							},
							&zeroOrOneExpr{
								pos: position{line: 2428, col: 24, offset: 70446},
								expr: &litMatcher{
									pos:        position{line: 2428, col: 24, offset: 70446},
									val:        " ",
									ignoreCase: false,
									want:       "\" \"",
								},
							},
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 2428, col: 32, offset: 70454},
						expr: &litMatcher{
							pos:        position{line: 2428, col: 32, offset: 70454},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
				},
			},
		},
		{
			name: "COMMENT",
			pos:  position{line: 2429, col: 1, offset: 70459},
			expr: &seqExpr{
				pos: position{line: 2429, col: 12, offset: 70470},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2429, col: 12, offset: 70470},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2429, col: 18, offset: 70476},
						expr: &seqExpr{
							pos: position{line: 2429, col: 19, offset: 70477},
							exprs: []any{
								&notExpr{
									pos: position{line: 2429, col: 19, offset: 70477},
									expr: &litMatcher{
										pos:        position{line: 2429, col: 21, offset: 70479},
										val:        "```",
										ignoreCase: false,
										want:       "\"```\"",
									},
								},
								&anyMatcher{
									line: 2429, col: 28, offset: 70486,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 2429, col: 32, offset: 70490},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
				},
			},
		},
		{
			name: "EMPTY_OR_SPACE",
			pos:  position{line: 2430, col: 1, offset: 70496},
			expr: &choiceExpr{
				pos: position{line: 2430, col: 20, offset: 70515},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 2430, col: 20, offset: 70515},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 2430, col: 28, offset: 70523},
						val:        "",
						ignoreCase: false,
						want:       "\"\"",
					},
				},
			},
		},
	},
}

func (c *current) onStart1(initialSearch, filterBlocks, queryAggBlocks any) (any, error) {
	var q ast.QueryStruct
	q.SearchFilter = initialSearch.(*ast.Node)

	// Join the InitialSearchBlock with the FilterBlocks with AND nodes. For a
	// search like "A | B | C | D" we should generate the node structure below
	// so that when we run the search it evaluates A first.
	//
	//      AND
	//     /   \
	//    A     AND
	//         /   \
	//        B     AND
	//             /   \
	//            C     D

	filterBlocksSlice := filterBlocks.([]any)
	switch len(filterBlocksSlice) {
	case 0:
		q.SearchFilter = initialSearch.(*ast.Node)
	case 1:
		q.SearchFilter = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     initialSearch.(*ast.Node),
			Right:    filterBlocksSlice[0].(*ast.Node),
		}
	default: // len > 1
		// Iterate backwards so we build the node structure mentioned above.
		root := filterBlocksSlice[len(filterBlocksSlice)-1].(*ast.Node)
		for i := len(filterBlocksSlice) - 2; i > -1; i-- {
			newRoot := &ast.Node{
				NodeType: ast.NodeAnd,
				Left:     filterBlocksSlice[i].(*ast.Node),
				Right:    root,
			}

			root = newRoot
		}

		q.SearchFilter = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     initialSearch.(*ast.Node),
			Right:    root,
		}
	}

	if queryAggBlocks != nil {
		queryAggSlice := queryAggBlocks.([]any)

		if len(queryAggSlice) > 0 {
			// Chain together all QueryAggergators.
			q.PipeCommands = queryAggSlice[0].(*structs.QueryAggregators)

			// Go to the end of the first chain.
			curQueryAgg := q.PipeCommands
			for ; curQueryAgg.Next != nil; curQueryAgg = curQueryAgg.Next {
			}

			// Link the remaining chains.
			for i := range queryAggSlice[1:] {
				queryAgg := queryAggSlice[i+1].(*structs.QueryAggregators)
				curQueryAgg.Next = queryAgg

				// Go to the end of this chain.
				for ; curQueryAgg.Next != nil; curQueryAgg = curQueryAgg.Next {
				}
			}
		}
	}

	return q, nil
}

func (p *parser) callonStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStart1(stack["initialSearch"], stack["filterBlocks"], stack["queryAggBlocks"])
}

func (c *current) onInitialSearchBlock1(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonInitialSearchBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialSearchBlock1(stack["clause"])
}

func (c *current) onSearchBlock1(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonSearchBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBlock1(stack["clause"])
}

func (c *current) onFilterBlock1(block any) (any, error) {
	return block, nil
}

func (p *parser) callonFilterBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterBlock1(stack["block"])
}

func (c *current) onQueryAggergatorBlock1(block any) (any, error) {
	queryAgg := block.(*structs.QueryAggregators)
	return queryAgg, nil
}

func (p *parser) callonQueryAggergatorBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQueryAggergatorBlock1(stack["block"])
}

func (c *current) onFieldSelectBlock1(op, fields any) (any, error) {
	columnsRequest := &structs.ColumnsRequest{}
	if op == nil || string(op.([]byte)) == "+" {
		columnsRequest.IncludeColumns = fields.([]string)
	} else {
		columnsRequest.ExcludeColumns = fields.([]string)
	}

	queryAggregator := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			OutputColumns: columnsRequest,
		},
	}

	return queryAggregator, nil
}

func (p *parser) callonFieldSelectBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldSelectBlock1(stack["op"], stack["fields"])
}

func (c *current) onAggregatorBlock1(aggs, byFields any) (any, error) {
	aggNode := &structs.QueryAggregators{}

	// Extract the MeasureAggregators and check if any of the aggregation fields
	// need to be renamed.
	aggsSlice := aggs.([]*aggregator)
	measureAggs := make([]*structs.MeasureAggregator, len(aggsSlice))
	columnsRequest := &structs.ColumnsRequest{}
	columnsRequest.RenameAggregationColumns = make(map[string]string, 0)

	for i, agg := range aggsSlice {
		measureAggs[i] = agg.measureAgg

		if agg.renameOutputField {
			columnsRequest.RenameAggregationColumns[measureAggs[i].String()] = agg.outputFieldNewName
		}
	}

	// If any agg field was renamed, make a QueryAggregators for all the renames.
	if len(columnsRequest.RenameAggregationColumns) > 0 {
		renameNode := &structs.QueryAggregators{
			PipeCommandType: structs.OutputTransformType,
			OutputTransforms: &structs.OutputTransforms{
				OutputColumns: columnsRequest,
			},
		}

		aggNode.Next = renameNode
	}

	if byFields == nil {
		aggNode.PipeCommandType = structs.MeasureAggsType
		aggNode.MeasureOperations = measureAggs
	} else {
		aggNode.PipeCommandType = structs.GroupByType
		aggNode.GroupByRequest = &structs.GroupByRequest{
			MeasureOperations: measureAggs,
			GroupByColumns:    byFields.([]string),
		}
		aggNode.BucketLimit = query.MAX_GRP_BUCKS
	}

	return aggNode, nil
}

func (p *parser) callonAggregatorBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregatorBlock1(stack["aggs"], stack["byFields"])
}

func (c *current) onGroupbyBlock1(fields any) (any, error) {
	// Wildcard fields are not allowed. See https://docs.splunk.com/Documentation/Splunk/9.1.0/SearchReference/Stats
	for _, field := range fields.([]string) {
		if strings.Contains(field, "*") {
			return nil, errors.New("BY clause cannot contain fields with wildcards")
		}
	}

	return fields, nil
}

func (p *parser) callonGroupbyBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupbyBlock1(stack["fields"])
}

func (c *current) onRegexBlock1(keyAndOp, str any) (any, error) {
	var key, op string
	if keyAndOp == nil {
		key = "*"
		op = "="
	} else {
		keyAndOpSlice := keyAndOp.([]any)
		key = keyAndOpSlice[0].(string)
		op = keyAndOpSlice[1].(string)
	}

	// Remove the quotation marks.
	regex := str.(string)
	regex = regex[1 : len(regex)-1]

	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:           op,
			Field:        key,
			Values:       regex,
			ValueIsRegex: true,
		},
	}

	return node, nil
}

func (p *parser) callonRegexBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexBlock1(stack["keyAndOp"], stack["str"])
}

func (c *current) onClauseLevel41(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*ast.Node)
	for _, v := range rest.([]any) {
		parts := v.([]any) // This will be [(AND / SPACE), ClauseLevel3].
		cur = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     cur,
			Right:    parts[1].(*ast.Node),
		}
	}

	return cur, nil
}

func (p *parser) callonClauseLevel41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel41(stack["first"], stack["rest"])
}

func (c *current) onClauseLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*ast.Node)
	for _, v := range rest.([]any) {
		parts := v.([]any) // This will be [OR, ClauseLevel2].
		cur = &ast.Node{
			NodeType: ast.NodeOr,
			Left:     cur,
			Right:    parts[1].(*ast.Node),
		}
	}

	return cur, nil
}

func (p *parser) callonClauseLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel31(stack["first"], stack["rest"])
}

func (c *current) onClauseLevel22(notList, first any) (any, error) {
	// There's an issue with how queries with AST Not nodes are run, so use
	// De Morgan's law to manipulate the expression.
	node := first.(*ast.Node)
	numNots := len(notList.([]any))

	if numNots%2 == 1 {
		deMorgansLaw(node)
	}

	return node, nil
}

func (p *parser) callonClauseLevel22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel22(stack["notList"], stack["first"])
}

func (c *current) onClauseLevel29(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonClauseLevel29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel29(stack["clause"])
}

func (c *current) onClauseLevel12(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonClauseLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel12(stack["clause"])
}

func (c *current) onClauseLevel18(term any) (any, error) {
	return term, nil
}

func (p *parser) callonClauseLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel18(stack["term"])
}

func (c *current) onSearchTerm1(term any) (any, error) {
	return term, nil
}

func (p *parser) callonSearchTerm1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchTerm1(stack["term"])
}

func (c *current) onTimechartBlock1(binOptions, expr, limitExpr any) (any, error) {
	aggNode := &structs.QueryAggregators{}

	columnsRequest := &structs.ColumnsRequest{}
	columnsRequest.RenameAggregationColumns = make(map[string]string, 0)
	measureAggs := make([]*structs.MeasureAggregator, 0)

	timechartExpr := &structs.TimechartExpr{}
	byField := ""

	switch expr.(type) {
	case *singleAggTemp:
		singleAgg := &structs.SingleAgg{}
		aggTemp := expr.(*singleAggTemp)

		for i, agg := range aggTemp.aggregators {
			measureAggs = append(measureAggs, agg.measureAgg)

			if agg.renameOutputField {
				measureAggs[i].StrEnc = agg.outputFieldNewName
			}
		}

		singleAgg.MeasureOperations = measureAggs
		timechartExpr.SingleAgg = singleAgg

		if aggTemp.SplitByClause != nil {
			byField = aggTemp.SplitByClause.Field
		}
	//  case (<eval-expression>) BY <split-by-clause>) to be finished
	default:
		return nil, fmt.Errorf("Spl peg: Timechart: either single-agg or eval-expression BY split-by-clause is required")
	}

	aggNode.PipeCommandType = structs.GroupByType
	aggNode.GroupByRequest = &structs.GroupByRequest{
		MeasureOperations: measureAggs,
		GroupByColumns:    []string{"timestamp"},
	}
	aggNode.BucketLimit = query.MAX_GRP_BUCKS

	bOptions := binOptions.(*structs.BinOptions)

	var limitExprTmp *structs.LimitExpr
	if limitExpr != nil {
		limitExprTmp = limitExpr.(*structs.LimitExpr)
		if len(measureAggs) > 1 {
			limitExprTmp.LimitScoreMode = structs.LSMByFreq
		}
	}

	timeBucket := aggregations.InitTimeBucket(bOptions.SpanOptions.SpanLength.Num, bOptions.SpanOptions.SpanLength.TimeScalr, byField, limitExprTmp, len(measureAggs))
	aggNode.TimeHistogram = timeBucket

	return aggNode, nil
}

func (p *parser) callonTimechartBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimechartBlock1(stack["binOptions"], stack["expr"], stack["limitExpr"])
}

func (c *current) onSingleAggExpr1(aggs, splitByClause any) (any, error) {
	singleAggExpr := &singleAggTemp{
		aggregators: aggs.([]*aggregator),
	}

	if splitByClause != nil {
		singleAggExpr.SplitByClause = splitByClause.(*structs.SplitByClause)
	}

	return singleAggExpr, nil
}

func (p *parser) callonSingleAggExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleAggExpr1(stack["aggs"], stack["splitByClause"])
}

func (c *current) onSplitByClause1(field, tcOptions any) (any, error) {
	splitByClause := &structs.SplitByClause{
		Field: field.(string),
	}

	if tcOptions != nil {
		splitByClause.TcOptions = tcOptions.(*structs.TcOptions)
	}
	return splitByClause, nil
}

func (p *parser) callonSplitByClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSplitByClause1(stack["field"], stack["tcOptions"])
}

func (c *current) onTcOptions1(option any) (any, error) {
	//Default value
	tcOptions := &structs.TcOptions{
		UseNull:  true,
		UseOther: true,
		NullStr:  "null",
		OtherStr: "other",
	}
	switch option.(type) {
	case *structs.BinOptions:
		tcOptions.BinOptions = option.(*structs.BinOptions)
	case [][]string:
		optionSlice := option.([]any)
		for _, opt := range optionSlice {
			optArr := opt.([]string)
			switch optArr[0] {
			case "usenull":
				useNullBool, err := strconv.ParseBool(optArr[1])
				if err != nil {
					return nil, fmt.Errorf("Spl peg: Timechart: TcOptions: %v", err)
				}
				tcOptions.UseNull = useNullBool
			case "useother":
				useOtherBool, err := strconv.ParseBool(optArr[1])
				if err != nil {
					return nil, fmt.Errorf("Spl peg: Timechart: TcOptions: %v", err)
				}
				tcOptions.UseOther = useOtherBool
			case "nullstr":
				tcOptions.OtherStr = optArr[1]
			case "otherstr":
				tcOptions.OtherStr = optArr[1]
			default:
				return nil, fmt.Errorf("Spl peg: Timechart: TcOptions: invalid option: %v", optArr[0])
			}
		}
	default:
		return nil, fmt.Errorf("Spl peg: Timechart: Invalid tcOptions %v", option)
	}
	return tcOptions, nil
}

func (p *parser) callonTcOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTcOptions1(stack["option"])
}

func (c *current) onTcOption1(tcOptionCMD, val any) (any, error) {
	tcOptionArr := []string{tcOptionCMD.(string), val.(string)}
	return tcOptionArr, nil
}

func (p *parser) callonTcOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTcOption1(stack["tcOptionCMD"], stack["val"])
}

func (c *current) onTcOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Timechart: TcOptionCMD: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonTcOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTcOptionCMD1(stack["option"])
}

func (c *current) onBinOptions1(spanOptions any) (any, error) {
	binOptions := &structs.BinOptions{
		SpanOptions: spanOptions.(*structs.SpanOptions),
	}
	return binOptions, nil
}

func (p *parser) callonBinOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptions1(stack["spanOptions"])
}

func (c *current) onSpanOptions1(spanLength any) (any, error) {
	spanOptions := &structs.SpanOptions{
		SpanLength: spanLength.(*structs.SpanLength),
	}
	return spanOptions, nil
}

func (p *parser) callonSpanOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpanOptions1(stack["spanLength"])
}

func (c *current) onSpanLength1(intAsStr, timeScale any) (any, error) {
	num, err := strconv.Atoi(intAsStr.(string))
	if err != nil {
		return nil, fmt.Errorf("SpanLength: Invalid num (%v): %v", intAsStr.(string), err)
	}

	spanLength := &structs.SpanLength{
		Num:       num,
		TimeScalr: timeScale.(utils.TimeUnit),
	}
	return spanLength, nil
}

func (p *parser) callonSpanLength1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpanLength1(stack["intAsStr"], stack["timeScale"])
}

func (c *current) onTimeScale1(timeUnit any) (any, error) {
	return timeUnit, nil
}

func (p *parser) callonTimeScale1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimeScale1(stack["timeUnit"])
}

func (c *current) onLimitExpr1(sortBy, intAsStr any) (any, error) {
	num, err := strconv.Atoi(intAsStr.(string))
	if err != nil {
		return nil, fmt.Errorf("SpanLength: Invalid num (%v): %v", intAsStr.(string), err)
	}

	limitExpr := &structs.LimitExpr{
		IsTop: true, // Default Value
		Num:   num,
	}

	if sortBy != nil {
		sortByStr, err := transferUint8ToString(sortBy)
		if err != nil {
			return nil, fmt.Errorf("Spl peg: Timechart: %v", err)
		}
		if sortByStr == "bottom" {
			limitExpr.IsTop = false
		}
	}

	return limitExpr, nil
}

func (p *parser) callonLimitExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitExpr1(stack["sortBy"], stack["intAsStr"])
}

func (c *current) onStatisticBlock1(statisticExpr any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		StatisticColRequest: statisticExpr.(*structs.StatisticExpr),
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	measureAgg := &structs.MeasureAggregator{
		MeasureCol:  "*",
		MeasureFunc: utils.Count,
	}

	measureOperations := make([]*structs.MeasureAggregator, 1)
	measureOperations[0] = measureAgg

	groupByColumns := append(statisticExpr.(*structs.StatisticExpr).FieldList, statisticExpr.(*structs.StatisticExpr).ByClause...)

	aggNode := &structs.QueryAggregators{}
	aggNode.Next = root
	aggNode.PipeCommandType = structs.GroupByType
	aggNode.GroupByRequest = &structs.GroupByRequest{
		MeasureOperations: measureOperations,
		GroupByColumns:    groupByColumns,
	}

	return aggNode, nil
}

func (p *parser) callonStatisticBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticBlock1(stack["statisticExpr"])
}

func (c *current) onStatisticExpr1(cmd, limit, fieldList, byClause, options any) (any, error) {

	statisticExpr := &structs.StatisticExpr{
		FieldList: fieldList.([]interface{})[1].([]string),
	}

	statisticCmd, err := transferUint8ToString(cmd)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: StatisticExpr: %v", err)
	}

	if statisticCmd == "top" {
		statisticExpr.StatisticFunctionMode = structs.SFMTop
	} else {
		statisticExpr.StatisticFunctionMode = structs.SFMRare
	}

	if limit != nil {
		statisticExpr.Limit = limit.(string)
	}

	if options != nil {
		statisticExpr.StatisticOptions = options.(*structs.StatisticOptions)
	} else {
		statisticExpr.StatisticOptions = &structs.StatisticOptions{
			ShowCount:    true,
			CountField:   "count",
			ShowPerc:     true,
			PercentField: "percent",
			UseOther:     false,
			OtherStr:     "Other",
		}
	}

	if byClause != nil {
		statisticExpr.ByClause = byClause.([]string)
	}

	return statisticExpr, nil
}

func (p *parser) callonStatisticExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticExpr1(stack["cmd"], stack["limit"], stack["fieldList"], stack["byClause"], stack["options"])
}

func (c *current) onStatisticLimit2(number any) (any, error) {
	return number.(string), nil
}

func (p *parser) callonStatisticLimit2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticLimit2(stack["number"])
}

func (c *current) onStatisticLimit7(limit any) (any, error) {
	return limit.(string), nil
}

func (p *parser) callonStatisticLimit7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticLimit7(stack["limit"])
}

func (c *current) onStatisticOptions1(option any) (any, error) {
	//Default value
	options := &structs.StatisticOptions{
		ShowCount:    true,
		CountField:   "count",
		ShowPerc:     true,
		PercentField: "percent",
		UseOther:     false,
		OtherStr:     "other",
	}

	optionSlice := option.([]any)
	for _, opt := range optionSlice {
		optArr := opt.([]string)
		// Check for matching option types
		switch optArr[0] {
		case "showcount":
			showCountBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.ShowCount = showCountBool
		case "countfield":
			options.CountField = optArr[1]
		case "showperc":
			showPercBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.ShowPerc = showPercBool
		case "percentfield":
			options.PercentField = optArr[1]
		case "useother":
			useOtherBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.UseOther = useOtherBool
		case "otherstr":
			options.OtherStr = optArr[1]
		default:
			return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: invalid option")
		}
	}

	return options, nil
}

func (p *parser) callonStatisticOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticOptions1(stack["option"])
}

func (c *current) onStatisticOption1(optionCMD, field any) (any, error) {
	optionArr := []string{optionCMD.(string), field.(string)}
	return optionArr, nil
}

func (p *parser) callonStatisticOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticOption1(stack["optionCMD"], stack["field"])
}

func (c *current) onStatisticOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: StatisticExpr: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonStatisticOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticOptionCMD1(stack["option"])
}

func (c *current) onByClause2(fieldList any) (any, error) {
	return fieldList.([]string), nil
}

func (p *parser) callonByClause2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByClause2(stack["fieldList"])
}

func (c *current) onByClause7(groupByBlock any) (any, error) {
	return groupByBlock.([]string), nil
}

func (p *parser) callonByClause7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByClause7(stack["groupByBlock"])
}

func (c *current) onDedupBlock1(dedupExpr any) (any, error) {

	letColReq := &structs.LetColumnsRequest{
		DedupColRequest: dedupExpr.(*structs.DedupExpr),
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonDedupBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupBlock1(stack["dedupExpr"])
}

func (c *current) onDedupExpr1(limitArr, options1, fieldList, options2, sortByClause any) (any, error) {
	dedupExpr := &structs.DedupExpr{
		FieldList:         fieldList.([]string),
		Limit:             1,
		DedupCombinations: make(map[string]int, 0),
	}

	if limitArr != nil {
		limitStr := limitArr.([]interface{})[1].(string)
		limit, err := strconv.ParseUint(limitStr, 10, 64)
		if err != nil || limit == 0 {
			return nil, fmt.Errorf("Invalid limit (%v): %v", limitStr, err)
		}
		dedupExpr.Limit = limit
	}

	dedupExpr.DedupOptions = &structs.DedupOptions{
		Consecutive: false,
		KeepEmpty:   false,
		KeepEvents:  false,
	}

	if options1 != nil {
		dedupExpr.DedupOptions = options1.(*structs.DedupOptions)
	}
	if options2 != nil {
		options := options2.(*structs.DedupOptions)

		if options.Consecutive {
			dedupExpr.DedupOptions.Consecutive = options.Consecutive
		}
		if options.KeepEmpty {
			dedupExpr.DedupOptions.KeepEmpty = options.KeepEmpty
		}
		if options.KeepEvents {
			dedupExpr.DedupOptions.KeepEvents = options.KeepEvents
		}
	}

	if sortByClause != nil {
		dedupExpr.DedupSortEles = sortByClause.([]*structs.DedupSortElement)
	}

	return dedupExpr, nil
}

func (p *parser) callonDedupExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupExpr1(stack["limitArr"], stack["options1"], stack["fieldList"], stack["options2"], stack["sortByClause"])
}

func (c *current) onDedupFieldName1(field any) (any, error) {
	return field, nil
}

func (p *parser) callonDedupFieldName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupFieldName1(stack["field"])
}

func (c *current) onDedupFieldList1(first, rest any) (any, error) {
	// Convert `rest` to a slice. Each element of the slice will be a 2-element
	// slice where the first element is " " and the second is a FieldName.
	restSlice := rest.([]any)

	numFieldNames := 1 + len(restSlice)
	fields := make([]string, numFieldNames)
	fields[0] = first.(string)

	for i := 1; i < numFieldNames; i++ {
		separatorAndField := restSlice[i-1].([]any)
		fields[i] = separatorAndField[1].(string)
	}

	return fields, nil
}

func (p *parser) callonDedupFieldList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupFieldList1(stack["first"], stack["rest"])
}

func (c *current) onDedupOptions1(option any) (any, error) {
	//Default value
	options := &structs.DedupOptions{
		Consecutive: false,
		KeepEmpty:   false,
		KeepEvents:  false,
	}

	optionSlice := option.([]any)
	for _, opt := range optionSlice {
		optArr := opt.([]string)
		// Check for matching option types
		switch optArr[0] {
		case "consecutive":
			consecutiveBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: DedupBlock: Options: %v", err)
			}
			options.Consecutive = consecutiveBool
		case "keepempty":
			keepEmptyBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: DedupBlock: Options: %v", err)
			}
			options.KeepEmpty = keepEmptyBool
		case "keepevents":
			keepEventsBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: DedupBlock: Options: %v", err)
			}
			options.KeepEvents = keepEventsBool
		default:
			return nil, fmt.Errorf("Spl peg: DedupBlock: Options: invalid option")
		}
	}

	return options, nil
}

func (p *parser) callonDedupOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupOptions1(stack["option"])
}

func (c *current) onDedupOption1(optionCMD, field any) (any, error) {
	optionArr := []string{optionCMD.(string), field.(string)}
	return optionArr, nil
}

func (p *parser) callonDedupOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupOption1(stack["optionCMD"], stack["field"])
}

func (c *current) onDedupOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: DedupExpr: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonDedupOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupOptionCMD1(stack["option"])
}

func (c *current) onDedupSortByClause1(dedupSortEles any) (any, error) {
	return dedupSortEles, nil
}

func (p *parser) callonDedupSortByClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupSortByClause1(stack["dedupSortEles"])
}

func (c *current) onDedupSortElements1(first, rest any) (any, error) {
	restSlice := rest.([]any)

	length := 1 + len(restSlice)
	dedupSortEles := make([]*structs.DedupSortElement, length)
	dedupSortEles[0] = first.(*structs.DedupSortElement)

	for i := 1; i < length; i++ {
		elements := restSlice[i-1].([]any)
		dedupSortEles[i] = elements[1].(*structs.DedupSortElement)
	}

	return dedupSortEles, nil
}

func (p *parser) callonDedupSortElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupSortElements1(stack["first"], stack["rest"])
}

func (c *current) onDedupSingleSortElement1(sortBySymbol, op, field any) (any, error) {
	sortByAsc := true

	symbol := sortBySymbol.([]byte)
	if symbol[0] == '-' {
		sortByAsc = false
	}

	opStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: DedupSingleSortElement: %v", err)
	}

	return &structs.DedupSortElement{
		SortByAsc: sortByAsc,
		Op:        opStr,
		Field:     field.(string),
	}, nil
}

func (p *parser) callonDedupSingleSortElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupSingleSortElement1(stack["sortBySymbol"], stack["op"], stack["field"])
}

func (c *current) onRenameBlock1(renameExpr any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		RenameColRequest: renameExpr.(*structs.RenameExpr),
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonRenameBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameBlock1(stack["renameExpr"])
}

func (c *current) onRenameExpr2(originalPattern, newPattern any) (any, error) {
	renameExpr := &structs.RenameExpr{
		RenameExprMode:  structs.REMPhrase,
		OriginalPattern: originalPattern.(string),
		NewPattern:      removeQuotes(newPattern),
	}

	return renameExpr, nil
}

func (p *parser) callonRenameExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameExpr2(stack["originalPattern"], stack["newPattern"])
}

func (c *current) onRenameExpr9(originalPattern, newPattern any) (any, error) {
	isRegex, err := isRegexRename(originalPattern.(string), newPattern.(string))
	if err != nil {
		return nil, fmt.Errorf("Spl peg: RenameExpr: %v", err)
	}

	var renameExprMode structs.RenameExprMode
	if isRegex {
		renameExprMode = structs.REMRegex
	} else {
		renameExprMode = structs.REMOverride
	}

	renameExpr := &structs.RenameExpr{
		RenameExprMode:  renameExprMode,
		OriginalPattern: originalPattern.(string),
		NewPattern:      newPattern.(string),
	}

	return renameExpr, nil
}

func (p *parser) callonRenameExpr9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameExpr9(stack["originalPattern"], stack["newPattern"])
}

func (c *current) onRexBlock1(field, str any) (any, error) {
	pattern := removeQuotes(str)
	rexColNames, err := getRexColNames(pattern)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: RexBlock: %v", err)
	}
	rexExpr := &structs.RexExpr{
		FieldName:   field.(string),
		Pattern:     transferPCREToRE2(pattern),
		RexColNames: rexColNames,
	}

	letColReq := &structs.LetColumnsRequest{
		RexColRequest: rexExpr,
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonRexBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRexBlock1(stack["field"], stack["str"])
}

func (c *current) onEvalBlock1(first, rest any) (any, error) {
	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: first.(*structs.LetColumnsRequest),
		},
	}

	leafQueryAgg := root
	restSlice := rest.([]any)
	for i := range restSlice {
		CommaSpaceAndEval := restSlice[i].([]any)
		nextQueryAgg := &structs.QueryAggregators{
			PipeCommandType: structs.OutputTransformType,
			OutputTransforms: &structs.OutputTransforms{
				LetColumns: CommaSpaceAndEval[1].(*structs.LetColumnsRequest),
			},
		}

		leafQueryAgg.Next = nextQueryAgg
		leafQueryAgg = leafQueryAgg.Next
	}

	return root, nil
}

func (p *parser) callonEvalBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalBlock1(stack["first"], stack["rest"])
}

func (c *current) onSingleEval1(field, expr any) (any, error) {
	fieldStr := field.(string)
	if strings.Contains(fieldStr, "*") {
		return nil, fmt.Errorf("New fields must not contain wildcards; invalid field: %v", field)
	}

	letColumnsRequest := expr.(*structs.LetColumnsRequest)
	letColumnsRequest.NewColName = fieldStr

	return letColumnsRequest, nil
}

func (p *parser) callonSingleEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleEval1(stack["field"], stack["expr"])
}

func (c *current) onEvalExpression1(value any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		ValueColRequest: value.(*structs.ValueExpr),
	}

	return letColReq, nil
}

func (p *parser) callonEvalExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalExpression1(stack["value"])
}

func (c *current) onConditionExpr1(condition, trueValue, falseValue any) (any, error) {

	node := &structs.ConditionExpr{
		Op:         "if",
		BoolExpr:   condition.(*structs.BoolExpr),
		TrueValue:  trueValue.(*structs.ValueExpr),
		FalseValue: falseValue.(*structs.ValueExpr),
	}

	return node, nil
}

func (p *parser) callonConditionExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr1(stack["condition"], stack["trueValue"], stack["falseValue"])
}

func (c *current) onTextExpr2(opName, stringExpr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:          opNameStr,
		Value:       stringExpr.(*structs.StringExpr),
		StrToRemove: "",
	}

	return node, nil
}

func (p *parser) callonTextExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr2(stack["opName"], stack["stringExpr"])
}

func (c *current) onTextExpr10(opName, firstVal, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	if rest == nil {
		return firstVal, nil
	}
	restSlice := rest.([]any)
	values := make([]*structs.StringExpr, 1+len(restSlice))
	values[0] = firstVal.(*structs.StringExpr)

	for i := range restSlice {
		stringAtom := restSlice[i].([]any)
		values[i+1] = stringAtom[1].(*structs.StringExpr)
	}
	node := &structs.TextExpr{
		Op:           opNameStr,
		MaxMinValues: values,
	}
	return node, nil

}

func (p *parser) callonTextExpr10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr10(stack["opName"], stack["firstVal"], stack["rest"])
}

func (c *current) onTextExpr25(opName, url any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:          opNameStr,
		Value:       url.(*structs.StringExpr),
		StrToRemove: "",
	}
	return node, nil

}

func (p *parser) callonTextExpr25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr25(stack["opName"], stack["url"])
}

func (c *current) onTextExpr33(opName, stringExpr, delim any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:        opNameStr,
		Value:     stringExpr.(*structs.StringExpr),
		Delimiter: delim.(*structs.StringExpr),
	}
	return node, nil
}

func (p *parser) callonTextExpr33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr33(stack["opName"], stack["stringExpr"], stack["delim"])
}

func (c *current) onTextExpr44(opName, stringExpr, startIndex, lengthParam any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	stringExprConverted, ok := stringExpr.(*structs.StringExpr)
	if !ok {
		return nil, fmt.Errorf("Spl peg: TextExpr: Failed to assert stringExpr as *structs.StringExpr")
	}
	startIndexConverted, ok := startIndex.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Spl peg: TextExpr: Failed to assert startIndex as *structs.NumericExpr")
	}
	var lengthConverted *structs.NumericExpr
	if lengthParam != nil {
		lengthSlice, ok := lengthParam.([]interface{})
		if ok && len(lengthSlice) > 1 {
			length, ok := lengthSlice[1].(*structs.NumericExpr)
			if ok {
				lengthConverted = length
			} else {
				return nil, fmt.Errorf("Spl peg: TextExpr: Unable to assert length as *structs.NumericExpr")
			}
		}
	}
	node := &structs.TextExpr{
		Op:         opNameStr,
		Value:      stringExprConverted,
		StartIndex: startIndexConverted,
		LengthExpr: lengthConverted,
	}
	return node, nil
}

func (p *parser) callonTextExpr44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr44(stack["opName"], stack["stringExpr"], stack["startIndex"], stack["lengthParam"])
}

func (c *current) onTextExpr60(value, format any) (any, error) {
	var formatExpr *structs.StringExpr
	if format != nil {
		formatSlice := format.([]interface{})
		formatExpr, _ = formatSlice[1].(*structs.StringExpr)
	}
	return &structs.TextExpr{
		IsTerminal: false,
		Op:         "tostring",
		Val:        value.(*structs.ValueExpr),
		Format:     formatExpr,
	}, nil
}

func (p *parser) callonTextExpr60() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr60(stack["value"], stack["format"])
}

func (c *current) onTextExpr72(opName, expr, strToRemoveExpr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}

	stringExpr, ok := expr.(*structs.StringExpr)
	if !ok {
		return nil, fmt.Errorf("Spl peg: TextExpr: Failed to assert expr as *structs.StringExpr: %v", err)
	}

	strToRemove := " \t"
	if strToRemoveExpr != nil {
		strToRemove = strToRemoveExpr.(string)
	}

	node := &structs.TextExpr{
		Op:          opNameStr,
		Value:       stringExpr,
		StrToRemove: removeQuotes(strToRemove),
	}

	return node, nil
}

func (p *parser) callonTextExpr72() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr72(stack["opName"], stack["expr"], stack["strToRemoveExpr"])
}

func (c *current) onStrToRemoveExpr1(strToRemove any) (any, error) {
	return strToRemove, nil
}

func (p *parser) callonStrToRemoveExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStrToRemoveExpr1(stack["strToRemove"])
}

func (c *current) onEvalFieldToRead2() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEvalFieldToRead2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalFieldToRead2()
}

func (c *current) onEvalFieldToRead8(field any) (any, error) {
	return field, nil
}

func (p *parser) callonEvalFieldToRead8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalFieldToRead8(stack["field"])
}

func (c *current) onWhereBlock1(condition any) (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			FilterRows: condition.(*structs.BoolExpr),
		},
	}

	return queryAgg, nil
}

func (p *parser) callonWhereBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereBlock1(stack["condition"])
}

func (c *current) onBoolExpr1(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonBoolExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExpr1(stack["expr"])
}

func (c *current) onBoolExprLevel41(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.BoolExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.BoolExpr{
			IsTerminal: false,
			BoolOp:     structs.BoolOpOr,
			LeftBool:   cur,
			RightBool:  opAndClause[1].(*structs.BoolExpr),
		}
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel41(stack["first"], stack["rest"])
}

func (c *current) onBoolExprLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.BoolExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.BoolExpr{
			IsTerminal: false,
			BoolOp:     structs.BoolOpAnd,
			LeftBool:   cur,
			RightBool:  opAndClause[1].(*structs.BoolExpr),
		}
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel31(stack["first"], stack["rest"])
}

func (c *current) onBoolExprLevel22(first any) (any, error) {
	cur := &structs.BoolExpr{
		IsTerminal: false,
		BoolOp:     structs.BoolOpNot,
		LeftBool:   first.(*structs.BoolExpr),
		RightBool:  nil,
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel22(stack["first"])
}

func (c *current) onBoolExprLevel29(first any) (any, error) {
	return first, nil
}

func (p *parser) callonBoolExprLevel29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel29(stack["first"])
}

func (c *current) onBoolExprLevel12(first any) (any, error) {
	return first, nil
}

func (p *parser) callonBoolExprLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel12(stack["first"])
}

func (c *current) onBoolExprLevel18(op, value any) (any, error) {
	opNameStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: BoolExpr: %v", err)
	}
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  value.(*structs.ValueExpr),
		RightValue: nil,
		ValueOp:    opNameStr,
	}
	return expr, nil
}

func (p *parser) callonBoolExprLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel18(stack["op"], stack["value"])
}

func (c *current) onBoolExprLevel120(likeExpr any) (any, error) {
	return likeExpr, nil
}

func (p *parser) callonBoolExprLevel120() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel120(stack["likeExpr"])
}

func (c *current) onLikeExpr2(left, right any) (any, error) {
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  left.(*structs.ValueExpr),
		RightValue: right.(*structs.ValueExpr),
		ValueOp:    "like",
	}
	return expr, nil
}

func (p *parser) callonLikeExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLikeExpr2(stack["left"], stack["right"])
}

func (c *current) onLikeExpr11(stringr, pattern any) (any, error) {
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  stringr.(*structs.ValueExpr),
		RightValue: pattern.(*structs.ValueExpr),
		ValueOp:    "like",
	}
	return expr, nil

}

func (p *parser) callonLikeExpr11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLikeExpr11(stack["stringr"], stack["pattern"])
}

func (c *current) onLikeExpr21(stringVal, pattern any) (any, error) {
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  stringVal.(*structs.ValueExpr),
		RightValue: pattern.(*structs.ValueExpr),
		ValueOp:    "match",
	}
	return expr, nil

}

func (p *parser) callonLikeExpr21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLikeExpr21(stack["stringVal"], stack["pattern"])
}

func (c *current) onLikeExpr31(cidr, ip any) (any, error) {
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  cidr.(*structs.ValueExpr),
		RightValue: ip.(*structs.ValueExpr),
		ValueOp:    "cidrmatch",
	}
	return expr, nil
}

func (p *parser) callonLikeExpr31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLikeExpr31(stack["cidr"], stack["ip"])
}

func (c *current) onLikeExpr41(inExpr any) (any, error) {
	return inExpr, nil
}

func (p *parser) callonLikeExpr41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLikeExpr41(stack["inExpr"])
}

func (c *current) onLikeExpr44(boolComparisonExpr any) (any, error) {
	return boolComparisonExpr, nil
}

func (p *parser) callonLikeExpr44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLikeExpr44(stack["boolComparisonExpr"])
}

func (c *current) onBoolComparisonExpr1(left, op, right any) (any, error) {
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  left.(*structs.ValueExpr),
		RightValue: right.(*structs.ValueExpr),
		ValueOp:    op.(string),
	}

	return expr, nil
}

func (p *parser) callonBoolComparisonExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolComparisonExpr1(stack["left"], stack["op"], stack["right"])
}

func (c *current) onInExpr2(left, valueToJudge, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ValueExpr, 1+len(restSlice))
	slice[0] = valueToJudge.(*structs.ValueExpr)

	for i := range restSlice {
		valueAtom := restSlice[i].([]any)
		slice[i+1] = valueAtom[1].(*structs.ValueExpr)
	}

	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  left.(*structs.ValueExpr),
		ValueList:  slice,
		ValueOp:    "in",
	}
	return expr, nil
}

func (p *parser) callonInExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInExpr2(stack["left"], stack["valueToJudge"], stack["rest"])
}

func (c *current) onInExpr17(valueToJudge, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ValueExpr, len(restSlice))

	for i := range restSlice {
		valueAtom := restSlice[i].([]any)
		slice[i] = valueAtom[1].(*structs.ValueExpr)
	}

	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  valueToJudge.(*structs.ValueExpr),
		ValueList:  slice,
		ValueOp:    "in",
	}
	return expr, nil
}

func (p *parser) callonInExpr17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInExpr17(stack["valueToJudge"], stack["rest"])
}

func (c *current) onValueExpr2(condition any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMConditionExpr,
		ConditionExpr: condition.(*structs.ConditionExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr2(stack["condition"])
}

func (c *current) onValueExpr5(condition any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMConditionExpr,
		ConditionExpr: condition.(*structs.ConditionExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr5(stack["condition"])
}

func (c *current) onValueExpr11(numeric any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMNumericExpr,
		NumericExpr:   numeric.(*structs.NumericExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr11(stack["numeric"])
}

func (c *current) onValueExpr14(str any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMStringExpr,
		StringExpr:    str.(*structs.StringExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr14(stack["str"])
}

func (c *current) onValueExpr17(str any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMStringExpr,
		StringExpr:    str.(*structs.StringExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr17(stack["str"])
}

func (c *current) onValueExpr23(boolean any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolean.(*structs.BoolExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr23(stack["boolean"])
}

func (c *current) onStringExpr2(text any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMTextExpr,
		TextExpr:       text.(*structs.TextExpr),
	}

	return expr, nil
}

func (p *parser) callonStringExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr2(stack["text"])
}

func (c *current) onStringExpr8(str any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMRawString,
		RawString:      removeQuotes(str),
	}

	return expr, nil
}

func (p *parser) callonStringExpr8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr8(stack["str"])
}

func (c *current) onStringExpr14(field any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMField,
		FieldName:      field.(string),
	}

	return expr, nil
}

func (p *parser) callonStringExpr14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr14(stack["field"])
}

func (c *current) onStringExpr26(concat any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMConcatExpr,
		ConcatExpr:     concat.(*structs.ConcatExpr),
	}

	return expr, nil
}

func (p *parser) callonStringExpr26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr26(stack["concat"])
}

func (c *current) onConcatExpr1(first, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ConcatAtom, 1+len(restSlice))
	slice[0] = first.(*structs.ConcatAtom)

	for i := range restSlice {
		concatAndAtom := restSlice[i].([]any)
		slice[i+1] = concatAndAtom[1].(*structs.ConcatAtom)
	}

	expr := &structs.ConcatExpr{
		Atoms: slice,
	}

	return expr, nil
}

func (p *parser) callonConcatExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatExpr1(stack["first"], stack["rest"])
}

func (c *current) onConcatAtom2(text any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField:  false,
		Value:    "",
		TextExpr: text.(*structs.TextExpr),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom2(stack["text"])
}

func (c *current) onConcatAtom5(str any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: false,
		Value:   removeQuotes(str),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom5(stack["str"])
}

func (c *current) onConcatAtom8(number any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: false,
		Value:   number.(string),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom8(stack["number"])
}

func (c *current) onConcatAtom11(field any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: true,
		Value:   field.(string),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom11(stack["field"])
}

func (c *current) onNumericExpr1(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExpr1(stack["expr"])
}

func (c *current) onNumericExprLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.NumericExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.NumericExpr{
			IsTerminal:      false,
			Op:              opAndClause[0].(string),
			Left:            cur,
			Right:           opAndClause[1].(*structs.NumericExpr),
			NumericExprMode: structs.NEMNumericExpr,
		}
	}

	return cur, nil
}

func (p *parser) callonNumericExprLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel31(stack["first"], stack["rest"])
}

func (c *current) onNumericExprLevel21(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.NumericExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.NumericExpr{
			IsTerminal:      false,
			Op:              opAndClause[0].(string),
			Left:            cur,
			Right:           opAndClause[1].(*structs.NumericExpr),
			NumericExprMode: structs.NEMNumericExpr,
		}
	}

	return cur, nil
}

func (p *parser) callonNumericExprLevel21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel21(stack["first"], stack["rest"])
}

func (c *current) onRoundPrecisionExpr1(expr any) (any, error) {
	rightNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	return rightNumericExpr, nil
}

func (p *parser) callonRoundPrecisionExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRoundPrecisionExpr1(stack["expr"])
}

func (c *current) onNumericExprLevel12(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericExprLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel12(stack["expr"])
}

func (c *current) onNumericExprLevel18(numericEvalExpr any) (any, error) {
	return numericEvalExpr, nil
}

func (p *parser) callonNumericExprLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel18(stack["numericEvalExpr"])
}

func (c *current) onNumericExprLevel111(field any) (any, error) {
	expr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    true,
		Value:           field.(string),
		NumericExprMode: structs.NEMNumberField,
	}

	return expr, nil
}

func (p *parser) callonNumericExprLevel111() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel111(stack["field"])
}

func (c *current) onNumericExprLevel114(number any) (any, error) {
	expr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    false,
		Value:           number.(string),
		NumericExprMode: structs.NEMNumber,
	}

	return expr, nil
}

func (p *parser) callonNumericExprLevel114() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel114(stack["number"])
}

func (c *current) onNumericEvalExpr2(opName, expr any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)
	node, err := createNumericExpr(opNameStr, leftNumericExpr, nil, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr2(stack["opName"], stack["expr"])
}

func (c *current) onNumericEvalExpr15(roundExpr, expr, roundPrecision any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	var rightNumericExpr *structs.NumericExpr
	if roundPrecision != nil {
		rightNumericExpr, ok = roundPrecision.(*structs.NumericExpr)
		if !ok {
			return nil, fmt.Errorf("Failed to assert roundPrecision as *structs.NumericExpr")
		}
	}

	node, err := createNumericExpr("round", leftNumericExpr, rightNumericExpr, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr15(stack["roundExpr"], stack["expr"], stack["roundPrecision"])
}

func (c *current) onNumericEvalExpr26() (any, error) {
	return &structs.NumericExpr{
		IsTerminal: true,
		Op:         "now",
	}, nil
}

func (p *parser) callonNumericEvalExpr26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr26()
}

func (c *current) onNumericEvalExpr30(stringExpr, baseExpr any) (any, error) {
	stringExprConverted, ok := stringExpr.(*structs.StringExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert stringExpr as *structs.StringExpr")
	}

	var baseExprConverted *structs.NumericExpr
	if baseExpr != nil {
		baseSlice, ok := baseExpr.([]interface{})
		if ok && len(baseSlice) > 1 {
			if base, ok := baseSlice[1].(*structs.NumericExpr); ok {
				baseExprConverted = base
			} else {
				return nil, fmt.Errorf("Failed to assert base as *structs.NumericExpr")
			}
		}
	}

	node := &structs.NumericExpr{
		IsTerminal:      false,
		Op:              "tonumber",
		Left:            nil,
		Right:           baseExprConverted,
		Val:             stringExprConverted,
		NumericExprMode: structs.NEMNumericExpr,
	}
	return node, nil
}

func (p *parser) callonNumericEvalExpr30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr30(stack["stringExpr"], stack["baseExpr"])
}

func (c *current) onNumericEvalExpr42(lenExpr, expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericEvalExpr42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr42(stack["lenExpr"], stack["expr"])
}

func (c *current) onLenExpr2(str any) (any, error) {

	leftNumericExpr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    false,
		Value:           str.(string),
		NumericExprMode: structs.NEMLenString,
	}

	node, err := createNumericExpr("len", leftNumericExpr, nil, structs.NEMLenString)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonLenExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLenExpr2(stack["str"])
}

func (c *current) onLenExpr8(field any) (any, error) {

	leftNumericExpr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    true,
		Value:           field.(string),
		NumericExprMode: structs.NEMLenField,
	}

	node, err := createNumericExpr("len", leftNumericExpr, nil, structs.NEMLenField)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonLenExpr8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLenExpr8(stack["field"])
}

func (c *current) onHeadBlock2(intAsStr any) (any, error) {
	limit, err := strconv.ParseUint(intAsStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid limit (%v): %v", intAsStr.(string), err)
	}

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			MaxRows: limit,
		},
	}

	return queryAgg, nil
}

func (p *parser) callonHeadBlock2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadBlock2(stack["intAsStr"])
}

func (c *current) onHeadBlock12() (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			MaxRows: uint64(10), // From https://docs.splunk.com/Documentation/Splunk/9.1.0/SearchReference/Head
		},
	}

	return queryAgg, nil
}

func (p *parser) callonHeadBlock12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadBlock12()
}

func (c *current) onAggregationList1(first, rest any) (any, error) {
	// Convert `rest` to a slice. Each element of the slice will be a 2-element
	// slice where the first element is ", " and the second is an Aggregator.
	restSlice := rest.([]any)

	numAggs := 1 + len(restSlice)
	aggsSlice := make([]*aggregator, numAggs)
	aggsSlice[0] = first.(*aggregator)

	for i := 1; i < numAggs; i++ {
		separatorAndAgg := restSlice[i-1].([]any)
		aggsSlice[i] = separatorAndAgg[1].(*aggregator)
	}

	return aggsSlice, nil
}

func (p *parser) callonAggregationList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregationList1(stack["first"], stack["rest"])
}

func (c *current) onAggregator1(aggFunc, asField any) (any, error) {
	agg := &aggregator{}
	agg.measureAgg = aggFunc.(*structs.MeasureAggregator)

	if asField != nil {
		agg.renameOutputField = true
		agg.outputFieldNewName = asField.(string)
	}

	return agg, nil
}

func (p *parser) callonAggregator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregator1(stack["aggFunc"], stack["asField"])
}

func (c *current) onAggFunction1(agg any) (any, error) {
	return agg, nil
}

func (p *parser) callonAggFunction1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggFunction1(stack["agg"])
}

func (c *current) onAsField1(field any) (any, error) {
	fieldStr := field.(string)

	if strings.Contains(fieldStr, "*") {
		return nil, errors.New("The field specified in `AS` cannot contain wildcards")
	}

	return fieldStr, nil
}

func (p *parser) callonAsField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsField1(stack["field"])
}

func (c *current) onAggCount2(boolExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Count,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggCount2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggCount2(stack["boolExpr"])
}

func (c *current) onAggCount12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Count,
	}

	return agg, nil
}

func (p *parser) callonAggCount12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggCount12(stack["field"])
}

func (c *current) onAggCount21() (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  "*",
		MeasureFunc: utils.Count,
	}

	return agg, nil
}

func (p *parser) callonAggCount21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggCount21()
}

func (c *current) onAggDistinctCount2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Cardinality,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggDistinctCount2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggDistinctCount2(stack["valueExpr"])
}

func (c *current) onAggDistinctCount12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Cardinality,
	}

	return agg, nil
}

func (p *parser) callonAggDistinctCount12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggDistinctCount12(stack["field"])
}

func (c *current) onAggAvg2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Avg,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggAvg2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAvg2(stack["boolComparisonExpr"])
}

func (c *current) onAggAvg12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Avg,
	}

	return agg, nil
}

func (p *parser) callonAggAvg12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAvg12(stack["field"])
}

func (c *current) onAggMin2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Min,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggMin2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMin2(stack["boolComparisonExpr"])
}

func (c *current) onAggMin12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Min,
	}

	return agg, nil
}

func (p *parser) callonAggMin12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMin12(stack["field"])
}

func (c *current) onAggMax2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Max,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggMax2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMax2(stack["boolComparisonExpr"])
}

func (c *current) onAggMax12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Max,
	}

	return agg, nil
}

func (p *parser) callonAggMax12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMax12(stack["field"])
}

func (c *current) onAggRange2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Range,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggRange2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRange2(stack["boolComparisonExpr"])
}

func (c *current) onAggRange12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Range,
	}

	return agg, nil
}

func (p *parser) callonAggRange12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRange12(stack["field"])
}

func (c *current) onAggSum2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Sum,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggSum2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSum2(stack["boolComparisonExpr"])
}

func (c *current) onAggSum12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Sum,
	}

	return agg, nil
}

func (p *parser) callonAggSum12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSum12(stack["field"])
}

func (c *current) onAggValues2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Values,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggValues2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggValues2(stack["valueExpr"])
}

func (c *current) onAggValues10(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Values,
	}

	return agg, nil
}

func (p *parser) callonAggValues10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggValues10(stack["field"])
}

func (c *current) onFieldWithNumberValue1(keyValuePair any) (any, error) {
	return keyValuePair, nil
}

func (p *parser) callonFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithNumberValue1(stack["keyValuePair"])
}

func (c *current) onNamedFieldWithNumberValue1(key, op, value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     op.(string),
			Field:  key.(string),
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonNamedFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedFieldWithNumberValue1(stack["key"], stack["op"], stack["value"])
}

func (c *current) onUnnamedFieldWithNumberValue1(value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     "=",
			Field:  "*",
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonUnnamedFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnnamedFieldWithNumberValue1(stack["value"])
}

func (c *current) onFieldWithBooleanValue1(key, op, value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     op.(string),
			Field:  key.(string),
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonFieldWithBooleanValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithBooleanValue1(stack["key"], stack["op"], stack["value"])
}

func (c *current) onFieldWithStringValue1(keyValuePair any) (any, error) {
	return keyValuePair, nil
}

func (p *parser) callonFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithStringValue1(stack["keyValuePair"])
}

func (c *current) onNamedFieldWithStringValue1(key, op, value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     op.(string),
			Field:  key.(string),
			Values: value,
		},
	}
	return node, nil
}

func (p *parser) callonNamedFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedFieldWithStringValue1(stack["key"], stack["op"], stack["value"])
}

func (c *current) onUnnamedFieldWithStringValue1(value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     "=",
			Field:  "*",
			Values: value,
		},
	}
	return node, nil
}

func (p *parser) callonUnnamedFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnnamedFieldWithStringValue1(stack["value"])
}

func (c *current) onFieldNameList1(first, rest any) (any, error) {
	// Convert `rest` to a slice. Each element of the slice will be a 2-element
	// slice where the first element is ", " and the second is a FieldName.
	restSlice := rest.([]any)

	numFieldNames := 1 + len(restSlice)
	fields := make([]string, numFieldNames)
	fields[0] = first.(string)

	for i := 1; i < numFieldNames; i++ {
		separatorAndField := restSlice[i-1].([]any)
		fields[i] = separatorAndField[1].(string)
	}

	return fields, nil
}

func (p *parser) callonFieldNameList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldNameList1(stack["first"], stack["rest"])
}

func (c *current) onFieldName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFieldName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldName1()
}

func (c *current) onString1(str any) (any, error) {
	return str, nil
}

func (p *parser) callonString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onString1(stack["str"])
}

func (c *current) onQuotedString1() (any, error) {
	// The returned string has quotes as the first and last character.
	return string(c.text), nil
}

func (p *parser) callonQuotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString1()
}

func (c *current) onBoolean1() (any, error) {
	boolValue, _ := strconv.ParseBool(string(c.text))
	return boolValue, nil
}

func (p *parser) callonBoolean1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolean1()
}

func (c *current) onUnquotedString1() (any, error) {
	// Return the string wrapped in quotes.
	str := "\"" + string(c.text) + "\""
	return str, nil
}

func (p *parser) callonUnquotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedString1()
}

func (c *current) onRenamePattern1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonRenamePattern1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenamePattern1()
}

func (c *current) onNumber1(number any) (any, error) {
	return json.Number(number.(string)), nil
}

func (p *parser) callonNumber1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1(stack["number"])
}

func (c *current) onNumberAsString1(number any) (any, error) {
	return number, nil
}

func (p *parser) callonNumberAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumberAsString1(stack["number"])
}

func (c *current) onFloatAsString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatAsString1()
}

func (c *current) onIntegerAsString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIntegerAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerAsString1()
}

func (c *current) onEqualityOperator1(op any) (any, error) {
	opStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: EqualityOperator: %v", err)
	}
	return opStr, nil
}

func (p *parser) callonEqualityOperator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator1(stack["op"])
}

func (c *current) onInequalityOperator1(op any) (any, error) {
	opStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: InequalityOperator: %v", err)
	}
	return opStr, nil
}

func (p *parser) callonInequalityOperator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInequalityOperator1(stack["op"])
}

func (c *current) onEqualityOrInequality2(op any) (any, error) {
	return op, nil
}

func (p *parser) callonEqualityOrInequality2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOrInequality2(stack["op"])
}

func (c *current) onEqualityOrInequality5(op any) (any, error) {
	return op, nil
}

func (p *parser) callonEqualityOrInequality5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOrInequality5(stack["op"])
}

func (c *current) onOpPlus1() (any, error) {
	return "+", nil
}

func (p *parser) callonOpPlus1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpPlus1()
}

func (c *current) onOpMinus1() (any, error) {
	return "-", nil
}

func (p *parser) callonOpMinus1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpMinus1()
}

func (c *current) onOpMul1() (any, error) {
	return "*", nil
}

func (p *parser) callonOpMul1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpMul1()
}

func (c *current) onOpDiv1() (any, error) {
	return "/", nil
}

func (p *parser) callonOpDiv1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpDiv1()
}

func (c *current) onSecond1() (any, error) {
	return utils.TMSecond, nil
}

func (p *parser) callonSecond1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSecond1()
}

func (c *current) onMinute1() (any, error) {
	return utils.TMMinute, nil
}

func (p *parser) callonMinute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinute1()
}

func (c *current) onHour1() (any, error) {
	return utils.TMHour, nil
}

func (p *parser) callonHour1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHour1()
}

func (c *current) onDay1() (any, error) {
	return utils.TMDay, nil
}

func (p *parser) callonDay1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDay1()
}

func (c *current) onWeek1() (any, error) {
	return utils.TMWeek, nil
}

func (p *parser) callonWeek1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeek1()
}

func (c *current) onMonth1() (any, error) {
	return utils.TMMonth, nil
}

func (p *parser) callonMonth1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMonth1()
}

func (c *current) onQuarter1() (any, error) {
	return utils.TMQuarter, nil
}

func (p *parser) callonQuarter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuarter1()
}

func (c *current) onSubseconds1() (any, error) {
	timeUnit, err := utils.ConvertSubseconds(string(c.text))
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Subseconds: %v", err)
	}
	return timeUnit, nil
}

func (p *parser) callonSubseconds1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubseconds1()
}

func (c *current) onTransactionBlock1(txnOptions any) (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType:      structs.TransactionType,
		TransactionArguments: txnOptions.(*structs.TransactionArguments),
	}
	return queryAgg, nil
}

func (p *parser) callonTransactionBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionBlock1(stack["txnOptions"])
}

func (c *current) onTransactionOptions1(txnOptions any) (any, error) {

	transactionRequest := &structs.TransactionArguments{}

	if txnOptions != nil {
		txnArgs := txnOptions.(*TxnArgs).arguments
		transactionRequest.Fields = txnArgs.Fields
		transactionRequest.StartsWith = txnArgs.StartsWith
		transactionRequest.EndsWith = txnArgs.EndsWith
	}

	return transactionRequest, nil
}

func (p *parser) callonTransactionOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionOptions1(stack["txnOptions"])
}

func (c *current) onTransactionDefinitionOptionsList1(first, rest any) (any, error) {

	restSlice := rest.([]any)
	txnArgs := &TxnArgs{
		argOption: "txn-definition",
		arguments: &structs.TransactionArguments{},
	}

	numArgs := 1 + len(restSlice)

	for i := 0; i < numArgs; i++ {
		var txnArg *TxnArgs
		if i == 0 {
			txnArg = first.(*TxnArgs)
		} else {
			separatorAndArg := restSlice[i-1].([]any)
			txnArg = separatorAndArg[1].(*TxnArgs)
		}
		argOption := txnArg.argOption

		switch argOption {
		case "fields":
			txnArgs.arguments.Fields = txnArg.arguments.Fields
		case "startswith":
			txnArgs.arguments.StartsWith = txnArg.arguments.StartsWith
		case "endswith":
			txnArgs.arguments.EndsWith = txnArg.arguments.EndsWith
		default:
			return nil, fmt.Errorf("Not a Valid Transaction Argument option")
		}
	}

	return txnArgs, nil
}

func (p *parser) callonTransactionDefinitionOptionsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionDefinitionOptionsList1(stack["first"], stack["rest"])
}

func (c *current) onTransactionDefinitionOption1(option any) (any, error) {
	return option, nil
}

func (p *parser) callonTransactionDefinitionOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionDefinitionOption1(stack["option"])
}

func (c *current) onSpaceSeparatedFieldNameList1(first, rest any) (any, error) {
	var fields []string
	fields = append(fields, first.(string))
	for _, r := range rest.([]any) {
		// Extracting the field name from the tuple (SPACE, FieldName)
		fields = append(fields, r.([]any)[1].(string))
	}

	txnArg := &TxnArgs{
		argOption: "fields",
		arguments: &structs.TransactionArguments{
			Fields: fields,
		},
	}

	return txnArg, nil
}

func (p *parser) callonSpaceSeparatedFieldNameList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpaceSeparatedFieldNameList1(stack["first"], stack["rest"])
}

func (c *current) onStartsWithOption1(strExpr any) (any, error) {
	txnArg := &TxnArgs{
		argOption: "startswith",
		arguments: &structs.TransactionArguments{
			StartsWith: strExpr.(*structs.FilterStringExpr),
		},
	}
	return txnArg, nil
}

func (p *parser) callonStartsWithOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStartsWithOption1(stack["strExpr"])
}

func (c *current) onEndsWithOption1(strExpr any) (any, error) {
	txnArg := &TxnArgs{
		argOption: "endswith",
		arguments: &structs.TransactionArguments{
			EndsWith: strExpr.(*structs.FilterStringExpr),
		},
	}
	return txnArg, nil
}

func (p *parser) callonEndsWithOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEndsWithOption1(stack["strExpr"])
}

func (c *current) onTransactionFilterString1(strExpr any) (any, error) {
	return strExpr, nil
}

func (p *parser) callonTransactionFilterString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionFilterString1(stack["strExpr"])
}

func (c *current) onTransactionQuotedString1(str any) (any, error) {
	return str, nil
}

func (p *parser) callonTransactionQuotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionQuotedString1(stack["str"])
}

func (c *current) onTransactionQuotedStringSearchExpr1(searchClause any) (any, error) {
	filterStrExpr := &structs.FilterStringExpr{
		SearchNode: searchClause.(*ast.Node),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionQuotedStringSearchExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionQuotedStringSearchExpr1(stack["searchClause"])
}

func (c *current) onQuotedStringNoOp1() (any, error) {
	// The returned string has quotes as the first and last character.
	return string(c.text), nil
}

func (p *parser) callonQuotedStringNoOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedStringNoOp1()
}

func (c *current) onTransactionQuotedStringValue1(str any) (any, error) {
	filterStrExpr := &structs.FilterStringExpr{
		StringValue: removeQuotes(str.(string)),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionQuotedStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionQuotedStringValue1(stack["str"])
}

func (c *current) onTransactionSearch1(expr any) (any, error) {

	filterStrExpr := &structs.FilterStringExpr{
		SearchNode: expr.(*ast.Node),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionSearch1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionSearch1(stack["expr"])
}

func (c *current) onTransactionEval1(condition any) (any, error) {
	filterStrExpr := &structs.FilterStringExpr{
		EvalBoolExpr: condition.(*structs.BoolExpr),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionEval1(stack["condition"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize {
		val, ok = p.parseRuleMemoize(rule)
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
