// Code generated by pigeon; DO NOT EDIT.

// Copyright (c) 2021-2024 SigScalr, Inc.
//
// This file is part of SigLens Observability Solution
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

package spl

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"
	"unicode"
	"unicode/utf8"

	"github.com/siglens/siglens/pkg/ast"
	"github.com/siglens/siglens/pkg/segment/aggregations"
	"github.com/siglens/siglens/pkg/segment/query"
	"github.com/siglens/siglens/pkg/segment/structs"
	"github.com/siglens/siglens/pkg/segment/utils"
	log "github.com/sirupsen/logrus"
)

// ConvertCustomDateTimeFormatToEpochMs converts a date string in the format "MM/DD/YYYY:HH:MM:SS"
// to Unix time in milliseconds (epoch ms).
func ConvertCustomDateTimeFormatToEpochMs(dateStr string) (int64, error) {
	loc, _ := time.LoadLocation("Local")
	t, err := time.ParseInLocation("01/02/2006:15:04:05", dateStr, loc)
	if err != nil {
		return 0, err
	}
	return t.UnixMilli(), nil
}

// This function would snap backwards based on unit present.
// For e.x. Consider the time (Wednesday) 06/05/2024:13:37:05.123 (mm/dd/yyyy:hh:mm:ss)
// Snapping on Second would be 06/05/2024:13:37:05.000
// Snapping on Minute would be 06/05/2024:13:37:00.000
// Snapping on Hour would be 06/05/2024:13:00:00.000
// Snapping on Day would be 06/05/2024:00:00:00.000
// Snapping on Month would be 06/05/2024:00:00:00.000
// Snapping on Quarter (would snap to recent most quarter out of Jan 1, Apr 1, Jul 1, Oct 1) would be 04/01/2024:00:00:00.000
// Snapping on Year would be 01/01/2024:00:00:00.000
// Snapping on weekdays (w0 to w7) would snap backward to that weekday.
// Snapping on w0 would be (Sunday) 06/02/2024:00:00:00.000
// Snapping on w1 would be (Monday) 06/03/2024:00:00:00.000 and so on.
// Snap on w0 and w7 is same.
// snap parameter would be a string of the form w0 or it would be utils.TimeUnit constant integers converted to string type (see Rule: RelTimeUnit)
func applySnap(snap string, t time.Time) (time.Time, error) {
	sec := t.Second()
	min := t.Minute()
	hour := t.Hour()
	day := t.Day()
	week := t.Weekday()
	mon := t.Month()
	year := t.Year()

	if snap[0] != 'w' {
		tunit, err := strconv.Atoi(snap)
		if err != nil {
			return t, fmt.Errorf("Error while converting the snap: %v to integer, err: %v", snap, err)
		}

		switch utils.TimeUnit(tunit) {
		case utils.TMSecond:
			return time.Date(year, mon, day, hour, min, sec, 0, time.Local), nil
		case utils.TMMinute:
			return time.Date(year, mon, day, hour, min, 0, 0, time.Local), nil
		case utils.TMHour:
			return time.Date(year, mon, day, hour, 0, 0, 0, time.Local), nil
		case utils.TMDay:
			return time.Date(year, mon, day, 0, 0, 0, 0, time.Local), nil
		case utils.TMWeek:
			diff := week - time.Sunday
			return time.Date(year, mon, day-int(diff), 0, 0, 0, 0, time.Local), nil
		case utils.TMMonth:
			return time.Date(year, mon, 1, 0, 0, 0, 0, time.Local), nil
		case utils.TMQuarter:
			if mon >= time.October {
				mon = time.October
			} else if mon >= time.July {
				mon = time.July
			} else if mon >= time.April {
				mon = time.April
			} else {
				mon = time.January
			}
			return time.Date(year, mon, 1, 0, 0, 0, 0, time.Local), nil
		case utils.TMYear:
			return time.Date(year, 1, 1, 0, 0, 0, 0, time.Local), nil
		default:
			return t, fmt.Errorf("Unsupported time unit for relative timestamp: %v", tunit)
		}
	} else {
		if len(snap) != 2 {
			return t, fmt.Errorf("Error for special week snap, should follow the regex w[0-7] got: %v", snap)
		}
		weeknum := int(snap[1] - '0')
		if weeknum == 7 {
			weeknum = 0
		}
		diff := int(week) - weeknum
		if diff < 0 {
			diff += 7
		}
		return time.Date(year, mon, day, 0, 0, 0, 0, time.Local).AddDate(0, 0, -diff), nil
	}
}

func applyOffset(num int64, unit utils.TimeUnit, t time.Time) (time.Time, error) {

	durNum := time.Duration(num)

	switch unit {
	case utils.TMSecond:
		return t.Add(durNum * time.Second), nil
	case utils.TMMinute:
		return t.Add(durNum * time.Minute), nil
	case utils.TMHour:
		return t.Add(durNum * time.Hour), nil
	case utils.TMDay:
		return t.AddDate(0, 0, int(num)), nil
	case utils.TMWeek:
		return t.AddDate(0, 0, 7*int(num)), nil
	case utils.TMMonth:
		return t.AddDate(0, int(num), 0), nil
	case utils.TMQuarter:
		return t.AddDate(0, 4*int(num), 0), nil
	case utils.TMYear:
		return t.AddDate(int(num), 0, 0), nil
	default:
		return t, fmt.Errorf("Unsupported time unit for relative timestamp: %v", unit)
	}
}

func CalculateRelativeTime(timeModifier ast.TimeModifier, currTime time.Time) (int64, error) {
	var epoch int64 = 0
	var err error
	if timeModifier.AbsoluteTime == "now" {
		epoch = currTime.UnixMilli()
	} else if timeModifier.AbsoluteTime == "1" {
		return 1, nil
	} else if timeModifier.AbsoluteTime != "" {
		epoch, err = ConvertCustomDateTimeFormatToEpochMs(timeModifier.AbsoluteTime)
		if err != nil {
			return 0, err
		}
	} else {
		offsetNum := timeModifier.RelativeTime.RelativeTimeOffset.Offset
		offsetTimeUnit := timeModifier.RelativeTime.RelativeTimeOffset.TimeUnit
		snap := timeModifier.RelativeTime.Snap
		finalTime := currTime
		if offsetNum != 0 {
			finalTime, err = applyOffset(offsetNum, offsetTimeUnit, finalTime)
			if err != nil {
				return 0, err
			}
		}
		if snap != "" {
			finalTime, err = applySnap(snap, finalTime)
			if err != nil {
				return 0, err
			}
		}
		epoch = finalTime.UnixMilli()
	}

	return epoch, nil
}

func getParseError(err error) error {
	switch ev := err.(type) {
	case errList:
		if pe, ok := ev[0].(*parserError); ok {
			return &ast.ParseError{
				Inner:    pe.Inner,
				Line:     pe.pos.line,
				Column:   pe.pos.col,
				Offset:   pe.pos.offset,
				Prefix:   pe.prefix,
				Expected: pe.expected,
			}
		}
	}
	return err
}

// Remove the first and last character of the string
func removeQuotes(s any) string {
	str := s.(string)
	if len(str) < 3 {
		return ""
	}

	return str[1 : len(str)-1]
}

// Check if it rename fields with similar names using a wildcard
func isRegexRename(originalPattern, newPattern string) (bool, error) {
	oldWildcards := strings.Count(originalPattern, "*")
	newWildcards := strings.Count(newPattern, "*")

	if oldWildcards == 0 && newWildcards == 0 {
		return false, nil
	} else if oldWildcards > 0 && oldWildcards == newWildcards {
		return true, nil
	} else {
		return false, errors.New("Patterns do not match")
	}
}

func deMorgansLaw(node *ast.Node) {
	switch node.NodeType {
	case ast.NodeTerminal:
		switch node.Comparison.Op {
		case "=":
			node.Comparison.Op = "!="
		case "!=":
			node.Comparison.Op = "="
		case ">":
			node.Comparison.Op = "<="
		case "<":
			node.Comparison.Op = ">="
		case ">=":
			node.Comparison.Op = "<"
		case "<=":
			node.Comparison.Op = ">"
		default:
			log.Errorf("deMorgansLaw: unexpected node comparison op: %v", node.Comparison.Op)
		}
	case ast.NodeAnd:
		node.NodeType = ast.NodeOr
		deMorgansLaw(node.Left)
		deMorgansLaw(node.Right)
	case ast.NodeOr:
		node.NodeType = ast.NodeAnd
		deMorgansLaw(node.Left)
		deMorgansLaw(node.Right)
	default:
		log.Errorf("deMorgansLaw: unexpected NodeType: %v", node.NodeType)
	}
}

// Generate NumericExpr struct for eval functions
func createNumericExpr(op string, leftNumericExpr *structs.NumericExpr, rightNumericExpr *structs.NumericExpr, numericExprMode structs.NumericExprMode) (*structs.NumericExpr, error) {
	if leftNumericExpr == nil {
		return nil, fmt.Errorf("expr cannot be nil")
	}

	return &structs.NumericExpr{
		IsTerminal:      false,
		Op:              op,
		Left:            leftNumericExpr,
		Right:           rightNumericExpr,
		NumericExprMode: numericExprMode,
	}, nil
}

func transferUint8ToString(opName interface{}) (string, error) {
	strData, ok := opName.([]byte)
	if !ok {
		return "", fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)
	return opNameStr, nil
}

func transferPCREToRE2(pattern string) string {
	pattern = strings.Replace(pattern, "(?<", "(?P<", -1)
	return pattern
}

func getRexColNames(pattern string) ([]string, error) {
	re, err := regexp.Compile(`\?<(?P<GroupName>[a-zA-Z0-9_]+)>`)
	if err != nil {
		return nil, fmt.Errorf("getRexColNames: There are some errors in the pattern: %v", err)
	}
	matches := re.FindAllStringSubmatch(pattern, -1)

	var rexColNames []string
	for _, match := range matches {
		rexColNames = append(rexColNames, match[1])
	}

	return rexColNames, nil
}

func SearchMatchGetFields(searchStr string) ([]string, error) {

	kvPairs := strings.Fields(searchStr)
	if len(kvPairs) == 0 {
		return []string{}, fmt.Errorf("Spl peg: Invalid syntax for searchmatch")
	}
	fieldList := make([]string, 0)

	for _, kvPair := range kvPairs {
		parts := strings.Split(kvPair, "=")
		if len(parts) == 1 {
			if len(kvPairs) == 1 {
				fieldList = append(fieldList, "*")
				return fieldList, nil
			} else {
				return []string{}, fmt.Errorf("Spl peg: Invalid syntax for searchmatch")
			}
		}
		if len(parts) != 2 {
			return []string{}, fmt.Errorf("Spl peg: Invalid syntax for searchmatch")
		}
		// fieldname is empty
		if len(parts[0]) == 0 {
			return []string{}, fmt.Errorf("Spl peg: Invalid syntax for searchmatch")
		}

		fieldList = append(fieldList, parts[0])
	}

	return fieldList, nil
}

func initializeStatsOptions() *structs.StatsOptions {
	return &structs.StatsOptions{
		Delim:          " ",
		Partitions:     1,
		DedupSplitvals: false,
		Allnum:         false,
	}
}

func createSPathExpr(inputField, pathField, outputField string) (*structs.QueryAggregators, error) {

	if inputField == "" {
		inputField = "_raw"
	}

	spathExpr := &structs.SPathExpr{
		InputColName:  inputField,
		Path:          pathField,
		OutputColName: outputField,
	}
	return &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: &structs.LetColumnsRequest{
				ValueColRequest: &structs.ValueExpr{
					ValueExprMode: structs.VEMStringExpr,
					StringExpr: &structs.StringExpr{
						StringExprMode: structs.SEMTextExpr,
						TextExpr: &structs.TextExpr{
							IsTerminal: true,
							Op:         "spath",
							SPathExpr:  spathExpr,
						},
					},
				},
				NewColName: outputField,
			},
		},
	}, nil
}
func createEventCountExpr(indices []string, list_vix, report_size, summarize bool) (*structs.QueryAggregators, error) {
	eventCountExpr := &structs.EventCountExpr{
		Indices:    indices,
		ListVix:    list_vix,
		ReportSize: report_size,
		Summarize:  summarize,
	}
	return &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: &structs.LetColumnsRequest{
				EventCountRequest: eventCountExpr,
			},
		},
	}, nil
}
func getDefaultFormatResultsExpr() *structs.FormatResultsRequest {
	return &structs.FormatResultsRequest{
		MVSeparator: "OR",
		MaxResults:  0,
		EmptyString: "NOT()",
		RowColOptions: &structs.RowColOptions{
			RowPrefix:       "(",
			ColumnPrefix:    "(",
			ColumnSeparator: "AND",
			ColumnEnd:       ")",
			RowSeparator:    "OR",
			RowEnd:          ")",
		},
	}
}

type aggregator struct {
	measureAgg         *structs.MeasureAggregator
	renameOutputField  bool
	outputFieldNewName string
}

type singleAggTemp struct {
	aggregators   []*aggregator
	SplitByClause *structs.SplitByClause
}

type TxnArgs struct {
	argOption string
	arguments *structs.TransactionArguments
}

type TimechartArgs struct {
	singleAggExpr *singleAggTemp
	// TODO: Add eval clause expr.
	tcOptions *structs.TcOptions
}

type MultiValueColOptionArgs struct {
	argOption string
	mvColExpr *structs.MultiValueColLetRequest
}

type HeadOptionArgs struct {
	argOption string
	headExpr  *structs.HeadExpr
}

type BinOptionArgs struct {
	argOption  string
	binOptions *structs.BinCmdOptions
}

type SPathFieldExpr struct {
	PathValue       string
	IsPathFieldName bool
}

type FormatResultsRequestArguments struct {
	argOption        string
	formatResultExpr *structs.FormatResultsRequest
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Start",
			pos:  position{line: 452, col: 1, offset: 14482},
			expr: &actionExpr{
				pos: position{line: 452, col: 10, offset: 14491},
				run: (*parser).callonStart1,
				expr: &seqExpr{
					pos: position{line: 452, col: 10, offset: 14491},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 452, col: 10, offset: 14491},
							expr: &ruleRefExpr{
								pos:  position{line: 452, col: 10, offset: 14491},
								name: "SPACE",
							},
						},
						&labeledExpr{
							pos:   position{line: 452, col: 17, offset: 14498},
							label: "initialSearch",
							expr: &ruleRefExpr{
								pos:  position{line: 452, col: 32, offset: 14513},
								name: "InitialSearchBlock",
							},
						},
						&labeledExpr{
							pos:   position{line: 452, col: 52, offset: 14533},
							label: "filterBlocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 452, col: 65, offset: 14546},
								expr: &ruleRefExpr{
									pos:  position{line: 452, col: 66, offset: 14547},
									name: "FilterBlock",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 452, col: 80, offset: 14561},
							label: "queryAggBlocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 452, col: 95, offset: 14576},
								expr: &ruleRefExpr{
									pos:  position{line: 452, col: 96, offset: 14577},
									name: "QueryAggergatorBlock",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 452, col: 119, offset: 14600},
							expr: &ruleRefExpr{
								pos:  position{line: 452, col: 119, offset: 14600},
								name: "SPACE",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 452, col: 126, offset: 14607},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "InitialSearchBlock",
			pos:  position{line: 523, col: 1, offset: 16808},
			expr: &actionExpr{
				pos: position{line: 523, col: 23, offset: 16830},
				run: (*parser).callonInitialSearchBlock1,
				expr: &seqExpr{
					pos: position{line: 523, col: 23, offset: 16830},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 523, col: 23, offset: 16830},
							expr: &ruleRefExpr{
								pos:  position{line: 523, col: 23, offset: 16830},
								name: "CMD_SEARCH",
							},
						},
						&labeledExpr{
							pos:   position{line: 523, col: 35, offset: 16842},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 523, col: 42, offset: 16849},
								name: "ClauseLevel4",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBlock",
			pos:  position{line: 527, col: 1, offset: 16890},
			expr: &actionExpr{
				pos: position{line: 527, col: 16, offset: 16905},
				run: (*parser).callonSearchBlock1,
				expr: &seqExpr{
					pos: position{line: 527, col: 16, offset: 16905},
					exprs: []any{
						&notExpr{
							pos: position{line: 527, col: 16, offset: 16905},
							expr: &ruleRefExpr{
								pos:  position{line: 527, col: 18, offset: 16907},
								name: "ALLCMD",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 527, col: 26, offset: 16915},
							expr: &ruleRefExpr{
								pos:  position{line: 527, col: 26, offset: 16915},
								name: "CMD_SEARCH",
							},
						},
						&labeledExpr{
							pos:   position{line: 527, col: 38, offset: 16927},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 527, col: 45, offset: 16934},
								name: "ClauseLevel4",
							},
						},
					},
				},
			},
		},
		{
			name: "FilterBlock",
			pos:  position{line: 531, col: 1, offset: 16975},
			expr: &actionExpr{
				pos: position{line: 531, col: 16, offset: 16990},
				run: (*parser).callonFilterBlock1,
				expr: &seqExpr{
					pos: position{line: 531, col: 16, offset: 16990},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 531, col: 16, offset: 16990},
							name: "PIPE",
						},
						&labeledExpr{
							pos:   position{line: 531, col: 21, offset: 16995},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 531, col: 28, offset: 17002},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 531, col: 28, offset: 17002},
										name: "SearchBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 531, col: 42, offset: 17016},
										name: "RegexBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 531, col: 55, offset: 17029},
										name: "TimeModifiers",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QueryAggergatorBlock",
			pos:  position{line: 536, col: 1, offset: 17108},
			expr: &actionExpr{
				pos: position{line: 536, col: 25, offset: 17132},
				run: (*parser).callonQueryAggergatorBlock1,
				expr: &labeledExpr{
					pos:   position{line: 536, col: 25, offset: 17132},
					label: "block",
					expr: &choiceExpr{
						pos: position{line: 536, col: 32, offset: 17139},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 536, col: 32, offset: 17139},
								name: "FieldSelectBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 536, col: 51, offset: 17158},
								name: "AggregatorBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 536, col: 69, offset: 17176},
								name: "EvalBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 536, col: 81, offset: 17188},
								name: "WhereBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 536, col: 94, offset: 17201},
								name: "HeadBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 536, col: 106, offset: 17213},
								name: "RexBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 536, col: 117, offset: 17224},
								name: "StatisticBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 536, col: 134, offset: 17241},
								name: "RenameBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 536, col: 148, offset: 17255},
								name: "TimechartBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 536, col: 165, offset: 17272},
								name: "TransactionBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 536, col: 184, offset: 17291},
								name: "DedupBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 536, col: 197, offset: 17304},
								name: "SortBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 536, col: 209, offset: 17316},
								name: "MultiValueBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 536, col: 227, offset: 17334},
								name: "SPathBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 536, col: 240, offset: 17347},
								name: "FormatBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 536, col: 254, offset: 17361},
								name: "EventCountBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 536, col: 272, offset: 17379},
								name: "TailBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 536, col: 284, offset: 17391},
								name: "BinBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldSelectBlock",
			pos:  position{line: 541, col: 1, offset: 17481},
			expr: &actionExpr{
				pos: position{line: 541, col: 21, offset: 17501},
				run: (*parser).callonFieldSelectBlock1,
				expr: &seqExpr{
					pos: position{line: 541, col: 21, offset: 17501},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 541, col: 21, offset: 17501},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 541, col: 26, offset: 17506},
							name: "CMD_FIELDS",
						},
						&labeledExpr{
							pos:   position{line: 541, col: 37, offset: 17517},
							label: "op",
							expr: &zeroOrOneExpr{
								pos: position{line: 541, col: 40, offset: 17520},
								expr: &choiceExpr{
									pos: position{line: 541, col: 41, offset: 17521},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 541, col: 41, offset: 17521},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
										&litMatcher{
											pos:        position{line: 541, col: 47, offset: 17527},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 541, col: 53, offset: 17533},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 541, col: 68, offset: 17548},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 541, col: 75, offset: 17555},
								name: "FieldNameList",
							},
						},
					},
				},
			},
		},
		{
			name: "AggregatorBlock",
			pos:  position{line: 559, col: 1, offset: 18059},
			expr: &actionExpr{
				pos: position{line: 559, col: 20, offset: 18078},
				run: (*parser).callonAggregatorBlock1,
				expr: &seqExpr{
					pos: position{line: 559, col: 20, offset: 18078},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 559, col: 20, offset: 18078},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 559, col: 25, offset: 18083},
							name: "CMD_STATS",
						},
						&labeledExpr{
							pos:   position{line: 559, col: 35, offset: 18093},
							label: "aggs",
							expr: &ruleRefExpr{
								pos:  position{line: 559, col: 40, offset: 18098},
								name: "AggregationList",
							},
						},
						&labeledExpr{
							pos:   position{line: 559, col: 56, offset: 18114},
							label: "byFields",
							expr: &zeroOrOneExpr{
								pos: position{line: 559, col: 65, offset: 18123},
								expr: &ruleRefExpr{
									pos:  position{line: 559, col: 66, offset: 18124},
									name: "GroupbyBlock",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 559, col: 81, offset: 18139},
							label: "options",
							expr: &zeroOrOneExpr{
								pos: position{line: 559, col: 89, offset: 18147},
								expr: &ruleRefExpr{
									pos:  position{line: 559, col: 90, offset: 18148},
									name: "StatsOptions",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatsOptions",
			pos:  position{line: 612, col: 1, offset: 19882},
			expr: &actionExpr{
				pos: position{line: 612, col: 17, offset: 19898},
				run: (*parser).callonStatsOptions1,
				expr: &labeledExpr{
					pos:   position{line: 612, col: 17, offset: 19898},
					label: "option",
					expr: &zeroOrMoreExpr{
						pos: position{line: 612, col: 24, offset: 19905},
						expr: &ruleRefExpr{
							pos:  position{line: 612, col: 25, offset: 19906},
							name: "StatsOption",
						},
					},
				},
			},
		},
		{
			name: "StatsOption",
			pos:  position{line: 650, col: 1, offset: 21347},
			expr: &actionExpr{
				pos: position{line: 650, col: 16, offset: 21362},
				run: (*parser).callonStatsOption1,
				expr: &seqExpr{
					pos: position{line: 650, col: 16, offset: 21362},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 650, col: 16, offset: 21362},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 650, col: 22, offset: 21368},
							label: "optionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 650, col: 32, offset: 21378},
								name: "StatsOptionCMD",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 650, col: 47, offset: 21393},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 650, col: 53, offset: 21399},
							label: "str",
							expr: &choiceExpr{
								pos: position{line: 650, col: 58, offset: 21404},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 650, col: 58, offset: 21404},
										name: "IntegerAsString",
									},
									&ruleRefExpr{
										pos:  position{line: 650, col: 76, offset: 21422},
										name: "EvalFieldToRead",
									},
									&ruleRefExpr{
										pos:  position{line: 650, col: 94, offset: 21440},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatsOptionCMD",
			pos:  position{line: 655, col: 1, offset: 21545},
			expr: &actionExpr{
				pos: position{line: 655, col: 19, offset: 21563},
				run: (*parser).callonStatsOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 655, col: 19, offset: 21563},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 655, col: 27, offset: 21571},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 655, col: 27, offset: 21571},
								val:        "allnum",
								ignoreCase: false,
								want:       "\"allnum\"",
							},
							&litMatcher{
								pos:        position{line: 655, col: 38, offset: 21582},
								val:        "dedup_splitvals",
								ignoreCase: false,
								want:       "\"dedup_splitvals\"",
							},
							&litMatcher{
								pos:        position{line: 655, col: 58, offset: 21602},
								val:        "delim",
								ignoreCase: false,
								want:       "\"delim\"",
							},
							&litMatcher{
								pos:        position{line: 655, col: 68, offset: 21612},
								val:        "partitions",
								ignoreCase: false,
								want:       "\"partitions\"",
							},
						},
					},
				},
			},
		},
		{
			name: "GroupbyBlock",
			pos:  position{line: 663, col: 1, offset: 21802},
			expr: &actionExpr{
				pos: position{line: 663, col: 17, offset: 21818},
				run: (*parser).callonGroupbyBlock1,
				expr: &seqExpr{
					pos: position{line: 663, col: 17, offset: 21818},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 663, col: 17, offset: 21818},
							name: "BY",
						},
						&labeledExpr{
							pos:   position{line: 663, col: 20, offset: 21821},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 663, col: 27, offset: 21828},
								name: "FieldNameList",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexBlock",
			pos:  position{line: 674, col: 1, offset: 22177},
			expr: &actionExpr{
				pos: position{line: 674, col: 15, offset: 22191},
				run: (*parser).callonRegexBlock1,
				expr: &seqExpr{
					pos: position{line: 674, col: 15, offset: 22191},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 674, col: 15, offset: 22191},
							name: "CMD_REGEX",
						},
						&labeledExpr{
							pos:   position{line: 674, col: 25, offset: 22201},
							label: "keyAndOp",
							expr: &zeroOrOneExpr{
								pos: position{line: 674, col: 34, offset: 22210},
								expr: &seqExpr{
									pos: position{line: 674, col: 35, offset: 22211},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 674, col: 35, offset: 22211},
											name: "FieldName",
										},
										&ruleRefExpr{
											pos:  position{line: 674, col: 45, offset: 22221},
											name: "EqualityOperator",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 674, col: 64, offset: 22240},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 674, col: 68, offset: 22244},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel4",
			pos:  position{line: 702, col: 1, offset: 22823},
			expr: &actionExpr{
				pos: position{line: 702, col: 17, offset: 22839},
				run: (*parser).callonClauseLevel41,
				expr: &seqExpr{
					pos: position{line: 702, col: 17, offset: 22839},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 702, col: 17, offset: 22839},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 702, col: 23, offset: 22845},
								name: "ClauseLevel3",
							},
						},
						&labeledExpr{
							pos:   position{line: 702, col: 36, offset: 22858},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 702, col: 41, offset: 22863},
								expr: &seqExpr{
									pos: position{line: 702, col: 42, offset: 22864},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 702, col: 43, offset: 22865},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 702, col: 43, offset: 22865},
													name: "AND",
												},
												&ruleRefExpr{
													pos:  position{line: 702, col: 49, offset: 22871},
													name: "SPACE",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 702, col: 56, offset: 22878},
											name: "ClauseLevel3",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel3",
			pos:  position{line: 720, col: 1, offset: 23255},
			expr: &actionExpr{
				pos: position{line: 720, col: 17, offset: 23271},
				run: (*parser).callonClauseLevel31,
				expr: &seqExpr{
					pos: position{line: 720, col: 17, offset: 23271},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 720, col: 17, offset: 23271},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 720, col: 23, offset: 23277},
								name: "ClauseLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 720, col: 36, offset: 23290},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 720, col: 41, offset: 23295},
								expr: &seqExpr{
									pos: position{line: 720, col: 42, offset: 23296},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 720, col: 42, offset: 23296},
											name: "OR",
										},
										&ruleRefExpr{
											pos:  position{line: 720, col: 45, offset: 23299},
											name: "ClauseLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel2",
			pos:  position{line: 738, col: 1, offset: 23664},
			expr: &choiceExpr{
				pos: position{line: 738, col: 17, offset: 23680},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 738, col: 17, offset: 23680},
						run: (*parser).callonClauseLevel22,
						expr: &seqExpr{
							pos: position{line: 738, col: 17, offset: 23680},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 738, col: 17, offset: 23680},
									label: "notList",
									expr: &oneOrMoreExpr{
										pos: position{line: 738, col: 25, offset: 23688},
										expr: &ruleRefExpr{
											pos:  position{line: 738, col: 25, offset: 23688},
											name: "NOT",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 738, col: 30, offset: 23693},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 738, col: 36, offset: 23699},
										name: "ClauseLevel1",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 749, col: 5, offset: 23995},
						run: (*parser).callonClauseLevel29,
						expr: &labeledExpr{
							pos:   position{line: 749, col: 5, offset: 23995},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 749, col: 12, offset: 24002},
								name: "ClauseLevel1",
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseLevel1",
			pos:  position{line: 753, col: 1, offset: 24043},
			expr: &choiceExpr{
				pos: position{line: 753, col: 17, offset: 24059},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 753, col: 17, offset: 24059},
						run: (*parser).callonClauseLevel12,
						expr: &seqExpr{
							pos: position{line: 753, col: 17, offset: 24059},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 753, col: 17, offset: 24059},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 753, col: 25, offset: 24067},
									label: "clause",
									expr: &ruleRefExpr{
										pos:  position{line: 753, col: 32, offset: 24074},
										name: "ClauseLevel4",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 753, col: 45, offset: 24087},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 755, col: 5, offset: 24124},
						run: (*parser).callonClauseLevel18,
						expr: &labeledExpr{
							pos:   position{line: 755, col: 5, offset: 24124},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 755, col: 10, offset: 24129},
								name: "SearchTerm",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchTerm",
			pos:  position{line: 761, col: 1, offset: 24287},
			expr: &actionExpr{
				pos: position{line: 761, col: 15, offset: 24301},
				run: (*parser).callonSearchTerm1,
				expr: &labeledExpr{
					pos:   position{line: 761, col: 15, offset: 24301},
					label: "term",
					expr: &choiceExpr{
						pos: position{line: 761, col: 21, offset: 24307},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 761, col: 21, offset: 24307},
								name: "FieldWithNumberValue",
							},
							&ruleRefExpr{
								pos:  position{line: 761, col: 44, offset: 24330},
								name: "FieldWithBooleanValue",
							},
							&ruleRefExpr{
								pos:  position{line: 761, col: 68, offset: 24354},
								name: "FieldWithStringValue",
							},
						},
					},
				},
			},
		},
		{
			name: "TimechartBlock",
			pos:  position{line: 766, col: 1, offset: 24495},
			expr: &actionExpr{
				pos: position{line: 766, col: 19, offset: 24513},
				run: (*parser).callonTimechartBlock1,
				expr: &seqExpr{
					pos: position{line: 766, col: 19, offset: 24513},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 766, col: 19, offset: 24513},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 766, col: 24, offset: 24518},
							name: "CMD_TIMECHART",
						},
						&labeledExpr{
							pos:   position{line: 766, col: 38, offset: 24532},
							label: "tcArgs",
							expr: &ruleRefExpr{
								pos:  position{line: 766, col: 45, offset: 24539},
								name: "TimechartArgumentsList",
							},
						},
						&labeledExpr{
							pos:   position{line: 766, col: 68, offset: 24562},
							label: "limitExpr",
							expr: &zeroOrOneExpr{
								pos: position{line: 766, col: 78, offset: 24572},
								expr: &ruleRefExpr{
									pos:  position{line: 766, col: 79, offset: 24573},
									name: "LimitExpr",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimechartArgumentsList",
			pos:  position{line: 854, col: 1, offset: 27316},
			expr: &actionExpr{
				pos: position{line: 854, col: 27, offset: 27342},
				run: (*parser).callonTimechartArgumentsList1,
				expr: &seqExpr{
					pos: position{line: 854, col: 27, offset: 27342},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 854, col: 27, offset: 27342},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 854, col: 33, offset: 27348},
								name: "TimechartArgument",
							},
						},
						&labeledExpr{
							pos:   position{line: 854, col: 51, offset: 27366},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 854, col: 56, offset: 27371},
								expr: &seqExpr{
									pos: position{line: 854, col: 57, offset: 27372},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 854, col: 57, offset: 27372},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 854, col: 63, offset: 27378},
											name: "TimechartArgument",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimechartArgument",
			pos:  position{line: 883, col: 1, offset: 28112},
			expr: &actionExpr{
				pos: position{line: 883, col: 22, offset: 28133},
				run: (*parser).callonTimechartArgument1,
				expr: &labeledExpr{
					pos:   position{line: 883, col: 22, offset: 28133},
					label: "tcArg",
					expr: &choiceExpr{
						pos: position{line: 883, col: 29, offset: 28140},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 883, col: 29, offset: 28140},
								name: "SingleAggExpr",
							},
							&ruleRefExpr{
								pos:  position{line: 883, col: 45, offset: 28156},
								name: "TcOptions",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleAggExpr",
			pos:  position{line: 887, col: 1, offset: 28194},
			expr: &actionExpr{
				pos: position{line: 887, col: 18, offset: 28211},
				run: (*parser).callonSingleAggExpr1,
				expr: &seqExpr{
					pos: position{line: 887, col: 18, offset: 28211},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 887, col: 18, offset: 28211},
							label: "aggs",
							expr: &ruleRefExpr{
								pos:  position{line: 887, col: 23, offset: 28216},
								name: "AggregationList",
							},
						},
						&labeledExpr{
							pos:   position{line: 887, col: 39, offset: 28232},
							label: "splitByClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 887, col: 53, offset: 28246},
								expr: &ruleRefExpr{
									pos:  position{line: 887, col: 53, offset: 28246},
									name: "SplitByClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SplitByClause",
			pos:  position{line: 901, col: 1, offset: 28585},
			expr: &actionExpr{
				pos: position{line: 901, col: 18, offset: 28602},
				run: (*parser).callonSplitByClause1,
				expr: &seqExpr{
					pos: position{line: 901, col: 18, offset: 28602},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 901, col: 18, offset: 28602},
							name: "BY",
						},
						&labeledExpr{
							pos:   position{line: 901, col: 21, offset: 28605},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 901, col: 27, offset: 28611},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "TcOptions",
			pos:  position{line: 909, col: 1, offset: 28740},
			expr: &actionExpr{
				pos: position{line: 909, col: 14, offset: 28753},
				run: (*parser).callonTcOptions1,
				expr: &labeledExpr{
					pos:   position{line: 909, col: 14, offset: 28753},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 909, col: 22, offset: 28761},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 909, col: 22, offset: 28761},
								name: "BinOptions",
							},
							&oneOrMoreExpr{
								pos: position{line: 909, col: 35, offset: 28774},
								expr: &ruleRefExpr{
									pos:  position{line: 909, col: 36, offset: 28775},
									name: "TcOption",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TcOption",
			pos:  position{line: 951, col: 1, offset: 30295},
			expr: &actionExpr{
				pos: position{line: 951, col: 13, offset: 30307},
				run: (*parser).callonTcOption1,
				expr: &seqExpr{
					pos: position{line: 951, col: 13, offset: 30307},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 951, col: 13, offset: 30307},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 951, col: 19, offset: 30313},
							label: "tcOptionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 951, col: 31, offset: 30325},
								name: "TcOptionCMD",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 951, col: 43, offset: 30337},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 951, col: 49, offset: 30343},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 951, col: 53, offset: 30347},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "TcOptionCMD",
			pos:  position{line: 956, col: 1, offset: 30460},
			expr: &actionExpr{
				pos: position{line: 956, col: 16, offset: 30475},
				run: (*parser).callonTcOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 956, col: 16, offset: 30475},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 956, col: 24, offset: 30483},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 956, col: 24, offset: 30483},
								val:        "usenull",
								ignoreCase: false,
								want:       "\"usenull\"",
							},
							&litMatcher{
								pos:        position{line: 956, col: 36, offset: 30495},
								val:        "useother",
								ignoreCase: false,
								want:       "\"useother\"",
							},
							&litMatcher{
								pos:        position{line: 956, col: 49, offset: 30508},
								val:        "nullstr",
								ignoreCase: false,
								want:       "\"nullstr\"",
							},
							&litMatcher{
								pos:        position{line: 956, col: 61, offset: 30520},
								val:        "otherstr",
								ignoreCase: false,
								want:       "\"otherstr\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BinSpanLenOption",
			pos:  position{line: 964, col: 1, offset: 30716},
			expr: &actionExpr{
				pos: position{line: 964, col: 21, offset: 30736},
				run: (*parser).callonBinSpanLenOption1,
				expr: &seqExpr{
					pos: position{line: 964, col: 21, offset: 30736},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 964, col: 21, offset: 30736},
							label: "number",
							expr: &choiceExpr{
								pos: position{line: 964, col: 29, offset: 30744},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 964, col: 29, offset: 30744},
										name: "FloatAsString",
									},
									&ruleRefExpr{
										pos:  position{line: 964, col: 45, offset: 30760},
										name: "IntegerAsString",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 964, col: 62, offset: 30777},
							label: "timeScale",
							expr: &zeroOrOneExpr{
								pos: position{line: 964, col: 72, offset: 30787},
								expr: &ruleRefExpr{
									pos:  position{line: 964, col: 73, offset: 30788},
									name: "TimeScale",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BinOptionMinSpan",
			pos:  position{line: 1009, col: 1, offset: 32633},
			expr: &actionExpr{
				pos: position{line: 1009, col: 21, offset: 32653},
				run: (*parser).callonBinOptionMinSpan1,
				expr: &seqExpr{
					pos: position{line: 1009, col: 21, offset: 32653},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1009, col: 21, offset: 32653},
							val:        "minspan",
							ignoreCase: false,
							want:       "\"minspan\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1009, col: 31, offset: 32663},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1009, col: 37, offset: 32669},
							label: "spanLength",
							expr: &ruleRefExpr{
								pos:  position{line: 1009, col: 48, offset: 32680},
								name: "BinSpanLenOption",
							},
						},
					},
				},
			},
		},
		{
			name: "BinOptionMaxBins",
			pos:  position{line: 1020, col: 1, offset: 32921},
			expr: &actionExpr{
				pos: position{line: 1020, col: 21, offset: 32941},
				run: (*parser).callonBinOptionMaxBins1,
				expr: &seqExpr{
					pos: position{line: 1020, col: 21, offset: 32941},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1020, col: 21, offset: 32941},
							val:        "bins",
							ignoreCase: false,
							want:       "\"bins\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1020, col: 28, offset: 32948},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1020, col: 34, offset: 32954},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 1020, col: 43, offset: 32963},
								name: "IntegerAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "BinOptionAlignTime",
			pos:  position{line: 1041, col: 1, offset: 33542},
			expr: &choiceExpr{
				pos: position{line: 1041, col: 23, offset: 33564},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1041, col: 23, offset: 33564},
						run: (*parser).callonBinOptionAlignTime2,
						expr: &seqExpr{
							pos: position{line: 1041, col: 23, offset: 33564},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1041, col: 23, offset: 33564},
									val:        "aligntime",
									ignoreCase: false,
									want:       "\"aligntime\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1041, col: 35, offset: 33576},
									name: "EQUAL",
								},
								&labeledExpr{
									pos:   position{line: 1041, col: 41, offset: 33582},
									label: "utcEpoch",
									expr: &ruleRefExpr{
										pos:  position{line: 1041, col: 51, offset: 33592},
										name: "PositiveIntegerAsString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1055, col: 3, offset: 34011},
						run: (*parser).callonBinOptionAlignTime8,
						expr: &seqExpr{
							pos: position{line: 1055, col: 3, offset: 34011},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1055, col: 3, offset: 34011},
									val:        "aligntime",
									ignoreCase: false,
									want:       "\"aligntime\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1055, col: 15, offset: 34023},
									name: "EQUAL",
								},
								&labeledExpr{
									pos:   position{line: 1055, col: 21, offset: 34029},
									label: "timestamp",
									expr: &choiceExpr{
										pos: position{line: 1055, col: 32, offset: 34040},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 1055, col: 32, offset: 34040},
												name: "AbsoluteTimestamp",
											},
											&ruleRefExpr{
												pos:  position{line: 1055, col: 52, offset: 34060},
												name: "RelativeTimestamp",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BinOptionStart",
			pos:  position{line: 1075, col: 1, offset: 34529},
			expr: &actionExpr{
				pos: position{line: 1075, col: 19, offset: 34547},
				run: (*parser).callonBinOptionStart1,
				expr: &seqExpr{
					pos: position{line: 1075, col: 19, offset: 34547},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1075, col: 19, offset: 34547},
							val:        "start",
							ignoreCase: false,
							want:       "\"start\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1075, col: 27, offset: 34555},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1075, col: 33, offset: 34561},
							label: "number",
							expr: &choiceExpr{
								pos: position{line: 1075, col: 41, offset: 34569},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1075, col: 41, offset: 34569},
										name: "FloatAsString",
									},
									&ruleRefExpr{
										pos:  position{line: 1075, col: 57, offset: 34585},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BinOptionEnd",
			pos:  position{line: 1090, col: 1, offset: 34964},
			expr: &actionExpr{
				pos: position{line: 1090, col: 17, offset: 34980},
				run: (*parser).callonBinOptionEnd1,
				expr: &seqExpr{
					pos: position{line: 1090, col: 17, offset: 34980},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1090, col: 17, offset: 34980},
							val:        "end",
							ignoreCase: false,
							want:       "\"end\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1090, col: 23, offset: 34986},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1090, col: 29, offset: 34992},
							label: "number",
							expr: &choiceExpr{
								pos: position{line: 1090, col: 37, offset: 35000},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1090, col: 37, offset: 35000},
										name: "FloatAsString",
									},
									&ruleRefExpr{
										pos:  position{line: 1090, col: 53, offset: 35016},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BinOptionSpan",
			pos:  position{line: 1105, col: 1, offset: 35387},
			expr: &choiceExpr{
				pos: position{line: 1105, col: 18, offset: 35404},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1105, col: 18, offset: 35404},
						run: (*parser).callonBinOptionSpan2,
						expr: &seqExpr{
							pos: position{line: 1105, col: 18, offset: 35404},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1105, col: 18, offset: 35404},
									val:        "span",
									ignoreCase: false,
									want:       "\"span\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1105, col: 25, offset: 35411},
									name: "EQUAL",
								},
								&labeledExpr{
									pos:   position{line: 1105, col: 31, offset: 35417},
									label: "num1",
									expr: &zeroOrOneExpr{
										pos: position{line: 1105, col: 36, offset: 35422},
										expr: &choiceExpr{
											pos: position{line: 1105, col: 37, offset: 35423},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 1105, col: 37, offset: 35423},
													name: "FloatAsString",
												},
												&ruleRefExpr{
													pos:  position{line: 1105, col: 53, offset: 35439},
													name: "IntegerAsString",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1105, col: 71, offset: 35457},
									val:        "log",
									ignoreCase: false,
									want:       "\"log\"",
								},
								&labeledExpr{
									pos:   position{line: 1105, col: 77, offset: 35463},
									label: "num2",
									expr: &zeroOrOneExpr{
										pos: position{line: 1105, col: 82, offset: 35468},
										expr: &choiceExpr{
											pos: position{line: 1105, col: 83, offset: 35469},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 1105, col: 83, offset: 35469},
													name: "FloatAsString",
												},
												&ruleRefExpr{
													pos:  position{line: 1105, col: 99, offset: 35485},
													name: "IntegerAsString",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1148, col: 3, offset: 36921},
						run: (*parser).callonBinOptionSpan17,
						expr: &seqExpr{
							pos: position{line: 1148, col: 3, offset: 36921},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1148, col: 3, offset: 36921},
									val:        "span",
									ignoreCase: false,
									want:       "\"span\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1148, col: 10, offset: 36928},
									name: "EQUAL",
								},
								&labeledExpr{
									pos:   position{line: 1148, col: 16, offset: 36934},
									label: "spanLen",
									expr: &ruleRefExpr{
										pos:  position{line: 1148, col: 24, offset: 36942},
										name: "BinSpanLenOption",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BinCmdOption",
			pos:  position{line: 1163, col: 1, offset: 37273},
			expr: &actionExpr{
				pos: position{line: 1163, col: 17, offset: 37289},
				run: (*parser).callonBinCmdOption1,
				expr: &labeledExpr{
					pos:   position{line: 1163, col: 17, offset: 37289},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 1163, col: 25, offset: 37297},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1163, col: 25, offset: 37297},
								name: "BinOptionAlignTime",
							},
							&ruleRefExpr{
								pos:  position{line: 1163, col: 46, offset: 37318},
								name: "BinOptionMinSpan",
							},
							&ruleRefExpr{
								pos:  position{line: 1163, col: 65, offset: 37337},
								name: "BinOptionMaxBins",
							},
							&ruleRefExpr{
								pos:  position{line: 1163, col: 84, offset: 37356},
								name: "BinOptionStart",
							},
							&ruleRefExpr{
								pos:  position{line: 1163, col: 101, offset: 37373},
								name: "BinOptionEnd",
							},
							&ruleRefExpr{
								pos:  position{line: 1163, col: 116, offset: 37388},
								name: "BinOptionSpan",
							},
						},
					},
				},
			},
		},
		{
			name: "BinCmdOptionsList",
			pos:  position{line: 1167, col: 1, offset: 37431},
			expr: &actionExpr{
				pos: position{line: 1167, col: 22, offset: 37452},
				run: (*parser).callonBinCmdOptionsList1,
				expr: &seqExpr{
					pos: position{line: 1167, col: 22, offset: 37452},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1167, col: 22, offset: 37452},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1167, col: 29, offset: 37459},
								name: "BinCmdOption",
							},
						},
						&labeledExpr{
							pos:   position{line: 1167, col: 42, offset: 37472},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1167, col: 48, offset: 37478},
								expr: &seqExpr{
									pos: position{line: 1167, col: 49, offset: 37479},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1167, col: 49, offset: 37479},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 1167, col: 55, offset: 37485},
											name: "BinCmdOption",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BinBlock",
			pos:  position{line: 1213, col: 1, offset: 38969},
			expr: &choiceExpr{
				pos: position{line: 1213, col: 13, offset: 38981},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1213, col: 13, offset: 38981},
						run: (*parser).callonBinBlock2,
						expr: &seqExpr{
							pos: position{line: 1213, col: 13, offset: 38981},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1213, col: 13, offset: 38981},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 1213, col: 18, offset: 38986},
									name: "CMD_BIN",
								},
								&labeledExpr{
									pos:   position{line: 1213, col: 26, offset: 38994},
									label: "binCmdOption",
									expr: &ruleRefExpr{
										pos:  position{line: 1213, col: 40, offset: 39008},
										name: "BinCmdOptionsList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1213, col: 59, offset: 39027},
									name: "SPACE",
								},
								&labeledExpr{
									pos:   position{line: 1213, col: 65, offset: 39033},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1213, col: 71, offset: 39039},
										name: "FieldName",
									},
								},
								&labeledExpr{
									pos:   position{line: 1213, col: 81, offset: 39049},
									label: "newFieldName",
									expr: &zeroOrOneExpr{
										pos: position{line: 1213, col: 94, offset: 39062},
										expr: &ruleRefExpr{
											pos:  position{line: 1213, col: 95, offset: 39063},
											name: "AsField",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1236, col: 3, offset: 39692},
						run: (*parser).callonBinBlock14,
						expr: &seqExpr{
							pos: position{line: 1236, col: 3, offset: 39692},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1236, col: 3, offset: 39692},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 1236, col: 8, offset: 39697},
									name: "CMD_BIN",
								},
								&labeledExpr{
									pos:   position{line: 1236, col: 16, offset: 39705},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 1236, col: 22, offset: 39711},
										name: "FieldName",
									},
								},
								&labeledExpr{
									pos:   position{line: 1236, col: 32, offset: 39721},
									label: "newFieldName",
									expr: &zeroOrOneExpr{
										pos: position{line: 1236, col: 45, offset: 39734},
										expr: &ruleRefExpr{
											pos:  position{line: 1236, col: 46, offset: 39735},
											name: "AsField",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BinOptions",
			pos:  position{line: 1263, col: 1, offset: 40473},
			expr: &actionExpr{
				pos: position{line: 1263, col: 15, offset: 40487},
				run: (*parser).callonBinOptions1,
				expr: &labeledExpr{
					pos:   position{line: 1263, col: 15, offset: 40487},
					label: "spanOptions",
					expr: &ruleRefExpr{
						pos:  position{line: 1263, col: 27, offset: 40499},
						name: "SpanOptions",
					},
				},
			},
		},
		{
			name: "SpanOptions",
			pos:  position{line: 1271, col: 1, offset: 40724},
			expr: &actionExpr{
				pos: position{line: 1271, col: 16, offset: 40739},
				run: (*parser).callonSpanOptions1,
				expr: &seqExpr{
					pos: position{line: 1271, col: 16, offset: 40739},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1271, col: 16, offset: 40739},
							name: "CMD_SPAN",
						},
						&ruleRefExpr{
							pos:  position{line: 1271, col: 25, offset: 40748},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1271, col: 31, offset: 40754},
							label: "spanLength",
							expr: &ruleRefExpr{
								pos:  position{line: 1271, col: 42, offset: 40765},
								name: "SpanLength",
							},
						},
					},
				},
			},
		},
		{
			name: "SpanLength",
			pos:  position{line: 1278, col: 1, offset: 40911},
			expr: &actionExpr{
				pos: position{line: 1278, col: 15, offset: 40925},
				run: (*parser).callonSpanLength1,
				expr: &seqExpr{
					pos: position{line: 1278, col: 15, offset: 40925},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1278, col: 15, offset: 40925},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 1278, col: 24, offset: 40934},
								name: "IntegerAsString",
							},
						},
						&labeledExpr{
							pos:   position{line: 1278, col: 40, offset: 40950},
							label: "timeScale",
							expr: &ruleRefExpr{
								pos:  position{line: 1278, col: 50, offset: 40960},
								name: "TimeScale",
							},
						},
					},
				},
			},
		},
		{
			name: "TimeScale",
			pos:  position{line: 1291, col: 1, offset: 41278},
			expr: &actionExpr{
				pos: position{line: 1291, col: 14, offset: 41291},
				run: (*parser).callonTimeScale1,
				expr: &labeledExpr{
					pos:   position{line: 1291, col: 14, offset: 41291},
					label: "timeUnit",
					expr: &choiceExpr{
						pos: position{line: 1291, col: 24, offset: 41301},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1291, col: 24, offset: 41301},
								name: "Second",
							},
							&ruleRefExpr{
								pos:  position{line: 1291, col: 33, offset: 41310},
								name: "Month",
							},
							&ruleRefExpr{
								pos:  position{line: 1291, col: 41, offset: 41318},
								name: "Subseconds",
							},
							&ruleRefExpr{
								pos:  position{line: 1291, col: 54, offset: 41331},
								name: "Minute",
							},
							&ruleRefExpr{
								pos:  position{line: 1291, col: 63, offset: 41340},
								name: "Hour",
							},
							&ruleRefExpr{
								pos:  position{line: 1291, col: 70, offset: 41347},
								name: "Day",
							},
							&ruleRefExpr{
								pos:  position{line: 1291, col: 76, offset: 41353},
								name: "Week",
							},
							&ruleRefExpr{
								pos:  position{line: 1291, col: 83, offset: 41360},
								name: "Quarter",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitExpr",
			pos:  position{line: 1296, col: 1, offset: 41479},
			expr: &actionExpr{
				pos: position{line: 1296, col: 14, offset: 41492},
				run: (*parser).callonLimitExpr1,
				expr: &seqExpr{
					pos: position{line: 1296, col: 14, offset: 41492},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1296, col: 14, offset: 41492},
							name: "SPACE",
						},
						&litMatcher{
							pos:        position{line: 1296, col: 20, offset: 41498},
							val:        "limit",
							ignoreCase: false,
							want:       "\"limit\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1296, col: 28, offset: 41506},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1296, col: 34, offset: 41512},
							label: "sortBy",
							expr: &zeroOrOneExpr{
								pos: position{line: 1296, col: 41, offset: 41519},
								expr: &choiceExpr{
									pos: position{line: 1296, col: 42, offset: 41520},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 1296, col: 42, offset: 41520},
											val:        "top",
											ignoreCase: false,
											want:       "\"top\"",
										},
										&litMatcher{
											pos:        position{line: 1296, col: 50, offset: 41528},
											val:        "bottom",
											ignoreCase: false,
											want:       "\"bottom\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1296, col: 61, offset: 41539},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 1296, col: 76, offset: 41554},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 1296, col: 86, offset: 41564},
								name: "IntegerAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticBlock",
			pos:  position{line: 1320, col: 1, offset: 42145},
			expr: &actionExpr{
				pos: position{line: 1320, col: 19, offset: 42163},
				run: (*parser).callonStatisticBlock1,
				expr: &seqExpr{
					pos: position{line: 1320, col: 19, offset: 42163},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1320, col: 19, offset: 42163},
							name: "PIPE",
						},
						&labeledExpr{
							pos:   position{line: 1320, col: 24, offset: 42168},
							label: "statisticExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 1320, col: 38, offset: 42182},
								name: "StatisticExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticExpr",
			pos:  position{line: 1353, col: 1, offset: 43160},
			expr: &actionExpr{
				pos: position{line: 1353, col: 18, offset: 43177},
				run: (*parser).callonStatisticExpr1,
				expr: &seqExpr{
					pos: position{line: 1353, col: 18, offset: 43177},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1353, col: 18, offset: 43177},
							label: "cmd",
							expr: &choiceExpr{
								pos: position{line: 1353, col: 23, offset: 43182},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1353, col: 23, offset: 43182},
										name: "CMD_TOP",
									},
									&ruleRefExpr{
										pos:  position{line: 1353, col: 33, offset: 43192},
										name: "CMD_RARE",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1353, col: 43, offset: 43202},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 1353, col: 49, offset: 43208},
								expr: &ruleRefExpr{
									pos:  position{line: 1353, col: 50, offset: 43209},
									name: "StatisticLimit",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1353, col: 67, offset: 43226},
							label: "fieldList",
							expr: &seqExpr{
								pos: position{line: 1353, col: 78, offset: 43237},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 1353, col: 78, offset: 43237},
										name: "SPACE",
									},
									&ruleRefExpr{
										pos:  position{line: 1353, col: 84, offset: 43243},
										name: "FieldNameList",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1353, col: 99, offset: 43258},
							label: "byClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 1353, col: 108, offset: 43267},
								expr: &ruleRefExpr{
									pos:  position{line: 1353, col: 109, offset: 43268},
									name: "ByClause",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1353, col: 120, offset: 43279},
							label: "options",
							expr: &zeroOrOneExpr{
								pos: position{line: 1353, col: 128, offset: 43287},
								expr: &ruleRefExpr{
									pos:  position{line: 1353, col: 129, offset: 43288},
									name: "StatisticOptions",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticLimit",
			pos:  position{line: 1395, col: 1, offset: 44373},
			expr: &choiceExpr{
				pos: position{line: 1395, col: 19, offset: 44391},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1395, col: 19, offset: 44391},
						run: (*parser).callonStatisticLimit2,
						expr: &seqExpr{
							pos: position{line: 1395, col: 19, offset: 44391},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1395, col: 19, offset: 44391},
									name: "SPACE",
								},
								&labeledExpr{
									pos:   position{line: 1395, col: 25, offset: 44397},
									label: "number",
									expr: &ruleRefExpr{
										pos:  position{line: 1395, col: 32, offset: 44404},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1398, col: 3, offset: 44458},
						run: (*parser).callonStatisticLimit7,
						expr: &seqExpr{
							pos: position{line: 1398, col: 3, offset: 44458},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1398, col: 3, offset: 44458},
									name: "SPACE",
								},
								&litMatcher{
									pos:        position{line: 1398, col: 9, offset: 44464},
									val:        "limit",
									ignoreCase: false,
									want:       "\"limit\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1398, col: 17, offset: 44472},
									name: "EQUAL",
								},
								&labeledExpr{
									pos:   position{line: 1398, col: 23, offset: 44478},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 1398, col: 30, offset: 44485},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticOptions",
			pos:  position{line: 1403, col: 1, offset: 44583},
			expr: &actionExpr{
				pos: position{line: 1403, col: 21, offset: 44603},
				run: (*parser).callonStatisticOptions1,
				expr: &labeledExpr{
					pos:   position{line: 1403, col: 21, offset: 44603},
					label: "option",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1403, col: 28, offset: 44610},
						expr: &ruleRefExpr{
							pos:  position{line: 1403, col: 29, offset: 44611},
							name: "StatisticOption",
						},
					},
				},
			},
		},
		{
			name: "StatisticOption",
			pos:  position{line: 1452, col: 1, offset: 46173},
			expr: &actionExpr{
				pos: position{line: 1452, col: 20, offset: 46192},
				run: (*parser).callonStatisticOption1,
				expr: &seqExpr{
					pos: position{line: 1452, col: 20, offset: 46192},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1452, col: 20, offset: 46192},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 1452, col: 26, offset: 46198},
							label: "optionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 1452, col: 36, offset: 46208},
								name: "StatisticOptionCMD",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1452, col: 55, offset: 46227},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1452, col: 61, offset: 46233},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1452, col: 67, offset: 46239},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "StatisticOptionCMD",
			pos:  position{line: 1457, col: 1, offset: 46348},
			expr: &actionExpr{
				pos: position{line: 1457, col: 23, offset: 46370},
				run: (*parser).callonStatisticOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 1457, col: 23, offset: 46370},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 1457, col: 31, offset: 46378},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 1457, col: 31, offset: 46378},
								val:        "countfield",
								ignoreCase: false,
								want:       "\"countfield\"",
							},
							&litMatcher{
								pos:        position{line: 1457, col: 46, offset: 46393},
								val:        "showcount",
								ignoreCase: false,
								want:       "\"showcount\"",
							},
							&litMatcher{
								pos:        position{line: 1457, col: 60, offset: 46407},
								val:        "otherstr",
								ignoreCase: false,
								want:       "\"otherstr\"",
							},
							&litMatcher{
								pos:        position{line: 1457, col: 73, offset: 46420},
								val:        "useother",
								ignoreCase: false,
								want:       "\"useother\"",
							},
							&litMatcher{
								pos:        position{line: 1457, col: 85, offset: 46432},
								val:        "percentfield",
								ignoreCase: false,
								want:       "\"percentfield\"",
							},
							&litMatcher{
								pos:        position{line: 1457, col: 102, offset: 46449},
								val:        "showperc",
								ignoreCase: false,
								want:       "\"showperc\"",
							},
						},
					},
				},
			},
		},
		{
			name: "ByClause",
			pos:  position{line: 1465, col: 1, offset: 46636},
			expr: &choiceExpr{
				pos: position{line: 1465, col: 13, offset: 46648},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1465, col: 13, offset: 46648},
						run: (*parser).callonByClause2,
						expr: &seqExpr{
							pos: position{line: 1465, col: 13, offset: 46648},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1465, col: 13, offset: 46648},
									name: "BY",
								},
								&labeledExpr{
									pos:   position{line: 1465, col: 16, offset: 46651},
									label: "fieldList",
									expr: &ruleRefExpr{
										pos:  position{line: 1465, col: 26, offset: 46661},
										name: "FieldNameList",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1468, col: 3, offset: 46718},
						run: (*parser).callonByClause7,
						expr: &labeledExpr{
							pos:   position{line: 1468, col: 3, offset: 46718},
							label: "groupByBlock",
							expr: &ruleRefExpr{
								pos:  position{line: 1468, col: 16, offset: 46731},
								name: "GroupbyBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupBlock",
			pos:  position{line: 1472, col: 1, offset: 46789},
			expr: &actionExpr{
				pos: position{line: 1472, col: 15, offset: 46803},
				run: (*parser).callonDedupBlock1,
				expr: &seqExpr{
					pos: position{line: 1472, col: 15, offset: 46803},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1472, col: 15, offset: 46803},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1472, col: 20, offset: 46808},
							name: "CMD_DEDUP",
						},
						&labeledExpr{
							pos:   position{line: 1472, col: 30, offset: 46818},
							label: "dedupExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 1472, col: 40, offset: 46828},
								name: "DedupExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupExpr",
			pos:  position{line: 1492, col: 1, offset: 47396},
			expr: &actionExpr{
				pos: position{line: 1492, col: 14, offset: 47409},
				run: (*parser).callonDedupExpr1,
				expr: &seqExpr{
					pos: position{line: 1492, col: 14, offset: 47409},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1492, col: 14, offset: 47409},
							label: "limitArr",
							expr: &zeroOrOneExpr{
								pos: position{line: 1492, col: 23, offset: 47418},
								expr: &seqExpr{
									pos: position{line: 1492, col: 24, offset: 47419},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1492, col: 24, offset: 47419},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 1492, col: 30, offset: 47425},
											name: "IntegerAsString",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1492, col: 48, offset: 47443},
							label: "options1",
							expr: &zeroOrOneExpr{
								pos: position{line: 1492, col: 57, offset: 47452},
								expr: &ruleRefExpr{
									pos:  position{line: 1492, col: 58, offset: 47453},
									name: "DedupOptions",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1492, col: 73, offset: 47468},
							label: "fieldList",
							expr: &zeroOrOneExpr{
								pos: position{line: 1492, col: 83, offset: 47478},
								expr: &ruleRefExpr{
									pos:  position{line: 1492, col: 84, offset: 47479},
									name: "DedupFieldList",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1492, col: 101, offset: 47496},
							label: "options2",
							expr: &zeroOrOneExpr{
								pos: position{line: 1492, col: 110, offset: 47505},
								expr: &ruleRefExpr{
									pos:  position{line: 1492, col: 111, offset: 47506},
									name: "DedupOptions",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1492, col: 126, offset: 47521},
							label: "sortByClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 1492, col: 139, offset: 47534},
								expr: &ruleRefExpr{
									pos:  position{line: 1492, col: 140, offset: 47535},
									name: "DedupSortByClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DedupFieldName",
			pos:  position{line: 1549, col: 1, offset: 49273},
			expr: &actionExpr{
				pos: position{line: 1549, col: 19, offset: 49291},
				run: (*parser).callonDedupFieldName1,
				expr: &seqExpr{
					pos: position{line: 1549, col: 19, offset: 49291},
					exprs: []any{
						&notExpr{
							pos: position{line: 1549, col: 19, offset: 49291},
							expr: &litMatcher{
								pos:        position{line: 1549, col: 21, offset: 49293},
								val:        "sortby",
								ignoreCase: false,
								want:       "\"sortby\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1549, col: 31, offset: 49303},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1549, col: 37, offset: 49309},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupFieldList",
			pos:  position{line: 1553, col: 1, offset: 49346},
			expr: &actionExpr{
				pos: position{line: 1553, col: 19, offset: 49364},
				run: (*parser).callonDedupFieldList1,
				expr: &seqExpr{
					pos: position{line: 1553, col: 19, offset: 49364},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1553, col: 19, offset: 49364},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 1553, col: 25, offset: 49370},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1553, col: 31, offset: 49376},
								name: "DedupFieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 1553, col: 46, offset: 49391},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1553, col: 51, offset: 49396},
								expr: &seqExpr{
									pos: position{line: 1553, col: 52, offset: 49397},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1553, col: 52, offset: 49397},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 1553, col: 58, offset: 49403},
											name: "DedupFieldName",
										},
										&notExpr{
											pos: position{line: 1553, col: 73, offset: 49418},
											expr: &ruleRefExpr{
												pos:  position{line: 1553, col: 74, offset: 49419},
												name: "EQUAL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DedupOptions",
			pos:  position{line: 1571, col: 1, offset: 49947},
			expr: &actionExpr{
				pos: position{line: 1571, col: 17, offset: 49963},
				run: (*parser).callonDedupOptions1,
				expr: &labeledExpr{
					pos:   position{line: 1571, col: 17, offset: 49963},
					label: "option",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1571, col: 24, offset: 49970},
						expr: &ruleRefExpr{
							pos:  position{line: 1571, col: 25, offset: 49971},
							name: "DedupOption",
						},
					},
				},
			},
		},
		{
			name: "DedupOption",
			pos:  position{line: 1611, col: 1, offset: 51237},
			expr: &actionExpr{
				pos: position{line: 1611, col: 16, offset: 51252},
				run: (*parser).callonDedupOption1,
				expr: &seqExpr{
					pos: position{line: 1611, col: 16, offset: 51252},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1611, col: 16, offset: 51252},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 1611, col: 22, offset: 51258},
							label: "optionCMD",
							expr: &ruleRefExpr{
								pos:  position{line: 1611, col: 32, offset: 51268},
								name: "DedupOptionCMD",
							},
						},
						&litMatcher{
							pos:        position{line: 1611, col: 47, offset: 51283},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 1611, col: 51, offset: 51287},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1611, col: 57, offset: 51293},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupOptionCMD",
			pos:  position{line: 1616, col: 1, offset: 51402},
			expr: &actionExpr{
				pos: position{line: 1616, col: 19, offset: 51420},
				run: (*parser).callonDedupOptionCMD1,
				expr: &labeledExpr{
					pos:   position{line: 1616, col: 19, offset: 51420},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 1616, col: 27, offset: 51428},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 1616, col: 27, offset: 51428},
								val:        "consecutive",
								ignoreCase: false,
								want:       "\"consecutive\"",
							},
							&litMatcher{
								pos:        position{line: 1616, col: 43, offset: 51444},
								val:        "keepempty",
								ignoreCase: false,
								want:       "\"keepempty\"",
							},
							&litMatcher{
								pos:        position{line: 1616, col: 57, offset: 51458},
								val:        "keepevents",
								ignoreCase: false,
								want:       "\"keepevents\"",
							},
						},
					},
				},
			},
		},
		{
			name: "DedupSortByClause",
			pos:  position{line: 1624, col: 1, offset: 51643},
			expr: &actionExpr{
				pos: position{line: 1624, col: 22, offset: 51664},
				run: (*parser).callonDedupSortByClause1,
				expr: &seqExpr{
					pos: position{line: 1624, col: 22, offset: 51664},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1624, col: 22, offset: 51664},
							name: "CMD_DEDUP_SORTBY",
						},
						&labeledExpr{
							pos:   position{line: 1624, col: 39, offset: 51681},
							label: "dedupSortEles",
							expr: &ruleRefExpr{
								pos:  position{line: 1624, col: 53, offset: 51695},
								name: "SortElements",
							},
						},
					},
				},
			},
		},
		{
			name: "SortElements",
			pos:  position{line: 1629, col: 1, offset: 51803},
			expr: &actionExpr{
				pos: position{line: 1629, col: 17, offset: 51819},
				run: (*parser).callonSortElements1,
				expr: &seqExpr{
					pos: position{line: 1629, col: 17, offset: 51819},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1629, col: 17, offset: 51819},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1629, col: 23, offset: 51825},
								name: "SingleSortElement",
							},
						},
						&labeledExpr{
							pos:   position{line: 1629, col: 41, offset: 51843},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1629, col: 46, offset: 51848},
								expr: &seqExpr{
									pos: position{line: 1629, col: 47, offset: 51849},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1629, col: 47, offset: 51849},
											name: "SPACE_OR_COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 1629, col: 62, offset: 51864},
											name: "SingleSortElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleSortElement",
			pos:  position{line: 1644, col: 1, offset: 52222},
			expr: &actionExpr{
				pos: position{line: 1644, col: 22, offset: 52243},
				run: (*parser).callonSingleSortElement1,
				expr: &labeledExpr{
					pos:   position{line: 1644, col: 22, offset: 52243},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1644, col: 31, offset: 52252},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 1644, col: 31, offset: 52252},
								name: "SingleSortElementWithCast",
							},
							&ruleRefExpr{
								pos:  position{line: 1644, col: 59, offset: 52280},
								name: "SingleSortElementWithoutCast",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleSortElementWithoutCast",
			pos:  position{line: 1648, col: 1, offset: 52339},
			expr: &actionExpr{
				pos: position{line: 1648, col: 33, offset: 52371},
				run: (*parser).callonSingleSortElementWithoutCast1,
				expr: &seqExpr{
					pos: position{line: 1648, col: 33, offset: 52371},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1648, col: 33, offset: 52371},
							label: "sortBySymbol",
							expr: &choiceExpr{
								pos: position{line: 1648, col: 47, offset: 52385},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 1648, col: 47, offset: 52385},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&litMatcher{
										pos:        position{line: 1648, col: 53, offset: 52391},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
									&litMatcher{
										pos:        position{line: 1648, col: 59, offset: 52397},
										val:        "",
										ignoreCase: false,
										want:       "\"\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1648, col: 63, offset: 52401},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1648, col: 69, offset: 52407},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleSortElementWithCast",
			pos:  position{line: 1663, col: 1, offset: 52682},
			expr: &actionExpr{
				pos: position{line: 1663, col: 30, offset: 52711},
				run: (*parser).callonSingleSortElementWithCast1,
				expr: &seqExpr{
					pos: position{line: 1663, col: 30, offset: 52711},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1663, col: 30, offset: 52711},
							label: "sortBySymbol",
							expr: &choiceExpr{
								pos: position{line: 1663, col: 44, offset: 52725},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 1663, col: 44, offset: 52725},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&litMatcher{
										pos:        position{line: 1663, col: 50, offset: 52731},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
									&litMatcher{
										pos:        position{line: 1663, col: 56, offset: 52737},
										val:        "",
										ignoreCase: false,
										want:       "\"\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1663, col: 60, offset: 52741},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 1663, col: 64, offset: 52745},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 1663, col: 64, offset: 52745},
										val:        "auto",
										ignoreCase: false,
										want:       "\"auto\"",
									},
									&litMatcher{
										pos:        position{line: 1663, col: 73, offset: 52754},
										val:        "str",
										ignoreCase: false,
										want:       "\"str\"",
									},
									&litMatcher{
										pos:        position{line: 1663, col: 81, offset: 52762},
										val:        "ip",
										ignoreCase: false,
										want:       "\"ip\"",
									},
									&litMatcher{
										pos:        position{line: 1663, col: 88, offset: 52769},
										val:        "num",
										ignoreCase: false,
										want:       "\"num\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1663, col: 95, offset: 52776},
							name: "L_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 1663, col: 103, offset: 52784},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1663, col: 109, offset: 52790},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1663, col: 119, offset: 52800},
							name: "R_PAREN",
						},
					},
				},
			},
		},
		{
			name: "RenameBlock",
			pos:  position{line: 1683, col: 1, offset: 53225},
			expr: &actionExpr{
				pos: position{line: 1683, col: 16, offset: 53240},
				run: (*parser).callonRenameBlock1,
				expr: &seqExpr{
					pos: position{line: 1683, col: 16, offset: 53240},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1683, col: 16, offset: 53240},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1683, col: 21, offset: 53245},
							name: "CMD_RENAME",
						},
						&labeledExpr{
							pos:   position{line: 1683, col: 32, offset: 53256},
							label: "renameExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 1683, col: 43, offset: 53267},
								name: "RenameExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameExpr",
			pos:  position{line: 1699, col: 1, offset: 53642},
			expr: &choiceExpr{
				pos: position{line: 1699, col: 15, offset: 53656},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1699, col: 15, offset: 53656},
						run: (*parser).callonRenameExpr2,
						expr: &seqExpr{
							pos: position{line: 1699, col: 15, offset: 53656},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1699, col: 15, offset: 53656},
									label: "originalPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1699, col: 31, offset: 53672},
										name: "RenamePattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1699, col: 45, offset: 53686},
									name: "AS",
								},
								&labeledExpr{
									pos:   position{line: 1699, col: 48, offset: 53689},
									label: "newPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1699, col: 59, offset: 53700},
										name: "QuotedString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1710, col: 3, offset: 54019},
						run: (*parser).callonRenameExpr9,
						expr: &seqExpr{
							pos: position{line: 1710, col: 3, offset: 54019},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1710, col: 3, offset: 54019},
									label: "originalPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1710, col: 19, offset: 54035},
										name: "RenamePattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1710, col: 33, offset: 54049},
									name: "AS",
								},
								&labeledExpr{
									pos:   position{line: 1710, col: 36, offset: 54052},
									label: "newPattern",
									expr: &ruleRefExpr{
										pos:  position{line: 1710, col: 47, offset: 54063},
										name: "RenamePattern",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RexBlock",
			pos:  position{line: 1732, col: 1, offset: 54629},
			expr: &actionExpr{
				pos: position{line: 1732, col: 13, offset: 54641},
				run: (*parser).callonRexBlock1,
				expr: &seqExpr{
					pos: position{line: 1732, col: 13, offset: 54641},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1732, col: 13, offset: 54641},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1732, col: 18, offset: 54646},
							name: "CMD_REX",
						},
						&litMatcher{
							pos:        position{line: 1732, col: 26, offset: 54654},
							val:        "field",
							ignoreCase: false,
							want:       "\"field\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1732, col: 34, offset: 54662},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1732, col: 40, offset: 54668},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1732, col: 46, offset: 54674},
								name: "EvalFieldToRead",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1732, col: 62, offset: 54690},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 1732, col: 68, offset: 54696},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 1732, col: 72, offset: 54700},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "SortBlock",
			pos:  position{line: 1760, col: 1, offset: 55403},
			expr: &actionExpr{
				pos: position{line: 1760, col: 14, offset: 55416},
				run: (*parser).callonSortBlock1,
				expr: &seqExpr{
					pos: position{line: 1760, col: 14, offset: 55416},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1760, col: 14, offset: 55416},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1760, col: 19, offset: 55421},
							name: "CMD_SORT",
						},
						&labeledExpr{
							pos:   position{line: 1760, col: 28, offset: 55430},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 1760, col: 34, offset: 55436},
								expr: &ruleRefExpr{
									pos:  position{line: 1760, col: 35, offset: 55437},
									name: "SortLimit",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1760, col: 47, offset: 55449},
							label: "sortByEles",
							expr: &ruleRefExpr{
								pos:  position{line: 1760, col: 58, offset: 55460},
								name: "SortElements",
							},
						},
					},
				},
			},
		},
		{
			name: "SortLimit",
			pos:  position{line: 1797, col: 1, offset: 56311},
			expr: &actionExpr{
				pos: position{line: 1797, col: 14, offset: 56324},
				run: (*parser).callonSortLimit1,
				expr: &seqExpr{
					pos: position{line: 1797, col: 14, offset: 56324},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 1797, col: 14, offset: 56324},
							expr: &seqExpr{
								pos: position{line: 1797, col: 15, offset: 56325},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1797, col: 15, offset: 56325},
										val:        "limit",
										ignoreCase: false,
										want:       "\"limit\"",
									},
									&ruleRefExpr{
										pos:  position{line: 1797, col: 23, offset: 56333},
										name: "EQUAL",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1797, col: 31, offset: 56341},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 1797, col: 40, offset: 56350},
								name: "IntegerAsString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1797, col: 56, offset: 56366},
							name: "SPACE",
						},
					},
				},
			},
		},
		{
			name: "EvalBlock",
			pos:  position{line: 1811, col: 1, offset: 56665},
			expr: &actionExpr{
				pos: position{line: 1811, col: 14, offset: 56678},
				run: (*parser).callonEvalBlock1,
				expr: &seqExpr{
					pos: position{line: 1811, col: 14, offset: 56678},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1811, col: 14, offset: 56678},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 1811, col: 19, offset: 56683},
							name: "CMD_EVAL",
						},
						&labeledExpr{
							pos:   position{line: 1811, col: 28, offset: 56692},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1811, col: 34, offset: 56698},
								name: "SingleEval",
							},
						},
						&labeledExpr{
							pos:   position{line: 1811, col: 45, offset: 56709},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1811, col: 50, offset: 56714},
								expr: &seqExpr{
									pos: position{line: 1811, col: 51, offset: 56715},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 1811, col: 51, offset: 56715},
											name: "COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 1811, col: 57, offset: 56721},
											name: "SingleEval",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleEval",
			pos:  position{line: 1838, col: 1, offset: 57522},
			expr: &actionExpr{
				pos: position{line: 1838, col: 15, offset: 57536},
				run: (*parser).callonSingleEval1,
				expr: &seqExpr{
					pos: position{line: 1838, col: 15, offset: 57536},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1838, col: 15, offset: 57536},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 1838, col: 21, offset: 57542},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1838, col: 31, offset: 57552},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 1838, col: 37, offset: 57558},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 1838, col: 42, offset: 57563},
								name: "EvalExpression",
							},
						},
					},
				},
			},
		},
		{
			name: "EvalExpression",
			pos:  position{line: 1851, col: 1, offset: 57964},
			expr: &actionExpr{
				pos: position{line: 1851, col: 19, offset: 57982},
				run: (*parser).callonEvalExpression1,
				expr: &labeledExpr{
					pos:   position{line: 1851, col: 19, offset: 57982},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 1851, col: 25, offset: 57988},
						name: "ValueExpr",
					},
				},
			},
		},
		{
			name: "ConditionExpr",
			pos:  position{line: 1860, col: 1, offset: 58212},
			expr: &choiceExpr{
				pos: position{line: 1860, col: 18, offset: 58229},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1860, col: 18, offset: 58229},
						run: (*parser).callonConditionExpr2,
						expr: &seqExpr{
							pos: position{line: 1860, col: 18, offset: 58229},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1860, col: 18, offset: 58229},
									val:        "if",
									ignoreCase: false,
									want:       "\"if\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1860, col: 23, offset: 58234},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1860, col: 31, offset: 58242},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 1860, col: 41, offset: 58252},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1860, col: 50, offset: 58261},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1860, col: 56, offset: 58267},
									label: "trueValue",
									expr: &ruleRefExpr{
										pos:  position{line: 1860, col: 66, offset: 58277},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1860, col: 76, offset: 58287},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1860, col: 82, offset: 58293},
									label: "falseValue",
									expr: &ruleRefExpr{
										pos:  position{line: 1860, col: 93, offset: 58304},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1860, col: 103, offset: 58314},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1871, col: 3, offset: 58565},
						run: (*parser).callonConditionExpr15,
						expr: &seqExpr{
							pos: position{line: 1871, col: 3, offset: 58565},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1871, col: 3, offset: 58565},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1871, col: 11, offset: 58573},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1871, col: 11, offset: 58573},
												val:        "case",
												ignoreCase: false,
												want:       "\"case\"",
											},
											&litMatcher{
												pos:        position{line: 1871, col: 20, offset: 58582},
												val:        "validate",
												ignoreCase: false,
												want:       "\"validate\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1871, col: 32, offset: 58594},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1871, col: 40, offset: 58602},
									label: "pair",
									expr: &ruleRefExpr{
										pos:  position{line: 1871, col: 45, offset: 58607},
										name: "ConditionValuePair",
									},
								},
								&labeledExpr{
									pos:   position{line: 1871, col: 64, offset: 58626},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1871, col: 69, offset: 58631},
										expr: &seqExpr{
											pos: position{line: 1871, col: 70, offset: 58632},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1871, col: 70, offset: 58632},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1871, col: 76, offset: 58638},
													name: "ConditionValuePair",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1871, col: 97, offset: 58659},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1894, col: 3, offset: 59263},
						run: (*parser).callonConditionExpr30,
						expr: &seqExpr{
							pos: position{line: 1894, col: 3, offset: 59263},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1894, col: 3, offset: 59263},
									val:        "coalesce",
									ignoreCase: false,
									want:       "\"coalesce\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1894, col: 14, offset: 59274},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1894, col: 22, offset: 59282},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1894, col: 32, offset: 59292},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1894, col: 42, offset: 59302},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1894, col: 47, offset: 59307},
										expr: &seqExpr{
											pos: position{line: 1894, col: 48, offset: 59308},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1894, col: 48, offset: 59308},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1894, col: 54, offset: 59314},
													name: "ValueExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1894, col: 66, offset: 59326},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1911, col: 3, offset: 59745},
						run: (*parser).callonConditionExpr42,
						expr: &seqExpr{
							pos: position{line: 1911, col: 3, offset: 59745},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1911, col: 3, offset: 59745},
									val:        "nullif",
									ignoreCase: false,
									want:       "\"nullif\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1911, col: 12, offset: 59754},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1911, col: 20, offset: 59762},
									label: "leftValue",
									expr: &ruleRefExpr{
										pos:  position{line: 1911, col: 30, offset: 59772},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1911, col: 40, offset: 59782},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1911, col: 46, offset: 59788},
									label: "rightValue",
									expr: &ruleRefExpr{
										pos:  position{line: 1911, col: 57, offset: 59799},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1911, col: 67, offset: 59809},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConditionValuePair",
			pos:  position{line: 1924, col: 1, offset: 60088},
			expr: &actionExpr{
				pos: position{line: 1924, col: 23, offset: 60110},
				run: (*parser).callonConditionValuePair1,
				expr: &seqExpr{
					pos: position{line: 1924, col: 23, offset: 60110},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1924, col: 23, offset: 60110},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 1924, col: 33, offset: 60120},
								name: "BoolExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1924, col: 42, offset: 60129},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 1924, col: 48, offset: 60135},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1924, col: 54, offset: 60141},
								name: "ValueExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "TextExpr",
			pos:  position{line: 1934, col: 1, offset: 60582},
			expr: &choiceExpr{
				pos: position{line: 1934, col: 13, offset: 60594},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1934, col: 13, offset: 60594},
						run: (*parser).callonTextExpr2,
						expr: &seqExpr{
							pos: position{line: 1934, col: 14, offset: 60595},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1934, col: 14, offset: 60595},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1934, col: 22, offset: 60603},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1934, col: 22, offset: 60603},
												val:        "lower",
												ignoreCase: false,
												want:       "\"lower\"",
											},
											&litMatcher{
												pos:        position{line: 1934, col: 32, offset: 60613},
												val:        "upper",
												ignoreCase: false,
												want:       "\"upper\"",
											},
											&litMatcher{
												pos:        position{line: 1934, col: 42, offset: 60623},
												val:        "urldecode",
												ignoreCase: false,
												want:       "\"urldecode\"",
											},
											&litMatcher{
												pos:        position{line: 1934, col: 56, offset: 60637},
												val:        "mvcount",
												ignoreCase: false,
												want:       "\"mvcount\"",
											},
											&litMatcher{
												pos:        position{line: 1934, col: 68, offset: 60649},
												val:        "mvdedup",
												ignoreCase: false,
												want:       "\"mvdedup\"",
											},
											&litMatcher{
												pos:        position{line: 1934, col: 80, offset: 60661},
												val:        "mvsort",
												ignoreCase: false,
												want:       "\"mvsort\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1934, col: 90, offset: 60671},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1934, col: 98, offset: 60679},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1934, col: 109, offset: 60690},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1934, col: 120, offset: 60701},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1946, col: 3, offset: 61015},
						run: (*parser).callonTextExpr16,
						expr: &seqExpr{
							pos: position{line: 1946, col: 4, offset: 61016},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1946, col: 4, offset: 61016},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1946, col: 12, offset: 61024},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1946, col: 12, offset: 61024},
												val:        "max",
												ignoreCase: false,
												want:       "\"max\"",
											},
											&litMatcher{
												pos:        position{line: 1946, col: 20, offset: 61032},
												val:        "min",
												ignoreCase: false,
												want:       "\"min\"",
											},
											&litMatcher{
												pos:        position{line: 1946, col: 28, offset: 61040},
												val:        "mvappend",
												ignoreCase: false,
												want:       "\"mvappend\"",
											},
											&litMatcher{
												pos:        position{line: 1946, col: 41, offset: 61053},
												val:        "mvfind",
												ignoreCase: false,
												want:       "\"mvfind\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1946, col: 51, offset: 61063},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1946, col: 59, offset: 61071},
									label: "firstVal",
									expr: &ruleRefExpr{
										pos:  position{line: 1946, col: 68, offset: 61080},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1946, col: 79, offset: 61091},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1946, col: 84, offset: 61096},
										expr: &seqExpr{
											pos: position{line: 1946, col: 85, offset: 61097},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1946, col: 85, offset: 61097},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1946, col: 91, offset: 61103},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1946, col: 104, offset: 61116},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1968, col: 3, offset: 61716},
						run: (*parser).callonTextExpr33,
						expr: &seqExpr{
							pos: position{line: 1968, col: 4, offset: 61717},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1968, col: 4, offset: 61717},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 1968, col: 12, offset: 61725},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1968, col: 12, offset: 61725},
												val:        "split",
												ignoreCase: false,
												want:       "\"split\"",
											},
											&litMatcher{
												pos:        position{line: 1968, col: 22, offset: 61735},
												val:        "mvjoin",
												ignoreCase: false,
												want:       "\"mvjoin\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1968, col: 32, offset: 61745},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1968, col: 40, offset: 61753},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1968, col: 51, offset: 61764},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1968, col: 62, offset: 61775},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1968, col: 68, offset: 61781},
									label: "delim",
									expr: &ruleRefExpr{
										pos:  position{line: 1968, col: 74, offset: 61787},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1968, col: 85, offset: 61798},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1980, col: 3, offset: 62131},
						run: (*parser).callonTextExpr46,
						expr: &seqExpr{
							pos: position{line: 1980, col: 4, offset: 62132},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1980, col: 4, offset: 62132},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 1980, col: 12, offset: 62140},
										val:        "substr",
										ignoreCase: false,
										want:       "\"substr\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1980, col: 22, offset: 62150},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 1980, col: 30, offset: 62158},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 1980, col: 41, offset: 62169},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1980, col: 52, offset: 62180},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 1980, col: 58, offset: 62186},
									label: "startIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 1980, col: 69, offset: 62197},
										name: "NumericExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1980, col: 81, offset: 62209},
									label: "lengthParam",
									expr: &zeroOrOneExpr{
										pos: position{line: 1980, col: 93, offset: 62221},
										expr: &seqExpr{
											pos: position{line: 1980, col: 94, offset: 62222},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1980, col: 94, offset: 62222},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 1980, col: 100, offset: 62228},
													name: "NumericExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1980, col: 114, offset: 62242},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2005, col: 3, offset: 63072},
						run: (*parser).callonTextExpr62,
						expr: &seqExpr{
							pos: position{line: 2005, col: 3, offset: 63072},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2005, col: 3, offset: 63072},
									val:        "tostring",
									ignoreCase: false,
									want:       "\"tostring\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2005, col: 14, offset: 63083},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2005, col: 22, offset: 63091},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 2005, col: 28, offset: 63097},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2005, col: 38, offset: 63107},
									label: "format",
									expr: &zeroOrOneExpr{
										pos: position{line: 2005, col: 45, offset: 63114},
										expr: &seqExpr{
											pos: position{line: 2005, col: 46, offset: 63115},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2005, col: 46, offset: 63115},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2005, col: 52, offset: 63121},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2005, col: 65, offset: 63134},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2018, col: 3, offset: 63502},
						run: (*parser).callonTextExpr74,
						expr: &seqExpr{
							pos: position{line: 2018, col: 4, offset: 63503},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2018, col: 4, offset: 63503},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2018, col: 12, offset: 63511},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2018, col: 12, offset: 63511},
												val:        "ltrim",
												ignoreCase: false,
												want:       "\"ltrim\"",
											},
											&litMatcher{
												pos:        position{line: 2018, col: 22, offset: 63521},
												val:        "rtrim",
												ignoreCase: false,
												want:       "\"rtrim\"",
											},
											&litMatcher{
												pos:        position{line: 2018, col: 32, offset: 63531},
												val:        "trim",
												ignoreCase: false,
												want:       "\"trim\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2018, col: 40, offset: 63539},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2018, col: 48, offset: 63547},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2018, col: 54, offset: 63553},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2018, col: 66, offset: 63565},
									label: "strToRemoveExpr",
									expr: &zeroOrOneExpr{
										pos: position{line: 2018, col: 82, offset: 63581},
										expr: &ruleRefExpr{
											pos:  position{line: 2018, col: 83, offset: 63582},
											name: "StrToRemoveExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2018, col: 101, offset: 63600},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2037, col: 3, offset: 64040},
						run: (*parser).callonTextExpr88,
						expr: &seqExpr{
							pos: position{line: 2037, col: 3, offset: 64040},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2037, col: 3, offset: 64040},
									val:        "spath",
									ignoreCase: false,
									want:       "\"spath\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2037, col: 11, offset: 64048},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2037, col: 19, offset: 64056},
									label: "inputField",
									expr: &ruleRefExpr{
										pos:  position{line: 2037, col: 30, offset: 64067},
										name: "FieldNameStartWith_",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2037, col: 50, offset: 64087},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2037, col: 56, offset: 64093},
									label: "path",
									expr: &choiceExpr{
										pos: position{line: 2037, col: 62, offset: 64099},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2037, col: 62, offset: 64099},
												name: "QuotedPathString",
											},
											&ruleRefExpr{
												pos:  position{line: 2037, col: 81, offset: 64118},
												name: "UnquotedPathValue",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2037, col: 100, offset: 64137},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2048, col: 3, offset: 64442},
						run: (*parser).callonTextExpr100,
						expr: &seqExpr{
							pos: position{line: 2048, col: 3, offset: 64442},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2048, col: 3, offset: 64442},
									val:        "ipmask",
									ignoreCase: false,
									want:       "\"ipmask\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2048, col: 12, offset: 64451},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2048, col: 20, offset: 64459},
									label: "mask",
									expr: &ruleRefExpr{
										pos:  position{line: 2048, col: 25, offset: 64464},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2048, col: 36, offset: 64475},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2048, col: 42, offset: 64481},
									label: "ip",
									expr: &ruleRefExpr{
										pos:  position{line: 2048, col: 45, offset: 64484},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2048, col: 55, offset: 64494},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2055, col: 3, offset: 64652},
						run: (*parser).callonTextExpr110,
						expr: &seqExpr{
							pos: position{line: 2055, col: 3, offset: 64652},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2055, col: 3, offset: 64652},
									val:        "object_to_array",
									ignoreCase: false,
									want:       "\"object_to_array\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2055, col: 21, offset: 64670},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2055, col: 29, offset: 64678},
									label: "obj",
									expr: &ruleRefExpr{
										pos:  position{line: 2055, col: 33, offset: 64682},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2055, col: 43, offset: 64692},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2055, col: 49, offset: 64698},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 2055, col: 53, offset: 64702},
										name: "QuotedString",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2055, col: 66, offset: 64715},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2055, col: 72, offset: 64721},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 2055, col: 78, offset: 64727},
										name: "QuotedString",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2055, col: 91, offset: 64740},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2066, col: 3, offset: 65048},
						run: (*parser).callonTextExpr123,
						expr: &seqExpr{
							pos: position{line: 2066, col: 3, offset: 65048},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2066, col: 3, offset: 65048},
									val:        "printf",
									ignoreCase: false,
									want:       "\"printf\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2066, col: 12, offset: 65057},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2066, col: 20, offset: 65065},
									label: "format",
									expr: &ruleRefExpr{
										pos:  position{line: 2066, col: 27, offset: 65072},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2066, col: 38, offset: 65083},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2066, col: 43, offset: 65088},
										expr: &seqExpr{
											pos: position{line: 2066, col: 44, offset: 65089},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2066, col: 44, offset: 65089},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2066, col: 50, offset: 65095},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2066, col: 63, offset: 65108},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2084, col: 3, offset: 65575},
						run: (*parser).callonTextExpr135,
						expr: &seqExpr{
							pos: position{line: 2084, col: 3, offset: 65575},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2084, col: 3, offset: 65575},
									val:        "tojson",
									ignoreCase: false,
									want:       "\"tojson\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2084, col: 12, offset: 65584},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2084, col: 20, offset: 65592},
									label: "containInternalFields",
									expr: &zeroOrOneExpr{
										pos: position{line: 2084, col: 42, offset: 65614},
										expr: &seqExpr{
											pos: position{line: 2084, col: 43, offset: 65615},
											exprs: []any{
												&choiceExpr{
													pos: position{line: 2084, col: 44, offset: 65616},
													alternatives: []any{
														&litMatcher{
															pos:        position{line: 2084, col: 44, offset: 65616},
															val:        "true",
															ignoreCase: false,
															want:       "\"true\"",
														},
														&litMatcher{
															pos:        position{line: 2084, col: 53, offset: 65625},
															val:        "false",
															ignoreCase: false,
															want:       "\"false\"",
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2084, col: 62, offset: 65634},
													val:        "()",
													ignoreCase: false,
													want:       "\"()\"",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2084, col: 69, offset: 65641},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2106, col: 3, offset: 66238},
						run: (*parser).callonTextExpr147,
						expr: &seqExpr{
							pos: position{line: 2106, col: 4, offset: 66239},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2106, col: 4, offset: 66239},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2106, col: 12, offset: 66247},
										val:        "mvfilter",
										ignoreCase: false,
										want:       "\"mvfilter\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2106, col: 24, offset: 66259},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2106, col: 32, offset: 66267},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 2106, col: 42, offset: 66277},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2106, col: 51, offset: 66286},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2119, col: 3, offset: 66621},
						run: (*parser).callonTextExpr155,
						expr: &seqExpr{
							pos: position{line: 2119, col: 4, offset: 66622},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2119, col: 4, offset: 66622},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2119, col: 12, offset: 66630},
										val:        "mvindex",
										ignoreCase: false,
										want:       "\"mvindex\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2119, col: 23, offset: 66641},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2119, col: 31, offset: 66649},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2119, col: 42, offset: 66660},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2119, col: 53, offset: 66671},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2119, col: 59, offset: 66677},
									label: "startIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 2119, col: 70, offset: 66688},
										name: "NumericExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2119, col: 82, offset: 66700},
									label: "endIndex",
									expr: &zeroOrOneExpr{
										pos: position{line: 2119, col: 91, offset: 66709},
										expr: &ruleRefExpr{
											pos:  position{line: 2119, col: 92, offset: 66710},
											name: "NumericParamExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2119, col: 111, offset: 66729},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2135, col: 3, offset: 67157},
						run: (*parser).callonTextExpr169,
						expr: &seqExpr{
							pos: position{line: 2135, col: 4, offset: 67158},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2135, col: 4, offset: 67158},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2135, col: 12, offset: 67166},
										val:        "mvmap",
										ignoreCase: false,
										want:       "\"mvmap\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2135, col: 21, offset: 67175},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2135, col: 29, offset: 67183},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2135, col: 40, offset: 67194},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2135, col: 51, offset: 67205},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2135, col: 57, offset: 67211},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2135, col: 62, offset: 67216},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2135, col: 72, offset: 67226},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2148, col: 3, offset: 67552},
						run: (*parser).callonTextExpr180,
						expr: &seqExpr{
							pos: position{line: 2148, col: 4, offset: 67553},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2148, col: 4, offset: 67553},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2148, col: 12, offset: 67561},
										val:        "mvrange",
										ignoreCase: false,
										want:       "\"mvrange\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2148, col: 23, offset: 67572},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2148, col: 31, offset: 67580},
									label: "startIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 2148, col: 42, offset: 67591},
										name: "NumericExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2148, col: 54, offset: 67603},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2148, col: 60, offset: 67609},
									label: "endIndex",
									expr: &ruleRefExpr{
										pos:  position{line: 2148, col: 69, offset: 67618},
										name: "NumericExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2148, col: 81, offset: 67630},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2148, col: 87, offset: 67636},
									label: "stringExpr",
									expr: &zeroOrOneExpr{
										pos: position{line: 2148, col: 98, offset: 67647},
										expr: &ruleRefExpr{
											pos:  position{line: 2148, col: 99, offset: 67648},
											name: "StringExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2148, col: 112, offset: 67661},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2164, col: 3, offset: 68091},
						run: (*parser).callonTextExpr195,
						expr: &seqExpr{
							pos: position{line: 2164, col: 4, offset: 68092},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2164, col: 4, offset: 68092},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2164, col: 12, offset: 68100},
										val:        "mvzip",
										ignoreCase: false,
										want:       "\"mvzip\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2164, col: 21, offset: 68109},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2164, col: 29, offset: 68117},
									label: "mvLeft",
									expr: &ruleRefExpr{
										pos:  position{line: 2164, col: 36, offset: 68124},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2164, col: 47, offset: 68135},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2164, col: 53, offset: 68141},
									label: "mvRight",
									expr: &ruleRefExpr{
										pos:  position{line: 2164, col: 61, offset: 68149},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2164, col: 72, offset: 68160},
									label: "rest",
									expr: &zeroOrOneExpr{
										pos: position{line: 2164, col: 77, offset: 68165},
										expr: &seqExpr{
											pos: position{line: 2164, col: 78, offset: 68166},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2164, col: 78, offset: 68166},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2164, col: 84, offset: 68172},
													name: "StringExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2164, col: 97, offset: 68185},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2185, col: 3, offset: 68709},
						run: (*parser).callonTextExpr211,
						expr: &seqExpr{
							pos: position{line: 2185, col: 4, offset: 68710},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2185, col: 4, offset: 68710},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2185, col: 12, offset: 68718},
										val:        "mv_to_json_array",
										ignoreCase: false,
										want:       "\"mv_to_json_array\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2185, col: 32, offset: 68738},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2185, col: 40, offset: 68746},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2185, col: 51, offset: 68757},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2185, col: 62, offset: 68768},
									label: "rest",
									expr: &zeroOrOneExpr{
										pos: position{line: 2185, col: 67, offset: 68773},
										expr: &seqExpr{
											pos: position{line: 2185, col: 68, offset: 68774},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2185, col: 68, offset: 68774},
													name: "COMMA",
												},
												&choiceExpr{
													pos: position{line: 2185, col: 75, offset: 68781},
													alternatives: []any{
														&litMatcher{
															pos:        position{line: 2185, col: 75, offset: 68781},
															val:        "true",
															ignoreCase: false,
															want:       "\"true\"",
														},
														&litMatcher{
															pos:        position{line: 2185, col: 84, offset: 68790},
															val:        "false",
															ignoreCase: false,
															want:       "\"false\"",
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2185, col: 93, offset: 68799},
													val:        "()",
													ignoreCase: false,
													want:       "\"()\"",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2185, col: 100, offset: 68806},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2210, col: 3, offset: 69441},
						run: (*parser).callonTextExpr227,
						expr: &seqExpr{
							pos: position{line: 2210, col: 3, offset: 69441},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2210, col: 3, offset: 69441},
									val:        "cluster",
									ignoreCase: false,
									want:       "\"cluster\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2210, col: 13, offset: 69451},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2210, col: 21, offset: 69459},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2210, col: 27, offset: 69465},
										name: "EvalFieldToRead",
									},
								},
								&labeledExpr{
									pos:   position{line: 2210, col: 43, offset: 69481},
									label: "threshold",
									expr: &zeroOrOneExpr{
										pos: position{line: 2210, col: 53, offset: 69491},
										expr: &seqExpr{
											pos: position{line: 2210, col: 54, offset: 69492},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2210, col: 54, offset: 69492},
													name: "COMMA",
												},
												&litMatcher{
													pos:        position{line: 2210, col: 60, offset: 69498},
													val:        "threshold:",
													ignoreCase: false,
													want:       "\"threshold:\"",
												},
												&ruleRefExpr{
													pos:  position{line: 2210, col: 73, offset: 69511},
													name: "FloatAsString",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2210, col: 89, offset: 69527},
									label: "match",
									expr: &zeroOrOneExpr{
										pos: position{line: 2210, col: 95, offset: 69533},
										expr: &seqExpr{
											pos: position{line: 2210, col: 96, offset: 69534},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2210, col: 96, offset: 69534},
													name: "COMMA",
												},
												&litMatcher{
													pos:        position{line: 2210, col: 102, offset: 69540},
													val:        "match:",
													ignoreCase: false,
													want:       "\"match:\"",
												},
												&choiceExpr{
													pos: position{line: 2210, col: 112, offset: 69550},
													alternatives: []any{
														&litMatcher{
															pos:        position{line: 2210, col: 112, offset: 69550},
															val:        "termlist",
															ignoreCase: false,
															want:       "\"termlist\"",
														},
														&litMatcher{
															pos:        position{line: 2210, col: 125, offset: 69563},
															val:        "termset",
															ignoreCase: false,
															want:       "\"termset\"",
														},
														&litMatcher{
															pos:        position{line: 2210, col: 137, offset: 69575},
															val:        "ngramset",
															ignoreCase: false,
															want:       "\"ngramset\"",
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2210, col: 151, offset: 69589},
									label: "delims",
									expr: &zeroOrOneExpr{
										pos: position{line: 2210, col: 158, offset: 69596},
										expr: &seqExpr{
											pos: position{line: 2210, col: 159, offset: 69597},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2210, col: 159, offset: 69597},
													name: "COMMA",
												},
												&litMatcher{
													pos:        position{line: 2210, col: 165, offset: 69603},
													val:        "delims:",
													ignoreCase: false,
													want:       "\"delims:\"",
												},
												&ruleRefExpr{
													pos:  position{line: 2210, col: 175, offset: 69613},
													name: "QuotedString",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2210, col: 190, offset: 69628},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2250, col: 3, offset: 70623},
						run: (*parser).callonTextExpr255,
						expr: &seqExpr{
							pos: position{line: 2250, col: 3, offset: 70623},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2250, col: 3, offset: 70623},
									val:        "getfields",
									ignoreCase: false,
									want:       "\"getfields\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2250, col: 15, offset: 70635},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2250, col: 23, offset: 70643},
									label: "filter",
									expr: &zeroOrOneExpr{
										pos: position{line: 2250, col: 30, offset: 70650},
										expr: &ruleRefExpr{
											pos:  position{line: 2250, col: 31, offset: 70651},
											name: "StringExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2250, col: 44, offset: 70664},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2261, col: 3, offset: 70855},
						run: (*parser).callonTextExpr263,
						expr: &seqExpr{
							pos: position{line: 2261, col: 3, offset: 70855},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2261, col: 3, offset: 70855},
									val:        "typeof",
									ignoreCase: false,
									want:       "\"typeof\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2261, col: 12, offset: 70864},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2261, col: 20, offset: 70872},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2261, col: 30, offset: 70882},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2261, col: 40, offset: 70892},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2267, col: 3, offset: 71015},
						run: (*parser).callonTextExpr270,
						expr: &seqExpr{
							pos: position{line: 2267, col: 3, offset: 71015},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2267, col: 3, offset: 71015},
									val:        "replace",
									ignoreCase: false,
									want:       "\"replace\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2267, col: 13, offset: 71025},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2267, col: 21, offset: 71033},
									label: "val",
									expr: &ruleRefExpr{
										pos:  position{line: 2267, col: 25, offset: 71037},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2267, col: 35, offset: 71047},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2267, col: 41, offset: 71053},
									label: "regex",
									expr: &ruleRefExpr{
										pos:  position{line: 2267, col: 47, offset: 71059},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2267, col: 58, offset: 71070},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2267, col: 64, offset: 71076},
									label: "replacement",
									expr: &ruleRefExpr{
										pos:  position{line: 2267, col: 76, offset: 71088},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2267, col: 87, offset: 71099},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2274, col: 3, offset: 71323},
						run: (*parser).callonTextExpr283,
						expr: &seqExpr{
							pos: position{line: 2274, col: 3, offset: 71323},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2274, col: 3, offset: 71323},
									val:        "strftime",
									ignoreCase: false,
									want:       "\"strftime\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2274, col: 14, offset: 71334},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2274, col: 22, offset: 71342},
									label: "val",
									expr: &ruleRefExpr{
										pos:  position{line: 2274, col: 26, offset: 71346},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2274, col: 36, offset: 71356},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2274, col: 42, offset: 71362},
									label: "format",
									expr: &ruleRefExpr{
										pos:  position{line: 2274, col: 49, offset: 71369},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2274, col: 60, offset: 71380},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2282, col: 3, offset: 71544},
						run: (*parser).callonTextExpr293,
						expr: &seqExpr{
							pos: position{line: 2282, col: 3, offset: 71544},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2282, col: 3, offset: 71544},
									val:        "strptime",
									ignoreCase: false,
									want:       "\"strptime\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2282, col: 14, offset: 71555},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2282, col: 22, offset: 71563},
									label: "val",
									expr: &ruleRefExpr{
										pos:  position{line: 2282, col: 26, offset: 71567},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2282, col: 36, offset: 71577},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2282, col: 42, offset: 71583},
									label: "format",
									expr: &ruleRefExpr{
										pos:  position{line: 2282, col: 49, offset: 71590},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2282, col: 60, offset: 71601},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedPathString",
			pos:  position{line: 2290, col: 1, offset: 71763},
			expr: &actionExpr{
				pos: position{line: 2290, col: 21, offset: 71783},
				run: (*parser).callonQuotedPathString1,
				expr: &labeledExpr{
					pos:   position{line: 2290, col: 21, offset: 71783},
					label: "str",
					expr: &ruleRefExpr{
						pos:  position{line: 2290, col: 25, offset: 71787},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "UnquotedPathValue",
			pos:  position{line: 2297, col: 1, offset: 71914},
			expr: &actionExpr{
				pos: position{line: 2297, col: 22, offset: 71935},
				run: (*parser).callonUnquotedPathValue1,
				expr: &labeledExpr{
					pos:   position{line: 2297, col: 22, offset: 71935},
					label: "str",
					expr: &ruleRefExpr{
						pos:  position{line: 2297, col: 26, offset: 71939},
						name: "UnquotedString",
					},
				},
			},
		},
		{
			name: "StrToRemoveExpr",
			pos:  position{line: 2304, col: 1, offset: 72067},
			expr: &actionExpr{
				pos: position{line: 2304, col: 20, offset: 72086},
				run: (*parser).callonStrToRemoveExpr1,
				expr: &seqExpr{
					pos: position{line: 2304, col: 20, offset: 72086},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2304, col: 20, offset: 72086},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 2304, col: 26, offset: 72092},
							label: "strToRemove",
							expr: &ruleRefExpr{
								pos:  position{line: 2304, col: 38, offset: 72104},
								name: "String",
							},
						},
					},
				},
			},
		},
		{
			name: "EvalFieldToRead",
			pos:  position{line: 2310, col: 1, offset: 72289},
			expr: &choiceExpr{
				pos: position{line: 2310, col: 20, offset: 72308},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2310, col: 20, offset: 72308},
						run: (*parser).callonEvalFieldToRead2,
						expr: &seqExpr{
							pos: position{line: 2310, col: 20, offset: 72308},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 2310, col: 20, offset: 72308},
									expr: &charClassMatcher{
										pos:        position{line: 2310, col: 20, offset: 72308},
										val:        "[a-zA-Z_]",
										chars:      []rune{'_'},
										ranges:     []rune{'a', 'z', 'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&notExpr{
									pos: position{line: 2310, col: 31, offset: 72319},
									expr: &litMatcher{
										pos:        position{line: 2310, col: 33, offset: 72321},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2313, col: 3, offset: 72363},
						run: (*parser).callonEvalFieldToRead8,
						expr: &seqExpr{
							pos: position{line: 2313, col: 3, offset: 72363},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2313, col: 3, offset: 72363},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&labeledExpr{
									pos:   position{line: 2313, col: 7, offset: 72367},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2313, col: 13, offset: 72373},
										name: "FieldName",
									},
								},
								&litMatcher{
									pos:        position{line: 2313, col: 23, offset: 72383},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "WhereBlock",
			pos:  position{line: 2318, col: 1, offset: 72451},
			expr: &actionExpr{
				pos: position{line: 2318, col: 15, offset: 72465},
				run: (*parser).callonWhereBlock1,
				expr: &seqExpr{
					pos: position{line: 2318, col: 15, offset: 72465},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2318, col: 15, offset: 72465},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 2318, col: 20, offset: 72470},
							name: "CMD_WHERE",
						},
						&labeledExpr{
							pos:   position{line: 2318, col: 30, offset: 72480},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 2318, col: 40, offset: 72490},
								name: "BoolExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExpr",
			pos:  position{line: 2330, col: 1, offset: 72783},
			expr: &actionExpr{
				pos: position{line: 2330, col: 13, offset: 72795},
				run: (*parser).callonBoolExpr1,
				expr: &labeledExpr{
					pos:   position{line: 2330, col: 13, offset: 72795},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 2330, col: 18, offset: 72800},
						name: "BoolExprLevel4",
					},
				},
			},
		},
		{
			name: "BoolExprLevel4",
			pos:  position{line: 2335, col: 1, offset: 72870},
			expr: &actionExpr{
				pos: position{line: 2335, col: 19, offset: 72888},
				run: (*parser).callonBoolExprLevel41,
				expr: &seqExpr{
					pos: position{line: 2335, col: 19, offset: 72888},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2335, col: 19, offset: 72888},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2335, col: 25, offset: 72894},
								name: "BoolExprLevel3",
							},
						},
						&labeledExpr{
							pos:   position{line: 2335, col: 40, offset: 72909},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2335, col: 45, offset: 72914},
								expr: &seqExpr{
									pos: position{line: 2335, col: 46, offset: 72915},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 2335, col: 46, offset: 72915},
											name: "OR",
										},
										&ruleRefExpr{
											pos:  position{line: 2335, col: 49, offset: 72918},
											name: "BoolExprLevel3",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel3",
			pos:  position{line: 2355, col: 1, offset: 73356},
			expr: &actionExpr{
				pos: position{line: 2355, col: 19, offset: 73374},
				run: (*parser).callonBoolExprLevel31,
				expr: &seqExpr{
					pos: position{line: 2355, col: 19, offset: 73374},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2355, col: 19, offset: 73374},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2355, col: 25, offset: 73380},
								name: "BoolExprLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 2355, col: 40, offset: 73395},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2355, col: 45, offset: 73400},
								expr: &seqExpr{
									pos: position{line: 2355, col: 46, offset: 73401},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 2355, col: 46, offset: 73401},
											name: "AND",
										},
										&ruleRefExpr{
											pos:  position{line: 2355, col: 50, offset: 73405},
											name: "BoolExprLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel2",
			pos:  position{line: 2375, col: 1, offset: 73844},
			expr: &choiceExpr{
				pos: position{line: 2375, col: 19, offset: 73862},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2375, col: 19, offset: 73862},
						run: (*parser).callonBoolExprLevel22,
						expr: &seqExpr{
							pos: position{line: 2375, col: 19, offset: 73862},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2375, col: 19, offset: 73862},
									name: "NOT",
								},
								&ruleRefExpr{
									pos:  position{line: 2375, col: 23, offset: 73866},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2375, col: 31, offset: 73874},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 2375, col: 37, offset: 73880},
										name: "BoolExprLevel1",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2375, col: 52, offset: 73895},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2385, col: 3, offset: 74098},
						run: (*parser).callonBoolExprLevel29,
						expr: &labeledExpr{
							pos:   position{line: 2385, col: 3, offset: 74098},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2385, col: 9, offset: 74104},
								name: "BoolExprLevel1",
							},
						},
					},
				},
			},
		},
		{
			name: "BoolExprLevel1",
			pos:  position{line: 2390, col: 1, offset: 74175},
			expr: &choiceExpr{
				pos: position{line: 2390, col: 19, offset: 74193},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2390, col: 19, offset: 74193},
						run: (*parser).callonBoolExprLevel12,
						expr: &seqExpr{
							pos: position{line: 2390, col: 19, offset: 74193},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2390, col: 19, offset: 74193},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2390, col: 27, offset: 74201},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 2390, col: 33, offset: 74207},
										name: "BoolExprLevel4",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2390, col: 48, offset: 74222},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2393, col: 3, offset: 74258},
						run: (*parser).callonBoolExprLevel18,
						expr: &labeledExpr{
							pos:   position{line: 2393, col: 3, offset: 74258},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 2393, col: 10, offset: 74265},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 2393, col: 10, offset: 74265},
										name: "EvalComparisonExpr",
									},
									&ruleRefExpr{
										pos:  position{line: 2393, col: 31, offset: 74286},
										name: "BoolComparisonExpr",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EvalComparisonExpr",
			pos:  position{line: 2398, col: 1, offset: 74406},
			expr: &choiceExpr{
				pos: position{line: 2398, col: 23, offset: 74428},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2398, col: 23, offset: 74428},
						run: (*parser).callonEvalComparisonExpr2,
						expr: &seqExpr{
							pos: position{line: 2398, col: 24, offset: 74429},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2398, col: 24, offset: 74429},
									label: "op",
									expr: &choiceExpr{
										pos: position{line: 2398, col: 28, offset: 74433},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2398, col: 28, offset: 74433},
												val:        "isbool",
												ignoreCase: false,
												want:       "\"isbool\"",
											},
											&litMatcher{
												pos:        position{line: 2398, col: 39, offset: 74444},
												val:        "isint",
												ignoreCase: false,
												want:       "\"isint\"",
											},
											&litMatcher{
												pos:        position{line: 2398, col: 49, offset: 74454},
												val:        "isstr",
												ignoreCase: false,
												want:       "\"isstr\"",
											},
											&litMatcher{
												pos:        position{line: 2398, col: 59, offset: 74464},
												val:        "isnull",
												ignoreCase: false,
												want:       "\"isnull\"",
											},
											&litMatcher{
												pos:        position{line: 2398, col: 70, offset: 74475},
												val:        "isnotnull",
												ignoreCase: false,
												want:       "\"isnotnull\"",
											},
											&litMatcher{
												pos:        position{line: 2398, col: 84, offset: 74489},
												val:        "isnum",
												ignoreCase: false,
												want:       "\"isnum\"",
											},
											&litMatcher{
												pos:        position{line: 2398, col: 94, offset: 74499},
												val:        "searchmatch",
												ignoreCase: false,
												want:       "\"searchmatch\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2398, col: 109, offset: 74514},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2398, col: 117, offset: 74522},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 2398, col: 123, offset: 74528},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2398, col: 133, offset: 74538},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2428, col: 3, offset: 75409},
						run: (*parser).callonEvalComparisonExpr17,
						expr: &seqExpr{
							pos: position{line: 2428, col: 3, offset: 75409},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2428, col: 3, offset: 75409},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2428, col: 11, offset: 75417},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2428, col: 11, offset: 75417},
												val:        "like",
												ignoreCase: false,
												want:       "\"like\"",
											},
											&litMatcher{
												pos:        position{line: 2428, col: 20, offset: 75426},
												val:        "Like",
												ignoreCase: false,
												want:       "\"Like\"",
											},
											&litMatcher{
												pos:        position{line: 2428, col: 29, offset: 75435},
												val:        "match",
												ignoreCase: false,
												want:       "\"match\"",
											},
											&litMatcher{
												pos:        position{line: 2428, col: 39, offset: 75445},
												val:        "cidrmatch",
												ignoreCase: false,
												want:       "\"cidrmatch\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2428, col: 52, offset: 75458},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2428, col: 60, offset: 75466},
									label: "leftValue",
									expr: &ruleRefExpr{
										pos:  position{line: 2428, col: 70, offset: 75476},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2428, col: 80, offset: 75486},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2428, col: 86, offset: 75492},
									label: "rightValue",
									expr: &ruleRefExpr{
										pos:  position{line: 2428, col: 97, offset: 75503},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2428, col: 107, offset: 75513},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2441, col: 3, offset: 75883},
						run: (*parser).callonEvalComparisonExpr32,
						expr: &seqExpr{
							pos: position{line: 2441, col: 3, offset: 75883},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2441, col: 3, offset: 75883},
									label: "left",
									expr: &ruleRefExpr{
										pos:  position{line: 2441, col: 8, offset: 75888},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2441, col: 18, offset: 75898},
									name: "SPACE",
								},
								&litMatcher{
									pos:        position{line: 2441, col: 24, offset: 75904},
									val:        "in",
									ignoreCase: false,
									want:       "\"in\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2441, col: 29, offset: 75909},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2441, col: 37, offset: 75917},
									label: "valueToJudge",
									expr: &ruleRefExpr{
										pos:  position{line: 2441, col: 50, offset: 75930},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2441, col: 60, offset: 75940},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2441, col: 65, offset: 75945},
										expr: &seqExpr{
											pos: position{line: 2441, col: 66, offset: 75946},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2441, col: 66, offset: 75946},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2441, col: 72, offset: 75952},
													name: "ValueExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2441, col: 84, offset: 75964},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2460, col: 3, offset: 76515},
						run: (*parser).callonEvalComparisonExpr47,
						expr: &seqExpr{
							pos: position{line: 2460, col: 3, offset: 76515},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2460, col: 3, offset: 76515},
									val:        "in",
									ignoreCase: false,
									want:       "\"in\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2460, col: 8, offset: 76520},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2460, col: 16, offset: 76528},
									label: "valueToJudge",
									expr: &ruleRefExpr{
										pos:  position{line: 2460, col: 29, offset: 76541},
										name: "ValueExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2460, col: 39, offset: 76551},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2460, col: 44, offset: 76556},
										expr: &seqExpr{
											pos: position{line: 2460, col: 45, offset: 76557},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2460, col: 45, offset: 76557},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2460, col: 51, offset: 76563},
													name: "ValueExpr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2460, col: 63, offset: 76575},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoolComparisonExpr",
			pos:  position{line: 2478, col: 1, offset: 76996},
			expr: &actionExpr{
				pos: position{line: 2478, col: 23, offset: 77018},
				run: (*parser).callonBoolComparisonExpr1,
				expr: &seqExpr{
					pos: position{line: 2478, col: 23, offset: 77018},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2478, col: 23, offset: 77018},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 2478, col: 28, offset: 77023},
								name: "ValueExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 2478, col: 38, offset: 77033},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 2478, col: 41, offset: 77036},
								name: "EqualityOrInequality",
							},
						},
						&labeledExpr{
							pos:   position{line: 2478, col: 62, offset: 77057},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 2478, col: 68, offset: 77063},
								name: "ValueExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "ValueExpr",
			pos:  position{line: 2496, col: 1, offset: 77657},
			expr: &choiceExpr{
				pos: position{line: 2496, col: 14, offset: 77670},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2496, col: 14, offset: 77670},
						run: (*parser).callonValueExpr2,
						expr: &labeledExpr{
							pos:   position{line: 2496, col: 14, offset: 77670},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 2496, col: 24, offset: 77680},
								name: "ConditionExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2505, col: 3, offset: 77870},
						run: (*parser).callonValueExpr5,
						expr: &seqExpr{
							pos: position{line: 2505, col: 3, offset: 77870},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2505, col: 3, offset: 77870},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2505, col: 12, offset: 77879},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 2505, col: 22, offset: 77889},
										name: "ConditionExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2505, col: 37, offset: 77904},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2514, col: 3, offset: 78088},
						run: (*parser).callonValueExpr11,
						expr: &labeledExpr{
							pos:   position{line: 2514, col: 3, offset: 78088},
							label: "numeric",
							expr: &ruleRefExpr{
								pos:  position{line: 2514, col: 11, offset: 78096},
								name: "NumericExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2523, col: 3, offset: 78276},
						run: (*parser).callonValueExpr14,
						expr: &labeledExpr{
							pos:   position{line: 2523, col: 3, offset: 78276},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 2523, col: 7, offset: 78280},
								name: "StringExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2532, col: 3, offset: 78452},
						run: (*parser).callonValueExpr17,
						expr: &seqExpr{
							pos: position{line: 2532, col: 3, offset: 78452},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2532, col: 3, offset: 78452},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2532, col: 12, offset: 78461},
									label: "str",
									expr: &ruleRefExpr{
										pos:  position{line: 2532, col: 16, offset: 78465},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2532, col: 28, offset: 78477},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2541, col: 3, offset: 78646},
						run: (*parser).callonValueExpr23,
						expr: &seqExpr{
							pos: position{line: 2541, col: 3, offset: 78646},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2541, col: 3, offset: 78646},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2541, col: 11, offset: 78654},
									label: "boolean",
									expr: &ruleRefExpr{
										pos:  position{line: 2541, col: 19, offset: 78662},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2541, col: 28, offset: 78671},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StringExpr",
			pos:  position{line: 2551, col: 1, offset: 78842},
			expr: &choiceExpr{
				pos: position{line: 2551, col: 15, offset: 78856},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2551, col: 15, offset: 78856},
						run: (*parser).callonStringExpr2,
						expr: &seqExpr{
							pos: position{line: 2551, col: 15, offset: 78856},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2551, col: 15, offset: 78856},
									label: "text",
									expr: &ruleRefExpr{
										pos:  position{line: 2551, col: 20, offset: 78861},
										name: "TextExpr",
									},
								},
								&notExpr{
									pos: position{line: 2551, col: 29, offset: 78870},
									expr: &ruleRefExpr{
										pos:  position{line: 2551, col: 31, offset: 78872},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2559, col: 3, offset: 79042},
						run: (*parser).callonStringExpr8,
						expr: &seqExpr{
							pos: position{line: 2559, col: 3, offset: 79042},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2559, col: 3, offset: 79042},
									label: "str",
									expr: &ruleRefExpr{
										pos:  position{line: 2559, col: 7, offset: 79046},
										name: "QuotedString",
									},
								},
								&notExpr{
									pos: position{line: 2559, col: 20, offset: 79059},
									expr: &ruleRefExpr{
										pos:  position{line: 2559, col: 22, offset: 79061},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2567, col: 3, offset: 79226},
						run: (*parser).callonStringExpr14,
						expr: &seqExpr{
							pos: position{line: 2567, col: 3, offset: 79226},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2567, col: 3, offset: 79226},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2567, col: 9, offset: 79232},
										name: "EvalFieldToRead",
									},
								},
								&notExpr{
									pos: position{line: 2567, col: 25, offset: 79248},
									expr: &choiceExpr{
										pos: position{line: 2567, col: 27, offset: 79250},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2567, col: 27, offset: 79250},
												name: "OpPlus",
											},
											&ruleRefExpr{
												pos:  position{line: 2567, col: 36, offset: 79259},
												name: "OpMinus",
											},
											&ruleRefExpr{
												pos:  position{line: 2567, col: 46, offset: 79269},
												name: "OpMul",
											},
											&ruleRefExpr{
												pos:  position{line: 2567, col: 54, offset: 79277},
												name: "OpDiv",
											},
											&ruleRefExpr{
												pos:  position{line: 2567, col: 62, offset: 79285},
												name: "EVAL_CONCAT",
											},
											&litMatcher{
												pos:        position{line: 2567, col: 76, offset: 79299},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2575, col: 3, offset: 79449},
						run: (*parser).callonStringExpr26,
						expr: &labeledExpr{
							pos:   position{line: 2575, col: 3, offset: 79449},
							label: "concat",
							expr: &ruleRefExpr{
								pos:  position{line: 2575, col: 10, offset: 79456},
								name: "ConcatExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "ConcatExpr",
			pos:  position{line: 2585, col: 1, offset: 79662},
			expr: &actionExpr{
				pos: position{line: 2585, col: 15, offset: 79676},
				run: (*parser).callonConcatExpr1,
				expr: &seqExpr{
					pos: position{line: 2585, col: 15, offset: 79676},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2585, col: 15, offset: 79676},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2585, col: 21, offset: 79682},
								name: "ConcatAtom",
							},
						},
						&labeledExpr{
							pos:   position{line: 2585, col: 32, offset: 79693},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2585, col: 37, offset: 79698},
								expr: &seqExpr{
									pos: position{line: 2585, col: 38, offset: 79699},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 2585, col: 38, offset: 79699},
											name: "EVAL_CONCAT",
										},
										&ruleRefExpr{
											pos:  position{line: 2585, col: 50, offset: 79711},
											name: "ConcatAtom",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2585, col: 63, offset: 79724},
							expr: &choiceExpr{
								pos: position{line: 2585, col: 65, offset: 79726},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 2585, col: 65, offset: 79726},
										name: "OpPlus",
									},
									&ruleRefExpr{
										pos:  position{line: 2585, col: 74, offset: 79735},
										name: "OpMinus",
									},
									&ruleRefExpr{
										pos:  position{line: 2585, col: 84, offset: 79745},
										name: "OpMul",
									},
									&ruleRefExpr{
										pos:  position{line: 2585, col: 92, offset: 79753},
										name: "OpDiv",
									},
									&litMatcher{
										pos:        position{line: 2585, col: 100, offset: 79761},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcatAtom",
			pos:  position{line: 2603, col: 1, offset: 80167},
			expr: &choiceExpr{
				pos: position{line: 2603, col: 15, offset: 80181},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2603, col: 15, offset: 80181},
						run: (*parser).callonConcatAtom2,
						expr: &labeledExpr{
							pos:   position{line: 2603, col: 15, offset: 80181},
							label: "text",
							expr: &ruleRefExpr{
								pos:  position{line: 2603, col: 20, offset: 80186},
								name: "TextExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2612, col: 3, offset: 80350},
						run: (*parser).callonConcatAtom5,
						expr: &labeledExpr{
							pos:   position{line: 2612, col: 3, offset: 80350},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 2612, col: 7, offset: 80354},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2620, col: 3, offset: 80493},
						run: (*parser).callonConcatAtom8,
						expr: &labeledExpr{
							pos:   position{line: 2620, col: 3, offset: 80493},
							label: "number",
							expr: &ruleRefExpr{
								pos:  position{line: 2620, col: 10, offset: 80500},
								name: "NumberAsString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2628, col: 3, offset: 80639},
						run: (*parser).callonConcatAtom11,
						expr: &labeledExpr{
							pos:   position{line: 2628, col: 3, offset: 80639},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 2628, col: 9, offset: 80645},
								name: "EvalFieldToRead",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExpr",
			pos:  position{line: 2638, col: 1, offset: 80814},
			expr: &actionExpr{
				pos: position{line: 2638, col: 16, offset: 80829},
				run: (*parser).callonNumericExpr1,
				expr: &seqExpr{
					pos: position{line: 2638, col: 16, offset: 80829},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2638, col: 16, offset: 80829},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 2638, col: 21, offset: 80834},
								name: "NumericExprLevel3",
							},
						},
						&notExpr{
							pos: position{line: 2638, col: 39, offset: 80852},
							expr: &choiceExpr{
								pos: position{line: 2638, col: 41, offset: 80854},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 2638, col: 41, offset: 80854},
										name: "EVAL_CONCAT",
									},
									&litMatcher{
										pos:        position{line: 2638, col: 55, offset: 80868},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel3",
			pos:  position{line: 2643, col: 1, offset: 80933},
			expr: &actionExpr{
				pos: position{line: 2643, col: 22, offset: 80954},
				run: (*parser).callonNumericExprLevel31,
				expr: &seqExpr{
					pos: position{line: 2643, col: 22, offset: 80954},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2643, col: 22, offset: 80954},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2643, col: 28, offset: 80960},
								name: "NumericExprLevel2",
							},
						},
						&labeledExpr{
							pos:   position{line: 2643, col: 46, offset: 80978},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2643, col: 51, offset: 80983},
								expr: &seqExpr{
									pos: position{line: 2643, col: 52, offset: 80984},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 2643, col: 53, offset: 80985},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 2643, col: 53, offset: 80985},
													name: "OpPlus",
												},
												&ruleRefExpr{
													pos:  position{line: 2643, col: 62, offset: 80994},
													name: "OpMinus",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2643, col: 71, offset: 81003},
											name: "NumericExprLevel2",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel2",
			pos:  position{line: 2664, col: 1, offset: 81504},
			expr: &actionExpr{
				pos: position{line: 2664, col: 22, offset: 81525},
				run: (*parser).callonNumericExprLevel21,
				expr: &seqExpr{
					pos: position{line: 2664, col: 22, offset: 81525},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2664, col: 22, offset: 81525},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2664, col: 28, offset: 81531},
								name: "NumericExprLevel1",
							},
						},
						&labeledExpr{
							pos:   position{line: 2664, col: 46, offset: 81549},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2664, col: 51, offset: 81554},
								expr: &seqExpr{
									pos: position{line: 2664, col: 52, offset: 81555},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 2664, col: 53, offset: 81556},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 2664, col: 53, offset: 81556},
													name: "OpMul",
												},
												&ruleRefExpr{
													pos:  position{line: 2664, col: 61, offset: 81564},
													name: "OpDiv",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2664, col: 68, offset: 81571},
											name: "NumericExprLevel1",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NumericParamExpr",
			pos:  position{line: 2684, col: 1, offset: 82040},
			expr: &actionExpr{
				pos: position{line: 2684, col: 21, offset: 82060},
				run: (*parser).callonNumericParamExpr1,
				expr: &seqExpr{
					pos: position{line: 2684, col: 21, offset: 82060},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2684, col: 21, offset: 82060},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 2684, col: 27, offset: 82066},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 2684, col: 32, offset: 82071},
								name: "NumericExprLevel3",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericExprLevel1",
			pos:  position{line: 2694, col: 1, offset: 82315},
			expr: &choiceExpr{
				pos: position{line: 2694, col: 22, offset: 82336},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2694, col: 22, offset: 82336},
						run: (*parser).callonNumericExprLevel12,
						expr: &seqExpr{
							pos: position{line: 2694, col: 22, offset: 82336},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2694, col: 22, offset: 82336},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2694, col: 30, offset: 82344},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2694, col: 35, offset: 82349},
										name: "NumericExprLevel3",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2694, col: 53, offset: 82367},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2697, col: 3, offset: 82402},
						run: (*parser).callonNumericExprLevel18,
						expr: &labeledExpr{
							pos:   position{line: 2697, col: 3, offset: 82402},
							label: "numericEvalExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 2697, col: 20, offset: 82419},
								name: "NumericEvalExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2700, col: 3, offset: 82473},
						run: (*parser).callonNumericExprLevel111,
						expr: &labeledExpr{
							pos:   position{line: 2700, col: 3, offset: 82473},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 2700, col: 9, offset: 82479},
								name: "EvalFieldToRead",
							},
						},
					},
					&actionExpr{
						pos: position{line: 2710, col: 3, offset: 82698},
						run: (*parser).callonNumericExprLevel114,
						expr: &labeledExpr{
							pos:   position{line: 2710, col: 3, offset: 82698},
							label: "number",
							expr: &ruleRefExpr{
								pos:  position{line: 2710, col: 10, offset: 82705},
								name: "NumberAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "NumericEvalExpr",
			pos:  position{line: 2723, col: 1, offset: 83083},
			expr: &choiceExpr{
				pos: position{line: 2723, col: 20, offset: 83102},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2723, col: 20, offset: 83102},
						run: (*parser).callonNumericEvalExpr2,
						expr: &seqExpr{
							pos: position{line: 2723, col: 21, offset: 83103},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2723, col: 21, offset: 83103},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2723, col: 29, offset: 83111},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2723, col: 29, offset: 83111},
												val:        "abs",
												ignoreCase: false,
												want:       "\"abs\"",
											},
											&litMatcher{
												pos:        position{line: 2723, col: 37, offset: 83119},
												val:        "ceil",
												ignoreCase: false,
												want:       "\"ceil\"",
											},
											&litMatcher{
												pos:        position{line: 2723, col: 46, offset: 83128},
												val:        "ceiling",
												ignoreCase: false,
												want:       "\"ceiling\"",
											},
											&litMatcher{
												pos:        position{line: 2723, col: 58, offset: 83140},
												val:        "sqrt",
												ignoreCase: false,
												want:       "\"sqrt\"",
											},
											&litMatcher{
												pos:        position{line: 2723, col: 67, offset: 83149},
												val:        "exact",
												ignoreCase: false,
												want:       "\"exact\"",
											},
											&litMatcher{
												pos:        position{line: 2723, col: 77, offset: 83159},
												val:        "exp",
												ignoreCase: false,
												want:       "\"exp\"",
											},
											&litMatcher{
												pos:        position{line: 2723, col: 85, offset: 83167},
												val:        "floor",
												ignoreCase: false,
												want:       "\"floor\"",
											},
											&litMatcher{
												pos:        position{line: 2723, col: 95, offset: 83177},
												val:        "ln",
												ignoreCase: false,
												want:       "\"ln\"",
											},
											&litMatcher{
												pos:        position{line: 2723, col: 102, offset: 83184},
												val:        "sigfig",
												ignoreCase: false,
												want:       "\"sigfig\"",
											},
											&litMatcher{
												pos:        position{line: 2723, col: 113, offset: 83195},
												val:        "acosh",
												ignoreCase: false,
												want:       "\"acosh\"",
											},
											&litMatcher{
												pos:        position{line: 2723, col: 123, offset: 83205},
												val:        "acos",
												ignoreCase: false,
												want:       "\"acos\"",
											},
											&litMatcher{
												pos:        position{line: 2723, col: 132, offset: 83214},
												val:        "asinh",
												ignoreCase: false,
												want:       "\"asinh\"",
											},
											&litMatcher{
												pos:        position{line: 2723, col: 142, offset: 83224},
												val:        "asin",
												ignoreCase: false,
												want:       "\"asin\"",
											},
											&litMatcher{
												pos:        position{line: 2723, col: 151, offset: 83233},
												val:        "atanh",
												ignoreCase: false,
												want:       "\"atanh\"",
											},
											&litMatcher{
												pos:        position{line: 2723, col: 161, offset: 83243},
												val:        "atan",
												ignoreCase: false,
												want:       "\"atan\"",
											},
											&litMatcher{
												pos:        position{line: 2723, col: 170, offset: 83252},
												val:        "cosh",
												ignoreCase: false,
												want:       "\"cosh\"",
											},
											&litMatcher{
												pos:        position{line: 2723, col: 179, offset: 83261},
												val:        "cos",
												ignoreCase: false,
												want:       "\"cos\"",
											},
											&litMatcher{
												pos:        position{line: 2723, col: 187, offset: 83269},
												val:        "sinh",
												ignoreCase: false,
												want:       "\"sinh\"",
											},
											&litMatcher{
												pos:        position{line: 2723, col: 196, offset: 83278},
												val:        "sin",
												ignoreCase: false,
												want:       "\"sin\"",
											},
											&litMatcher{
												pos:        position{line: 2723, col: 204, offset: 83286},
												val:        "tanh",
												ignoreCase: false,
												want:       "\"tanh\"",
											},
											&litMatcher{
												pos:        position{line: 2723, col: 213, offset: 83295},
												val:        "tan",
												ignoreCase: false,
												want:       "\"tan\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2723, col: 220, offset: 83302},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2723, col: 228, offset: 83310},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2723, col: 234, offset: 83316},
										name: "NumericExprLevel3",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2723, col: 253, offset: 83335},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2743, col: 3, offset: 83847},
						run: (*parser).callonNumericEvalExpr31,
						expr: &seqExpr{
							pos: position{line: 2743, col: 3, offset: 83847},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2743, col: 3, offset: 83847},
									label: "roundExpr",
									expr: &litMatcher{
										pos:        position{line: 2743, col: 13, offset: 83857},
										val:        "round",
										ignoreCase: false,
										want:       "\"round\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2743, col: 21, offset: 83865},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2743, col: 29, offset: 83873},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2743, col: 35, offset: 83879},
										name: "NumericExprLevel3",
									},
								},
								&labeledExpr{
									pos:   position{line: 2743, col: 54, offset: 83898},
									label: "roundPrecision",
									expr: &zeroOrOneExpr{
										pos: position{line: 2743, col: 69, offset: 83913},
										expr: &ruleRefExpr{
											pos:  position{line: 2743, col: 70, offset: 83914},
											name: "NumericParamExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2743, col: 89, offset: 83933},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2764, col: 3, offset: 84551},
						run: (*parser).callonNumericEvalExpr42,
						expr: &seqExpr{
							pos: position{line: 2764, col: 4, offset: 84552},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2764, col: 4, offset: 84552},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2764, col: 12, offset: 84560},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2764, col: 12, offset: 84560},
												val:        "now",
												ignoreCase: false,
												want:       "\"now\"",
											},
											&litMatcher{
												pos:        position{line: 2764, col: 20, offset: 84568},
												val:        "pi",
												ignoreCase: false,
												want:       "\"pi\"",
											},
											&litMatcher{
												pos:        position{line: 2764, col: 27, offset: 84575},
												val:        "random",
												ignoreCase: false,
												want:       "\"random\"",
											},
											&litMatcher{
												pos:        position{line: 2764, col: 38, offset: 84586},
												val:        "time",
												ignoreCase: false,
												want:       "\"time\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2764, col: 46, offset: 84594},
									name: "L_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 2764, col: 54, offset: 84602},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2777, col: 3, offset: 84888},
						run: (*parser).callonNumericEvalExpr52,
						expr: &seqExpr{
							pos: position{line: 2777, col: 3, offset: 84888},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2777, col: 3, offset: 84888},
									val:        "tonumber",
									ignoreCase: false,
									want:       "\"tonumber\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2777, col: 14, offset: 84899},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2777, col: 22, offset: 84907},
									label: "stringExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 2777, col: 33, offset: 84918},
										name: "StringExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2777, col: 44, offset: 84929},
									label: "baseExpr",
									expr: &zeroOrOneExpr{
										pos: position{line: 2777, col: 53, offset: 84938},
										expr: &seqExpr{
											pos: position{line: 2777, col: 54, offset: 84939},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 2777, col: 54, offset: 84939},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 2777, col: 60, offset: 84945},
													name: "NumericExprLevel3",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2777, col: 80, offset: 84965},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2805, col: 3, offset: 85807},
						run: (*parser).callonNumericEvalExpr64,
						expr: &seqExpr{
							pos: position{line: 2805, col: 3, offset: 85807},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2805, col: 3, offset: 85807},
									label: "lenExpr",
									expr: &litMatcher{
										pos:        position{line: 2805, col: 12, offset: 85816},
										val:        "len",
										ignoreCase: false,
										want:       "\"len\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2805, col: 18, offset: 85822},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2805, col: 26, offset: 85830},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2805, col: 31, offset: 85835},
										name: "LenExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2805, col: 39, offset: 85843},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2808, col: 3, offset: 85878},
						run: (*parser).callonNumericEvalExpr72,
						expr: &seqExpr{
							pos: position{line: 2808, col: 4, offset: 85879},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2808, col: 4, offset: 85879},
									label: "opName",
									expr: &choiceExpr{
										pos: position{line: 2808, col: 12, offset: 85887},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2808, col: 12, offset: 85887},
												val:        "pow",
												ignoreCase: false,
												want:       "\"pow\"",
											},
											&litMatcher{
												pos:        position{line: 2808, col: 20, offset: 85895},
												val:        "atan2",
												ignoreCase: false,
												want:       "\"atan2\"",
											},
											&litMatcher{
												pos:        position{line: 2808, col: 30, offset: 85905},
												val:        "hypot",
												ignoreCase: false,
												want:       "\"hypot\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2808, col: 39, offset: 85914},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2808, col: 47, offset: 85922},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2808, col: 53, offset: 85928},
										name: "NumericExprLevel3",
									},
								},
								&labeledExpr{
									pos:   position{line: 2808, col: 72, offset: 85947},
									label: "param",
									expr: &ruleRefExpr{
										pos:  position{line: 2808, col: 79, offset: 85954},
										name: "NumericParamExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2808, col: 97, offset: 85972},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2838, col: 3, offset: 86811},
						run: (*parser).callonNumericEvalExpr85,
						expr: &seqExpr{
							pos: position{line: 2838, col: 4, offset: 86812},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2838, col: 4, offset: 86812},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2838, col: 11, offset: 86819},
										val:        "log",
										ignoreCase: false,
										want:       "\"log\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2838, col: 17, offset: 86825},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2838, col: 25, offset: 86833},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2838, col: 31, offset: 86839},
										name: "NumericExprLevel3",
									},
								},
								&labeledExpr{
									pos:   position{line: 2838, col: 50, offset: 86858},
									label: "param",
									expr: &zeroOrOneExpr{
										pos: position{line: 2838, col: 56, offset: 86864},
										expr: &ruleRefExpr{
											pos:  position{line: 2838, col: 57, offset: 86865},
											name: "NumericParamExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2838, col: 76, offset: 86884},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2867, col: 3, offset: 87657},
						run: (*parser).callonNumericEvalExpr96,
						expr: &seqExpr{
							pos: position{line: 2867, col: 3, offset: 87657},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2867, col: 3, offset: 87657},
									label: "opName",
									expr: &litMatcher{
										pos:        position{line: 2867, col: 11, offset: 87665},
										val:        "relative_time",
										ignoreCase: false,
										want:       "\"relative_time\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2867, col: 28, offset: 87682},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 2867, col: 36, offset: 87690},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 2867, col: 42, offset: 87696},
										name: "NumericExprLevel3",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2867, col: 61, offset: 87715},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 2867, col: 67, offset: 87721},
									label: "specifier",
									expr: &ruleRefExpr{
										pos:  position{line: 2867, col: 77, offset: 87731},
										name: "StringExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2867, col: 88, offset: 87742},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LenExpr",
			pos:  position{line: 2880, col: 1, offset: 88119},
			expr: &choiceExpr{
				pos: position{line: 2880, col: 12, offset: 88130},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2880, col: 12, offset: 88130},
						run: (*parser).callonLenExpr2,
						expr: &seqExpr{
							pos: position{line: 2880, col: 12, offset: 88130},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2880, col: 12, offset: 88130},
									label: "str",
									expr: &ruleRefExpr{
										pos:  position{line: 2880, col: 16, offset: 88134},
										name: "QuotedString",
									},
								},
								&notExpr{
									pos: position{line: 2880, col: 29, offset: 88147},
									expr: &ruleRefExpr{
										pos:  position{line: 2880, col: 31, offset: 88149},
										name: "EVAL_CONCAT",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2896, col: 3, offset: 88510},
						run: (*parser).callonLenExpr8,
						expr: &seqExpr{
							pos: position{line: 2896, col: 3, offset: 88510},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2896, col: 3, offset: 88510},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 2896, col: 9, offset: 88516},
										name: "EvalFieldToRead",
									},
								},
								&notExpr{
									pos: position{line: 2896, col: 25, offset: 88532},
									expr: &choiceExpr{
										pos: position{line: 2896, col: 27, offset: 88534},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2896, col: 27, offset: 88534},
												name: "OpPlus",
											},
											&ruleRefExpr{
												pos:  position{line: 2896, col: 36, offset: 88543},
												name: "OpMinus",
											},
											&ruleRefExpr{
												pos:  position{line: 2896, col: 46, offset: 88553},
												name: "OpMul",
											},
											&ruleRefExpr{
												pos:  position{line: 2896, col: 54, offset: 88561},
												name: "OpDiv",
											},
											&ruleRefExpr{
												pos:  position{line: 2896, col: 62, offset: 88569},
												name: "EVAL_CONCAT",
											},
											&litMatcher{
												pos:        position{line: 2896, col: 76, offset: 88583},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOptionNull",
			pos:  position{line: 2913, col: 1, offset: 88934},
			expr: &actionExpr{
				pos: position{line: 2913, col: 19, offset: 88952},
				run: (*parser).callonHeadOptionNull1,
				expr: &seqExpr{
					pos: position{line: 2913, col: 19, offset: 88952},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 2913, col: 19, offset: 88952},
							val:        "null",
							ignoreCase: false,
							want:       "\"null\"",
						},
						&ruleRefExpr{
							pos:  position{line: 2913, col: 26, offset: 88959},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 2913, col: 32, offset: 88965},
							label: "boolVal",
							expr: &ruleRefExpr{
								pos:  position{line: 2913, col: 40, offset: 88973},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOptionKeeplast",
			pos:  position{line: 2924, col: 1, offset: 89162},
			expr: &actionExpr{
				pos: position{line: 2924, col: 23, offset: 89184},
				run: (*parser).callonHeadOptionKeeplast1,
				expr: &seqExpr{
					pos: position{line: 2924, col: 23, offset: 89184},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 2924, col: 23, offset: 89184},
							val:        "keeplast",
							ignoreCase: false,
							want:       "\"keeplast\"",
						},
						&ruleRefExpr{
							pos:  position{line: 2924, col: 34, offset: 89195},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 2924, col: 40, offset: 89201},
							label: "boolVal",
							expr: &ruleRefExpr{
								pos:  position{line: 2924, col: 48, offset: 89209},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOptionLimit",
			pos:  position{line: 2935, col: 1, offset: 89406},
			expr: &actionExpr{
				pos: position{line: 2935, col: 20, offset: 89425},
				run: (*parser).callonHeadOptionLimit1,
				expr: &seqExpr{
					pos: position{line: 2935, col: 20, offset: 89425},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 2935, col: 20, offset: 89425},
							val:        "limit",
							ignoreCase: false,
							want:       "\"limit\"",
						},
						&ruleRefExpr{
							pos:  position{line: 2935, col: 28, offset: 89433},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 2935, col: 34, offset: 89439},
							label: "intAsStr",
							expr: &ruleRefExpr{
								pos:  position{line: 2935, col: 43, offset: 89448},
								name: "IntegerAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOptionExpr",
			pos:  position{line: 2950, col: 1, offset: 89810},
			expr: &actionExpr{
				pos: position{line: 2950, col: 19, offset: 89828},
				run: (*parser).callonHeadOptionExpr1,
				expr: &labeledExpr{
					pos:   position{line: 2950, col: 19, offset: 89828},
					label: "boolExpr",
					expr: &ruleRefExpr{
						pos:  position{line: 2950, col: 28, offset: 89837},
						name: "BoolExpr",
					},
				},
			},
		},
		{
			name: "HeadOption",
			pos:  position{line: 2961, col: 1, offset: 90049},
			expr: &actionExpr{
				pos: position{line: 2961, col: 15, offset: 90063},
				run: (*parser).callonHeadOption1,
				expr: &labeledExpr{
					pos:   position{line: 2961, col: 15, offset: 90063},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 2961, col: 23, offset: 90071},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 2961, col: 23, offset: 90071},
								name: "HeadOptionKeeplast",
							},
							&ruleRefExpr{
								pos:  position{line: 2961, col: 44, offset: 90092},
								name: "HeadOptionNull",
							},
							&ruleRefExpr{
								pos:  position{line: 2961, col: 61, offset: 90109},
								name: "HeadOptionLimit",
							},
							&ruleRefExpr{
								pos:  position{line: 2961, col: 79, offset: 90127},
								name: "HeadOptionExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOptionList",
			pos:  position{line: 2965, col: 1, offset: 90171},
			expr: &actionExpr{
				pos: position{line: 2965, col: 19, offset: 90189},
				run: (*parser).callonHeadOptionList1,
				expr: &seqExpr{
					pos: position{line: 2965, col: 19, offset: 90189},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2965, col: 19, offset: 90189},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2965, col: 26, offset: 90196},
								name: "HeadOption",
							},
						},
						&labeledExpr{
							pos:   position{line: 2965, col: 37, offset: 90207},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2965, col: 43, offset: 90213},
								expr: &seqExpr{
									pos: position{line: 2965, col: 44, offset: 90214},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 2965, col: 44, offset: 90214},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 2965, col: 50, offset: 90220},
											name: "HeadOption",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HeadBlock",
			pos:  position{line: 3027, col: 1, offset: 92267},
			expr: &choiceExpr{
				pos: position{line: 3027, col: 14, offset: 92280},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3027, col: 14, offset: 92280},
						run: (*parser).callonHeadBlock2,
						expr: &seqExpr{
							pos: position{line: 3027, col: 14, offset: 92280},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 3027, col: 14, offset: 92280},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 3027, col: 19, offset: 92285},
									name: "CMD_HEAD",
								},
								&labeledExpr{
									pos:   position{line: 3027, col: 28, offset: 92294},
									label: "headExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3027, col: 37, offset: 92303},
										name: "HeadOptionList",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3037, col: 3, offset: 92574},
						run: (*parser).callonHeadBlock8,
						expr: &seqExpr{
							pos: position{line: 3037, col: 3, offset: 92574},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 3037, col: 3, offset: 92574},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 3037, col: 8, offset: 92579},
									name: "CMD_HEAD",
								},
								&labeledExpr{
									pos:   position{line: 3037, col: 17, offset: 92588},
									label: "intAsStr",
									expr: &ruleRefExpr{
										pos:  position{line: 3037, col: 26, offset: 92597},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3054, col: 3, offset: 93076},
						run: (*parser).callonHeadBlock14,
						expr: &seqExpr{
							pos: position{line: 3054, col: 3, offset: 93076},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 3054, col: 3, offset: 93076},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 3054, col: 8, offset: 93081},
									name: "CMD_HEAD_NO_SPACE",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TailBlock",
			pos:  position{line: 3068, col: 1, offset: 93512},
			expr: &choiceExpr{
				pos: position{line: 3068, col: 14, offset: 93525},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3068, col: 14, offset: 93525},
						run: (*parser).callonTailBlock2,
						expr: &seqExpr{
							pos: position{line: 3068, col: 14, offset: 93525},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 3068, col: 14, offset: 93525},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 3068, col: 19, offset: 93530},
									name: "CMD_TAIL",
								},
								&labeledExpr{
									pos:   position{line: 3068, col: 28, offset: 93539},
									label: "intAsStr",
									expr: &ruleRefExpr{
										pos:  position{line: 3068, col: 37, offset: 93548},
										name: "IntegerAsString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3088, col: 3, offset: 94097},
						run: (*parser).callonTailBlock8,
						expr: &seqExpr{
							pos: position{line: 3088, col: 3, offset: 94097},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 3088, col: 3, offset: 94097},
									name: "PIPE",
								},
								&ruleRefExpr{
									pos:  position{line: 3088, col: 8, offset: 94102},
									name: "CMD_TAIL_NO_SPACE",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggregationList",
			pos:  position{line: 3108, col: 1, offset: 94695},
			expr: &actionExpr{
				pos: position{line: 3108, col: 20, offset: 94714},
				run: (*parser).callonAggregationList1,
				expr: &seqExpr{
					pos: position{line: 3108, col: 20, offset: 94714},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3108, col: 20, offset: 94714},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 3108, col: 26, offset: 94720},
								name: "Aggregator",
							},
						},
						&labeledExpr{
							pos:   position{line: 3108, col: 37, offset: 94731},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3108, col: 42, offset: 94736},
								expr: &seqExpr{
									pos: position{line: 3108, col: 43, offset: 94737},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 3108, col: 44, offset: 94738},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 3108, col: 44, offset: 94738},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 3108, col: 52, offset: 94746},
													name: "SPACE",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 3108, col: 59, offset: 94753},
											name: "Aggregator",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Aggregator",
			pos:  position{line: 3125, col: 1, offset: 95256},
			expr: &actionExpr{
				pos: position{line: 3125, col: 15, offset: 95270},
				run: (*parser).callonAggregator1,
				expr: &seqExpr{
					pos: position{line: 3125, col: 15, offset: 95270},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3125, col: 15, offset: 95270},
							label: "aggFunc",
							expr: &ruleRefExpr{
								pos:  position{line: 3125, col: 23, offset: 95278},
								name: "AggFunction",
							},
						},
						&labeledExpr{
							pos:   position{line: 3125, col: 35, offset: 95290},
							label: "asField",
							expr: &zeroOrOneExpr{
								pos: position{line: 3125, col: 43, offset: 95298},
								expr: &ruleRefExpr{
									pos:  position{line: 3125, col: 43, offset: 95298},
									name: "AsField",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggFunction",
			pos:  position{line: 3141, col: 1, offset: 96139},
			expr: &actionExpr{
				pos: position{line: 3141, col: 16, offset: 96154},
				run: (*parser).callonAggFunction1,
				expr: &labeledExpr{
					pos:   position{line: 3141, col: 16, offset: 96154},
					label: "agg",
					expr: &choiceExpr{
						pos: position{line: 3141, col: 21, offset: 96159},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3141, col: 21, offset: 96159},
								name: "AggCount",
							},
							&ruleRefExpr{
								pos:  position{line: 3141, col: 32, offset: 96170},
								name: "AggDistinctCount",
							},
							&ruleRefExpr{
								pos:  position{line: 3141, col: 51, offset: 96189},
								name: "AggAvg",
							},
							&ruleRefExpr{
								pos:  position{line: 3141, col: 60, offset: 96198},
								name: "AggMin",
							},
							&ruleRefExpr{
								pos:  position{line: 3141, col: 69, offset: 96207},
								name: "AggMax",
							},
							&ruleRefExpr{
								pos:  position{line: 3141, col: 78, offset: 96216},
								name: "AggRange",
							},
							&ruleRefExpr{
								pos:  position{line: 3141, col: 89, offset: 96227},
								name: "AggSum",
							},
							&ruleRefExpr{
								pos:  position{line: 3141, col: 98, offset: 96236},
								name: "AggValues",
							},
							&ruleRefExpr{
								pos:  position{line: 3141, col: 110, offset: 96248},
								name: "AggEstdc",
							},
							&ruleRefExpr{
								pos:  position{line: 3141, col: 121, offset: 96259},
								name: "AggEstdcError",
							},
							&ruleRefExpr{
								pos:  position{line: 3141, col: 137, offset: 96275},
								name: "AggExactPerc",
							},
							&ruleRefExpr{
								pos:  position{line: 3141, col: 152, offset: 96290},
								name: "AggMedian",
							},
							&ruleRefExpr{
								pos:  position{line: 3141, col: 164, offset: 96302},
								name: "AggMode",
							},
							&ruleRefExpr{
								pos:  position{line: 3141, col: 174, offset: 96312},
								name: "AggPerc",
							},
							&ruleRefExpr{
								pos:  position{line: 3142, col: 1, offset: 96322},
								name: "AggStdev",
							},
							&ruleRefExpr{
								pos:  position{line: 3142, col: 12, offset: 96333},
								name: "AggStdevp",
							},
							&ruleRefExpr{
								pos:  position{line: 3142, col: 24, offset: 96345},
								name: "AggSumsq",
							},
							&ruleRefExpr{
								pos:  position{line: 3142, col: 35, offset: 96356},
								name: "AggUpperPerc",
							},
							&ruleRefExpr{
								pos:  position{line: 3142, col: 50, offset: 96371},
								name: "AggVar",
							},
							&ruleRefExpr{
								pos:  position{line: 3142, col: 59, offset: 96380},
								name: "AggVarp",
							},
							&ruleRefExpr{
								pos:  position{line: 3142, col: 69, offset: 96390},
								name: "AggFirst",
							},
							&ruleRefExpr{
								pos:  position{line: 3142, col: 80, offset: 96401},
								name: "AggLast",
							},
							&ruleRefExpr{
								pos:  position{line: 3142, col: 90, offset: 96411},
								name: "AggList",
							},
							&ruleRefExpr{
								pos:  position{line: 3142, col: 100, offset: 96421},
								name: "AggEarliest",
							},
							&ruleRefExpr{
								pos:  position{line: 3142, col: 114, offset: 96435},
								name: "AggEarliestTime",
							},
							&ruleRefExpr{
								pos:  position{line: 3142, col: 132, offset: 96453},
								name: "AggLatest",
							},
							&ruleRefExpr{
								pos:  position{line: 3142, col: 144, offset: 96465},
								name: "AggLatestTime",
							},
							&ruleRefExpr{
								pos:  position{line: 3142, col: 160, offset: 96481},
								name: "AggRate",
							},
						},
					},
				},
			},
		},
		{
			name: "AsField",
			pos:  position{line: 3146, col: 1, offset: 96515},
			expr: &actionExpr{
				pos: position{line: 3146, col: 12, offset: 96526},
				run: (*parser).callonAsField1,
				expr: &seqExpr{
					pos: position{line: 3146, col: 12, offset: 96526},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3146, col: 12, offset: 96526},
							name: "AS",
						},
						&labeledExpr{
							pos:   position{line: 3146, col: 15, offset: 96529},
							label: "field",
							expr: &choiceExpr{
								pos: position{line: 3146, col: 23, offset: 96537},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 3146, col: 23, offset: 96537},
										name: "FieldName",
									},
									&ruleRefExpr{
										pos:  position{line: 3146, col: 35, offset: 96549},
										name: "String",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggCount",
			pos:  position{line: 3160, col: 1, offset: 96878},
			expr: &choiceExpr{
				pos: position{line: 3160, col: 13, offset: 96890},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3160, col: 13, offset: 96890},
						run: (*parser).callonAggCount2,
						expr: &seqExpr{
							pos: position{line: 3160, col: 13, offset: 96890},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 3160, col: 14, offset: 96891},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 3160, col: 14, offset: 96891},
											val:        "count",
											ignoreCase: false,
											want:       "\"count\"",
										},
										&litMatcher{
											pos:        position{line: 3160, col: 24, offset: 96901},
											val:        "c",
											ignoreCase: false,
											want:       "\"c\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3160, col: 29, offset: 96906},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3160, col: 37, offset: 96914},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 3160, col: 44, offset: 96921},
									label: "boolExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3160, col: 53, offset: 96930},
										name: "BoolExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3160, col: 62, offset: 96939},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3175, col: 3, offset: 97289},
						run: (*parser).callonAggCount12,
						expr: &seqExpr{
							pos: position{line: 3175, col: 3, offset: 97289},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 3175, col: 4, offset: 97290},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 3175, col: 4, offset: 97290},
											val:        "count",
											ignoreCase: false,
											want:       "\"count\"",
										},
										&litMatcher{
											pos:        position{line: 3175, col: 14, offset: 97300},
											val:        "c",
											ignoreCase: false,
											want:       "\"c\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3175, col: 19, offset: 97305},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3175, col: 27, offset: 97313},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3175, col: 33, offset: 97319},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3175, col: 43, offset: 97329},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3182, col: 5, offset: 97480},
						run: (*parser).callonAggCount21,
						expr: &choiceExpr{
							pos: position{line: 3182, col: 6, offset: 97481},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 3182, col: 6, offset: 97481},
									val:        "count",
									ignoreCase: false,
									want:       "\"count\"",
								},
								&litMatcher{
									pos:        position{line: 3182, col: 16, offset: 97491},
									val:        "c",
									ignoreCase: false,
									want:       "\"c\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggDistinctCount",
			pos:  position{line: 3191, col: 1, offset: 97627},
			expr: &choiceExpr{
				pos: position{line: 3191, col: 21, offset: 97647},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3191, col: 21, offset: 97647},
						run: (*parser).callonAggDistinctCount2,
						expr: &seqExpr{
							pos: position{line: 3191, col: 21, offset: 97647},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 3191, col: 22, offset: 97648},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 3191, col: 22, offset: 97648},
											val:        "distinct_count",
											ignoreCase: false,
											want:       "\"distinct_count\"",
										},
										&litMatcher{
											pos:        position{line: 3191, col: 41, offset: 97667},
											val:        "dc",
											ignoreCase: false,
											want:       "\"dc\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3191, col: 47, offset: 97673},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3191, col: 55, offset: 97681},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 3191, col: 62, offset: 97688},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3191, col: 72, offset: 97698},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3191, col: 82, offset: 97708},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3201, col: 3, offset: 97942},
						run: (*parser).callonAggDistinctCount12,
						expr: &seqExpr{
							pos: position{line: 3201, col: 3, offset: 97942},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 3201, col: 4, offset: 97943},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 3201, col: 4, offset: 97943},
											val:        "distinct_count",
											ignoreCase: false,
											want:       "\"distinct_count\"",
										},
										&litMatcher{
											pos:        position{line: 3201, col: 23, offset: 97962},
											val:        "dc",
											ignoreCase: false,
											want:       "\"dc\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3201, col: 29, offset: 97968},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3201, col: 37, offset: 97976},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3201, col: 43, offset: 97982},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3201, col: 53, offset: 97992},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAvg",
			pos:  position{line: 3210, col: 1, offset: 98148},
			expr: &choiceExpr{
				pos: position{line: 3210, col: 11, offset: 98158},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3210, col: 11, offset: 98158},
						run: (*parser).callonAggAvg2,
						expr: &seqExpr{
							pos: position{line: 3210, col: 11, offset: 98158},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3210, col: 11, offset: 98158},
									val:        "avg",
									ignoreCase: false,
									want:       "\"avg\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3210, col: 17, offset: 98164},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3210, col: 25, offset: 98172},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3210, col: 32, offset: 98179},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3210, col: 40, offset: 98187},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3210, col: 59, offset: 98206},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3210, col: 78, offset: 98225},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3210, col: 86, offset: 98233},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3225, col: 3, offset: 98591},
						run: (*parser).callonAggAvg12,
						expr: &seqExpr{
							pos: position{line: 3225, col: 3, offset: 98591},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3225, col: 3, offset: 98591},
									val:        "avg",
									ignoreCase: false,
									want:       "\"avg\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3225, col: 9, offset: 98597},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3225, col: 17, offset: 98605},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3225, col: 23, offset: 98611},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3225, col: 33, offset: 98621},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMin",
			pos:  position{line: 3234, col: 1, offset: 98769},
			expr: &choiceExpr{
				pos: position{line: 3234, col: 11, offset: 98779},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3234, col: 11, offset: 98779},
						run: (*parser).callonAggMin2,
						expr: &seqExpr{
							pos: position{line: 3234, col: 11, offset: 98779},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3234, col: 11, offset: 98779},
									val:        "min",
									ignoreCase: false,
									want:       "\"min\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3234, col: 17, offset: 98785},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3234, col: 25, offset: 98793},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3234, col: 32, offset: 98800},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3234, col: 40, offset: 98808},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3234, col: 59, offset: 98827},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3234, col: 78, offset: 98846},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3234, col: 86, offset: 98854},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3249, col: 3, offset: 99212},
						run: (*parser).callonAggMin12,
						expr: &seqExpr{
							pos: position{line: 3249, col: 3, offset: 99212},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3249, col: 3, offset: 99212},
									val:        "min",
									ignoreCase: false,
									want:       "\"min\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3249, col: 9, offset: 99218},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3249, col: 17, offset: 99226},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3249, col: 23, offset: 99232},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3249, col: 33, offset: 99242},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMax",
			pos:  position{line: 3258, col: 1, offset: 99390},
			expr: &choiceExpr{
				pos: position{line: 3258, col: 11, offset: 99400},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3258, col: 11, offset: 99400},
						run: (*parser).callonAggMax2,
						expr: &seqExpr{
							pos: position{line: 3258, col: 11, offset: 99400},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3258, col: 11, offset: 99400},
									val:        "max",
									ignoreCase: false,
									want:       "\"max\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3258, col: 17, offset: 99406},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3258, col: 25, offset: 99414},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3258, col: 32, offset: 99421},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3258, col: 41, offset: 99430},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3258, col: 60, offset: 99449},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3258, col: 79, offset: 99468},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3258, col: 87, offset: 99476},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3273, col: 3, offset: 99834},
						run: (*parser).callonAggMax12,
						expr: &seqExpr{
							pos: position{line: 3273, col: 3, offset: 99834},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3273, col: 3, offset: 99834},
									val:        "max",
									ignoreCase: false,
									want:       "\"max\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3273, col: 9, offset: 99840},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3273, col: 17, offset: 99848},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3273, col: 23, offset: 99854},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3273, col: 33, offset: 99864},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggRange",
			pos:  position{line: 3282, col: 1, offset: 100012},
			expr: &choiceExpr{
				pos: position{line: 3282, col: 13, offset: 100024},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3282, col: 13, offset: 100024},
						run: (*parser).callonAggRange2,
						expr: &seqExpr{
							pos: position{line: 3282, col: 13, offset: 100024},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3282, col: 13, offset: 100024},
									val:        "range",
									ignoreCase: false,
									want:       "\"range\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3282, col: 21, offset: 100032},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3282, col: 29, offset: 100040},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3282, col: 36, offset: 100047},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3282, col: 44, offset: 100055},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3282, col: 63, offset: 100074},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3282, col: 82, offset: 100093},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3282, col: 90, offset: 100101},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3297, col: 3, offset: 100461},
						run: (*parser).callonAggRange12,
						expr: &seqExpr{
							pos: position{line: 3297, col: 3, offset: 100461},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3297, col: 3, offset: 100461},
									val:        "range",
									ignoreCase: false,
									want:       "\"range\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3297, col: 11, offset: 100469},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3297, col: 19, offset: 100477},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3297, col: 25, offset: 100483},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3297, col: 35, offset: 100493},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggSum",
			pos:  position{line: 3306, col: 1, offset: 100643},
			expr: &choiceExpr{
				pos: position{line: 3306, col: 11, offset: 100653},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3306, col: 11, offset: 100653},
						run: (*parser).callonAggSum2,
						expr: &seqExpr{
							pos: position{line: 3306, col: 11, offset: 100653},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3306, col: 11, offset: 100653},
									val:        "sum",
									ignoreCase: false,
									want:       "\"sum\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3306, col: 17, offset: 100659},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3306, col: 25, offset: 100667},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3306, col: 32, offset: 100674},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3306, col: 40, offset: 100682},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3306, col: 59, offset: 100701},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3306, col: 78, offset: 100720},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3306, col: 86, offset: 100728},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3321, col: 3, offset: 101086},
						run: (*parser).callonAggSum12,
						expr: &seqExpr{
							pos: position{line: 3321, col: 3, offset: 101086},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3321, col: 3, offset: 101086},
									val:        "sum",
									ignoreCase: false,
									want:       "\"sum\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3321, col: 9, offset: 101092},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3321, col: 17, offset: 101100},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3321, col: 23, offset: 101106},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3321, col: 33, offset: 101116},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggEstdc",
			pos:  position{line: 3331, col: 1, offset: 101304},
			expr: &choiceExpr{
				pos: position{line: 3331, col: 13, offset: 101316},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3331, col: 13, offset: 101316},
						run: (*parser).callonAggEstdc2,
						expr: &seqExpr{
							pos: position{line: 3331, col: 13, offset: 101316},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3331, col: 13, offset: 101316},
									val:        "estdc",
									ignoreCase: false,
									want:       "\"estdc\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3331, col: 21, offset: 101324},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3331, col: 29, offset: 101332},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3331, col: 36, offset: 101339},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3331, col: 44, offset: 101347},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3331, col: 63, offset: 101366},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3331, col: 82, offset: 101385},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3331, col: 90, offset: 101393},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3346, col: 3, offset: 101753},
						run: (*parser).callonAggEstdc12,
						expr: &seqExpr{
							pos: position{line: 3346, col: 3, offset: 101753},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3346, col: 3, offset: 101753},
									val:        "estdc",
									ignoreCase: false,
									want:       "\"estdc\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3346, col: 11, offset: 101761},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3346, col: 19, offset: 101769},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3346, col: 25, offset: 101775},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3346, col: 35, offset: 101785},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggEstdcError",
			pos:  position{line: 3356, col: 1, offset: 101975},
			expr: &choiceExpr{
				pos: position{line: 3356, col: 18, offset: 101992},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3356, col: 18, offset: 101992},
						run: (*parser).callonAggEstdcError2,
						expr: &seqExpr{
							pos: position{line: 3356, col: 18, offset: 101992},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3356, col: 18, offset: 101992},
									val:        "estdc_error",
									ignoreCase: false,
									want:       "\"estdc_error\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3356, col: 32, offset: 102006},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3356, col: 40, offset: 102014},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3356, col: 47, offset: 102021},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3356, col: 55, offset: 102029},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3356, col: 74, offset: 102048},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3356, col: 93, offset: 102067},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3356, col: 101, offset: 102075},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3371, col: 3, offset: 102440},
						run: (*parser).callonAggEstdcError12,
						expr: &seqExpr{
							pos: position{line: 3371, col: 3, offset: 102440},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3371, col: 3, offset: 102440},
									val:        "estdc_error",
									ignoreCase: false,
									want:       "\"estdc_error\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3371, col: 17, offset: 102454},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3371, col: 25, offset: 102462},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3371, col: 31, offset: 102468},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3371, col: 41, offset: 102478},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggExactPerc",
			pos:  position{line: 3381, col: 1, offset: 102673},
			expr: &choiceExpr{
				pos: position{line: 3381, col: 17, offset: 102689},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3381, col: 17, offset: 102689},
						run: (*parser).callonAggExactPerc2,
						expr: &seqExpr{
							pos: position{line: 3381, col: 17, offset: 102689},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3381, col: 17, offset: 102689},
									val:        "exactperc",
									ignoreCase: false,
									want:       "\"exactperc\"",
								},
								&labeledExpr{
									pos:   position{line: 3381, col: 29, offset: 102701},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 3381, col: 37, offset: 102709},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 3381, col: 37, offset: 102709},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 3381, col: 53, offset: 102725},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3381, col: 70, offset: 102742},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3381, col: 78, offset: 102750},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3381, col: 85, offset: 102757},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3381, col: 93, offset: 102765},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3381, col: 112, offset: 102784},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3381, col: 131, offset: 102803},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3381, col: 139, offset: 102811},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3397, col: 3, offset: 103207},
						run: (*parser).callonAggExactPerc16,
						expr: &seqExpr{
							pos: position{line: 3397, col: 3, offset: 103207},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3397, col: 3, offset: 103207},
									val:        "exactperc",
									ignoreCase: false,
									want:       "\"exactperc\"",
								},
								&labeledExpr{
									pos:   position{line: 3397, col: 15, offset: 103219},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 3397, col: 23, offset: 103227},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 3397, col: 23, offset: 103227},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 3397, col: 39, offset: 103243},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3397, col: 56, offset: 103260},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3397, col: 64, offset: 103268},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3397, col: 70, offset: 103274},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3397, col: 80, offset: 103284},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggPerc",
			pos:  position{line: 3408, col: 1, offset: 103510},
			expr: &choiceExpr{
				pos: position{line: 3408, col: 12, offset: 103521},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3408, col: 12, offset: 103521},
						run: (*parser).callonAggPerc2,
						expr: &seqExpr{
							pos: position{line: 3408, col: 12, offset: 103521},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3408, col: 12, offset: 103521},
									val:        "perc",
									ignoreCase: false,
									want:       "\"perc\"",
								},
								&labeledExpr{
									pos:   position{line: 3408, col: 19, offset: 103528},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 3408, col: 27, offset: 103536},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 3408, col: 27, offset: 103536},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 3408, col: 43, offset: 103552},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3408, col: 60, offset: 103569},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3408, col: 68, offset: 103577},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3408, col: 75, offset: 103584},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3408, col: 83, offset: 103592},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3408, col: 102, offset: 103611},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3408, col: 121, offset: 103630},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3408, col: 129, offset: 103638},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3424, col: 3, offset: 104029},
						run: (*parser).callonAggPerc16,
						expr: &seqExpr{
							pos: position{line: 3424, col: 3, offset: 104029},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3424, col: 3, offset: 104029},
									val:        "perc",
									ignoreCase: false,
									want:       "\"perc\"",
								},
								&labeledExpr{
									pos:   position{line: 3424, col: 10, offset: 104036},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 3424, col: 18, offset: 104044},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 3424, col: 18, offset: 104044},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 3424, col: 34, offset: 104060},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3424, col: 51, offset: 104077},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3424, col: 59, offset: 104085},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3424, col: 65, offset: 104091},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3424, col: 75, offset: 104101},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggUpperPerc",
			pos:  position{line: 3435, col: 1, offset: 104322},
			expr: &choiceExpr{
				pos: position{line: 3435, col: 17, offset: 104338},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3435, col: 17, offset: 104338},
						run: (*parser).callonAggUpperPerc2,
						expr: &seqExpr{
							pos: position{line: 3435, col: 17, offset: 104338},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3435, col: 17, offset: 104338},
									val:        "upperperc",
									ignoreCase: false,
									want:       "\"upperperc\"",
								},
								&labeledExpr{
									pos:   position{line: 3435, col: 29, offset: 104350},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 3435, col: 37, offset: 104358},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 3435, col: 37, offset: 104358},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 3435, col: 53, offset: 104374},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3435, col: 70, offset: 104391},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3435, col: 78, offset: 104399},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3435, col: 85, offset: 104406},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3435, col: 93, offset: 104414},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3435, col: 112, offset: 104433},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3435, col: 131, offset: 104452},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3435, col: 139, offset: 104460},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3451, col: 3, offset: 104856},
						run: (*parser).callonAggUpperPerc16,
						expr: &seqExpr{
							pos: position{line: 3451, col: 3, offset: 104856},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3451, col: 3, offset: 104856},
									val:        "upperperc",
									ignoreCase: false,
									want:       "\"upperperc\"",
								},
								&labeledExpr{
									pos:   position{line: 3451, col: 15, offset: 104868},
									label: "numStr",
									expr: &choiceExpr{
										pos: position{line: 3451, col: 23, offset: 104876},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 3451, col: 23, offset: 104876},
												name: "FloatAsString",
											},
											&ruleRefExpr{
												pos:  position{line: 3451, col: 39, offset: 104892},
												name: "IntegerAsString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3451, col: 56, offset: 104909},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3451, col: 64, offset: 104917},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3451, col: 70, offset: 104923},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3451, col: 80, offset: 104933},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMedian",
			pos:  position{line: 3462, col: 1, offset: 105159},
			expr: &choiceExpr{
				pos: position{line: 3462, col: 14, offset: 105172},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3462, col: 14, offset: 105172},
						run: (*parser).callonAggMedian2,
						expr: &seqExpr{
							pos: position{line: 3462, col: 14, offset: 105172},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3462, col: 14, offset: 105172},
									val:        "median",
									ignoreCase: false,
									want:       "\"median\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3462, col: 23, offset: 105181},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3462, col: 31, offset: 105189},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3462, col: 38, offset: 105196},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3462, col: 46, offset: 105204},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3462, col: 65, offset: 105223},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3462, col: 84, offset: 105242},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3462, col: 92, offset: 105250},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3477, col: 3, offset: 105611},
						run: (*parser).callonAggMedian12,
						expr: &seqExpr{
							pos: position{line: 3477, col: 3, offset: 105611},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3477, col: 3, offset: 105611},
									val:        "median",
									ignoreCase: false,
									want:       "\"median\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3477, col: 12, offset: 105620},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3477, col: 20, offset: 105628},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3477, col: 26, offset: 105634},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3477, col: 36, offset: 105644},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggMode",
			pos:  position{line: 3487, col: 1, offset: 105835},
			expr: &choiceExpr{
				pos: position{line: 3487, col: 12, offset: 105846},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3487, col: 12, offset: 105846},
						run: (*parser).callonAggMode2,
						expr: &seqExpr{
							pos: position{line: 3487, col: 12, offset: 105846},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3487, col: 12, offset: 105846},
									val:        "mode",
									ignoreCase: false,
									want:       "\"mode\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3487, col: 19, offset: 105853},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3487, col: 27, offset: 105861},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3487, col: 34, offset: 105868},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3487, col: 42, offset: 105876},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3487, col: 61, offset: 105895},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3487, col: 80, offset: 105914},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3487, col: 88, offset: 105922},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3502, col: 3, offset: 106281},
						run: (*parser).callonAggMode12,
						expr: &seqExpr{
							pos: position{line: 3502, col: 3, offset: 106281},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3502, col: 3, offset: 106281},
									val:        "mode",
									ignoreCase: false,
									want:       "\"mode\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3502, col: 10, offset: 106288},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3502, col: 18, offset: 106296},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3502, col: 24, offset: 106302},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3502, col: 34, offset: 106312},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggStdev",
			pos:  position{line: 3512, col: 1, offset: 106501},
			expr: &choiceExpr{
				pos: position{line: 3512, col: 13, offset: 106513},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3512, col: 13, offset: 106513},
						run: (*parser).callonAggStdev2,
						expr: &seqExpr{
							pos: position{line: 3512, col: 13, offset: 106513},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3512, col: 13, offset: 106513},
									val:        "stdev",
									ignoreCase: false,
									want:       "\"stdev\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3512, col: 21, offset: 106521},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3512, col: 29, offset: 106529},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3512, col: 36, offset: 106536},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3512, col: 44, offset: 106544},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3512, col: 63, offset: 106563},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3512, col: 82, offset: 106582},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3512, col: 90, offset: 106590},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3527, col: 3, offset: 106950},
						run: (*parser).callonAggStdev12,
						expr: &seqExpr{
							pos: position{line: 3527, col: 3, offset: 106950},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3527, col: 3, offset: 106950},
									val:        "stdev",
									ignoreCase: false,
									want:       "\"stdev\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3527, col: 11, offset: 106958},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3527, col: 19, offset: 106966},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3527, col: 25, offset: 106972},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3527, col: 35, offset: 106982},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggStdevp",
			pos:  position{line: 3537, col: 1, offset: 107172},
			expr: &choiceExpr{
				pos: position{line: 3537, col: 14, offset: 107185},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3537, col: 14, offset: 107185},
						run: (*parser).callonAggStdevp2,
						expr: &seqExpr{
							pos: position{line: 3537, col: 14, offset: 107185},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3537, col: 14, offset: 107185},
									val:        "stdevp",
									ignoreCase: false,
									want:       "\"stdevp\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3537, col: 23, offset: 107194},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3537, col: 31, offset: 107202},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3537, col: 38, offset: 107209},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3537, col: 46, offset: 107217},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3537, col: 65, offset: 107236},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3537, col: 84, offset: 107255},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3537, col: 92, offset: 107263},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3552, col: 3, offset: 107624},
						run: (*parser).callonAggStdevp12,
						expr: &seqExpr{
							pos: position{line: 3552, col: 3, offset: 107624},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3552, col: 3, offset: 107624},
									val:        "stdevp",
									ignoreCase: false,
									want:       "\"stdevp\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3552, col: 12, offset: 107633},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3552, col: 20, offset: 107641},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3552, col: 26, offset: 107647},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3552, col: 36, offset: 107657},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggSumsq",
			pos:  position{line: 3562, col: 1, offset: 107848},
			expr: &choiceExpr{
				pos: position{line: 3562, col: 13, offset: 107860},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3562, col: 13, offset: 107860},
						run: (*parser).callonAggSumsq2,
						expr: &seqExpr{
							pos: position{line: 3562, col: 13, offset: 107860},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3562, col: 13, offset: 107860},
									val:        "sumsq",
									ignoreCase: false,
									want:       "\"sumsq\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3562, col: 21, offset: 107868},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3562, col: 29, offset: 107876},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3562, col: 36, offset: 107883},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3562, col: 44, offset: 107891},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3562, col: 63, offset: 107910},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3562, col: 82, offset: 107929},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3562, col: 90, offset: 107937},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3577, col: 3, offset: 108297},
						run: (*parser).callonAggSumsq12,
						expr: &seqExpr{
							pos: position{line: 3577, col: 3, offset: 108297},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3577, col: 3, offset: 108297},
									val:        "sumsq",
									ignoreCase: false,
									want:       "\"sumsq\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3577, col: 11, offset: 108305},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3577, col: 19, offset: 108313},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3577, col: 25, offset: 108319},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3577, col: 35, offset: 108329},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggVar",
			pos:  position{line: 3587, col: 1, offset: 108519},
			expr: &choiceExpr{
				pos: position{line: 3587, col: 11, offset: 108529},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3587, col: 11, offset: 108529},
						run: (*parser).callonAggVar2,
						expr: &seqExpr{
							pos: position{line: 3587, col: 11, offset: 108529},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3587, col: 11, offset: 108529},
									val:        "var",
									ignoreCase: false,
									want:       "\"var\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3587, col: 17, offset: 108535},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3587, col: 25, offset: 108543},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3587, col: 32, offset: 108550},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3587, col: 40, offset: 108558},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3587, col: 59, offset: 108577},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3587, col: 78, offset: 108596},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3587, col: 86, offset: 108604},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3602, col: 3, offset: 108962},
						run: (*parser).callonAggVar12,
						expr: &seqExpr{
							pos: position{line: 3602, col: 3, offset: 108962},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3602, col: 3, offset: 108962},
									val:        "var",
									ignoreCase: false,
									want:       "\"var\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3602, col: 9, offset: 108968},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3602, col: 17, offset: 108976},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3602, col: 23, offset: 108982},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3602, col: 33, offset: 108992},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggVarp",
			pos:  position{line: 3612, col: 1, offset: 109180},
			expr: &choiceExpr{
				pos: position{line: 3612, col: 12, offset: 109191},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3612, col: 12, offset: 109191},
						run: (*parser).callonAggVarp2,
						expr: &seqExpr{
							pos: position{line: 3612, col: 12, offset: 109191},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3612, col: 12, offset: 109191},
									val:        "varp",
									ignoreCase: false,
									want:       "\"varp\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3612, col: 19, offset: 109198},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3612, col: 27, offset: 109206},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3612, col: 34, offset: 109213},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3612, col: 42, offset: 109221},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3612, col: 61, offset: 109240},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3612, col: 80, offset: 109259},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3612, col: 88, offset: 109267},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3627, col: 3, offset: 109626},
						run: (*parser).callonAggVarp12,
						expr: &seqExpr{
							pos: position{line: 3627, col: 3, offset: 109626},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3627, col: 3, offset: 109626},
									val:        "varp",
									ignoreCase: false,
									want:       "\"varp\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3627, col: 10, offset: 109633},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3627, col: 18, offset: 109641},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3627, col: 24, offset: 109647},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3627, col: 34, offset: 109657},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggFirst",
			pos:  position{line: 3637, col: 1, offset: 109846},
			expr: &choiceExpr{
				pos: position{line: 3637, col: 13, offset: 109858},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3637, col: 13, offset: 109858},
						run: (*parser).callonAggFirst2,
						expr: &seqExpr{
							pos: position{line: 3637, col: 13, offset: 109858},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3637, col: 13, offset: 109858},
									val:        "first",
									ignoreCase: false,
									want:       "\"first\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3637, col: 21, offset: 109866},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3637, col: 29, offset: 109874},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3637, col: 36, offset: 109881},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3637, col: 44, offset: 109889},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3637, col: 63, offset: 109908},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3637, col: 82, offset: 109927},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3637, col: 90, offset: 109935},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3652, col: 3, offset: 110295},
						run: (*parser).callonAggFirst12,
						expr: &seqExpr{
							pos: position{line: 3652, col: 3, offset: 110295},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3652, col: 3, offset: 110295},
									val:        "first",
									ignoreCase: false,
									want:       "\"first\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3652, col: 11, offset: 110303},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3652, col: 19, offset: 110311},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3652, col: 25, offset: 110317},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3652, col: 35, offset: 110327},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggLast",
			pos:  position{line: 3662, col: 1, offset: 110517},
			expr: &choiceExpr{
				pos: position{line: 3662, col: 12, offset: 110528},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3662, col: 12, offset: 110528},
						run: (*parser).callonAggLast2,
						expr: &seqExpr{
							pos: position{line: 3662, col: 12, offset: 110528},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3662, col: 12, offset: 110528},
									val:        "last",
									ignoreCase: false,
									want:       "\"last\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3662, col: 19, offset: 110535},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3662, col: 27, offset: 110543},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3662, col: 34, offset: 110550},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3662, col: 42, offset: 110558},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3662, col: 61, offset: 110577},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3662, col: 80, offset: 110596},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3662, col: 88, offset: 110604},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3677, col: 3, offset: 110963},
						run: (*parser).callonAggLast12,
						expr: &seqExpr{
							pos: position{line: 3677, col: 3, offset: 110963},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3677, col: 3, offset: 110963},
									val:        "last",
									ignoreCase: false,
									want:       "\"last\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3677, col: 10, offset: 110970},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3677, col: 18, offset: 110978},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3677, col: 24, offset: 110984},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3677, col: 34, offset: 110994},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggList",
			pos:  position{line: 3687, col: 1, offset: 111183},
			expr: &choiceExpr{
				pos: position{line: 3687, col: 12, offset: 111194},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3687, col: 12, offset: 111194},
						run: (*parser).callonAggList2,
						expr: &seqExpr{
							pos: position{line: 3687, col: 12, offset: 111194},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3687, col: 12, offset: 111194},
									val:        "list",
									ignoreCase: false,
									want:       "\"list\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3687, col: 19, offset: 111201},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3687, col: 27, offset: 111209},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 3687, col: 34, offset: 111216},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3687, col: 44, offset: 111226},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3687, col: 54, offset: 111236},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3697, col: 3, offset: 111463},
						run: (*parser).callonAggList10,
						expr: &seqExpr{
							pos: position{line: 3697, col: 3, offset: 111463},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3697, col: 3, offset: 111463},
									val:        "list",
									ignoreCase: false,
									want:       "\"list\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3697, col: 10, offset: 111470},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3697, col: 18, offset: 111478},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3697, col: 24, offset: 111484},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3697, col: 34, offset: 111494},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggEarliest",
			pos:  position{line: 3707, col: 1, offset: 111683},
			expr: &choiceExpr{
				pos: position{line: 3707, col: 16, offset: 111698},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3707, col: 16, offset: 111698},
						run: (*parser).callonAggEarliest2,
						expr: &seqExpr{
							pos: position{line: 3707, col: 16, offset: 111698},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3707, col: 16, offset: 111698},
									val:        "earliest",
									ignoreCase: false,
									want:       "\"earliest\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3707, col: 27, offset: 111709},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3707, col: 35, offset: 111717},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3707, col: 42, offset: 111724},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3707, col: 50, offset: 111732},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3707, col: 69, offset: 111751},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3707, col: 88, offset: 111770},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3707, col: 96, offset: 111778},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3722, col: 3, offset: 112141},
						run: (*parser).callonAggEarliest12,
						expr: &seqExpr{
							pos: position{line: 3722, col: 3, offset: 112141},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3722, col: 3, offset: 112141},
									val:        "earliest",
									ignoreCase: false,
									want:       "\"earliest\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3722, col: 14, offset: 112152},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3722, col: 22, offset: 112160},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3722, col: 28, offset: 112166},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3722, col: 38, offset: 112176},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggEarliestTime",
			pos:  position{line: 3732, col: 1, offset: 112369},
			expr: &choiceExpr{
				pos: position{line: 3732, col: 20, offset: 112388},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3732, col: 20, offset: 112388},
						run: (*parser).callonAggEarliestTime2,
						expr: &seqExpr{
							pos: position{line: 3732, col: 20, offset: 112388},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3732, col: 20, offset: 112388},
									val:        "earliest_time",
									ignoreCase: false,
									want:       "\"earliest_time\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3732, col: 36, offset: 112404},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3732, col: 44, offset: 112412},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3732, col: 51, offset: 112419},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3732, col: 59, offset: 112427},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3732, col: 78, offset: 112446},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3732, col: 97, offset: 112465},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3732, col: 105, offset: 112473},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3747, col: 3, offset: 112840},
						run: (*parser).callonAggEarliestTime12,
						expr: &seqExpr{
							pos: position{line: 3747, col: 3, offset: 112840},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3747, col: 3, offset: 112840},
									val:        "earliest_time",
									ignoreCase: false,
									want:       "\"earliest_time\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3747, col: 19, offset: 112856},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3747, col: 27, offset: 112864},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3747, col: 33, offset: 112870},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3747, col: 43, offset: 112880},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggLatest",
			pos:  position{line: 3757, col: 1, offset: 113077},
			expr: &choiceExpr{
				pos: position{line: 3757, col: 14, offset: 113090},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3757, col: 14, offset: 113090},
						run: (*parser).callonAggLatest2,
						expr: &seqExpr{
							pos: position{line: 3757, col: 14, offset: 113090},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3757, col: 14, offset: 113090},
									val:        "latest",
									ignoreCase: false,
									want:       "\"latest\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3757, col: 23, offset: 113099},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3757, col: 31, offset: 113107},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3757, col: 38, offset: 113114},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3757, col: 46, offset: 113122},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3757, col: 65, offset: 113141},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3757, col: 84, offset: 113160},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3757, col: 92, offset: 113168},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3772, col: 3, offset: 113529},
						run: (*parser).callonAggLatest12,
						expr: &seqExpr{
							pos: position{line: 3772, col: 3, offset: 113529},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3772, col: 3, offset: 113529},
									val:        "latest",
									ignoreCase: false,
									want:       "\"latest\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3772, col: 12, offset: 113538},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3772, col: 20, offset: 113546},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3772, col: 26, offset: 113552},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3772, col: 36, offset: 113562},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggLatestTime",
			pos:  position{line: 3782, col: 1, offset: 113753},
			expr: &choiceExpr{
				pos: position{line: 3782, col: 18, offset: 113770},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3782, col: 18, offset: 113770},
						run: (*parser).callonAggLatestTime2,
						expr: &seqExpr{
							pos: position{line: 3782, col: 18, offset: 113770},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3782, col: 18, offset: 113770},
									val:        "latest_time",
									ignoreCase: false,
									want:       "\"latest_time\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3782, col: 32, offset: 113784},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3782, col: 40, offset: 113792},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3782, col: 47, offset: 113799},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3782, col: 55, offset: 113807},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3782, col: 74, offset: 113826},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3782, col: 93, offset: 113845},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3782, col: 101, offset: 113853},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3797, col: 3, offset: 114218},
						run: (*parser).callonAggLatestTime12,
						expr: &seqExpr{
							pos: position{line: 3797, col: 3, offset: 114218},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3797, col: 3, offset: 114218},
									val:        "latest_time",
									ignoreCase: false,
									want:       "\"latest_time\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3797, col: 17, offset: 114232},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3797, col: 25, offset: 114240},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3797, col: 31, offset: 114246},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3797, col: 41, offset: 114256},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggRate",
			pos:  position{line: 3807, col: 1, offset: 114451},
			expr: &choiceExpr{
				pos: position{line: 3807, col: 12, offset: 114462},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3807, col: 12, offset: 114462},
						run: (*parser).callonAggRate2,
						expr: &seqExpr{
							pos: position{line: 3807, col: 12, offset: 114462},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3807, col: 12, offset: 114462},
									val:        "rate",
									ignoreCase: false,
									want:       "\"rate\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3807, col: 19, offset: 114469},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3807, col: 27, offset: 114477},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3807, col: 34, offset: 114484},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3807, col: 42, offset: 114492},
									label: "boolComparisonExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3807, col: 61, offset: 114511},
										name: "BoolComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3807, col: 80, offset: 114530},
									name: "R_PAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 3807, col: 88, offset: 114538},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3822, col: 3, offset: 114902},
						run: (*parser).callonAggRate12,
						expr: &seqExpr{
							pos: position{line: 3822, col: 3, offset: 114902},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3822, col: 3, offset: 114902},
									val:        "rate",
									ignoreCase: false,
									want:       "\"rate\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3822, col: 10, offset: 114909},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3822, col: 18, offset: 114917},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3822, col: 24, offset: 114923},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3822, col: 34, offset: 114933},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggValues",
			pos:  position{line: 3831, col: 1, offset: 115087},
			expr: &choiceExpr{
				pos: position{line: 3831, col: 14, offset: 115100},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 3831, col: 14, offset: 115100},
						run: (*parser).callonAggValues2,
						expr: &seqExpr{
							pos: position{line: 3831, col: 14, offset: 115100},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3831, col: 14, offset: 115100},
									val:        "values",
									ignoreCase: false,
									want:       "\"values\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3831, col: 23, offset: 115109},
									name: "L_PAREN",
								},
								&litMatcher{
									pos:        position{line: 3831, col: 31, offset: 115117},
									val:        "eval",
									ignoreCase: false,
									want:       "\"eval\"",
								},
								&labeledExpr{
									pos:   position{line: 3831, col: 38, offset: 115124},
									label: "valueExpr",
									expr: &ruleRefExpr{
										pos:  position{line: 3831, col: 48, offset: 115134},
										name: "ValueExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3831, col: 58, offset: 115144},
									name: "R_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3841, col: 3, offset: 115373},
						run: (*parser).callonAggValues10,
						expr: &seqExpr{
							pos: position{line: 3841, col: 3, offset: 115373},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 3841, col: 3, offset: 115373},
									val:        "values",
									ignoreCase: false,
									want:       "\"values\"",
								},
								&ruleRefExpr{
									pos:  position{line: 3841, col: 12, offset: 115382},
									name: "L_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 3841, col: 20, offset: 115390},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 3841, col: 26, offset: 115396},
										name: "FieldName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 3841, col: 36, offset: 115406},
									name: "R_PAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldWithNumberValue",
			pos:  position{line: 3850, col: 1, offset: 115557},
			expr: &actionExpr{
				pos: position{line: 3850, col: 25, offset: 115581},
				run: (*parser).callonFieldWithNumberValue1,
				expr: &labeledExpr{
					pos:   position{line: 3850, col: 25, offset: 115581},
					label: "keyValuePair",
					expr: &choiceExpr{
						pos: position{line: 3850, col: 39, offset: 115595},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3850, col: 39, offset: 115595},
								name: "NamedFieldWithNumberValue",
							},
							&ruleRefExpr{
								pos:  position{line: 3850, col: 67, offset: 115623},
								name: "UnnamedFieldWithNumberValue",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedFieldWithNumberValue",
			pos:  position{line: 3854, col: 1, offset: 115686},
			expr: &actionExpr{
				pos: position{line: 3854, col: 30, offset: 115715},
				run: (*parser).callonNamedFieldWithNumberValue1,
				expr: &seqExpr{
					pos: position{line: 3854, col: 30, offset: 115715},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3854, col: 30, offset: 115715},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 3854, col: 34, offset: 115719},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 3854, col: 44, offset: 115729},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 3854, col: 48, offset: 115733},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 3854, col: 48, offset: 115733},
										name: "EqualityOperator",
									},
									&ruleRefExpr{
										pos:  position{line: 3854, col: 67, offset: 115752},
										name: "InequalityOperator",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3854, col: 87, offset: 115772},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 3854, col: 93, offset: 115778},
								name: "Number",
							},
						},
					},
				},
			},
		},
		{
			name: "UnnamedFieldWithNumberValue",
			pos:  position{line: 3867, col: 1, offset: 116012},
			expr: &actionExpr{
				pos: position{line: 3867, col: 32, offset: 116043},
				run: (*parser).callonUnnamedFieldWithNumberValue1,
				expr: &labeledExpr{
					pos:   position{line: 3867, col: 32, offset: 116043},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 3867, col: 38, offset: 116049},
						name: "Number",
					},
				},
			},
		},
		{
			name: "FieldWithBooleanValue",
			pos:  position{line: 3880, col: 1, offset: 116266},
			expr: &actionExpr{
				pos: position{line: 3880, col: 26, offset: 116291},
				run: (*parser).callonFieldWithBooleanValue1,
				expr: &seqExpr{
					pos: position{line: 3880, col: 26, offset: 116291},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3880, col: 26, offset: 116291},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 3880, col: 30, offset: 116295},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 3880, col: 40, offset: 116305},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 3880, col: 43, offset: 116308},
								name: "EqualityOperator",
							},
						},
						&labeledExpr{
							pos:   position{line: 3880, col: 60, offset: 116325},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 3880, col: 66, offset: 116331},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldWithStringValue",
			pos:  position{line: 3893, col: 1, offset: 116566},
			expr: &actionExpr{
				pos: position{line: 3893, col: 25, offset: 116590},
				run: (*parser).callonFieldWithStringValue1,
				expr: &labeledExpr{
					pos:   position{line: 3893, col: 25, offset: 116590},
					label: "keyValuePair",
					expr: &choiceExpr{
						pos: position{line: 3893, col: 39, offset: 116604},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 3893, col: 39, offset: 116604},
								name: "NamedFieldWithStringValue",
							},
							&ruleRefExpr{
								pos:  position{line: 3893, col: 67, offset: 116632},
								name: "UnnamedFieldWithStringValue",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedFieldWithStringValue",
			pos:  position{line: 3897, col: 1, offset: 116695},
			expr: &actionExpr{
				pos: position{line: 3897, col: 30, offset: 116724},
				run: (*parser).callonNamedFieldWithStringValue1,
				expr: &seqExpr{
					pos: position{line: 3897, col: 30, offset: 116724},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3897, col: 30, offset: 116724},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 3897, col: 34, offset: 116728},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 3897, col: 44, offset: 116738},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 3897, col: 47, offset: 116741},
								name: "EqualityOperator",
							},
						},
						&labeledExpr{
							pos:   position{line: 3897, col: 64, offset: 116758},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 3897, col: 70, offset: 116764},
								name: "String",
							},
						},
					},
				},
			},
		},
		{
			name: "UnnamedFieldWithStringValue",
			pos:  position{line: 3909, col: 1, offset: 116997},
			expr: &actionExpr{
				pos: position{line: 3909, col: 32, offset: 117028},
				run: (*parser).callonUnnamedFieldWithStringValue1,
				expr: &labeledExpr{
					pos:   position{line: 3909, col: 32, offset: 117028},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 3909, col: 38, offset: 117034},
						name: "String",
					},
				},
			},
		},
		{
			name: "FieldNameList",
			pos:  position{line: 3923, col: 1, offset: 117365},
			expr: &actionExpr{
				pos: position{line: 3923, col: 18, offset: 117382},
				run: (*parser).callonFieldNameList1,
				expr: &seqExpr{
					pos: position{line: 3923, col: 18, offset: 117382},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 3923, col: 18, offset: 117382},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 3923, col: 24, offset: 117388},
								name: "FieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 3923, col: 34, offset: 117398},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3923, col: 39, offset: 117403},
								expr: &seqExpr{
									pos: position{line: 3923, col: 40, offset: 117404},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 3923, col: 40, offset: 117404},
											name: "COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 3923, col: 46, offset: 117410},
											name: "FieldName",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeModifiers",
			pos:  position{line: 3940, col: 1, offset: 117905},
			expr: &choiceExpr{
				pos: position{line: 3940, col: 18, offset: 117922},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 3940, col: 18, offset: 117922},
						name: "EarliestAndLatest",
					},
					&ruleRefExpr{
						pos:  position{line: 3940, col: 38, offset: 117942},
						name: "EarliestOnly",
					},
				},
			},
		},
		{
			name: "EarliestAndLatest",
			pos:  position{line: 3942, col: 1, offset: 117956},
			expr: &actionExpr{
				pos: position{line: 3942, col: 22, offset: 117977},
				run: (*parser).callonEarliestAndLatest1,
				expr: &seqExpr{
					pos: position{line: 3942, col: 22, offset: 117977},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3942, col: 22, offset: 117977},
							name: "CMD_EARLIEST",
						},
						&ruleRefExpr{
							pos:  position{line: 3942, col: 35, offset: 117990},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3942, col: 41, offset: 117996},
							label: "earliestTime",
							expr: &choiceExpr{
								pos: position{line: 3942, col: 55, offset: 118010},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 3942, col: 55, offset: 118010},
										name: "AbsoluteTimestamp",
									},
									&ruleRefExpr{
										pos:  position{line: 3942, col: 75, offset: 118030},
										name: "RelativeTimestamp",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 3942, col: 94, offset: 118049},
							name: "SPACE",
						},
						&ruleRefExpr{
							pos:  position{line: 3942, col: 100, offset: 118055},
							name: "CMD_LATEST",
						},
						&ruleRefExpr{
							pos:  position{line: 3942, col: 111, offset: 118066},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3942, col: 117, offset: 118072},
							label: "latestTime",
							expr: &choiceExpr{
								pos: position{line: 3942, col: 129, offset: 118084},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 3942, col: 129, offset: 118084},
										name: "AbsoluteTimestamp",
									},
									&ruleRefExpr{
										pos:  position{line: 3942, col: 149, offset: 118104},
										name: "RelativeTimestamp",
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 3942, col: 168, offset: 118123},
							expr: &anyMatcher{
								line: 3942, col: 169, offset: 118124,
							},
						},
					},
				},
			},
		},
		{
			name: "EarliestOnly",
			pos:  position{line: 3973, col: 1, offset: 118856},
			expr: &actionExpr{
				pos: position{line: 3973, col: 17, offset: 118872},
				run: (*parser).callonEarliestOnly1,
				expr: &seqExpr{
					pos: position{line: 3973, col: 17, offset: 118872},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 3973, col: 17, offset: 118872},
							name: "CMD_EARLIEST",
						},
						&ruleRefExpr{
							pos:  position{line: 3973, col: 30, offset: 118885},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 3973, col: 36, offset: 118891},
							label: "earliestTime",
							expr: &choiceExpr{
								pos: position{line: 3973, col: 50, offset: 118905},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 3973, col: 50, offset: 118905},
										name: "AbsoluteTimestamp",
									},
									&ruleRefExpr{
										pos:  position{line: 3973, col: 70, offset: 118925},
										name: "RelativeTimestamp",
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 3973, col: 89, offset: 118944},
							expr: &anyMatcher{
								line: 3973, col: 90, offset: 118945,
							},
						},
					},
				},
			},
		},
		{
			name: "RelIntegerAsString",
			pos:  position{line: 3996, col: 1, offset: 119456},
			expr: &actionExpr{
				pos: position{line: 3996, col: 23, offset: 119478},
				run: (*parser).callonRelIntegerAsString1,
				expr: &seqExpr{
					pos: position{line: 3996, col: 23, offset: 119478},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 3996, col: 23, offset: 119478},
							val:        "[-+]",
							chars:      []rune{'-', '+'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 3996, col: 27, offset: 119482},
							expr: &charClassMatcher{
								pos:        position{line: 3996, col: 27, offset: 119482},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "WeekSnap",
			pos:  position{line: 4000, col: 1, offset: 119525},
			expr: &actionExpr{
				pos: position{line: 4000, col: 13, offset: 119537},
				run: (*parser).callonWeekSnap1,
				expr: &seqExpr{
					pos: position{line: 4000, col: 14, offset: 119538},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4000, col: 14, offset: 119538},
							val:        "w",
							ignoreCase: false,
							want:       "\"w\"",
						},
						&charClassMatcher{
							pos:        position{line: 4000, col: 17, offset: 119541},
							val:        "[0-7]",
							ranges:     []rune{'0', '7'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "RelTimeUnit",
			pos:  position{line: 4004, col: 1, offset: 119584},
			expr: &actionExpr{
				pos: position{line: 4004, col: 16, offset: 119599},
				run: (*parser).callonRelTimeUnit1,
				expr: &labeledExpr{
					pos:   position{line: 4004, col: 16, offset: 119599},
					label: "timeUnit",
					expr: &choiceExpr{
						pos: position{line: 4004, col: 26, offset: 119609},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4004, col: 26, offset: 119609},
								name: "Second",
							},
							&ruleRefExpr{
								pos:  position{line: 4004, col: 35, offset: 119618},
								name: "Month",
							},
							&ruleRefExpr{
								pos:  position{line: 4004, col: 43, offset: 119626},
								name: "Minute",
							},
							&ruleRefExpr{
								pos:  position{line: 4004, col: 52, offset: 119635},
								name: "Hour",
							},
							&ruleRefExpr{
								pos:  position{line: 4004, col: 59, offset: 119642},
								name: "Day",
							},
							&ruleRefExpr{
								pos:  position{line: 4004, col: 65, offset: 119648},
								name: "Week",
							},
							&ruleRefExpr{
								pos:  position{line: 4004, col: 72, offset: 119655},
								name: "Quarter",
							},
							&ruleRefExpr{
								pos:  position{line: 4004, col: 82, offset: 119665},
								name: "Year",
							},
						},
					},
				},
			},
		},
		{
			name: "Snap",
			pos:  position{line: 4008, col: 1, offset: 119737},
			expr: &actionExpr{
				pos: position{line: 4008, col: 9, offset: 119745},
				run: (*parser).callonSnap1,
				expr: &seqExpr{
					pos: position{line: 4008, col: 9, offset: 119745},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4008, col: 9, offset: 119745},
							val:        "@",
							ignoreCase: false,
							want:       "\"@\"",
						},
						&labeledExpr{
							pos:   position{line: 4008, col: 13, offset: 119749},
							label: "snap",
							expr: &choiceExpr{
								pos: position{line: 4008, col: 19, offset: 119755},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 4008, col: 19, offset: 119755},
										name: "WeekSnap",
									},
									&ruleRefExpr{
										pos:  position{line: 4008, col: 30, offset: 119766},
										name: "RelTimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Offset",
			pos:  position{line: 4012, col: 1, offset: 119814},
			expr: &actionExpr{
				pos: position{line: 4012, col: 11, offset: 119824},
				run: (*parser).callonOffset1,
				expr: &seqExpr{
					pos: position{line: 4012, col: 11, offset: 119824},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4012, col: 11, offset: 119824},
							label: "off",
							expr: &ruleRefExpr{
								pos:  position{line: 4012, col: 16, offset: 119829},
								name: "RelIntegerAsString",
							},
						},
						&labeledExpr{
							pos:   position{line: 4012, col: 36, offset: 119849},
							label: "tuOff",
							expr: &ruleRefExpr{
								pos:  position{line: 4012, col: 43, offset: 119856},
								name: "RelTimeUnit",
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeTimestamp",
			pos:  position{line: 4043, col: 1, offset: 120741},
			expr: &actionExpr{
				pos: position{line: 4043, col: 22, offset: 120762},
				run: (*parser).callonRelativeTimestamp1,
				expr: &seqExpr{
					pos: position{line: 4043, col: 22, offset: 120762},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4043, col: 22, offset: 120762},
							label: "defaultTime",
							expr: &zeroOrOneExpr{
								pos: position{line: 4043, col: 34, offset: 120774},
								expr: &choiceExpr{
									pos: position{line: 4043, col: 35, offset: 120775},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 4043, col: 35, offset: 120775},
											val:        "now",
											ignoreCase: false,
											want:       "\"now\"",
										},
										&litMatcher{
											pos:        position{line: 4043, col: 43, offset: 120783},
											val:        "1",
											ignoreCase: false,
											want:       "\"1\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 4043, col: 49, offset: 120789},
							label: "offset",
							expr: &zeroOrOneExpr{
								pos: position{line: 4043, col: 56, offset: 120796},
								expr: &ruleRefExpr{
									pos:  position{line: 4043, col: 57, offset: 120797},
									name: "Offset",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 4043, col: 66, offset: 120806},
							label: "snapParam",
							expr: &zeroOrOneExpr{
								pos: position{line: 4043, col: 76, offset: 120816},
								expr: &ruleRefExpr{
									pos:  position{line: 4043, col: 77, offset: 120817},
									name: "Snap",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AbsoluteTimestamp",
			pos:  position{line: 4087, col: 1, offset: 121997},
			expr: &actionExpr{
				pos: position{line: 4087, col: 22, offset: 122018},
				run: (*parser).callonAbsoluteTimestamp1,
				expr: &seqExpr{
					pos: position{line: 4087, col: 22, offset: 122018},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 4087, col: 22, offset: 122018},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 4087, col: 27, offset: 122023},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 4087, col: 33, offset: 122029},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&charClassMatcher{
							pos:        position{line: 4087, col: 37, offset: 122033},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 4087, col: 42, offset: 122038},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 4087, col: 48, offset: 122044},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&charClassMatcher{
							pos:        position{line: 4087, col: 52, offset: 122048},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 4087, col: 57, offset: 122053},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 4087, col: 62, offset: 122058},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 4087, col: 67, offset: 122063},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 4087, col: 73, offset: 122069},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&charClassMatcher{
							pos:        position{line: 4087, col: 77, offset: 122073},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 4087, col: 82, offset: 122078},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 4087, col: 88, offset: 122084},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&charClassMatcher{
							pos:        position{line: 4087, col: 92, offset: 122088},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 4087, col: 97, offset: 122093},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 4087, col: 103, offset: 122099},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&charClassMatcher{
							pos:        position{line: 4087, col: 107, offset: 122103},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 4087, col: 112, offset: 122108},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 4097, col: 1, offset: 122504},
			expr: &actionExpr{
				pos: position{line: 4097, col: 14, offset: 122517},
				run: (*parser).callonFieldName1,
				expr: &seqExpr{
					pos: position{line: 4097, col: 14, offset: 122517},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 4097, col: 14, offset: 122517},
							val:        "[a-zA-Z0-9:*]",
							chars:      []rune{':', '*'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 4097, col: 27, offset: 122530},
							expr: &charClassMatcher{
								pos:        position{line: 4097, col: 27, offset: 122530},
								val:        "[a-zA-Z0-9:_.*]",
								chars:      []rune{':', '_', '.', '*'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "FieldNameStartWith_",
			pos:  position{line: 4101, col: 1, offset: 122583},
			expr: &actionExpr{
				pos: position{line: 4101, col: 24, offset: 122606},
				run: (*parser).callonFieldNameStartWith_1,
				expr: &seqExpr{
					pos: position{line: 4101, col: 24, offset: 122606},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 4101, col: 24, offset: 122606},
							val:        "[a-zA-Z0-9:_.*]",
							chars:      []rune{':', '_', '.', '*'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 4101, col: 39, offset: 122621},
							expr: &charClassMatcher{
								pos:        position{line: 4101, col: 39, offset: 122621},
								val:        "[a-zA-Z0-9:_.*]",
								chars:      []rune{':', '_', '.', '*'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "String",
			pos:  position{line: 4105, col: 1, offset: 122674},
			expr: &actionExpr{
				pos: position{line: 4105, col: 11, offset: 122684},
				run: (*parser).callonString1,
				expr: &labeledExpr{
					pos:   position{line: 4105, col: 11, offset: 122684},
					label: "str",
					expr: &choiceExpr{
						pos: position{line: 4105, col: 16, offset: 122689},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4105, col: 16, offset: 122689},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 4105, col: 31, offset: 122704},
								name: "UnquotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 4109, col: 1, offset: 122745},
			expr: &actionExpr{
				pos: position{line: 4109, col: 17, offset: 122761},
				run: (*parser).callonQuotedString1,
				expr: &seqExpr{
					pos: position{line: 4109, col: 17, offset: 122761},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4109, col: 17, offset: 122761},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 4109, col: 21, offset: 122765},
							expr: &charClassMatcher{
								pos:        position{line: 4109, col: 21, offset: 122765},
								val:        "[^\"]",
								chars:      []rune{'"'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 4109, col: 27, offset: 122771},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UnquotedString",
			pos:  position{line: 4114, col: 1, offset: 122882},
			expr: &actionExpr{
				pos: position{line: 4114, col: 19, offset: 122900},
				run: (*parser).callonUnquotedString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 4114, col: 19, offset: 122900},
					expr: &choiceExpr{
						pos: position{line: 4114, col: 20, offset: 122901},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 4114, col: 20, offset: 122901},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&seqExpr{
								pos: position{line: 4114, col: 27, offset: 122908},
								exprs: []any{
									&notExpr{
										pos: position{line: 4114, col: 27, offset: 122908},
										expr: &choiceExpr{
											pos: position{line: 4114, col: 29, offset: 122910},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 4114, col: 29, offset: 122910},
													name: "MAJOR_BREAK",
												},
												&litMatcher{
													pos:        position{line: 4114, col: 43, offset: 122924},
													val:        "|",
													ignoreCase: false,
													want:       "\"|\"",
												},
												&ruleRefExpr{
													pos:  position{line: 4114, col: 49, offset: 122930},
													name: "EOF",
												},
											},
										},
									},
									&anyMatcher{
										line: 4114, col: 54, offset: 122935,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AllowedChar",
			pos:  position{line: 4121, col: 1, offset: 123050},
			expr: &choiceExpr{
				pos: position{line: 4121, col: 16, offset: 123065},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 4121, col: 16, offset: 123065},
						val:        "[a-zA-Z0-9:_{}@.]",
						chars:      []rune{':', '_', '{', '}', '@', '.'},
						ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&seqExpr{
						pos: position{line: 4121, col: 37, offset: 123086},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 4121, col: 37, offset: 123086},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 4121, col: 41, offset: 123090},
								expr: &charClassMatcher{
									pos:        position{line: 4121, col: 41, offset: 123090},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&litMatcher{
								pos:        position{line: 4121, col: 48, offset: 123097},
								val:        "}",
								ignoreCase: false,
								want:       "\"}\"",
							},
						},
					},
				},
			},
		},
		{
			name: "UnquotedStringWithTemplateWildCard",
			pos:  position{line: 4123, col: 1, offset: 123103},
			expr: &actionExpr{
				pos: position{line: 4123, col: 39, offset: 123141},
				run: (*parser).callonUnquotedStringWithTemplateWildCard1,
				expr: &oneOrMoreExpr{
					pos: position{line: 4123, col: 39, offset: 123141},
					expr: &choiceExpr{
						pos: position{line: 4123, col: 40, offset: 123142},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4123, col: 40, offset: 123142},
								name: "AllowedChar",
							},
							&seqExpr{
								pos: position{line: 4123, col: 54, offset: 123156},
								exprs: []any{
									&notExpr{
										pos: position{line: 4123, col: 54, offset: 123156},
										expr: &choiceExpr{
											pos: position{line: 4123, col: 56, offset: 123158},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 4123, col: 56, offset: 123158},
													name: "MAJOR_BREAK",
												},
												&litMatcher{
													pos:        position{line: 4123, col: 70, offset: 123172},
													val:        "|",
													ignoreCase: false,
													want:       "\"|\"",
												},
												&ruleRefExpr{
													pos:  position{line: 4123, col: 76, offset: 123178},
													name: "EOF",
												},
											},
										},
									},
									&anyMatcher{
										line: 4123, col: 81, offset: 123183,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Boolean",
			pos:  position{line: 4127, col: 1, offset: 123223},
			expr: &actionExpr{
				pos: position{line: 4127, col: 12, offset: 123234},
				run: (*parser).callonBoolean1,
				expr: &choiceExpr{
					pos: position{line: 4127, col: 13, offset: 123235},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4127, col: 13, offset: 123235},
							val:        "true",
							ignoreCase: false,
							want:       "\"true\"",
						},
						&litMatcher{
							pos:        position{line: 4127, col: 22, offset: 123244},
							val:        "false",
							ignoreCase: false,
							want:       "\"false\"",
						},
					},
				},
			},
		},
		{
			name: "RenamePattern",
			pos:  position{line: 4133, col: 1, offset: 123398},
			expr: &actionExpr{
				pos: position{line: 4133, col: 18, offset: 123415},
				run: (*parser).callonRenamePattern1,
				expr: &oneOrMoreExpr{
					pos: position{line: 4133, col: 18, offset: 123415},
					expr: &charClassMatcher{
						pos:        position{line: 4133, col: 18, offset: 123415},
						val:        "[a-zA-Z0-9_*]",
						chars:      []rune{'_', '*'},
						ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 4137, col: 1, offset: 123466},
			expr: &actionExpr{
				pos: position{line: 4137, col: 11, offset: 123476},
				run: (*parser).callonNumber1,
				expr: &labeledExpr{
					pos:   position{line: 4137, col: 11, offset: 123476},
					label: "number",
					expr: &ruleRefExpr{
						pos:  position{line: 4137, col: 18, offset: 123483},
						name: "NumberAsString",
					},
				},
			},
		},
		{
			name: "NumberAsString",
			pos:  position{line: 4143, col: 1, offset: 123672},
			expr: &actionExpr{
				pos: position{line: 4143, col: 19, offset: 123690},
				run: (*parser).callonNumberAsString1,
				expr: &seqExpr{
					pos: position{line: 4143, col: 19, offset: 123690},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4143, col: 19, offset: 123690},
							label: "number",
							expr: &choiceExpr{
								pos: position{line: 4143, col: 27, offset: 123698},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 4143, col: 27, offset: 123698},
										name: "FloatAsString",
									},
									&ruleRefExpr{
										pos:  position{line: 4143, col: 43, offset: 123714},
										name: "IntegerAsString",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 4143, col: 60, offset: 123731},
							expr: &choiceExpr{
								pos: position{line: 4143, col: 62, offset: 123733},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 4143, col: 62, offset: 123733},
										name: "SPACE",
									},
									&litMatcher{
										pos:        position{line: 4143, col: 70, offset: 123741},
										val:        "|",
										ignoreCase: false,
										want:       "\"|\"",
									},
									&litMatcher{
										pos:        position{line: 4143, col: 76, offset: 123747},
										val:        ")",
										ignoreCase: false,
										want:       "\")\"",
									},
									&litMatcher{
										pos:        position{line: 4143, col: 82, offset: 123753},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&ruleRefExpr{
										pos:  position{line: 4143, col: 88, offset: 123759},
										name: "EOF",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FloatAsString",
			pos:  position{line: 4149, col: 1, offset: 123888},
			expr: &actionExpr{
				pos: position{line: 4149, col: 18, offset: 123905},
				run: (*parser).callonFloatAsString1,
				expr: &seqExpr{
					pos: position{line: 4149, col: 18, offset: 123905},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 4149, col: 18, offset: 123905},
							expr: &charClassMatcher{
								pos:        position{line: 4149, col: 18, offset: 123905},
								val:        "[-+]",
								chars:      []rune{'-', '+'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 4149, col: 24, offset: 123911},
							expr: &charClassMatcher{
								pos:        position{line: 4149, col: 24, offset: 123911},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 4149, col: 31, offset: 123918},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 4149, col: 35, offset: 123922},
							expr: &charClassMatcher{
								pos:        position{line: 4149, col: 35, offset: 123922},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "IntegerAsString",
			pos:  position{line: 4154, col: 1, offset: 124017},
			expr: &actionExpr{
				pos: position{line: 4154, col: 20, offset: 124036},
				run: (*parser).callonIntegerAsString1,
				expr: &seqExpr{
					pos: position{line: 4154, col: 20, offset: 124036},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 4154, col: 20, offset: 124036},
							expr: &charClassMatcher{
								pos:        position{line: 4154, col: 20, offset: 124036},
								val:        "[-+]",
								chars:      []rune{'-', '+'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 4154, col: 26, offset: 124042},
							expr: &charClassMatcher{
								pos:        position{line: 4154, col: 26, offset: 124042},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PositiveIntegerAsString",
			pos:  position{line: 4158, col: 1, offset: 124085},
			expr: &actionExpr{
				pos: position{line: 4158, col: 28, offset: 124112},
				run: (*parser).callonPositiveIntegerAsString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 4158, col: 28, offset: 124112},
					expr: &charClassMatcher{
						pos:        position{line: 4158, col: 28, offset: 124112},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 4162, col: 1, offset: 124155},
			expr: &actionExpr{
				pos: position{line: 4162, col: 21, offset: 124175},
				run: (*parser).callonEqualityOperator1,
				expr: &seqExpr{
					pos: position{line: 4162, col: 21, offset: 124175},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4162, col: 21, offset: 124175},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4162, col: 36, offset: 124190},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 4162, col: 40, offset: 124194},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 4162, col: 40, offset: 124194},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
									&litMatcher{
										pos:        position{line: 4162, col: 46, offset: 124200},
										val:        "!=",
										ignoreCase: false,
										want:       "\"!=\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4162, col: 52, offset: 124206},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "InequalityOperator",
			pos:  position{line: 4170, col: 1, offset: 124387},
			expr: &actionExpr{
				pos: position{line: 4170, col: 23, offset: 124409},
				run: (*parser).callonInequalityOperator1,
				expr: &seqExpr{
					pos: position{line: 4170, col: 23, offset: 124409},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4170, col: 23, offset: 124409},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4170, col: 38, offset: 124424},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 4170, col: 42, offset: 124428},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 4170, col: 42, offset: 124428},
										val:        "<=",
										ignoreCase: false,
										want:       "\"<=\"",
									},
									&litMatcher{
										pos:        position{line: 4170, col: 49, offset: 124435},
										val:        "<",
										ignoreCase: false,
										want:       "\"<\"",
									},
									&litMatcher{
										pos:        position{line: 4170, col: 55, offset: 124441},
										val:        ">=",
										ignoreCase: false,
										want:       "\">=\"",
									},
									&litMatcher{
										pos:        position{line: 4170, col: 62, offset: 124448},
										val:        ">",
										ignoreCase: false,
										want:       "\">\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4170, col: 67, offset: 124453},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "EqualityOrInequality",
			pos:  position{line: 4178, col: 1, offset: 124636},
			expr: &choiceExpr{
				pos: position{line: 4178, col: 25, offset: 124660},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 4178, col: 25, offset: 124660},
						run: (*parser).callonEqualityOrInequality2,
						expr: &labeledExpr{
							pos:   position{line: 4178, col: 25, offset: 124660},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 4178, col: 28, offset: 124663},
								name: "EqualityOperator",
							},
						},
					},
					&actionExpr{
						pos: position{line: 4181, col: 3, offset: 124705},
						run: (*parser).callonEqualityOrInequality5,
						expr: &labeledExpr{
							pos:   position{line: 4181, col: 3, offset: 124705},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 4181, col: 6, offset: 124708},
								name: "InequalityOperator",
							},
						},
					},
				},
			},
		},
		{
			name: "OpPlus",
			pos:  position{line: 4185, col: 1, offset: 124751},
			expr: &actionExpr{
				pos: position{line: 4185, col: 11, offset: 124761},
				run: (*parser).callonOpPlus1,
				expr: &seqExpr{
					pos: position{line: 4185, col: 11, offset: 124761},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4185, col: 11, offset: 124761},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 4185, col: 26, offset: 124776},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4185, col: 30, offset: 124780},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpMinus",
			pos:  position{line: 4189, col: 1, offset: 124820},
			expr: &actionExpr{
				pos: position{line: 4189, col: 12, offset: 124831},
				run: (*parser).callonOpMinus1,
				expr: &seqExpr{
					pos: position{line: 4189, col: 12, offset: 124831},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4189, col: 12, offset: 124831},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 4189, col: 27, offset: 124846},
							val:        "-",
							ignoreCase: false,
							want:       "\"-\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4189, col: 31, offset: 124850},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpMul",
			pos:  position{line: 4193, col: 1, offset: 124890},
			expr: &actionExpr{
				pos: position{line: 4193, col: 10, offset: 124899},
				run: (*parser).callonOpMul1,
				expr: &seqExpr{
					pos: position{line: 4193, col: 10, offset: 124899},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4193, col: 10, offset: 124899},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 4193, col: 25, offset: 124914},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4193, col: 29, offset: 124918},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "OpDiv",
			pos:  position{line: 4197, col: 1, offset: 124958},
			expr: &actionExpr{
				pos: position{line: 4197, col: 10, offset: 124967},
				run: (*parser).callonOpDiv1,
				expr: &seqExpr{
					pos: position{line: 4197, col: 10, offset: 124967},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4197, col: 10, offset: 124967},
							name: "EMPTY_OR_SPACE",
						},
						&litMatcher{
							pos:        position{line: 4197, col: 25, offset: 124982},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4197, col: 29, offset: 124986},
							name: "EMPTY_OR_SPACE",
						},
					},
				},
			},
		},
		{
			name: "Second",
			pos:  position{line: 4202, col: 1, offset: 125050},
			expr: &actionExpr{
				pos: position{line: 4202, col: 11, offset: 125060},
				run: (*parser).callonSecond1,
				expr: &choiceExpr{
					pos: position{line: 4202, col: 12, offset: 125061},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4202, col: 12, offset: 125061},
							val:        "seconds",
							ignoreCase: false,
							want:       "\"seconds\"",
						},
						&litMatcher{
							pos:        position{line: 4202, col: 24, offset: 125073},
							val:        "second",
							ignoreCase: false,
							want:       "\"second\"",
						},
						&litMatcher{
							pos:        position{line: 4202, col: 35, offset: 125084},
							val:        "secs",
							ignoreCase: false,
							want:       "\"secs\"",
						},
						&litMatcher{
							pos:        position{line: 4202, col: 44, offset: 125093},
							val:        "sec",
							ignoreCase: false,
							want:       "\"sec\"",
						},
						&litMatcher{
							pos:        position{line: 4202, col: 52, offset: 125101},
							val:        "s",
							ignoreCase: false,
							want:       "\"s\"",
						},
					},
				},
			},
		},
		{
			name: "Minute",
			pos:  position{line: 4206, col: 1, offset: 125142},
			expr: &actionExpr{
				pos: position{line: 4206, col: 11, offset: 125152},
				run: (*parser).callonMinute1,
				expr: &choiceExpr{
					pos: position{line: 4206, col: 12, offset: 125153},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4206, col: 12, offset: 125153},
							val:        "minutes",
							ignoreCase: false,
							want:       "\"minutes\"",
						},
						&litMatcher{
							pos:        position{line: 4206, col: 24, offset: 125165},
							val:        "minute",
							ignoreCase: false,
							want:       "\"minute\"",
						},
						&litMatcher{
							pos:        position{line: 4206, col: 35, offset: 125176},
							val:        "mins",
							ignoreCase: false,
							want:       "\"mins\"",
						},
						&litMatcher{
							pos:        position{line: 4206, col: 44, offset: 125185},
							val:        "min",
							ignoreCase: false,
							want:       "\"min\"",
						},
						&litMatcher{
							pos:        position{line: 4206, col: 52, offset: 125193},
							val:        "m",
							ignoreCase: false,
							want:       "\"m\"",
						},
					},
				},
			},
		},
		{
			name: "Hour",
			pos:  position{line: 4210, col: 1, offset: 125234},
			expr: &actionExpr{
				pos: position{line: 4210, col: 9, offset: 125242},
				run: (*parser).callonHour1,
				expr: &choiceExpr{
					pos: position{line: 4210, col: 10, offset: 125243},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4210, col: 10, offset: 125243},
							val:        "hours",
							ignoreCase: false,
							want:       "\"hours\"",
						},
						&litMatcher{
							pos:        position{line: 4210, col: 20, offset: 125253},
							val:        "hour",
							ignoreCase: false,
							want:       "\"hour\"",
						},
						&litMatcher{
							pos:        position{line: 4210, col: 29, offset: 125262},
							val:        "hrs",
							ignoreCase: false,
							want:       "\"hrs\"",
						},
						&litMatcher{
							pos:        position{line: 4210, col: 37, offset: 125270},
							val:        "hr",
							ignoreCase: false,
							want:       "\"hr\"",
						},
						&litMatcher{
							pos:        position{line: 4210, col: 44, offset: 125277},
							val:        "h",
							ignoreCase: false,
							want:       "\"h\"",
						},
					},
				},
			},
		},
		{
			name: "Day",
			pos:  position{line: 4214, col: 1, offset: 125316},
			expr: &actionExpr{
				pos: position{line: 4214, col: 8, offset: 125323},
				run: (*parser).callonDay1,
				expr: &choiceExpr{
					pos: position{line: 4214, col: 9, offset: 125324},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4214, col: 9, offset: 125324},
							val:        "days",
							ignoreCase: false,
							want:       "\"days\"",
						},
						&litMatcher{
							pos:        position{line: 4214, col: 18, offset: 125333},
							val:        "day",
							ignoreCase: false,
							want:       "\"day\"",
						},
						&litMatcher{
							pos:        position{line: 4214, col: 26, offset: 125341},
							val:        "d",
							ignoreCase: false,
							want:       "\"d\"",
						},
					},
				},
			},
		},
		{
			name: "Week",
			pos:  position{line: 4218, col: 1, offset: 125379},
			expr: &actionExpr{
				pos: position{line: 4218, col: 9, offset: 125387},
				run: (*parser).callonWeek1,
				expr: &choiceExpr{
					pos: position{line: 4218, col: 10, offset: 125388},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4218, col: 10, offset: 125388},
							val:        "weeks",
							ignoreCase: false,
							want:       "\"weeks\"",
						},
						&litMatcher{
							pos:        position{line: 4218, col: 20, offset: 125398},
							val:        "week",
							ignoreCase: false,
							want:       "\"week\"",
						},
						&litMatcher{
							pos:        position{line: 4218, col: 29, offset: 125407},
							val:        "w",
							ignoreCase: false,
							want:       "\"w\"",
						},
					},
				},
			},
		},
		{
			name: "Month",
			pos:  position{line: 4222, col: 1, offset: 125446},
			expr: &actionExpr{
				pos: position{line: 4222, col: 10, offset: 125455},
				run: (*parser).callonMonth1,
				expr: &choiceExpr{
					pos: position{line: 4222, col: 11, offset: 125456},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4222, col: 11, offset: 125456},
							val:        "months",
							ignoreCase: false,
							want:       "\"months\"",
						},
						&litMatcher{
							pos:        position{line: 4222, col: 22, offset: 125467},
							val:        "month",
							ignoreCase: false,
							want:       "\"month\"",
						},
						&litMatcher{
							pos:        position{line: 4222, col: 32, offset: 125477},
							val:        "mon",
							ignoreCase: false,
							want:       "\"mon\"",
						},
					},
				},
			},
		},
		{
			name: "Quarter",
			pos:  position{line: 4226, col: 1, offset: 125519},
			expr: &actionExpr{
				pos: position{line: 4226, col: 12, offset: 125530},
				run: (*parser).callonQuarter1,
				expr: &choiceExpr{
					pos: position{line: 4226, col: 13, offset: 125531},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4226, col: 13, offset: 125531},
							val:        "quarters",
							ignoreCase: false,
							want:       "\"quarters\"",
						},
						&litMatcher{
							pos:        position{line: 4226, col: 26, offset: 125544},
							val:        "quarter",
							ignoreCase: false,
							want:       "\"quarter\"",
						},
						&litMatcher{
							pos:        position{line: 4226, col: 38, offset: 125556},
							val:        "qtrs",
							ignoreCase: false,
							want:       "\"qtrs\"",
						},
						&litMatcher{
							pos:        position{line: 4226, col: 47, offset: 125565},
							val:        "qtr",
							ignoreCase: false,
							want:       "\"qtr\"",
						},
						&litMatcher{
							pos:        position{line: 4226, col: 55, offset: 125573},
							val:        "q",
							ignoreCase: false,
							want:       "\"q\"",
						},
					},
				},
			},
		},
		{
			name: "Year",
			pos:  position{line: 4230, col: 1, offset: 125615},
			expr: &actionExpr{
				pos: position{line: 4230, col: 9, offset: 125623},
				run: (*parser).callonYear1,
				expr: &choiceExpr{
					pos: position{line: 4230, col: 10, offset: 125624},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4230, col: 10, offset: 125624},
							val:        "years",
							ignoreCase: false,
							want:       "\"years\"",
						},
						&litMatcher{
							pos:        position{line: 4230, col: 20, offset: 125634},
							val:        "year",
							ignoreCase: false,
							want:       "\"year\"",
						},
						&litMatcher{
							pos:        position{line: 4230, col: 29, offset: 125643},
							val:        "yrs",
							ignoreCase: false,
							want:       "\"yrs\"",
						},
						&litMatcher{
							pos:        position{line: 4230, col: 37, offset: 125651},
							val:        "yr",
							ignoreCase: false,
							want:       "\"yr\"",
						},
						&litMatcher{
							pos:        position{line: 4230, col: 44, offset: 125658},
							val:        "y",
							ignoreCase: false,
							want:       "\"y\"",
						},
					},
				},
			},
		},
		{
			name: "Subseconds",
			pos:  position{line: 4235, col: 1, offset: 125789},
			expr: &actionExpr{
				pos: position{line: 4235, col: 15, offset: 125803},
				run: (*parser).callonSubseconds1,
				expr: &choiceExpr{
					pos: position{line: 4235, col: 16, offset: 125804},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 4235, col: 16, offset: 125804},
							val:        "us",
							ignoreCase: false,
							want:       "\"us\"",
						},
						&litMatcher{
							pos:        position{line: 4235, col: 23, offset: 125811},
							val:        "ms",
							ignoreCase: false,
							want:       "\"ms\"",
						},
						&litMatcher{
							pos:        position{line: 4235, col: 30, offset: 125818},
							val:        "cs",
							ignoreCase: false,
							want:       "\"cs\"",
						},
						&litMatcher{
							pos:        position{line: 4235, col: 37, offset: 125825},
							val:        "ds",
							ignoreCase: false,
							want:       "\"ds\"",
						},
					},
				},
			},
		},
		{
			name: "TransactionBlock",
			pos:  position{line: 4244, col: 1, offset: 126048},
			expr: &actionExpr{
				pos: position{line: 4244, col: 21, offset: 126068},
				run: (*parser).callonTransactionBlock1,
				expr: &seqExpr{
					pos: position{line: 4244, col: 21, offset: 126068},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4244, col: 21, offset: 126068},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 4244, col: 26, offset: 126073},
							name: "CMD_TRANSACTION",
						},
						&labeledExpr{
							pos:   position{line: 4244, col: 42, offset: 126089},
							label: "txnOptions",
							expr: &ruleRefExpr{
								pos:  position{line: 4244, col: 53, offset: 126100},
								name: "TransactionOptions",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionOptions",
			pos:  position{line: 4253, col: 1, offset: 126406},
			expr: &actionExpr{
				pos: position{line: 4253, col: 23, offset: 126428},
				run: (*parser).callonTransactionOptions1,
				expr: &labeledExpr{
					pos:   position{line: 4253, col: 23, offset: 126428},
					label: "txnOptions",
					expr: &zeroOrOneExpr{
						pos: position{line: 4253, col: 34, offset: 126439},
						expr: &ruleRefExpr{
							pos:  position{line: 4253, col: 34, offset: 126439},
							name: "TransactionDefinitionOptionsList",
						},
					},
				},
			},
		},
		{
			name: "TransactionDefinitionOptionsList",
			pos:  position{line: 4268, col: 1, offset: 126830},
			expr: &actionExpr{
				pos: position{line: 4268, col: 37, offset: 126866},
				run: (*parser).callonTransactionDefinitionOptionsList1,
				expr: &seqExpr{
					pos: position{line: 4268, col: 37, offset: 126866},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4268, col: 37, offset: 126866},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 4268, col: 43, offset: 126872},
								name: "TransactionDefinitionOption",
							},
						},
						&labeledExpr{
							pos:   position{line: 4268, col: 71, offset: 126900},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 4268, col: 76, offset: 126905},
								expr: &seqExpr{
									pos: position{line: 4268, col: 77, offset: 126906},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 4268, col: 77, offset: 126906},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 4268, col: 83, offset: 126912},
											name: "TransactionDefinitionOption",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionDefinitionOption",
			pos:  position{line: 4303, col: 1, offset: 127901},
			expr: &actionExpr{
				pos: position{line: 4303, col: 32, offset: 127932},
				run: (*parser).callonTransactionDefinitionOption1,
				expr: &labeledExpr{
					pos:   position{line: 4303, col: 32, offset: 127932},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 4303, col: 40, offset: 127940},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4303, col: 40, offset: 127940},
								name: "SpaceSeparatedFieldNameList",
							},
							&ruleRefExpr{
								pos:  position{line: 4303, col: 70, offset: 127970},
								name: "StartsWithOption",
							},
							&ruleRefExpr{
								pos:  position{line: 4303, col: 89, offset: 127989},
								name: "EndsWithOption",
							},
						},
					},
				},
			},
		},
		{
			name: "SpaceSeparatedFieldNameList",
			pos:  position{line: 4309, col: 1, offset: 128135},
			expr: &actionExpr{
				pos: position{line: 4309, col: 32, offset: 128166},
				run: (*parser).callonSpaceSeparatedFieldNameList1,
				expr: &seqExpr{
					pos: position{line: 4309, col: 32, offset: 128166},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4309, col: 32, offset: 128166},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 4309, col: 38, offset: 128172},
								name: "FieldName",
							},
						},
						&notExpr{
							pos: position{line: 4309, col: 48, offset: 128182},
							expr: &ruleRefExpr{
								pos:  position{line: 4309, col: 50, offset: 128184},
								name: "EQUAL",
							},
						},
						&labeledExpr{
							pos:   position{line: 4309, col: 57, offset: 128191},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 4309, col: 62, offset: 128196},
								expr: &seqExpr{
									pos: position{line: 4309, col: 63, offset: 128197},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 4309, col: 63, offset: 128197},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 4309, col: 69, offset: 128203},
											name: "FieldName",
										},
										&notExpr{
											pos: position{line: 4309, col: 79, offset: 128213},
											expr: &ruleRefExpr{
												pos:  position{line: 4309, col: 81, offset: 128215},
												name: "EQUAL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StartsWithOption",
			pos:  position{line: 4327, col: 1, offset: 128639},
			expr: &actionExpr{
				pos: position{line: 4327, col: 21, offset: 128659},
				run: (*parser).callonStartsWithOption1,
				expr: &seqExpr{
					pos: position{line: 4327, col: 21, offset: 128659},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4327, col: 21, offset: 128659},
							val:        "startswith",
							ignoreCase: false,
							want:       "\"startswith\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4327, col: 34, offset: 128672},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4327, col: 40, offset: 128678},
							label: "strExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 4327, col: 48, offset: 128686},
								name: "TransactionFilterString",
							},
						},
					},
				},
			},
		},
		{
			name: "EndsWithOption",
			pos:  position{line: 4337, col: 1, offset: 128924},
			expr: &actionExpr{
				pos: position{line: 4337, col: 19, offset: 128942},
				run: (*parser).callonEndsWithOption1,
				expr: &seqExpr{
					pos: position{line: 4337, col: 19, offset: 128942},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4337, col: 19, offset: 128942},
							val:        "endswith",
							ignoreCase: false,
							want:       "\"endswith\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4337, col: 30, offset: 128953},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4337, col: 36, offset: 128959},
							label: "strExpr",
							expr: &ruleRefExpr{
								pos:  position{line: 4337, col: 44, offset: 128967},
								name: "TransactionFilterString",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionFilterString",
			pos:  position{line: 4348, col: 1, offset: 129236},
			expr: &actionExpr{
				pos: position{line: 4348, col: 28, offset: 129263},
				run: (*parser).callonTransactionFilterString1,
				expr: &labeledExpr{
					pos:   position{line: 4348, col: 28, offset: 129263},
					label: "strExpr",
					expr: &choiceExpr{
						pos: position{line: 4348, col: 37, offset: 129272},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4348, col: 37, offset: 129272},
								name: "TransactionQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 4348, col: 63, offset: 129298},
								name: "TransactionEval",
							},
							&ruleRefExpr{
								pos:  position{line: 4348, col: 81, offset: 129316},
								name: "TransactionSearch",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionQuotedString",
			pos:  position{line: 4352, col: 1, offset: 129364},
			expr: &actionExpr{
				pos: position{line: 4352, col: 28, offset: 129391},
				run: (*parser).callonTransactionQuotedString1,
				expr: &labeledExpr{
					pos:   position{line: 4352, col: 28, offset: 129391},
					label: "str",
					expr: &choiceExpr{
						pos: position{line: 4352, col: 33, offset: 129396},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4352, col: 33, offset: 129396},
								name: "TransactionQuotedStringValue",
							},
							&ruleRefExpr{
								pos:  position{line: 4352, col: 64, offset: 129427},
								name: "TransactionQuotedStringSearchExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "TransactionQuotedStringSearchExpr",
			pos:  position{line: 4356, col: 1, offset: 129487},
			expr: &actionExpr{
				pos: position{line: 4356, col: 38, offset: 129524},
				run: (*parser).callonTransactionQuotedStringSearchExpr1,
				expr: &seqExpr{
					pos: position{line: 4356, col: 38, offset: 129524},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4356, col: 38, offset: 129524},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 4356, col: 42, offset: 129528},
							label: "searchClause",
							expr: &ruleRefExpr{
								pos:  position{line: 4356, col: 55, offset: 129541},
								name: "ClauseLevel4",
							},
						},
						&litMatcher{
							pos:        position{line: 4356, col: 68, offset: 129554},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedStringNoOp",
			pos:  position{line: 4364, col: 1, offset: 129693},
			expr: &actionExpr{
				pos: position{line: 4364, col: 21, offset: 129713},
				run: (*parser).callonQuotedStringNoOp1,
				expr: &seqExpr{
					pos: position{line: 4364, col: 21, offset: 129713},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4364, col: 21, offset: 129713},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 4364, col: 25, offset: 129717},
							expr: &charClassMatcher{
								pos:        position{line: 4364, col: 25, offset: 129717},
								val:        "[^\" !(OR / AND)]",
								chars:      []rune{'"', ' ', '!', '(', 'O', 'R', ' ', '/', ' ', 'A', 'N', 'D', ')'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 4364, col: 44, offset: 129736},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "TransactionQuotedStringValue",
			pos:  position{line: 4369, col: 1, offset: 129847},
			expr: &actionExpr{
				pos: position{line: 4369, col: 33, offset: 129879},
				run: (*parser).callonTransactionQuotedStringValue1,
				expr: &labeledExpr{
					pos:   position{line: 4369, col: 33, offset: 129879},
					label: "str",
					expr: &ruleRefExpr{
						pos:  position{line: 4369, col: 37, offset: 129883},
						name: "QuotedStringNoOp",
					},
				},
			},
		},
		{
			name: "TransactionSearch",
			pos:  position{line: 4377, col: 1, offset: 130038},
			expr: &actionExpr{
				pos: position{line: 4377, col: 22, offset: 130059},
				run: (*parser).callonTransactionSearch1,
				expr: &labeledExpr{
					pos:   position{line: 4377, col: 22, offset: 130059},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 4377, col: 27, offset: 130064},
						name: "ClauseLevel1",
					},
				},
			},
		},
		{
			name: "TransactionEval",
			pos:  position{line: 4387, col: 1, offset: 130236},
			expr: &actionExpr{
				pos: position{line: 4387, col: 20, offset: 130255},
				run: (*parser).callonTransactionEval1,
				expr: &seqExpr{
					pos: position{line: 4387, col: 20, offset: 130255},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4387, col: 20, offset: 130255},
							val:        "eval",
							ignoreCase: false,
							want:       "\"eval\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4387, col: 27, offset: 130262},
							name: "EMPTY_OR_SPACE",
						},
						&ruleRefExpr{
							pos:  position{line: 4387, col: 42, offset: 130277},
							name: "L_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 4387, col: 50, offset: 130285},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 4387, col: 60, offset: 130295},
								name: "BoolExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4387, col: 69, offset: 130304},
							name: "R_PAREN",
						},
					},
				},
			},
		},
		{
			name: "MultiValueBlock",
			pos:  position{line: 4397, col: 1, offset: 130607},
			expr: &actionExpr{
				pos: position{line: 4397, col: 20, offset: 130626},
				run: (*parser).callonMultiValueBlock1,
				expr: &seqExpr{
					pos: position{line: 4397, col: 20, offset: 130626},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4397, col: 20, offset: 130626},
							name: "PIPE",
						},
						&labeledExpr{
							pos:   position{line: 4397, col: 25, offset: 130631},
							label: "mvQueryAggNode",
							expr: &ruleRefExpr{
								pos:  position{line: 4397, col: 42, offset: 130648},
								name: "MakeMVBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "MakeMVBlock",
			pos:  position{line: 4401, col: 1, offset: 130697},
			expr: &actionExpr{
				pos: position{line: 4401, col: 16, offset: 130712},
				run: (*parser).callonMakeMVBlock1,
				expr: &seqExpr{
					pos: position{line: 4401, col: 16, offset: 130712},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4401, col: 16, offset: 130712},
							name: "CMD_MAKEMV",
						},
						&ruleRefExpr{
							pos:  position{line: 4401, col: 27, offset: 130723},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4401, col: 33, offset: 130729},
							label: "mvColOptionExpr",
							expr: &zeroOrOneExpr{
								pos: position{line: 4401, col: 50, offset: 130746},
								expr: &ruleRefExpr{
									pos:  position{line: 4401, col: 50, offset: 130746},
									name: "MVBlockOptionsList",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4401, col: 70, offset: 130766},
							name: "EMPTY_OR_SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4401, col: 85, offset: 130781},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 4401, col: 91, offset: 130787},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "MVBlockOptionsList",
			pos:  position{line: 4429, col: 1, offset: 131527},
			expr: &actionExpr{
				pos: position{line: 4429, col: 23, offset: 131549},
				run: (*parser).callonMVBlockOptionsList1,
				expr: &seqExpr{
					pos: position{line: 4429, col: 23, offset: 131549},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4429, col: 23, offset: 131549},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 4429, col: 31, offset: 131557},
								name: "MVBlockOption",
							},
						},
						&labeledExpr{
							pos:   position{line: 4429, col: 46, offset: 131572},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 4429, col: 52, offset: 131578},
								expr: &seqExpr{
									pos: position{line: 4429, col: 53, offset: 131579},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 4429, col: 53, offset: 131579},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 4429, col: 59, offset: 131585},
											name: "MVBlockOption",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MVBlockOption",
			pos:  position{line: 4463, col: 1, offset: 132641},
			expr: &actionExpr{
				pos: position{line: 4463, col: 18, offset: 132658},
				run: (*parser).callonMVBlockOption1,
				expr: &labeledExpr{
					pos:   position{line: 4463, col: 18, offset: 132658},
					label: "option",
					expr: &choiceExpr{
						pos: position{line: 4463, col: 27, offset: 132667},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4463, col: 27, offset: 132667},
								name: "DelimOption",
							},
							&ruleRefExpr{
								pos:  position{line: 4463, col: 41, offset: 132681},
								name: "AllowEmptyOption",
							},
							&ruleRefExpr{
								pos:  position{line: 4463, col: 60, offset: 132700},
								name: "SetSvOption",
							},
						},
					},
				},
			},
		},
		{
			name: "DelimOption",
			pos:  position{line: 4467, col: 1, offset: 132741},
			expr: &actionExpr{
				pos: position{line: 4467, col: 16, offset: 132756},
				run: (*parser).callonDelimOption1,
				expr: &labeledExpr{
					pos:   position{line: 4467, col: 16, offset: 132756},
					label: "delimExpr",
					expr: &choiceExpr{
						pos: position{line: 4467, col: 28, offset: 132768},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4467, col: 28, offset: 132768},
								name: "StringDelimiter",
							},
							&ruleRefExpr{
								pos:  position{line: 4467, col: 46, offset: 132786},
								name: "RegexDelimiter",
							},
						},
					},
				},
			},
		},
		{
			name: "StringDelimiter",
			pos:  position{line: 4471, col: 1, offset: 132833},
			expr: &actionExpr{
				pos: position{line: 4471, col: 20, offset: 132852},
				run: (*parser).callonStringDelimiter1,
				expr: &seqExpr{
					pos: position{line: 4471, col: 20, offset: 132852},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4471, col: 20, offset: 132852},
							val:        "delim",
							ignoreCase: false,
							want:       "\"delim\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4471, col: 28, offset: 132860},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4471, col: 34, offset: 132866},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 4471, col: 38, offset: 132870},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexDelimiter",
			pos:  position{line: 4482, col: 1, offset: 133121},
			expr: &actionExpr{
				pos: position{line: 4482, col: 19, offset: 133139},
				run: (*parser).callonRegexDelimiter1,
				expr: &seqExpr{
					pos: position{line: 4482, col: 19, offset: 133139},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4482, col: 19, offset: 133139},
							val:        "tokenizer",
							ignoreCase: false,
							want:       "\"tokenizer\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4482, col: 31, offset: 133151},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4482, col: 37, offset: 133157},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 4482, col: 41, offset: 133161},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "AllowEmptyOption",
			pos:  position{line: 4500, col: 1, offset: 133632},
			expr: &actionExpr{
				pos: position{line: 4500, col: 21, offset: 133652},
				run: (*parser).callonAllowEmptyOption1,
				expr: &seqExpr{
					pos: position{line: 4500, col: 21, offset: 133652},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4500, col: 21, offset: 133652},
							val:        "allowempty",
							ignoreCase: false,
							want:       "\"allowempty\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4500, col: 34, offset: 133665},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4500, col: 40, offset: 133671},
							label: "boolVal",
							expr: &ruleRefExpr{
								pos:  position{line: 4500, col: 48, offset: 133679},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "SetSvOption",
			pos:  position{line: 4512, col: 1, offset: 133919},
			expr: &actionExpr{
				pos: position{line: 4512, col: 16, offset: 133934},
				run: (*parser).callonSetSvOption1,
				expr: &seqExpr{
					pos: position{line: 4512, col: 16, offset: 133934},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4512, col: 16, offset: 133934},
							val:        "setsv",
							ignoreCase: false,
							want:       "\"setsv\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4512, col: 24, offset: 133942},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4512, col: 30, offset: 133948},
							label: "boolVal",
							expr: &ruleRefExpr{
								pos:  position{line: 4512, col: 38, offset: 133956},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "SPathBlock",
			pos:  position{line: 4524, col: 1, offset: 134221},
			expr: &actionExpr{
				pos: position{line: 4524, col: 15, offset: 134235},
				run: (*parser).callonSPathBlock1,
				expr: &seqExpr{
					pos: position{line: 4524, col: 15, offset: 134235},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4524, col: 15, offset: 134235},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 4524, col: 20, offset: 134240},
							name: "CMD_SPATH",
						},
						&labeledExpr{
							pos:   position{line: 4524, col: 30, offset: 134250},
							label: "spathExpr",
							expr: &zeroOrOneExpr{
								pos: position{line: 4524, col: 40, offset: 134260},
								expr: &ruleRefExpr{
									pos:  position{line: 4524, col: 40, offset: 134260},
									name: "SPathArgumentsList",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SPathArgumentsList",
			pos:  position{line: 4531, col: 1, offset: 134386},
			expr: &actionExpr{
				pos: position{line: 4531, col: 23, offset: 134408},
				run: (*parser).callonSPathArgumentsList1,
				expr: &seqExpr{
					pos: position{line: 4531, col: 23, offset: 134408},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4531, col: 23, offset: 134408},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4531, col: 29, offset: 134414},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 4531, col: 35, offset: 134420},
								name: "SPathArgument",
							},
						},
						&labeledExpr{
							pos:   position{line: 4531, col: 49, offset: 134434},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 4531, col: 54, offset: 134439},
								expr: &seqExpr{
									pos: position{line: 4531, col: 55, offset: 134440},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 4531, col: 55, offset: 134440},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 4531, col: 61, offset: 134446},
											name: "SPathArgument",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SPathArgument",
			pos:  position{line: 4563, col: 1, offset: 135339},
			expr: &actionExpr{
				pos: position{line: 4563, col: 18, offset: 135356},
				run: (*parser).callonSPathArgument1,
				expr: &labeledExpr{
					pos:   position{line: 4563, col: 18, offset: 135356},
					label: "arg",
					expr: &choiceExpr{
						pos: position{line: 4563, col: 23, offset: 135361},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4563, col: 23, offset: 135361},
								name: "InputField",
							},
							&ruleRefExpr{
								pos:  position{line: 4563, col: 36, offset: 135374},
								name: "OutputField",
							},
							&ruleRefExpr{
								pos:  position{line: 4563, col: 50, offset: 135388},
								name: "PathField",
							},
						},
					},
				},
			},
		},
		{
			name: "InputField",
			pos:  position{line: 4567, col: 1, offset: 135424},
			expr: &actionExpr{
				pos: position{line: 4567, col: 15, offset: 135438},
				run: (*parser).callonInputField1,
				expr: &seqExpr{
					pos: position{line: 4567, col: 15, offset: 135438},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4567, col: 15, offset: 135438},
							val:        "input",
							ignoreCase: false,
							want:       "\"input\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4567, col: 23, offset: 135446},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4567, col: 29, offset: 135452},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 4567, col: 35, offset: 135458},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "OutputField",
			pos:  position{line: 4570, col: 1, offset: 135514},
			expr: &actionExpr{
				pos: position{line: 4570, col: 16, offset: 135529},
				run: (*parser).callonOutputField1,
				expr: &seqExpr{
					pos: position{line: 4570, col: 16, offset: 135529},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4570, col: 16, offset: 135529},
							val:        "output",
							ignoreCase: false,
							want:       "\"output\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4570, col: 25, offset: 135538},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4570, col: 31, offset: 135544},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 4570, col: 37, offset: 135550},
								name: "FieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "PathField",
			pos:  position{line: 4573, col: 1, offset: 135607},
			expr: &actionExpr{
				pos: position{line: 4573, col: 14, offset: 135620},
				run: (*parser).callonPathField1,
				expr: &choiceExpr{
					pos: position{line: 4573, col: 15, offset: 135621},
					alternatives: []any{
						&seqExpr{
							pos: position{line: 4573, col: 15, offset: 135621},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 4573, col: 15, offset: 135621},
									val:        "path",
									ignoreCase: false,
									want:       "\"path\"",
								},
								&ruleRefExpr{
									pos:  position{line: 4573, col: 22, offset: 135628},
									name: "EQUAL",
								},
								&ruleRefExpr{
									pos:  position{line: 4573, col: 28, offset: 135634},
									name: "SPathFieldString",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4573, col: 47, offset: 135653},
							name: "SPathFieldString",
						},
					},
				},
			},
		},
		{
			name: "SPathFieldString",
			pos:  position{line: 4585, col: 1, offset: 136065},
			expr: &choiceExpr{
				pos: position{line: 4585, col: 21, offset: 136085},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 4585, col: 21, offset: 136085},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 4585, col: 36, offset: 136100},
						name: "UnquotedStringWithTemplateWildCard",
					},
				},
			},
		},
		{
			name: "FormatBlock",
			pos:  position{line: 4588, col: 1, offset: 136173},
			expr: &actionExpr{
				pos: position{line: 4588, col: 16, offset: 136188},
				run: (*parser).callonFormatBlock1,
				expr: &seqExpr{
					pos: position{line: 4588, col: 16, offset: 136188},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4588, col: 16, offset: 136188},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 4588, col: 21, offset: 136193},
							name: "CMD_FORMAT",
						},
						&labeledExpr{
							pos:   position{line: 4588, col: 32, offset: 136204},
							label: "formatArgExpr",
							expr: &zeroOrOneExpr{
								pos: position{line: 4588, col: 46, offset: 136218},
								expr: &ruleRefExpr{
									pos:  position{line: 4588, col: 46, offset: 136218},
									name: "FormatArgumentsList",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FormatArgumentsList",
			pos:  position{line: 4610, col: 1, offset: 136827},
			expr: &actionExpr{
				pos: position{line: 4610, col: 24, offset: 136850},
				run: (*parser).callonFormatArgumentsList1,
				expr: &seqExpr{
					pos: position{line: 4610, col: 24, offset: 136850},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4610, col: 24, offset: 136850},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4610, col: 30, offset: 136856},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 4610, col: 37, offset: 136863},
								name: "FormatArgument",
							},
						},
						&labeledExpr{
							pos:   position{line: 4610, col: 52, offset: 136878},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 4610, col: 57, offset: 136883},
								expr: &seqExpr{
									pos: position{line: 4610, col: 58, offset: 136884},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 4610, col: 58, offset: 136884},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 4610, col: 64, offset: 136890},
											name: "FormatArgument",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FormatArgument",
			pos:  position{line: 4644, col: 1, offset: 138079},
			expr: &actionExpr{
				pos: position{line: 4644, col: 19, offset: 138097},
				run: (*parser).callonFormatArgument1,
				expr: &labeledExpr{
					pos:   position{line: 4644, col: 19, offset: 138097},
					label: "argExpr",
					expr: &choiceExpr{
						pos: position{line: 4644, col: 28, offset: 138106},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4644, col: 28, offset: 138106},
								name: "FormatSeparator",
							},
							&ruleRefExpr{
								pos:  position{line: 4644, col: 46, offset: 138124},
								name: "FormatMaxResults",
							},
							&ruleRefExpr{
								pos:  position{line: 4644, col: 65, offset: 138143},
								name: "FormatEmptyStr",
							},
							&ruleRefExpr{
								pos:  position{line: 4644, col: 82, offset: 138160},
								name: "FormatRowColOptions",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatSeparator",
			pos:  position{line: 4648, col: 1, offset: 138210},
			expr: &actionExpr{
				pos: position{line: 4648, col: 20, offset: 138229},
				run: (*parser).callonFormatSeparator1,
				expr: &seqExpr{
					pos: position{line: 4648, col: 20, offset: 138229},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4648, col: 20, offset: 138229},
							val:        "mvsep",
							ignoreCase: false,
							want:       "\"mvsep\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4648, col: 28, offset: 138237},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4648, col: 34, offset: 138243},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 4648, col: 38, offset: 138247},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatMaxResults",
			pos:  position{line: 4657, col: 1, offset: 138459},
			expr: &actionExpr{
				pos: position{line: 4657, col: 21, offset: 138479},
				run: (*parser).callonFormatMaxResults1,
				expr: &seqExpr{
					pos: position{line: 4657, col: 21, offset: 138479},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4657, col: 21, offset: 138479},
							val:        "maxresults",
							ignoreCase: false,
							want:       "\"maxresults\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4657, col: 34, offset: 138492},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4657, col: 40, offset: 138498},
							label: "numStr",
							expr: &ruleRefExpr{
								pos:  position{line: 4657, col: 47, offset: 138505},
								name: "IntegerAsString",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatEmptyStr",
			pos:  position{line: 4670, col: 1, offset: 138911},
			expr: &actionExpr{
				pos: position{line: 4670, col: 19, offset: 138929},
				run: (*parser).callonFormatEmptyStr1,
				expr: &seqExpr{
					pos: position{line: 4670, col: 19, offset: 138929},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4670, col: 19, offset: 138929},
							val:        "emptystr",
							ignoreCase: false,
							want:       "\"emptystr\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4670, col: 30, offset: 138940},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4670, col: 36, offset: 138946},
							label: "str",
							expr: &ruleRefExpr{
								pos:  position{line: 4670, col: 40, offset: 138950},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatRowColOptions",
			pos:  position{line: 4679, col: 1, offset: 139165},
			expr: &actionExpr{
				pos: position{line: 4679, col: 24, offset: 139188},
				run: (*parser).callonFormatRowColOptions1,
				expr: &seqExpr{
					pos: position{line: 4679, col: 24, offset: 139188},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 4679, col: 24, offset: 139188},
							label: "rowPrefix",
							expr: &ruleRefExpr{
								pos:  position{line: 4679, col: 34, offset: 139198},
								name: "QuotedString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4679, col: 47, offset: 139211},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4679, col: 53, offset: 139217},
							label: "colPrefix",
							expr: &ruleRefExpr{
								pos:  position{line: 4679, col: 63, offset: 139227},
								name: "QuotedString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4679, col: 76, offset: 139240},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4679, col: 82, offset: 139246},
							label: "colSeparator",
							expr: &ruleRefExpr{
								pos:  position{line: 4679, col: 95, offset: 139259},
								name: "QuotedString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4679, col: 108, offset: 139272},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4679, col: 114, offset: 139278},
							label: "colEnd",
							expr: &ruleRefExpr{
								pos:  position{line: 4679, col: 121, offset: 139285},
								name: "QuotedString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4679, col: 134, offset: 139298},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4679, col: 140, offset: 139304},
							label: "rowSeparator",
							expr: &ruleRefExpr{
								pos:  position{line: 4679, col: 153, offset: 139317},
								name: "QuotedString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4679, col: 166, offset: 139330},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4679, col: 172, offset: 139336},
							label: "rowEnd",
							expr: &ruleRefExpr{
								pos:  position{line: 4679, col: 179, offset: 139343},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "EventCountBlock",
			pos:  position{line: 4697, col: 1, offset: 139919},
			expr: &actionExpr{
				pos: position{line: 4697, col: 20, offset: 139938},
				run: (*parser).callonEventCountBlock1,
				expr: &seqExpr{
					pos: position{line: 4697, col: 20, offset: 139938},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4697, col: 20, offset: 139938},
							name: "PIPE",
						},
						&ruleRefExpr{
							pos:  position{line: 4697, col: 25, offset: 139943},
							name: "CMD_EVENTCOUNT",
						},
						&labeledExpr{
							pos:   position{line: 4697, col: 40, offset: 139958},
							label: "eventCountExpr",
							expr: &zeroOrOneExpr{
								pos: position{line: 4697, col: 55, offset: 139973},
								expr: &ruleRefExpr{
									pos:  position{line: 4697, col: 55, offset: 139973},
									name: "EventCountArgumentsList",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EventCountArgumentsList",
			pos:  position{line: 4704, col: 1, offset: 140126},
			expr: &actionExpr{
				pos: position{line: 4704, col: 28, offset: 140153},
				run: (*parser).callonEventCountArgumentsList1,
				expr: &seqExpr{
					pos: position{line: 4704, col: 28, offset: 140153},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 4704, col: 28, offset: 140153},
							name: "SPACE",
						},
						&labeledExpr{
							pos:   position{line: 4704, col: 34, offset: 140159},
							label: "first",
							expr: &zeroOrOneExpr{
								pos: position{line: 4704, col: 40, offset: 140165},
								expr: &ruleRefExpr{
									pos:  position{line: 4704, col: 40, offset: 140165},
									name: "EventCountArgument",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 4704, col: 60, offset: 140185},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 4704, col: 65, offset: 140190},
								expr: &seqExpr{
									pos: position{line: 4704, col: 66, offset: 140191},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 4704, col: 66, offset: 140191},
											name: "SPACE",
										},
										&ruleRefExpr{
											pos:  position{line: 4704, col: 72, offset: 140197},
											name: "EventCountArgument",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EventCountArgument",
			pos:  position{line: 4760, col: 1, offset: 142074},
			expr: &actionExpr{
				pos: position{line: 4760, col: 23, offset: 142096},
				run: (*parser).callonEventCountArgument1,
				expr: &labeledExpr{
					pos:   position{line: 4760, col: 23, offset: 142096},
					label: "arg",
					expr: &choiceExpr{
						pos: position{line: 4760, col: 28, offset: 142101},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 4760, col: 28, offset: 142101},
								name: "IndexField",
							},
							&ruleRefExpr{
								pos:  position{line: 4760, col: 41, offset: 142114},
								name: "SummarizeField",
							},
							&ruleRefExpr{
								pos:  position{line: 4760, col: 58, offset: 142131},
								name: "ReportSizeField",
							},
							&ruleRefExpr{
								pos:  position{line: 4760, col: 76, offset: 142149},
								name: "ListVixField",
							},
						},
					},
				},
			},
		},
		{
			name: "IndexField",
			pos:  position{line: 4764, col: 1, offset: 142188},
			expr: &actionExpr{
				pos: position{line: 4764, col: 15, offset: 142202},
				run: (*parser).callonIndexField1,
				expr: &seqExpr{
					pos: position{line: 4764, col: 15, offset: 142202},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4764, col: 15, offset: 142202},
							val:        "index",
							ignoreCase: false,
							want:       "\"index\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4764, col: 23, offset: 142210},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4764, col: 29, offset: 142216},
							label: "index",
							expr: &ruleRefExpr{
								pos:  position{line: 4764, col: 35, offset: 142222},
								name: "IndexName",
							},
						},
					},
				},
			},
		},
		{
			name: "SummarizeField",
			pos:  position{line: 4767, col: 1, offset: 142278},
			expr: &actionExpr{
				pos: position{line: 4767, col: 19, offset: 142296},
				run: (*parser).callonSummarizeField1,
				expr: &seqExpr{
					pos: position{line: 4767, col: 19, offset: 142296},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4767, col: 19, offset: 142296},
							val:        "summarize",
							ignoreCase: false,
							want:       "\"summarize\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4767, col: 31, offset: 142308},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4767, col: 37, offset: 142314},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 4767, col: 43, offset: 142320},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "ReportSizeField",
			pos:  position{line: 4770, col: 1, offset: 142396},
			expr: &actionExpr{
				pos: position{line: 4770, col: 20, offset: 142415},
				run: (*parser).callonReportSizeField1,
				expr: &seqExpr{
					pos: position{line: 4770, col: 20, offset: 142415},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4770, col: 20, offset: 142415},
							val:        "report_size",
							ignoreCase: false,
							want:       "\"report_size\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4770, col: 34, offset: 142429},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4770, col: 40, offset: 142435},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 4770, col: 46, offset: 142441},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "ListVixField",
			pos:  position{line: 4773, col: 1, offset: 142519},
			expr: &actionExpr{
				pos: position{line: 4773, col: 17, offset: 142535},
				run: (*parser).callonListVixField1,
				expr: &seqExpr{
					pos: position{line: 4773, col: 17, offset: 142535},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 4773, col: 17, offset: 142535},
							val:        "list_vix",
							ignoreCase: false,
							want:       "\"list_vix\"",
						},
						&ruleRefExpr{
							pos:  position{line: 4773, col: 28, offset: 142546},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 4773, col: 34, offset: 142552},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 4773, col: 40, offset: 142558},
								name: "Boolean",
							},
						},
					},
				},
			},
		},
		{
			name: "IndexName",
			pos:  position{line: 4777, col: 1, offset: 142634},
			expr: &actionExpr{
				pos: position{line: 4777, col: 14, offset: 142647},
				run: (*parser).callonIndexName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 4777, col: 14, offset: 142647},
					expr: &seqExpr{
						pos: position{line: 4777, col: 15, offset: 142648},
						exprs: []any{
							&notExpr{
								pos: position{line: 4777, col: 15, offset: 142648},
								expr: &ruleRefExpr{
									pos:  position{line: 4777, col: 16, offset: 142649},
									name: "SPACE",
								},
							},
							&anyMatcher{
								line: 4777, col: 22, offset: 142655,
							},
						},
					},
				},
			},
		},
		{
			name: "ALLCMD",
			pos:  position{line: 4782, col: 1, offset: 142721},
			expr: &choiceExpr{
				pos: position{line: 4782, col: 12, offset: 142732},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 4782, col: 12, offset: 142732},
						name: "CMD_REGEX",
					},
					&ruleRefExpr{
						pos:  position{line: 4782, col: 24, offset: 142744},
						name: "CMD_STATS",
					},
					&ruleRefExpr{
						pos:  position{line: 4782, col: 36, offset: 142756},
						name: "CMD_FIELDS",
					},
					&ruleRefExpr{
						pos:  position{line: 4782, col: 49, offset: 142769},
						name: "CMD_WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 4782, col: 61, offset: 142781},
						name: "CMD_HEAD_NO_SPACE",
					},
					&ruleRefExpr{
						pos:  position{line: 4782, col: 81, offset: 142801},
						name: "CMD_HEAD",
					},
					&ruleRefExpr{
						pos:  position{line: 4782, col: 92, offset: 142812},
						name: "CMD_TAIL_NO_SPACE",
					},
					&ruleRefExpr{
						pos:  position{line: 4782, col: 112, offset: 142832},
						name: "CMD_TAIL",
					},
					&ruleRefExpr{
						pos:  position{line: 4782, col: 123, offset: 142843},
						name: "CMD_EVAL",
					},
					&ruleRefExpr{
						pos:  position{line: 4782, col: 134, offset: 142854},
						name: "CMD_REX",
					},
					&ruleRefExpr{
						pos:  position{line: 4782, col: 144, offset: 142864},
						name: "CMD_TOP",
					},
					&ruleRefExpr{
						pos:  position{line: 4782, col: 154, offset: 142874},
						name: "CMD_RARE",
					},
					&ruleRefExpr{
						pos:  position{line: 4782, col: 165, offset: 142885},
						name: "CMD_RENAME",
					},
					&ruleRefExpr{
						pos:  position{line: 4782, col: 178, offset: 142898},
						name: "CMD_TIMECHART",
					},
					&ruleRefExpr{
						pos:  position{line: 4782, col: 194, offset: 142914},
						name: "CMD_TRANSACTION",
					},
					&ruleRefExpr{
						pos:  position{line: 4782, col: 212, offset: 142932},
						name: "CMD_DEDUP",
					},
					&ruleRefExpr{
						pos:  position{line: 4782, col: 224, offset: 142944},
						name: "CMD_SORT",
					},
					&ruleRefExpr{
						pos:  position{line: 4782, col: 235, offset: 142955},
						name: "CMD_MAKEMV",
					},
					&ruleRefExpr{
						pos:  position{line: 4782, col: 248, offset: 142968},
						name: "CMD_SPATH",
					},
					&ruleRefExpr{
						pos:  position{line: 4782, col: 260, offset: 142980},
						name: "CMD_FORMAT",
					},
					&ruleRefExpr{
						pos:  position{line: 4782, col: 273, offset: 142993},
						name: "CMD_EARLIEST",
					},
					&ruleRefExpr{
						pos:  position{line: 4782, col: 288, offset: 143008},
						name: "CMD_LATEST",
					},
					&ruleRefExpr{
						pos:  position{line: 4782, col: 301, offset: 143021},
						name: "CMD_EVENTCOUNT",
					},
					&ruleRefExpr{
						pos:  position{line: 4782, col: 318, offset: 143038},
						name: "CMD_BIN",
					},
				},
			},
		},
		{
			name: "CMD_SEARCH",
			pos:  position{line: 4783, col: 1, offset: 143047},
			expr: &seqExpr{
				pos: position{line: 4783, col: 15, offset: 143061},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 4783, col: 15, offset: 143061},
						val:        "search",
						ignoreCase: false,
						want:       "\"search\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4783, col: 24, offset: 143070},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_REGEX",
			pos:  position{line: 4784, col: 1, offset: 143076},
			expr: &seqExpr{
				pos: position{line: 4784, col: 14, offset: 143089},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 4784, col: 14, offset: 143089},
						val:        "regex",
						ignoreCase: false,
						want:       "\"regex\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4784, col: 22, offset: 143097},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_STATS",
			pos:  position{line: 4785, col: 1, offset: 143103},
			expr: &seqExpr{
				pos: position{line: 4785, col: 14, offset: 143116},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 4785, col: 14, offset: 143116},
						val:        "stats",
						ignoreCase: false,
						want:       "\"stats\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4785, col: 22, offset: 143124},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_FIELDS",
			pos:  position{line: 4786, col: 1, offset: 143130},
			expr: &seqExpr{
				pos: position{line: 4786, col: 15, offset: 143144},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 4786, col: 15, offset: 143144},
						val:        "fields",
						ignoreCase: false,
						want:       "\"fields\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4786, col: 24, offset: 143153},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_WHERE",
			pos:  position{line: 4787, col: 1, offset: 143159},
			expr: &seqExpr{
				pos: position{line: 4787, col: 14, offset: 143172},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 4787, col: 14, offset: 143172},
						val:        "where",
						ignoreCase: false,
						want:       "\"where\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4787, col: 22, offset: 143180},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_HEAD_NO_SPACE",
			pos:  position{line: 4788, col: 1, offset: 143186},
			expr: &litMatcher{
				pos:        position{line: 4788, col: 22, offset: 143207},
				val:        "head",
				ignoreCase: false,
				want:       "\"head\"",
			},
		},
		{
			name: "CMD_HEAD",
			pos:  position{line: 4789, col: 1, offset: 143214},
			expr: &seqExpr{
				pos: position{line: 4789, col: 13, offset: 143226},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 4789, col: 13, offset: 143226},
						name: "CMD_HEAD_NO_SPACE",
					},
					&ruleRefExpr{
						pos:  position{line: 4789, col: 31, offset: 143244},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_TAIL_NO_SPACE",
			pos:  position{line: 4790, col: 1, offset: 143250},
			expr: &litMatcher{
				pos:        position{line: 4790, col: 22, offset: 143271},
				val:        "tail",
				ignoreCase: false,
				want:       "\"tail\"",
			},
		},
		{
			name: "CMD_TAIL",
			pos:  position{line: 4791, col: 1, offset: 143278},
			expr: &seqExpr{
				pos: position{line: 4791, col: 13, offset: 143290},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 4791, col: 13, offset: 143290},
						name: "CMD_TAIL_NO_SPACE",
					},
					&ruleRefExpr{
						pos:  position{line: 4791, col: 31, offset: 143308},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_EVAL",
			pos:  position{line: 4792, col: 1, offset: 143314},
			expr: &seqExpr{
				pos: position{line: 4792, col: 13, offset: 143326},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 4792, col: 13, offset: 143326},
						val:        "eval",
						ignoreCase: false,
						want:       "\"eval\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4792, col: 20, offset: 143333},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_REX",
			pos:  position{line: 4793, col: 1, offset: 143339},
			expr: &seqExpr{
				pos: position{line: 4793, col: 12, offset: 143350},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 4793, col: 12, offset: 143350},
						val:        "rex",
						ignoreCase: false,
						want:       "\"rex\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4793, col: 18, offset: 143356},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_SORT",
			pos:  position{line: 4794, col: 1, offset: 143362},
			expr: &seqExpr{
				pos: position{line: 4794, col: 13, offset: 143374},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 4794, col: 13, offset: 143374},
						val:        "sort",
						ignoreCase: false,
						want:       "\"sort\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4794, col: 20, offset: 143381},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_TOP",
			pos:  position{line: 4795, col: 1, offset: 143387},
			expr: &litMatcher{
				pos:        position{line: 4795, col: 12, offset: 143398},
				val:        "top",
				ignoreCase: false,
				want:       "\"top\"",
			},
		},
		{
			name: "CMD_RARE",
			pos:  position{line: 4796, col: 1, offset: 143404},
			expr: &litMatcher{
				pos:        position{line: 4796, col: 13, offset: 143416},
				val:        "rare",
				ignoreCase: false,
				want:       "\"rare\"",
			},
		},
		{
			name: "CMD_RENAME",
			pos:  position{line: 4797, col: 1, offset: 143423},
			expr: &seqExpr{
				pos: position{line: 4797, col: 15, offset: 143437},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 4797, col: 15, offset: 143437},
						val:        "rename",
						ignoreCase: false,
						want:       "\"rename\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4797, col: 24, offset: 143446},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_TIMECHART",
			pos:  position{line: 4798, col: 1, offset: 143452},
			expr: &seqExpr{
				pos: position{line: 4798, col: 18, offset: 143469},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 4798, col: 18, offset: 143469},
						val:        "timechart",
						ignoreCase: false,
						want:       "\"timechart\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4798, col: 30, offset: 143481},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_BIN",
			pos:  position{line: 4799, col: 1, offset: 143487},
			expr: &seqExpr{
				pos: position{line: 4799, col: 12, offset: 143498},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 4799, col: 12, offset: 143498},
						val:        "bin",
						ignoreCase: false,
						want:       "\"bin\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4799, col: 18, offset: 143504},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_SPAN",
			pos:  position{line: 4800, col: 1, offset: 143510},
			expr: &litMatcher{
				pos:        position{line: 4800, col: 13, offset: 143522},
				val:        "span",
				ignoreCase: false,
				want:       "\"span\"",
			},
		},
		{
			name: "CMD_TRANSACTION",
			pos:  position{line: 4801, col: 1, offset: 143529},
			expr: &seqExpr{
				pos: position{line: 4801, col: 20, offset: 143548},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 4801, col: 20, offset: 143548},
						val:        "transaction",
						ignoreCase: false,
						want:       "\"transaction\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4801, col: 34, offset: 143562},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_DEDUP",
			pos:  position{line: 4802, col: 1, offset: 143568},
			expr: &litMatcher{
				pos:        position{line: 4802, col: 14, offset: 143581},
				val:        "dedup",
				ignoreCase: false,
				want:       "\"dedup\"",
			},
		},
		{
			name: "CMD_DEDUP_SORTBY",
			pos:  position{line: 4803, col: 1, offset: 143589},
			expr: &seqExpr{
				pos: position{line: 4803, col: 21, offset: 143609},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 4803, col: 21, offset: 143609},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 4803, col: 27, offset: 143615},
						val:        "sortby",
						ignoreCase: false,
						want:       "\"sortby\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4803, col: 36, offset: 143624},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "CMD_MAKEMV",
			pos:  position{line: 4804, col: 1, offset: 143630},
			expr: &litMatcher{
				pos:        position{line: 4804, col: 15, offset: 143644},
				val:        "makemv",
				ignoreCase: false,
				want:       "\"makemv\"",
			},
		},
		{
			name: "CMD_SPATH",
			pos:  position{line: 4805, col: 1, offset: 143653},
			expr: &litMatcher{
				pos:        position{line: 4805, col: 14, offset: 143666},
				val:        "spath",
				ignoreCase: false,
				want:       "\"spath\"",
			},
		},
		{
			name: "CMD_FORMAT",
			pos:  position{line: 4806, col: 1, offset: 143674},
			expr: &litMatcher{
				pos:        position{line: 4806, col: 15, offset: 143688},
				val:        "format",
				ignoreCase: false,
				want:       "\"format\"",
			},
		},
		{
			name: "CMD_EARLIEST",
			pos:  position{line: 4807, col: 1, offset: 143697},
			expr: &litMatcher{
				pos:        position{line: 4807, col: 17, offset: 143713},
				val:        "earliest",
				ignoreCase: false,
				want:       "\"earliest\"",
			},
		},
		{
			name: "CMD_LATEST",
			pos:  position{line: 4808, col: 1, offset: 143724},
			expr: &litMatcher{
				pos:        position{line: 4808, col: 15, offset: 143738},
				val:        "latest",
				ignoreCase: false,
				want:       "\"latest\"",
			},
		},
		{
			name: "CMD_EVENTCOUNT",
			pos:  position{line: 4809, col: 1, offset: 143747},
			expr: &litMatcher{
				pos:        position{line: 4809, col: 19, offset: 143765},
				val:        "eventcount",
				ignoreCase: false,
				want:       "\"eventcount\"",
			},
		},
		{
			name: "EVAL_CONCAT",
			pos:  position{line: 4810, col: 1, offset: 143778},
			expr: &seqExpr{
				pos: position{line: 4810, col: 16, offset: 143793},
				exprs: []any{
					&zeroOrOneExpr{
						pos: position{line: 4810, col: 16, offset: 143793},
						expr: &ruleRefExpr{
							pos:  position{line: 4810, col: 16, offset: 143793},
							name: "SPACE",
						},
					},
					&litMatcher{
						pos:        position{line: 4810, col: 23, offset: 143800},
						val:        ".",
						ignoreCase: false,
						want:       "\".\"",
					},
					&zeroOrOneExpr{
						pos: position{line: 4810, col: 27, offset: 143804},
						expr: &ruleRefExpr{
							pos:  position{line: 4810, col: 27, offset: 143804},
							name: "SPACE",
						},
					},
				},
			},
		},
		{
			name: "MAJOR_BREAK",
			pos:  position{line: 4813, col: 1, offset: 143915},
			expr: &choiceExpr{
				pos: position{line: 4813, col: 16, offset: 143930},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 4813, col: 16, offset: 143930},
						val:        "[[\\]<>(){}|!;,'\"*\\n\\r \\t&?+]",
						chars:      []rune{'[', ']', '<', '>', '(', ')', '{', '}', '|', '!', ';', ',', '\'', '"', '*', '\n', '\r', ' ', '\t', '&', '?', '+'},
						ignoreCase: false,
						inverted:   false,
					},
					&litMatcher{
						pos:        position{line: 4813, col: 47, offset: 143961},
						val:        "%21",
						ignoreCase: false,
						want:       "\"%21\"",
					},
					&litMatcher{
						pos:        position{line: 4813, col: 55, offset: 143969},
						val:        "%26",
						ignoreCase: false,
						want:       "\"%26\"",
					},
					&litMatcher{
						pos:        position{line: 4814, col: 16, offset: 143992},
						val:        "%2526",
						ignoreCase: false,
						want:       "\"%2526\"",
					},
					&litMatcher{
						pos:        position{line: 4814, col: 26, offset: 144002},
						val:        "%3B",
						ignoreCase: false,
						want:       "\"%3B\"",
					},
					&litMatcher{
						pos:        position{line: 4814, col: 34, offset: 144010},
						val:        "%7C",
						ignoreCase: false,
						want:       "\"%7C\"",
					},
					&litMatcher{
						pos:        position{line: 4814, col: 42, offset: 144018},
						val:        "%20",
						ignoreCase: false,
						want:       "\"%20\"",
					},
					&litMatcher{
						pos:        position{line: 4814, col: 50, offset: 144026},
						val:        "%2B",
						ignoreCase: false,
						want:       "\"%2B\"",
					},
					&litMatcher{
						pos:        position{line: 4814, col: 58, offset: 144034},
						val:        "%3D",
						ignoreCase: false,
						want:       "\"%3D\"",
					},
					&litMatcher{
						pos:        position{line: 4814, col: 66, offset: 144042},
						val:        "--",
						ignoreCase: false,
						want:       "\"--\"",
					},
					&litMatcher{
						pos:        position{line: 4815, col: 16, offset: 144064},
						val:        "%2520",
						ignoreCase: false,
						want:       "\"%2520\"",
					},
					&litMatcher{
						pos:        position{line: 4815, col: 26, offset: 144074},
						val:        "%5D",
						ignoreCase: false,
						want:       "\"%5D\"",
					},
					&litMatcher{
						pos:        position{line: 4815, col: 34, offset: 144082},
						val:        "%5B",
						ignoreCase: false,
						want:       "\"%5B\"",
					},
					&litMatcher{
						pos:        position{line: 4815, col: 42, offset: 144090},
						val:        "%3A",
						ignoreCase: false,
						want:       "\"%3A\"",
					},
					&litMatcher{
						pos:        position{line: 4815, col: 50, offset: 144098},
						val:        "%0A",
						ignoreCase: false,
						want:       "\"%0A\"",
					},
					&litMatcher{
						pos:        position{line: 4815, col: 58, offset: 144106},
						val:        "%2C",
						ignoreCase: false,
						want:       "\"%2C\"",
					},
					&litMatcher{
						pos:        position{line: 4815, col: 66, offset: 144114},
						val:        "%28",
						ignoreCase: false,
						want:       "\"%28\"",
					},
					&litMatcher{
						pos:        position{line: 4815, col: 74, offset: 144122},
						val:        "%29",
						ignoreCase: false,
						want:       "\"%29\"",
					},
				},
			},
		},
		{
			name: "MINOR_BREAK",
			pos:  position{line: 4816, col: 1, offset: 144128},
			expr: &choiceExpr{
				pos: position{line: 4816, col: 16, offset: 144143},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 4816, col: 16, offset: 144143},
						val:        "[/:=@.$#%_]",
						chars:      []rune{'/', ':', '=', '@', '.', '$', '#', '%', '_'},
						ignoreCase: false,
						inverted:   false,
					},
					&litMatcher{
						pos:        position{line: 4816, col: 30, offset: 144157},
						val:        "-",
						ignoreCase: false,
						want:       "\"-\"",
					},
					&litMatcher{
						pos:        position{line: 4816, col: 36, offset: 144163},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "NOT",
			pos:  position{line: 4820, col: 1, offset: 144319},
			expr: &seqExpr{
				pos: position{line: 4820, col: 8, offset: 144326},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 4820, col: 8, offset: 144326},
						val:        "NOT",
						ignoreCase: false,
						want:       "\"NOT\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4820, col: 14, offset: 144332},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "OR",
			pos:  position{line: 4821, col: 1, offset: 144338},
			expr: &seqExpr{
				pos: position{line: 4821, col: 7, offset: 144344},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 4821, col: 7, offset: 144344},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 4821, col: 13, offset: 144350},
						val:        "OR",
						ignoreCase: false,
						want:       "\"OR\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4821, col: 18, offset: 144355},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "AND",
			pos:  position{line: 4822, col: 1, offset: 144361},
			expr: &seqExpr{
				pos: position{line: 4822, col: 8, offset: 144368},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 4822, col: 8, offset: 144368},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 4822, col: 14, offset: 144374},
						val:        "AND",
						ignoreCase: false,
						want:       "\"AND\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4822, col: 20, offset: 144380},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "PIPE",
			pos:  position{line: 4823, col: 1, offset: 144386},
			expr: &seqExpr{
				pos: position{line: 4823, col: 9, offset: 144394},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 4823, col: 9, offset: 144394},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 4823, col: 24, offset: 144409},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4823, col: 28, offset: 144413},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 4824, col: 1, offset: 144428},
			expr: &seqExpr{
				pos: position{line: 4824, col: 7, offset: 144434},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 4824, col: 7, offset: 144434},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 4824, col: 13, offset: 144440},
						val:        "as",
						ignoreCase: true,
						want:       "\"AS\"i",
					},
					&ruleRefExpr{
						pos:  position{line: 4824, col: 19, offset: 144446},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 4825, col: 1, offset: 144472},
			expr: &seqExpr{
				pos: position{line: 4825, col: 7, offset: 144478},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 4825, col: 7, offset: 144478},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 4825, col: 13, offset: 144484},
						val:        "by",
						ignoreCase: true,
						want:       "\"BY\"i",
					},
					&ruleRefExpr{
						pos:  position{line: 4825, col: 19, offset: 144490},
						name: "SPACE",
					},
				},
			},
		},
		{
			name: "EQUAL",
			pos:  position{line: 4827, col: 1, offset: 144517},
			expr: &seqExpr{
				pos: position{line: 4827, col: 10, offset: 144526},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 4827, col: 10, offset: 144526},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 4827, col: 25, offset: 144541},
						val:        "=",
						ignoreCase: false,
						want:       "\"=\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4827, col: 29, offset: 144545},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "COMMA",
			pos:  position{line: 4828, col: 1, offset: 144560},
			expr: &seqExpr{
				pos: position{line: 4828, col: 10, offset: 144569},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 4828, col: 10, offset: 144569},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 4828, col: 25, offset: 144584},
						val:        ",",
						ignoreCase: false,
						want:       "\",\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4828, col: 29, offset: 144588},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "L_PAREN",
			pos:  position{line: 4829, col: 1, offset: 144603},
			expr: &seqExpr{
				pos: position{line: 4829, col: 12, offset: 144614},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 4829, col: 12, offset: 144614},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&ruleRefExpr{
						pos:  position{line: 4829, col: 16, offset: 144618},
						name: "EMPTY_OR_SPACE",
					},
				},
			},
		},
		{
			name: "R_PAREN",
			pos:  position{line: 4830, col: 1, offset: 144633},
			expr: &seqExpr{
				pos: position{line: 4830, col: 12, offset: 144644},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 4830, col: 12, offset: 144644},
						name: "EMPTY_OR_SPACE",
					},
					&litMatcher{
						pos:        position{line: 4830, col: 27, offset: 144659},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 4832, col: 1, offset: 144664},
			expr: &notExpr{
				pos: position{line: 4832, col: 8, offset: 144671},
				expr: &anyMatcher{
					line: 4832, col: 9, offset: 144672,
				},
			},
		},
		{
			name: "WHITESPACE",
			pos:  position{line: 4833, col: 1, offset: 144674},
			expr: &choiceExpr{
				pos: position{line: 4833, col: 15, offset: 144688},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 4833, col: 15, offset: 144688},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&litMatcher{
						pos:        position{line: 4833, col: 21, offset: 144694},
						val:        "\t",
						ignoreCase: false,
						want:       "\"\\t\"",
					},
					&litMatcher{
						pos:        position{line: 4833, col: 28, offset: 144701},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
					&litMatcher{
						pos:        position{line: 4833, col: 35, offset: 144708},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
				},
			},
		},
		{
			name: "SPACE",
			pos:  position{line: 4834, col: 1, offset: 144713},
			expr: &choiceExpr{
				pos: position{line: 4834, col: 10, offset: 144722},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 4834, col: 11, offset: 144723},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 4834, col: 11, offset: 144723},
								expr: &ruleRefExpr{
									pos:  position{line: 4834, col: 11, offset: 144723},
									name: "WHITESPACE",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 4834, col: 23, offset: 144735},
								name: "COMMENT",
							},
							&zeroOrOneExpr{
								pos: position{line: 4834, col: 31, offset: 144743},
								expr: &ruleRefExpr{
									pos:  position{line: 4834, col: 31, offset: 144743},
									name: "WHITESPACE",
								},
							},
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 4834, col: 46, offset: 144758},
						expr: &ruleRefExpr{
							pos:  position{line: 4834, col: 46, offset: 144758},
							name: "WHITESPACE",
						},
					},
				},
			},
		},
		{
			name: "COMMENT",
			pos:  position{line: 4835, col: 1, offset: 144770},
			expr: &seqExpr{
				pos: position{line: 4835, col: 12, offset: 144781},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 4835, col: 12, offset: 144781},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 4835, col: 18, offset: 144787},
						expr: &seqExpr{
							pos: position{line: 4835, col: 19, offset: 144788},
							exprs: []any{
								&notExpr{
									pos: position{line: 4835, col: 19, offset: 144788},
									expr: &litMatcher{
										pos:        position{line: 4835, col: 21, offset: 144790},
										val:        "```",
										ignoreCase: false,
										want:       "\"```\"",
									},
								},
								&anyMatcher{
									line: 4835, col: 28, offset: 144797,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 4835, col: 32, offset: 144801},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
				},
			},
		},
		{
			name: "EMPTY_OR_SPACE",
			pos:  position{line: 4836, col: 1, offset: 144807},
			expr: &choiceExpr{
				pos: position{line: 4836, col: 20, offset: 144826},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 4836, col: 20, offset: 144826},
						name: "SPACE",
					},
					&litMatcher{
						pos:        position{line: 4836, col: 28, offset: 144834},
						val:        "",
						ignoreCase: false,
						want:       "\"\"",
					},
				},
			},
		},
		{
			name: "SPACE_OR_COMMA",
			pos:  position{line: 4837, col: 1, offset: 144837},
			expr: &choiceExpr{
				pos: position{line: 4837, col: 19, offset: 144855},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 4837, col: 19, offset: 144855},
						name: "COMMA",
					},
					&ruleRefExpr{
						pos:  position{line: 4837, col: 27, offset: 144863},
						name: "SPACE",
					},
				},
			},
		},
	},
}

func (c *current) onStart1(initialSearch, filterBlocks, queryAggBlocks any) (any, error) {
	var q ast.QueryStruct
	q.SearchFilter = initialSearch.(*ast.Node)

	// Join the InitialSearchBlock with the FilterBlocks with AND nodes. For a
	// search like "A | B | C | D" we should generate the node structure below
	// so that when we run the search it evaluates A first.
	//
	//      AND
	//     /   \
	//    A     AND
	//         /   \
	//        B     AND
	//             /   \
	//            C     D

	filterBlocksSlice := filterBlocks.([]any)
	switch len(filterBlocksSlice) {
	case 0:
		q.SearchFilter = initialSearch.(*ast.Node)
	case 1:
		q.SearchFilter = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     initialSearch.(*ast.Node),
			Right:    filterBlocksSlice[0].(*ast.Node),
		}
	default: // len > 1
		// Iterate backwards so we build the node structure mentioned above.
		root := filterBlocksSlice[len(filterBlocksSlice)-1].(*ast.Node)
		for i := len(filterBlocksSlice) - 2; i > -1; i-- {
			newRoot := &ast.Node{
				NodeType: ast.NodeAnd,
				Left:     filterBlocksSlice[i].(*ast.Node),
				Right:    root,
			}

			root = newRoot
		}

		q.SearchFilter = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     initialSearch.(*ast.Node),
			Right:    root,
		}
	}

	if queryAggBlocks != nil {
		queryAggSlice := queryAggBlocks.([]any)

		if len(queryAggSlice) > 0 {
			// Chain together all QueryAggergators.
			q.PipeCommands = queryAggSlice[0].(*structs.QueryAggregators)

			// Go to the end of the first chain.
			curQueryAgg := q.PipeCommands
			for ; curQueryAgg.Next != nil; curQueryAgg = curQueryAgg.Next {
			}

			// Link the remaining chains.
			for i := range queryAggSlice[1:] {
				queryAgg := queryAggSlice[i+1].(*structs.QueryAggregators)
				curQueryAgg.Next = queryAgg

				// Go to the end of this chain.
				for ; curQueryAgg.Next != nil; curQueryAgg = curQueryAgg.Next {
				}
			}
		}
	}

	return q, nil
}

func (p *parser) callonStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStart1(stack["initialSearch"], stack["filterBlocks"], stack["queryAggBlocks"])
}

func (c *current) onInitialSearchBlock1(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonInitialSearchBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInitialSearchBlock1(stack["clause"])
}

func (c *current) onSearchBlock1(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonSearchBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBlock1(stack["clause"])
}

func (c *current) onFilterBlock1(block any) (any, error) {
	return block, nil
}

func (p *parser) callonFilterBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterBlock1(stack["block"])
}

func (c *current) onQueryAggergatorBlock1(block any) (any, error) {
	queryAgg := block.(*structs.QueryAggregators)
	return queryAgg, nil
}

func (p *parser) callonQueryAggergatorBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQueryAggergatorBlock1(stack["block"])
}

func (c *current) onFieldSelectBlock1(op, fields any) (any, error) {
	columnsRequest := &structs.ColumnsRequest{}
	if op == nil || string(op.([]byte)) == "+" {
		columnsRequest.IncludeColumns = fields.([]string)
	} else {
		columnsRequest.ExcludeColumns = fields.([]string)
	}

	queryAggregator := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			OutputColumns: columnsRequest,
		},
	}

	return queryAggregator, nil
}

func (p *parser) callonFieldSelectBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldSelectBlock1(stack["op"], stack["fields"])
}

func (c *current) onAggregatorBlock1(aggs, byFields, options any) (any, error) {
	aggNode := &structs.QueryAggregators{}

	// Extract the MeasureAggregators and check if any of the aggregation fields
	// need to be renamed.
	aggsSlice := aggs.([]*aggregator)
	measureAggs := make([]*structs.MeasureAggregator, len(aggsSlice))
	columnsRequest := &structs.ColumnsRequest{}
	columnsRequest.RenameAggregationColumns = make(map[string]string, 0)

	for i, agg := range aggsSlice {
		measureAggs[i] = agg.measureAgg

		if agg.renameOutputField {
			columnsRequest.RenameAggregationColumns[measureAggs[i].String()] = agg.outputFieldNewName
		}
	}

	// If any agg field was renamed, make a QueryAggregators for all the renames.
	if len(columnsRequest.RenameAggregationColumns) > 0 {
		renameNode := &structs.QueryAggregators{
			PipeCommandType: structs.OutputTransformType,
			OutputTransforms: &structs.OutputTransforms{
				OutputColumns: columnsRequest,
			},
		}

		aggNode.Next = renameNode
	}

	if byFields == nil {
		aggNode.PipeCommandType = structs.MeasureAggsType
		aggNode.MeasureOperations = measureAggs
	} else {
		aggNode.PipeCommandType = structs.GroupByType
		aggNode.GroupByRequest = &structs.GroupByRequest{
			MeasureOperations: measureAggs,
			GroupByColumns:    byFields.([]string),
		}
		aggNode.BucketLimit = query.MAX_GRP_BUCKS
	}

	if options != nil {
		aggNode.StatsOptions = options.(*structs.StatsOptions)
	} else {
		aggNode.StatsOptions = initializeStatsOptions()
	}

	return aggNode, nil
}

func (p *parser) callonAggregatorBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregatorBlock1(stack["aggs"], stack["byFields"], stack["options"])
}

func (c *current) onStatsOptions1(option any) (any, error) {
	//Default value
	options := initializeStatsOptions()

	optionSlice := option.([]any)
	for _, opt := range optionSlice {
		optArr := opt.([]string)
		// Check for matching option types
		switch optArr[0] {
		case "dedup_splitvals":
			dedupSplitvalsBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatsBlock: Options: invalid param for dedup_splitvals option, param: %v, err: %v", optArr[1], err)
			}
			options.DedupSplitvals = dedupSplitvalsBool
		case "partitions":
			pVal, err := strconv.ParseUint(optArr[1], 10, 64)
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatsBlock: Options: invalid param for partitions option, param: %v, err: %v", optArr[1], err)
			}
			options.Partitions = pVal
		case "allnum":
			allnumBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatsBlock: Options: invalid param for allnum option, param: %v, err: %v", optArr[1], err)
			}
			options.Allnum = allnumBool
		case "delim":
			options.Delim = optArr[1]
		default:
			return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: invalid option: %v", optArr[0])
		}
	}

	return options, nil
}

func (p *parser) callonStatsOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatsOptions1(stack["option"])
}

func (c *current) onStatsOption1(optionCMD, str any) (any, error) {
	optionArr := []string{optionCMD.(string), str.(string)}
	return optionArr, nil
}

func (p *parser) callonStatsOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatsOption1(stack["optionCMD"], stack["str"])
}

func (c *current) onStatsOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: StatsOptionCMD: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonStatsOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatsOptionCMD1(stack["option"])
}

func (c *current) onGroupbyBlock1(fields any) (any, error) {
	// Wildcard fields are not allowed. See https://docs.splunk.com/Documentation/Splunk/9.1.0/SearchReference/Stats
	for _, field := range fields.([]string) {
		if strings.Contains(field, "*") {
			return nil, errors.New("BY clause cannot contain fields with wildcards")
		}
	}

	return fields, nil
}

func (p *parser) callonGroupbyBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupbyBlock1(stack["fields"])
}

func (c *current) onRegexBlock1(keyAndOp, str any) (any, error) {
	var key, op string
	if keyAndOp == nil {
		key = "*"
		op = "="
	} else {
		keyAndOpSlice := keyAndOp.([]any)
		key = keyAndOpSlice[0].(string)
		op = keyAndOpSlice[1].(string)
	}

	// Remove the quotation marks.
	regex := str.(string)
	regex = regex[1 : len(regex)-1]

	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:           op,
			Field:        key,
			Values:       regex,
			ValueIsRegex: true,
		},
	}

	return node, nil
}

func (p *parser) callonRegexBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexBlock1(stack["keyAndOp"], stack["str"])
}

func (c *current) onClauseLevel41(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*ast.Node)
	for _, v := range rest.([]any) {
		parts := v.([]any) // This will be [(AND / SPACE), ClauseLevel3].
		cur = &ast.Node{
			NodeType: ast.NodeAnd,
			Left:     cur,
			Right:    parts[1].(*ast.Node),
		}
	}

	return cur, nil
}

func (p *parser) callonClauseLevel41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel41(stack["first"], stack["rest"])
}

func (c *current) onClauseLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*ast.Node)
	for _, v := range rest.([]any) {
		parts := v.([]any) // This will be [OR, ClauseLevel2].
		cur = &ast.Node{
			NodeType: ast.NodeOr,
			Left:     cur,
			Right:    parts[1].(*ast.Node),
		}
	}

	return cur, nil
}

func (p *parser) callonClauseLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel31(stack["first"], stack["rest"])
}

func (c *current) onClauseLevel22(notList, first any) (any, error) {
	// There's an issue with how queries with AST Not nodes are run, so use
	// De Morgan's law to manipulate the expression.
	node := first.(*ast.Node)
	numNots := len(notList.([]any))

	if numNots%2 == 1 {
		deMorgansLaw(node)
	}

	return node, nil
}

func (p *parser) callonClauseLevel22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel22(stack["notList"], stack["first"])
}

func (c *current) onClauseLevel29(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonClauseLevel29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel29(stack["clause"])
}

func (c *current) onClauseLevel12(clause any) (any, error) {
	return clause, nil
}

func (p *parser) callonClauseLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel12(stack["clause"])
}

func (c *current) onClauseLevel18(term any) (any, error) {
	return term, nil
}

func (p *parser) callonClauseLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseLevel18(stack["term"])
}

func (c *current) onSearchTerm1(term any) (any, error) {
	return term, nil
}

func (p *parser) callonSearchTerm1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchTerm1(stack["term"])
}

func (c *current) onTimechartBlock1(tcArgs, limitExpr any) (any, error) {
	aggNode := &structs.QueryAggregators{}

	columnsRequest := &structs.ColumnsRequest{}
	columnsRequest.RenameAggregationColumns = make(map[string]string, 0)
	measureAggs := make([]*structs.MeasureAggregator, 0)

	timechartExpr := &structs.TimechartExpr{}
	byField := ""

	if tcArgs == nil {
		return nil, fmt.Errorf("spl peg: timechart: either single-agg or eval-expression by split-by-clause is required")
	}

	timechartArgs := tcArgs.(*TimechartArgs)

	// TODO: Should add || timechartArgs.evalExpr == nil
	if timechartArgs.singleAggExpr == nil {
		return nil, fmt.Errorf("spl peg: timechart: either single-agg or eval-expression by split-by-clause is required")
	}

	var bOptions *structs.BinOptions

	if timechartArgs.tcOptions != nil {
		if timechartArgs.tcOptions.BinOptions != nil {
			bOptions = timechartArgs.tcOptions.BinOptions
		}
	}

	if timechartArgs.singleAggExpr != nil {
		singleAgg := &structs.SingleAgg{}
		aggTemp := timechartArgs.singleAggExpr

		for i, agg := range aggTemp.aggregators {
			measureAggs = append(measureAggs, agg.measureAgg)

			if agg.renameOutputField {
				measureAggs[i].StrEnc = agg.outputFieldNewName
			}
		}

		singleAgg.MeasureOperations = measureAggs
		timechartExpr.SingleAgg = singleAgg

		if aggTemp.SplitByClause != nil {
			byField = aggTemp.SplitByClause.Field
		}
	}

	// TODO: if timechartArgs.evalExpr != nil {}

	aggNode.PipeCommandType = structs.GroupByType
	aggNode.GroupByRequest = &structs.GroupByRequest{
		MeasureOperations: measureAggs,
		GroupByColumns:    []string{"timestamp"},
	}
	aggNode.BucketLimit = query.MAX_GRP_BUCKS

	if bOptions == nil {
		bOptions = &structs.BinOptions{
			SpanOptions: &structs.SpanOptions{
				DefaultSettings: true,
				SpanLength: &structs.SpanLength{
					Num:       1,
					TimeScalr: utils.TMMinute,
				},
			},
		}
	}

	var limitExprTmp *structs.LimitExpr
	if limitExpr != nil {
		limitExprTmp = limitExpr.(*structs.LimitExpr)
		if len(measureAggs) > 1 {
			limitExprTmp.LimitScoreMode = structs.LSMByFreq
		}
	}

	timeBucket := aggregations.InitTimeBucket(bOptions.SpanOptions.SpanLength.Num, bOptions.SpanOptions.SpanLength.TimeScalr, byField, limitExprTmp, len(measureAggs))
	aggNode.TimeHistogram = timeBucket

	return aggNode, nil
}

func (p *parser) callonTimechartBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimechartBlock1(stack["tcArgs"], stack["limitExpr"])
}

func (c *current) onTimechartArgumentsList1(first, rest any) (any, error) {
	restSlice := rest.([]any)
	timechartArgs := &TimechartArgs{}

	numArgs := 1 + len(restSlice)

	for i := 0; i < numArgs; i++ {

		var numArg interface{}

		if i == 0 {
			numArg = first
		} else {
			numArg = restSlice[i-1].([]any)[1]
		}

		switch numArg.(type) {
		case *singleAggTemp:
			timechartArgs.singleAggExpr = numArg.(*singleAggTemp)
		case *structs.TcOptions:
			timechartArgs.tcOptions = numArg.(*structs.TcOptions)
		default:
			return nil, fmt.Errorf("Spl peg: Timechart: invalid timechart argument: %v", numArg)
		}
	}

	return timechartArgs, nil
}

func (p *parser) callonTimechartArgumentsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimechartArgumentsList1(stack["first"], stack["rest"])
}

func (c *current) onTimechartArgument1(tcArg any) (any, error) {
	return tcArg, nil
}

func (p *parser) callonTimechartArgument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimechartArgument1(stack["tcArg"])
}

func (c *current) onSingleAggExpr1(aggs, splitByClause any) (any, error) {
	singleAggExpr := &singleAggTemp{
		aggregators: aggs.([]*aggregator),
	}

	if splitByClause != nil {
		singleAggExpr.SplitByClause = splitByClause.(*structs.SplitByClause)
	}

	return singleAggExpr, nil
}

func (p *parser) callonSingleAggExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleAggExpr1(stack["aggs"], stack["splitByClause"])
}

func (c *current) onSplitByClause1(field any) (any, error) {
	splitByClause := &structs.SplitByClause{
		Field: field.(string),
	}

	return splitByClause, nil
}

func (p *parser) callonSplitByClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSplitByClause1(stack["field"])
}

func (c *current) onTcOptions1(option any) (any, error) {
	//Default value
	tcOptions := &structs.TcOptions{
		UseNull:  true,
		UseOther: true,
		NullStr:  "null",
		OtherStr: "other",
	}
	switch option.(type) {
	case *structs.BinOptions:
		tcOptions.BinOptions = option.(*structs.BinOptions)
	case [][]string:
		optionSlice := option.([]any)
		for _, opt := range optionSlice {
			optArr := opt.([]string)
			switch optArr[0] {
			case "usenull":
				useNullBool, err := strconv.ParseBool(optArr[1])
				if err != nil {
					return nil, fmt.Errorf("Spl peg: Timechart: TcOptions: %v", err)
				}
				tcOptions.UseNull = useNullBool
			case "useother":
				useOtherBool, err := strconv.ParseBool(optArr[1])
				if err != nil {
					return nil, fmt.Errorf("Spl peg: Timechart: TcOptions: %v", err)
				}
				tcOptions.UseOther = useOtherBool
			case "nullstr":
				tcOptions.OtherStr = optArr[1]
			case "otherstr":
				tcOptions.OtherStr = optArr[1]
			default:
				return nil, fmt.Errorf("Spl peg: Timechart: TcOptions: invalid option: %v", optArr[0])
			}
		}
	default:
		return nil, fmt.Errorf("Spl peg: Timechart: Invalid tcOptions %v", option)
	}
	return tcOptions, nil
}

func (p *parser) callonTcOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTcOptions1(stack["option"])
}

func (c *current) onTcOption1(tcOptionCMD, val any) (any, error) {
	tcOptionArr := []string{tcOptionCMD.(string), val.(string)}
	return tcOptionArr, nil
}

func (p *parser) callonTcOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTcOption1(stack["tcOptionCMD"], stack["val"])
}

func (c *current) onTcOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Timechart: TcOptionCMD: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonTcOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTcOptionCMD1(stack["option"])
}

func (c *current) onBinSpanLenOption1(number, timeScale any) (any, error) {
	if timeScale != nil {
		num, err := strconv.ParseInt(number.(string), 10, 64)
		if err != nil {
			return nil, fmt.Errorf("BinSpanLenOption: Invalid Number: %v is not an integer, err: %v", number.(string), err)
		}

		switch timeScale.(utils.TimeUnit) {
		case utils.TMDecisecond:
			if 10%num != 0 || num >= 10 {
				return nil, fmt.Errorf("BinSpanLenOption: Invalid span for decisecond %v, span value must be less than 1 second and 1 second must be evenly divisble by span", num)
			}
		case utils.TMCentisecond:
			if 100%num != 0 || num >= 100 {
				return nil, fmt.Errorf("BinSpanLenOption: Invalid span for centisecond %v, span value must be less than 1 second and 1 second must be evenly divisble by span", num)
			}
		case utils.TMMillisecond:
			if 1000%num != 0 || num >= 1000 {
				return nil, fmt.Errorf("BinSpanLenOption: Invalid span for millisecond %v, span value must be less than 1 second and 1 second must be evenly divisble by span", num)
			}
		case utils.TMMicrosecond:
			return nil, fmt.Errorf("BinSpanLenOption: Invalid span microsecond is not supported!")
		}

		spanLength := &structs.BinSpanLength{
			Num:       float64(num),
			TimeScale: timeScale.(utils.TimeUnit),
		}

		return spanLength, nil
	}

	num, err := strconv.ParseFloat(number.(string), 64)
	if err != nil {
		return nil, fmt.Errorf("BinSpanLenOption: Invalid Number: %v is not a numerical value, err: %v", number.(string), err)
	}

	spanLength := &structs.BinSpanLength{
		Num:       num,
		TimeScale: utils.TMInvalid,
	}

	return spanLength, nil
}

func (p *parser) callonBinSpanLenOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinSpanLenOption1(stack["number"], stack["timeScale"])
}

func (c *current) onBinOptionMinSpan1(spanLength any) (any, error) {

	binOptionArgs := &BinOptionArgs{
		argOption: "minspan",
		binOptions: &structs.BinCmdOptions{
			MinSpan: spanLength.(*structs.BinSpanLength),
		},
	}
	return binOptionArgs, nil
}

func (p *parser) callonBinOptionMinSpan1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptionMinSpan1(stack["spanLength"])
}

func (c *current) onBinOptionMaxBins1(intAsStr any) (any, error) {
	numBins, err := strconv.ParseUint(intAsStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid limit (%v): %v", intAsStr.(string), err)
	}
	if numBins < 2 || numBins > 50000 {
		return nil, fmt.Errorf("Invalid number of bins %v: must be between 2 and 50000", numBins)
	}
	binOptionArgs := &BinOptionArgs{
		argOption: "bins",
		binOptions: &structs.BinCmdOptions{
			MaxBins: numBins,
		},
	}
	return binOptionArgs, nil
}

func (p *parser) callonBinOptionMaxBins1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptionMaxBins1(stack["intAsStr"])
}

func (c *current) onBinOptionAlignTime2(utcEpoch any) (any, error) {
	epoch, err := strconv.ParseUint(utcEpoch.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Invalid utc epoch value: %v for align time", utcEpoch.(string))
	}
	binOptionArgs := &BinOptionArgs{
		argOption: "aligntime",
		binOptions: &structs.BinCmdOptions{
			AlignTime: &epoch,
		},
	}

	return binOptionArgs, nil
}

func (p *parser) callonBinOptionAlignTime2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptionAlignTime2(stack["utcEpoch"])
}

func (c *current) onBinOptionAlignTime8(timestamp any) (any, error) {
	var epoch uint64 = 0
	var err error
	relTimeModifier := timestamp.(ast.TimeModifier)
	epochVal, err := CalculateRelativeTime(relTimeModifier, time.Now())
	epoch = uint64(epochVal)
	if err != nil {
		return nil, err
	}

	binOptionArgs := &BinOptionArgs{
		argOption: "aligntime",
		binOptions: &structs.BinCmdOptions{
			AlignTime: &epoch,
		},
	}

	return binOptionArgs, nil
}

func (p *parser) callonBinOptionAlignTime8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptionAlignTime8(stack["timestamp"])
}

func (c *current) onBinOptionStart1(number any) (any, error) {
	start, err := strconv.ParseFloat(number.(string), 64)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Cannot convert %v to float", number.(string))
	}
	binOptionArgs := &BinOptionArgs{
		argOption: "start",
		binOptions: &structs.BinCmdOptions{
			Start: &start,
		},
	}

	return binOptionArgs, nil
}

func (p *parser) callonBinOptionStart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptionStart1(stack["number"])
}

func (c *current) onBinOptionEnd1(number any) (any, error) {
	end, err := strconv.ParseFloat(number.(string), 64)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Cannot convert %v to float", number.(string))
	}
	binOptionArgs := &BinOptionArgs{
		argOption: "end",
		binOptions: &structs.BinCmdOptions{
			End: &end,
		},
	}

	return binOptionArgs, nil
}

func (p *parser) callonBinOptionEnd1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptionEnd1(stack["number"])
}

func (c *current) onBinOptionSpan2(num1, num2 any) (any, error) {
	var coeff float64 = 1.0
	var base float64 = 10.0
	var err error

	if num2 != nil {
		base, err = strconv.ParseFloat(num2.(string), 64)
		if err != nil {
			return nil, fmt.Errorf("Spl peg: Invalid base in log span, %v cannot be converted to floar, err: %v", num2.(string), err)
		}
		if base <= 1.0 {
			return nil, fmt.Errorf("Spl peg: Invalid base in log span, base must be greater than 1")
		}
	}

	if num1 != nil {
		coeff, err = strconv.ParseFloat(num1.(string), 64)
		if err != nil {
			return nil, fmt.Errorf("Spl peg: Invalid coefficient in log span, %v cannot be converted to float, err: %v", num1.(string), err)
		}
		if coeff < 1.0 {
			return nil, fmt.Errorf("Spl peg: Invalid coefficient in log span, coefficient must be greater than or equal to 1")
		}
		if coeff >= base {
			return nil, fmt.Errorf("Spl peg: Invalid coefficient in log span, coefficient must be less than base")
		}
	}

	logSpan := &structs.LogSpan{
		Coefficient: coeff,
		Base:        base,
	}
	spanOptions := &structs.BinSpanOptions{
		LogSpan: logSpan,
	}
	binOptionArgs := &BinOptionArgs{
		argOption: "span",
		binOptions: &structs.BinCmdOptions{
			BinSpanOptions: spanOptions,
		},
	}
	return binOptionArgs, nil
}

func (p *parser) callonBinOptionSpan2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptionSpan2(stack["num1"], stack["num2"])
}

func (c *current) onBinOptionSpan17(spanLen any) (any, error) {

	spanOptions := &structs.BinSpanOptions{
		BinSpanLength: spanLen.(*structs.BinSpanLength),
	}

	binOptionArgs := &BinOptionArgs{
		argOption: "span",
		binOptions: &structs.BinCmdOptions{
			BinSpanOptions: spanOptions,
		},
	}
	return binOptionArgs, nil
}

func (p *parser) callonBinOptionSpan17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptionSpan17(stack["spanLen"])
}

func (c *current) onBinCmdOption1(option any) (any, error) {
	return option, nil
}

func (p *parser) callonBinCmdOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinCmdOption1(stack["option"])
}

func (c *current) onBinCmdOptionsList1(first, rest any) (any, error) {
	restSlice := rest.([]any)
	optionWasSpecified := make(map[string]bool)

	numOptions := 1 + len(restSlice)

	binCmdOption := &structs.BinCmdOptions{}

	for i := 0; i < numOptions; i++ {
		var binOptArg *BinOptionArgs
		if i == 0 {
			binOptArg = first.(*BinOptionArgs)
		} else {
			separator := restSlice[i-1].([]any)
			binOptArg = separator[1].(*BinOptionArgs)
		}

		argOption := binOptArg.argOption
		val, exist := optionWasSpecified[argOption]
		if exist && val {
			return nil, fmt.Errorf("Invalid Syntax, option: %v is already specified", argOption)
		}
		optionWasSpecified[argOption] = true

		switch argOption {
		case "minspan":
			binCmdOption.MinSpan = binOptArg.binOptions.MinSpan
		case "span":
			binCmdOption.BinSpanOptions = binOptArg.binOptions.BinSpanOptions
		case "bins":
			binCmdOption.MaxBins = binOptArg.binOptions.MaxBins
		case "start":
			binCmdOption.Start = binOptArg.binOptions.Start
		case "end":
			binCmdOption.End = binOptArg.binOptions.End
		case "aligntime":
			binCmdOption.AlignTime = binOptArg.binOptions.AlignTime
		default:
			return nil, fmt.Errorf("Not a Valid Bin Command Option: %v", argOption)
		}
	}

	return binCmdOption, nil
}

func (p *parser) callonBinCmdOptionsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinCmdOptionsList1(stack["first"], stack["rest"])
}

func (c *current) onBinBlock2(binCmdOption, field, newFieldName any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		NewColName: field.(string),
	}
	if newFieldName != nil {
		letColReq.NewColName = newFieldName.(string)
	}

	letColReq.BinRequest = binCmdOption.(*structs.BinCmdOptions)
	if letColReq.BinRequest.MaxBins == 0 {
		letColReq.BinRequest.MaxBins = 100
	}
	letColReq.BinRequest.Field = field.(string)

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return queryAgg, nil
}

func (p *parser) callonBinBlock2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinBlock2(stack["binCmdOption"], stack["field"], stack["newFieldName"])
}

func (c *current) onBinBlock14(field, newFieldName any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		NewColName: field.(string),
	}
	if newFieldName != nil {
		letColReq.NewColName = newFieldName.(string)
	}

	binCmdOption := &structs.BinCmdOptions{
		MaxBins: 100,
	}

	letColReq.BinRequest = binCmdOption
	letColReq.BinRequest.Field = field.(string)

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return queryAgg, nil
}

func (p *parser) callonBinBlock14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinBlock14(stack["field"], stack["newFieldName"])
}

func (c *current) onBinOptions1(spanOptions any) (any, error) {
	binOptions := &structs.BinOptions{
		SpanOptions: spanOptions.(*structs.SpanOptions),
	}
	return binOptions, nil
}

func (p *parser) callonBinOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinOptions1(stack["spanOptions"])
}

func (c *current) onSpanOptions1(spanLength any) (any, error) {
	spanOptions := &structs.SpanOptions{
		SpanLength: spanLength.(*structs.SpanLength),
	}
	return spanOptions, nil
}

func (p *parser) callonSpanOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpanOptions1(stack["spanLength"])
}

func (c *current) onSpanLength1(intAsStr, timeScale any) (any, error) {
	num, err := strconv.Atoi(intAsStr.(string))
	if err != nil {
		return nil, fmt.Errorf("SpanLength: Invalid num (%v): %v", intAsStr.(string), err)
	}

	spanLength := &structs.SpanLength{
		Num:       num,
		TimeScalr: timeScale.(utils.TimeUnit),
	}
	return spanLength, nil
}

func (p *parser) callonSpanLength1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpanLength1(stack["intAsStr"], stack["timeScale"])
}

func (c *current) onTimeScale1(timeUnit any) (any, error) {
	return timeUnit, nil
}

func (p *parser) callonTimeScale1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimeScale1(stack["timeUnit"])
}

func (c *current) onLimitExpr1(sortBy, intAsStr any) (any, error) {
	num, err := strconv.Atoi(intAsStr.(string))
	if err != nil {
		return nil, fmt.Errorf("SpanLength: Invalid num (%v): %v", intAsStr.(string), err)
	}

	limitExpr := &structs.LimitExpr{
		IsTop: true, // Default Value
		Num:   num,
	}

	if sortBy != nil {
		sortByStr, err := transferUint8ToString(sortBy)
		if err != nil {
			return nil, fmt.Errorf("Spl peg: Timechart: %v", err)
		}
		if sortByStr == "bottom" {
			limitExpr.IsTop = false
		}
	}

	return limitExpr, nil
}

func (p *parser) callonLimitExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitExpr1(stack["sortBy"], stack["intAsStr"])
}

func (c *current) onStatisticBlock1(statisticExpr any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		StatisticColRequest: statisticExpr.(*structs.StatisticExpr),
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	measureAgg := &structs.MeasureAggregator{
		MeasureCol:  "*",
		MeasureFunc: utils.Count,
	}

	measureOperations := make([]*structs.MeasureAggregator, 1)
	measureOperations[0] = measureAgg

	groupByColumns := append(statisticExpr.(*structs.StatisticExpr).FieldList, statisticExpr.(*structs.StatisticExpr).ByClause...)

	aggNode := &structs.QueryAggregators{}
	aggNode.Next = root
	aggNode.PipeCommandType = structs.GroupByType
	aggNode.GroupByRequest = &structs.GroupByRequest{
		MeasureOperations: measureOperations,
		GroupByColumns:    groupByColumns,
	}

	return aggNode, nil
}

func (p *parser) callonStatisticBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticBlock1(stack["statisticExpr"])
}

func (c *current) onStatisticExpr1(cmd, limit, fieldList, byClause, options any) (any, error) {

	statisticExpr := &structs.StatisticExpr{
		FieldList: fieldList.([]interface{})[1].([]string),
	}

	statisticCmd, err := transferUint8ToString(cmd)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: StatisticExpr: %v", err)
	}

	if statisticCmd == "top" {
		statisticExpr.StatisticFunctionMode = structs.SFMTop
	} else {
		statisticExpr.StatisticFunctionMode = structs.SFMRare
	}

	if limit != nil {
		statisticExpr.Limit = limit.(string)
	}

	if options != nil {
		statisticExpr.StatisticOptions = options.(*structs.StatisticOptions)
	} else {
		statisticExpr.StatisticOptions = &structs.StatisticOptions{
			ShowCount:    true,
			CountField:   "count",
			ShowPerc:     true,
			PercentField: "percent",
			UseOther:     false,
			OtherStr:     "Other",
		}
	}

	if byClause != nil {
		statisticExpr.ByClause = byClause.([]string)
	}

	return statisticExpr, nil
}

func (p *parser) callonStatisticExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticExpr1(stack["cmd"], stack["limit"], stack["fieldList"], stack["byClause"], stack["options"])
}

func (c *current) onStatisticLimit2(number any) (any, error) {
	return number.(string), nil
}

func (p *parser) callonStatisticLimit2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticLimit2(stack["number"])
}

func (c *current) onStatisticLimit7(limit any) (any, error) {
	return limit.(string), nil
}

func (p *parser) callonStatisticLimit7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticLimit7(stack["limit"])
}

func (c *current) onStatisticOptions1(option any) (any, error) {
	//Default value
	options := &structs.StatisticOptions{
		ShowCount:    true,
		CountField:   "count",
		ShowPerc:     true,
		PercentField: "percent",
		UseOther:     false,
		OtherStr:     "other",
	}

	optionSlice := option.([]any)
	for _, opt := range optionSlice {
		optArr := opt.([]string)
		// Check for matching option types
		switch optArr[0] {
		case "showcount":
			showCountBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.ShowCount = showCountBool
		case "countfield":
			options.CountField = optArr[1]
		case "showperc":
			showPercBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.ShowPerc = showPercBool
		case "percentfield":
			options.PercentField = optArr[1]
		case "useother":
			useOtherBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: %v", err)
			}
			options.UseOther = useOtherBool
		case "otherstr":
			options.OtherStr = optArr[1]
		default:
			return nil, fmt.Errorf("Spl peg: StatisticBlock: Options: invalid option")
		}
	}

	return options, nil
}

func (p *parser) callonStatisticOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticOptions1(stack["option"])
}

func (c *current) onStatisticOption1(optionCMD, field any) (any, error) {
	optionArr := []string{optionCMD.(string), field.(string)}
	return optionArr, nil
}

func (p *parser) callonStatisticOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticOption1(stack["optionCMD"], stack["field"])
}

func (c *current) onStatisticOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: StatisticExpr: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonStatisticOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatisticOptionCMD1(stack["option"])
}

func (c *current) onByClause2(fieldList any) (any, error) {
	return fieldList.([]string), nil
}

func (p *parser) callonByClause2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByClause2(stack["fieldList"])
}

func (c *current) onByClause7(groupByBlock any) (any, error) {
	return groupByBlock.([]string), nil
}

func (p *parser) callonByClause7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByClause7(stack["groupByBlock"])
}

func (c *current) onDedupBlock1(dedupExpr any) (any, error) {

	letColReq := &structs.LetColumnsRequest{
		DedupColRequest: dedupExpr.(*structs.DedupExpr),
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonDedupBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupBlock1(stack["dedupExpr"])
}

func (c *current) onDedupExpr1(limitArr, options1, fieldList, options2, sortByClause any) (any, error) {
	dedupExpr := &structs.DedupExpr{
		FieldList:         fieldList.([]string),
		Limit:             1,
		DedupCombinations: make(map[string]map[int][]structs.SortValue, 0),
		DedupRecords:      make(map[string]map[string]interface{}, 0),
	}

	if limitArr != nil {
		limitStr := limitArr.([]interface{})[1].(string)
		limit, err := strconv.ParseUint(limitStr, 10, 64)
		if err != nil || limit == 0 {
			return nil, fmt.Errorf("Invalid limit (%v): %v", limitStr, err)
		}
		dedupExpr.Limit = limit
	}

	dedupExpr.DedupOptions = &structs.DedupOptions{
		Consecutive: false,
		KeepEmpty:   false,
		KeepEvents:  false,
	}

	if options1 != nil {
		dedupExpr.DedupOptions = options1.(*structs.DedupOptions)
	}
	if options2 != nil {
		options := options2.(*structs.DedupOptions)

		if options.Consecutive {
			dedupExpr.DedupOptions.Consecutive = options.Consecutive
		}
		if options.KeepEmpty {
			dedupExpr.DedupOptions.KeepEmpty = options.KeepEmpty
		}
		if options.KeepEvents {
			dedupExpr.DedupOptions.KeepEvents = options.KeepEvents
		}
	}

	if sortByClause != nil {
		dedupExpr.DedupSortEles = sortByClause.([]*structs.SortElement)

		// Make the DedupSortAscending from the DedupSortEles.
		dedupExpr.DedupSortAscending = make([]int, len(dedupExpr.DedupSortEles))
		for i, ele := range dedupExpr.DedupSortEles {
			if ele.SortByAsc {
				dedupExpr.DedupSortAscending[i] = 1
			} else {
				dedupExpr.DedupSortAscending[i] = -1
			}
		}
	}

	return dedupExpr, nil
}

func (p *parser) callonDedupExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupExpr1(stack["limitArr"], stack["options1"], stack["fieldList"], stack["options2"], stack["sortByClause"])
}

func (c *current) onDedupFieldName1(field any) (any, error) {
	return field, nil
}

func (p *parser) callonDedupFieldName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupFieldName1(stack["field"])
}

func (c *current) onDedupFieldList1(first, rest any) (any, error) {
	// Convert `rest` to a slice. Each element of the slice will be a 2-element
	// slice where the first element is " " and the second is a FieldName.
	restSlice := rest.([]any)

	numFieldNames := 1 + len(restSlice)
	fields := make([]string, numFieldNames)
	fields[0] = first.(string)

	for i := 1; i < numFieldNames; i++ {
		separatorAndField := restSlice[i-1].([]any)
		fields[i] = separatorAndField[1].(string)
	}

	return fields, nil
}

func (p *parser) callonDedupFieldList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupFieldList1(stack["first"], stack["rest"])
}

func (c *current) onDedupOptions1(option any) (any, error) {
	//Default value
	options := &structs.DedupOptions{
		Consecutive: false,
		KeepEmpty:   false,
		KeepEvents:  false,
	}

	optionSlice := option.([]any)
	for _, opt := range optionSlice {
		optArr := opt.([]string)
		// Check for matching option types
		switch optArr[0] {
		case "consecutive":
			consecutiveBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: DedupBlock: Options: %v", err)
			}
			options.Consecutive = consecutiveBool
		case "keepempty":
			keepEmptyBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: DedupBlock: Options: %v", err)
			}
			options.KeepEmpty = keepEmptyBool
		case "keepevents":
			keepEventsBool, err := strconv.ParseBool(optArr[1])
			if err != nil {
				return nil, fmt.Errorf("Spl peg: DedupBlock: Options: %v", err)
			}
			options.KeepEvents = keepEventsBool
		default:
			return nil, fmt.Errorf("Spl peg: DedupBlock: Options: invalid option")
		}
	}

	return options, nil
}

func (p *parser) callonDedupOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupOptions1(stack["option"])
}

func (c *current) onDedupOption1(optionCMD, field any) (any, error) {
	optionArr := []string{optionCMD.(string), field.(string)}
	return optionArr, nil
}

func (p *parser) callonDedupOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupOption1(stack["optionCMD"], stack["field"])
}

func (c *current) onDedupOptionCMD1(option any) (any, error) {
	optionStr, err := transferUint8ToString(option)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: DedupExpr: %v", err)
	}
	return optionStr, nil
}

func (p *parser) callonDedupOptionCMD1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupOptionCMD1(stack["option"])
}

func (c *current) onDedupSortByClause1(dedupSortEles any) (any, error) {
	return dedupSortEles, nil
}

func (p *parser) callonDedupSortByClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDedupSortByClause1(stack["dedupSortEles"])
}

func (c *current) onSortElements1(first, rest any) (any, error) {
	restSlice := rest.([]any)

	length := 1 + len(restSlice)
	sortEles := make([]*structs.SortElement, length)
	sortEles[0] = first.(*structs.SortElement)

	for i := 1; i < length; i++ {
		elements := restSlice[i-1].([]any)
		sortEles[i] = elements[1].(*structs.SortElement)
	}

	return sortEles, nil
}

func (p *parser) callonSortElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortElements1(stack["first"], stack["rest"])
}

func (c *current) onSingleSortElement1(element any) (any, error) {
	return element, nil
}

func (p *parser) callonSingleSortElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleSortElement1(stack["element"])
}

func (c *current) onSingleSortElementWithoutCast1(sortBySymbol, field any) (any, error) {
	sortByAsc := true

	symbol := sortBySymbol.([]byte)
	if len(symbol) > 0 && symbol[0] == '-' {
		sortByAsc = false
	}

	return &structs.SortElement{
		SortByAsc: sortByAsc,
		Op:        "",
		Field:     field.(string),
	}, nil
}

func (p *parser) callonSingleSortElementWithoutCast1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleSortElementWithoutCast1(stack["sortBySymbol"], stack["field"])
}

func (c *current) onSingleSortElementWithCast1(sortBySymbol, op, field any) (any, error) {
	sortByAsc := true

	symbol := sortBySymbol.([]byte)
	if len(symbol) > 0 && symbol[0] == '-' {
		sortByAsc = false
	}

	opStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: singleSortElementWithCast: %v", err)
	}

	return &structs.SortElement{
		SortByAsc: sortByAsc,
		Op:        opStr,
		Field:     field.(string),
	}, nil
}

func (p *parser) callonSingleSortElementWithCast1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleSortElementWithCast1(stack["sortBySymbol"], stack["op"], stack["field"])
}

func (c *current) onRenameBlock1(renameExpr any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		RenameColRequest: renameExpr.(*structs.RenameExpr),
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonRenameBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameBlock1(stack["renameExpr"])
}

func (c *current) onRenameExpr2(originalPattern, newPattern any) (any, error) {
	renameExpr := &structs.RenameExpr{
		RenameExprMode:  structs.REMPhrase,
		OriginalPattern: originalPattern.(string),
		NewPattern:      removeQuotes(newPattern),
	}

	return renameExpr, nil
}

func (p *parser) callonRenameExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameExpr2(stack["originalPattern"], stack["newPattern"])
}

func (c *current) onRenameExpr9(originalPattern, newPattern any) (any, error) {
	isRegex, err := isRegexRename(originalPattern.(string), newPattern.(string))
	if err != nil {
		return nil, fmt.Errorf("Spl peg: RenameExpr: %v", err)
	}

	var renameExprMode structs.RenameExprMode
	if isRegex {
		renameExprMode = structs.REMRegex
	} else {
		renameExprMode = structs.REMOverride
	}

	renameExpr := &structs.RenameExpr{
		RenameExprMode:  renameExprMode,
		OriginalPattern: originalPattern.(string),
		NewPattern:      newPattern.(string),
	}

	return renameExpr, nil
}

func (p *parser) callonRenameExpr9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameExpr9(stack["originalPattern"], stack["newPattern"])
}

func (c *current) onRexBlock1(field, str any) (any, error) {
	pattern := removeQuotes(str)
	rexColNames, err := getRexColNames(pattern)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: RexBlock: %v", err)
	}
	rexExpr := &structs.RexExpr{
		FieldName:   field.(string),
		Pattern:     transferPCREToRE2(pattern),
		RexColNames: rexColNames,
	}

	letColReq := &structs.LetColumnsRequest{
		RexColRequest: rexExpr,
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonRexBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRexBlock1(stack["field"], stack["str"])
}

func (c *current) onSortBlock1(limit, sortByEles any) (any, error) {

	sortExpr := &structs.SortExpr{
		SortEles:    sortByEles.([]*structs.SortElement),
		SortRecords: make(map[string]map[string]interface{}, 0),
		Limit:       10000,
	}

	if limit != nil {
		sortExpr.Limit = limit.(uint64)
	}

	ascendingArr := make([]int, len(sortExpr.SortEles))
	for i, ele := range sortExpr.SortEles {
		if ele.SortByAsc {
			ascendingArr[i] = 1
		} else {
			ascendingArr[i] = -1
		}
	}

	sortExpr.SortAscending = ascendingArr

	letColReq := &structs.LetColumnsRequest{
		SortColRequest: sortExpr,
	}

	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: letColReq,
		},
	}

	return root, nil
}

func (p *parser) callonSortBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortBlock1(stack["limit"], stack["sortByEles"])
}

func (c *current) onSortLimit1(intAsStr any) (any, error) {
	limit, err := strconv.ParseUint(intAsStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid limit (%v): %v", intAsStr.(string), err)
	}

	if limit == 0 {
		limit = math.MaxUint64
	}

	return limit, nil
}

func (p *parser) callonSortLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortLimit1(stack["intAsStr"])
}

func (c *current) onEvalBlock1(first, rest any) (any, error) {
	root := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: first.(*structs.LetColumnsRequest),
		},
	}

	leafQueryAgg := root
	restSlice := rest.([]any)
	for i := range restSlice {
		CommaSpaceAndEval := restSlice[i].([]any)
		nextQueryAgg := &structs.QueryAggregators{
			PipeCommandType: structs.OutputTransformType,
			OutputTransforms: &structs.OutputTransforms{
				LetColumns: CommaSpaceAndEval[1].(*structs.LetColumnsRequest),
			},
		}

		leafQueryAgg.Next = nextQueryAgg
		leafQueryAgg = leafQueryAgg.Next
	}

	return root, nil
}

func (p *parser) callonEvalBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalBlock1(stack["first"], stack["rest"])
}

func (c *current) onSingleEval1(field, expr any) (any, error) {
	fieldStr := field.(string)
	if strings.Contains(fieldStr, "*") {
		return nil, fmt.Errorf("New fields must not contain wildcards; invalid field: %v", field)
	}

	letColumnsRequest := expr.(*structs.LetColumnsRequest)
	letColumnsRequest.NewColName = fieldStr

	return letColumnsRequest, nil
}

func (p *parser) callonSingleEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleEval1(stack["field"], stack["expr"])
}

func (c *current) onEvalExpression1(value any) (any, error) {
	letColReq := &structs.LetColumnsRequest{
		ValueColRequest: value.(*structs.ValueExpr),
	}

	return letColReq, nil
}

func (p *parser) callonEvalExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalExpression1(stack["value"])
}

func (c *current) onConditionExpr2(condition, trueValue, falseValue any) (any, error) {

	node := &structs.ConditionExpr{
		Op:         "if",
		BoolExpr:   condition.(*structs.BoolExpr),
		TrueValue:  trueValue.(*structs.ValueExpr),
		FalseValue: falseValue.(*structs.ValueExpr),
	}

	return node, nil
}

func (p *parser) callonConditionExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr2(stack["condition"], stack["trueValue"], stack["falseValue"])
}

func (c *current) onConditionExpr15(opName, pair, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: ConditionExpr: %v", err)
	}
	pairs := make([]*structs.ConditionValuePair, 1)
	pairs[0] = pair.(*structs.ConditionValuePair)

	if rest != nil {
		restSlice := rest.([]any)
		for i := range restSlice {
			ele := restSlice[i].([]any)
			pairs = append(pairs, ele[1].(*structs.ConditionValuePair))
		}
	}

	node := &structs.ConditionExpr{
		Op:                  opNameStr,
		ConditionValuePairs: pairs,
	}

	return node, nil
}

func (p *parser) callonConditionExpr15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr15(stack["opName"], stack["pair"], stack["rest"])
}

func (c *current) onConditionExpr30(valueExpr, rest any) (any, error) {
	restSlice := rest.([]any)
	valueList := make([]*structs.ValueExpr, 1+len(restSlice))
	valueList[0] = valueExpr.(*structs.ValueExpr)

	for i := range restSlice {
		valueAtom := restSlice[i].([]any)
		valueList[i+1] = valueAtom[1].(*structs.ValueExpr)
	}

	node := &structs.ConditionExpr{
		Op:        "coalesce",
		ValueList: valueList,
	}

	return node, nil
}

func (p *parser) callonConditionExpr30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr30(stack["valueExpr"], stack["rest"])
}

func (c *current) onConditionExpr42(leftValue, rightValue any) (any, error) {
	valueList := make([]*structs.ValueExpr, 2)
	valueList[0] = leftValue.(*structs.ValueExpr)
	valueList[1] = rightValue.(*structs.ValueExpr)

	node := &structs.ConditionExpr{
		Op:        "nullif",
		ValueList: valueList,
	}

	return node, nil
}

func (p *parser) callonConditionExpr42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionExpr42(stack["leftValue"], stack["rightValue"])
}

func (c *current) onConditionValuePair1(condition, value any) (any, error) {
	conditionValuePair := &structs.ConditionValuePair{
		Condition: condition.(*structs.BoolExpr),
		Value:     value.(*structs.ValueExpr),
	}
	return conditionValuePair, nil
}

func (p *parser) callonConditionValuePair1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionValuePair1(stack["condition"], stack["value"])
}

func (c *current) onTextExpr2(opName, stringExpr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:          opNameStr,
		Param:       stringExpr.(*structs.StringExpr),
		StrToRemove: "",
	}
	return node, nil
}

func (p *parser) callonTextExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr2(stack["opName"], stack["stringExpr"])
}

func (c *current) onTextExpr16(opName, firstVal, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	if rest == nil {
		return firstVal, nil
	}
	restSlice := rest.([]any)
	values := make([]*structs.StringExpr, 1+len(restSlice))
	values[0] = firstVal.(*structs.StringExpr)

	for i := range restSlice {
		stringAtom := restSlice[i].([]any)
		values[i+1] = stringAtom[1].(*structs.StringExpr)
	}
	node := &structs.TextExpr{
		Op:        opNameStr,
		ValueList: values,
	}
	return node, nil
}

func (p *parser) callonTextExpr16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr16(stack["opName"], stack["firstVal"], stack["rest"])
}

func (c *current) onTextExpr33(opName, stringExpr, delim any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:        opNameStr,
		Param:     stringExpr.(*structs.StringExpr),
		Delimiter: delim.(*structs.StringExpr),
	}
	return node, nil
}

func (p *parser) callonTextExpr33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr33(stack["opName"], stack["stringExpr"], stack["delim"])
}

func (c *current) onTextExpr46(opName, stringExpr, startIndex, lengthParam any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	var lengthConverted *structs.NumericExpr
	if lengthParam != nil {
		lengthSlice, ok := lengthParam.([]interface{})
		if ok && len(lengthSlice) > 1 {
			length, ok := lengthSlice[1].(*structs.NumericExpr)
			if ok {
				lengthConverted = length
			} else {
				return nil, fmt.Errorf("Spl peg: TextExpr: Unable to assert length as *structs.NumericExpr")
			}
		}
	}
	node := &structs.TextExpr{
		Op:         opNameStr,
		Param:      stringExpr.(*structs.StringExpr),
		StartIndex: startIndex.(*structs.NumericExpr),
		LengthExpr: lengthConverted,
	}
	return node, nil
}

func (p *parser) callonTextExpr46() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr46(stack["opName"], stack["stringExpr"], stack["startIndex"], stack["lengthParam"])
}

func (c *current) onTextExpr62(value, format any) (any, error) {
	var formatExpr *structs.StringExpr
	if format != nil {
		formatSlice := format.([]interface{})
		formatExpr, _ = formatSlice[1].(*structs.StringExpr)
	}
	return &structs.TextExpr{
		IsTerminal: false,
		Op:         "tostring",
		Val:        value.(*structs.ValueExpr),
		Param:      formatExpr,
	}, nil
}

func (p *parser) callonTextExpr62() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr62(stack["value"], stack["format"])
}

func (c *current) onTextExpr74(opName, expr, strToRemoveExpr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}

	strToRemove := " \t"
	if strToRemoveExpr != nil {
		strToRemove = strToRemoveExpr.(string)
	}

	node := &structs.TextExpr{
		Op:          opNameStr,
		Param:       expr.(*structs.StringExpr),
		StrToRemove: removeQuotes(strToRemove),
	}

	return node, nil
}

func (p *parser) callonTextExpr74() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr74(stack["opName"], stack["expr"], stack["strToRemoveExpr"])
}

func (c *current) onTextExpr88(inputField, path any) (any, error) {
	pathExpr := path.(*SPathFieldExpr)
	return &structs.TextExpr{
		Op: "spath",
		SPathExpr: &structs.SPathExpr{
			InputColName:    inputField.(string),
			Path:            pathExpr.PathValue,
			IsPathFieldName: pathExpr.IsPathFieldName,
		},
	}, nil
}

func (p *parser) callonTextExpr88() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr88(stack["inputField"], stack["path"])
}

func (c *current) onTextExpr100(mask, ip any) (any, error) {
	return &structs.TextExpr{
		Op:    "ipmask",
		Val:   ip.(*structs.ValueExpr),
		Param: mask.(*structs.StringExpr),
	}, nil
}

func (p *parser) callonTextExpr100() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr100(stack["mask"], stack["ip"])
}

func (c *current) onTextExpr110(obj, key, value any) (any, error) {
	stringExpr := &structs.StringExpr{
		StringExprMode: structs.SEMRawStringList,
		StringList:     []string{key.(string), value.(string)},
	}
	return &structs.TextExpr{
		Op:    "object_to_array",
		Val:   obj.(*structs.ValueExpr),
		Param: stringExpr,
	}, nil
}

func (p *parser) callonTextExpr110() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr110(stack["obj"], stack["key"], stack["value"])
}

func (c *current) onTextExpr123(format, rest any) (any, error) {
	textExpr := &structs.TextExpr{
		Op:    "printf",
		Param: format.(*structs.StringExpr),
	}
	if rest != nil {
		restSlice := rest.([]any)
		valueList := make([]*structs.StringExpr, len(restSlice))

		for i := range restSlice {
			valueAtom := restSlice[i].([]any)
			valueList[i] = valueAtom[1].(*structs.StringExpr)
		}
		textExpr.ValueList = valueList
	}

	return textExpr, nil
}

func (p *parser) callonTextExpr123() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr123(stack["format"], stack["rest"])
}

func (c *current) onTextExpr135(containInternalFields any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMRawString,
		RawString:      "true", // default value
	}

	if containInternalFields != nil {
		restSlice := containInternalFields.([]any)
		containInternalFieldsStr, err := transferUint8ToString(restSlice[0])
		if err != nil {
			return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
		}
		if containInternalFieldsStr == "false" {
			expr.RawString = "false"
		}
	}

	return &structs.TextExpr{
		Op:    "tojson",
		Param: expr,
	}, nil
}

func (p *parser) callonTextExpr135() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr135(stack["containInternalFields"])
}

func (c *current) onTextExpr147(opName, condition any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: Failed to recognize operator: %v, err= %v", opName, err)
	}

	node := &structs.TextExpr{
		Op:        opNameStr,
		Condition: condition.(*structs.BoolExpr),
	}

	return node, nil
}

func (p *parser) callonTextExpr147() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr147(stack["opName"], stack["condition"])
}

func (c *current) onTextExpr155(opName, stringExpr, startIndex, endIndex any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:         opNameStr,
		Param:      stringExpr.(*structs.StringExpr),
		StartIndex: startIndex.(*structs.NumericExpr),
	}
	if endIndex != nil {
		node.EndIndex = endIndex.(*structs.NumericExpr)
	}

	return node, nil
}

func (p *parser) callonTextExpr155() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr155(stack["opName"], stack["stringExpr"], stack["startIndex"], stack["endIndex"])
}

func (c *current) onTextExpr169(opName, stringExpr, expr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:    opNameStr,
		Val:   expr.(*structs.ValueExpr),
		Param: stringExpr.(*structs.StringExpr),
	}

	return node, nil
}

func (p *parser) callonTextExpr169() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr169(stack["opName"], stack["stringExpr"], stack["expr"])
}

func (c *current) onTextExpr180(opName, startIndex, endIndex, stringExpr any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	node := &structs.TextExpr{
		Op:         opNameStr,
		StartIndex: startIndex.(*structs.NumericExpr),
		EndIndex:   endIndex.(*structs.NumericExpr),
	}
	if stringExpr != nil {
		node.Param = stringExpr.(*structs.StringExpr)
	}

	return node, nil
}

func (p *parser) callonTextExpr180() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr180(stack["opName"], stack["startIndex"], stack["endIndex"], stack["stringExpr"])
}

func (c *current) onTextExpr195(opName, mvLeft, mvRight, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}
	values := make([]*structs.StringExpr, 2)
	values[0] = mvLeft.(*structs.StringExpr)
	values[1] = mvRight.(*structs.StringExpr)

	node := &structs.TextExpr{
		Op:        opNameStr,
		ValueList: values,
	}

	if rest != nil {
		restSlice := rest.([]any)
		node.Delimiter = restSlice[1].(*structs.StringExpr)
	}

	return node, nil
}

func (p *parser) callonTextExpr195() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr195(stack["opName"], stack["mvLeft"], stack["mvRight"], stack["rest"])
}

func (c *current) onTextExpr211(opName, stringExpr, rest any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
	}

	node := &structs.TextExpr{
		Op:         opNameStr,
		Param:      stringExpr.(*structs.StringExpr),
		InferTypes: false, // default value
	}

	if rest != nil {
		restSlice := rest.([]any)
		inferTypes, err := transferUint8ToString(restSlice[1])
		if err != nil {
			return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
		}
		if inferTypes == "true" {
			node.InferTypes = true
		}
	}

	return node, nil
}

func (p *parser) callonTextExpr211() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr211(stack["opName"], stack["stringExpr"], stack["rest"])
}

func (c *current) onTextExpr227(field, threshold, match, delims any) (any, error) {
	textExpr := &structs.TextExpr{
		Op: "cluster",
	}

	cluster := &structs.Cluster{
		Field:     field.(string),
		Threshold: 0.8,
		Match:     "termlist",
	}

	if threshold != nil {
		slice := threshold.([]interface{})
		thresholdStr := slice[2].(string)
		val, err := strconv.ParseFloat(thresholdStr, 64)
		if err != nil {
			return nil, fmt.Errorf("Spl peg: TextExpr: invalid threshold: %v", thresholdStr)
		}
		cluster.Threshold = val
	}

	if match != nil {
		slice := match.([]interface{})
		matchStr, err := transferUint8ToString(slice[2])
		if err != nil {
			return nil, fmt.Errorf("Spl peg: TextExpr: %v", err)
		}
		cluster.Match = matchStr
	}

	if delims != nil {
		slice := delims.([]interface{})
		delimsStr := slice[2].(string)
		cluster.Delims = delimsStr
	}

	textExpr.Cluster = cluster

	return textExpr, nil
}

func (p *parser) callonTextExpr227() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr227(stack["field"], stack["threshold"], stack["match"], stack["delims"])
}

func (c *current) onTextExpr255(filter any) (any, error) {
	textExpr := &structs.TextExpr{
		Op: "getfields",
	}

	if filter != nil {
		textExpr.Param = filter.(*structs.StringExpr)
	}

	return textExpr, nil
}

func (p *parser) callonTextExpr255() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr255(stack["filter"])
}

func (c *current) onTextExpr263(valueExpr any) (any, error) {
	return &structs.TextExpr{
		Op:  "typeof",
		Val: valueExpr.(*structs.ValueExpr),
	}, nil
}

func (p *parser) callonTextExpr263() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr263(stack["valueExpr"])
}

func (c *current) onTextExpr270(val, regex, replacement any) (any, error) {
	return &structs.TextExpr{
		Op:        "replace",
		Val:       val.(*structs.ValueExpr),
		ValueList: []*structs.StringExpr{regex.(*structs.StringExpr), replacement.(*structs.StringExpr)},
	}, nil
}

func (p *parser) callonTextExpr270() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr270(stack["val"], stack["regex"], stack["replacement"])
}

func (c *current) onTextExpr283(val, format any) (any, error) {
	return &structs.TextExpr{
		Op:    "strftime",
		Val:   val.(*structs.ValueExpr),
		Param: format.(*structs.StringExpr),
	}, nil
}

func (p *parser) callonTextExpr283() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr283(stack["val"], stack["format"])
}

func (c *current) onTextExpr293(val, format any) (any, error) {
	return &structs.TextExpr{
		Op:    "strptime",
		Val:   val.(*structs.ValueExpr),
		Param: format.(*structs.StringExpr),
	}, nil
}

func (p *parser) callonTextExpr293() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextExpr293(stack["val"], stack["format"])
}

func (c *current) onQuotedPathString1(str any) (any, error) {
	return &SPathFieldExpr{
		PathValue:       removeQuotes(str),
		IsPathFieldName: false,
	}, nil
}

func (p *parser) callonQuotedPathString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedPathString1(stack["str"])
}

func (c *current) onUnquotedPathValue1(str any) (any, error) {
	return &SPathFieldExpr{
		PathValue:       removeQuotes(str),
		IsPathFieldName: true,
	}, nil
}

func (p *parser) callonUnquotedPathValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedPathValue1(stack["str"])
}

func (c *current) onStrToRemoveExpr1(strToRemove any) (any, error) {
	return strToRemove, nil
}

func (p *parser) callonStrToRemoveExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStrToRemoveExpr1(stack["strToRemove"])
}

func (c *current) onEvalFieldToRead2() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEvalFieldToRead2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalFieldToRead2()
}

func (c *current) onEvalFieldToRead8(field any) (any, error) {
	return field, nil
}

func (p *parser) callonEvalFieldToRead8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalFieldToRead8(stack["field"])
}

func (c *current) onWhereBlock1(condition any) (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			FilterRows: condition.(*structs.BoolExpr),
		},
	}

	return queryAgg, nil
}

func (p *parser) callonWhereBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereBlock1(stack["condition"])
}

func (c *current) onBoolExpr1(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonBoolExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExpr1(stack["expr"])
}

func (c *current) onBoolExprLevel41(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.BoolExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.BoolExpr{
			IsTerminal: false,
			BoolOp:     structs.BoolOpOr,
			LeftBool:   cur,
			RightBool:  opAndClause[1].(*structs.BoolExpr),
		}
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel41(stack["first"], stack["rest"])
}

func (c *current) onBoolExprLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.BoolExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.BoolExpr{
			IsTerminal: false,
			BoolOp:     structs.BoolOpAnd,
			LeftBool:   cur,
			RightBool:  opAndClause[1].(*structs.BoolExpr),
		}
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel31(stack["first"], stack["rest"])
}

func (c *current) onBoolExprLevel22(first any) (any, error) {
	cur := &structs.BoolExpr{
		IsTerminal: false,
		BoolOp:     structs.BoolOpNot,
		LeftBool:   first.(*structs.BoolExpr),
		RightBool:  nil,
	}

	return cur, nil
}

func (p *parser) callonBoolExprLevel22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel22(stack["first"])
}

func (c *current) onBoolExprLevel29(first any) (any, error) {
	return first, nil
}

func (p *parser) callonBoolExprLevel29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel29(stack["first"])
}

func (c *current) onBoolExprLevel12(first any) (any, error) {
	return first, nil
}

func (p *parser) callonBoolExprLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel12(stack["first"])
}

func (c *current) onBoolExprLevel18(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonBoolExprLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolExprLevel18(stack["expr"])
}

func (c *current) onEvalComparisonExpr2(op, value any) (any, error) {
	opNameStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: BoolExpr: %v", err)
	}
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  value.(*structs.ValueExpr),
		RightValue: nil,
		ValueOp:    opNameStr,
	}

	if opNameStr == "searchmatch" {
		valExpr := value.(*structs.ValueExpr)
		if valExpr.StringExpr == nil {
			return nil, fmt.Errorf("Spl peg: Searchmatch should only have string values as argument")
		}

		fieldsList, err := SearchMatchGetFields(valExpr.StringExpr.RawString)
		if err != nil {
			return nil, err
		}

		valExpr.StringExpr.StringExprMode = structs.SEMFieldList
		valExpr.StringExpr.FieldList = fieldsList
		expr.LeftValue = valExpr
	}

	return expr, nil
}

func (p *parser) callonEvalComparisonExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalComparisonExpr2(stack["op"], stack["value"])
}

func (c *current) onEvalComparisonExpr17(opName, leftValue, rightValue any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: BoolExpr: %v", err)
	}
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  leftValue.(*structs.ValueExpr),
		RightValue: rightValue.(*structs.ValueExpr),
		ValueOp:    opNameStr,
	}
	return expr, nil
}

func (p *parser) callonEvalComparisonExpr17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalComparisonExpr17(stack["opName"], stack["leftValue"], stack["rightValue"])
}

func (c *current) onEvalComparisonExpr32(left, valueToJudge, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ValueExpr, 1+len(restSlice))
	slice[0] = valueToJudge.(*structs.ValueExpr)

	for i := range restSlice {
		valueAtom := restSlice[i].([]any)
		slice[i+1] = valueAtom[1].(*structs.ValueExpr)
	}

	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  left.(*structs.ValueExpr),
		ValueList:  slice,
		ValueOp:    "in",
	}
	return expr, nil
}

func (p *parser) callonEvalComparisonExpr32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalComparisonExpr32(stack["left"], stack["valueToJudge"], stack["rest"])
}

func (c *current) onEvalComparisonExpr47(valueToJudge, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ValueExpr, len(restSlice))

	for i := range restSlice {
		valueAtom := restSlice[i].([]any)
		slice[i] = valueAtom[1].(*structs.ValueExpr)
	}

	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  valueToJudge.(*structs.ValueExpr),
		ValueList:  slice,
		ValueOp:    "in",
	}
	return expr, nil
}

func (p *parser) callonEvalComparisonExpr47() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEvalComparisonExpr47(stack["valueToJudge"], stack["rest"])
}

func (c *current) onBoolComparisonExpr1(left, op, right any) (any, error) {
	expr := &structs.BoolExpr{
		IsTerminal: true,
		LeftValue:  left.(*structs.ValueExpr),
		RightValue: right.(*structs.ValueExpr),
		ValueOp:    op.(string),
	}

	return expr, nil
}

func (p *parser) callonBoolComparisonExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolComparisonExpr1(stack["left"], stack["op"], stack["right"])
}

func (c *current) onValueExpr2(condition any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMConditionExpr,
		ConditionExpr: condition.(*structs.ConditionExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr2(stack["condition"])
}

func (c *current) onValueExpr5(condition any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMConditionExpr,
		ConditionExpr: condition.(*structs.ConditionExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr5(stack["condition"])
}

func (c *current) onValueExpr11(numeric any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMNumericExpr,
		NumericExpr:   numeric.(*structs.NumericExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr11(stack["numeric"])
}

func (c *current) onValueExpr14(str any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMStringExpr,
		StringExpr:    str.(*structs.StringExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr14(stack["str"])
}

func (c *current) onValueExpr17(str any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMStringExpr,
		StringExpr:    str.(*structs.StringExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr17(stack["str"])
}

func (c *current) onValueExpr23(boolean any) (any, error) {

	expr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolean.(*structs.BoolExpr),
	}

	return expr, nil
}

func (p *parser) callonValueExpr23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueExpr23(stack["boolean"])
}

func (c *current) onStringExpr2(text any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMTextExpr,
		TextExpr:       text.(*structs.TextExpr),
	}

	return expr, nil
}

func (p *parser) callonStringExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr2(stack["text"])
}

func (c *current) onStringExpr8(str any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMRawString,
		RawString:      removeQuotes(str),
	}

	return expr, nil
}

func (p *parser) callonStringExpr8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr8(stack["str"])
}

func (c *current) onStringExpr14(field any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMField,
		FieldName:      field.(string),
	}

	return expr, nil
}

func (p *parser) callonStringExpr14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr14(stack["field"])
}

func (c *current) onStringExpr26(concat any) (any, error) {
	expr := &structs.StringExpr{
		StringExprMode: structs.SEMConcatExpr,
		ConcatExpr:     concat.(*structs.ConcatExpr),
	}

	return expr, nil
}

func (p *parser) callonStringExpr26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpr26(stack["concat"])
}

func (c *current) onConcatExpr1(first, rest any) (any, error) {
	restSlice := rest.([]any)
	slice := make([]*structs.ConcatAtom, 1+len(restSlice))
	slice[0] = first.(*structs.ConcatAtom)

	for i := range restSlice {
		concatAndAtom := restSlice[i].([]any)
		slice[i+1] = concatAndAtom[1].(*structs.ConcatAtom)
	}

	expr := &structs.ConcatExpr{
		Atoms: slice,
	}

	return expr, nil
}

func (p *parser) callonConcatExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatExpr1(stack["first"], stack["rest"])
}

func (c *current) onConcatAtom2(text any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField:  false,
		Value:    "",
		TextExpr: text.(*structs.TextExpr),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom2(stack["text"])
}

func (c *current) onConcatAtom5(str any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: false,
		Value:   removeQuotes(str),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom5(stack["str"])
}

func (c *current) onConcatAtom8(number any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: false,
		Value:   number.(string),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom8(stack["number"])
}

func (c *current) onConcatAtom11(field any) (any, error) {
	atom := &structs.ConcatAtom{
		IsField: true,
		Value:   field.(string),
	}

	return atom, nil
}

func (p *parser) callonConcatAtom11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatAtom11(stack["field"])
}

func (c *current) onNumericExpr1(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExpr1(stack["expr"])
}

func (c *current) onNumericExprLevel31(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.NumericExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.NumericExpr{
			IsTerminal:      false,
			Op:              opAndClause[0].(string),
			Left:            cur,
			Right:           opAndClause[1].(*structs.NumericExpr),
			NumericExprMode: structs.NEMNumericExpr,
		}
	}

	return cur, nil
}

func (p *parser) callonNumericExprLevel31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel31(stack["first"], stack["rest"])
}

func (c *current) onNumericExprLevel21(first, rest any) (any, error) {
	if rest == nil {
		return first, nil
	}

	cur := first.(*structs.NumericExpr)
	for _, v := range rest.([]any) {
		opAndClause := v.([]any)
		cur = &structs.NumericExpr{
			IsTerminal:      false,
			Op:              opAndClause[0].(string),
			Left:            cur,
			Right:           opAndClause[1].(*structs.NumericExpr),
			NumericExprMode: structs.NEMNumericExpr,
		}
	}

	return cur, nil
}

func (p *parser) callonNumericExprLevel21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel21(stack["first"], stack["rest"])
}

func (c *current) onNumericParamExpr1(expr any) (any, error) {
	rightNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	return rightNumericExpr, nil
}

func (p *parser) callonNumericParamExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericParamExpr1(stack["expr"])
}

func (c *current) onNumericExprLevel12(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericExprLevel12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel12(stack["expr"])
}

func (c *current) onNumericExprLevel18(numericEvalExpr any) (any, error) {
	return numericEvalExpr, nil
}

func (p *parser) callonNumericExprLevel18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel18(stack["numericEvalExpr"])
}

func (c *current) onNumericExprLevel111(field any) (any, error) {
	expr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    true,
		Value:           field.(string),
		NumericExprMode: structs.NEMNumberField,
	}

	return expr, nil
}

func (p *parser) callonNumericExprLevel111() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel111(stack["field"])
}

func (c *current) onNumericExprLevel114(number any) (any, error) {
	expr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    false,
		Value:           number.(string),
		NumericExprMode: structs.NEMNumber,
	}

	return expr, nil
}

func (p *parser) callonNumericExprLevel114() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericExprLevel114(stack["number"])
}

func (c *current) onNumericEvalExpr2(opName, expr any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)
	node, err := createNumericExpr(opNameStr, leftNumericExpr, nil, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr2(stack["opName"], stack["expr"])
}

func (c *current) onNumericEvalExpr31(roundExpr, expr, roundPrecision any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	var rightNumericExpr *structs.NumericExpr
	if roundPrecision != nil {
		rightNumericExpr, ok = roundPrecision.(*structs.NumericExpr)
		if !ok {
			return nil, fmt.Errorf("Failed to assert roundPrecision as *structs.NumericExpr")
		}
	}

	node, err := createNumericExpr("round", leftNumericExpr, rightNumericExpr, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr31(stack["roundExpr"], stack["expr"], stack["roundPrecision"])
}

func (c *current) onNumericEvalExpr42(opName any) (any, error) {
	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)
	return &structs.NumericExpr{
		IsTerminal: true,
		Op:         opNameStr,
	}, nil
}

func (p *parser) callonNumericEvalExpr42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr42(stack["opName"])
}

func (c *current) onNumericEvalExpr52(stringExpr, baseExpr any) (any, error) {
	stringExprConverted, ok := stringExpr.(*structs.StringExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert stringExpr as *structs.StringExpr")
	}

	var baseExprConverted *structs.NumericExpr
	if baseExpr != nil {
		baseSlice, ok := baseExpr.([]interface{})
		if ok && len(baseSlice) > 1 {
			if base, ok := baseSlice[1].(*structs.NumericExpr); ok {
				baseExprConverted = base
			} else {
				return nil, fmt.Errorf("Failed to assert base as *structs.NumericExpr")
			}
		}
	}

	node := &structs.NumericExpr{
		IsTerminal:      false,
		Op:              "tonumber",
		Left:            nil,
		Right:           baseExprConverted,
		Val:             stringExprConverted,
		NumericExprMode: structs.NEMNumericExpr,
	}
	return node, nil
}

func (p *parser) callonNumericEvalExpr52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr52(stack["stringExpr"], stack["baseExpr"])
}

func (c *current) onNumericEvalExpr64(lenExpr, expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonNumericEvalExpr64() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr64(stack["lenExpr"], stack["expr"])
}

func (c *current) onNumericEvalExpr72(opName, expr, param any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)

	var rightNumericExpr *structs.NumericExpr
	if param == nil {
		return nil, fmt.Errorf("Function: %v 's param can not be nil", opNameStr)
	}
	rightNumericExpr, ok = param.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert param as *structs.NumericExpr")
	}

	node, err := createNumericExpr(opNameStr, leftNumericExpr, rightNumericExpr, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr72() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr72(stack["opName"], stack["expr"], stack["param"])
}

func (c *current) onNumericEvalExpr85(opName, expr, param any) (any, error) {
	leftNumericExpr, ok := expr.(*structs.NumericExpr)
	if !ok {
		return nil, fmt.Errorf("Failed to assert expr as *structs.NumericExpr")
	}

	//transfer []uint8 to string
	strData, ok := opName.([]byte)
	if !ok {
		return nil, fmt.Errorf("opName is not a []byte")
	}

	opNameStr := string(strData)

	var rightNumericExpr *structs.NumericExpr
	if param != nil {
		rightNumericExpr, ok = param.(*structs.NumericExpr)
		if !ok {
			return nil, fmt.Errorf("Failed to assert param as *structs.NumericExpr")
		}
	}

	node, err := createNumericExpr(opNameStr, leftNumericExpr, rightNumericExpr, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonNumericEvalExpr85() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr85(stack["opName"], stack["expr"], stack["param"])
}

func (c *current) onNumericEvalExpr96(opName, expr, specifier any) (any, error) {
	opNameStr, err := transferUint8ToString(opName)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: NumericExpr: %v", err)
	}
	node, err := createNumericExpr(opNameStr, expr.(*structs.NumericExpr), nil, structs.NEMNumericExpr)
	if err != nil {
		return nil, err
	}
	node.Val = specifier.(*structs.StringExpr)
	return node, nil
}

func (p *parser) callonNumericEvalExpr96() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumericEvalExpr96(stack["opName"], stack["expr"], stack["specifier"])
}

func (c *current) onLenExpr2(str any) (any, error) {

	leftNumericExpr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    false,
		Value:           str.(string),
		NumericExprMode: structs.NEMLenString,
	}

	node, err := createNumericExpr("len", leftNumericExpr, nil, structs.NEMLenString)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonLenExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLenExpr2(stack["str"])
}

func (c *current) onLenExpr8(field any) (any, error) {

	leftNumericExpr := &structs.NumericExpr{
		IsTerminal:      true,
		ValueIsField:    true,
		Value:           field.(string),
		NumericExprMode: structs.NEMLenField,
	}

	node, err := createNumericExpr("len", leftNumericExpr, nil, structs.NEMLenField)
	if err != nil {
		return nil, err
	}

	return node, nil
}

func (p *parser) callonLenExpr8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLenExpr8(stack["field"])
}

func (c *current) onHeadOptionNull1(boolVal any) (any, error) {
	optionArg := &HeadOptionArgs{
		argOption: "null",
		headExpr: &structs.HeadExpr{
			Null: boolVal.(bool),
		},
	}

	return optionArg, nil
}

func (p *parser) callonHeadOptionNull1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOptionNull1(stack["boolVal"])
}

func (c *current) onHeadOptionKeeplast1(boolVal any) (any, error) {
	optionArg := &HeadOptionArgs{
		argOption: "keeplast",
		headExpr: &structs.HeadExpr{
			Keeplast: boolVal.(bool),
		},
	}

	return optionArg, nil
}

func (p *parser) callonHeadOptionKeeplast1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOptionKeeplast1(stack["boolVal"])
}

func (c *current) onHeadOptionLimit1(intAsStr any) (any, error) {
	limit, err := strconv.ParseUint(intAsStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid limit (%v): %v", intAsStr.(string), err)
	}
	optionArg := &HeadOptionArgs{
		argOption: "limit",
		headExpr: &structs.HeadExpr{
			MaxRows: limit,
		},
	}

	return optionArg, nil
}

func (p *parser) callonHeadOptionLimit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOptionLimit1(stack["intAsStr"])
}

func (c *current) onHeadOptionExpr1(boolExpr any) (any, error) {
	optionArg := &HeadOptionArgs{
		argOption: "boolexpr",
		headExpr: &structs.HeadExpr{
			BoolExpr: boolExpr.(*structs.BoolExpr),
		},
	}

	return optionArg, nil
}

func (p *parser) callonHeadOptionExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOptionExpr1(stack["boolExpr"])
}

func (c *current) onHeadOption1(option any) (any, error) {
	return option, nil
}

func (p *parser) callonHeadOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOption1(stack["option"])
}

func (c *current) onHeadOptionList1(first, rest any) (any, error) {
	restSlice := rest.([]any)
	optionWasSpecified := make(map[string]bool)
	optionWasSpecified["null"] = false
	optionWasSpecified["keeplast"] = false
	optionWasSpecified["boolexpr"] = false
	optionWasSpecified["limit"] = false

	numOptions := 1 + len(restSlice)

	headExpr := &structs.HeadExpr{}

	for i := 0; i < numOptions; i++ {
		var headOptArg *HeadOptionArgs
		if i == 0 {
			headOptArg = first.(*HeadOptionArgs)
		} else {
			separator := restSlice[i-1].([]any)
			headOptArg = separator[1].(*HeadOptionArgs)
		}

		argOption := headOptArg.argOption
		val, exist := optionWasSpecified[argOption]
		if !exist {
			return nil, fmt.Errorf("Not a Valid HeadOption: %v", argOption)
		}
		if val {
			return nil, fmt.Errorf("Invalid Syntax, option: %v is already specified", argOption)
		}
		optionWasSpecified[argOption] = true

		switch argOption {
		case "null":
			headExpr.Null = headOptArg.headExpr.Null
		case "keeplast":
			headExpr.Keeplast = headOptArg.headExpr.Keeplast
		case "limit":
			headExpr.MaxRows = headOptArg.headExpr.MaxRows
		case "boolexpr":
			headExpr.BoolExpr = headOptArg.headExpr.BoolExpr
		default:
			return nil, fmt.Errorf("Not a Valid HeadOption: %v", argOption)
		}
	}

	isBoolExpr, _ := optionWasSpecified["boolexpr"]
	if !isBoolExpr {
		isNull, _ := optionWasSpecified["null"]
		if isNull {
			return nil, fmt.Errorf("Invalid Syntax, null option can only be present with condition boolean expression")
		}
		isKeeplast, _ := optionWasSpecified["keeplast"]
		if isKeeplast {
			return nil, fmt.Errorf("Invalid Syntax, keeplast option can only be present with condition boolean expression")
		}
	}

	return headExpr, nil
}

func (p *parser) callonHeadOptionList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOptionList1(stack["first"], stack["rest"])
}

func (c *current) onHeadBlock2(headExpr any) (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			HeadRequest: headExpr.(*structs.HeadExpr),
		},
	}

	return queryAgg, nil
}

func (p *parser) callonHeadBlock2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadBlock2(stack["headExpr"])
}

func (c *current) onHeadBlock8(intAsStr any) (any, error) {
	limit, err := strconv.ParseUint(intAsStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid limit (%v): %v", intAsStr.(string), err)
	}

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			HeadRequest: &structs.HeadExpr{
				MaxRows: limit,
			},
		},
	}

	return queryAgg, nil
}

func (p *parser) callonHeadBlock8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadBlock8(stack["intAsStr"])
}

func (c *current) onHeadBlock14() (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			HeadRequest: &structs.HeadExpr{
				MaxRows: uint64(10), // From https://docs.splunk.com/Documentation/Splunk/9.1.0/SearchReference/Head
			},
		},
	}

	return queryAgg, nil
}

func (p *parser) callonHeadBlock14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadBlock14()
}

func (c *current) onTailBlock2(intAsStr any) (any, error) {
	limit, err := strconv.ParseUint(intAsStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid limit (%v): %v", intAsStr.(string), err)
	}

	tExpr := &structs.TailExpr{
		TailRecords: make(map[string]map[string]interface{}, 0),
		TailRows:    limit,
	}

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			TailRequest: tExpr,
		},
	}

	return queryAgg, nil
}

func (p *parser) callonTailBlock2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailBlock2(stack["intAsStr"])
}

func (c *current) onTailBlock8() (any, error) {

	tExpr := &structs.TailExpr{
		TailRecords: make(map[string]map[string]interface{}, 0),
		TailRows:    uint64(10), // From https://docs.splunk.com/Documentation/SplunkCloud/9.1.2308/SearchReference/Tail
	}

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			TailRequest: tExpr,
		},
	}

	return queryAgg, nil
}

func (p *parser) callonTailBlock8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailBlock8()
}

func (c *current) onAggregationList1(first, rest any) (any, error) {
	// Convert `rest` to a slice. Each element of the slice will be a 2-element
	// slice where the first element is ", " and the second is an Aggregator.
	restSlice := rest.([]any)

	numAggs := 1 + len(restSlice)
	aggsSlice := make([]*aggregator, numAggs)
	aggsSlice[0] = first.(*aggregator)

	for i := 1; i < numAggs; i++ {
		separatorAndAgg := restSlice[i-1].([]any)
		aggsSlice[i] = separatorAndAgg[1].(*aggregator)
	}

	return aggsSlice, nil
}

func (p *parser) callonAggregationList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregationList1(stack["first"], stack["rest"])
}

func (c *current) onAggregator1(aggFunc, asField any) (any, error) {
	agg := &aggregator{}
	agg.measureAgg = aggFunc.(*structs.MeasureAggregator)

	if asField != nil {
		agg.renameOutputField = true
		agg.outputFieldNewName = asField.(string)
	}

	return agg, nil
}

func (p *parser) callonAggregator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregator1(stack["aggFunc"], stack["asField"])
}

func (c *current) onAggFunction1(agg any) (any, error) {
	return agg, nil
}

func (p *parser) callonAggFunction1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggFunction1(stack["agg"])
}

func (c *current) onAsField1(field any) (any, error) {
	fieldStr := field.(string)

	if strings.Contains(fieldStr, "*") {
		return nil, errors.New("The field specified in `AS` cannot contain wildcards")
	}

	if fieldStr[0] == '"' && fieldStr[len(fieldStr)-1] == '"' {
		fieldStr = fieldStr[1 : len(fieldStr)-1]
	}

	return fieldStr, nil
}

func (p *parser) callonAsField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsField1(stack["field"])
}

func (c *current) onAggCount2(boolExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Count,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggCount2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggCount2(stack["boolExpr"])
}

func (c *current) onAggCount12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Count,
	}

	return agg, nil
}

func (p *parser) callonAggCount12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggCount12(stack["field"])
}

func (c *current) onAggCount21() (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  "*",
		MeasureFunc: utils.Count,
	}

	return agg, nil
}

func (p *parser) callonAggCount21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggCount21()
}

func (c *current) onAggDistinctCount2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Cardinality,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggDistinctCount2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggDistinctCount2(stack["valueExpr"])
}

func (c *current) onAggDistinctCount12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Cardinality,
	}

	return agg, nil
}

func (p *parser) callonAggDistinctCount12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggDistinctCount12(stack["field"])
}

func (c *current) onAggAvg2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Avg,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggAvg2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAvg2(stack["boolComparisonExpr"])
}

func (c *current) onAggAvg12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Avg,
	}

	return agg, nil
}

func (p *parser) callonAggAvg12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAvg12(stack["field"])
}

func (c *current) onAggMin2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Min,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggMin2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMin2(stack["boolComparisonExpr"])
}

func (c *current) onAggMin12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Min,
	}

	return agg, nil
}

func (p *parser) callonAggMin12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMin12(stack["field"])
}

func (c *current) onAggMax2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Max,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggMax2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMax2(stack["boolComparisonExpr"])
}

func (c *current) onAggMax12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Max,
	}

	return agg, nil
}

func (p *parser) callonAggMax12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMax12(stack["field"])
}

func (c *current) onAggRange2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Range,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggRange2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRange2(stack["boolComparisonExpr"])
}

func (c *current) onAggRange12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Range,
	}

	return agg, nil
}

func (p *parser) callonAggRange12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRange12(stack["field"])
}

func (c *current) onAggSum2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Sum,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggSum2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSum2(stack["boolComparisonExpr"])
}

func (c *current) onAggSum12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Sum,
	}

	return agg, nil
}

func (p *parser) callonAggSum12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSum12(stack["field"])
}

func (c *current) onAggEstdc2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Estdc,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggEstdc2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEstdc2(stack["boolComparisonExpr"])
}

func (c *current) onAggEstdc12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Estdc,
	}

	return agg, nil
}

func (p *parser) callonAggEstdc12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEstdc12(stack["field"])
}

func (c *current) onAggEstdcError2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.EstdcError,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggEstdcError2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEstdcError2(stack["boolComparisonExpr"])
}

func (c *current) onAggEstdcError12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.EstdcError,
	}

	return agg, nil
}

func (p *parser) callonAggEstdcError12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEstdcError12(stack["field"])
}

func (c *current) onAggExactPerc2(numStr, boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.ExactPerc,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
		Param:           numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggExactPerc2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggExactPerc2(stack["numStr"], stack["boolComparisonExpr"])
}

func (c *current) onAggExactPerc16(numStr, field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.ExactPerc,
		Param:       numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggExactPerc16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggExactPerc16(stack["numStr"], stack["field"])
}

func (c *current) onAggPerc2(numStr, boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Perc,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
		Param:           numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggPerc2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggPerc2(stack["numStr"], stack["boolComparisonExpr"])
}

func (c *current) onAggPerc16(numStr, field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Perc,
		Param:       numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggPerc16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggPerc16(stack["numStr"], stack["field"])
}

func (c *current) onAggUpperPerc2(numStr, boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.UpperPerc,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
		Param:           numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggUpperPerc2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggUpperPerc2(stack["numStr"], stack["boolComparisonExpr"])
}

func (c *current) onAggUpperPerc16(numStr, field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.UpperPerc,
		Param:       numStr.(string),
	}

	return agg, nil
}

func (p *parser) callonAggUpperPerc16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggUpperPerc16(stack["numStr"], stack["field"])
}

func (c *current) onAggMedian2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Median,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggMedian2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMedian2(stack["boolComparisonExpr"])
}

func (c *current) onAggMedian12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Median,
	}

	return agg, nil
}

func (p *parser) callonAggMedian12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMedian12(stack["field"])
}

func (c *current) onAggMode2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Mode,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggMode2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMode2(stack["boolComparisonExpr"])
}

func (c *current) onAggMode12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Mode,
	}

	return agg, nil
}

func (p *parser) callonAggMode12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggMode12(stack["field"])
}

func (c *current) onAggStdev2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Stdev,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggStdev2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggStdev2(stack["boolComparisonExpr"])
}

func (c *current) onAggStdev12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Stdev,
	}

	return agg, nil
}

func (p *parser) callonAggStdev12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggStdev12(stack["field"])
}

func (c *current) onAggStdevp2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Stdevp,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggStdevp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggStdevp2(stack["boolComparisonExpr"])
}

func (c *current) onAggStdevp12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Stdevp,
	}

	return agg, nil
}

func (p *parser) callonAggStdevp12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggStdevp12(stack["field"])
}

func (c *current) onAggSumsq2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Sumsq,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggSumsq2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSumsq2(stack["boolComparisonExpr"])
}

func (c *current) onAggSumsq12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Sumsq,
	}

	return agg, nil
}

func (p *parser) callonAggSumsq12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggSumsq12(stack["field"])
}

func (c *current) onAggVar2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Var,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggVar2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggVar2(stack["boolComparisonExpr"])
}

func (c *current) onAggVar12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Var,
	}

	return agg, nil
}

func (p *parser) callonAggVar12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggVar12(stack["field"])
}

func (c *current) onAggVarp2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Varp,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggVarp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggVarp2(stack["boolComparisonExpr"])
}

func (c *current) onAggVarp12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Varp,
	}

	return agg, nil
}

func (p *parser) callonAggVarp12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggVarp12(stack["field"])
}

func (c *current) onAggFirst2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.First,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggFirst2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggFirst2(stack["boolComparisonExpr"])
}

func (c *current) onAggFirst12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.First,
	}

	return agg, nil
}

func (p *parser) callonAggFirst12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggFirst12(stack["field"])
}

func (c *current) onAggLast2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Last,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggLast2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLast2(stack["boolComparisonExpr"])
}

func (c *current) onAggLast12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Last,
	}

	return agg, nil
}

func (p *parser) callonAggLast12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLast12(stack["field"])
}

func (c *current) onAggList2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.List,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggList2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggList2(stack["valueExpr"])
}

func (c *current) onAggList10(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.List,
	}

	return agg, nil
}

func (p *parser) callonAggList10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggList10(stack["field"])
}

func (c *current) onAggEarliest2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Earliest,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggEarliest2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEarliest2(stack["boolComparisonExpr"])
}

func (c *current) onAggEarliest12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Earliest,
	}

	return agg, nil
}

func (p *parser) callonAggEarliest12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEarliest12(stack["field"])
}

func (c *current) onAggEarliestTime2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.EarliestTime,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggEarliestTime2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEarliestTime2(stack["boolComparisonExpr"])
}

func (c *current) onAggEarliestTime12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.EarliestTime,
	}

	return agg, nil
}

func (p *parser) callonAggEarliestTime12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggEarliestTime12(stack["field"])
}

func (c *current) onAggLatest2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Latest,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggLatest2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLatest2(stack["boolComparisonExpr"])
}

func (c *current) onAggLatest12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Latest,
	}

	return agg, nil
}

func (p *parser) callonAggLatest12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLatest12(stack["field"])
}

func (c *current) onAggLatestTime2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.LatestTime,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggLatestTime2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLatestTime2(stack["boolComparisonExpr"])
}

func (c *current) onAggLatestTime12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.LatestTime,
	}

	return agg, nil
}

func (p *parser) callonAggLatestTime12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggLatestTime12(stack["field"])
}

func (c *current) onAggRate2(boolComparisonExpr any) (any, error) {
	valueExpr := &structs.ValueExpr{
		ValueExprMode: structs.VEMBooleanExpr,
		BooleanExpr:   boolComparisonExpr.(*structs.BoolExpr),
	}

	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.StatsRate,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr,
	}

	return agg, nil
}

func (p *parser) callonAggRate2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRate2(stack["boolComparisonExpr"])
}

func (c *current) onAggRate12(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.StatsRate,
	}

	return agg, nil
}

func (p *parser) callonAggRate12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggRate12(stack["field"])
}

func (c *current) onAggValues2(valueExpr any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:      "",
		MeasureFunc:     utils.Values,
		StrEnc:          string(c.text),
		ValueColRequest: valueExpr.(*structs.ValueExpr),
	}

	return agg, nil
}

func (p *parser) callonAggValues2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggValues2(stack["valueExpr"])
}

func (c *current) onAggValues10(field any) (any, error) {
	agg := &structs.MeasureAggregator{
		MeasureCol:  field.(string),
		MeasureFunc: utils.Values,
	}

	return agg, nil
}

func (p *parser) callonAggValues10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggValues10(stack["field"])
}

func (c *current) onFieldWithNumberValue1(keyValuePair any) (any, error) {
	return keyValuePair, nil
}

func (p *parser) callonFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithNumberValue1(stack["keyValuePair"])
}

func (c *current) onNamedFieldWithNumberValue1(key, op, value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     op.(string),
			Field:  key.(string),
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonNamedFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedFieldWithNumberValue1(stack["key"], stack["op"], stack["value"])
}

func (c *current) onUnnamedFieldWithNumberValue1(value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     "=",
			Field:  "*",
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonUnnamedFieldWithNumberValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnnamedFieldWithNumberValue1(stack["value"])
}

func (c *current) onFieldWithBooleanValue1(key, op, value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     op.(string),
			Field:  key.(string),
			Values: value,
		},
	}

	return node, nil
}

func (p *parser) callonFieldWithBooleanValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithBooleanValue1(stack["key"], stack["op"], stack["value"])
}

func (c *current) onFieldWithStringValue1(keyValuePair any) (any, error) {
	return keyValuePair, nil
}

func (p *parser) callonFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithStringValue1(stack["keyValuePair"])
}

func (c *current) onNamedFieldWithStringValue1(key, op, value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     op.(string),
			Field:  key.(string),
			Values: value,
		},
	}
	return node, nil
}

func (p *parser) callonNamedFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedFieldWithStringValue1(stack["key"], stack["op"], stack["value"])
}

func (c *current) onUnnamedFieldWithStringValue1(value any) (any, error) {
	node := &ast.Node{
		NodeType: ast.NodeTerminal,
		Comparison: ast.Comparison{
			Op:     "=",
			Field:  "*",
			Values: value,
		},
	}
	return node, nil
}

func (p *parser) callonUnnamedFieldWithStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnnamedFieldWithStringValue1(stack["value"])
}

func (c *current) onFieldNameList1(first, rest any) (any, error) {
	// Convert `rest` to a slice. Each element of the slice will be a 2-element
	// slice where the first element is ", " and the second is a FieldName.
	restSlice := rest.([]any)

	numFieldNames := 1 + len(restSlice)
	fields := make([]string, numFieldNames)
	fields[0] = first.(string)

	for i := 1; i < numFieldNames; i++ {
		separatorAndField := restSlice[i-1].([]any)
		fields[i] = separatorAndField[1].(string)
	}

	return fields, nil
}

func (p *parser) callonFieldNameList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldNameList1(stack["first"], stack["rest"])
}

func (c *current) onEarliestAndLatest1(earliestTime, latestTime any) (any, error) {
	var startEpoch int64 = 0
	var endEpoch int64 = 0
	var err error

	earliestTimeModifier := earliestTime.(ast.TimeModifier)
	latestTimeModifier := latestTime.(ast.TimeModifier)

	currTime := time.Now()
	startEpoch, err = CalculateRelativeTime(earliestTimeModifier, currTime)
	if err != nil {
		return nil, err
	}

	endEpoch, err = CalculateRelativeTime(latestTimeModifier, currTime)
	if err != nil {
		return nil, err
	}

	// Create AST node
	node := &ast.Node{
		NodeType: ast.TimeModifierNode,
		TimeModifiers: &ast.TimeModifiers{
			StartEpoch: uint64(startEpoch),
			EndEpoch:   uint64(endEpoch),
		},
	}

	return node, nil
}

func (p *parser) callonEarliestAndLatest1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEarliestAndLatest1(stack["earliestTime"], stack["latestTime"])
}

func (c *current) onEarliestOnly1(earliestTime any) (any, error) {
	var startEpoch int64 = 0
	var err error

	earliestTimeModifier := earliestTime.(ast.TimeModifier)

	startEpoch, err = CalculateRelativeTime(earliestTimeModifier, time.Now())
	if err != nil {
		return nil, err
	}

	// Create AST node
	node := &ast.Node{
		NodeType: ast.TimeModifierNode,
		TimeModifiers: &ast.TimeModifiers{
			StartEpoch: uint64(startEpoch),
			EndEpoch:   uint64(time.Now().UnixMilli()),
		},
	}

	return node, nil
}

func (p *parser) callonEarliestOnly1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEarliestOnly1(stack["earliestTime"])
}

func (c *current) onRelIntegerAsString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonRelIntegerAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelIntegerAsString1()
}

func (c *current) onWeekSnap1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonWeekSnap1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeekSnap1()
}

func (c *current) onRelTimeUnit1(timeUnit any) (any, error) {
	return strconv.Itoa(int(timeUnit.(utils.TimeUnit))), nil
}

func (p *parser) callonRelTimeUnit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelTimeUnit1(stack["timeUnit"])
}

func (c *current) onSnap1(snap any) (any, error) {
	return snap.(string), nil
}

func (p *parser) callonSnap1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSnap1(stack["snap"])
}

func (c *current) onOffset1(off, tuOff any) (any, error) {
	var offsetNum int64 = 0
	var err error
	offStr := off.(string)
	if offStr == "+" {
		offsetNum = 1
	} else if offStr == "-" {
		offsetNum = -1
	} else {
		offsetNum, err = strconv.ParseInt(offStr, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("Invalid Relative Time Format time unit value: (%v): , err: %v", offStr, err)
		}
	}

	timeUnit, err := strconv.Atoi(tuOff.(string))
	if err != nil {
		return nil, fmt.Errorf("Invalid Time Unit value: (%v), err: %v", tuOff.(string), err)
	}

	relTimeOffset := ast.RelativeTimeOffset{
		Offset:   offsetNum,
		TimeUnit: utils.TimeUnit(timeUnit),
	}

	return relTimeOffset, nil
}

func (p *parser) callonOffset1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOffset1(stack["off"], stack["tuOff"])
}

func (c *current) onRelativeTimestamp1(defaultTime, offset, snapParam any) (any, error) {

	if defaultTime != nil {
		if offset != nil || snapParam != nil {
			return nil, fmt.Errorf("Invalid Relative timestamp cannot combine default with offset or snap")
		}
		defTime, err := transferUint8ToString(defaultTime)
		if err != nil {
			return nil, fmt.Errorf("Spl peg: Relative timestamp for default time, err: %v", err)
		}

		timeModifier := ast.TimeModifier{
			AbsoluteTime: defTime,
		}

		return timeModifier, nil
	}

	if offset == nil && snapParam == nil {
		return nil, fmt.Errorf("Invalid Relative Time Format: Need either offset or snap param")
	}

	relTimeOffset := ast.RelativeTimeOffset{}
	snap := ""
	if snapParam != nil {
		snap = snapParam.(string)
	}

	if offset != nil {
		relTimeOffset.Offset = offset.(ast.RelativeTimeOffset).Offset
		relTimeOffset.TimeUnit = offset.(ast.RelativeTimeOffset).TimeUnit
	}

	timeModifier := ast.TimeModifier{
		RelativeTime: ast.RelativeTimeModifier{
			RelativeTimeOffset: relTimeOffset,
			Snap:               snap,
		},
	}

	return timeModifier, nil
}

func (p *parser) callonRelativeTimestamp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeTimestamp1(stack["defaultTime"], stack["offset"], stack["snapParam"])
}

func (c *current) onAbsoluteTimestamp1() (any, error) {
	relTimeModifier := ast.TimeModifier{
		AbsoluteTime: string(c.text),
	}
	return relTimeModifier, nil
}

func (p *parser) callonAbsoluteTimestamp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAbsoluteTimestamp1()
}

func (c *current) onFieldName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFieldName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldName1()
}

func (c *current) onFieldNameStartWith_1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFieldNameStartWith_1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldNameStartWith_1()
}

func (c *current) onString1(str any) (any, error) {
	return str, nil
}

func (p *parser) callonString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onString1(stack["str"])
}

func (c *current) onQuotedString1() (any, error) {
	// The returned string has quotes as the first and last character.
	return string(c.text), nil
}

func (p *parser) callonQuotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString1()
}

func (c *current) onUnquotedString1() (any, error) {
	// Return the string wrapped in quotes.
	str := "\"" + string(c.text) + "\""
	return str, nil
}

func (p *parser) callonUnquotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedString1()
}

func (c *current) onUnquotedStringWithTemplateWildCard1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUnquotedStringWithTemplateWildCard1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedStringWithTemplateWildCard1()
}

func (c *current) onBoolean1() (any, error) {
	boolValue, _ := strconv.ParseBool(string(c.text))
	return boolValue, nil
}

func (p *parser) callonBoolean1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolean1()
}

func (c *current) onRenamePattern1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonRenamePattern1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenamePattern1()
}

func (c *current) onNumber1(number any) (any, error) {
	return json.Number(number.(string)), nil
}

func (p *parser) callonNumber1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1(stack["number"])
}

func (c *current) onNumberAsString1(number any) (any, error) {
	return number, nil
}

func (p *parser) callonNumberAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumberAsString1(stack["number"])
}

func (c *current) onFloatAsString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatAsString1()
}

func (c *current) onIntegerAsString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIntegerAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerAsString1()
}

func (c *current) onPositiveIntegerAsString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonPositiveIntegerAsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositiveIntegerAsString1()
}

func (c *current) onEqualityOperator1(op any) (any, error) {
	opStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: EqualityOperator: %v", err)
	}
	return opStr, nil
}

func (p *parser) callonEqualityOperator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator1(stack["op"])
}

func (c *current) onInequalityOperator1(op any) (any, error) {
	opStr, err := transferUint8ToString(op)
	if err != nil {
		return nil, fmt.Errorf("Spl peg: InequalityOperator: %v", err)
	}
	return opStr, nil
}

func (p *parser) callonInequalityOperator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInequalityOperator1(stack["op"])
}

func (c *current) onEqualityOrInequality2(op any) (any, error) {
	return op, nil
}

func (p *parser) callonEqualityOrInequality2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOrInequality2(stack["op"])
}

func (c *current) onEqualityOrInequality5(op any) (any, error) {
	return op, nil
}

func (p *parser) callonEqualityOrInequality5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOrInequality5(stack["op"])
}

func (c *current) onOpPlus1() (any, error) {
	return "+", nil
}

func (p *parser) callonOpPlus1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpPlus1()
}

func (c *current) onOpMinus1() (any, error) {
	return "-", nil
}

func (p *parser) callonOpMinus1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpMinus1()
}

func (c *current) onOpMul1() (any, error) {
	return "*", nil
}

func (p *parser) callonOpMul1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpMul1()
}

func (c *current) onOpDiv1() (any, error) {
	return "/", nil
}

func (p *parser) callonOpDiv1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpDiv1()
}

func (c *current) onSecond1() (any, error) {
	return utils.TMSecond, nil
}

func (p *parser) callonSecond1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSecond1()
}

func (c *current) onMinute1() (any, error) {
	return utils.TMMinute, nil
}

func (p *parser) callonMinute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinute1()
}

func (c *current) onHour1() (any, error) {
	return utils.TMHour, nil
}

func (p *parser) callonHour1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHour1()
}

func (c *current) onDay1() (any, error) {
	return utils.TMDay, nil
}

func (p *parser) callonDay1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDay1()
}

func (c *current) onWeek1() (any, error) {
	return utils.TMWeek, nil
}

func (p *parser) callonWeek1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeek1()
}

func (c *current) onMonth1() (any, error) {
	return utils.TMMonth, nil
}

func (p *parser) callonMonth1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMonth1()
}

func (c *current) onQuarter1() (any, error) {
	return utils.TMQuarter, nil
}

func (p *parser) callonQuarter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuarter1()
}

func (c *current) onYear1() (any, error) {
	return utils.TMYear, nil
}

func (p *parser) callonYear1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYear1()
}

func (c *current) onSubseconds1() (any, error) {
	timeUnit, err := utils.ConvertSubseconds(string(c.text))
	if err != nil {
		return nil, fmt.Errorf("Spl peg: Subseconds: %v", err)
	}
	return timeUnit, nil
}

func (p *parser) callonSubseconds1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubseconds1()
}

func (c *current) onTransactionBlock1(txnOptions any) (any, error) {
	queryAgg := &structs.QueryAggregators{
		PipeCommandType:      structs.TransactionType,
		TransactionArguments: txnOptions.(*structs.TransactionArguments),
	}
	return queryAgg, nil
}

func (p *parser) callonTransactionBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionBlock1(stack["txnOptions"])
}

func (c *current) onTransactionOptions1(txnOptions any) (any, error) {

	transactionRequest := &structs.TransactionArguments{}

	if txnOptions != nil {
		txnArgs := txnOptions.(*TxnArgs).arguments
		transactionRequest.Fields = txnArgs.Fields
		transactionRequest.StartsWith = txnArgs.StartsWith
		transactionRequest.EndsWith = txnArgs.EndsWith
	}

	return transactionRequest, nil
}

func (p *parser) callonTransactionOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionOptions1(stack["txnOptions"])
}

func (c *current) onTransactionDefinitionOptionsList1(first, rest any) (any, error) {

	restSlice := rest.([]any)
	txnArgs := &TxnArgs{
		argOption: "txn-definition",
		arguments: &structs.TransactionArguments{},
	}

	numArgs := 1 + len(restSlice)

	for i := 0; i < numArgs; i++ {
		var txnArg *TxnArgs
		if i == 0 {
			txnArg = first.(*TxnArgs)
		} else {
			separatorAndArg := restSlice[i-1].([]any)
			txnArg = separatorAndArg[1].(*TxnArgs)
		}
		argOption := txnArg.argOption

		switch argOption {
		case "fields":
			txnArgs.arguments.Fields = txnArg.arguments.Fields
		case "startswith":
			txnArgs.arguments.StartsWith = txnArg.arguments.StartsWith
		case "endswith":
			txnArgs.arguments.EndsWith = txnArg.arguments.EndsWith
		default:
			return nil, fmt.Errorf("Not a Valid Transaction Argument option")
		}
	}

	return txnArgs, nil
}

func (p *parser) callonTransactionDefinitionOptionsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionDefinitionOptionsList1(stack["first"], stack["rest"])
}

func (c *current) onTransactionDefinitionOption1(option any) (any, error) {
	return option, nil
}

func (p *parser) callonTransactionDefinitionOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionDefinitionOption1(stack["option"])
}

func (c *current) onSpaceSeparatedFieldNameList1(first, rest any) (any, error) {
	var fields []string
	fields = append(fields, first.(string))
	for _, r := range rest.([]any) {
		// Extracting the field name from the tuple (SPACE, FieldName)
		fields = append(fields, r.([]any)[1].(string))
	}

	txnArg := &TxnArgs{
		argOption: "fields",
		arguments: &structs.TransactionArguments{
			Fields: fields,
		},
	}

	return txnArg, nil
}

func (p *parser) callonSpaceSeparatedFieldNameList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpaceSeparatedFieldNameList1(stack["first"], stack["rest"])
}

func (c *current) onStartsWithOption1(strExpr any) (any, error) {
	txnArg := &TxnArgs{
		argOption: "startswith",
		arguments: &structs.TransactionArguments{
			StartsWith: strExpr.(*structs.FilterStringExpr),
		},
	}
	return txnArg, nil
}

func (p *parser) callonStartsWithOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStartsWithOption1(stack["strExpr"])
}

func (c *current) onEndsWithOption1(strExpr any) (any, error) {
	txnArg := &TxnArgs{
		argOption: "endswith",
		arguments: &structs.TransactionArguments{
			EndsWith: strExpr.(*structs.FilterStringExpr),
		},
	}
	return txnArg, nil
}

func (p *parser) callonEndsWithOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEndsWithOption1(stack["strExpr"])
}

func (c *current) onTransactionFilterString1(strExpr any) (any, error) {
	return strExpr, nil
}

func (p *parser) callonTransactionFilterString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionFilterString1(stack["strExpr"])
}

func (c *current) onTransactionQuotedString1(str any) (any, error) {
	return str, nil
}

func (p *parser) callonTransactionQuotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionQuotedString1(stack["str"])
}

func (c *current) onTransactionQuotedStringSearchExpr1(searchClause any) (any, error) {
	filterStrExpr := &structs.FilterStringExpr{
		SearchNode: searchClause.(*ast.Node),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionQuotedStringSearchExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionQuotedStringSearchExpr1(stack["searchClause"])
}

func (c *current) onQuotedStringNoOp1() (any, error) {
	// The returned string has quotes as the first and last character.
	return string(c.text), nil
}

func (p *parser) callonQuotedStringNoOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedStringNoOp1()
}

func (c *current) onTransactionQuotedStringValue1(str any) (any, error) {
	filterStrExpr := &structs.FilterStringExpr{
		StringValue: removeQuotes(str.(string)),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionQuotedStringValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionQuotedStringValue1(stack["str"])
}

func (c *current) onTransactionSearch1(expr any) (any, error) {

	filterStrExpr := &structs.FilterStringExpr{
		SearchNode: expr.(*ast.Node),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionSearch1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionSearch1(stack["expr"])
}

func (c *current) onTransactionEval1(condition any) (any, error) {
	filterStrExpr := &structs.FilterStringExpr{
		EvalBoolExpr: condition.(*structs.BoolExpr),
	}

	return filterStrExpr, nil
}

func (p *parser) callonTransactionEval1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransactionEval1(stack["condition"])
}

func (c *current) onMultiValueBlock1(mvQueryAggNode any) (any, error) {
	return mvQueryAggNode, nil
}

func (p *parser) callonMultiValueBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiValueBlock1(stack["mvQueryAggNode"])
}

func (c *current) onMakeMVBlock1(mvColOptionExpr, field any) (any, error) {
	var mvColExpr *structs.MultiValueColLetRequest

	if mvColOptionExpr != nil {
		mvColExpr = mvColOptionExpr.(*structs.MultiValueColLetRequest)
	} else {
		mvColExpr = &structs.MultiValueColLetRequest{}
	}

	mvColExpr.Command = "makemv"
	mvColExpr.ColName = field.(string)

	if mvColExpr.DelimiterString == "" {
		mvColExpr.DelimiterString = " " // default single space
	}

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: &structs.LetColumnsRequest{
				MultiValueColRequest: mvColExpr,
			},
		},
	}

	return queryAgg, nil
}

func (p *parser) callonMakeMVBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMakeMVBlock1(stack["mvColOptionExpr"], stack["field"])
}

func (c *current) onMVBlockOptionsList1(first, rest any) (any, error) {
	restSlice := rest.([]any)

	numOptions := 1 + len(restSlice)

	mvColExpr := &structs.MultiValueColLetRequest{}

	for i := 0; i < numOptions; i++ {
		var currMvColExpr *MultiValueColOptionArgs
		if i == 0 {
			currMvColExpr = first.(*MultiValueColOptionArgs)
		} else {
			separator := restSlice[i-1].([]any)
			currMvColExpr = separator[1].(*MultiValueColOptionArgs)
		}

		argOption := currMvColExpr.argOption

		switch argOption {
		case "delimiter":
			mvColExpr.DelimiterString = currMvColExpr.mvColExpr.DelimiterString
			mvColExpr.IsRegex = currMvColExpr.mvColExpr.IsRegex
		case "allowempty":
			mvColExpr.AllowEmpty = currMvColExpr.mvColExpr.AllowEmpty
		case "setsv":
			mvColExpr.Setsv = currMvColExpr.mvColExpr.Setsv
		default:
			return nil, fmt.Errorf("Not a Valid MVBlockOption: %v", argOption)
		}
	}

	return mvColExpr, nil
}

func (p *parser) callonMVBlockOptionsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMVBlockOptionsList1(stack["first"], stack["rest"])
}

func (c *current) onMVBlockOption1(option any) (any, error) {
	return option, nil
}

func (p *parser) callonMVBlockOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMVBlockOption1(stack["option"])
}

func (c *current) onDelimOption1(delimExpr any) (any, error) {
	return delimExpr, nil
}

func (p *parser) callonDelimOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimOption1(stack["delimExpr"])
}

func (c *current) onStringDelimiter1(str any) (any, error) {
	mvColOptionArgs := &MultiValueColOptionArgs{
		argOption: "delimiter",
		mvColExpr: &structs.MultiValueColLetRequest{
			DelimiterString: removeQuotes(str),
		},
	}

	return mvColOptionArgs, nil
}

func (p *parser) callonStringDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringDelimiter1(stack["str"])
}

func (c *current) onRegexDelimiter1(str any) (any, error) {
	pattern := removeQuotes(str)
	_, err := regexp.Compile(pattern)
	if err != nil {
		return nil, fmt.Errorf("Error parsing tokenizer regular expression: %v. Error: %v", pattern, err)
	}

	mvColOptionArgs := &MultiValueColOptionArgs{
		argOption: "delimiter",
		mvColExpr: &structs.MultiValueColLetRequest{
			DelimiterString: pattern,
			IsRegex:         true,
		},
	}

	return mvColOptionArgs, nil
}

func (p *parser) callonRegexDelimiter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexDelimiter1(stack["str"])
}

func (c *current) onAllowEmptyOption1(boolVal any) (any, error) {

	mvColOptionArgs := &MultiValueColOptionArgs{
		argOption: "allowempty",
		mvColExpr: &structs.MultiValueColLetRequest{
			AllowEmpty: boolVal.(bool),
		},
	}

	return mvColOptionArgs, nil
}

func (p *parser) callonAllowEmptyOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAllowEmptyOption1(stack["boolVal"])
}

func (c *current) onSetSvOption1(boolVal any) (any, error) {
	mvColOptionArgs := &MultiValueColOptionArgs{
		argOption: "setsv",
		mvColExpr: &structs.MultiValueColLetRequest{
			Setsv: boolVal.(bool),
		},
	}

	return mvColOptionArgs, nil
}

func (p *parser) callonSetSvOption1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSetSvOption1(stack["boolVal"])
}

func (c *current) onSPathBlock1(spathExpr any) (any, error) {
	if spathExpr == nil {
		return createSPathExpr("", "", "")
	}
	return spathExpr, nil
}

func (p *parser) callonSPathBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSPathBlock1(stack["spathExpr"])
}

func (c *current) onSPathArgumentsList1(first, rest any) (any, error) {

	restSlice := rest.([]any)

	inputField, pathField, outputField := "", "", ""

	numArgs := 1 + len(restSlice)

	for i := 0; i < numArgs; i++ {
		var arg string
		if i == 0 {
			arg = first.(string)
		} else {
			separator := restSlice[i-1].([]any)
			arg = separator[1].(string)
		}

		switch {
		case strings.HasPrefix(arg, "input="):
			inputField = strings.TrimPrefix(arg, "input=")
		case strings.HasPrefix(arg, "output="):
			outputField = strings.TrimPrefix(arg, "output=")
		case strings.HasPrefix(arg, "path="):
			pathField = strings.TrimPrefix(arg, "path=")
		default:
			return nil, fmt.Errorf("SPathArguments: Invalid Spath Argument: %v", arg)
		}
	}

	return createSPathExpr(inputField, pathField, outputField)
}

func (p *parser) callonSPathArgumentsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSPathArgumentsList1(stack["first"], stack["rest"])
}

func (c *current) onSPathArgument1(arg any) (any, error) {
	return arg, nil
}

func (p *parser) callonSPathArgument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSPathArgument1(stack["arg"])
}

func (c *current) onInputField1(field any) (any, error) {
	return "input=" + field.(string), nil
}

func (p *parser) callonInputField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInputField1(stack["field"])
}

func (c *current) onOutputField1(field any) (any, error) {
	return "output=" + field.(string), nil
}

func (p *parser) callonOutputField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOutputField1(stack["field"])
}

func (c *current) onPathField1() (any, error) {
	pathField := string(c.text)
	if strings.HasPrefix(pathField, "path") {
		pathField = strings.TrimSpace(strings.TrimPrefix(pathField, "path="))
		pathField = strings.TrimSpace(strings.TrimPrefix(pathField, "path ="))
		if pathField != "" && pathField[0] == '"' {
			pathField = removeQuotes(pathField)
		}
	}
	return "path=" + pathField, nil
}

func (p *parser) callonPathField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPathField1()
}

func (c *current) onFormatBlock1(formatArgExpr any) (any, error) {
	var formatResultExpr *structs.FormatResultsRequest

	if formatArgExpr != nil {
		formatResultExpr = formatArgExpr.(*structs.FormatResultsRequest)
	} else {
		formatResultExpr = getDefaultFormatResultsExpr()
	}

	queryAgg := &structs.QueryAggregators{
		PipeCommandType: structs.OutputTransformType,
		OutputTransforms: &structs.OutputTransforms{
			LetColumns: &structs.LetColumnsRequest{
				NewColName:    "search",
				FormatResults: formatResultExpr,
			},
		},
	}

	return queryAgg, nil
}

func (p *parser) callonFormatBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatBlock1(stack["formatArgExpr"])
}

func (c *current) onFormatArgumentsList1(first, rest any) (any, error) {
	restSlice := rest.([]any)

	numOptions := 1 + len(restSlice)

	formatResultExpr := getDefaultFormatResultsExpr()

	for i := 0; i < numOptions; i++ {
		var currFormatExpr *FormatResultsRequestArguments

		if i == 0 {
			currFormatExpr = first.(*FormatResultsRequestArguments)
		} else {
			separator := restSlice[i-1].([]any)
			currFormatExpr = separator[1].(*FormatResultsRequestArguments)
		}

		switch currFormatExpr.argOption {
		case "mvsep":
			formatResultExpr.MVSeparator = currFormatExpr.formatResultExpr.MVSeparator
		case "maxresults":
			formatResultExpr.MaxResults = currFormatExpr.formatResultExpr.MaxResults
		case "emptystr":
			formatResultExpr.EmptyString = currFormatExpr.formatResultExpr.EmptyString
		case "rowColOptions":
			formatResultExpr.RowColOptions = currFormatExpr.formatResultExpr.RowColOptions
		default:
			return nil, fmt.Errorf("not a valid Format Result Argument: %v", currFormatExpr.argOption)
		}
	}

	return formatResultExpr, nil
}

func (p *parser) callonFormatArgumentsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArgumentsList1(stack["first"], stack["rest"])
}

func (c *current) onFormatArgument1(argExpr any) (any, error) {
	return argExpr, nil
}

func (p *parser) callonFormatArgument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArgument1(stack["argExpr"])
}

func (c *current) onFormatSeparator1(str any) (any, error) {
	return &FormatResultsRequestArguments{
		argOption: "mvsep",
		formatResultExpr: &structs.FormatResultsRequest{
			MVSeparator: removeQuotes(str),
		},
	}, nil
}

func (p *parser) callonFormatSeparator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatSeparator1(stack["str"])
}

func (c *current) onFormatMaxResults1(numStr any) (any, error) {
	num, err := strconv.ParseUint(numStr.(string), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("Invalid Max results value is set for format: (%v): Error=%v", numStr.(string), err)
	}
	return &FormatResultsRequestArguments{
		argOption: "maxresults",
		formatResultExpr: &structs.FormatResultsRequest{
			MaxResults: num,
		},
	}, nil
}

func (p *parser) callonFormatMaxResults1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatMaxResults1(stack["numStr"])
}

func (c *current) onFormatEmptyStr1(str any) (any, error) {
	return &FormatResultsRequestArguments{
		argOption: "emptystr",
		formatResultExpr: &structs.FormatResultsRequest{
			EmptyString: removeQuotes(str),
		},
	}, nil
}

func (p *parser) callonFormatEmptyStr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatEmptyStr1(stack["str"])
}

func (c *current) onFormatRowColOptions1(rowPrefix, colPrefix, colSeparator, colEnd, rowSeparator, rowEnd any) (any, error) {
	rowColOptions := &structs.RowColOptions{
		RowPrefix:       removeQuotes(rowPrefix),
		ColumnPrefix:    removeQuotes(colPrefix),
		ColumnSeparator: removeQuotes(colSeparator),
		ColumnEnd:       removeQuotes(colEnd),
		RowSeparator:    removeQuotes(rowSeparator),
		RowEnd:          removeQuotes(rowEnd),
	}

	return &FormatResultsRequestArguments{
		argOption: "rowColOptions",
		formatResultExpr: &structs.FormatResultsRequest{
			RowColOptions: rowColOptions,
		},
	}, nil
}

func (p *parser) callonFormatRowColOptions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatRowColOptions1(stack["rowPrefix"], stack["colPrefix"], stack["colSeparator"], stack["colEnd"], stack["rowSeparator"], stack["rowEnd"])
}

func (c *current) onEventCountBlock1(eventCountExpr any) (any, error) {
	if eventCountExpr == nil {
		return createEventCountExpr([]string{"*"}, true, false, true)
	}
	return eventCountExpr, nil
}

func (p *parser) callonEventCountBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEventCountBlock1(stack["eventCountExpr"])
}

func (c *current) onEventCountArgumentsList1(first, rest any) (any, error) {

	restSlice := rest.([]any)

	indices := []string{}
	list_vix, report_size, summarize := true, false, true

	numArgs := 0
	if first != nil {
		numArgs++
	}
	numArgs += len(restSlice)

	for i := 0; i < numArgs; i++ {
		var arg string
		if i == 0 && first != nil {
			arg = first.(string)
		} else {
			separator := restSlice[i-1].([]any)
			arg = separator[1].(string)
		}

		switch {
		case strings.HasPrefix(arg, "index="):
			indices = append(indices, strings.TrimPrefix(arg, "index="))
		case strings.HasPrefix(arg, "list_vix="):
			var err error
			list_vix, err = strconv.ParseBool(strings.TrimPrefix(arg, "list_vix="))
			if err != nil {
				return nil, fmt.Errorf("EventCountArguments: Invalid value for list_vix: %v", err)
			}
		case strings.HasPrefix(arg, "report_size="):
			var err error
			report_size, err = strconv.ParseBool(strings.TrimPrefix(arg, "report_size="))
			if err != nil {
				return nil, fmt.Errorf("EventCountArguments: Invalid value for report_size: %v", err)
			}
		case strings.HasPrefix(arg, "summarize="):
			var err error
			summarize, err = strconv.ParseBool(strings.TrimPrefix(arg, "summarize="))
			if err != nil {
				return nil, fmt.Errorf("EventCountArguments: Invalid value for summarize: %v", err)
			}
		default:
			return nil, fmt.Errorf("EventCountArguments: Invalid EventCount Argument: %v", arg)
		}
	}

	// If no indices were provided, use the default value "*"
	if len(indices) == 0 {
		indices = append(indices, "*")
	}

	return createEventCountExpr(indices, list_vix, report_size, summarize)
}

func (p *parser) callonEventCountArgumentsList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEventCountArgumentsList1(stack["first"], stack["rest"])
}

func (c *current) onEventCountArgument1(arg any) (any, error) {
	return arg, nil
}

func (p *parser) callonEventCountArgument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEventCountArgument1(stack["arg"])
}

func (c *current) onIndexField1(index any) (any, error) {
	return "index=" + index.(string), nil
}

func (p *parser) callonIndexField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexField1(stack["index"])
}

func (c *current) onSummarizeField1(field any) (any, error) {
	return "summarize=" + strconv.FormatBool(field.(bool)), nil
}

func (p *parser) callonSummarizeField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSummarizeField1(stack["field"])
}

func (c *current) onReportSizeField1(field any) (any, error) {
	return "report_size=" + strconv.FormatBool(field.(bool)), nil
}

func (p *parser) callonReportSizeField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReportSizeField1(stack["field"])
}

func (c *current) onListVixField1(field any) (any, error) {
	return "list_vix=" + strconv.FormatBool(field.(bool)), nil
}

func (p *parser) callonListVixField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListVixField1(stack["field"])
}

func (c *current) onIndexName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexName1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize {
		val, ok = p.parseRuleMemoize(rule)
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
