// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.3
// source: pkg/loki/stats.proto

package log

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/gogo/protobuf/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Result contains LogQL query statistics.
type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summary  *Summary  `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	Querier  *Querier  `protobuf:"bytes,2,opt,name=querier,proto3" json:"querier,omitempty"`
	Ingester *Ingester `protobuf:"bytes,3,opt,name=ingester,proto3" json:"ingester,omitempty"`
	Caches   *Caches   `protobuf:"bytes,4,opt,name=caches,proto3" json:"caches,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_loki_stats_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_loki_stats_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_pkg_loki_stats_proto_rawDescGZIP(), []int{0}
}

func (x *Result) GetSummary() *Summary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *Result) GetQuerier() *Querier {
	if x != nil {
		return x.Querier
	}
	return nil
}

func (x *Result) GetIngester() *Ingester {
	if x != nil {
		return x.Ingester
	}
	return nil
}

func (x *Result) GetCaches() *Caches {
	if x != nil {
		return x.Caches
	}
	return nil
}

type Caches struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunk  *Cache `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
	Index  *Cache `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	Result *Cache `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *Caches) Reset() {
	*x = Caches{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_loki_stats_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Caches) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Caches) ProtoMessage() {}

func (x *Caches) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_loki_stats_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Caches.ProtoReflect.Descriptor instead.
func (*Caches) Descriptor() ([]byte, []int) {
	return file_pkg_loki_stats_proto_rawDescGZIP(), []int{1}
}

func (x *Caches) GetChunk() *Cache {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *Caches) GetIndex() *Cache {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *Caches) GetResult() *Cache {
	if x != nil {
		return x.Result
	}
	return nil
}

// Summary is the summary of a query statistics.
type Summary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total bytes processed per second.
	BytesProcessedPerSecond int64 `protobuf:"varint,1,opt,name=bytesProcessedPerSecond,proto3" json:"bytesProcessedPerSecond,omitempty"`
	// Total lines processed per second.
	LinesProcessedPerSecond int64 `protobuf:"varint,2,opt,name=linesProcessedPerSecond,proto3" json:"linesProcessedPerSecond,omitempty"`
	// Total bytes processed.
	TotalBytesProcessed int64 `protobuf:"varint,3,opt,name=totalBytesProcessed,proto3" json:"totalBytesProcessed,omitempty"`
	// Total lines processed.
	TotalLinesProcessed int64 `protobuf:"varint,4,opt,name=totalLinesProcessed,proto3" json:"totalLinesProcessed,omitempty"`
	// Execution time in seconds.
	// In addition to internal calculations this is also returned by the HTTP API.
	// Grafana expects time values to be returned in seconds as float.
	ExecTime float64 `protobuf:"fixed64,5,opt,name=execTime,proto3" json:"execTime,omitempty"`
	// Queue time in seconds.
	// In addition to internal calculations this is also returned by the HTTP API.
	// Grafana expects time values to be returned in seconds as float.
	QueueTime float64 `protobuf:"fixed64,6,opt,name=queueTime,proto3" json:"queueTime,omitempty"`
	// Subqueries exists for backwards compatibility reasons and is deprecated. Do not use.
	// Instead use splits and shards
	Subqueries int64 `protobuf:"varint,7,opt,name=subqueries,proto3" json:"subqueries,omitempty"`
	// Total number of result entries returned
	TotalEntriesReturned int64 `protobuf:"varint,8,opt,name=totalEntriesReturned,proto3" json:"totalEntriesReturned,omitempty"`
	Splits               int64 `protobuf:"varint,9,opt,name=splits,proto3" json:"splits,omitempty"`
	Shards               int64 `protobuf:"varint,10,opt,name=shards,proto3" json:"shards,omitempty"`
}

func (x *Summary) Reset() {
	*x = Summary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_loki_stats_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Summary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Summary) ProtoMessage() {}

func (x *Summary) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_loki_stats_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Summary.ProtoReflect.Descriptor instead.
func (*Summary) Descriptor() ([]byte, []int) {
	return file_pkg_loki_stats_proto_rawDescGZIP(), []int{2}
}

func (x *Summary) GetBytesProcessedPerSecond() int64 {
	if x != nil {
		return x.BytesProcessedPerSecond
	}
	return 0
}

func (x *Summary) GetLinesProcessedPerSecond() int64 {
	if x != nil {
		return x.LinesProcessedPerSecond
	}
	return 0
}

func (x *Summary) GetTotalBytesProcessed() int64 {
	if x != nil {
		return x.TotalBytesProcessed
	}
	return 0
}

func (x *Summary) GetTotalLinesProcessed() int64 {
	if x != nil {
		return x.TotalLinesProcessed
	}
	return 0
}

func (x *Summary) GetExecTime() float64 {
	if x != nil {
		return x.ExecTime
	}
	return 0
}

func (x *Summary) GetQueueTime() float64 {
	if x != nil {
		return x.QueueTime
	}
	return 0
}

func (x *Summary) GetSubqueries() int64 {
	if x != nil {
		return x.Subqueries
	}
	return 0
}

func (x *Summary) GetTotalEntriesReturned() int64 {
	if x != nil {
		return x.TotalEntriesReturned
	}
	return 0
}

func (x *Summary) GetSplits() int64 {
	if x != nil {
		return x.Splits
	}
	return 0
}

func (x *Summary) GetShards() int64 {
	if x != nil {
		return x.Shards
	}
	return 0
}

type Querier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Store *Store `protobuf:"bytes,1,opt,name=store,proto3" json:"store,omitempty"`
}

func (x *Querier) Reset() {
	*x = Querier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_loki_stats_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Querier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Querier) ProtoMessage() {}

func (x *Querier) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_loki_stats_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Querier.ProtoReflect.Descriptor instead.
func (*Querier) Descriptor() ([]byte, []int) {
	return file_pkg_loki_stats_proto_rawDescGZIP(), []int{3}
}

func (x *Querier) GetStore() *Store {
	if x != nil {
		return x.Store
	}
	return nil
}

type Ingester struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total ingester reached for this query.
	TotalReached int32 `protobuf:"varint,1,opt,name=totalReached,proto3" json:"totalReached,omitempty"`
	// Total of chunks matched by the query from ingesters
	TotalChunksMatched int64 `protobuf:"varint,2,opt,name=totalChunksMatched,proto3" json:"totalChunksMatched,omitempty"`
	// Total of batches sent from ingesters.
	TotalBatches int64 `protobuf:"varint,3,opt,name=totalBatches,proto3" json:"totalBatches,omitempty"`
	// Total lines sent by ingesters.
	TotalLinesSent int64  `protobuf:"varint,4,opt,name=totalLinesSent,proto3" json:"totalLinesSent,omitempty"`
	Store          *Store `protobuf:"bytes,5,opt,name=store,proto3" json:"store,omitempty"`
}

func (x *Ingester) Reset() {
	*x = Ingester{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_loki_stats_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ingester) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ingester) ProtoMessage() {}

func (x *Ingester) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_loki_stats_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ingester.ProtoReflect.Descriptor instead.
func (*Ingester) Descriptor() ([]byte, []int) {
	return file_pkg_loki_stats_proto_rawDescGZIP(), []int{4}
}

func (x *Ingester) GetTotalReached() int32 {
	if x != nil {
		return x.TotalReached
	}
	return 0
}

func (x *Ingester) GetTotalChunksMatched() int64 {
	if x != nil {
		return x.TotalChunksMatched
	}
	return 0
}

func (x *Ingester) GetTotalBatches() int64 {
	if x != nil {
		return x.TotalBatches
	}
	return 0
}

func (x *Ingester) GetTotalLinesSent() int64 {
	if x != nil {
		return x.TotalLinesSent
	}
	return 0
}

func (x *Ingester) GetStore() *Store {
	if x != nil {
		return x.Store
	}
	return nil
}

type Store struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The total of chunk reference fetched from index.
	TotalChunksRef int64 `protobuf:"varint,1,opt,name=totalChunksRef,proto3" json:"totalChunksRef,omitempty"`
	// Total number of chunks fetched.
	TotalChunksDownloaded int64 `protobuf:"varint,2,opt,name=totalChunksDownloaded,proto3" json:"totalChunksDownloaded,omitempty"`
	// Time spent fetching chunks in nanoseconds.
	ChunksDownloadTime int64  `protobuf:"varint,3,opt,name=chunksDownloadTime,proto3" json:"chunksDownloadTime,omitempty"`
	Chunk              *Chunk `protobuf:"bytes,4,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (x *Store) Reset() {
	*x = Store{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_loki_stats_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Store) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Store) ProtoMessage() {}

func (x *Store) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_loki_stats_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Store.ProtoReflect.Descriptor instead.
func (*Store) Descriptor() ([]byte, []int) {
	return file_pkg_loki_stats_proto_rawDescGZIP(), []int{5}
}

func (x *Store) GetTotalChunksRef() int64 {
	if x != nil {
		return x.TotalChunksRef
	}
	return 0
}

func (x *Store) GetTotalChunksDownloaded() int64 {
	if x != nil {
		return x.TotalChunksDownloaded
	}
	return 0
}

func (x *Store) GetChunksDownloadTime() int64 {
	if x != nil {
		return x.ChunksDownloadTime
	}
	return 0
}

func (x *Store) GetChunk() *Chunk {
	if x != nil {
		return x.Chunk
	}
	return nil
}

type Chunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total bytes processed but was already in memory. (found in the headchunk)
	HeadChunkBytes int64 `protobuf:"varint,4,opt,name=headChunkBytes,proto3" json:"headChunkBytes,omitempty"`
	// Total lines processed but was already in memory. (found in the headchunk)
	HeadChunkLines int64 `protobuf:"varint,5,opt,name=headChunkLines,proto3" json:"headChunkLines,omitempty"`
	// Total bytes decompressed and processed from chunks.
	DecompressedBytes int64 `protobuf:"varint,6,opt,name=decompressedBytes,proto3" json:"decompressedBytes,omitempty"`
	// Total lines decompressed and processed from chunks.
	DecompressedLines int64 `protobuf:"varint,7,opt,name=decompressedLines,proto3" json:"decompressedLines,omitempty"`
	// Total bytes of compressed chunks (blocks) processed.
	CompressedBytes int64 `protobuf:"varint,8,opt,name=compressedBytes,proto3" json:"compressedBytes,omitempty"`
	// Total duplicates found while processing.
	TotalDuplicates int64 `protobuf:"varint,9,opt,name=totalDuplicates,proto3" json:"totalDuplicates,omitempty"`
}

func (x *Chunk) Reset() {
	*x = Chunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_loki_stats_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk) ProtoMessage() {}

func (x *Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_loki_stats_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk.ProtoReflect.Descriptor instead.
func (*Chunk) Descriptor() ([]byte, []int) {
	return file_pkg_loki_stats_proto_rawDescGZIP(), []int{6}
}

func (x *Chunk) GetHeadChunkBytes() int64 {
	if x != nil {
		return x.HeadChunkBytes
	}
	return 0
}

func (x *Chunk) GetHeadChunkLines() int64 {
	if x != nil {
		return x.HeadChunkLines
	}
	return 0
}

func (x *Chunk) GetDecompressedBytes() int64 {
	if x != nil {
		return x.DecompressedBytes
	}
	return 0
}

func (x *Chunk) GetDecompressedLines() int64 {
	if x != nil {
		return x.DecompressedLines
	}
	return 0
}

func (x *Chunk) GetCompressedBytes() int64 {
	if x != nil {
		return x.CompressedBytes
	}
	return 0
}

func (x *Chunk) GetTotalDuplicates() int64 {
	if x != nil {
		return x.TotalDuplicates
	}
	return 0
}

type Cache struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntriesFound     int32 `protobuf:"varint,1,opt,name=entriesFound,proto3" json:"entriesFound,omitempty"`
	EntriesRequested int32 `protobuf:"varint,2,opt,name=entriesRequested,proto3" json:"entriesRequested,omitempty"`
	EntriesStored    int32 `protobuf:"varint,3,opt,name=entriesStored,proto3" json:"entriesStored,omitempty"`
	BytesReceived    int64 `protobuf:"varint,4,opt,name=bytesReceived,proto3" json:"bytesReceived,omitempty"`
	BytesSent        int64 `protobuf:"varint,5,opt,name=bytesSent,proto3" json:"bytesSent,omitempty"`
	Requests         int32 `protobuf:"varint,6,opt,name=requests,proto3" json:"requests,omitempty"`
	DownloadTime     int64 `protobuf:"varint,7,opt,name=downloadTime,proto3" json:"downloadTime,omitempty"`
}

func (x *Cache) Reset() {
	*x = Cache{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_loki_stats_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cache) ProtoMessage() {}

func (x *Cache) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_loki_stats_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cache.ProtoReflect.Descriptor instead.
func (*Cache) Descriptor() ([]byte, []int) {
	return file_pkg_loki_stats_proto_rawDescGZIP(), []int{7}
}

func (x *Cache) GetEntriesFound() int32 {
	if x != nil {
		return x.EntriesFound
	}
	return 0
}

func (x *Cache) GetEntriesRequested() int32 {
	if x != nil {
		return x.EntriesRequested
	}
	return 0
}

func (x *Cache) GetEntriesStored() int32 {
	if x != nil {
		return x.EntriesStored
	}
	return 0
}

func (x *Cache) GetBytesReceived() int64 {
	if x != nil {
		return x.BytesReceived
	}
	return 0
}

func (x *Cache) GetBytesSent() int64 {
	if x != nil {
		return x.BytesSent
	}
	return 0
}

func (x *Cache) GetRequests() int32 {
	if x != nil {
		return x.Requests
	}
	return 0
}

func (x *Cache) GetDownloadTime() int64 {
	if x != nil {
		return x.DownloadTime
	}
	return 0
}

var File_pkg_loki_stats_proto protoreflect.FileDescriptor

var file_pkg_loki_stats_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x6b, 0x67, 0x2f, 0x6c, 0x6f, 0x6b, 0x69, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6c, 0x6f, 0x6b, 0x69, 0x1a, 0x1b, 0x70, 0x6b,
	0x67, 0x2f, 0x6c, 0x6f, 0x6b, 0x69, 0x2f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x2f, 0x67,
	0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xef, 0x01, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6c, 0x6f, 0x6b, 0x69, 0x2e, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x42, 0x0f, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x38,
	0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6c, 0x6f, 0x6b, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72, 0x42, 0x0f,
	0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72, 0x52,
	0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x08, 0x69, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x6f, 0x6b,
	0x69, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x42, 0x10, 0xc8, 0xde, 0x1f, 0x00,
	0xea, 0xde, 0x1f, 0x08, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x52, 0x08, 0x69, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x06, 0x63, 0x61, 0x63, 0x68, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6c, 0x6f, 0x6b, 0x69, 0x2e, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x73, 0x42, 0x0d, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x05, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x52, 0x06, 0x63, 0x61, 0x63, 0x68, 0x65, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x06,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6c, 0x6f, 0x6b, 0x69, 0x2e, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x42, 0x0d, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x05, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6c, 0x6f, 0x6b, 0x69, 0x2e, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x42, 0x0d, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6c, 0x6f, 0x6b,
	0x69, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x42, 0x0e, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0xea, 0x04, 0x0a, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x55, 0x0a, 0x17, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x1b, 0xea, 0xde,
	0x1f, 0x17, 0x62, 0x79, 0x74, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x52, 0x17, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x12, 0x55, 0x0a, 0x17, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x1b, 0xea, 0xde, 0x1f, 0x17, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x52, 0x17, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x49, 0x0a, 0x13, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x17, 0xea, 0xde, 0x1f, 0x13, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x52,
	0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e,
	0x65, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x17, 0xea, 0xde, 0x1f, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x65,
	0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12,
	0x28, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x42, 0x0c, 0xea, 0xde, 0x1f, 0x08, 0x65, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x08, 0x65, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0d, 0xea, 0xde,
	0x1f, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0e, 0xea, 0xde, 0x1f, 0x0a,
	0x73, 0x75, 0x62, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x71,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x18, 0xea, 0xde, 0x1f, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x52, 0x14,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x0a, 0xea, 0xde, 0x1f, 0x06, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x73,
	0x52, 0x06, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0a, 0xea, 0xde, 0x1f, 0x06, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x73, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x22, 0x3b, 0x0a, 0x07,
	0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6c, 0x6f, 0x6b, 0x69, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x42, 0x0d, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x05, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22, 0xac, 0x02, 0x0a, 0x08, 0x49, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xde,
	0x1f, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x52, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x12,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x16, 0xea, 0xde, 0x1f, 0x12, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x10, 0xea, 0xde, 0x1f, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x12, 0xea, 0xde, 0x1f, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e,
	0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e,
	0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6c, 0x6f, 0x6b, 0x69, 0x2e, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x42, 0x0d, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x05, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x8e, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x73, 0x52, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x12, 0xea, 0xde, 0x1f, 0x0e,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x66, 0x52, 0x0e,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x66, 0x12, 0x4f,
	0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x19, 0xea,
	0xde, 0x1f, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12,
	0x46, 0x0a, 0x12, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x16, 0xea, 0xde, 0x1f,
	0x12, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x12, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6c, 0x6f, 0x6b, 0x69, 0x2e, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x42, 0x0d, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x05, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x87, 0x03, 0x0a, 0x05, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x12, 0x3a, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x12, 0xea, 0xde, 0x1f,
	0x0e, 0x68, 0x65, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52,
	0x0e, 0x68, 0x65, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x3a, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4c, 0x69, 0x6e, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x12, 0xea, 0xde, 0x1f, 0x0e, 0x68, 0x65, 0x61,
	0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x0e, 0x68, 0x65, 0x61,
	0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x11, 0x64,
	0x65, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x15, 0xea, 0xde, 0x1f, 0x11, 0x64, 0x65, 0x63, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x11, 0x64,
	0x65, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x43, 0x0a, 0x11, 0x64, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x4c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x15, 0xea, 0xde, 0x1f,
	0x11, 0x64, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4c, 0x69, 0x6e,
	0x65, 0x73, 0x52, 0x11, 0x64, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x13,
	0xea, 0xde, 0x1f, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x13, 0xea,
	0xde, 0x1f, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x73, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x73, 0x22, 0xfe, 0x02, 0x0a, 0x05, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x34, 0x0a,
	0x0c, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x10, 0xea, 0xde, 0x1f, 0x0c, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x46, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x40, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x14, 0xea,
	0xde, 0x1f, 0x10, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x11, 0xea, 0xde,
	0x1f, 0x0d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x52,
	0x0d, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x37,
	0x0a, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x11, 0xea, 0xde, 0x1f, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x53, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0d, 0xea, 0xde, 0x1f, 0x09,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x53, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c, 0xea, 0xde, 0x1f, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x34,
	0x0a, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x10, 0xea, 0xde, 0x1f, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0xc8, 0xe2, 0x1e, 0x01, 0xd0, 0xe2, 0x1e, 0x01, 0x5a, 0x04,
	0x2f, 0x6c, 0x6f, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_loki_stats_proto_rawDescOnce sync.Once
	file_pkg_loki_stats_proto_rawDescData = file_pkg_loki_stats_proto_rawDesc
)

func file_pkg_loki_stats_proto_rawDescGZIP() []byte {
	file_pkg_loki_stats_proto_rawDescOnce.Do(func() {
		file_pkg_loki_stats_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_loki_stats_proto_rawDescData)
	})
	return file_pkg_loki_stats_proto_rawDescData
}

var file_pkg_loki_stats_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_pkg_loki_stats_proto_goTypes = []interface{}{
	(*Result)(nil),   // 0: loki.Result
	(*Caches)(nil),   // 1: loki.Caches
	(*Summary)(nil),  // 2: loki.Summary
	(*Querier)(nil),  // 3: loki.Querier
	(*Ingester)(nil), // 4: loki.Ingester
	(*Store)(nil),    // 5: loki.Store
	(*Chunk)(nil),    // 6: loki.Chunk
	(*Cache)(nil),    // 7: loki.Cache
}
var file_pkg_loki_stats_proto_depIdxs = []int32{
	2,  // 0: loki.Result.summary:type_name -> loki.Summary
	3,  // 1: loki.Result.querier:type_name -> loki.Querier
	4,  // 2: loki.Result.ingester:type_name -> loki.Ingester
	1,  // 3: loki.Result.caches:type_name -> loki.Caches
	7,  // 4: loki.Caches.chunk:type_name -> loki.Cache
	7,  // 5: loki.Caches.index:type_name -> loki.Cache
	7,  // 6: loki.Caches.result:type_name -> loki.Cache
	5,  // 7: loki.Querier.store:type_name -> loki.Store
	5,  // 8: loki.Ingester.store:type_name -> loki.Store
	6,  // 9: loki.Store.chunk:type_name -> loki.Chunk
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_pkg_loki_stats_proto_init() }
func file_pkg_loki_stats_proto_init() {
	if File_pkg_loki_stats_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_loki_stats_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_loki_stats_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Caches); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_loki_stats_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Summary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_loki_stats_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Querier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_loki_stats_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ingester); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_loki_stats_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Store); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_loki_stats_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_loki_stats_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cache); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_loki_stats_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_loki_stats_proto_goTypes,
		DependencyIndexes: file_pkg_loki_stats_proto_depIdxs,
		MessageInfos:      file_pkg_loki_stats_proto_msgTypes,
	}.Build()
	File_pkg_loki_stats_proto = out.File
	file_pkg_loki_stats_proto_rawDesc = nil
	file_pkg_loki_stats_proto_goTypes = nil
	file_pkg_loki_stats_proto_depIdxs = nil
}
